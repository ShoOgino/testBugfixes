{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef).mjava","commits":[{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef,boolean).mjava","sourceNew":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" divisor=\" + indexReader.getDivisor() + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = BytesRef.getUTF8SortedAsUnicodeComparator().compare(term, target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || BytesRef.getUTF8SortedAsUnicodeComparator().compare(target, nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;\n          blocksSinceSeek = 0;          \n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.bytes[common]&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","sourceOld":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target, final boolean useCache) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" useCache=\" + useCache + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" divisor=\" + indexReader.getDivisor() + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        // Check cache\n        if (useCache) {\n          fieldTerm.term = target;\n          // TODO: should we differentiate \"frozen\"\n          // TermState (ie one that was cloned and\n          // cached/returned by termState()) from the\n          // malleable (primary) one?\n          final TermState cachedState = termsCache.get(fieldTerm);\n          if (cachedState != null) {\n            seekPending = true;\n            //System.out.println(\"  cached!\");\n            seekExact(target, cachedState);\n            //System.out.println(\"  term=\" + term.utf8ToString());\n            return SeekStatus.FOUND;\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = BytesRef.getUTF8SortedAsUnicodeComparator().compare(term, target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || BytesRef.getUTF8SortedAsUnicodeComparator().compare(target, nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;\n          blocksSinceSeek = 0;          \n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.bytes[common]&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n\n                if (useCache) {\n                  // Store in cache\n                  decodeMetaData();\n                  //System.out.println(\"  cache! state=\" + state);\n                  termsCache.put(new FieldAndTerm(fieldTerm), (BlockTermState) state.clone());\n                }\n\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" divisor=\" + indexReader.getDivisor() + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = BytesRef.getUTF8SortedAsUnicodeComparator().compare(term, target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || BytesRef.getUTF8SortedAsUnicodeComparator().compare(target, nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;      \n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.bytes[common]&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","sourceOld":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" divisor=\" + indexReader.getDivisor() + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = BytesRef.getUTF8SortedAsUnicodeComparator().compare(term, target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || BytesRef.getUTF8SortedAsUnicodeComparator().compare(target, nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;\n          blocksSinceSeek = 0;          \n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.bytes[common]&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef,boolean).mjava","sourceNew":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" divisor=\" + indexReader.getDivisor() + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = BytesRef.getUTF8SortedAsUnicodeComparator().compare(term, target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || BytesRef.getUTF8SortedAsUnicodeComparator().compare(target, nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;      \n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.bytes[common]&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","sourceOld":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target, final boolean useCache) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" useCache=\" + useCache + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" divisor=\" + indexReader.getDivisor() + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        // Check cache\n        if (useCache) {\n          fieldTerm.term = target;\n          // TODO: should we differentiate \"frozen\"\n          // TermState (ie one that was cloned and\n          // cached/returned by termState()) from the\n          // malleable (primary) one?\n          final TermState cachedState = termsCache.get(fieldTerm);\n          if (cachedState != null) {\n            seekPending = true;\n            //System.out.println(\"  cached!\");\n            seekExact(target, cachedState);\n            //System.out.println(\"  term=\" + term.utf8ToString());\n            return SeekStatus.FOUND;\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = BytesRef.getUTF8SortedAsUnicodeComparator().compare(term, target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || BytesRef.getUTF8SortedAsUnicodeComparator().compare(target, nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;\n          blocksSinceSeek = 0;          \n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.bytes[common]&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n\n                if (useCache) {\n                  // Store in cache\n                  decodeMetaData();\n                  //System.out.println(\"  cache! state=\" + state);\n                  termsCache.put(new FieldAndTerm(fieldTerm), (BlockTermState) state.clone());\n                }\n\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" divisor=\" + indexReader.getDivisor() + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = BytesRef.getUTF8SortedAsUnicodeComparator().compare(term, target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || BytesRef.getUTF8SortedAsUnicodeComparator().compare(target, nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;\n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.bytes[common]&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","sourceOld":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" divisor=\" + indexReader.getDivisor() + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = BytesRef.getUTF8SortedAsUnicodeComparator().compare(term, target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || BytesRef.getUTF8SortedAsUnicodeComparator().compare(target, nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;      \n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.bytes[common]&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" divisor=\" + indexReader.getDivisor() + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = BytesRef.getUTF8SortedAsUnicodeComparator().compare(term, target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || BytesRef.getUTF8SortedAsUnicodeComparator().compare(target, nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;\n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.bytes[common]&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","sourceOld":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" divisor=\" + indexReader.getDivisor() + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = BytesRef.getUTF8SortedAsUnicodeComparator().compare(term, target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || BytesRef.getUTF8SortedAsUnicodeComparator().compare(target, nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;      \n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.bytes[common]&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = BytesRef.getUTF8SortedAsUnicodeComparator().compare(term, target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || BytesRef.getUTF8SortedAsUnicodeComparator().compare(target, nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;\n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n          //System.out.println(\"cycle common=\" + common + \" termBlockPrefix=\" + termBlockPrefix + \" term=\" + term + \" target=\" + target);\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.bytes[common]&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","sourceOld":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" divisor=\" + indexReader.getDivisor() + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = BytesRef.getUTF8SortedAsUnicodeComparator().compare(term, target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || BytesRef.getUTF8SortedAsUnicodeComparator().compare(target, nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;\n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.bytes[common]&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dece2a6aa33295eda8cfdd44c17b30f2b5a68cd1","date":1403000163,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" divisor=\" + indexReader.getDivisor() + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = BytesRef.getUTF8SortedAsUnicodeComparator().compare(term, target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || BytesRef.getUTF8SortedAsUnicodeComparator().compare(target, nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;\n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.bytes[common]&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","sourceOld":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = BytesRef.getUTF8SortedAsUnicodeComparator().compare(term, target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || BytesRef.getUTF8SortedAsUnicodeComparator().compare(target, nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;\n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n          //System.out.println(\"cycle common=\" + common + \" termBlockPrefix=\" + termBlockPrefix + \" term=\" + term + \" target=\" + target);\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.bytes[common]&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" divisor=\" + indexReader.getDivisor() + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = BytesRef.getUTF8SortedAsUnicodeComparator().compare(term.get(), target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || BytesRef.getUTF8SortedAsUnicodeComparator().compare(target, nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;\n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.byteAt(common)&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.setLength(termBlockPrefix + suffix);\n                term.grow(term.length());\n                termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.setLength(termBlockPrefix + suffix);\n              term.grow(term.length());\n              termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.setLength(termBlockPrefix + suffix);\n                term.grow(term.length());\n                termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.setLength(termBlockPrefix + suffix);\n              term.grow(term.length());\n              termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.setLength(termBlockPrefix + suffix);\n              term.grow(term.length());\n              termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","sourceOld":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" divisor=\" + indexReader.getDivisor() + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = BytesRef.getUTF8SortedAsUnicodeComparator().compare(term, target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || BytesRef.getUTF8SortedAsUnicodeComparator().compare(target, nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;\n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.bytes[common]&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.length = termBlockPrefix + suffix;\n                if (term.bytes.length < term.length) {\n                  term.grow(term.length);\n                }\n                termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.length = termBlockPrefix + suffix;\n              if (term.bytes.length < term.length) {\n                term.grow(term.length);\n              }\n              termSuffixesReader.readBytes(term.bytes, termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","bugFix":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b51ee14e04858fe1f47f241ac29486de23b215b5","date":1456734355,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" divisor=\" + indexReader.getDivisor() + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = term.get().compareTo(target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || target.compareTo(nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;\n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.byteAt(common)&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.setLength(termBlockPrefix + suffix);\n                term.grow(term.length());\n                termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.setLength(termBlockPrefix + suffix);\n              term.grow(term.length());\n              termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.setLength(termBlockPrefix + suffix);\n                term.grow(term.length());\n                termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.setLength(termBlockPrefix + suffix);\n              term.grow(term.length());\n              termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.setLength(termBlockPrefix + suffix);\n              term.grow(term.length());\n              termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","sourceOld":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" divisor=\" + indexReader.getDivisor() + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = BytesRef.getUTF8SortedAsUnicodeComparator().compare(term.get(), target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || BytesRef.getUTF8SortedAsUnicodeComparator().compare(target, nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;\n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.byteAt(common)&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.setLength(termBlockPrefix + suffix);\n                term.grow(term.length());\n                termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.setLength(termBlockPrefix + suffix);\n              term.grow(term.length());\n              termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.setLength(termBlockPrefix + suffix);\n                term.grow(term.length());\n                termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.setLength(termBlockPrefix + suffix);\n              term.grow(term.length());\n              termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.setLength(termBlockPrefix + suffix);\n              term.grow(term.length());\n              termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsReader.FieldReader.SegmentTermsEnum#seekCeil(BytesRef).mjava","sourceNew":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" divisor=\" + indexReader.getDivisor() + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = term.get().compareTo(target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || target.compareTo(nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;\n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.byteAt(common)&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.setLength(termBlockPrefix + suffix);\n                term.grow(term.length());\n                termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.setLength(termBlockPrefix + suffix);\n              term.grow(term.length());\n              termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.setLength(termBlockPrefix + suffix);\n                term.grow(term.length());\n                termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.setLength(termBlockPrefix + suffix);\n              term.grow(term.length());\n              termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.setLength(termBlockPrefix + suffix);\n              term.grow(term.length());\n              termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","sourceOld":"      // TODO: we may want an alternate mode here which is\n      // \"if you are about to return NOT_FOUND I won't use\n      // the terms data from that\"; eg FuzzyTermsEnum will\n      // (usually) just immediately call seek again if we\n      // return NOT_FOUND so it's a waste for us to fill in\n      // the term that was actually NOT_FOUND\n      @Override\n      public SeekStatus seekCeil(final BytesRef target) throws IOException {\n\n        if (indexEnum == null) {\n          throw new IllegalStateException(\"terms index was not loaded\");\n        }\n   \n        //System.out.println(\"BTR.seek seg=\" + segment + \" target=\" + fieldInfo.name + \":\" + target.utf8ToString() + \" \" + target + \" current=\" + term().utf8ToString() + \" \" + term() + \" indexIsCurrent=\" + indexIsCurrent + \" didIndexNext=\" + didIndexNext + \" seekPending=\" + seekPending + \" divisor=\" + indexReader.getDivisor() + \" this=\"  + this);\n        if (didIndexNext) {\n          if (nextIndexTerm == null) {\n            //System.out.println(\"  nextIndexTerm=null\");\n          } else {\n            //System.out.println(\"  nextIndexTerm=\" + nextIndexTerm.utf8ToString());\n          }\n        }\n\n        boolean doSeek = true;\n\n        // See if we can avoid seeking, because target term\n        // is after current term but before next index term:\n        if (indexIsCurrent) {\n\n          final int cmp = BytesRef.getUTF8SortedAsUnicodeComparator().compare(term.get(), target);\n\n          if (cmp == 0) {\n            // Already at the requested term\n            return SeekStatus.FOUND;\n          } else if (cmp < 0) {\n\n            // Target term is after current term\n            if (!didIndexNext) {\n              if (indexEnum.next() == -1) {\n                nextIndexTerm = null;\n              } else {\n                nextIndexTerm = indexEnum.term();\n              }\n              //System.out.println(\"  now do index next() nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n              didIndexNext = true;\n            }\n\n            if (nextIndexTerm == null || BytesRef.getUTF8SortedAsUnicodeComparator().compare(target, nextIndexTerm) < 0) {\n              // Optimization: requested term is within the\n              // same term block we are now in; skip seeking\n              // (but do scanning):\n              doSeek = false;\n              //System.out.println(\"  skip seek: nextIndexTerm=\" + (nextIndexTerm == null ? \"null\" : nextIndexTerm.utf8ToString()));\n            }\n          }\n        }\n\n        if (doSeek) {\n          //System.out.println(\"  seek\");\n\n          // Ask terms index to find biggest indexed term (=\n          // first term in a block) that's <= our text:\n          in.seek(indexEnum.seek(target));\n          boolean result = nextBlock();\n\n          // Block must exist since, at least, the indexed term\n          // is in the block:\n          assert result;\n\n          indexIsCurrent = true;\n          didIndexNext = false;\n\n          if (doOrd) {\n            state.ord = indexEnum.ord()-1;\n          }\n\n          term.copyBytes(indexEnum.term());\n          //System.out.println(\"  seek: term=\" + term.utf8ToString());\n        } else {\n          //System.out.println(\"  skip seek\");\n          if (state.termBlockOrd == blockTermCount && !nextBlock()) {\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n        }\n\n        seekPending = false;\n\n        int common = 0;\n\n        // Scan within block.  We could do this by calling\n        // _next() and testing the resulting term, but this\n        // is wasteful.  Instead, we first confirm the\n        // target matches the common prefix of this block,\n        // and then we scan the term bytes directly from the\n        // termSuffixesreader's byte[], saving a copy into\n        // the BytesRef term per term.  Only when we return\n        // do we then copy the bytes into the term.\n\n        while(true) {\n\n          // First, see if target term matches common prefix\n          // in this block:\n          if (common < termBlockPrefix) {\n            final int cmp = (term.byteAt(common)&0xFF) - (target.bytes[target.offset + common]&0xFF);\n            if (cmp < 0) {\n\n              // TODO: maybe we should store common prefix\n              // in block header?  (instead of relying on\n              // last term of previous block)\n\n              // Target's prefix is after the common block\n              // prefix, so term cannot be in this block\n              // but it could be in next block.  We\n              // must scan to end-of-block to set common\n              // prefix for next block:\n              if (state.termBlockOrd < blockTermCount) {\n                while(state.termBlockOrd < blockTermCount-1) {\n                  state.termBlockOrd++;\n                  state.ord++;\n                  termSuffixesReader.skipBytes(termSuffixesReader.readVInt());\n                }\n                final int suffix = termSuffixesReader.readVInt();\n                term.setLength(termBlockPrefix + suffix);\n                term.grow(term.length());\n                termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n              }\n              state.ord++;\n              \n              if (!nextBlock()) {\n                indexIsCurrent = false;\n                return SeekStatus.END;\n              }\n              common = 0;\n\n            } else if (cmp > 0) {\n              // Target's prefix is before the common prefix\n              // of this block, so we position to start of\n              // block and return NOT_FOUND:\n              assert state.termBlockOrd == 0;\n\n              final int suffix = termSuffixesReader.readVInt();\n              term.setLength(termBlockPrefix + suffix);\n              term.grow(term.length());\n              termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n              return SeekStatus.NOT_FOUND;\n            } else {\n              common++;\n            }\n\n            continue;\n          }\n\n          // Test every term in this block\n          while (true) {\n            state.termBlockOrd++;\n            state.ord++;\n\n            final int suffix = termSuffixesReader.readVInt();\n            \n            // We know the prefix matches, so just compare the new suffix:\n            final int termLen = termBlockPrefix + suffix;\n            int bytePos = termSuffixesReader.getPosition();\n\n            boolean next = false;\n            final int limit = target.offset + (termLen < target.length ? termLen : target.length);\n            int targetPos = target.offset + termBlockPrefix;\n            while(targetPos < limit) {\n              final int cmp = (termSuffixes[bytePos++]&0xFF) - (target.bytes[targetPos++]&0xFF);\n              if (cmp < 0) {\n                // Current term is still before the target;\n                // keep scanning\n                next = true;\n                break;\n              } else if (cmp > 0) {\n                // Done!  Current term is after target. Stop\n                // here, fill in real term, return NOT_FOUND.\n                term.setLength(termBlockPrefix + suffix);\n                term.grow(term.length());\n                termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (!next && target.length <= termLen) {\n              term.setLength(termBlockPrefix + suffix);\n              term.grow(term.length());\n              termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n\n              if (target.length == termLen) {\n                // Done!  Exact match.  Stop here, fill in\n                // real term, return FOUND.\n                //System.out.println(\"  FOUND\");\n                return SeekStatus.FOUND;\n              } else {\n                //System.out.println(\"  NOT_FOUND\");\n                return SeekStatus.NOT_FOUND;\n              }\n            }\n\n            if (state.termBlockOrd == blockTermCount) {\n              // Must pre-fill term for next block's common prefix\n              term.setLength(termBlockPrefix + suffix);\n              term.grow(term.length());\n              termSuffixesReader.readBytes(term.bytes(), termBlockPrefix, suffix);\n              break;\n            } else {\n              termSuffixesReader.skipBytes(suffix);\n            }\n          }\n\n          // The purpose of the terms dict index is to seek\n          // the enum to the closest index term before the\n          // term we are looking for.  So, we should never\n          // cross another index term (besides the first\n          // one) while we are scanning:\n\n          assert indexIsCurrent;\n\n          if (!nextBlock()) {\n            //System.out.println(\"  END\");\n            indexIsCurrent = false;\n            return SeekStatus.END;\n          }\n          common = 0;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"af2638813028b254a88b418ebeafb541afb49653":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","b51ee14e04858fe1f47f241ac29486de23b215b5"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"dece2a6aa33295eda8cfdd44c17b30f2b5a68cd1":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a45bec74b98f6fc05f52770cfb425739e6563960":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a45bec74b98f6fc05f52770cfb425739e6563960","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b51ee14e04858fe1f47f241ac29486de23b215b5":["af2638813028b254a88b418ebeafb541afb49653"],"dece2a6aa33295eda8cfdd44c17b30f2b5a68cd1":[],"a45bec74b98f6fc05f52770cfb425739e6563960":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["af2638813028b254a88b418ebeafb541afb49653","b51ee14e04858fe1f47f241ac29486de23b215b5"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["dece2a6aa33295eda8cfdd44c17b30f2b5a68cd1"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["a45bec74b98f6fc05f52770cfb425739e6563960"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dece2a6aa33295eda8cfdd44c17b30f2b5a68cd1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}