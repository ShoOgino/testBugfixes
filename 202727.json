{"path":"src/java/org/apache/lucene/index/DocumentsWriter#writeNorms(String,int).mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#writeNorms(String,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Write norms in the \"true\" segment format.  This is\n   *  called only during commit, to create the .nrm file. */\n  void writeNorms(String segmentName, int totalNumDoc) throws IOException {\n\n    IndexOutput normsOut = directory.createOutput(segmentName + \".\" + IndexFileNames.NORMS_EXTENSION);\n\n    try {\n      normsOut.writeBytes(SegmentMerger.NORMS_HEADER, 0, SegmentMerger.NORMS_HEADER.length);\n\n      final int numField = fieldInfos.size();\n\n      for (int fieldIdx=0;fieldIdx<numField;fieldIdx++) {\n        FieldInfo fi = fieldInfos.fieldInfo(fieldIdx);\n        if (fi.isIndexed && !fi.omitNorms) {\n          BufferedNorms n = norms[fieldIdx];\n          final long v;\n          if (n == null)\n            v = 0;\n          else {\n            v = n.out.getFilePointer();\n            n.out.writeTo(normsOut);\n            n.reset();\n          }\n          if (v < totalNumDoc)\n            fillBytes(normsOut, defaultNorm, (int) (totalNumDoc-v));\n        }\n      }\n    } finally {\n      normsOut.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#writeNorms(String,int).mjava","sourceNew":null,"sourceOld":"  /** Write norms in the \"true\" segment format.  This is\n   *  called only during commit, to create the .nrm file. */\n  void writeNorms(String segmentName, int totalNumDoc) throws IOException {\n\n    IndexOutput normsOut = directory.createOutput(segmentName + \".\" + IndexFileNames.NORMS_EXTENSION);\n\n    try {\n      normsOut.writeBytes(SegmentMerger.NORMS_HEADER, 0, SegmentMerger.NORMS_HEADER.length);\n\n      final int numField = fieldInfos.size();\n\n      for (int fieldIdx=0;fieldIdx<numField;fieldIdx++) {\n        FieldInfo fi = fieldInfos.fieldInfo(fieldIdx);\n        if (fi.isIndexed && !fi.omitNorms) {\n          BufferedNorms n = norms[fieldIdx];\n          final long v;\n          if (n == null)\n            v = 0;\n          else {\n            v = n.out.getFilePointer();\n            n.out.writeTo(normsOut);\n            n.reset();\n          }\n          if (v < totalNumDoc)\n            fillBytes(normsOut, defaultNorm, (int) (totalNumDoc-v));\n        }\n      }\n    } finally {\n      normsOut.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5350389bf83287111f7760b9e3db3af8e3648474":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5350389bf83287111f7760b9e3db3af8e3648474"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"5350389bf83287111f7760b9e3db3af8e3648474":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["5350389bf83287111f7760b9e3db3af8e3648474"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}