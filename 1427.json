{"path":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Optimizer#optimize(Trie).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Optimizer#optimize(Trie).mjava","pathOld":"modules/analysis/stempel/src/java/org/egothor/stemmer/Optimizer#optimize(Trie).mjava","sourceNew":"  /**\n   * Optimize (remove empty rows) from the given Trie and return the resulting\n   * Trie.\n   * \n   * @param orig the Trie to consolidate\n   * @return the newly consolidated Trie\n   */\n  @Override\n  public Trie optimize(Trie orig) {\n    List<CharSequence> cmds = orig.cmds;\n    List<Row> rows = new ArrayList<Row>();\n    List<Row> orows = orig.rows;\n    int remap[] = new int[orows.size()];\n    \n    for (int j = orows.size() - 1; j >= 0; j--) {\n      Row now = new Remap(orows.get(j), remap);\n      boolean merged = false;\n      \n      for (int i = 0; i < rows.size(); i++) {\n        Row q = merge(now, rows.get(i));\n        if (q != null) {\n          rows.set(i, q);\n          merged = true;\n          remap[j] = i;\n          break;\n        }\n      }\n      \n      if (merged == false) {\n        remap[j] = rows.size();\n        rows.add(now);\n      }\n    }\n    \n    int root = remap[orig.root];\n    Arrays.fill(remap, -1);\n    rows = removeGaps(root, rows, new ArrayList<Row>(), remap);\n    \n    return new Trie(orig.forward, remap[root], cmds, rows);\n  }\n\n","sourceOld":"  /**\n   * Optimize (remove empty rows) from the given Trie and return the resulting\n   * Trie.\n   * \n   * @param orig the Trie to consolidate\n   * @return the newly consolidated Trie\n   */\n  @Override\n  public Trie optimize(Trie orig) {\n    List<CharSequence> cmds = orig.cmds;\n    List<Row> rows = new ArrayList<Row>();\n    List<Row> orows = orig.rows;\n    int remap[] = new int[orows.size()];\n    \n    for (int j = orows.size() - 1; j >= 0; j--) {\n      Row now = new Remap(orows.get(j), remap);\n      boolean merged = false;\n      \n      for (int i = 0; i < rows.size(); i++) {\n        Row q = merge(now, rows.get(i));\n        if (q != null) {\n          rows.set(i, q);\n          merged = true;\n          remap[j] = i;\n          break;\n        }\n      }\n      \n      if (merged == false) {\n        remap[j] = rows.size();\n        rows.add(now);\n      }\n    }\n    \n    int root = remap[orig.root];\n    Arrays.fill(remap, -1);\n    rows = removeGaps(root, rows, new ArrayList<Row>(), remap);\n    \n    return new Trie(orig.forward, remap[root], cmds, rows);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Optimizer#optimize(Trie).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Optimizer#optimize(Trie).mjava","sourceNew":"  /**\n   * Optimize (remove empty rows) from the given Trie and return the resulting\n   * Trie.\n   * \n   * @param orig the Trie to consolidate\n   * @return the newly consolidated Trie\n   */\n  @Override\n  public Trie optimize(Trie orig) {\n    List<CharSequence> cmds = orig.cmds;\n    List<Row> rows = new ArrayList<>();\n    List<Row> orows = orig.rows;\n    int remap[] = new int[orows.size()];\n    \n    for (int j = orows.size() - 1; j >= 0; j--) {\n      Row now = new Remap(orows.get(j), remap);\n      boolean merged = false;\n      \n      for (int i = 0; i < rows.size(); i++) {\n        Row q = merge(now, rows.get(i));\n        if (q != null) {\n          rows.set(i, q);\n          merged = true;\n          remap[j] = i;\n          break;\n        }\n      }\n      \n      if (merged == false) {\n        remap[j] = rows.size();\n        rows.add(now);\n      }\n    }\n    \n    int root = remap[orig.root];\n    Arrays.fill(remap, -1);\n    rows = removeGaps(root, rows, new ArrayList<Row>(), remap);\n    \n    return new Trie(orig.forward, remap[root], cmds, rows);\n  }\n\n","sourceOld":"  /**\n   * Optimize (remove empty rows) from the given Trie and return the resulting\n   * Trie.\n   * \n   * @param orig the Trie to consolidate\n   * @return the newly consolidated Trie\n   */\n  @Override\n  public Trie optimize(Trie orig) {\n    List<CharSequence> cmds = orig.cmds;\n    List<Row> rows = new ArrayList<Row>();\n    List<Row> orows = orig.rows;\n    int remap[] = new int[orows.size()];\n    \n    for (int j = orows.size() - 1; j >= 0; j--) {\n      Row now = new Remap(orows.get(j), remap);\n      boolean merged = false;\n      \n      for (int i = 0; i < rows.size(); i++) {\n        Row q = merge(now, rows.get(i));\n        if (q != null) {\n          rows.set(i, q);\n          merged = true;\n          remap[j] = i;\n          break;\n        }\n      }\n      \n      if (merged == false) {\n        remap[j] = rows.size();\n        rows.add(now);\n      }\n    }\n    \n    int root = remap[orig.root];\n    Arrays.fill(remap, -1);\n    rows = removeGaps(root, rows, new ArrayList<Row>(), remap);\n    \n    return new Trie(orig.forward, remap[root], cmds, rows);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}