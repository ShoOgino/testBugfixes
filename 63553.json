{"path":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","commits":[{"id":"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7","date":1255555265,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term[]).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerms(terms);\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term[] terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerms(terms);\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term[])\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerms(terms);\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerms(terms);\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}