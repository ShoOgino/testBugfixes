{"path":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMerges(SegmentInfos).mjava","commits":[{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"    public MergeSpecification findMerges(SegmentInfos segmentInfos)\n        throws CorruptIndexException, IOException {\n      MergeSpecification ms = new MergeSpecification();\n      if (doMerge) {\n        SegmentInfos mergeInfos = new SegmentInfos();\n        for (int x=start; x < (start+length); x++) {\n          mergeInfos.add(segmentInfos.get(x));\n        }\n        OneMerge om = new OneMerge(mergeInfos);\n        ms.add(om);\n        doMerge = false;\n        return ms;\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"    public MergeSpecification findMerges(SegmentInfos segmentInfos)\n        throws CorruptIndexException, IOException {\n      MergeSpecification ms = new MergeSpecification();\n      if (doMerge) {\n        SegmentInfos mergeInfos = new SegmentInfos();\n        for (int x=start; x < (start+length); x++) {\n          mergeInfos.add(segmentInfos.get(x));\n        }\n        OneMerge om = new OneMerge(mergeInfos);\n        ms.add(om);\n        doMerge = false;\n        return ms;\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"    public MergeSpecification findMerges(SegmentInfos segmentInfos)\n        throws CorruptIndexException, IOException {\n      MergeSpecification ms = new MergeSpecification();\n      if (doMerge) {\n        SegmentInfos mergeInfos = new SegmentInfos();\n        for (int x=start; x < (start+length); x++) {\n          mergeInfos.add(segmentInfos.get(x));\n        }\n        OneMerge om = new OneMerge(mergeInfos);\n        ms.add(om);\n        doMerge = false;\n        return ms;\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"    @Override\n    public MergeSpecification findMerges(SegmentInfos segmentInfos)\n        throws CorruptIndexException, IOException {\n      MergeSpecification ms = new MergeSpecification();\n      if (doMerge) {\n        SegmentInfos mergeInfos = new SegmentInfos();\n        for (int x=start; x < (start+length); x++) {\n          mergeInfos.add(segmentInfos.get(x));\n        }\n        OneMerge om = new OneMerge(mergeInfos);\n        ms.add(om);\n        doMerge = false;\n        return ms;\n      }\n      return null;\n    }\n\n","sourceOld":"    public MergeSpecification findMerges(SegmentInfos segmentInfos)\n        throws CorruptIndexException, IOException {\n      MergeSpecification ms = new MergeSpecification();\n      if (doMerge) {\n        SegmentInfos mergeInfos = new SegmentInfos();\n        for (int x=start; x < (start+length); x++) {\n          mergeInfos.add(segmentInfos.get(x));\n        }\n        OneMerge om = new OneMerge(mergeInfos);\n        ms.add(om);\n        doMerge = false;\n        return ms;\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"    @Override\n    public MergeSpecification findMerges(SegmentInfos segmentInfos)\n        throws CorruptIndexException, IOException {\n      MergeSpecification ms = new MergeSpecification();\n      if (doMerge) {\n        SegmentInfos mergeInfos = new SegmentInfos();\n        for (int x=start; x < (start+length); x++) {\n          mergeInfos.add(segmentInfos.get(x));\n        }\n        OneMerge om = new OneMerge(mergeInfos);\n        ms.add(om);\n        doMerge = false;\n        return ms;\n      }\n      return null;\n    }\n\n","sourceOld":"    public MergeSpecification findMerges(SegmentInfos segmentInfos)\n        throws CorruptIndexException, IOException {\n      MergeSpecification ms = new MergeSpecification();\n      if (doMerge) {\n        SegmentInfos mergeInfos = new SegmentInfos();\n        for (int x=start; x < (start+length); x++) {\n          mergeInfos.add(segmentInfos.get(x));\n        }\n        OneMerge om = new OneMerge(mergeInfos);\n        ms.add(om);\n        doMerge = false;\n        return ms;\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"    @Override\n    public MergeSpecification findMerges(SegmentInfos segmentInfos)\n        throws CorruptIndexException, IOException {\n      MergeSpecification ms = new MergeSpecification();\n      if (doMerge) {\n        SegmentInfos mergeInfos = new SegmentInfos();\n        for (int x=start; x < (start+length); x++) {\n          mergeInfos.add(segmentInfos.get(x));\n        }\n        OneMerge om = new OneMerge(mergeInfos);\n        ms.add(om);\n        doMerge = false;\n        return ms;\n      }\n      return null;\n    }\n\n","sourceOld":"    public MergeSpecification findMerges(SegmentInfos segmentInfos)\n        throws CorruptIndexException, IOException {\n      MergeSpecification ms = new MergeSpecification();\n      if (doMerge) {\n        SegmentInfos mergeInfos = new SegmentInfos();\n        for (int x=start; x < (start+length); x++) {\n          mergeInfos.add(segmentInfos.get(x));\n        }\n        OneMerge om = new OneMerge(mergeInfos);\n        ms.add(om);\n        doMerge = false;\n        return ms;\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"    @Override\n    public MergeSpecification findMerges(SegmentInfos segmentInfos)\n        throws CorruptIndexException, IOException {\n      MergeSpecification ms = new MergeSpecification();\n      if (doMerge) {\n        OneMerge om = new OneMerge(segmentInfos.asList().subList(start, start + length));\n        ms.add(om);\n        doMerge = false;\n        return ms;\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public MergeSpecification findMerges(SegmentInfos segmentInfos)\n        throws CorruptIndexException, IOException {\n      MergeSpecification ms = new MergeSpecification();\n      if (doMerge) {\n        SegmentInfos mergeInfos = new SegmentInfos();\n        for (int x=start; x < (start+length); x++) {\n          mergeInfos.add(segmentInfos.get(x));\n        }\n        OneMerge om = new OneMerge(mergeInfos);\n        ms.add(om);\n        doMerge = false;\n        return ms;\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"    @Override\n    public MergeSpecification findMerges(SegmentInfos segmentInfos)\n        throws CorruptIndexException, IOException {\n      MergeSpecification ms = new MergeSpecification();\n      if (doMerge) {\n        OneMerge om = new OneMerge(segmentInfos.asList().subList(start, start + length));\n        ms.add(om);\n        doMerge = false;\n        return ms;\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public MergeSpecification findMerges(SegmentInfos segmentInfos)\n        throws CorruptIndexException, IOException {\n      MergeSpecification ms = new MergeSpecification();\n      if (doMerge) {\n        SegmentInfos mergeInfos = new SegmentInfos();\n        for (int x=start; x < (start+length); x++) {\n          mergeInfos.add(segmentInfos.get(x));\n        }\n        OneMerge om = new OneMerge(mergeInfos);\n        ms.add(om);\n        doMerge = false;\n        return ms;\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"    @Override\n    public MergeSpecification findMerges(SegmentInfos segmentInfos)\n        throws CorruptIndexException, IOException {\n      MergeSpecification ms = new MergeSpecification();\n      if (doMerge) {\n        OneMerge om = new OneMerge(segmentInfos.asList().subList(start, start + length));\n        ms.add(om);\n        doMerge = false;\n        return ms;\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public MergeSpecification findMerges(SegmentInfos segmentInfos)\n        throws CorruptIndexException, IOException {\n      MergeSpecification ms = new MergeSpecification();\n      if (doMerge) {\n        SegmentInfos mergeInfos = new SegmentInfos();\n        for (int x=start; x < (start+length); x++) {\n          mergeInfos.add(segmentInfos.get(x));\n        }\n        OneMerge om = new OneMerge(mergeInfos);\n        ms.add(om);\n        doMerge = false;\n        return ms;\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerSegmentDeletes.RangeMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"    @Override\n    public MergeSpecification findMerges(SegmentInfos segmentInfos)\n        throws CorruptIndexException, IOException {\n      MergeSpecification ms = new MergeSpecification();\n      if (doMerge) {\n        OneMerge om = new OneMerge(segmentInfos.asList().subList(start, start + length));\n        ms.add(om);\n        doMerge = false;\n        return ms;\n      }\n      return null;\n    }\n\n","sourceOld":"    @Override\n    public MergeSpecification findMerges(SegmentInfos segmentInfos)\n        throws CorruptIndexException, IOException {\n      MergeSpecification ms = new MergeSpecification();\n      if (doMerge) {\n        OneMerge om = new OneMerge(segmentInfos.asList().subList(start, start + length));\n        ms.add(om);\n        doMerge = false;\n        return ms;\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["29ef99d61cda9641b6250bf9567329a6e65f901d","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["786a4d25ca958a1f315a9d6a74f0441fdafcd522","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["c3a8a449466c1ff7ce2274fe73dab487256964b4","3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}