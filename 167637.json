{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","pathOld":"/dev/null","sourceNew":"  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.length() == 0)\n        continue;\n      addField0(split, split, false, true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb","date":1233863590,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","sourceNew":"  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.length() == 0)\n        continue;\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","sourceOld":"  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.length() == 0)\n        continue;\n      addField0(split, split, false, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5bb8a93dd58a4cde932f3e3ee4e13dc6832949","date":1252931993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","sourceNew":"  /**\n   * @param forEachXpath  The XPATH for which a record is emitted. At the start of this xpath tag, it starts collecting the fields and at the close\n   * of the tag ,a record is emitted and the fields collected since the tag start is included in the record. If there\n   * are fields collected in the parent tag(s) they also will be included in the record but not cleared after emitting the record.\n   * It can use the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.length() == 0)\n        continue;\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","sourceOld":"  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.length() == 0)\n        continue;\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b14ccda0bdb398cf86bc3804e1c136a615dbd89b","date":1253269935,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","sourceNew":"  /**\n   * A constructor called with a '|' seperated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted\n   * seperate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the parent tag or above\n   * will also be included in the record, but these are not\n   * cleared after emitting the record.\n\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","sourceOld":"  /**\n   * @param forEachXpath  The XPATH for which a record is emitted. At the start of this xpath tag, it starts collecting the fields and at the close\n   * of the tag ,a record is emitted and the fields collected since the tag start is included in the record. If there\n   * are fields collected in the parent tag(s) they also will be included in the record but not cleared after emitting the record.\n   * It can use the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.length() == 0)\n        continue;\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":["7602e63987582091a0e432f8d8f7619d2206fab7","7602e63987582091a0e432f8d8f7619d2206fab7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f2a93a28913071a0b713be1d4b8a1181388d550","date":1254814948,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","sourceNew":"  /**\n   * A constructor called with a '|' seperated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted as\n   * seperate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the \n   * parent tag or above will also be included in the record, but these are\n   * not cleared after emitting the record.\n   *\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n         throw new RuntimeException(\"forEach cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","sourceOld":"  /**\n   * A constructor called with a '|' seperated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted\n   * seperate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the parent tag or above\n   * will also be included in the record, but these are not\n   * cleared after emitting the record.\n\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#XPathRecordReader(String).mjava","sourceNew":"  /**\n   * A constructor called with a '|' seperated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted as\n   * seperate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the \n   * parent tag or above will also be included in the record, but these are\n   * not cleared after emitting the record.\n   *\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n         throw new RuntimeException(\"forEach cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","sourceOld":"  /**\n   * A constructor called with a '|' seperated list of Xpath expressions\n   * which define sub sections of the XML stream that are to be emitted as\n   * seperate records.\n   * \n   * @param forEachXpath  The XPATH for which a record is emitted. Once the\n   * xpath tag is encountered, the Node.parse method starts collecting wanted \n   * fields and at the close of the tag, a record is emitted containing all \n   * fields collected since the tag start. Once \n   * emitted the collected fields are cleared. Any fields collected in the \n   * parent tag or above will also be included in the record, but these are\n   * not cleared after emitting the record.\n   *\n   * It uses the ' | ' syntax of XPATH to pass in multiple xpaths.\n   */\n  public XPathRecordReader(String forEachXpath) {\n    String[] splits = forEachXpath.split(\"\\\\|\");\n    for (String split : splits) {\n      split = split.trim();\n      if (split.startsWith(\"//\"))\n         throw new RuntimeException(\"forEach cannot start with '//': \" + split);\n      if (split.length() == 0)\n        continue;\n      // The created Node has a name set to the full forEach attribute xpath\n      addField0(split, split, false, true, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cb5bb8a93dd58a4cde932f3e3ee4e13dc6832949":["d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["7f2a93a28913071a0b713be1d4b8a1181388d550"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f2a93a28913071a0b713be1d4b8a1181388d550":["b14ccda0bdb398cf86bc3804e1c136a615dbd89b"],"b14ccda0bdb398cf86bc3804e1c136a615dbd89b":["cb5bb8a93dd58a4cde932f3e3ee4e13dc6832949"],"d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"]},"commit2Childs":{"cb5bb8a93dd58a4cde932f3e3ee4e13dc6832949":["b14ccda0bdb398cf86bc3804e1c136a615dbd89b"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb":["cb5bb8a93dd58a4cde932f3e3ee4e13dc6832949"],"7f2a93a28913071a0b713be1d4b8a1181388d550":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b14ccda0bdb398cf86bc3804e1c136a615dbd89b":["7f2a93a28913071a0b713be1d4b8a1181388d550"]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}