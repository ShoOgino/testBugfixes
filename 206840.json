{"path":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","sourceNew":"  private static void encoderTest(IntEncoder encoder, int[] data,\n      int loopFactor) throws IOException {\n\n    long startTime, endTime;\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    // -----------------------------------------------------------\n\n    startTime = System.currentTimeMillis();\n    for (int factor = loopFactor; factor > 0; --factor) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    endTime = System.currentTimeMillis();\n\n    long encodeTime = endTime - startTime;\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    decoder.reInit(bais);\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n    // -----------------------------------------------------------\n\n    decoder.reInit(bais);\n    startTime = System.currentTimeMillis();\n    for (int i = loopFactor; i > 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n\n    endTime = System.currentTimeMillis();\n    long decodeTime = endTime - startTime;\n\n    System.out.println(String.format(resultsFormat, encoder, nf.format(baos\n        .size()\n        * 8.0 / data.length), encodeTime, nf.format(encodeTime\n        * 1000000.0 / (loopFactor * data.length)), decodeTime, nf\n        .format(decodeTime * 1000000.0 / (loopFactor * data.length))));\n  }\n\n","sourceOld":"  private static void encoderTest(IntEncoder encoder, int[] data,\n      int loopFactor) throws IOException {\n\n    long startTime, endTime;\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    // -----------------------------------------------------------\n\n    startTime = System.currentTimeMillis();\n    for (int factor = loopFactor; factor > 0; --factor) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    endTime = System.currentTimeMillis();\n\n    long encodeTime = endTime - startTime;\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    decoder.reInit(bais);\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n    // -----------------------------------------------------------\n\n    decoder.reInit(bais);\n    startTime = System.currentTimeMillis();\n    for (int i = loopFactor; i > 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n\n    endTime = System.currentTimeMillis();\n    long decodeTime = endTime - startTime;\n\n    System.out.println(String.format(resultsFormat, encoder, nf.format(baos\n        .size()\n        * 8.0 / data.length), encodeTime, nf.format(encodeTime\n        * 1000000.0 / (loopFactor * data.length)), decodeTime, nf\n        .format(decodeTime * 1000000.0 / (loopFactor * data.length))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c70cdb81dc660d90f9d0664dd91b473b7e66563","date":1341679310,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","sourceNew":"  private static void encoderTest(IntEncoder encoder, int[] data,\n      int loopFactor) throws IOException {\n\n    long startTime, endTime;\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    // -----------------------------------------------------------\n\n    startTime = System.currentTimeMillis();\n    for (int factor = loopFactor; factor > 0; --factor) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    endTime = System.currentTimeMillis();\n\n    long encodeTime = endTime - startTime;\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    decoder.reInit(bais);\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n    // -----------------------------------------------------------\n\n    decoder.reInit(bais);\n    startTime = System.currentTimeMillis();\n    for (int i = loopFactor; i > 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n\n    endTime = System.currentTimeMillis();\n    long decodeTime = endTime - startTime;\n\n    System.out.println(String.format(Locale.ROOT, resultsFormat, encoder, nf.format(baos\n        .size()\n        * 8.0 / data.length), encodeTime, nf.format(encodeTime\n        * 1000000.0 / (loopFactor * data.length)), decodeTime, nf\n        .format(decodeTime * 1000000.0 / (loopFactor * data.length))));\n  }\n\n","sourceOld":"  private static void encoderTest(IntEncoder encoder, int[] data,\n      int loopFactor) throws IOException {\n\n    long startTime, endTime;\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    // -----------------------------------------------------------\n\n    startTime = System.currentTimeMillis();\n    for (int factor = loopFactor; factor > 0; --factor) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    endTime = System.currentTimeMillis();\n\n    long encodeTime = endTime - startTime;\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    decoder.reInit(bais);\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n    // -----------------------------------------------------------\n\n    decoder.reInit(bais);\n    startTime = System.currentTimeMillis();\n    for (int i = loopFactor; i > 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n\n    endTime = System.currentTimeMillis();\n    long decodeTime = endTime - startTime;\n\n    System.out.println(String.format(resultsFormat, encoder, nf.format(baos\n        .size()\n        * 8.0 / data.length), encodeTime, nf.format(encodeTime\n        * 1000000.0 / (loopFactor * data.length)), decodeTime, nf\n        .format(decodeTime * 1000000.0 / (loopFactor * data.length))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","sourceNew":"  private static void encoderTest(IntEncoder encoder, int[] data,\n      int loopFactor) throws IOException {\n\n    long startTime, endTime;\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    // -----------------------------------------------------------\n\n    startTime = System.currentTimeMillis();\n    for (int factor = loopFactor; factor > 0; --factor) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    endTime = System.currentTimeMillis();\n\n    long encodeTime = endTime - startTime;\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    decoder.reInit(bais);\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n    // -----------------------------------------------------------\n\n    decoder.reInit(bais);\n    startTime = System.currentTimeMillis();\n    for (int i = loopFactor; i > 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n\n    endTime = System.currentTimeMillis();\n    long decodeTime = endTime - startTime;\n\n    System.out.println(String.format(Locale.ROOT, resultsFormat, encoder, nf.format(baos\n        .size()\n        * 8.0 / data.length), encodeTime, nf.format(encodeTime\n        * 1000000.0 / (loopFactor * data.length)), decodeTime, nf\n        .format(decodeTime * 1000000.0 / (loopFactor * data.length))));\n  }\n\n","sourceOld":"  private static void encoderTest(IntEncoder encoder, int[] data,\n      int loopFactor) throws IOException {\n\n    long startTime, endTime;\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    // -----------------------------------------------------------\n\n    startTime = System.currentTimeMillis();\n    for (int factor = loopFactor; factor > 0; --factor) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    endTime = System.currentTimeMillis();\n\n    long encodeTime = endTime - startTime;\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    decoder.reInit(bais);\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n    // -----------------------------------------------------------\n\n    decoder.reInit(bais);\n    startTime = System.currentTimeMillis();\n    for (int i = loopFactor; i > 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n\n    endTime = System.currentTimeMillis();\n    long decodeTime = endTime - startTime;\n\n    System.out.println(String.format(resultsFormat, encoder, nf.format(baos\n        .size()\n        * 8.0 / data.length), encodeTime, nf.format(encodeTime\n        * 1000000.0 / (loopFactor * data.length)), decodeTime, nf\n        .format(decodeTime * 1000000.0 / (loopFactor * data.length))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","sourceNew":"  private static void encoderTest(IntEncoder encoder, int[] data,\n      int loopFactor) throws IOException {\n\n    long startTime, endTime;\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    // -----------------------------------------------------------\n\n    startTime = System.currentTimeMillis();\n    for (int factor = loopFactor; factor > 0; --factor) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    endTime = System.currentTimeMillis();\n\n    long encodeTime = endTime - startTime;\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    decoder.reInit(bais);\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n    // -----------------------------------------------------------\n\n    decoder.reInit(bais);\n    startTime = System.currentTimeMillis();\n    for (int i = loopFactor; i > 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n\n    endTime = System.currentTimeMillis();\n    long decodeTime = endTime - startTime;\n\n    System.out.println(String.format(Locale.ROOT, resultsFormat, encoder, nf.format(baos\n        .size()\n        * 8.0 / data.length), encodeTime, nf.format(encodeTime\n        * 1000000.0 / (loopFactor * data.length)), decodeTime, nf\n        .format(decodeTime * 1000000.0 / (loopFactor * data.length))));\n  }\n\n","sourceOld":"  private static void encoderTest(IntEncoder encoder, int[] data,\n      int loopFactor) throws IOException {\n\n    long startTime, endTime;\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    // -----------------------------------------------------------\n\n    startTime = System.currentTimeMillis();\n    for (int factor = loopFactor; factor > 0; --factor) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    endTime = System.currentTimeMillis();\n\n    long encodeTime = endTime - startTime;\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    decoder.reInit(bais);\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n    // -----------------------------------------------------------\n\n    decoder.reInit(bais);\n    startTime = System.currentTimeMillis();\n    for (int i = loopFactor; i > 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n\n    endTime = System.currentTimeMillis();\n    long decodeTime = endTime - startTime;\n\n    System.out.println(String.format(resultsFormat, encoder, nf.format(baos\n        .size()\n        * 8.0 / data.length), encodeTime, nf.format(encodeTime\n        * 1000000.0 / (loopFactor * data.length)), decodeTime, nf\n        .format(decodeTime * 1000000.0 / (loopFactor * data.length))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","sourceNew":"  private static void encoderTest(IntEncoder encoder, int[] data,\n      int loopFactor) throws IOException {\n\n    long startTime, endTime;\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    // -----------------------------------------------------------\n\n    startTime = System.currentTimeMillis();\n    for (int factor = loopFactor; factor > 0; --factor) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    endTime = System.currentTimeMillis();\n\n    long encodeTime = endTime - startTime;\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    decoder.reInit(bais);\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n    // -----------------------------------------------------------\n\n    decoder.reInit(bais);\n    startTime = System.currentTimeMillis();\n    for (int i = loopFactor; i > 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n\n    endTime = System.currentTimeMillis();\n    long decodeTime = endTime - startTime;\n\n    System.out.println(String.format(Locale.ROOT, resultsFormat, encoder, nf.format(baos\n        .size()\n        * 8.0 / data.length), encodeTime, nf.format(encodeTime\n        * 1000000.0 / (loopFactor * data.length)), decodeTime, nf\n        .format(decodeTime * 1000000.0 / (loopFactor * data.length))));\n  }\n\n","sourceOld":"  private static void encoderTest(IntEncoder encoder, int[] data,\n      int loopFactor) throws IOException {\n\n    long startTime, endTime;\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    // -----------------------------------------------------------\n\n    startTime = System.currentTimeMillis();\n    for (int factor = loopFactor; factor > 0; --factor) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    endTime = System.currentTimeMillis();\n\n    long encodeTime = endTime - startTime;\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    decoder.reInit(bais);\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n    // -----------------------------------------------------------\n\n    decoder.reInit(bais);\n    startTime = System.currentTimeMillis();\n    for (int i = loopFactor; i > 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n\n    endTime = System.currentTimeMillis();\n    long decodeTime = endTime - startTime;\n\n    System.out.println(String.format(resultsFormat, encoder, nf.format(baos\n        .size()\n        * 8.0 / data.length), encodeTime, nf.format(encodeTime\n        * 1000000.0 / (loopFactor * data.length)), decodeTime, nf\n        .format(decodeTime * 1000000.0 / (loopFactor * data.length))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","sourceNew":"  private static void encoderTest(IntEncoder encoder, int[] values, int loopFactor) throws IOException {\n\n    BytesRef bytes = new BytesRef(values.length); // at least one byte per value\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      IntsRef data = newIntsRef(values);\n      encoder.encode(data, bytes);\n    }\n    // -----------------------------------------------------------\n\n    long encodeTime = 0;\n    for (int factor = loopFactor; factor > 0; --factor) {\n      IntsRef data = newIntsRef(values);\n      long start = System.currentTimeMillis();\n      encoder.encode(data, bytes);\n      encodeTime += System.currentTimeMillis() - start;\n    }\n\n    IntsRef decoded = new IntsRef(values.length);\n    int encodedSize = bytes.length;\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      decoder.decode(bytes, decoded);\n    }\n    // -----------------------------------------------------------\n\n    long decodeTime = 0;\n    for (int i = loopFactor; i > 0; --i) {\n      long start = System.currentTimeMillis();\n      decoder.decode(bytes, decoded);\n      decodeTime += System.currentTimeMillis() - start;\n    }\n    \n    if (decoded.length != values.length) {\n      throw new RuntimeException(\"wrong num values. expected=\" + values.length + \" actual=\" + decoded.length + \n          \" decoder=\" + decoder);\n    }\n\n    System.out.println(String.format(Locale.ROOT, resultsFormat, encoder, \n        nf.format(encodedSize * 8.0 / values.length), \n        encodeTime, \n        nf.format(encodeTime * 1000000.0 / (loopFactor * values.length)), \n        decodeTime, \n        nf.format(decodeTime * 1000000.0 / (loopFactor * values.length))));\n  }\n\n","sourceOld":"  private static void encoderTest(IntEncoder encoder, int[] data,\n      int loopFactor) throws IOException {\n\n    long startTime, endTime;\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    // -----------------------------------------------------------\n\n    startTime = System.currentTimeMillis();\n    for (int factor = loopFactor; factor > 0; --factor) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    endTime = System.currentTimeMillis();\n\n    long encodeTime = endTime - startTime;\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    decoder.reInit(bais);\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n    // -----------------------------------------------------------\n\n    decoder.reInit(bais);\n    startTime = System.currentTimeMillis();\n    for (int i = loopFactor; i > 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n\n    endTime = System.currentTimeMillis();\n    long decodeTime = endTime - startTime;\n\n    System.out.println(String.format(Locale.ROOT, resultsFormat, encoder, nf.format(baos\n        .size()\n        * 8.0 / data.length), encodeTime, nf.format(encodeTime\n        * 1000000.0 / (loopFactor * data.length)), decodeTime, nf\n        .format(decodeTime * 1000000.0 / (loopFactor * data.length))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","sourceNew":"  private static void encoderTest(IntEncoder encoder, int[] values, int loopFactor) throws IOException {\n\n    BytesRef bytes = new BytesRef(values.length); // at least one byte per value\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      IntsRef data = newIntsRef(values);\n      encoder.encode(data, bytes);\n    }\n    // -----------------------------------------------------------\n\n    long encodeTime = 0;\n    for (int factor = loopFactor; factor > 0; --factor) {\n      IntsRef data = newIntsRef(values);\n      long start = System.currentTimeMillis();\n      encoder.encode(data, bytes);\n      encodeTime += System.currentTimeMillis() - start;\n    }\n\n    IntsRef decoded = new IntsRef(values.length);\n    int encodedSize = bytes.length;\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      decoder.decode(bytes, decoded);\n    }\n    // -----------------------------------------------------------\n\n    long decodeTime = 0;\n    for (int i = loopFactor; i > 0; --i) {\n      long start = System.currentTimeMillis();\n      decoder.decode(bytes, decoded);\n      decodeTime += System.currentTimeMillis() - start;\n    }\n    \n    if (decoded.length != values.length) {\n      throw new RuntimeException(\"wrong num values. expected=\" + values.length + \" actual=\" + decoded.length + \n          \" decoder=\" + decoder);\n    }\n\n    System.out.println(String.format(Locale.ROOT, resultsFormat, encoder, \n        nf.format(encodedSize * 8.0 / values.length), \n        encodeTime, \n        nf.format(encodeTime * 1000000.0 / (loopFactor * values.length)), \n        decodeTime, \n        nf.format(decodeTime * 1000000.0 / (loopFactor * values.length))));\n  }\n\n","sourceOld":"  private static void encoderTest(IntEncoder encoder, int[] data,\n      int loopFactor) throws IOException {\n\n    long startTime, endTime;\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    // -----------------------------------------------------------\n\n    startTime = System.currentTimeMillis();\n    for (int factor = loopFactor; factor > 0; --factor) {\n      baos.reset();\n      encoder.reInit(baos);\n      for (int value : data) {\n        encoder.encode(value);\n      }\n      encoder.close();\n    }\n    endTime = System.currentTimeMillis();\n\n    long encodeTime = endTime - startTime;\n\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    decoder.reInit(bais);\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n    // -----------------------------------------------------------\n\n    decoder.reInit(bais);\n    startTime = System.currentTimeMillis();\n    for (int i = loopFactor; i > 0; --i) {\n      bais.mark(baos.size());\n      while (decoder.decode() != IntDecoder.EOS) {\n      }\n      bais.reset();\n      decoder.reInit(bais);\n    }\n\n    endTime = System.currentTimeMillis();\n    long decodeTime = endTime - startTime;\n\n    System.out.println(String.format(Locale.ROOT, resultsFormat, encoder, nf.format(baos\n        .size()\n        * 8.0 / data.length), encodeTime, nf.format(encodeTime\n        * 1000000.0 / (loopFactor * data.length)), decodeTime, nf\n        .format(decodeTime * 1000000.0 / (loopFactor * data.length))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#encoderTest(IntEncoder,int[],int).mjava","sourceNew":"  private static void encoderTest(IntEncoder encoder, int[] values, int loopFactor) throws IOException {\n\n    BytesRef bytes = new BytesRef(values.length); // at least one byte per value\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      IntsRef data = newIntsRef(values);\n      encoder.encode(data, bytes);\n    }\n    // -----------------------------------------------------------\n\n    long encodeTime = 0;\n    for (int factor = loopFactor; factor > 0; --factor) {\n      IntsRef data = newIntsRef(values);\n      long start = System.currentTimeMillis();\n      encoder.encode(data, bytes);\n      encodeTime += System.currentTimeMillis() - start;\n    }\n\n    IntsRef decoded = new IntsRef(values.length);\n    int encodedSize = bytes.length;\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      decoder.decode(bytes, decoded);\n    }\n    // -----------------------------------------------------------\n\n    long decodeTime = 0;\n    for (int i = loopFactor; i > 0; --i) {\n      long start = System.currentTimeMillis();\n      decoder.decode(bytes, decoded);\n      decodeTime += System.currentTimeMillis() - start;\n    }\n    \n    if (decoded.length != values.length) {\n      throw new RuntimeException(\"wrong num values. expected=\" + values.length + \" actual=\" + decoded.length + \n          \" decoder=\" + decoder);\n    }\n\n    System.out.println(String.format(Locale.ROOT, resultsFormat, encoder, \n        nf.format(encodedSize * 8.0 / values.length), \n        encodeTime, \n        nf.format(encodeTime * 1000000.0 / (loopFactor * values.length)), \n        decodeTime, \n        nf.format(decodeTime * 1000000.0 / (loopFactor * values.length))));\n  }\n\n","sourceOld":"  private static void encoderTest(IntEncoder encoder, int[] values, int loopFactor) throws IOException {\n\n    BytesRef bytes = new BytesRef(values.length); // at least one byte per value\n\n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      IntsRef data = newIntsRef(values);\n      encoder.encode(data, bytes);\n    }\n    // -----------------------------------------------------------\n\n    long encodeTime = 0;\n    for (int factor = loopFactor; factor > 0; --factor) {\n      IntsRef data = newIntsRef(values);\n      long start = System.currentTimeMillis();\n      encoder.encode(data, bytes);\n      encodeTime += System.currentTimeMillis() - start;\n    }\n\n    IntsRef decoded = new IntsRef(values.length);\n    int encodedSize = bytes.length;\n    IntDecoder decoder = encoder.createMatchingDecoder();\n    \n    // -- Looping 100 times as a warm up --------------------------\n    for (int i = 100; i != 0; --i) {\n      decoder.decode(bytes, decoded);\n    }\n    // -----------------------------------------------------------\n\n    long decodeTime = 0;\n    for (int i = loopFactor; i > 0; --i) {\n      long start = System.currentTimeMillis();\n      decoder.decode(bytes, decoded);\n      decodeTime += System.currentTimeMillis() - start;\n    }\n    \n    if (decoded.length != values.length) {\n      throw new RuntimeException(\"wrong num values. expected=\" + values.length + \" actual=\" + decoded.length + \n          \" decoder=\" + decoder);\n    }\n\n    System.out.println(String.format(Locale.ROOT, resultsFormat, encoder, \n        nf.format(encodedSize * 8.0 / values.length), \n        encodeTime, \n        nf.format(encodeTime * 1000000.0 / (loopFactor * values.length)), \n        decodeTime, \n        nf.format(decodeTime * 1000000.0 / (loopFactor * values.length))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9c70cdb81dc660d90f9d0664dd91b473b7e66563"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["2acf500f78aa12b92e371fd89c719291986b6b90","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"],"9c70cdb81dc660d90f9d0664dd91b473b7e66563":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","9c70cdb81dc660d90f9d0664dd91b473b7e66563","46d8ada1fff8d18cb197c38c7983225162599948"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["607428da722dcb3e86bbd11c63de8986e6275c36","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","fe33227f6805edab2036cbb80645cc4e2d1fa424","4e6354dd7c71fe122926fc53d7d29f715b1283db","46d8ada1fff8d18cb197c38c7983225162599948"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"9c70cdb81dc660d90f9d0664dd91b473b7e66563":["2acf500f78aa12b92e371fd89c719291986b6b90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}