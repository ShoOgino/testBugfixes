{"path":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","sourceNew":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","sourceNew":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","sourceNew":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dcbe407b62ce0c91dc171a4695a9f442c46ce14","date":1323729111,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","sourceNew":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(SolrParams.wrapDefaults(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = SolrParams.wrapAppended(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceb6a6c707ada1df8bde804e25c98668e699a18","date":1323800602,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","sourceNew":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(SolrParams.wrapDefaults(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = SolrParams.wrapAppended(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","sourceNew":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(SolrParams.wrapDefaults(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = SolrParams.wrapAppended(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(SolrParams.wrapDefaults(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = SolrParams.wrapAppended(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129e5b874f99ae4e04f39c337c940dda690f2d38","date":1524504409,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","sourceNew":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(SolrParams.wrapDefaults(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = SolrParams.wrapAppended(p, more.toSolrParams());\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(SolrParams.wrapDefaults(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = SolrParams.wrapAppended(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testSolrParams() throws Exception {\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(SolrParams.wrapDefaults(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = SolrParams.wrapAppended(p, more.toSolrParams());\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(SolrParams.wrapDefaults(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = SolrParams.wrapAppended(p, more.toSolrParams());\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0dcbe407b62ce0c91dc171a4695a9f442c46ce14"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":["c26f00b574427b55127e869b935845554afde1fa","0dcbe407b62ce0c91dc171a4695a9f442c46ce14"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["129e5b874f99ae4e04f39c337c940dda690f2d38"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0dcbe407b62ce0c91dc171a4695a9f442c46ce14":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["129e5b874f99ae4e04f39c337c940dda690f2d38"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"0dcbe407b62ce0c91dc171a4695a9f442c46ce14":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","4ceb6a6c707ada1df8bde804e25c98668e699a18"],"c26f00b574427b55127e869b935845554afde1fa":["4ceb6a6c707ada1df8bde804e25c98668e699a18","0dcbe407b62ce0c91dc171a4695a9f442c46ce14"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ceb6a6c707ada1df8bde804e25c98668e699a18","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}