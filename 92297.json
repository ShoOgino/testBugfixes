{"path":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParams().get(org.apache.solr.common.params.CommonParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getParams().get(org.apache.solr.common.params.CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParams().get(org.apache.solr.common.params.CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParams().get(org.apache.solr.common.params.CommonParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getParams().get(org.apache.solr.common.params.CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParams().get(org.apache.solr.common.params.CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParams().get(org.apache.solr.common.params.CommonParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getParams().get(org.apache.solr.common.params.CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParams().get(org.apache.solr.common.params.CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParams().get(org.apache.solr.common.params.CommonParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getParams().get(org.apache.solr.common.params.CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParams().get(org.apache.solr.common.params.CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParams().get(org.apache.solr.common.params.CommonParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getParams().get(org.apache.solr.common.params.CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParams().get(org.apache.solr.common.params.CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f0737567c7196b3ba1a359c2bdf103a3984a55e","date":1275089164,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParams().get(CommonParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      IndexSchema schema = req.getSchema();\n\n      boolean legacyExplainStyle \n        = req.getParams().getBool(CommonParams.EXPLAIN_AS_STRING,false);\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getParams().get(CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, schema));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      dbg.add(\"explain\", legacyExplainStyle ?\n              getExplainList(query, results, searcher, schema) :\n              explanationsToNamedLists(getExplanations(query, results, searcher, schema)));\n\n      String otherQueryS = req.getParams().get(CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", legacyExplainStyle ?\n                getExplainList(query, otherResults, searcher, schema) :\n                explanationsToNamedLists(getExplanations(query, otherResults, searcher, schema)));\n      }\n    }\n\n    return dbg;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParams().get(org.apache.solr.common.params.CommonParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getParams().get(org.apache.solr.common.params.CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParams().get(org.apache.solr.common.params.CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":["e4d1401af44658b2fa7b2e026b111d82ee8c2989","e4d1401af44658b2fa7b2e026b111d82ee8c2989","e4d1401af44658b2fa7b2e026b111d82ee8c2989"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"faa067d0f3edbad4e7a765c0819b7ce3bcb7ab74","date":1275499188,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParams().get(CommonParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      IndexSchema schema = req.getSchema();\n\n      boolean explainStruct\n        = req.getParams().getBool(CommonParams.EXPLAIN_STRUCT,false);\n      \n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getParams().get(CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, schema));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      NamedList<Explanation> explain \n        = getExplanations(query, results, searcher, schema);\n      dbg.add(\"explain\", explainStruct ?\n              explanationsToNamedLists(explain) : \n              explanationsToStrings(explain));\n\n      String otherQueryS = req.getParams().get(CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        NamedList<Explanation> explainO\n          = getExplanations(query, otherResults, searcher, schema);\n        dbg.add(\"explainOther\", explainStruct ?\n                explanationsToNamedLists(explainO) : \n                explanationsToStrings(explainO));\n      }\n    }\n\n    return dbg;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParams().get(CommonParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      IndexSchema schema = req.getSchema();\n\n      boolean legacyExplainStyle \n        = req.getParams().getBool(CommonParams.EXPLAIN_AS_STRING,false);\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getParams().get(CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, schema));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      dbg.add(\"explain\", legacyExplainStyle ?\n              getExplainList(query, results, searcher, schema) :\n              explanationsToNamedLists(getExplanations(query, results, searcher, schema)));\n\n      String otherQueryS = req.getParams().get(CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", legacyExplainStyle ?\n                getExplainList(query, otherResults, searcher, schema) :\n                explanationsToNamedLists(getExplanations(query, otherResults, searcher, schema)));\n      }\n    }\n\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":["e4d1401af44658b2fa7b2e026b111d82ee8c2989","e4d1401af44658b2fa7b2e026b111d82ee8c2989","e4d1401af44658b2fa7b2e026b111d82ee8c2989"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd00dd91853514614379b0e680d65bd19cac0f30","date":1283087816,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @return The debug info\n   * @throws java.io.IOException if there was an IO error\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results, boolean dbgQuery, boolean dbgResults)\n    throws IOException {\n\n    NamedList dbg = null;\n\n    dbg = new SimpleOrderedMap();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = req.getSchema();\n\n    boolean explainStruct\n            = req.getParams().getBool(CommonParams.EXPLAIN_STRUCT, false);\n\n    /* userQuery may have been pre-processes .. expose that */\n    if (dbgQuery) {\n      dbg.add(\"rawquerystring\", req.getParams().get(CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n      * values, use regular toString to see any attributes of the\n      * underlying Query it may have missed.\n      */\n      dbg.add(\"parsedquery\", QueryParsing.toString(query, schema));\n      dbg.add(\"parsedquery_toString\", query.toString());\n    }\n\n    if (dbgResults) {\n      NamedList<Explanation> explain\n              = getExplanations(query, results, searcher, schema);\n      dbg.add(\"explain\", explainStruct ?\n              explanationsToNamedLists(explain) :\n              explanationsToStrings(explain));\n\n      String otherQueryS = req.getParams().get(CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n                (otherQueryS, req.getSearcher(), req.getSchema(), 0, 10);\n        dbg.add(\"otherQuery\", otherQueryS);\n        NamedList<Explanation> explainO\n                = getExplanations(query, otherResults, searcher, schema);\n        dbg.add(\"explainOther\", explainStruct ?\n                explanationsToNamedLists(explainO) :\n                explanationsToStrings(explainO));\n      }\n    }\n\n\n    return dbg;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParams().get(CommonParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      IndexSchema schema = req.getSchema();\n\n      boolean explainStruct\n        = req.getParams().getBool(CommonParams.EXPLAIN_STRUCT,false);\n      \n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getParams().get(CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, schema));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      NamedList<Explanation> explain \n        = getExplanations(query, results, searcher, schema);\n      dbg.add(\"explain\", explainStruct ?\n              explanationsToNamedLists(explain) : \n              explanationsToStrings(explain));\n\n      String otherQueryS = req.getParams().get(CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        NamedList<Explanation> explainO\n          = getExplanations(query, otherResults, searcher, schema);\n        dbg.add(\"explainOther\", explainStruct ?\n                explanationsToNamedLists(explainO) : \n                explanationsToStrings(explainO));\n      }\n    }\n\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":["e4d1401af44658b2fa7b2e026b111d82ee8c2989","e4d1401af44658b2fa7b2e026b111d82ee8c2989","e4d1401af44658b2fa7b2e026b111d82ee8c2989"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList).mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>explain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results)\n    throws IOException {\n\n    String debug = req.getParams().get(CommonParams.DEBUG_QUERY);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      SolrIndexSearcher searcher = req.getSearcher();\n      IndexSchema schema = req.getSchema();\n\n      boolean explainStruct\n        = req.getParams().getBool(CommonParams.EXPLAIN_STRUCT,false);\n      \n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getParams().get(CommonParams.Q));\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, schema));\n      dbg.add(\"parsedquery_toString\", query.toString());\n\n      NamedList<Explanation> explain \n        = getExplanations(query, results, searcher, schema);\n      dbg.add(\"explain\", explainStruct ?\n              explanationsToNamedLists(explain) : \n              explanationsToStrings(explain));\n\n      String otherQueryS = req.getParams().get(CommonParams.EXPLAIN_OTHER);\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        NamedList<Explanation> explainO\n          = getExplanations(query, otherResults, searcher, schema);\n        dbg.add(\"explainOther\", explainStruct ?\n                explanationsToNamedLists(explainO) : \n                explanationsToStrings(explainO));\n      }\n    }\n\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"faa067d0f3edbad4e7a765c0819b7ce3bcb7ab74":["5f0737567c7196b3ba1a359c2bdf103a3984a55e"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f0737567c7196b3ba1a359c2bdf103a3984a55e":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["faa067d0f3edbad4e7a765c0819b7ce3bcb7ab74","cd00dd91853514614379b0e680d65bd19cac0f30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd00dd91853514614379b0e680d65bd19cac0f30"],"cd00dd91853514614379b0e680d65bd19cac0f30":["faa067d0f3edbad4e7a765c0819b7ce3bcb7ab74"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["5f0737567c7196b3ba1a359c2bdf103a3984a55e"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"faa067d0f3edbad4e7a765c0819b7ce3bcb7ab74":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd00dd91853514614379b0e680d65bd19cac0f30"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"5f0737567c7196b3ba1a359c2bdf103a3984a55e":["faa067d0f3edbad4e7a765c0819b7ce3bcb7ab74"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd00dd91853514614379b0e680d65bd19cac0f30":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}