{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefArray#testSort().mjava","commits":[{"id":"847d1294c8ff2f0172af20892ef98a1c6a952e09","date":1359503775,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefArray#testSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefArray#testSort().mjava","sourceNew":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","sourceOld":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefArray#testSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4e3a7c47e11ff0c156c646c37d20af7249370d2","date":1363813308,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefArray#testSort().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefArray#testSort().mjava","sourceNew":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      final int initSize = list.size();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        assertEquals(initSize + i, list.append(spare));\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","sourceOld":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        list.append(spare);\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","bugFix":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefArray#testSort().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefArray#testSort().mjava","sourceNew":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      final int initSize = list.size();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        assertEquals(initSize + i, list.append(spare));\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","sourceOld":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      final int initSize = list.size();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = _TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        assertEquals(initSize + i, list.append(spare));\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefArray#testSort().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefArray#testSort().mjava","sourceNew":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      final int initSize = list.size();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        assertEquals(initSize + i, list.append(spare));\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","sourceOld":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      final int initSize = list.size();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        assertEquals(initSize + i, list.append(spare));\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefArray#testSort().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/TestBytesRefArray#testSort().mjava","sourceNew":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      final int initSize = list.size();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        assertEquals(initSize + i, list.append(spare));\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","sourceOld":"  public void testSort() throws IOException {\n    Random random = random();\n    BytesRefArray list = new BytesRefArray(Counter.newCounter());\n    List<String> stringList = new ArrayList<String>();\n\n    for (int j = 0; j < 2; j++) {\n      if (j > 0 && random.nextBoolean()) {\n        list.clear();\n        stringList.clear();\n      }\n      int entries = atLeast(500);\n      BytesRef spare = new BytesRef();\n      final int initSize = list.size();\n      for (int i = 0; i < entries; i++) {\n        String randomRealisticUnicodeString = TestUtil\n            .randomRealisticUnicodeString(random);\n        spare.copyChars(randomRealisticUnicodeString);\n        assertEquals(initSize + i, list.append(spare));\n        stringList.add(randomRealisticUnicodeString);\n      }\n      \n      Collections.sort(stringList);\n      BytesRefIterator iter = list.iterator(BytesRef\n          .getUTF8SortedAsUTF16Comparator());\n      int i = 0;\n      while ((spare = iter.next()) != null) {\n        assertEquals(\"entry \" + i + \" doesn't match\", stringList.get(i),\n            spare.utf8ToString());\n        i++;\n      }\n      assertNull(iter.next());\n      assertEquals(i, stringList.size());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","847d1294c8ff2f0172af20892ef98a1c6a952e09"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["6613659748fe4411a7dcf85266e55db1f95f7315","36f5a8c57e16c0f801006a52f87c75378427852e"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a4e3a7c47e11ff0c156c646c37d20af7249370d2"],"a4e3a7c47e11ff0c156c646c37d20af7249370d2":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"36f5a8c57e16c0f801006a52f87c75378427852e":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba791bce8103c79e38f957e9c5a53a75871bd918"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a4e3a7c47e11ff0c156c646c37d20af7249370d2"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a4e3a7c47e11ff0c156c646c37d20af7249370d2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","847d1294c8ff2f0172af20892ef98a1c6a952e09"],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}