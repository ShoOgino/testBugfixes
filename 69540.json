{"path":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\"))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\"))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\"))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random, new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\"))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\"))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\"))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = IndexReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\"))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   * @throws IOException\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\"))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\")).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\"))\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"624d2da1aed2d2415a83f3c573de0341c4001d90","date":1390407250,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\")).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\")).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\")).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<String>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\")).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\")).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.shutdown();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\")).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\")).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\")).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.shutdown();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\")).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(Lucene40StoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\")).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene410\")).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\")).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66ccc0561aedc1d7cfde43ab8ca794160788e8fd","date":1409580192,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene410Codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene410\")).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene410\")).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene410Codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene410\")).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene40Codec because we rely upon its specific impl\n    boolean oldValue = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene40\")).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n    OLD_FORMAT_IMPERSONATION_IS_ACTIVE = oldValue;\n  }\n\n","bugFix":["624d2da1aed2d2415a83f3c573de0341c4001d90","06584e6e98d592b34e1329b384182f368d2025e8","088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"941b7027a51547b0a38d711bc08ec354f9e2e4a7","date":1411394279,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire the default codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(TestUtil.getDefaultCodec()).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire Lucene410Codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(Codec.forName(\"Lucene410\")).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire the default codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(TestUtil.getDefaultCodec()).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire the default codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(TestUtil.getDefaultCodec()).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer, true);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new ByteBuffersDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new ByteBuffersDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire the default codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(TestUtil.getDefaultCodec()).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new RAMDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire the default codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(TestUtil.getDefaultCodec()).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a4487b07c49a1861c05720e04624826ecbe9fa","date":1580924108,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFileSwitchDirectory#testBasic().mjava","sourceNew":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(\"fdx\");\n    fileExtensions.add(\"fdm\");\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new ByteBuffersDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new ByteBuffersDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire the default codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(TestUtil.getDefaultCodec()).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","sourceOld":"  /**\n   * Test if writing doc stores to disk and everything else to ram works.\n   */\n  public void testBasic() throws IOException {\n    Set<String> fileExtensions = new HashSet<>();\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_EXTENSION);\n    fileExtensions.add(CompressingStoredFieldsWriter.FIELDS_INDEX_EXTENSION);\n    \n    MockDirectoryWrapper primaryDir = new MockDirectoryWrapper(random(), new ByteBuffersDirectory());\n    primaryDir.setCheckIndexOnClose(false); // only part of an index\n    MockDirectoryWrapper secondaryDir = new MockDirectoryWrapper(random(), new ByteBuffersDirectory());\n    secondaryDir.setCheckIndexOnClose(false); // only part of an index\n    \n    FileSwitchDirectory fsd = new FileSwitchDirectory(fileExtensions, primaryDir, secondaryDir, true);\n    // for now we wire the default codec because we rely upon its specific impl\n    IndexWriter writer = new IndexWriter(\n        fsd,\n        new IndexWriterConfig(new MockAnalyzer(random())).\n            setMergePolicy(newLogMergePolicy(false)).setCodec(TestUtil.getDefaultCodec()).setUseCompoundFile(false)\n    );\n    TestIndexWriterReader.createIndexNoClose(true, \"ram\", writer);\n    IndexReader reader = DirectoryReader.open(writer);\n    assertEquals(100, reader.maxDoc());\n    writer.commit();\n    // we should see only fdx,fdt files here\n    String[] files = primaryDir.listAll();\n    assertTrue(files.length > 0);\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertTrue(fileExtensions.contains(ext));\n    }\n    files = secondaryDir.listAll();\n    assertTrue(files.length > 0);\n    // we should not see fdx,fdt files here\n    for (int x=0; x < files.length; x++) {\n      String ext = FileSwitchDirectory.getExtension(files[x]);\n      assertFalse(fileExtensions.contains(ext));\n    }\n    reader.close();\n    writer.close();\n\n    files = fsd.listAll();\n    for(int i=0;i<files.length;i++) {\n      assertNotNull(files[i]);\n    }\n    fsd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["624d2da1aed2d2415a83f3c573de0341c4001d90"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d77dafd89756a5161d244985903e3487ca109182":["2a1862266772deb28cdcb7d996b64d2177022687"],"66ccc0561aedc1d7cfde43ab8ca794160788e8fd":["4cc45c615dbb82bf79d5f9550286098367874fbf"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["22a2e66dfda83847e80095b8693c660742ab3e9c","66ccc0561aedc1d7cfde43ab8ca794160788e8fd"],"70a4487b07c49a1861c05720e04624826ecbe9fa":["d77dafd89756a5161d244985903e3487ca109182"],"2a1862266772deb28cdcb7d996b64d2177022687":["941b7027a51547b0a38d711bc08ec354f9e2e4a7"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"624d2da1aed2d2415a83f3c573de0341c4001d90":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70a4487b07c49a1861c05720e04624826ecbe9fa"],"941b7027a51547b0a38d711bc08ec354f9e2e4a7":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d77dafd89756a5161d244985903e3487ca109182":["70a4487b07c49a1861c05720e04624826ecbe9fa"],"66ccc0561aedc1d7cfde43ab8ca794160788e8fd":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["941b7027a51547b0a38d711bc08ec354f9e2e4a7"],"70a4487b07c49a1861c05720e04624826ecbe9fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a1862266772deb28cdcb7d996b64d2177022687":["d77dafd89756a5161d244985903e3487ca109182"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["624d2da1aed2d2415a83f3c573de0341c4001d90"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["66ccc0561aedc1d7cfde43ab8ca794160788e8fd"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","4cc45c615dbb82bf79d5f9550286098367874fbf"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"624d2da1aed2d2415a83f3c573de0341c4001d90":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"941b7027a51547b0a38d711bc08ec354f9e2e4a7":["2a1862266772deb28cdcb7d996b64d2177022687"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}