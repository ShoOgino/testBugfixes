{"path":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","commits":[{"id":"624157c95774b85ad3edb6e1e623c4736d18a94c","date":1496392341,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","pathOld":"/dev/null","sourceNew":"  private static void expectError(String name, Object val, String msg){\n    try {\n      Clause.validate(name, val);\n      fail(\"expected exception containing \"+msg);\n    } catch (Exception e) {\n      assertTrue(\"expected exception containing \"+msg,e.getMessage().contains(msg));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15","date":1496411842,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","sourceNew":"  private static void expectError(String name, Object val, String msg){\n    try {\n      Clause.validate(name, val,true);\n      fail(\"expected exception containing \"+msg);\n    } catch (Exception e) {\n      assertTrue(\"expected exception containing \"+msg,e.getMessage().contains(msg));\n    }\n\n  }\n\n","sourceOld":"  private static void expectError(String name, Object val, String msg){\n    try {\n      Clause.validate(name, val);\n      fail(\"expected exception containing \"+msg);\n    } catch (Exception e) {\n      assertTrue(\"expected exception containing \"+msg,e.getMessage().contains(msg));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","pathOld":"/dev/null","sourceNew":"  private static void expectError(String name, Object val, String msg){\n    try {\n      Clause.validate(name, val,true);\n      fail(\"expected exception containing \"+msg);\n    } catch (Exception e) {\n      assertTrue(\"expected exception containing \"+msg,e.getMessage().contains(msg));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","pathOld":"/dev/null","sourceNew":"  private static void expectError(String name, Object val, String msg){\n    try {\n      Clause.validate(name, val,true);\n      fail(\"expected exception containing \"+msg);\n    } catch (Exception e) {\n      assertTrue(\"expected exception containing \"+msg,e.getMessage().contains(msg));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","sourceNew":"  private static void expectError(String name, Object val, String msg){\n    try {\n      Clause.validate(name, val,true);\n      fail(\"expected exception containing \"+msg);\n    } catch (Exception e) {\n      assertTrue(\"expected exception containing \"+msg,e.getMessage().contains(msg));\n    }\n\n  }\n\n","sourceOld":"  private static void expectError(String name, Object val, String msg){\n    try {\n      Clause.validate(name, val,true);\n      fail(\"expected exception containing \"+msg);\n    } catch (Exception e) {\n      assertTrue(\"expected exception containing \"+msg,e.getMessage().contains(msg));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#expectError(String,Object,String).mjava","sourceNew":"  private static void expectError(String name, Object val, String msg){\n    try {\n      Clause.validate(name, val,true);\n      fail(\"expected exception containing \"+msg);\n    } catch (Exception e) {\n      assertTrue(\"expected exception containing \"+msg,e.getMessage().contains(msg));\n    }\n\n  }\n\n","sourceOld":"  private static void expectError(String name, Object val, String msg){\n    try {\n      Clause.validate(name, val,true);\n      fail(\"expected exception containing \"+msg);\n    } catch (Exception e) {\n      assertTrue(\"expected exception containing \"+msg,e.getMessage().contains(msg));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["e9017cf144952056066919f1ebc7897ff9bd71b1","e4848fb683db0790f2847173af06e2ad2d03328e"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["624157c95774b85ad3edb6e1e623c4736d18a94c"],"624157c95774b85ad3edb6e1e623c4736d18a94c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e4848fb683db0790f2847173af06e2ad2d03328e":["74aea047dff7f7c38a2d766827bd20d356f98c6a"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","e4848fb683db0790f2847173af06e2ad2d03328e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","74aea047dff7f7c38a2d766827bd20d356f98c6a","624157c95774b85ad3edb6e1e623c4736d18a94c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"624157c95774b85ad3edb6e1e623c4736d18a94c":["0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}