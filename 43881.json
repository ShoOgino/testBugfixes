{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","sourceNew":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    boolean logme = log.isInfoEnabled();\n    long warmingStartTime = System.currentTimeMillis();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\",\"true\");\n    for (int i=0; i<cacheList.length; i++) {\n      if (logme) log.info(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n\n\n      SolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n        @Override public SolrIndexSearcher getSearcher() { return SolrIndexSearcher.this; }\n        @Override public void close() { }\n      };\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        this.cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (logme) log.info(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    boolean logme = log.isInfoEnabled();\n    long warmingStartTime = System.currentTimeMillis();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\",\"true\");\n    for (int i=0; i<cacheList.length; i++) {\n      if (logme) log.info(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n\n\n      SolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n        @Override public SolrIndexSearcher getSearcher() { return SolrIndexSearcher.this; }\n        @Override public void close() { }\n      };\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        this.cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (logme) log.info(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","sourceNew":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    boolean logme = log.isInfoEnabled();\n    long warmingStartTime = System.currentTimeMillis();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\",\"true\");\n    for (int i=0; i<cacheList.length; i++) {\n      if (logme) log.info(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n\n\n      SolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n        @Override public SolrIndexSearcher getSearcher() { return SolrIndexSearcher.this; }\n        @Override public void close() { }\n      };\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        this.cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (logme) log.info(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    boolean logme = log.isInfoEnabled();\n    long warmingStartTime = System.currentTimeMillis();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\",\"true\");\n    for (int i=0; i<cacheList.length; i++) {\n      if (logme) log.info(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n\n\n      SolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n        @Override public SolrIndexSearcher getSearcher() { return SolrIndexSearcher.this; }\n        @Override public void close() { }\n      };\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        this.cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (logme) log.info(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","sourceNew":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    boolean logme = log.isInfoEnabled();\n    long warmingStartTime = System.currentTimeMillis();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\",\"true\");\n    for (int i=0; i<cacheList.length; i++) {\n      if (logme) log.info(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n\n\n      SolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n        @Override public SolrIndexSearcher getSearcher() { return SolrIndexSearcher.this; }\n        @Override public void close() { }\n      };\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        this.cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (logme) log.info(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    boolean logme = log.isInfoEnabled();\n    long warmingStartTime = System.currentTimeMillis();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\",\"true\");\n    for (int i=0; i<cacheList.length; i++) {\n      if (logme) log.info(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n\n\n      SolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n        @Override public SolrIndexSearcher getSearcher() { return SolrIndexSearcher.this; }\n        @Override public void close() { }\n      };\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        this.cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (logme) log.info(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8f7907798e0c730e9ab37681c6e8dfbde0e4173","date":1330361299,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","sourceNew":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    long warmingStartTime = System.currentTimeMillis();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\",\"true\");\n    for (int i=0; i<cacheList.length; i++) {\n      if (debug) log.debug(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n\n\n      SolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n        @Override public SolrIndexSearcher getSearcher() { return SolrIndexSearcher.this; }\n        @Override public void close() { }\n      };\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        this.cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (debug) log.debug(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    boolean logme = log.isInfoEnabled();\n    long warmingStartTime = System.currentTimeMillis();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\",\"true\");\n    for (int i=0; i<cacheList.length; i++) {\n      if (logme) log.info(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n\n\n      SolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n        @Override public SolrIndexSearcher getSearcher() { return SolrIndexSearcher.this; }\n        @Override public void close() { }\n      };\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        this.cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (logme) log.info(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","sourceNew":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    long warmingStartTime = System.currentTimeMillis();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\",\"true\");\n    for (int i=0; i<cacheList.length; i++) {\n      if (debug) log.debug(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n\n\n      SolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n        @Override public SolrIndexSearcher getSearcher() { return SolrIndexSearcher.this; }\n        @Override public void close() { }\n      };\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        this.cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (debug) log.debug(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    boolean logme = log.isInfoEnabled();\n    long warmingStartTime = System.currentTimeMillis();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\",\"true\");\n    for (int i=0; i<cacheList.length; i++) {\n      if (logme) log.info(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n\n\n      SolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n        @Override public SolrIndexSearcher getSearcher() { return SolrIndexSearcher.this; }\n        @Override public void close() { }\n      };\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        this.cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (logme) log.info(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd5bc858b8426d40bbe90b94120ead37c77d7954","date":1393812525,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","sourceNew":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    long warmingStartTime = System.nanoTime();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\",\"true\");\n    for (int i=0; i<cacheList.length; i++) {\n      if (debug) log.debug(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n\n\n      SolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n        @Override public SolrIndexSearcher getSearcher() { return SolrIndexSearcher.this; }\n        @Override public void close() { }\n      };\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        this.cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (debug) log.debug(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","sourceOld":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    long warmingStartTime = System.currentTimeMillis();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\",\"true\");\n    for (int i=0; i<cacheList.length; i++) {\n      if (debug) log.debug(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n\n\n      SolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n        @Override public SolrIndexSearcher getSearcher() { return SolrIndexSearcher.this; }\n        @Override public void close() { }\n      };\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        this.cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (debug) log.debug(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6d62214e818b74b9fa407c0c51956e44878a46a","date":1438266500,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","sourceNew":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    long warmingStartTime = System.nanoTime();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\",\"true\");\n    for (int i=0; i<cacheList.length; i++) {\n      if (debug) log.debug(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n\n\n      SolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n        @Override public SolrIndexSearcher getSearcher() { return SolrIndexSearcher.this; }\n        @Override public void close() { }\n      };\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.clearRequestInfo();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        this.cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (debug) log.debug(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","sourceOld":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    long warmingStartTime = System.nanoTime();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\",\"true\");\n    for (int i=0; i<cacheList.length; i++) {\n      if (debug) log.debug(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n\n\n      SolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n        @Override public SolrIndexSearcher getSearcher() { return SolrIndexSearcher.this; }\n        @Override public void close() { }\n      };\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        this.cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (debug) log.debug(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","sourceNew":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) {\n    // Make sure this is first! filters can help queryResults execute!\n    long warmingStartTime = System.nanoTime();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\", \"true\");\n    for (int i = 0; i < cacheList.length; i++) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"autowarming [{}] from [{}]\\n\\t{}\", this, old, old.cacheList[i]);\n      }\n\n      final SolrQueryRequest req = new LocalSolrQueryRequest(core, params) {\n        @Override\n        public SolrIndexSearcher getSearcher() {\n          return SolrIndexSearcher.this;\n        }\n\n        @Override\n        public void close() {}\n      };\n\n      final SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.clearRequestInfo();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (log.isDebugEnabled()) {\n        log.debug(\"autowarming result for [{}]\\n\\t{}\", this, cacheList[i]);\n      }\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","sourceOld":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) throws IOException {\n    // Make sure this is first!  filters can help queryResults execute!\n    long warmingStartTime = System.nanoTime();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\",\"true\");\n    for (int i=0; i<cacheList.length; i++) {\n      if (debug) log.debug(\"autowarming \" + this + \" from \" + old + \"\\n\\t\" + old.cacheList[i]);\n\n\n      SolrQueryRequest req = new LocalSolrQueryRequest(core,params) {\n        @Override public SolrIndexSearcher getSearcher() { return SolrIndexSearcher.this; }\n        @Override public void close() { }\n      };\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.clearRequestInfo();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        this.cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (debug) log.debug(\"autowarming result for \" + this + \"\\n\\t\" + this.cacheList[i]);\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","sourceNew":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public void warm(SolrIndexSearcher old) {\n    // Make sure this is first! filters can help queryResults execute!\n    long warmingStartTime = System.nanoTime();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\", \"true\");\n    for (int i = 0; i < cacheList.length; i++) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"autowarming [{}] from [{}]\\n\\t{}\", this, old, old.cacheList[i]);\n      }\n\n      final SolrQueryRequest req = new LocalSolrQueryRequest(core, params) {\n        @Override\n        public SolrIndexSearcher getSearcher() {\n          return SolrIndexSearcher.this;\n        }\n\n        @Override\n        public void close() {}\n      };\n\n      final SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.clearRequestInfo();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (log.isDebugEnabled()) {\n        log.debug(\"autowarming result for [{}]\\n\\t{}\", this, cacheList[i]);\n      }\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","sourceOld":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  public void warm(SolrIndexSearcher old) {\n    // Make sure this is first! filters can help queryResults execute!\n    long warmingStartTime = System.nanoTime();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\", \"true\");\n    for (int i = 0; i < cacheList.length; i++) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"autowarming [{}] from [{}]\\n\\t{}\", this, old, old.cacheList[i]);\n      }\n\n      final SolrQueryRequest req = new LocalSolrQueryRequest(core, params) {\n        @Override\n        public SolrIndexSearcher getSearcher() {\n          return SolrIndexSearcher.this;\n        }\n\n        @Override\n        public void close() {}\n      };\n\n      final SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.clearRequestInfo();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (log.isDebugEnabled()) {\n        log.debug(\"autowarming result for [{}]\\n\\t{}\", this, cacheList[i]);\n      }\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4","date":1592286410,"type":3,"author":"Nazerke Seidan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#warm(SolrIndexSearcher).mjava","sourceNew":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public void warm(SolrIndexSearcher old) {\n    // Make sure this is first! filters can help queryResults execute!\n    long warmingStartTime = System.nanoTime();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\", \"true\");\n    for (int i = 0; i < cacheList.length; i++) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"autowarming [{}] from [{}]\\n\\t{}\", this, old, old.cacheList[i]);\n      }\n\n      final SolrQueryRequest req = new LocalSolrQueryRequest(core, params) {\n        @Override\n        public SolrIndexSearcher getSearcher() {\n          return SolrIndexSearcher.this;\n        }\n\n        @Override\n        public void close() {}\n      };\n\n      final SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (log.isDebugEnabled()) {\n        log.debug(\"autowarming result for [{}]\\n\\t{}\", this, cacheList[i]);\n      }\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","sourceOld":"  /**\n   * Warm this searcher based on an old one (primarily for auto-cache warming).\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public void warm(SolrIndexSearcher old) {\n    // Make sure this is first! filters can help queryResults execute!\n    long warmingStartTime = System.nanoTime();\n    // warm the caches in order...\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"warming\", \"true\");\n    for (int i = 0; i < cacheList.length; i++) {\n      if (log.isDebugEnabled()) {\n        log.debug(\"autowarming [{}] from [{}]\\n\\t{}\", this, old, old.cacheList[i]);\n      }\n\n      final SolrQueryRequest req = new LocalSolrQueryRequest(core, params) {\n        @Override\n        public SolrIndexSearcher getSearcher() {\n          return SolrIndexSearcher.this;\n        }\n\n        @Override\n        public void close() {}\n      };\n\n      final SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.clearRequestInfo();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      try {\n        cacheList[i].warm(this, old.cacheList[i]);\n      } finally {\n        try {\n          req.close();\n        } finally {\n          SolrRequestInfo.clearRequestInfo();\n        }\n      }\n\n      if (log.isDebugEnabled()) {\n        log.debug(\"autowarming result for [{}]\\n\\t{}\", this, cacheList[i]);\n      }\n    }\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d6d62214e818b74b9fa407c0c51956e44878a46a":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"f8f7907798e0c730e9ab37681c6e8dfbde0e4173":["c26f00b574427b55127e869b935845554afde1fa"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["c26f00b574427b55127e869b935845554afde1fa","f8f7907798e0c730e9ab37681c6e8dfbde0e4173"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["d6d62214e818b74b9fa407c0c51956e44878a46a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["f8f7907798e0c730e9ab37681c6e8dfbde0e4173"]},"commit2Childs":{"d6d62214e818b74b9fa407c0c51956e44878a46a":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"f8f7907798e0c730e9ab37681c6e8dfbde0e4173":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fd5bc858b8426d40bbe90b94120ead37c77d7954"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"50dfd19525c8d73e856dca6edb64b7aea074037f":["a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["f8f7907798e0c730e9ab37681c6e8dfbde0e4173","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["d6d62214e818b74b9fa407c0c51956e44878a46a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}