{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"938e4fd7b1e4b34da1650edba7471764bbfaefde","date":1344033248,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1764a3d38fa1de1ac5474f293b8d32da723a409e","date":1344907887,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    try {\n      zkClient.close();\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.warn(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","date":1346692465,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      // we don't retry if there is a problem - count on ephem timeout\n      zkClient.delete(nodePath, -1, false);\n    } catch (KeeperException.NoNodeException e) {\n      // fine\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    } catch (KeeperException e) {\n      SolrException.log(log, \"Error trying to remove our ephem live node\", e);\n    }\n    \n    for (ElectionContext context : electionContexts.values()) {\n      context.close();\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":["d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1","date":1346817835,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    \n    for (ElectionContext context : electionContexts.values()) {\n      context.close();\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    try {\n      String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n      // we don't retry if there is a problem - count on ephem timeout\n      zkClient.delete(nodePath, -1, false);\n    } catch (KeeperException.NoNodeException e) {\n      // fine\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    } catch (KeeperException e) {\n      SolrException.log(log, \"Error trying to remove our ephem live node\", e);\n    }\n    \n    for (ElectionContext context : electionContexts.values()) {\n      context.close();\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    zkClient.close();\n  }\n\n","bugFix":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    \n    if (cmdDistribExecutor != null) {\n      try {\n        ExecutorUtil.shutdownNowAndAwaitTermination(cmdDistribExecutor);\n      } catch (Throwable e) {\n        SolrException.log(log, e);\n      }\n    }\n    \n    for (ElectionContext context : electionContexts.values()) {\n      context.close();\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    \n    for (ElectionContext context : electionContexts.values()) {\n      context.close();\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    \n    if (cmdDistribExecutor != null) {\n      try {\n        ExecutorUtil.shutdownNowAndAwaitTermination(cmdDistribExecutor);\n      } catch (Throwable e) {\n        SolrException.log(log, e);\n      }\n    }\n    \n    for (ElectionContext context : electionContexts.values()) {\n      try {\n        context.close();\n      } catch (Throwable t) {\n        log.error(\"Error closing overseer\", t);\n      }\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    \n    if (cmdDistribExecutor != null) {\n      try {\n        ExecutorUtil.shutdownNowAndAwaitTermination(cmdDistribExecutor);\n      } catch (Throwable e) {\n        SolrException.log(log, e);\n      }\n    }\n    \n    for (ElectionContext context : electionContexts.values()) {\n      context.close();\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    \n    if (cmdDistribExecutor != null) {\n      try {\n        ExecutorUtil.shutdownNowAndAwaitTermination(cmdDistribExecutor);\n      } catch (Throwable e) {\n        SolrException.log(log, e);\n      }\n    }\n    \n    for (ElectionContext context : electionContexts.values()) {\n      try {\n        context.close();\n      } catch (Throwable t) {\n        log.error(\"Error closing overseer\", t);\n      }\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    \n    if (cmdDistribExecutor != null) {\n      try {\n        ExecutorUtil.shutdownNowAndAwaitTermination(cmdDistribExecutor);\n      } catch (Throwable e) {\n        SolrException.log(log, e);\n      }\n    }\n    \n    for (ElectionContext context : electionContexts.values()) {\n      context.close();\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d044a068e0d16ff314fb7f93fa75194d5360a6ff","date":1355610187,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    \n    if (cmdDistribExecutor != null) {\n      try {\n        ExecutorUtil.shutdownNowAndAwaitTermination(cmdDistribExecutor);\n      } catch (Throwable e) {\n        SolrException.log(log, e);\n      }\n    }\n    \n    for (ElectionContext context : electionContexts.values()) {\n      try {\n        context.close();\n      } catch (Throwable t) {\n        log.error(\"Error closing overseer\", t);\n      }\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    \n    if (cmdDistribExecutor != null) {\n      try {\n        ExecutorUtil.shutdownNowAndAwaitTermination(cmdDistribExecutor);\n      } catch (Throwable e) {\n        SolrException.log(log, e);\n      }\n    }\n    \n    for (ElectionContext context : electionContexts.values()) {\n      try {\n        context.close();\n      } catch (Throwable t) {\n        log.error(\"Error closing overseer\", t);\n      }\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a69439d0df009e0bb0038d1e427159f449dd670d","date":1355704683,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    \n    for (ElectionContext context : electionContexts.values()) {\n      try {\n        context.close();\n      } catch (Throwable t) {\n        log.error(\"Error closing overseer\", t);\n      }\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    \n    try {\n      zkClient.close();;\n    } catch(Throwable t) {\n      log.error(\"Error closing zkClient\", t);\n    } \n    \n    if (updateShardHandler != null) {\n      try {\n        updateShardHandler.close();\n      } catch(Throwable t) {\n        log.error(\"Error closing updateShardHandler\", t);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    \n    if (cmdDistribExecutor != null) {\n      try {\n        ExecutorUtil.shutdownNowAndAwaitTermination(cmdDistribExecutor);\n      } catch (Throwable e) {\n        SolrException.log(log, e);\n      }\n    }\n    \n    for (ElectionContext context : electionContexts.values()) {\n      try {\n        context.close();\n      } catch (Throwable t) {\n        log.error(\"Error closing overseer\", t);\n      }\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    \n    for (ElectionContext context : electionContexts.values()) {\n      try {\n        context.close();\n      } catch (Throwable t) {\n        log.error(\"Error closing overseer\", t);\n      }\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    \n    try {\n      zkClient.close();;\n    } catch(Throwable t) {\n      log.error(\"Error closing zkClient\", t);\n    } \n    \n    if (updateShardHandler != null) {\n      try {\n        updateShardHandler.close();\n      } catch(Throwable t) {\n        log.error(\"Error closing updateShardHandler\", t);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    \n    if (cmdDistribExecutor != null) {\n      try {\n        ExecutorUtil.shutdownNowAndAwaitTermination(cmdDistribExecutor);\n      } catch (Throwable e) {\n        SolrException.log(log, e);\n      }\n    }\n    \n    for (ElectionContext context : electionContexts.values()) {\n      try {\n        context.close();\n      } catch (Throwable t) {\n        log.error(\"Error closing overseer\", t);\n      }\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55540ade5a813e3e393664af04fefbda8a018eff","date":1362953988,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    \n    for (ElectionContext context : electionContexts.values()) {\n      try {\n        context.close();\n      } catch (Throwable t) {\n        log.error(\"Error closing overseer\", t);\n      }\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    \n    try {\n      zkStateReader.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing zkStateReader\", t);\n    } \n    \n    try {\n      zkClient.close();;\n    } catch(Throwable t) {\n      log.error(\"Error closing zkClient\", t);\n    } \n    \n    if (updateShardHandler != null) {\n      try {\n        updateShardHandler.close();\n      } catch(Throwable t) {\n        log.error(\"Error closing updateShardHandler\", t);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    \n    for (ElectionContext context : electionContexts.values()) {\n      try {\n        context.close();\n      } catch (Throwable t) {\n        log.error(\"Error closing overseer\", t);\n      }\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    \n    try {\n      zkClient.close();;\n    } catch(Throwable t) {\n      log.error(\"Error closing zkClient\", t);\n    } \n    \n    if (updateShardHandler != null) {\n      try {\n        updateShardHandler.close();\n      } catch(Throwable t) {\n        log.error(\"Error closing updateShardHandler\", t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7035935aa89f6951286e9005cbeb16e89a082a2","date":1385258396,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    \n    for (ElectionContext context : electionContexts.values()) {\n      try {\n        context.close();\n      } catch (Throwable t) {\n        log.error(\"Error closing overseer\", t);\n      }\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    \n    try {\n      zkStateReader.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing zkStateReader\", t);\n    } \n    \n    try {\n      zkClient.close();;\n    } catch(Throwable t) {\n      log.error(\"Error closing zkClient\", t);\n    } \n    \n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    \n    for (ElectionContext context : electionContexts.values()) {\n      try {\n        context.close();\n      } catch (Throwable t) {\n        log.error(\"Error closing overseer\", t);\n      }\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    \n    try {\n      zkStateReader.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing zkStateReader\", t);\n    } \n    \n    try {\n      zkClient.close();;\n    } catch(Throwable t) {\n      log.error(\"Error closing zkClient\", t);\n    } \n    \n    if (updateShardHandler != null) {\n      try {\n        updateShardHandler.close();\n      } catch(Throwable t) {\n        log.error(\"Error closing updateShardHandler\", t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    \n    for (ElectionContext context : electionContexts.values()) {\n      try {\n        context.close();\n      } catch (Throwable t) {\n        log.error(\"Error closing overseer\", t);\n      }\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    \n    try {\n      zkStateReader.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing zkStateReader\", t);\n    } \n    \n    try {\n      zkClient.close();;\n    } catch(Throwable t) {\n      log.error(\"Error closing zkClient\", t);\n    } \n    \n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    \n    for (ElectionContext context : electionContexts.values()) {\n      try {\n        context.close();\n      } catch (Throwable t) {\n        log.error(\"Error closing overseer\", t);\n      }\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    \n    try {\n      zkStateReader.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing zkStateReader\", t);\n    } \n    \n    try {\n      zkClient.close();;\n    } catch(Throwable t) {\n      log.error(\"Error closing zkClient\", t);\n    } \n    \n    if (updateShardHandler != null) {\n      try {\n        updateShardHandler.close();\n      } catch(Throwable t) {\n        log.error(\"Error closing updateShardHandler\", t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    try {\n      for (ElectionContext context : electionContexts.values()) {\n        try {\n          context.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      }\n    } finally {\n      try {\n        try {\n          overseer.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      } finally {\n        try {\n          try {\n            zkStateReader.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkStateReader\", e);\n          }\n        } finally {\n          try {\n            zkClient.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkClient\", e);\n          }\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    \n    for (ElectionContext context : electionContexts.values()) {\n      try {\n        context.close();\n      } catch (Throwable t) {\n        log.error(\"Error closing overseer\", t);\n      }\n    }\n    \n    try {\n      overseer.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing overseer\", t);\n    }\n    \n    try {\n      zkStateReader.close();\n    } catch(Throwable t) {\n      log.error(\"Error closing zkStateReader\", t);\n    } \n    \n    try {\n      zkClient.close();;\n    } catch(Throwable t) {\n      log.error(\"Error closing zkClient\", t);\n    } \n    \n  }\n\n","bugFix":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6","d9405f486872f1e416304dfe389741f4ee2f8a4d","938e4fd7b1e4b34da1650edba7471764bbfaefde","a69439d0df009e0bb0038d1e427159f449dd670d","55540ade5a813e3e393664af04fefbda8a018eff"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    try {\n      for (ElectionContext context : electionContexts.values()) {\n        try {\n          context.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      }\n    } finally {\n      try {\n        try {\n          overseer.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      } finally {\n        try {\n          try {\n            zkStateReader.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkStateReader\", e);\n          }\n        } finally {\n          try {\n            zkClient.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkClient\", e);\n          }\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    try {\n      for (ElectionContext context : electionContexts.values()) {\n        try {\n          context.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      }\n    } finally {\n      try {\n        try {\n          overseer.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      } finally {\n        try {\n          try {\n            zkStateReader.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkStateReader\", e);\n          }\n        } finally {\n          try {\n            zkClient.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkClient\", e);\n          }\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    try {\n      for (ElectionContext context : electionContexts.values()) {\n        try {\n          context.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      }\n    } finally {\n      try {\n        try {\n          overseer.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      } finally {\n        try {\n          try {\n            zkStateReader.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkStateReader\", e);\n          }\n        } finally {\n          try {\n            zkClient.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkClient\", e);\n          }\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    try {\n      for (ElectionContext context : electionContexts.values()) {\n        try {\n          context.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      }\n    } finally {\n      try {\n        try {\n          overseer.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      } finally {\n        try {\n          try {\n            zkStateReader.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkStateReader\", e);\n          }\n        } finally {\n          try {\n            zkClient.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkClient\", e);\n          }\n        }\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e5195d9b6757fc3b49ce0b0d98e9616bfeaa09f","date":1486929486,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    try {\n      for (ElectionContext context : electionContexts.values()) {\n        try {\n          context.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      }\n    } finally {\n      try {\n        try {\n          overseer.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      } finally {\n        try {\n          try {\n            zkStateReader.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkStateReader\", e);\n          }\n        } finally {\n          try {\n            zkClient.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkClient\", e);\n          }\n        }\n      }\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    try {\n      for (ElectionContext context : electionContexts.values()) {\n        try {\n          context.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      }\n    } finally {\n      try {\n        try {\n          overseer.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      } finally {\n        try {\n          try {\n            zkStateReader.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkStateReader\", e);\n          }\n        } finally {\n          try {\n            zkClient.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkClient\", e);\n          }\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d21dace9d18b198721b5f6835adb37c57acd5d20","date":1487384563,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    try {\n      for (ElectionContext context : electionContexts.values()) {\n        try {\n          context.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      }\n    } finally {\n      try {\n        IOUtils.closeQuietly(overseerElector.getContext());\n        IOUtils.closeQuietly(overseer);\n      } finally {\n        try {\n          try {\n            zkStateReader.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkStateReader\", e);\n          }\n        } finally {\n          try {\n            zkClient.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkClient\", e);\n          }\n        }\n      }\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    try {\n      for (ElectionContext context : electionContexts.values()) {\n        try {\n          context.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      }\n    } finally {\n      try {\n        try {\n          overseer.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      } finally {\n        try {\n          try {\n            zkStateReader.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkStateReader\", e);\n          }\n        } finally {\n          try {\n            zkClient.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkClient\", e);\n          }\n        }\n      }\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    try {\n      for (ElectionContext context : electionContexts.values()) {\n        try {\n          context.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      }\n    } finally {\n      try {\n        IOUtils.closeQuietly(overseerElector.getContext());\n        IOUtils.closeQuietly(overseer);\n      } finally {\n        if (cloudSolrClient != null) {\n          IOUtils.closeQuietly(cloudSolrClient);\n        }\n        if (clusterDataProvider != null) {\n          IOUtils.closeQuietly(clusterDataProvider);\n        }\n        try {\n          try {\n            zkStateReader.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkStateReader\", e);\n          }\n        } finally {\n          try {\n            zkClient.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkClient\", e);\n          }\n        }\n      }\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    try {\n      for (ElectionContext context : electionContexts.values()) {\n        try {\n          context.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      }\n    } finally {\n      try {\n        IOUtils.closeQuietly(overseerElector.getContext());\n        IOUtils.closeQuietly(overseer);\n      } finally {\n        try {\n          try {\n            zkStateReader.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkStateReader\", e);\n          }\n        } finally {\n          try {\n            zkClient.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkClient\", e);\n          }\n        }\n      }\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    try {\n      for (ElectionContext context : electionContexts.values()) {\n        try {\n          context.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      }\n    } finally {\n      try {\n        IOUtils.closeQuietly(overseerElector.getContext());\n        IOUtils.closeQuietly(overseer);\n      } finally {\n        try {\n          try {\n            zkStateReader.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkStateReader\", e);\n          }\n        } finally {\n          try {\n            zkClient.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkClient\", e);\n          }\n        }\n      }\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    try {\n      for (ElectionContext context : electionContexts.values()) {\n        try {\n          context.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      }\n    } finally {\n      try {\n        IOUtils.closeQuietly(overseerElector.getContext());\n        IOUtils.closeQuietly(overseer);\n      } finally {\n        if (cloudSolrClient != null) {\n          IOUtils.closeQuietly(cloudSolrClient);\n        }\n        if (clusterDataProvider != null) {\n          IOUtils.closeQuietly(clusterDataProvider);\n        }\n        try {\n          try {\n            zkStateReader.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkStateReader\", e);\n          }\n        } finally {\n          try {\n            zkClient.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkClient\", e);\n          }\n        }\n      }\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    try {\n      for (ElectionContext context : electionContexts.values()) {\n        try {\n          context.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      }\n    } finally {\n      try {\n        IOUtils.closeQuietly(overseerElector.getContext());\n        IOUtils.closeQuietly(overseer);\n      } finally {\n        if (cloudSolrClient != null) {\n          IOUtils.closeQuietly(cloudSolrClient);\n        }\n        if (cloudManager != null) {\n          IOUtils.closeQuietly(cloudManager);\n        }\n        try {\n          try {\n            zkStateReader.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkStateReader\", e);\n          }\n        } finally {\n          try {\n            zkClient.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkClient\", e);\n          }\n        }\n      }\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    try {\n      for (ElectionContext context : electionContexts.values()) {\n        try {\n          context.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      }\n    } finally {\n      try {\n        IOUtils.closeQuietly(overseerElector.getContext());\n        IOUtils.closeQuietly(overseer);\n      } finally {\n        try {\n          try {\n            zkStateReader.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkStateReader\", e);\n          }\n        } finally {\n          try {\n            zkClient.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkClient\", e);\n          }\n        }\n      }\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    synchronized (collectionToTerms) {\n      collectionToTerms.values().forEach(ZkCollectionTerms::close);\n    }\n    try {\n      for (ElectionContext context : electionContexts.values()) {\n        try {\n          context.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      }\n    } finally {\n      try {\n        IOUtils.closeQuietly(overseerElector.getContext());\n        IOUtils.closeQuietly(overseer);\n      } finally {\n        if (cloudSolrClient != null) {\n          IOUtils.closeQuietly(cloudSolrClient);\n        }\n        if (cloudManager != null) {\n          IOUtils.closeQuietly(cloudManager);\n        }\n        try {\n          try {\n            zkStateReader.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkStateReader\", e);\n          }\n        } finally {\n          try {\n            zkClient.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkClient\", e);\n          }\n        }\n      }\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    try {\n      for (ElectionContext context : electionContexts.values()) {\n        try {\n          context.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      }\n    } finally {\n      try {\n        IOUtils.closeQuietly(overseerElector.getContext());\n        IOUtils.closeQuietly(overseer);\n      } finally {\n        if (cloudSolrClient != null) {\n          IOUtils.closeQuietly(cloudSolrClient);\n        }\n        if (cloudManager != null) {\n          IOUtils.closeQuietly(cloudManager);\n        }\n        try {\n          try {\n            zkStateReader.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkStateReader\", e);\n          }\n        } finally {\n          try {\n            zkClient.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkClient\", e);\n          }\n        }\n      }\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n\n    ForkJoinPool customThreadPool = new ForkJoinPool(10);\n\n    customThreadPool.submit(() -> Collections.singleton(overseerElector.getContext()).parallelStream().forEach(c -> {\n      IOUtils.closeQuietly(c);\n    }));\n\n    customThreadPool.submit(() -> Collections.singleton(overseer).parallelStream().forEach(c -> {\n      IOUtils.closeQuietly(c);\n    }));\n\n    synchronized (collectionToTerms) {\n      customThreadPool.submit(() -> collectionToTerms.values().parallelStream().forEach(c -> {\n        c.close();\n      }));\n    }\n    try {\n\n      customThreadPool.submit(() -> replicateFromLeaders.values().parallelStream().forEach(c -> {\n        c.stopReplication();\n      }));\n\n      customThreadPool.submit(() -> electionContexts.values().parallelStream().forEach(c -> {\n        IOUtils.closeQuietly(c);\n      }));\n\n    } finally {\n\n      customThreadPool.submit(() -> Collections.singleton(cloudSolrClient).parallelStream().forEach(c -> {\n        IOUtils.closeQuietly(c);\n      }));\n      customThreadPool.submit(() -> Collections.singleton(cloudManager).parallelStream().forEach(c -> {\n        IOUtils.closeQuietly(c);\n      }));\n\n      try {\n        try {\n          zkStateReader.close();\n        } catch (Exception e) {\n          log.error(\"Error closing zkStateReader\", e);\n        }\n      } finally {\n        try {\n          zkClient.close();\n        } catch (Exception e) {\n          log.error(\"Error closing zkClient\", e);\n        } finally {\n\n          // just in case the OverseerElectionContext managed to start another Overseer\n          IOUtils.closeQuietly(overseer);\n\n          ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n        }\n\n      }\n\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n    synchronized (collectionToTerms) {\n      collectionToTerms.values().forEach(ZkCollectionTerms::close);\n    }\n    try {\n      for (ElectionContext context : electionContexts.values()) {\n        try {\n          context.close();\n        } catch (Exception e) {\n          log.error(\"Error closing overseer\", e);\n        }\n      }\n    } finally {\n      try {\n        IOUtils.closeQuietly(overseerElector.getContext());\n        IOUtils.closeQuietly(overseer);\n      } finally {\n        if (cloudSolrClient != null) {\n          IOUtils.closeQuietly(cloudSolrClient);\n        }\n        if (cloudManager != null) {\n          IOUtils.closeQuietly(cloudManager);\n        }\n        try {\n          try {\n            zkStateReader.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkStateReader\", e);\n          }\n        } finally {\n          try {\n            zkClient.close();\n          } catch (Exception e) {\n            log.error(\"Error closing zkClient\", e);\n          }\n        }\n      }\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","bugFix":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","84f20f331d8001864545c7021812d8c6509c7593","d21dace9d18b198721b5f6835adb37c57acd5d20","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e34aff27dfe70db6a9f0d2da0f5d9b640fbac18","date":1543645562,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n\n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    customThreadPool.submit(() -> Collections.singleton(overseerElector.getContext()).parallelStream().forEach(c -> {\n      IOUtils.closeQuietly(c);\n    }));\n\n    customThreadPool.submit(() -> Collections.singleton(overseer).parallelStream().forEach(c -> {\n      IOUtils.closeQuietly(c);\n    }));\n\n    synchronized (collectionToTerms) {\n      customThreadPool.submit(() -> collectionToTerms.values().parallelStream().forEach(c -> {\n        c.close();\n      }));\n    }\n    try {\n\n      customThreadPool.submit(() -> replicateFromLeaders.values().parallelStream().forEach(c -> {\n        c.stopReplication();\n      }));\n\n      customThreadPool.submit(() -> electionContexts.values().parallelStream().forEach(c -> {\n        IOUtils.closeQuietly(c);\n      }));\n\n    } finally {\n\n      customThreadPool.submit(() -> Collections.singleton(cloudSolrClient).parallelStream().forEach(c -> {\n        IOUtils.closeQuietly(c);\n      }));\n      customThreadPool.submit(() -> Collections.singleton(cloudManager).parallelStream().forEach(c -> {\n        IOUtils.closeQuietly(c);\n      }));\n\n      try {\n        try {\n          zkStateReader.close();\n        } catch (Exception e) {\n          log.error(\"Error closing zkStateReader\", e);\n        }\n      } finally {\n        try {\n          zkClient.close();\n        } catch (Exception e) {\n          log.error(\"Error closing zkClient\", e);\n        } finally {\n\n          // just in case the OverseerElectionContext managed to start another Overseer\n          IOUtils.closeQuietly(overseer);\n\n          ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n        }\n\n      }\n\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n\n    ForkJoinPool customThreadPool = new ForkJoinPool(10);\n\n    customThreadPool.submit(() -> Collections.singleton(overseerElector.getContext()).parallelStream().forEach(c -> {\n      IOUtils.closeQuietly(c);\n    }));\n\n    customThreadPool.submit(() -> Collections.singleton(overseer).parallelStream().forEach(c -> {\n      IOUtils.closeQuietly(c);\n    }));\n\n    synchronized (collectionToTerms) {\n      customThreadPool.submit(() -> collectionToTerms.values().parallelStream().forEach(c -> {\n        c.close();\n      }));\n    }\n    try {\n\n      customThreadPool.submit(() -> replicateFromLeaders.values().parallelStream().forEach(c -> {\n        c.stopReplication();\n      }));\n\n      customThreadPool.submit(() -> electionContexts.values().parallelStream().forEach(c -> {\n        IOUtils.closeQuietly(c);\n      }));\n\n    } finally {\n\n      customThreadPool.submit(() -> Collections.singleton(cloudSolrClient).parallelStream().forEach(c -> {\n        IOUtils.closeQuietly(c);\n      }));\n      customThreadPool.submit(() -> Collections.singleton(cloudManager).parallelStream().forEach(c -> {\n        IOUtils.closeQuietly(c);\n      }));\n\n      try {\n        try {\n          zkStateReader.close();\n        } catch (Exception e) {\n          log.error(\"Error closing zkStateReader\", e);\n        }\n      } finally {\n        try {\n          zkClient.close();\n        } catch (Exception e) {\n          log.error(\"Error closing zkClient\", e);\n        } finally {\n\n          // just in case the OverseerElectionContext managed to start another Overseer\n          IOUtils.closeQuietly(overseer);\n\n          ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n        }\n\n      }\n\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dcafe37f7abc7c26e68e7d206bfe7380dd0f2a6","date":1554970874,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    if (!this.isClosed)\n      preClose();\n\n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    customThreadPool.submit(() -> Collections.singleton(overseerElector.getContext()).parallelStream().forEach(IOUtils::closeQuietly));\n\n    customThreadPool.submit(() -> Collections.singleton(overseer).parallelStream().forEach(IOUtils::closeQuietly));\n\n    try {\n      customThreadPool.submit(() -> electionContexts.values().parallelStream().forEach(IOUtils::closeQuietly));\n\n    } finally {\n\n      customThreadPool.submit(() -> Collections.singleton(cloudSolrClient).parallelStream().forEach(IOUtils::closeQuietly));\n      customThreadPool.submit(() -> Collections.singleton(cloudManager).parallelStream().forEach(IOUtils::closeQuietly));\n\n      try {\n        try {\n          zkStateReader.close();\n        } catch (Exception e) {\n          log.error(\"Error closing zkStateReader\", e);\n        }\n      } finally {\n        try {\n          zkClient.close();\n        } catch (Exception e) {\n          log.error(\"Error closing zkClient\", e);\n        } finally {\n\n          // just in case the OverseerElectionContext managed to start another Overseer\n          IOUtils.closeQuietly(overseer);\n\n          ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n        }\n\n      }\n\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    this.isClosed = true;\n\n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    customThreadPool.submit(() -> Collections.singleton(overseerElector.getContext()).parallelStream().forEach(c -> {\n      IOUtils.closeQuietly(c);\n    }));\n\n    customThreadPool.submit(() -> Collections.singleton(overseer).parallelStream().forEach(c -> {\n      IOUtils.closeQuietly(c);\n    }));\n\n    synchronized (collectionToTerms) {\n      customThreadPool.submit(() -> collectionToTerms.values().parallelStream().forEach(c -> {\n        c.close();\n      }));\n    }\n    try {\n\n      customThreadPool.submit(() -> replicateFromLeaders.values().parallelStream().forEach(c -> {\n        c.stopReplication();\n      }));\n\n      customThreadPool.submit(() -> electionContexts.values().parallelStream().forEach(c -> {\n        IOUtils.closeQuietly(c);\n      }));\n\n    } finally {\n\n      customThreadPool.submit(() -> Collections.singleton(cloudSolrClient).parallelStream().forEach(c -> {\n        IOUtils.closeQuietly(c);\n      }));\n      customThreadPool.submit(() -> Collections.singleton(cloudManager).parallelStream().forEach(c -> {\n        IOUtils.closeQuietly(c);\n      }));\n\n      try {\n        try {\n          zkStateReader.close();\n        } catch (Exception e) {\n          log.error(\"Error closing zkStateReader\", e);\n        }\n      } finally {\n        try {\n          zkClient.close();\n        } catch (Exception e) {\n          log.error(\"Error closing zkClient\", e);\n        } finally {\n\n          // just in case the OverseerElectionContext managed to start another Overseer\n          IOUtils.closeQuietly(overseer);\n\n          ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n        }\n\n      }\n\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"033183e9e2da4609614733f0226a38c88c49ed36","date":1557334549,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    if (!this.isClosed)\n      preClose();\n\n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    customThreadPool.submit(() -> Collections.singleton(overseerElector.getContext()).parallelStream().forEach(IOUtils::closeQuietly));\n\n    customThreadPool.submit(() -> Collections.singleton(overseer).parallelStream().forEach(IOUtils::closeQuietly));\n\n    try {\n      customThreadPool.submit(() -> electionContexts.values().parallelStream().forEach(IOUtils::closeQuietly));\n\n    } finally {\n\n      sysPropsCacher.close();\n      customThreadPool.submit(() -> Collections.singleton(cloudSolrClient).parallelStream().forEach(IOUtils::closeQuietly));\n      customThreadPool.submit(() -> Collections.singleton(cloudManager).parallelStream().forEach(IOUtils::closeQuietly));\n\n      try {\n        try {\n          zkStateReader.close();\n        } catch (Exception e) {\n          log.error(\"Error closing zkStateReader\", e);\n        }\n      } finally {\n        try {\n          zkClient.close();\n        } catch (Exception e) {\n          log.error(\"Error closing zkClient\", e);\n        } finally {\n\n          // just in case the OverseerElectionContext managed to start another Overseer\n          IOUtils.closeQuietly(overseer);\n\n          ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n        }\n\n      }\n\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    if (!this.isClosed)\n      preClose();\n\n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    customThreadPool.submit(() -> Collections.singleton(overseerElector.getContext()).parallelStream().forEach(IOUtils::closeQuietly));\n\n    customThreadPool.submit(() -> Collections.singleton(overseer).parallelStream().forEach(IOUtils::closeQuietly));\n\n    try {\n      customThreadPool.submit(() -> electionContexts.values().parallelStream().forEach(IOUtils::closeQuietly));\n\n    } finally {\n\n      customThreadPool.submit(() -> Collections.singleton(cloudSolrClient).parallelStream().forEach(IOUtils::closeQuietly));\n      customThreadPool.submit(() -> Collections.singleton(cloudManager).parallelStream().forEach(IOUtils::closeQuietly));\n\n      try {\n        try {\n          zkStateReader.close();\n        } catch (Exception e) {\n          log.error(\"Error closing zkStateReader\", e);\n        }\n      } finally {\n        try {\n          zkClient.close();\n        } catch (Exception e) {\n          log.error(\"Error closing zkClient\", e);\n        } finally {\n\n          // just in case the OverseerElectionContext managed to start another Overseer\n          IOUtils.closeQuietly(overseer);\n\n          ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n        }\n\n      }\n\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#close().mjava","sourceNew":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    if (!this.isClosed)\n      preClose();\n\n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"closeThreadPool\"));\n\n    customThreadPool.submit(() -> Collections.singleton(overseerElector.getContext()).parallelStream().forEach(IOUtils::closeQuietly));\n\n    customThreadPool.submit(() -> Collections.singleton(overseer).parallelStream().forEach(IOUtils::closeQuietly));\n\n    try {\n      customThreadPool.submit(() -> electionContexts.values().parallelStream().forEach(IOUtils::closeQuietly));\n\n    } finally {\n\n      sysPropsCacher.close();\n      customThreadPool.submit(() -> Collections.singleton(cloudSolrClient).parallelStream().forEach(IOUtils::closeQuietly));\n      customThreadPool.submit(() -> Collections.singleton(cloudManager).parallelStream().forEach(IOUtils::closeQuietly));\n\n      try {\n        try {\n          zkStateReader.close();\n        } catch (Exception e) {\n          log.error(\"Error closing zkStateReader\", e);\n        }\n      } finally {\n        try {\n          zkClient.close();\n        } catch (Exception e) {\n          log.error(\"Error closing zkClient\", e);\n        } finally {\n\n          // just in case the OverseerElectionContext managed to start another Overseer\n          IOUtils.closeQuietly(overseer);\n\n          ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n        }\n\n      }\n\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","sourceOld":"  /**\n   * Closes the underlying ZooKeeper client.\n   */\n  public void close() {\n    if (!this.isClosed)\n      preClose();\n\n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    customThreadPool.submit(() -> Collections.singleton(overseerElector.getContext()).parallelStream().forEach(IOUtils::closeQuietly));\n\n    customThreadPool.submit(() -> Collections.singleton(overseer).parallelStream().forEach(IOUtils::closeQuietly));\n\n    try {\n      customThreadPool.submit(() -> electionContexts.values().parallelStream().forEach(IOUtils::closeQuietly));\n\n    } finally {\n\n      sysPropsCacher.close();\n      customThreadPool.submit(() -> Collections.singleton(cloudSolrClient).parallelStream().forEach(IOUtils::closeQuietly));\n      customThreadPool.submit(() -> Collections.singleton(cloudManager).parallelStream().forEach(IOUtils::closeQuietly));\n\n      try {\n        try {\n          zkStateReader.close();\n        } catch (Exception e) {\n          log.error(\"Error closing zkStateReader\", e);\n        }\n      } finally {\n        try {\n          zkClient.close();\n        } catch (Exception e) {\n          log.error(\"Error closing zkClient\", e);\n        } finally {\n\n          // just in case the OverseerElectionContext managed to start another Overseer\n          IOUtils.closeQuietly(overseer);\n\n          ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n        }\n\n      }\n\n    }\n    assert ObjectReleaseTracker.release(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d9405f486872f1e416304dfe389741f4ee2f8a4d","a69439d0df009e0bb0038d1e427159f449dd670d"],"d21dace9d18b198721b5f6835adb37c57acd5d20":["1e5195d9b6757fc3b49ce0b0d98e9616bfeaa09f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["84f20f331d8001864545c7021812d8c6509c7593"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["8fd5be977c105554c6a7b68afcdbc511439723ab","1764a3d38fa1de1ac5474f293b8d32da723a409e"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a69439d0df009e0bb0038d1e427159f449dd670d":["d044a068e0d16ff314fb7f93fa75194d5360a6ff"],"84f20f331d8001864545c7021812d8c6509c7593":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["a6378064655e76cd7b908b1cab4ce425b384b508"],"d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1":["7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["d6f074e73200c07d54f242d3880a8da5a35ff97b","1764a3d38fa1de1ac5474f293b8d32da723a409e"],"033183e9e2da4609614733f0226a38c88c49ed36":["2dcafe37f7abc7c26e68e7d206bfe7380dd0f2a6"],"1e5195d9b6757fc3b49ce0b0d98e9616bfeaa09f":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","fbcfc050b9f253136eaa5950b57248b2109eac11"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0e34aff27dfe70db6a9f0d2da0f5d9b640fbac18":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f2126b84bd093fa3d921582a109a0ee578c28126":["a6378064655e76cd7b908b1cab4ce425b384b508","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"a7035935aa89f6951286e9005cbeb16e89a082a2":["55540ade5a813e3e393664af04fefbda8a018eff"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["a7035935aa89f6951286e9005cbeb16e89a082a2"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["d21dace9d18b198721b5f6835adb37c57acd5d20"],"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["1764a3d38fa1de1ac5474f293b8d32da723a409e"],"2dcafe37f7abc7c26e68e7d206bfe7380dd0f2a6":["0e34aff27dfe70db6a9f0d2da0f5d9b640fbac18"],"938e4fd7b1e4b34da1650edba7471764bbfaefde":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["d21dace9d18b198721b5f6835adb37c57acd5d20"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","938e4fd7b1e4b34da1650edba7471764bbfaefde"],"a6378064655e76cd7b908b1cab4ce425b384b508":["d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1"],"55540ade5a813e3e393664af04fefbda8a018eff":["a69439d0df009e0bb0038d1e427159f449dd670d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1764a3d38fa1de1ac5474f293b8d32da723a409e":["938e4fd7b1e4b34da1650edba7471764bbfaefde"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["033183e9e2da4609614733f0226a38c88c49ed36"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","938e4fd7b1e4b34da1650edba7471764bbfaefde"],"d044a068e0d16ff314fb7f93fa75194d5360a6ff":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["55540ade5a813e3e393664af04fefbda8a018eff","a7035935aa89f6951286e9005cbeb16e89a082a2"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d21dace9d18b198721b5f6835adb37c57acd5d20":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0e34aff27dfe70db6a9f0d2da0f5d9b640fbac18"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"c26f00b574427b55127e869b935845554afde1fa":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a69439d0df009e0bb0038d1e427159f449dd670d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","55540ade5a813e3e393664af04fefbda8a018eff"],"84f20f331d8001864545c7021812d8c6509c7593":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f2126b84bd093fa3d921582a109a0ee578c28126","d044a068e0d16ff314fb7f93fa75194d5360a6ff"],"d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1":["a6378064655e76cd7b908b1cab4ce425b384b508"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"1e5195d9b6757fc3b49ce0b0d98e9616bfeaa09f":["d21dace9d18b198721b5f6835adb37c57acd5d20"],"033183e9e2da4609614733f0226a38c88c49ed36":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"0e34aff27dfe70db6a9f0d2da0f5d9b640fbac18":["2dcafe37f7abc7c26e68e7d206bfe7380dd0f2a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"a7035935aa89f6951286e9005cbeb16e89a082a2":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbcfc050b9f253136eaa5950b57248b2109eac11"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6":["d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1"],"2dcafe37f7abc7c26e68e7d206bfe7380dd0f2a6":["033183e9e2da4609614733f0226a38c88c49ed36"],"938e4fd7b1e4b34da1650edba7471764bbfaefde":["8fd5be977c105554c6a7b68afcdbc511439723ab","1764a3d38fa1de1ac5474f293b8d32da723a409e","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["84f20f331d8001864545c7021812d8c6509c7593"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"b869898f50ca80263bac2e3ae0949f7700e5c977":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"a6378064655e76cd7b908b1cab4ce425b384b508":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"55540ade5a813e3e393664af04fefbda8a018eff":["a7035935aa89f6951286e9005cbeb16e89a082a2","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"1764a3d38fa1de1ac5474f293b8d32da723a409e":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","7157fdda82ae1a1cb77b012ef0eb72249ee2f3d6"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d044a068e0d16ff314fb7f93fa75194d5360a6ff":["a69439d0df009e0bb0038d1e427159f449dd670d"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","938e4fd7b1e4b34da1650edba7471764bbfaefde","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"fbcfc050b9f253136eaa5950b57248b2109eac11":["1e5195d9b6757fc3b49ce0b0d98e9616bfeaa09f","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d22ac6a4146774c1bc8400160fc0b6150294e92","f2126b84bd093fa3d921582a109a0ee578c28126","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","b869898f50ca80263bac2e3ae0949f7700e5c977","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}