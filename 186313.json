{"path":"backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCounting().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCounting().mjava","pathOld":"/dev/null","sourceNew":"  public void testReferenceCounting() throws IOException {\n   \n    for (int mode = 0; mode < 4; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(dir1, true);\n     \n      IndexReader reader0 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader0);\n\n      assertTrue(reader0 instanceof DirectoryReader);\n      IndexReader[] subReaders0 = reader0.getSequentialSubReaders();\n      for (int i = 0; i < subReaders0.length; i++) {\n        assertRefCountEquals(1, subReaders0[i]);\n      }\n      \n      // delete first document, so that only one of the subReaders have to be re-opened\n      IndexReader modifier = IndexReader.open(dir1, false);\n      modifier.deleteDocument(0);\n      modifier.close();\n      \n      IndexReader reader1 = refreshReader(reader0, true).refreshedReader;\n      assertTrue(reader1 instanceof DirectoryReader);\n      IndexReader[] subReaders1 = reader1.getSequentialSubReaders();\n      assertEquals(subReaders0.length, subReaders1.length);\n      \n      for (int i = 0; i < subReaders0.length; i++) {\n        if (subReaders0[i] != subReaders1[i]) {\n          assertRefCountEquals(1, subReaders0[i]);\n          assertRefCountEquals(1, subReaders1[i]);\n        } else {\n          assertRefCountEquals(2, subReaders0[i]);\n        }\n      }\n\n      // delete first document, so that only one of the subReaders have to be re-opened\n      modifier = IndexReader.open(dir1, false);\n      modifier.deleteDocument(1);\n      modifier.close();\n\n      IndexReader reader2 = refreshReader(reader1, true).refreshedReader;\n      assertTrue(reader2 instanceof DirectoryReader);\n      IndexReader[] subReaders2 = reader2.getSequentialSubReaders();\n      assertEquals(subReaders1.length, subReaders2.length);\n      \n      for (int i = 0; i < subReaders2.length; i++) {\n        if (subReaders2[i] == subReaders1[i]) {\n          if (subReaders1[i] == subReaders0[i]) {\n            assertRefCountEquals(3, subReaders2[i]);\n          } else {\n            assertRefCountEquals(2, subReaders2[i]);\n          }\n        } else {\n          assertRefCountEquals(1, subReaders2[i]);\n          if (subReaders0[i] == subReaders1[i]) {\n            assertRefCountEquals(2, subReaders2[i]);\n            assertRefCountEquals(2, subReaders0[i]);\n          } else {\n            assertRefCountEquals(1, subReaders0[i]);\n            assertRefCountEquals(1, subReaders1[i]);\n          }\n        }\n      }\n      \n      IndexReader reader3 = refreshReader(reader0, true).refreshedReader;\n      assertTrue(reader3 instanceof DirectoryReader);\n      IndexReader[] subReaders3 = reader3.getSequentialSubReaders();\n      assertEquals(subReaders3.length, subReaders0.length);\n      \n      // try some permutations\n      switch (mode) {\n      case 0:\n        reader0.close();\n        reader1.close();\n        reader2.close();\n        reader3.close();\n        break;\n      case 1:\n        reader3.close();\n        reader2.close();\n        reader1.close();\n        reader0.close();\n        break;\n      case 2:\n        reader2.close();\n        reader3.close();\n        reader0.close();\n        reader1.close();\n        break;\n      case 3:\n        reader1.close();\n        reader3.close();\n        reader2.close();\n        reader0.close();\n        break;\n      }      \n      \n      assertReaderClosed(reader0, true, true);\n      assertReaderClosed(reader1, true, true);\n      assertReaderClosed(reader2, true, true);\n      assertReaderClosed(reader3, true, true);\n\n      dir1.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCounting().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCounting().mjava","sourceNew":"  public void testReferenceCounting() throws IOException {\n   \n    for (int mode = 0; mode < 4; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(dir1, true);\n     \n      IndexReader reader0 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader0);\n\n      assertTrue(reader0 instanceof DirectoryReader);\n      IndexReader[] subReaders0 = reader0.getSequentialSubReaders();\n      for (int i = 0; i < subReaders0.length; i++) {\n        assertRefCountEquals(1, subReaders0[i]);\n      }\n      \n      // delete first document, so that only one of the subReaders have to be re-opened\n      IndexReader modifier = IndexReader.open(dir1, false);\n      modifier.deleteDocument(0);\n      modifier.close();\n      \n      IndexReader reader1 = refreshReader(reader0, true).refreshedReader;\n      assertTrue(reader1 instanceof DirectoryReader);\n      IndexReader[] subReaders1 = reader1.getSequentialSubReaders();\n      assertEquals(subReaders0.length, subReaders1.length);\n      \n      for (int i = 0; i < subReaders0.length; i++) {\n        if (subReaders0[i] != subReaders1[i]) {\n          assertRefCountEquals(1, subReaders0[i]);\n          assertRefCountEquals(1, subReaders1[i]);\n        } else {\n          assertRefCountEquals(2, subReaders0[i]);\n        }\n      }\n\n      // delete first document, so that only one of the subReaders have to be re-opened\n      modifier = IndexReader.open(dir1, false);\n      modifier.deleteDocument(1);\n      modifier.close();\n\n      IndexReader reader2 = refreshReader(reader1, true).refreshedReader;\n      assertTrue(reader2 instanceof DirectoryReader);\n      IndexReader[] subReaders2 = reader2.getSequentialSubReaders();\n      assertEquals(subReaders1.length, subReaders2.length);\n      \n      for (int i = 0; i < subReaders2.length; i++) {\n        if (subReaders2[i] == subReaders1[i]) {\n          if (subReaders1[i] == subReaders0[i]) {\n            assertRefCountEquals(3, subReaders2[i]);\n          } else {\n            assertRefCountEquals(2, subReaders2[i]);\n          }\n        } else {\n          assertRefCountEquals(1, subReaders2[i]);\n          if (subReaders0[i] == subReaders1[i]) {\n            assertRefCountEquals(2, subReaders2[i]);\n            assertRefCountEquals(2, subReaders0[i]);\n          } else {\n            assertRefCountEquals(1, subReaders0[i]);\n            assertRefCountEquals(1, subReaders1[i]);\n          }\n        }\n      }\n      \n      IndexReader reader3 = refreshReader(reader0, true).refreshedReader;\n      assertTrue(reader3 instanceof DirectoryReader);\n      IndexReader[] subReaders3 = reader3.getSequentialSubReaders();\n      assertEquals(subReaders3.length, subReaders0.length);\n      \n      // try some permutations\n      switch (mode) {\n      case 0:\n        reader0.close();\n        reader1.close();\n        reader2.close();\n        reader3.close();\n        break;\n      case 1:\n        reader3.close();\n        reader2.close();\n        reader1.close();\n        reader0.close();\n        break;\n      case 2:\n        reader2.close();\n        reader3.close();\n        reader0.close();\n        reader1.close();\n        break;\n      case 3:\n        reader1.close();\n        reader3.close();\n        reader2.close();\n        reader0.close();\n        break;\n      }      \n      \n      assertReaderClosed(reader0, true, true);\n      assertReaderClosed(reader1, true, true);\n      assertReaderClosed(reader2, true, true);\n      assertReaderClosed(reader3, true, true);\n\n      dir1.close();\n    }\n  }\n\n","sourceOld":"  public void testReferenceCounting() throws IOException {\n   \n    for (int mode = 0; mode < 4; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(dir1, true);\n     \n      IndexReader reader0 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader0);\n\n      assertTrue(reader0 instanceof DirectoryReader);\n      IndexReader[] subReaders0 = reader0.getSequentialSubReaders();\n      for (int i = 0; i < subReaders0.length; i++) {\n        assertRefCountEquals(1, subReaders0[i]);\n      }\n      \n      // delete first document, so that only one of the subReaders have to be re-opened\n      IndexReader modifier = IndexReader.open(dir1, false);\n      modifier.deleteDocument(0);\n      modifier.close();\n      \n      IndexReader reader1 = refreshReader(reader0, true).refreshedReader;\n      assertTrue(reader1 instanceof DirectoryReader);\n      IndexReader[] subReaders1 = reader1.getSequentialSubReaders();\n      assertEquals(subReaders0.length, subReaders1.length);\n      \n      for (int i = 0; i < subReaders0.length; i++) {\n        if (subReaders0[i] != subReaders1[i]) {\n          assertRefCountEquals(1, subReaders0[i]);\n          assertRefCountEquals(1, subReaders1[i]);\n        } else {\n          assertRefCountEquals(2, subReaders0[i]);\n        }\n      }\n\n      // delete first document, so that only one of the subReaders have to be re-opened\n      modifier = IndexReader.open(dir1, false);\n      modifier.deleteDocument(1);\n      modifier.close();\n\n      IndexReader reader2 = refreshReader(reader1, true).refreshedReader;\n      assertTrue(reader2 instanceof DirectoryReader);\n      IndexReader[] subReaders2 = reader2.getSequentialSubReaders();\n      assertEquals(subReaders1.length, subReaders2.length);\n      \n      for (int i = 0; i < subReaders2.length; i++) {\n        if (subReaders2[i] == subReaders1[i]) {\n          if (subReaders1[i] == subReaders0[i]) {\n            assertRefCountEquals(3, subReaders2[i]);\n          } else {\n            assertRefCountEquals(2, subReaders2[i]);\n          }\n        } else {\n          assertRefCountEquals(1, subReaders2[i]);\n          if (subReaders0[i] == subReaders1[i]) {\n            assertRefCountEquals(2, subReaders2[i]);\n            assertRefCountEquals(2, subReaders0[i]);\n          } else {\n            assertRefCountEquals(1, subReaders0[i]);\n            assertRefCountEquals(1, subReaders1[i]);\n          }\n        }\n      }\n      \n      IndexReader reader3 = refreshReader(reader0, true).refreshedReader;\n      assertTrue(reader3 instanceof DirectoryReader);\n      IndexReader[] subReaders3 = reader3.getSequentialSubReaders();\n      assertEquals(subReaders3.length, subReaders0.length);\n      \n      // try some permutations\n      switch (mode) {\n      case 0:\n        reader0.close();\n        reader1.close();\n        reader2.close();\n        reader3.close();\n        break;\n      case 1:\n        reader3.close();\n        reader2.close();\n        reader1.close();\n        reader0.close();\n        break;\n      case 2:\n        reader2.close();\n        reader3.close();\n        reader0.close();\n        reader1.close();\n        break;\n      case 3:\n        reader1.close();\n        reader3.close();\n        reader2.close();\n        reader0.close();\n        break;\n      }      \n      \n      assertReaderClosed(reader0, true, true);\n      assertReaderClosed(reader1, true, true);\n      assertReaderClosed(reader2, true, true);\n      assertReaderClosed(reader3, true, true);\n\n      dir1.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}