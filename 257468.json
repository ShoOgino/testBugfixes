{"path":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#writeProx(int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#writeProx(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#writeProx(int,int).mjava","sourceNew":"  void writeProx(final int termID, int proxCode) {\n    //System.out.println(\"writeProx termID=\" + termID + \" proxCode=\" + proxCode);\n    assert writeProx;\n    final Payload payload;\n    if (payloadAttribute == null) {\n      payload = null;\n    } else {\n      payload = payloadAttribute.getPayload();\n    }\n\n    if (payload != null && payload.length > 0) {\n      termsHashPerField.writeVInt(1, (proxCode<<1)|1);\n      termsHashPerField.writeVInt(1, payload.length);\n      termsHashPerField.writeBytes(1, payload.data, payload.offset, payload.length);\n      hasPayloads = true;\n    } else {\n      termsHashPerField.writeVInt(1, proxCode<<1);\n    }\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    postings.lastPositions[termID] = fieldState.position;\n  }\n\n","sourceOld":"  void writeProx(final int termID, int proxCode) {\n    //System.out.println(\"writeProx termID=\" + termID + \" proxCode=\" + proxCode);\n    assert writeProx;\n    final Payload payload;\n    if (payloadAttribute == null) {\n      payload = null;\n    } else {\n      payload = payloadAttribute.getPayload();\n    }\n\n    if (payload != null && payload.length > 0) {\n      termsHashPerField.writeVInt(1, (proxCode<<1)|1);\n      termsHashPerField.writeVInt(1, payload.length);\n      termsHashPerField.writeBytes(1, payload.data, payload.offset, payload.length);\n      hasPayloads = true;\n    } else {\n      termsHashPerField.writeVInt(1, proxCode<<1);\n    }\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    postings.lastPositions[termID] = fieldState.position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83ede60c0b5bb96ad193414bbd663193b56689b3","date":1338331478,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#writeProx(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#writeProx(int,int).mjava","sourceNew":"  void writeProx(final int termID, int proxCode) {\n    //System.out.println(\"writeProx termID=\" + termID + \" proxCode=\" + proxCode);\n    assert hasProx;\n    final Payload payload;\n    if (payloadAttribute == null) {\n      payload = null;\n    } else {\n      payload = payloadAttribute.getPayload();\n    }\n\n    if (payload != null && payload.length > 0) {\n      termsHashPerField.writeVInt(1, (proxCode<<1)|1);\n      termsHashPerField.writeVInt(1, payload.length);\n      termsHashPerField.writeBytes(1, payload.data, payload.offset, payload.length);\n      hasPayloads = true;\n    } else {\n      termsHashPerField.writeVInt(1, proxCode<<1);\n    }\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    postings.lastPositions[termID] = fieldState.position;\n  }\n\n","sourceOld":"  void writeProx(final int termID, int proxCode) {\n    //System.out.println(\"writeProx termID=\" + termID + \" proxCode=\" + proxCode);\n    assert writeProx;\n    final Payload payload;\n    if (payloadAttribute == null) {\n      payload = null;\n    } else {\n      payload = payloadAttribute.getPayload();\n    }\n\n    if (payload != null && payload.length > 0) {\n      termsHashPerField.writeVInt(1, (proxCode<<1)|1);\n      termsHashPerField.writeVInt(1, payload.length);\n      termsHashPerField.writeBytes(1, payload.data, payload.offset, payload.length);\n      hasPayloads = true;\n    } else {\n      termsHashPerField.writeVInt(1, proxCode<<1);\n    }\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    postings.lastPositions[termID] = fieldState.position;\n  }\n\n","bugFix":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#writeProx(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#writeProx(int,int).mjava","sourceNew":"  void writeProx(final int termID, int proxCode) {\n    //System.out.println(\"writeProx termID=\" + termID + \" proxCode=\" + proxCode);\n    assert hasProx;\n    final BytesRef payload;\n    if (payloadAttribute == null) {\n      payload = null;\n    } else {\n      payload = payloadAttribute.getPayload();\n    }\n\n    if (payload != null && payload.length > 0) {\n      termsHashPerField.writeVInt(1, (proxCode<<1)|1);\n      termsHashPerField.writeVInt(1, payload.length);\n      termsHashPerField.writeBytes(1, payload.bytes, payload.offset, payload.length);\n      hasPayloads = true;\n    } else {\n      termsHashPerField.writeVInt(1, proxCode<<1);\n    }\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    postings.lastPositions[termID] = fieldState.position;\n  }\n\n","sourceOld":"  void writeProx(final int termID, int proxCode) {\n    //System.out.println(\"writeProx termID=\" + termID + \" proxCode=\" + proxCode);\n    assert hasProx;\n    final Payload payload;\n    if (payloadAttribute == null) {\n      payload = null;\n    } else {\n      payload = payloadAttribute.getPayload();\n    }\n\n    if (payload != null && payload.length > 0) {\n      termsHashPerField.writeVInt(1, (proxCode<<1)|1);\n      termsHashPerField.writeVInt(1, payload.length);\n      termsHashPerField.writeBytes(1, payload.data, payload.offset, payload.length);\n      hasPayloads = true;\n    } else {\n      termsHashPerField.writeVInt(1, proxCode<<1);\n    }\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    postings.lastPositions[termID] = fieldState.position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#writeProx(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#writeProx(int,int).mjava","sourceNew":"  void writeProx(int termID, int proxCode) {\n    if (payloadAttribute == null) {\n      writeVInt(1, proxCode<<1);\n    } else {\n      BytesRef payload = payloadAttribute.getPayload();\n      if (payload != null && payload.length > 0) {\n        writeVInt(1, (proxCode<<1)|1);\n        writeVInt(1, payload.length);\n        writeBytes(1, payload.bytes, payload.offset, payload.length);\n        sawPayloads = true;\n      } else {\n        writeVInt(1, proxCode<<1);\n      }\n    }\n\n    assert postingsArray == freqProxPostingsArray;\n    freqProxPostingsArray.lastPositions[termID] = fieldState.position;\n  }\n\n","sourceOld":"  void writeProx(final int termID, int proxCode) {\n    //System.out.println(\"writeProx termID=\" + termID + \" proxCode=\" + proxCode);\n    assert hasProx;\n    final BytesRef payload;\n    if (payloadAttribute == null) {\n      payload = null;\n    } else {\n      payload = payloadAttribute.getPayload();\n    }\n\n    if (payload != null && payload.length > 0) {\n      termsHashPerField.writeVInt(1, (proxCode<<1)|1);\n      termsHashPerField.writeVInt(1, payload.length);\n      termsHashPerField.writeBytes(1, payload.bytes, payload.offset, payload.length);\n      hasPayloads = true;\n    } else {\n      termsHashPerField.writeVInt(1, proxCode<<1);\n    }\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    postings.lastPositions[termID] = fieldState.position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#writeProx(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#writeProx(int,int).mjava","sourceNew":"  void writeProx(int termID, int proxCode) {\n    if (payloadAttribute == null) {\n      writeVInt(1, proxCode<<1);\n    } else {\n      BytesRef payload = payloadAttribute.getPayload();\n      if (payload != null && payload.length > 0) {\n        writeVInt(1, (proxCode<<1)|1);\n        writeVInt(1, payload.length);\n        writeBytes(1, payload.bytes, payload.offset, payload.length);\n        sawPayloads = true;\n      } else {\n        writeVInt(1, proxCode<<1);\n      }\n    }\n\n    assert postingsArray == freqProxPostingsArray;\n    freqProxPostingsArray.lastPositions[termID] = fieldState.position;\n  }\n\n","sourceOld":"  void writeProx(final int termID, int proxCode) {\n    //System.out.println(\"writeProx termID=\" + termID + \" proxCode=\" + proxCode);\n    assert hasProx;\n    final BytesRef payload;\n    if (payloadAttribute == null) {\n      payload = null;\n    } else {\n      payload = payloadAttribute.getPayload();\n    }\n\n    if (payload != null && payload.length > 0) {\n      termsHashPerField.writeVInt(1, (proxCode<<1)|1);\n      termsHashPerField.writeVInt(1, payload.length);\n      termsHashPerField.writeBytes(1, payload.bytes, payload.offset, payload.length);\n      hasPayloads = true;\n    } else {\n      termsHashPerField.writeVInt(1, proxCode<<1);\n    }\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    postings.lastPositions[termID] = fieldState.position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#writeProx(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#writeProx(int,int).mjava","sourceNew":"  void writeProx(int termID, int proxCode) {\n    if (payloadAttribute == null) {\n      writeVInt(1, proxCode<<1);\n    } else {\n      BytesRef payload = payloadAttribute.getPayload();\n      if (payload != null && payload.length > 0) {\n        writeVInt(1, (proxCode<<1)|1);\n        writeVInt(1, payload.length);\n        writeBytes(1, payload.bytes, payload.offset, payload.length);\n        sawPayloads = true;\n      } else {\n        writeVInt(1, proxCode<<1);\n      }\n    }\n\n    assert postingsArray == freqProxPostingsArray;\n    freqProxPostingsArray.lastPositions[termID] = fieldState.position;\n  }\n\n","sourceOld":"  void writeProx(final int termID, int proxCode) {\n    //System.out.println(\"writeProx termID=\" + termID + \" proxCode=\" + proxCode);\n    assert hasProx;\n    final BytesRef payload;\n    if (payloadAttribute == null) {\n      payload = null;\n    } else {\n      payload = payloadAttribute.getPayload();\n    }\n\n    if (payload != null && payload.length > 0) {\n      termsHashPerField.writeVInt(1, (proxCode<<1)|1);\n      termsHashPerField.writeVInt(1, payload.length);\n      termsHashPerField.writeBytes(1, payload.bytes, payload.offset, payload.length);\n      hasPayloads = true;\n    } else {\n      termsHashPerField.writeVInt(1, proxCode<<1);\n    }\n\n    FreqProxPostingsArray postings = (FreqProxPostingsArray) termsHashPerField.postingsArray;\n    postings.lastPositions[termID] = fieldState.position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["76fa9933adb0556e752e8af9734c4d0ae14622ff","52c7e49be259508735752fba88085255014a6ecf"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["76fa9933adb0556e752e8af9734c4d0ae14622ff","3394716f52b34ab259ad5247e7595d9f9db6e935"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83ede60c0b5bb96ad193414bbd663193b56689b3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"52c7e49be259508735752fba88085255014a6ecf":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3394716f52b34ab259ad5247e7595d9f9db6e935"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"83ede60c0b5bb96ad193414bbd663193b56689b3":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","52c7e49be259508735752fba88085255014a6ecf"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}