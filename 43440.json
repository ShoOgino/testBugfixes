{"path":"src/test/org/apache/lucene/index/TestCompoundFile#testTwoFiles().mjava","commits":[{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#testTwoFiles().mjava","pathOld":"/dev/null","sourceNew":"    /** This test creates compound file based on two files.\n     *  \n     */\n    public void testTwoFiles() throws IOException {\n        createSequenceFile(dir, \"d1\", (byte) 0, 15);\n        createSequenceFile(dir, \"d2\", (byte) 0, 114);\n        \n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"d.csf\");\n        csw.addFile(\"d1\");\n        csw.addFile(\"d2\");\n        csw.close();\n        \n        CompoundFileReader csr = new CompoundFileReader(dir, \"d.csf\");\n        InputStream expected = dir.openFile(\"d1\");\n        InputStream actual = csr.openFile(\"d1\");\n        assertSameStreams(\"d1\", expected, actual);\n        assertSameSeekBehavior(\"d1\", expected, actual);\n        expected.close();\n        actual.close();\n        \n        expected = dir.openFile(\"d2\");\n        actual = csr.openFile(\"d2\");\n        assertSameStreams(\"d2\", expected, actual);\n        assertSameSeekBehavior(\"d2\", expected, actual);\n        expected.close();\n        actual.close();\n        csr.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1acbe60842541f8c38e2d60b03591478c9f91546","date":1066055498,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#testTwoFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#testTwoFiles().mjava","sourceNew":"    /** This test creates compound file based on two files.\n     *\n     */\n    public void testTwoFiles() throws IOException {\n        createSequenceFile(dir, \"d1\", (byte) 0, 15);\n        createSequenceFile(dir, \"d2\", (byte) 0, 114);\n\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"d.csf\");\n        csw.addFile(\"d1\");\n        csw.addFile(\"d2\");\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"d.csf\");\n        InputStream expected = dir.openFile(\"d1\");\n        InputStream actual = csr.openFile(\"d1\");\n        assertSameStreams(\"d1\", expected, actual);\n        assertSameSeekBehavior(\"d1\", expected, actual);\n        expected.close();\n        actual.close();\n\n        expected = dir.openFile(\"d2\");\n        actual = csr.openFile(\"d2\");\n        assertSameStreams(\"d2\", expected, actual);\n        assertSameSeekBehavior(\"d2\", expected, actual);\n        expected.close();\n        actual.close();\n        csr.close();\n    }\n\n","sourceOld":"    /** This test creates compound file based on two files.\n     *  \n     */\n    public void testTwoFiles() throws IOException {\n        createSequenceFile(dir, \"d1\", (byte) 0, 15);\n        createSequenceFile(dir, \"d2\", (byte) 0, 114);\n        \n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"d.csf\");\n        csw.addFile(\"d1\");\n        csw.addFile(\"d2\");\n        csw.close();\n        \n        CompoundFileReader csr = new CompoundFileReader(dir, \"d.csf\");\n        InputStream expected = dir.openFile(\"d1\");\n        InputStream actual = csr.openFile(\"d1\");\n        assertSameStreams(\"d1\", expected, actual);\n        assertSameSeekBehavior(\"d1\", expected, actual);\n        expected.close();\n        actual.close();\n        \n        expected = dir.openFile(\"d2\");\n        actual = csr.openFile(\"d2\");\n        assertSameStreams(\"d2\", expected, actual);\n        assertSameSeekBehavior(\"d2\", expected, actual);\n        expected.close();\n        actual.close();\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#testTwoFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#testTwoFiles().mjava","sourceNew":"    /** This test creates compound file based on two files.\n     *\n     */\n    public void testTwoFiles() throws IOException {\n        createSequenceFile(dir, \"d1\", (byte) 0, 15);\n        createSequenceFile(dir, \"d2\", (byte) 0, 114);\n\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"d.csf\");\n        csw.addFile(\"d1\");\n        csw.addFile(\"d2\");\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"d.csf\");\n        IndexInput expected = dir.openInput(\"d1\");\n        IndexInput actual = csr.openInput(\"d1\");\n        assertSameStreams(\"d1\", expected, actual);\n        assertSameSeekBehavior(\"d1\", expected, actual);\n        expected.close();\n        actual.close();\n\n        expected = dir.openInput(\"d2\");\n        actual = csr.openInput(\"d2\");\n        assertSameStreams(\"d2\", expected, actual);\n        assertSameSeekBehavior(\"d2\", expected, actual);\n        expected.close();\n        actual.close();\n        csr.close();\n    }\n\n","sourceOld":"    /** This test creates compound file based on two files.\n     *\n     */\n    public void testTwoFiles() throws IOException {\n        createSequenceFile(dir, \"d1\", (byte) 0, 15);\n        createSequenceFile(dir, \"d2\", (byte) 0, 114);\n\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"d.csf\");\n        csw.addFile(\"d1\");\n        csw.addFile(\"d2\");\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"d.csf\");\n        InputStream expected = dir.openFile(\"d1\");\n        InputStream actual = csr.openFile(\"d1\");\n        assertSameStreams(\"d1\", expected, actual);\n        assertSameSeekBehavior(\"d1\", expected, actual);\n        expected.close();\n        actual.close();\n\n        expected = dir.openFile(\"d2\");\n        actual = csr.openFile(\"d2\");\n        assertSameStreams(\"d2\", expected, actual);\n        assertSameSeekBehavior(\"d2\", expected, actual);\n        expected.close();\n        actual.close();\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testTwoFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#testTwoFiles().mjava","sourceNew":"    /** This test creates compound file based on two files.\n     *\n     */\n    public void testTwoFiles() throws IOException {\n        createSequenceFile(dir, \"d1\", (byte) 0, 15);\n        createSequenceFile(dir, \"d2\", (byte) 0, 114);\n\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"d.csf\");\n        csw.addFile(\"d1\");\n        csw.addFile(\"d2\");\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"d.csf\");\n        IndexInput expected = dir.openInput(\"d1\");\n        IndexInput actual = csr.openInput(\"d1\");\n        assertSameStreams(\"d1\", expected, actual);\n        assertSameSeekBehavior(\"d1\", expected, actual);\n        expected.close();\n        actual.close();\n\n        expected = dir.openInput(\"d2\");\n        actual = csr.openInput(\"d2\");\n        assertSameStreams(\"d2\", expected, actual);\n        assertSameSeekBehavior(\"d2\", expected, actual);\n        expected.close();\n        actual.close();\n        csr.close();\n    }\n\n","sourceOld":"    /** This test creates compound file based on two files.\n     *\n     */\n    public void testTwoFiles() throws IOException {\n        createSequenceFile(dir, \"d1\", (byte) 0, 15);\n        createSequenceFile(dir, \"d2\", (byte) 0, 114);\n\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"d.csf\");\n        csw.addFile(\"d1\");\n        csw.addFile(\"d2\");\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"d.csf\");\n        IndexInput expected = dir.openInput(\"d1\");\n        IndexInput actual = csr.openInput(\"d1\");\n        assertSameStreams(\"d1\", expected, actual);\n        assertSameSeekBehavior(\"d1\", expected, actual);\n        expected.close();\n        actual.close();\n\n        expected = dir.openInput(\"d2\");\n        actual = csr.openInput(\"d2\");\n        assertSameStreams(\"d2\", expected, actual);\n        assertSameSeekBehavior(\"d2\", expected, actual);\n        expected.close();\n        actual.close();\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e971ba25509e21a130fef61f0687be0446ca27a0":["1acbe60842541f8c38e2d60b03591478c9f91546"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1acbe60842541f8c38e2d60b03591478c9f91546":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e971ba25509e21a130fef61f0687be0446ca27a0"]},"commit2Childs":{"e971ba25509e21a130fef61f0687be0446ca27a0":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"1acbe60842541f8c38e2d60b03591478c9f91546":["e971ba25509e21a130fef61f0687be0446ca27a0"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["1acbe60842541f8c38e2d60b03591478c9f91546"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}