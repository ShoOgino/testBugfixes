{"path":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestFacetsConfig#testPathToStringAndBack().mjava","commits":[{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestFacetsConfig#testPathToStringAndBack().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestDocumentBuilder#testPathToStringAndBack().mjava","sourceNew":"  public void testPathToStringAndBack() throws Exception {\n    int iters = atLeast(1000);\n    for(int i=0;i<iters;i++) {\n      int numParts = _TestUtil.nextInt(random(), 1, 6);\n      String[] parts = new String[numParts];\n      for(int j=0;j<numParts;j++) {\n        parts[j] = _TestUtil.randomUnicodeString(random());\n      }\n\n      String s = FacetsConfig.pathToString(parts);\n      String[] parts2 = FacetsConfig.stringToPath(s);\n      assertTrue(Arrays.equals(parts, parts2));\n    }\n  }\n\n","sourceOld":"  public void testPathToStringAndBack() throws Exception {\n    int iters = atLeast(1000);\n    for(int i=0;i<iters;i++) {\n      int numParts = _TestUtil.nextInt(random(), 1, 6);\n      String[] parts = new String[numParts];\n      for(int j=0;j<numParts;j++) {\n        parts[j] = _TestUtil.randomUnicodeString(random());\n      }\n\n      String s = DocumentBuilder.pathToString(parts);\n      String[] parts2 = DocumentBuilder.stringToPath(s);\n      assertTrue(Arrays.equals(parts, parts2));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestFacetsConfig#testPathToStringAndBack().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestFacetsConfig#testPathToStringAndBack().mjava","sourceNew":"  public void testPathToStringAndBack() throws Exception {\n    int iters = atLeast(1000);\n    for(int i=0;i<iters;i++) {\n      int numParts = _TestUtil.nextInt(random(), 1, 6);\n      String[] parts = new String[numParts];\n      for(int j=0;j<numParts;j++) {\n        parts[j] = _TestUtil.randomUnicodeString(random());\n      }\n\n      String s = FacetsConfig.pathToString(parts);\n      String[] parts2 = FacetsConfig.stringToPath(s);\n      assertTrue(Arrays.equals(parts, parts2));\n    }\n  }\n\n","sourceOld":"  public void testPathToStringAndBack() throws Exception {\n    int iters = atLeast(1000);\n    for(int i=0;i<iters;i++) {\n      int numParts = _TestUtil.nextInt(random(), 1, 6);\n      String[] parts = new String[numParts];\n      for(int j=0;j<numParts;j++) {\n        parts[j] = _TestUtil.randomUnicodeString(random());\n      }\n\n      String s = FacetsConfig.pathToString(parts);\n      String[] parts2 = FacetsConfig.stringToPath(s);\n      assertTrue(Arrays.equals(parts, parts2));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["ae75def1e2525383b6e1397ed97c44387da9941c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae75def1e2525383b6e1397ed97c44387da9941c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","ae75def1e2525383b6e1397ed97c44387da9941c"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"ae75def1e2525383b6e1397ed97c44387da9941c":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}