{"path":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","commits":[{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   * @throws NoSuchElementException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, false, null);\n          zookeeper.delete(path, -1);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fd1b710c5464a5da208b929fe456d5cb5126b6e8","fd1b710c5464a5da208b929fe456d5cb5126b6e8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c2d0da1152c8dd998675c30a3f6f599a91770c2b","date":1342792640,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   * @throws NoSuchElementException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   * @throws NoSuchElementException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, false, null);\n          zookeeper.delete(path, -1);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   * @throws NoSuchElementException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   * @throws NoSuchElementException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, false, null);\n          zookeeper.delete(path, -1);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   * @throws NoSuchElementException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   * @throws NoSuchElementException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, false, null);\n          zookeeper.delete(path, -1);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   * @throws NoSuchElementException\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd1b710c5464a5da208b929fe456d5cb5126b6e8","date":1353510167,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await(DEFAULT_TIMEOUT);\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","bugFix":["a5093a9e893633cc091cf2f729d7863671c2b715"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await(DEFAULT_TIMEOUT);\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await();\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f45f67a018421da088ea39274f23ad5d339b97d","date":1395559348,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    TimerContext timer = stats.time(dir + \"_take\");\n    try {\n      while (true) {\n        LatchChildWatcher childWatcher = new LatchChildWatcher();\n        try {\n          orderedChildren = orderedChildren(childWatcher);\n        } catch (KeeperException.NoNodeException e) {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n          continue;\n        }\n        if (orderedChildren.size() == 0) {\n          childWatcher.await(DEFAULT_TIMEOUT);\n          continue;\n        }\n\n        for (String headNode : orderedChildren.values()) {\n          String path = dir + \"/\" + headNode;\n          try {\n            byte[] data = zookeeper.getData(path, null, null, true);\n            zookeeper.delete(path, -1, true);\n            return data;\n          } catch (KeeperException.NoNodeException e) {\n            // Another client deleted the node first.\n          }\n        }\n      }\n    } finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await(DEFAULT_TIMEOUT);\n        continue;\n      }\n      \n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ada2a0b40c19e896a9d20355e13cae9601c251c","date":1407460596,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    TimerContext timer = stats.time(dir + \"_take\");\n    try {\n      TreeMap<Long, String> orderedChildren = getChildren(Long.MAX_VALUE);\n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n      return null; // shouldn't really reach here..\n    } finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    TreeMap<Long,String> orderedChildren;\n    // Same as for element. Should refactor this.\n    TimerContext timer = stats.time(dir + \"_take\");\n    try {\n      while (true) {\n        LatchChildWatcher childWatcher = new LatchChildWatcher();\n        try {\n          orderedChildren = orderedChildren(childWatcher);\n        } catch (KeeperException.NoNodeException e) {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n          continue;\n        }\n        if (orderedChildren.size() == 0) {\n          childWatcher.await(DEFAULT_TIMEOUT);\n          continue;\n        }\n\n        for (String headNode : orderedChildren.values()) {\n          String path = dir + \"/\" + headNode;\n          try {\n            byte[] data = zookeeper.getData(path, null, null, true);\n            zookeeper.delete(path, -1, true);\n            return data;\n          } catch (KeeperException.NoNodeException e) {\n            // Another client deleted the node first.\n          }\n        }\n      }\n    } finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":["aa7843ca6910809c5d95c44205d1b78ebee893da","aa7843ca6910809c5d95c44205d1b78ebee893da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa7843ca6910809c5d95c44205d1b78ebee893da","date":1407507547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    TimerContext timer = stats.time(dir + \"_take\");\n    try {\n      Map<Long, String> orderedChildren = getChildren(Long.MAX_VALUE);\n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n      return null; // shouldn't really reach here..\n    } finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    TimerContext timer = stats.time(dir + \"_take\");\n    try {\n      TreeMap<Long, String> orderedChildren = getChildren(Long.MAX_VALUE);\n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n      return null; // shouldn't really reach here..\n    } finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":["0ada2a0b40c19e896a9d20355e13cae9601c251c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    TimerContext timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        notEmpty.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   * \n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    TimerContext timer = stats.time(dir + \"_take\");\n    try {\n      Map<Long, String> orderedChildren = getChildren(Long.MAX_VALUE);\n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          zookeeper.delete(path, -1, true);\n          return data;\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n      return null; // shouldn't really reach here..\n    } finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7fd147f6ec145b926803480f62aa12e2aad258e","date":1465448343,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    TimerContext timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        changed.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    TimerContext timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        notEmpty.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77c9633f72998c3815ffe21baa5f16d6e50f1e4a","date":1465453043,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    TimerContext timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        changed.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    TimerContext timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        notEmpty.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    TimerContext timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        changed.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    TimerContext timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        notEmpty.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3e7752e8a5e963c6939aaa99c36134147a5ece","date":1479805653,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    Timer.Context timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        changed.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    TimerContext timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        changed.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    Timer.Context timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        changed.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    TimerContext timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        changed.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#take().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  @Override\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    Timer.Context timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        changed.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    Timer.Context timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        changed.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    Timer.Context timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        changed.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  @Override\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    Timer.Context timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        changed.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#take().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  @Override\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    Timer.Context timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        changed.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    Timer.Context timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        changed.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#take().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  @Override\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    Timer.Context timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        changed.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  public byte[] take() throws KeeperException, InterruptedException {\n    // Same as for element. Should refactor this.\n    Timer.Context timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        changed.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c2d0da1152c8dd998675c30a3f6f599a91770c2b"],"c2d0da1152c8dd998675c30a3f6f599a91770c2b":["a5093a9e893633cc091cf2f729d7863671c2b715"],"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"fd1b710c5464a5da208b929fe456d5cb5126b6e8":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"77c9633f72998c3815ffe21baa5f16d6e50f1e4a":["2a282020d6c9a4ea32a359539e283e4771a2fda8","f7fd147f6ec145b926803480f62aa12e2aad258e"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","fd1b710c5464a5da208b929fe456d5cb5126b6e8"],"9f45f67a018421da088ea39274f23ad5d339b97d":["fd1b710c5464a5da208b929fe456d5cb5126b6e8"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2a282020d6c9a4ea32a359539e283e4771a2fda8","77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"f7fd147f6ec145b926803480f62aa12e2aad258e":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a5093a9e893633cc091cf2f729d7863671c2b715","c2d0da1152c8dd998675c30a3f6f599a91770c2b"],"0ada2a0b40c19e896a9d20355e13cae9601c251c":["9f45f67a018421da088ea39274f23ad5d339b97d"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"aa7843ca6910809c5d95c44205d1b78ebee893da":["0ada2a0b40c19e896a9d20355e13cae9601c251c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["a5093a9e893633cc091cf2f729d7863671c2b715","c2d0da1152c8dd998675c30a3f6f599a91770c2b"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["aa7843ca6910809c5d95c44205d1b78ebee893da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["fd1b710c5464a5da208b929fe456d5cb5126b6e8","407687e67faf6e1f02a211ca078d8e3eed631027"],"c2d0da1152c8dd998675c30a3f6f599a91770c2b":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","727bb765ff2542275f6d31f67be18d7104bae148","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"fd1b710c5464a5da208b929fe456d5cb5126b6e8":["407687e67faf6e1f02a211ca078d8e3eed631027","9f45f67a018421da088ea39274f23ad5d339b97d"],"77c9633f72998c3815ffe21baa5f16d6e50f1e4a":["0f3e7752e8a5e963c6939aaa99c36134147a5ece","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"9f45f67a018421da088ea39274f23ad5d339b97d":["0ada2a0b40c19e896a9d20355e13cae9601c251c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"f7fd147f6ec145b926803480f62aa12e2aad258e":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"0ada2a0b40c19e896a9d20355e13cae9601c251c":["aa7843ca6910809c5d95c44205d1b78ebee893da"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"aa7843ca6910809c5d95c44205d1b78ebee893da":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5093a9e893633cc091cf2f729d7863671c2b715"],"a5093a9e893633cc091cf2f729d7863671c2b715":["c2d0da1152c8dd998675c30a3f6f599a91770c2b","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f7fd147f6ec145b926803480f62aa12e2aad258e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","727bb765ff2542275f6d31f67be18d7104bae148","aba371508186796cc6151d8223a5b4e16d02e26e","6240b74b884c5587f2a4062dd27d6c32bf228889","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}