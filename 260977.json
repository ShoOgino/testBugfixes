{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManagerFromDiagnostics(Map[String,Object]).mjava","commits":[{"id":"16a22f8085bb46850c91784e94f7714345011404","date":1533741843,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManagerFromDiagnostics(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  static SolrCloudManager createCloudManagerFromDiagnostics(Map<String, Object> m) {\n    List<Map> sortedNodes = (List<Map>) Utils.getObjectByPath(m, false, \"diagnostics/sortedNodes\");\n    Set<String> liveNodes = new HashSet<>();\n    SolrClientNodeStateProvider nodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected void readReplicaDetails() {\n        for (Object o : sortedNodes) {\n          String node = (String) ((Map) o).get(\"node\");\n          liveNodes.add(node);\n          Map nodeDetails = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> new LinkedHashMap<>());\n          Map<String, Map<String, List<Map>>> replicas = (Map<String, Map<String, List<Map>>>) ((Map) o).get(\"replicas\");\n          replicas.forEach((coll, shardVsReplicas) -> shardVsReplicas\n              .forEach((shard, repDetails) -> {\n                List<ReplicaInfo> reps = (List) ((Map) nodeDetails\n                    .computeIfAbsent(coll, o1 -> new LinkedHashMap<>()))\n                    .computeIfAbsent(shard, o12 -> new ArrayList<ReplicaInfo>());\n                for (Map map : repDetails) reps.add(new ReplicaInfo(map));\n              }));\n        }\n\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return nodeVsCollectionVsShardVsReplicaInfo.get(node) == null ?\n            Collections.emptyMap() :\n            nodeVsCollectionVsShardVsReplicaInfo.get(node);\n      }\n\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        for (Map n : sortedNodes) if (n.get(\"node\").equals(node)) return n;\n        return Collections.emptyMap();\n      }\n    };\n    return new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return nodeStateProvider;\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return liveNodes;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"549864a5317b87de2dd7d4a7d4f8d88eae2c7e58","date":1538573878,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManagerFromDiagnostics(Map[String,Object]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManagerFromDiagnostics(Map[String,Object]).mjava","sourceNew":"  static SolrCloudManager createCloudManagerFromDiagnostics(Map<String, Object> m) {\n    List<Map> sortedNodes = (List<Map>) Utils.getObjectByPath(m, false, \"diagnostics/sortedNodes\");\n    Set<String> liveNodes = new HashSet<>();\n    SolrClientNodeStateProvider nodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected void readReplicaDetails() {\n        for (Object o : sortedNodes) {\n          String node = (String) ((Map) o).get(\"node\");\n          liveNodes.add(node);\n          Map nodeDetails = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> new LinkedHashMap<>());\n          Map<String, Map<String, List<Map>>> replicas = (Map<String, Map<String, List<Map>>>) ((Map) o).get(\"replicas\");\n          replicas.forEach((coll, shardVsReplicas) -> shardVsReplicas\n              .forEach((shard, repDetails) -> {\n                List<ReplicaInfo> reps = (List) ((Map) nodeDetails\n                    .computeIfAbsent(coll, o1 -> new LinkedHashMap<>()))\n                    .computeIfAbsent(shard, o12 -> new ArrayList<ReplicaInfo>());\n                for (Map map : repDetails) reps.add(new ReplicaInfo(map));\n              }));\n        }\n\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return nodeVsCollectionVsShardVsReplicaInfo.get(node) == null ?\n            Collections.emptyMap() :\n            nodeVsCollectionVsShardVsReplicaInfo.get(node);\n      }\n\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        for (Map n : sortedNodes) if (n.get(\"node\").equals(node)) return n;\n        return Collections.emptyMap();\n      }\n    };\n    return new DelegatingCloudManager(null) {\n      ClusterState clusterState = null;\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return nodeStateProvider;\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        if (clusterState == null) {\n          Map map = (Map) Utils.getObjectByPath (m, false, \"cluster/collections\");\n          if (map == null) map = new HashMap<>();\n          clusterState = ClusterState.load(0, map, liveNodes, \"/clusterstate.json\");\n        }\n\n        return new DelegatingClusterStateProvider(null) {\n\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return clusterState;\n          }\n\n          @Override\n          public ClusterState.CollectionRef getState(String collection) {\n            return clusterState.getCollectionRef(collection);\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return liveNodes;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  static SolrCloudManager createCloudManagerFromDiagnostics(Map<String, Object> m) {\n    List<Map> sortedNodes = (List<Map>) Utils.getObjectByPath(m, false, \"diagnostics/sortedNodes\");\n    Set<String> liveNodes = new HashSet<>();\n    SolrClientNodeStateProvider nodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected void readReplicaDetails() {\n        for (Object o : sortedNodes) {\n          String node = (String) ((Map) o).get(\"node\");\n          liveNodes.add(node);\n          Map nodeDetails = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> new LinkedHashMap<>());\n          Map<String, Map<String, List<Map>>> replicas = (Map<String, Map<String, List<Map>>>) ((Map) o).get(\"replicas\");\n          replicas.forEach((coll, shardVsReplicas) -> shardVsReplicas\n              .forEach((shard, repDetails) -> {\n                List<ReplicaInfo> reps = (List) ((Map) nodeDetails\n                    .computeIfAbsent(coll, o1 -> new LinkedHashMap<>()))\n                    .computeIfAbsent(shard, o12 -> new ArrayList<ReplicaInfo>());\n                for (Map map : repDetails) reps.add(new ReplicaInfo(map));\n              }));\n        }\n\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return nodeVsCollectionVsShardVsReplicaInfo.get(node) == null ?\n            Collections.emptyMap() :\n            nodeVsCollectionVsShardVsReplicaInfo.get(node);\n      }\n\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        for (Map n : sortedNodes) if (n.get(\"node\").equals(node)) return n;\n        return Collections.emptyMap();\n      }\n    };\n    return new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return nodeStateProvider;\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return liveNodes;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","00473ada9520f7423d1a7b4cfdb16f49856ddcac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00473ada9520f7423d1a7b4cfdb16f49856ddcac","date":1540213439,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManagerFromDiagnostics(Map[String,Object]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManagerFromDiagnostics(Map[String,Object]).mjava","sourceNew":"  static SolrCloudManager createCloudManagerFromDiagnostics(Map<String, Object> m) {\n    List<Map> sortedNodes = (List<Map>) Utils.getObjectByPath(m, false, \"diagnostics/sortedNodes\");\n    Set<String> liveNodes = new HashSet<>();\n    SolrClientNodeStateProvider nodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected void readReplicaDetails() {\n        for (Object o : sortedNodes) {\n          String node = (String) ((Map) o).get(\"node\");\n          liveNodes.add(node);\n          Map nodeDetails = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> new LinkedHashMap<>());\n          Map<String, Map<String, List<Map>>> replicas = (Map<String, Map<String, List<Map>>>) ((Map) o).get(\"replicas\");\n          replicas.forEach((coll, shardVsReplicas) -> shardVsReplicas\n              .forEach((shard, repDetails) -> {\n                List<ReplicaInfo> reps = (List) ((Map) nodeDetails\n                    .computeIfAbsent(coll, o1 -> new LinkedHashMap<>()))\n                    .computeIfAbsent(shard, o12 -> new ArrayList<ReplicaInfo>());\n                for (Map map : repDetails) reps.add(new ReplicaInfo(map));\n              }));\n        }\n\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return nodeVsCollectionVsShardVsReplicaInfo.get(node) == null ?\n            Collections.emptyMap() :\n            nodeVsCollectionVsShardVsReplicaInfo.get(node);\n      }\n\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        for (Map n : sortedNodes) if (n.get(\"node\").equals(node)) return n;\n        return Collections.emptyMap();\n      }\n    };\n    return new DelegatingCloudManager(null) {\n      ClusterState clusterState = null;\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return nodeStateProvider;\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        if (clusterState == null) {\n          Map map = (Map) Utils.getObjectByPath (m, false, \"cluster/collections\");\n          if (map == null) map = new HashMap<>();\n          clusterState = ClusterState.load(0, map, liveNodes, \"/clusterstate.json\");\n        }\n\n        return new DelegatingClusterStateProvider(null) {\n\n          @Override\n          public ClusterState getClusterState() {\n            return clusterState;\n          }\n\n          @Override\n          public ClusterState.CollectionRef getState(String collection) {\n            return clusterState.getCollectionRef(collection);\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return liveNodes;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  static SolrCloudManager createCloudManagerFromDiagnostics(Map<String, Object> m) {\n    List<Map> sortedNodes = (List<Map>) Utils.getObjectByPath(m, false, \"diagnostics/sortedNodes\");\n    Set<String> liveNodes = new HashSet<>();\n    SolrClientNodeStateProvider nodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected void readReplicaDetails() {\n        for (Object o : sortedNodes) {\n          String node = (String) ((Map) o).get(\"node\");\n          liveNodes.add(node);\n          Map nodeDetails = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> new LinkedHashMap<>());\n          Map<String, Map<String, List<Map>>> replicas = (Map<String, Map<String, List<Map>>>) ((Map) o).get(\"replicas\");\n          replicas.forEach((coll, shardVsReplicas) -> shardVsReplicas\n              .forEach((shard, repDetails) -> {\n                List<ReplicaInfo> reps = (List) ((Map) nodeDetails\n                    .computeIfAbsent(coll, o1 -> new LinkedHashMap<>()))\n                    .computeIfAbsent(shard, o12 -> new ArrayList<ReplicaInfo>());\n                for (Map map : repDetails) reps.add(new ReplicaInfo(map));\n              }));\n        }\n\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return nodeVsCollectionVsShardVsReplicaInfo.get(node) == null ?\n            Collections.emptyMap() :\n            nodeVsCollectionVsShardVsReplicaInfo.get(node);\n      }\n\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        for (Map n : sortedNodes) if (n.get(\"node\").equals(node)) return n;\n        return Collections.emptyMap();\n      }\n    };\n    return new DelegatingCloudManager(null) {\n      ClusterState clusterState = null;\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return nodeStateProvider;\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        if (clusterState == null) {\n          Map map = (Map) Utils.getObjectByPath (m, false, \"cluster/collections\");\n          if (map == null) map = new HashMap<>();\n          clusterState = ClusterState.load(0, map, liveNodes, \"/clusterstate.json\");\n        }\n\n        return new DelegatingClusterStateProvider(null) {\n\n          @Override\n          public ClusterState getClusterState() throws IOException {\n            return clusterState;\n          }\n\n          @Override\n          public ClusterState.CollectionRef getState(String collection) {\n            return clusterState.getCollectionRef(collection);\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return liveNodes;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":["549864a5317b87de2dd7d4a7d4f8d88eae2c7e58"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe52ff382a90016f1f6f34f2a026c4749eebb1b8","date":1541503646,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManagerFromDiagnostics(Map[String,Object]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManagerFromDiagnostics(Map[String,Object]).mjava","sourceNew":"  static SolrCloudManager createCloudManagerFromDiagnostics(Map<String, Object> m) {\n    List<Map> sortedNodes = (List<Map>) getObjectByPath(m, false, \"diagnostics/sortedNodes\");\n    Set<String> liveNodes = new HashSet<>();\n    SolrClientNodeStateProvider nodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected void readReplicaDetails() {\n        for (Object o : sortedNodes) {\n          String node = (String) ((Map) o).get(\"node\");\n          liveNodes.add(node);\n          Map nodeDetails = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> new LinkedHashMap<>());\n          Map<String, Map<String, List<Map>>> replicas = (Map<String, Map<String, List<Map>>>) ((Map) o).get(\"replicas\");\n          replicas.forEach((coll, shardVsReplicas) -> shardVsReplicas\n              .forEach((shard, repDetails) -> {\n                List<ReplicaInfo> reps = (List) ((Map) nodeDetails\n                    .computeIfAbsent(coll, o1 -> new LinkedHashMap<>()))\n                    .computeIfAbsent(shard, o12 -> new ArrayList<ReplicaInfo>());\n                for (Map map : repDetails) reps.add(new ReplicaInfo(map));\n              }));\n        }\n\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return nodeVsCollectionVsShardVsReplicaInfo.get(node) == null ?\n            Collections.emptyMap() :\n            nodeVsCollectionVsShardVsReplicaInfo.get(node);\n      }\n\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        for (Map n : sortedNodes) if (n.get(\"node\").equals(node)) return n;\n        return Collections.emptyMap();\n      }\n    };\n    return new DelegatingCloudManager(null) {\n      ClusterState clusterState = null;\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return nodeStateProvider;\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        if (clusterState == null) {\n          Map map = (Map) getObjectByPath(m, false, \"cluster/collections\");\n          if (map == null) map = new HashMap<>();\n          clusterState = ClusterState.load(0, map, liveNodes, \"/clusterstate.json\");\n        }\n\n        return new DelegatingClusterStateProvider(null) {\n\n          @Override\n          public ClusterState getClusterState() {\n            return clusterState;\n          }\n\n          @Override\n          public ClusterState.CollectionRef getState(String collection) {\n            return clusterState.getCollectionRef(collection);\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return liveNodes;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  static SolrCloudManager createCloudManagerFromDiagnostics(Map<String, Object> m) {\n    List<Map> sortedNodes = (List<Map>) Utils.getObjectByPath(m, false, \"diagnostics/sortedNodes\");\n    Set<String> liveNodes = new HashSet<>();\n    SolrClientNodeStateProvider nodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected void readReplicaDetails() {\n        for (Object o : sortedNodes) {\n          String node = (String) ((Map) o).get(\"node\");\n          liveNodes.add(node);\n          Map nodeDetails = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> new LinkedHashMap<>());\n          Map<String, Map<String, List<Map>>> replicas = (Map<String, Map<String, List<Map>>>) ((Map) o).get(\"replicas\");\n          replicas.forEach((coll, shardVsReplicas) -> shardVsReplicas\n              .forEach((shard, repDetails) -> {\n                List<ReplicaInfo> reps = (List) ((Map) nodeDetails\n                    .computeIfAbsent(coll, o1 -> new LinkedHashMap<>()))\n                    .computeIfAbsent(shard, o12 -> new ArrayList<ReplicaInfo>());\n                for (Map map : repDetails) reps.add(new ReplicaInfo(map));\n              }));\n        }\n\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return nodeVsCollectionVsShardVsReplicaInfo.get(node) == null ?\n            Collections.emptyMap() :\n            nodeVsCollectionVsShardVsReplicaInfo.get(node);\n      }\n\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        for (Map n : sortedNodes) if (n.get(\"node\").equals(node)) return n;\n        return Collections.emptyMap();\n      }\n    };\n    return new DelegatingCloudManager(null) {\n      ClusterState clusterState = null;\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return nodeStateProvider;\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        if (clusterState == null) {\n          Map map = (Map) Utils.getObjectByPath (m, false, \"cluster/collections\");\n          if (map == null) map = new HashMap<>();\n          clusterState = ClusterState.load(0, map, liveNodes, \"/clusterstate.json\");\n        }\n\n        return new DelegatingClusterStateProvider(null) {\n\n          @Override\n          public ClusterState getClusterState() {\n            return clusterState;\n          }\n\n          @Override\n          public ClusterState.CollectionRef getState(String collection) {\n            return clusterState.getCollectionRef(collection);\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return liveNodes;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManagerFromDiagnostics(Map[String,Object]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManagerFromDiagnostics(Map[String,Object]).mjava","sourceNew":"  static SolrCloudManager createCloudManagerFromDiagnostics(Map<String, Object> m) {\n    List<Map> sortedNodes = (List<Map>) getObjectByPath(m, false, \"diagnostics/sortedNodes\");\n    Set<String> liveNodes = new HashSet<>();\n    SolrClientNodeStateProvider nodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected void readReplicaDetails() {\n        for (Object o : sortedNodes) {\n          String node = (String) ((Map) o).get(\"node\");\n          liveNodes.add(node);\n          Map nodeDetails = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> new LinkedHashMap<>());\n          Map<String, Map<String, List<Map>>> replicas = (Map<String, Map<String, List<Map>>>) ((Map) o).get(\"replicas\");\n          replicas.forEach((coll, shardVsReplicas) -> shardVsReplicas\n              .forEach((shard, repDetails) -> {\n                List<ReplicaInfo> reps = (List) ((Map) nodeDetails\n                    .computeIfAbsent(coll, o1 -> new LinkedHashMap<>()))\n                    .computeIfAbsent(shard, o12 -> new ArrayList<ReplicaInfo>());\n                for (Map map : repDetails) reps.add(new ReplicaInfo(map));\n              }));\n        }\n\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return nodeVsCollectionVsShardVsReplicaInfo.get(node) == null ?\n            Collections.emptyMap() :\n            nodeVsCollectionVsShardVsReplicaInfo.get(node);\n      }\n\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        for (Map n : sortedNodes) if (n.get(\"node\").equals(node)) return n;\n        return Collections.emptyMap();\n      }\n    };\n    return new DelegatingCloudManager(null) {\n      ClusterState clusterState = null;\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return nodeStateProvider;\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        if (clusterState == null) {\n          Map map = (Map) getObjectByPath(m, false, \"cluster/collections\");\n          if (map == null) map = new HashMap<>();\n          clusterState = ClusterState.createFromCollectionMap(0, map, liveNodes);\n        }\n\n        return new DelegatingClusterStateProvider(null) {\n\n          @Override\n          public ClusterState getClusterState() {\n            return clusterState;\n          }\n\n          @Override\n          public ClusterState.CollectionRef getState(String collection) {\n            return clusterState.getCollectionRef(collection);\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return liveNodes;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  static SolrCloudManager createCloudManagerFromDiagnostics(Map<String, Object> m) {\n    List<Map> sortedNodes = (List<Map>) getObjectByPath(m, false, \"diagnostics/sortedNodes\");\n    Set<String> liveNodes = new HashSet<>();\n    SolrClientNodeStateProvider nodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected void readReplicaDetails() {\n        for (Object o : sortedNodes) {\n          String node = (String) ((Map) o).get(\"node\");\n          liveNodes.add(node);\n          Map nodeDetails = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> new LinkedHashMap<>());\n          Map<String, Map<String, List<Map>>> replicas = (Map<String, Map<String, List<Map>>>) ((Map) o).get(\"replicas\");\n          replicas.forEach((coll, shardVsReplicas) -> shardVsReplicas\n              .forEach((shard, repDetails) -> {\n                List<ReplicaInfo> reps = (List) ((Map) nodeDetails\n                    .computeIfAbsent(coll, o1 -> new LinkedHashMap<>()))\n                    .computeIfAbsent(shard, o12 -> new ArrayList<ReplicaInfo>());\n                for (Map map : repDetails) reps.add(new ReplicaInfo(map));\n              }));\n        }\n\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return nodeVsCollectionVsShardVsReplicaInfo.get(node) == null ?\n            Collections.emptyMap() :\n            nodeVsCollectionVsShardVsReplicaInfo.get(node);\n      }\n\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        for (Map n : sortedNodes) if (n.get(\"node\").equals(node)) return n;\n        return Collections.emptyMap();\n      }\n    };\n    return new DelegatingCloudManager(null) {\n      ClusterState clusterState = null;\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return nodeStateProvider;\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        if (clusterState == null) {\n          Map map = (Map) getObjectByPath(m, false, \"cluster/collections\");\n          if (map == null) map = new HashMap<>();\n          clusterState = ClusterState.load(0, map, liveNodes, \"/clusterstate.json\");\n        }\n\n        return new DelegatingClusterStateProvider(null) {\n\n          @Override\n          public ClusterState getClusterState() {\n            return clusterState;\n          }\n\n          @Override\n          public ClusterState.CollectionRef getState(String collection) {\n            return clusterState.getCollectionRef(collection);\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return liveNodes;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":["549864a5317b87de2dd7d4a7d4f8d88eae2c7e58"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManagerFromDiagnostics(Map[String,Object]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManagerFromDiagnostics(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  static SolrCloudManager createCloudManagerFromDiagnostics(Map<String, Object> m) {\n    List<Map> sortedNodes = (List<Map>) getObjectByPath(m, false, \"diagnostics/sortedNodes\");\n    Set<String> liveNodes = new HashSet<>();\n    SolrClientNodeStateProvider nodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected void readReplicaDetails() {\n        for (Object o : sortedNodes) {\n          String node = (String) ((Map) o).get(\"node\");\n          liveNodes.add(node);\n          Map nodeDetails = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> new LinkedHashMap<>());\n          Map<String, Map<String, List<Map>>> replicas = (Map<String, Map<String, List<Map>>>) ((Map) o).get(\"replicas\");\n          replicas.forEach((coll, shardVsReplicas) -> shardVsReplicas\n              .forEach((shard, repDetails) -> {\n                List<ReplicaInfo> reps = (List) ((Map) nodeDetails\n                    .computeIfAbsent(coll, o1 -> new LinkedHashMap<>()))\n                    .computeIfAbsent(shard, o12 -> new ArrayList<ReplicaInfo>());\n                for (Map map : repDetails) reps.add(new ReplicaInfo(map));\n              }));\n        }\n\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return nodeVsCollectionVsShardVsReplicaInfo.get(node) == null ?\n            Collections.emptyMap() :\n            nodeVsCollectionVsShardVsReplicaInfo.get(node);\n      }\n\n      @Override\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        for (Map n : sortedNodes) if (n.get(\"node\").equals(node)) return n;\n        return Collections.emptyMap();\n      }\n    };\n    return new DelegatingCloudManager(null) {\n      ClusterState clusterState = null;\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return nodeStateProvider;\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        if (clusterState == null) {\n          @SuppressWarnings({\"rawtypes\"})\n          Map map = (Map) getObjectByPath(m, false, \"cluster/collections\");\n          if (map == null) map = new HashMap<>();\n          clusterState = ClusterState.createFromCollectionMap(0, map, liveNodes);\n        }\n\n        return new DelegatingClusterStateProvider(null) {\n\n          @Override\n          public ClusterState getClusterState() {\n            return clusterState;\n          }\n\n          @Override\n          public ClusterState.CollectionRef getState(String collection) {\n            return clusterState.getCollectionRef(collection);\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return liveNodes;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  static SolrCloudManager createCloudManagerFromDiagnostics(Map<String, Object> m) {\n    List<Map> sortedNodes = (List<Map>) getObjectByPath(m, false, \"diagnostics/sortedNodes\");\n    Set<String> liveNodes = new HashSet<>();\n    SolrClientNodeStateProvider nodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected void readReplicaDetails() {\n        for (Object o : sortedNodes) {\n          String node = (String) ((Map) o).get(\"node\");\n          liveNodes.add(node);\n          Map nodeDetails = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> new LinkedHashMap<>());\n          Map<String, Map<String, List<Map>>> replicas = (Map<String, Map<String, List<Map>>>) ((Map) o).get(\"replicas\");\n          replicas.forEach((coll, shardVsReplicas) -> shardVsReplicas\n              .forEach((shard, repDetails) -> {\n                List<ReplicaInfo> reps = (List) ((Map) nodeDetails\n                    .computeIfAbsent(coll, o1 -> new LinkedHashMap<>()))\n                    .computeIfAbsent(shard, o12 -> new ArrayList<ReplicaInfo>());\n                for (Map map : repDetails) reps.add(new ReplicaInfo(map));\n              }));\n        }\n\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return nodeVsCollectionVsShardVsReplicaInfo.get(node) == null ?\n            Collections.emptyMap() :\n            nodeVsCollectionVsShardVsReplicaInfo.get(node);\n      }\n\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        for (Map n : sortedNodes) if (n.get(\"node\").equals(node)) return n;\n        return Collections.emptyMap();\n      }\n    };\n    return new DelegatingCloudManager(null) {\n      ClusterState clusterState = null;\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return nodeStateProvider;\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        if (clusterState == null) {\n          Map map = (Map) getObjectByPath(m, false, \"cluster/collections\");\n          if (map == null) map = new HashMap<>();\n          clusterState = ClusterState.createFromCollectionMap(0, map, liveNodes);\n        }\n\n        return new DelegatingClusterStateProvider(null) {\n\n          @Override\n          public ClusterState getClusterState() {\n            return clusterState;\n          }\n\n          @Override\n          public ClusterState.CollectionRef getState(String collection) {\n            return clusterState.getCollectionRef(collection);\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return liveNodes;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManagerFromDiagnostics(Map[String,Object]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManagerFromDiagnostics(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  static SolrCloudManager createCloudManagerFromDiagnostics(Map<String, Object> m) {\n    List<Map> sortedNodes = (List<Map>) getObjectByPath(m, false, \"diagnostics/sortedNodes\");\n    Set<String> liveNodes = new HashSet<>();\n    SolrClientNodeStateProvider nodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected void readReplicaDetails() {\n        for (Object o : sortedNodes) {\n          String node = (String) ((Map) o).get(\"node\");\n          liveNodes.add(node);\n          Map nodeDetails = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> new LinkedHashMap<>());\n          Map<String, Map<String, List<Map>>> replicas = (Map<String, Map<String, List<Map>>>) ((Map) o).get(\"replicas\");\n          replicas.forEach((coll, shardVsReplicas) -> shardVsReplicas\n              .forEach((shard, repDetails) -> {\n                List<Replica> reps = (List) ((Map) nodeDetails\n                    .computeIfAbsent(coll, o1 -> new LinkedHashMap<>()))\n                    .computeIfAbsent(shard, o12 -> new ArrayList<Replica>());\n                for (Map map : repDetails) reps.add(new Replica(map));\n              }));\n        }\n\n      }\n\n      @Override\n      public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n        return nodeVsCollectionVsShardVsReplicaInfo.get(node) == null ?\n            Collections.emptyMap() :\n            nodeVsCollectionVsShardVsReplicaInfo.get(node);\n      }\n\n      @Override\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        for (Map n : sortedNodes) if (n.get(\"node\").equals(node)) return n;\n        return Collections.emptyMap();\n      }\n    };\n    return new DelegatingCloudManager(null) {\n      ClusterState clusterState = null;\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return nodeStateProvider;\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        if (clusterState == null) {\n          @SuppressWarnings({\"rawtypes\"})\n          Map map = (Map) getObjectByPath(m, false, \"cluster/collections\");\n          if (map == null) map = new HashMap<>();\n          clusterState = ClusterState.createFromCollectionMap(0, map, liveNodes);\n        }\n\n        return new DelegatingClusterStateProvider(null) {\n\n          @Override\n          public ClusterState getClusterState() {\n            return clusterState;\n          }\n\n          @Override\n          public ClusterState.CollectionRef getState(String collection) {\n            return clusterState.getCollectionRef(collection);\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return liveNodes;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  static SolrCloudManager createCloudManagerFromDiagnostics(Map<String, Object> m) {\n    List<Map> sortedNodes = (List<Map>) getObjectByPath(m, false, \"diagnostics/sortedNodes\");\n    Set<String> liveNodes = new HashSet<>();\n    SolrClientNodeStateProvider nodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected void readReplicaDetails() {\n        for (Object o : sortedNodes) {\n          String node = (String) ((Map) o).get(\"node\");\n          liveNodes.add(node);\n          Map nodeDetails = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> new LinkedHashMap<>());\n          Map<String, Map<String, List<Map>>> replicas = (Map<String, Map<String, List<Map>>>) ((Map) o).get(\"replicas\");\n          replicas.forEach((coll, shardVsReplicas) -> shardVsReplicas\n              .forEach((shard, repDetails) -> {\n                List<ReplicaInfo> reps = (List) ((Map) nodeDetails\n                    .computeIfAbsent(coll, o1 -> new LinkedHashMap<>()))\n                    .computeIfAbsent(shard, o12 -> new ArrayList<ReplicaInfo>());\n                for (Map map : repDetails) reps.add(new ReplicaInfo(map));\n              }));\n        }\n\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return nodeVsCollectionVsShardVsReplicaInfo.get(node) == null ?\n            Collections.emptyMap() :\n            nodeVsCollectionVsShardVsReplicaInfo.get(node);\n      }\n\n      @Override\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        for (Map n : sortedNodes) if (n.get(\"node\").equals(node)) return n;\n        return Collections.emptyMap();\n      }\n    };\n    return new DelegatingCloudManager(null) {\n      ClusterState clusterState = null;\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return nodeStateProvider;\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        if (clusterState == null) {\n          @SuppressWarnings({\"rawtypes\"})\n          Map map = (Map) getObjectByPath(m, false, \"cluster/collections\");\n          if (map == null) map = new HashMap<>();\n          clusterState = ClusterState.createFromCollectionMap(0, map, liveNodes);\n        }\n\n        return new DelegatingClusterStateProvider(null) {\n\n          @Override\n          public ClusterState getClusterState() {\n            return clusterState;\n          }\n\n          @Override\n          public ClusterState.CollectionRef getState(String collection) {\n            return clusterState.getCollectionRef(collection);\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return liveNodes;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#createCloudManagerFromDiagnostics(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  static SolrCloudManager createCloudManagerFromDiagnostics(Map<String, Object> m) {\n    List<Map> sortedNodes = (List<Map>) getObjectByPath(m, false, \"diagnostics/sortedNodes\");\n    Set<String> liveNodes = new HashSet<>();\n    SolrClientNodeStateProvider nodeStateProvider = new SolrClientNodeStateProvider(null) {\n      @Override\n      protected void readReplicaDetails() {\n        for (Object o : sortedNodes) {\n          String node = (String) ((Map) o).get(\"node\");\n          liveNodes.add(node);\n          Map nodeDetails = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> new LinkedHashMap<>());\n          Map<String, Map<String, List<Map>>> replicas = (Map<String, Map<String, List<Map>>>) ((Map) o).get(\"replicas\");\n          replicas.forEach((coll, shardVsReplicas) -> shardVsReplicas\n              .forEach((shard, repDetails) -> {\n                List<Replica> reps = (List) ((Map) nodeDetails\n                    .computeIfAbsent(coll, o1 -> new LinkedHashMap<>()))\n                    .computeIfAbsent(shard, o12 -> new ArrayList<Replica>());\n                for (Map map : repDetails) reps.add(new Replica(map));\n              }));\n        }\n\n      }\n\n      @Override\n      public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n        return nodeVsCollectionVsShardVsReplicaInfo.get(node) == null ?\n            Collections.emptyMap() :\n            nodeVsCollectionVsShardVsReplicaInfo.get(node);\n      }\n\n      @Override\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        for (Map n : sortedNodes) if (n.get(\"node\").equals(node)) return n;\n        return Collections.emptyMap();\n      }\n    };\n    return new DelegatingCloudManager(null) {\n      ClusterState clusterState = null;\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return nodeStateProvider;\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        if (clusterState == null) {\n          @SuppressWarnings({\"rawtypes\"})\n          Map map = (Map) getObjectByPath(m, false, \"cluster/collections\");\n          if (map == null) map = new HashMap<>();\n          clusterState = ClusterState.createFromCollectionMap(0, map, liveNodes);\n        }\n\n        return new DelegatingClusterStateProvider(null) {\n\n          @Override\n          public ClusterState getClusterState() {\n            return clusterState;\n          }\n\n          @Override\n          public ClusterState.CollectionRef getState(String collection) {\n            return clusterState.getCollectionRef(collection);\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return liveNodes;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["9ba1b632c041956c93c41aa1143d16a567014891"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"549864a5317b87de2dd7d4a7d4f8d88eae2c7e58":["16a22f8085bb46850c91784e94f7714345011404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe52ff382a90016f1f6f34f2a026c4749eebb1b8":["00473ada9520f7423d1a7b4cfdb16f49856ddcac"],"00473ada9520f7423d1a7b4cfdb16f49856ddcac":["549864a5317b87de2dd7d4a7d4f8d88eae2c7e58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"16a22f8085bb46850c91784e94f7714345011404":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["9ba1b632c041956c93c41aa1143d16a567014891"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"549864a5317b87de2dd7d4a7d4f8d88eae2c7e58":["00473ada9520f7423d1a7b4cfdb16f49856ddcac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16a22f8085bb46850c91784e94f7714345011404"],"fe52ff382a90016f1f6f34f2a026c4749eebb1b8":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"00473ada9520f7423d1a7b4cfdb16f49856ddcac":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8"],"16a22f8085bb46850c91784e94f7714345011404":["549864a5317b87de2dd7d4a7d4f8d88eae2c7e58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}