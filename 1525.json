{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildNumericSource(IndexSchema,String).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildNumericSource(IndexSchema,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildNumericSource(IndexSchema,String).mjava","sourceNew":"  /**\n   * Recursively parses and breaks down the expression string to build a numeric ValueSource.\n   * \n   * @param schema The schema to pull fields from.\n   * @param expressionString The expression string to build a ValueSource from.\n   * @return The value source represented by the given expressionString\n   */\n  private static ValueSource buildNumericSource(IndexSchema schema, String expressionString) {\n    int paren = expressionString.indexOf('(');\n    String[] arguments;\n    String operands;\n    if (paren<0) {\n      return buildFieldSource(schema,expressionString,NUMBER_TYPE);\n    } else {\n      try {\n        operands = expressionString.substring(paren+1, expressionString.lastIndexOf(')')).trim();\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expressionString+\"]\");\n      }\n      arguments = ExpressionFactory.getArguments(operands);\n    }\n    String operation = expressionString.substring(0, paren).trim();\n    if (operation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The constant number declaration [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      return new ConstDoubleSource(Double.parseDouble(arguments[0]));\n    } else if (operation.equals(AnalyticsParams.NEGATE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The negate operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new NegateDoubleFunction(argSource);\n    }  else if (operation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The absolute value operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new AbsoluteValueDoubleFunction(argSource);\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return buildFilterSource(schema, operands, NUMBER_TYPE);\n    }\n    List<ValueSource> subExpressions = new ArrayList<>();\n    for (String argument : arguments) {\n      ValueSource argSource = buildNumericSource(schema, argument);\n      if (argSource == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" requires numeric fields or operations as arguments. \\\"\"+argument+\"\\\" is not a numeric field or operation.\");\n      }\n      subExpressions.add(argSource);\n    }\n    if (operation.equals(AnalyticsParams.ADD)) {\n      return new AddDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.MULTIPLY)) {\n      return new MultiplyDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.DIVIDE)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The divide operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new DivDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.POWER)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The power operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new PowDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.LOG)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The log operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new LogDoubleFunction(subExpressions.get(0), subExpressions.get(1));\n    } \n    if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)||AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return null;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation [\"+expressionString+\"] is not supported.\");\n  }\n\n","sourceOld":"  /**\n   * Recursively parses and breaks down the expression string to build a numeric ValueSource.\n   * \n   * @param schema The schema to pull fields from.\n   * @param expressionString The expression string to build a ValueSource from.\n   * @return The value source represented by the given expressionString\n   */\n  private static ValueSource buildNumericSource(IndexSchema schema, String expressionString) {\n    int paren = expressionString.indexOf('(');\n    String[] arguments;\n    String operands;\n    if (paren<0) {\n      return buildFieldSource(schema,expressionString,NUMBER_TYPE);\n    } else {\n      try {\n        operands = expressionString.substring(paren+1, expressionString.lastIndexOf(')')).trim();\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expressionString+\"]\");\n      }\n      arguments = ExpressionFactory.getArguments(operands);\n    }\n    String operation = expressionString.substring(0, paren).trim();\n    if (operation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The constant number declaration [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      return new ConstDoubleSource(Double.parseDouble(arguments[0]));\n    } else if (operation.equals(AnalyticsParams.NEGATE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The negate operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new NegateDoubleFunction(argSource);\n    }  else if (operation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The absolute value operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new AbsoluteValueDoubleFunction(argSource);\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return buildFilterSource(schema, operands, NUMBER_TYPE);\n    }\n    List<ValueSource> subExpressions = new ArrayList<>();\n    for (String argument : arguments) {\n      ValueSource argSource = buildNumericSource(schema, argument);\n      if (argSource == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" requires numeric fields or operations as arguments. \\\"\"+argument+\"\\\" is not a numeric field or operation.\");\n      }\n      subExpressions.add(argSource);\n    }\n    if (operation.equals(AnalyticsParams.ADD)) {\n      return new AddDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.MULTIPLY)) {\n      return new MultiplyDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.DIVIDE)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The divide operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new DivDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.POWER)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The power operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new PowDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.LOG)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The log operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new LogDoubleFunction(subExpressions.get(0), subExpressions.get(1));\n    } \n    if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)||AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return null;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation [\"+expressionString+\"] is not supported.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildNumericSource(IndexSchema,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Recursively parses and breaks down the expression string to build a numeric ValueSource.\n   * \n   * @param schema The schema to pull fields from.\n   * @param expressionString The expression string to build a ValueSource from.\n   * @return The value source represented by the given expressionString\n   */\n  private static ValueSource buildNumericSource(IndexSchema schema, String expressionString) {\n    int paren = expressionString.indexOf('(');\n    String[] arguments;\n    String operands;\n    if (paren<0) {\n      return buildFieldSource(schema,expressionString,NUMBER_TYPE);\n    } else {\n      try {\n        operands = expressionString.substring(paren+1, expressionString.lastIndexOf(')')).trim();\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expressionString+\"]\");\n      }\n      arguments = ExpressionFactory.getArguments(operands);\n    }\n    String operation = expressionString.substring(0, paren).trim();\n    if (operation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The constant number declaration [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      return new ConstDoubleSource(Double.parseDouble(arguments[0]));\n    } else if (operation.equals(AnalyticsParams.NEGATE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The negate operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new NegateDoubleFunction(argSource);\n    }  else if (operation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The absolute value operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new AbsoluteValueDoubleFunction(argSource);\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return buildFilterSource(schema, operands, NUMBER_TYPE);\n    }\n    List<ValueSource> subExpressions = new ArrayList<>();\n    for (String argument : arguments) {\n      ValueSource argSource = buildNumericSource(schema, argument);\n      if (argSource == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" requires numeric fields or operations as arguments. \\\"\"+argument+\"\\\" is not a numeric field or operation.\");\n      }\n      subExpressions.add(argSource);\n    }\n    if (operation.equals(AnalyticsParams.ADD)) {\n      return new AddDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.MULTIPLY)) {\n      return new MultiplyDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.DIVIDE)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The divide operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new DivDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.POWER)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The power operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new PowDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.LOG)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The log operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new LogDoubleFunction(subExpressions.get(0), subExpressions.get(1));\n    } \n    if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)||AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return null;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation [\"+expressionString+\"] is not supported.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildNumericSource(IndexSchema,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Recursively parses and breaks down the expression string to build a numeric ValueSource.\n   * \n   * @param schema The schema to pull fields from.\n   * @param expressionString The expression string to build a ValueSource from.\n   * @return The value source represented by the given expressionString\n   */\n  private static ValueSource buildNumericSource(IndexSchema schema, String expressionString) {\n    int paren = expressionString.indexOf('(');\n    String[] arguments;\n    String operands;\n    if (paren<0) {\n      return buildFieldSource(schema,expressionString,NUMBER_TYPE);\n    } else {\n      try {\n        operands = expressionString.substring(paren+1, expressionString.lastIndexOf(')')).trim();\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expressionString+\"]\");\n      }\n      arguments = ExpressionFactory.getArguments(operands);\n    }\n    String operation = expressionString.substring(0, paren).trim();\n    if (operation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The constant number declaration [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      return new ConstDoubleSource(Double.parseDouble(arguments[0]));\n    } else if (operation.equals(AnalyticsParams.NEGATE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The negate operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new NegateDoubleFunction(argSource);\n    }  else if (operation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The absolute value operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new AbsoluteValueDoubleFunction(argSource);\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return buildFilterSource(schema, operands, NUMBER_TYPE);\n    }\n    List<ValueSource> subExpressions = new ArrayList<>();\n    for (String argument : arguments) {\n      ValueSource argSource = buildNumericSource(schema, argument);\n      if (argSource == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" requires numeric fields or operations as arguments. \\\"\"+argument+\"\\\" is not a numeric field or operation.\");\n      }\n      subExpressions.add(argSource);\n    }\n    if (operation.equals(AnalyticsParams.ADD)) {\n      return new AddDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.MULTIPLY)) {\n      return new MultiplyDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.DIVIDE)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The divide operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new DivDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.POWER)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The power operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new PowDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.LOG)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The log operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new LogDoubleFunction(subExpressions.get(0), subExpressions.get(1));\n    } \n    if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)||AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return null;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation [\"+expressionString+\"] is not supported.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildNumericSource(IndexSchema,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Recursively parses and breaks down the expression string to build a numeric ValueSource.\n   * \n   * @param schema The schema to pull fields from.\n   * @param expressionString The expression string to build a ValueSource from.\n   * @return The value source represented by the given expressionString\n   */\n  private static ValueSource buildNumericSource(IndexSchema schema, String expressionString) {\n    int paren = expressionString.indexOf('(');\n    String[] arguments;\n    String operands;\n    if (paren<0) {\n      return buildFieldSource(schema,expressionString,NUMBER_TYPE);\n    } else {\n      try {\n        operands = expressionString.substring(paren+1, expressionString.lastIndexOf(')')).trim();\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"Missing closing parenthesis in [\"+expressionString+\"]\");\n      }\n      arguments = ExpressionFactory.getArguments(operands);\n    }\n    String operation = expressionString.substring(0, paren).trim();\n    if (operation.equals(AnalyticsParams.CONSTANT_NUMBER)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The constant number declaration [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      return new ConstDoubleSource(Double.parseDouble(arguments[0]));\n    } else if (operation.equals(AnalyticsParams.NEGATE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The negate operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new NegateDoubleFunction(argSource);\n    }  else if (operation.equals(AnalyticsParams.ABSOLUTE_VALUE)) {\n      if (arguments.length!=1) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The absolute value operation [\"+expressionString+\"] does not have exactly 1 argument.\");\n      }\n      ValueSource argSource = buildNumericSource(schema, arguments[0]);\n      if (argSource==null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+AnalyticsParams.NEGATE+\"\\\" requires a numeric field or operation as argument. \\\"\"+arguments[0]+\"\\\" is not a numeric field or operation.\");\n      }\n      return new AbsoluteValueDoubleFunction(argSource);\n    } else if (operation.equals(AnalyticsParams.FILTER)) {\n      return buildFilterSource(schema, operands, NUMBER_TYPE);\n    }\n    List<ValueSource> subExpressions = new ArrayList<>();\n    for (String argument : arguments) {\n      ValueSource argSource = buildNumericSource(schema, argument);\n      if (argSource == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation \\\"\"+operation+\"\\\" requires numeric fields or operations as arguments. \\\"\"+argument+\"\\\" is not a numeric field or operation.\");\n      }\n      subExpressions.add(argSource);\n    }\n    if (operation.equals(AnalyticsParams.ADD)) {\n      return new AddDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.MULTIPLY)) {\n      return new MultiplyDoubleFunction(subExpressions.toArray(new ValueSource[0]));\n    } else if (operation.equals(AnalyticsParams.DIVIDE)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The divide operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new DivDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.POWER)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The power operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new PowDoubleFunction(subExpressions.get(0),subExpressions.get(1));\n    } else if (operation.equals(AnalyticsParams.LOG)) {\n      if (subExpressions.size()!=2) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The log operation [\"+expressionString+\"] does not have exactly 2 arguments.\");\n      }\n      return new LogDoubleFunction(subExpressions.get(0), subExpressions.get(1));\n    } \n    if (AnalyticsParams.DATE_OPERATION_SET.contains(operation)||AnalyticsParams.STRING_OPERATION_SET.contains(operation)) {\n      return null;\n    }\n    throw new SolrException(ErrorCode.BAD_REQUEST,\"The operation [\"+expressionString+\"] is not supported.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["0f719faa74f7213d4a395510dbc1f1b7cb178484","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["0f719faa74f7213d4a395510dbc1f1b7cb178484","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}