{"path":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#next().mjava","commits":[{"id":"e5974da97d735dd78f13f46406caf64c9448e4f4","date":1343143368,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#next().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Class<? extends S> next() {\n    // hasNext() implicitely loads the next profile, so it is essential to call this here!\n    if (!hasNext()) {\n      throw new NoSuchElementException();\n    }\n    assert linesIterator.hasNext();\n    final String c = linesIterator.next();\n    try {\n      // don't initialize the class:\n      return Class.forName(c, false, loader).asSubclass(clazz);\n    } catch (ClassNotFoundException cnfe) {\n      throw new ServiceConfigurationError(\"SPI class not found: \" + c);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08c0e58a967bc50a4ec3acd7bed28cf64ae668d1","date":1343144986,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#next().mjava","sourceNew":"  @Override\n  public Class<? extends S> next() {\n    // hasNext() implicitely loads the next profile, so it is essential to call this here!\n    if (!hasNext()) {\n      throw new NoSuchElementException();\n    }\n    assert linesIterator.hasNext();\n    final String c = linesIterator.next();\n    try {\n      // don't initialize the class (pass false as 2nd parameter):\n      return Class.forName(c, false, loader).asSubclass(clazz);\n    } catch (ClassNotFoundException cnfe) {\n      throw new ServiceConfigurationError(String.format(Locale.ROOT, \"A SPI class of type %s with classname %s does not exist, \"+\n        \"please fix the file '%s%s' in your classpath.\", clazz.getName(), c, META_INF_SERVICES, clazz.getName()));\n    }\n  }\n\n","sourceOld":"  @Override\n  public Class<? extends S> next() {\n    // hasNext() implicitely loads the next profile, so it is essential to call this here!\n    if (!hasNext()) {\n      throw new NoSuchElementException();\n    }\n    assert linesIterator.hasNext();\n    final String c = linesIterator.next();\n    try {\n      // don't initialize the class:\n      return Class.forName(c, false, loader).asSubclass(clazz);\n    } catch (ClassNotFoundException cnfe) {\n      throw new ServiceConfigurationError(\"SPI class not found: \" + c);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb3bbde3ee372252eb516c3d3fc57c78fad7cb72","date":1343145209,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#next().mjava","sourceNew":"  @Override\n  public Class<? extends S> next() {\n    // hasNext() implicitely loads the next profile, so it is essential to call this here!\n    if (!hasNext()) {\n      throw new NoSuchElementException();\n    }\n    assert linesIterator.hasNext();\n    final String c = linesIterator.next();\n    try {\n      // don't initialize the class (pass false as 2nd parameter):\n      return Class.forName(c, false, loader).asSubclass(clazz);\n    } catch (ClassNotFoundException cnfe) {\n      throw new ServiceConfigurationError(String.format(Locale.ROOT, \"A SPI class of type %s with classname %s does not exist, \"+\n        \"please fix the file '%s%1$s' in your classpath.\", clazz.getName(), c, META_INF_SERVICES));\n    }\n  }\n\n","sourceOld":"  @Override\n  public Class<? extends S> next() {\n    // hasNext() implicitely loads the next profile, so it is essential to call this here!\n    if (!hasNext()) {\n      throw new NoSuchElementException();\n    }\n    assert linesIterator.hasNext();\n    final String c = linesIterator.next();\n    try {\n      // don't initialize the class (pass false as 2nd parameter):\n      return Class.forName(c, false, loader).asSubclass(clazz);\n    } catch (ClassNotFoundException cnfe) {\n      throw new ServiceConfigurationError(String.format(Locale.ROOT, \"A SPI class of type %s with classname %s does not exist, \"+\n        \"please fix the file '%s%s' in your classpath.\", clazz.getName(), c, META_INF_SERVICES, clazz.getName()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#next().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Class<? extends S> next() {\n    // hasNext() implicitely loads the next profile, so it is essential to call this here!\n    if (!hasNext()) {\n      throw new NoSuchElementException();\n    }\n    assert linesIterator.hasNext();\n    final String c = linesIterator.next();\n    try {\n      // don't initialize the class (pass false as 2nd parameter):\n      return Class.forName(c, false, loader).asSubclass(clazz);\n    } catch (ClassNotFoundException cnfe) {\n      throw new ServiceConfigurationError(String.format(Locale.ROOT, \"A SPI class of type %s with classname %s does not exist, \"+\n        \"please fix the file '%s%1$s' in your classpath.\", clazz.getName(), c, META_INF_SERVICES));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#next().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Class<? extends S> next() {\n    // hasNext() implicitely loads the next profile, so it is essential to call this here!\n    if (!hasNext()) {\n      throw new NoSuchElementException();\n    }\n    assert linesIterator.hasNext();\n    final String c = linesIterator.next();\n    try {\n      // don't initialize the class (pass false as 2nd parameter):\n      return Class.forName(c, false, loader).asSubclass(clazz);\n    } catch (ClassNotFoundException cnfe) {\n      throw new ServiceConfigurationError(String.format(Locale.ROOT, \"A SPI class of type %s with classname %s does not exist, \"+\n        \"please fix the file '%s%1$s' in your classpath.\", clazz.getName(), c, META_INF_SERVICES));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#next().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Class<? extends S> next() {\n    // hasNext() implicitely loads the next profile, so it is essential to call this here!\n    if (!hasNext()) {\n      throw new NoSuchElementException();\n    }\n    assert linesIterator.hasNext();\n    final String c = linesIterator.next();\n    try {\n      // don't initialize the class (pass false as 2nd parameter):\n      return Class.forName(c, false, loader).asSubclass(clazz);\n    } catch (ClassNotFoundException cnfe) {\n      throw new ServiceConfigurationError(String.format(Locale.ROOT, \"A SPI class of type %s with classname %s does not exist, \"+\n        \"please fix the file '%s%1$s' in your classpath.\", clazz.getName(), c, META_INF_SERVICES));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086835a0fd6668d77a649a13f8934be20c6206c7","date":1414405031,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#next().mjava","sourceNew":"  @Override\n  public Class<? extends S> next() {\n    // hasNext() implicitely loads the next profile, so it is essential to call this here!\n    if (!hasNext()) {\n      throw new NoSuchElementException();\n    }\n    assert linesIterator.hasNext();\n    final String c = linesIterator.next();\n    try {\n      // don't initialize the class (pass false as 2nd parameter):\n      return Class.forName(c, false, loader).asSubclass(clazz);\n    } catch (ClassNotFoundException cnfe) {\n      throw new ServiceConfigurationError(String.format(Locale.ROOT, \"An SPI class of type %s with classname %s does not exist, \"+\n        \"please fix the file '%s%1$s' in your classpath.\", clazz.getName(), c, META_INF_SERVICES));\n    }\n  }\n\n","sourceOld":"  @Override\n  public Class<? extends S> next() {\n    // hasNext() implicitely loads the next profile, so it is essential to call this here!\n    if (!hasNext()) {\n      throw new NoSuchElementException();\n    }\n    assert linesIterator.hasNext();\n    final String c = linesIterator.next();\n    try {\n      // don't initialize the class (pass false as 2nd parameter):\n      return Class.forName(c, false, loader).asSubclass(clazz);\n    } catch (ClassNotFoundException cnfe) {\n      throw new ServiceConfigurationError(String.format(Locale.ROOT, \"A SPI class of type %s with classname %s does not exist, \"+\n        \"please fix the file '%s%1$s' in your classpath.\", clazz.getName(), c, META_INF_SERVICES));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32694fa3bbb984d3054955e48d946708e16110ff","date":1585155816,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/SPIClassIterator#next().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Class<? extends S> next() {\n    // hasNext() implicitely loads the next profile, so it is essential to call this here!\n    if (!hasNext()) {\n      throw new NoSuchElementException();\n    }\n    assert linesIterator.hasNext();\n    final String c = linesIterator.next();\n    try {\n      // don't initialize the class (pass false as 2nd parameter):\n      return Class.forName(c, false, loader).asSubclass(clazz);\n    } catch (ClassNotFoundException cnfe) {\n      throw new ServiceConfigurationError(String.format(Locale.ROOT, \"An SPI class of type %s with classname %s does not exist, \"+\n        \"please fix the file '%s%1$s' in your classpath.\", clazz.getName(), c, META_INF_SERVICES));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"32694fa3bbb984d3054955e48d946708e16110ff":["086835a0fd6668d77a649a13f8934be20c6206c7"],"08c0e58a967bc50a4ec3acd7bed28cf64ae668d1":["e5974da97d735dd78f13f46406caf64c9448e4f4"],"086835a0fd6668d77a649a13f8934be20c6206c7":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"fb3bbde3ee372252eb516c3d3fc57c78fad7cb72":["08c0e58a967bc50a4ec3acd7bed28cf64ae668d1"],"e5974da97d735dd78f13f46406caf64c9448e4f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb3bbde3ee372252eb516c3d3fc57c78fad7cb72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["32694fa3bbb984d3054955e48d946708e16110ff"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"32694fa3bbb984d3054955e48d946708e16110ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08c0e58a967bc50a4ec3acd7bed28cf64ae668d1":["fb3bbde3ee372252eb516c3d3fc57c78fad7cb72"],"086835a0fd6668d77a649a13f8934be20c6206c7":["32694fa3bbb984d3054955e48d946708e16110ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","e5974da97d735dd78f13f46406caf64c9448e4f4","5a1a22b1ad88b436661458df567f3fdb446392a4"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"fb3bbde3ee372252eb516c3d3fc57c78fad7cb72":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"e5974da97d735dd78f13f46406caf64c9448e4f4":["08c0e58a967bc50a4ec3acd7bed28cf64ae668d1"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","086835a0fd6668d77a649a13f8934be20c6206c7","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}