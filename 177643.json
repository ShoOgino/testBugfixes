{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toSync) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toSync) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae695f21c50b03702b5d0fa2543d5af844bb7cd3","date":1331554994,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toSync) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":["06584e6e98d592b34e1329b384182f368d2025e8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toSync) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // nocommit move this back above...?  problem is\n        // prepareCommit writes on the _X.si files... which\n        // of course need to be sync'd too...\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        boolean success = false;\n        final Collection<String> filesToSync = toSync.files(directory, false);\n        try {\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b2af6b2c05418fb9df466c739ed5b3a153eadde","date":1337520269,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        boolean success = false;\n        final Collection<String> filesToSync = toSync.files(directory, false);\n        try {\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // nocommit move this back above...?  problem is\n        // prepareCommit writes on the _X.si files... which\n        // of course need to be sync'd too...\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        boolean success = false;\n        final Collection<String> filesToSync = toSync.files(directory, false);\n        try {\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        boolean success = false;\n        final Collection<String> filesToSync = toSync.files(directory, false);\n        try {\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        directory.sync(toSync.files(directory, false));\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory, codec);\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs\");\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b2266ed5528eed5eee00e1d3ff77d6cce6ef0b1f","date":1349264427,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount: \"lastCommitChangeCount=\" + lastCommitChangeCount + \" changeCount=\" + changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        boolean success = false;\n        final Collection<String> filesToSync = toSync.files(directory, false);\n        try {\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        boolean success = false;\n        final Collection<String> filesToSync = toSync.files(directory, false);\n        try {\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"780772d46216077ee38b6495eaa4329b930b16fe","date":1349649545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount: \"lastCommitChangeCount=\" + lastCommitChangeCount + \" changeCount=\" + changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(directory, false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount: \"lastCommitChangeCount=\" + lastCommitChangeCount + \" changeCount=\" + changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without sync:\n        boolean success = false;\n        final Collection<String> filesToSync = toSync.files(directory, false);\n        try {\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b47e1512544568a22b82c96169d466fae8a4b79e","date":1354519309,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","sourceNew":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount: \"lastCommitChangeCount=\" + lastCommitChangeCount + \" changeCount=\" + changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(directory, false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount: \"lastCommitChangeCount=\" + lastCommitChangeCount + \" changeCount=\" + changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(directory, false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#startCommit(SegmentInfos,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  /** Walk through all files referenced by the current\n   *  segmentInfos and ask the Directory to sync each file,\n   *  if it wasn't already.  If that succeeds, then we\n   *  prepare a new segments_N file but do not fully commit\n   *  it. */\n  private void startCommit(final SegmentInfos toSync, final Map<String,String> commitUserData) throws IOException {\n\n    assert testPoint(\"startStartCommit\");\n    assert pendingCommit == null;\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot commit\");\n    }\n\n    try {\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"startCommit(): start\");\n      }\n\n      synchronized(this) {\n\n        assert lastCommitChangeCount <= changeCount: \"lastCommitChangeCount=\" + lastCommitChangeCount + \" changeCount=\" + changeCount;\n\n        if (pendingCommitChangeCount == lastCommitChangeCount) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"  skip startCommit(): no changes pending\");\n          }\n          deleter.decRef(filesToCommit);\n          filesToCommit = null;\n          return;\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"startCommit index=\" + segString(toLiveInfos(toSync)) + \" changeCount=\" + changeCount);\n        }\n\n        assert filesExist(toSync);\n\n        if (commitUserData != null) {\n          toSync.setUserData(commitUserData);\n        }\n      }\n\n      assert testPoint(\"midStartCommit\");\n\n      boolean pendingCommitSet = false;\n\n      try {\n\n        assert testPoint(\"midStartCommit2\");\n\n        synchronized(this) {\n\n          assert pendingCommit == null;\n\n          assert segmentInfos.getGeneration() == toSync.getGeneration();\n\n          // Exception here means nothing is prepared\n          // (this method unwinds everything it did on\n          // an exception)\n          toSync.prepareCommit(directory);\n          //System.out.println(\"DONE prepareCommit\");\n\n          pendingCommitSet = true;\n          pendingCommit = toSync;\n        }\n\n        // This call can take a long time -- 10s of seconds\n        // or more.  We do it without syncing on this:\n        boolean success = false;\n        final Collection<String> filesToSync;\n        try {\n          filesToSync = toSync.files(directory, false);\n          directory.sync(filesToSync);\n          success = true;\n        } finally {\n          if (!success) {\n            pendingCommitSet = false;\n            pendingCommit = null;\n            toSync.rollbackCommit(directory);\n          }\n        }\n\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"done all syncs: \" + filesToSync);\n        }\n\n        assert testPoint(\"midStartCommitSuccess\");\n\n      } finally {\n        synchronized(this) {\n          // Have our master segmentInfos record the\n          // generations we just prepared.  We do this\n          // on error or success so we don't\n          // double-write a segments_N file.\n          segmentInfos.updateGeneration(toSync);\n\n          if (!pendingCommitSet) {\n            if (infoStream.isEnabled(\"IW\")) {\n              infoStream.message(\"IW\", \"hit exception committing segments file\");\n            }\n\n            // Hit exception\n            deleter.decRef(filesToCommit);\n            filesToCommit = null;\n          }\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"startCommit\");\n    }\n    assert testPoint(\"finishStartCommit\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"b2266ed5528eed5eee00e1d3ff77d6cce6ef0b1f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3","9b2af6b2c05418fb9df466c739ed5b3a153eadde"],"4356000e349e38c9fb48034695b7c309abd54557":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"780772d46216077ee38b6495eaa4329b930b16fe":["b2266ed5528eed5eee00e1d3ff77d6cce6ef0b1f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["780772d46216077ee38b6495eaa4329b930b16fe","b47e1512544568a22b82c96169d466fae8a4b79e"],"9b2af6b2c05418fb9df466c739ed5b3a153eadde":["4356000e349e38c9fb48034695b7c309abd54557"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b47e1512544568a22b82c96169d466fae8a4b79e":["780772d46216077ee38b6495eaa4329b930b16fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b47e1512544568a22b82c96169d466fae8a4b79e"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b2266ed5528eed5eee00e1d3ff77d6cce6ef0b1f":["780772d46216077ee38b6495eaa4329b930b16fe"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["b2266ed5528eed5eee00e1d3ff77d6cce6ef0b1f"],"4356000e349e38c9fb48034695b7c309abd54557":["9b2af6b2c05418fb9df466c739ed5b3a153eadde"],"780772d46216077ee38b6495eaa4329b930b16fe":["407687e67faf6e1f02a211ca078d8e3eed631027","b47e1512544568a22b82c96169d466fae8a4b79e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"9b2af6b2c05418fb9df466c739ed5b3a153eadde":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"ae695f21c50b03702b5d0fa2543d5af844bb7cd3":["38e3b736c7ca086d61b7dbb841c905ee115490da","615ddbd81799980d0fdd95e0238e1c498b6f47b0","4356000e349e38c9fb48034695b7c309abd54557"],"b47e1512544568a22b82c96169d466fae8a4b79e":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}