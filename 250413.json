{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#trieCodeInt(int,int).mjava","commits":[{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#trieCodeInt(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a sequence of trie coded numbers suitable for {@link IntTrieRangeFilter}.\n   * Each successive string in the list has had it's precision reduced by <code>precisionStep</code>.\n   * For sorting, index the first full-precision value into a separate field and the\n   * remaining values into another field.\n   * <p>To achieve this, use {@link #addIndexedFields(Document,String,String[])}.\n   */\n  public static String[] trieCodeInt(int val, int precisionStep) {\n    if (precisionStep<1 || precisionStep>32)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..32\");\n    String[] arr = new String[31/precisionStep+1];\n    int idx = 0;\n    for (int shift=0; shift<32; shift+=precisionStep) {\n      arr[idx++] = intToPrefixCoded(val, shift);\n    }\n    return arr;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1","date":1239104855,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#trieCodeInt(int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a sequence of trie coded numbers suitable for {@link IntTrieRangeFilter}.\n   * Each successive string in the list has had it's precision reduced by <code>precisionStep</code>.\n   * For sorting, index the first full-precision value into a separate field and the\n   * remaining values into another field.\n   * <p>To achieve this, use {@link #addIndexedFields(Document,String,String[])}.\n   */\n  public static String[] trieCodeInt(int val, int precisionStep) {\n    if (precisionStep<1 || precisionStep>32)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..32\");\n    String[] arr = new String[31/precisionStep+1];\n    int idx = 0;\n    for (int shift=0; shift<32; shift+=precisionStep) {\n      arr[idx++] = intToPrefixCoded(val, shift);\n    }\n    return arr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"]},"commit2Childs":{"c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["c1b4c49e8cb0b92d10e3757eb85ffdbd5b675eb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}