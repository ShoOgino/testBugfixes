{"path":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean).mjava","commits":[{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher).mjava","sourceNew":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(PhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.size()];\n      TermStatistics termStats[] = new TermStatistics[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term term = terms.get(i);\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(getBoost(), searcher.collectionStatistics(field), termStats);\n    }\n\n","sourceOld":"    public PhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.size()];\n      TermStatistics termStats[] = new TermStatistics[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term term = terms.get(i);\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(getBoost(), searcher.collectionStatistics(field), termStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean).mjava","sourceNew":"    public PhraseWeight(IndexSearcher searcher, int postingsFlags)\n      throws IOException {\n      super(PhraseQuery.this);\n      this.postingsFlags = postingsFlags | PostingsEnum.FLAG_POSITIONS;\n      this.needsScores = (postingsFlags & PostingsEnum.FLAG_FREQS) != 0;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.size()];\n      TermStatistics termStats[] = new TermStatistics[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term term = terms.get(i);\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(getBoost(), searcher.collectionStatistics(field), termStats);\n    }\n\n","sourceOld":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(PhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.size()];\n      TermStatistics termStats[] = new TermStatistics[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term term = terms.get(i);\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(getBoost(), searcher.collectionStatistics(field), termStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,int).mjava","sourceNew":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(PhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.size()];\n      TermStatistics termStats[] = new TermStatistics[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term term = terms.get(i);\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(getBoost(), searcher.collectionStatistics(field), termStats);\n    }\n\n","sourceOld":"    public PhraseWeight(IndexSearcher searcher, int postingsFlags)\n      throws IOException {\n      super(PhraseQuery.this);\n      this.postingsFlags = postingsFlags | PostingsEnum.FLAG_POSITIONS;\n      this.needsScores = (postingsFlags & PostingsEnum.FLAG_FREQS) != 0;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.size()];\n      TermStatistics termStats[] = new TermStatistics[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term term = terms.get(i);\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(getBoost(), searcher.collectionStatistics(field), termStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fb5dc223475059e18daa29ecbc9ee827971f72c","date":1424359649,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean).mjava","sourceNew":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(PhraseQuery.this);\n      final int[] positions = PhraseQuery.this.getPositions();\n      if (positions.length < 2) {\n        throw new IllegalStateException(\"PhraseWeight does not support less than 2 terms, call rewrite first\");\n      } else if (positions[0] != 0) {\n        throw new IllegalStateException(\"PhraseWeight requires that the first position is 0, call rewrite first\");\n      }\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.size()];\n      TermStatistics termStats[] = new TermStatistics[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term term = terms.get(i);\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(getBoost(), searcher.collectionStatistics(field), termStats);\n    }\n\n","sourceOld":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(PhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.size()];\n      TermStatistics termStats[] = new TermStatistics[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term term = terms.get(i);\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(getBoost(), searcher.collectionStatistics(field), termStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"485545da3b4429d6f138b4baac573a97820ee93b","date":1433876557,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean).mjava","sourceNew":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(PhraseQuery.this);\n      final int[] positions = PhraseQuery.this.getPositions();\n      if (positions.length < 2) {\n        throw new IllegalStateException(\"PhraseWeight does not support less than 2 terms, call rewrite first\");\n      } else if (positions[0] != 0) {\n        throw new IllegalStateException(\"PhraseWeight requires that the first position is 0, call rewrite first\");\n      }\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.size()];\n      TermStatistics termStats[] = new TermStatistics[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term term = terms.get(i);\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(getBoost(), searcher.collectionStatistics(field), termStats);\n    }\n\n","sourceOld":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(PhraseQuery.this);\n      final int[] positions = PhraseQuery.this.getPositions();\n      if (positions.length < 2) {\n        throw new IllegalStateException(\"PhraseWeight does not support less than 2 terms, call rewrite first\");\n      } else if (positions[0] != 0) {\n        throw new IllegalStateException(\"PhraseWeight requires that the first position is 0, call rewrite first\");\n      }\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.size()];\n      TermStatistics termStats[] = new TermStatistics[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term term = terms.get(i);\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(getBoost(), searcher.collectionStatistics(field), termStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean).mjava","sourceNew":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(PhraseQuery.this);\n      final int[] positions = PhraseQuery.this.getPositions();\n      if (positions.length < 2) {\n        throw new IllegalStateException(\"PhraseWeight does not support less than 2 terms, call rewrite first\");\n      } else if (positions[0] != 0) {\n        throw new IllegalStateException(\"PhraseWeight requires that the first position is 0, call rewrite first\");\n      }\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.length];\n      TermStatistics termStats[] = new TermStatistics[terms.length];\n      for (int i = 0; i < terms.length; i++) {\n        final Term term = terms[i];\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(getBoost(), searcher.collectionStatistics(field), termStats);\n    }\n\n","sourceOld":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(PhraseQuery.this);\n      final int[] positions = PhraseQuery.this.getPositions();\n      if (positions.length < 2) {\n        throw new IllegalStateException(\"PhraseWeight does not support less than 2 terms, call rewrite first\");\n      } else if (positions[0] != 0) {\n        throw new IllegalStateException(\"PhraseWeight requires that the first position is 0, call rewrite first\");\n      }\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.size()];\n      TermStatistics termStats[] = new TermStatistics[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term term = terms.get(i);\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(getBoost(), searcher.collectionStatistics(field), termStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean).mjava","sourceNew":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(PhraseQuery.this);\n      final int[] positions = PhraseQuery.this.getPositions();\n      if (positions.length < 2) {\n        throw new IllegalStateException(\"PhraseWeight does not support less than 2 terms, call rewrite first\");\n      } else if (positions[0] != 0) {\n        throw new IllegalStateException(\"PhraseWeight requires that the first position is 0, call rewrite first\");\n      }\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.length];\n      TermStatistics termStats[] = new TermStatistics[terms.length];\n      for (int i = 0; i < terms.length; i++) {\n        final Term term = terms[i];\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(searcher.collectionStatistics(field), termStats);\n    }\n\n","sourceOld":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(PhraseQuery.this);\n      final int[] positions = PhraseQuery.this.getPositions();\n      if (positions.length < 2) {\n        throw new IllegalStateException(\"PhraseWeight does not support less than 2 terms, call rewrite first\");\n      } else if (positions[0] != 0) {\n        throw new IllegalStateException(\"PhraseWeight requires that the first position is 0, call rewrite first\");\n      }\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.length];\n      TermStatistics termStats[] = new TermStatistics[terms.length];\n      for (int i = 0; i < terms.length; i++) {\n        final Term term = terms[i];\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(getBoost(), searcher.collectionStatistics(field), termStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean).mjava","sourceNew":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores, float boost)\n      throws IOException {\n      super(PhraseQuery.this);\n      final int[] positions = PhraseQuery.this.getPositions();\n      if (positions.length < 2) {\n        throw new IllegalStateException(\"PhraseWeight does not support less than 2 terms, call rewrite first\");\n      } else if (positions[0] != 0) {\n        throw new IllegalStateException(\"PhraseWeight requires that the first position is 0, call rewrite first\");\n      }\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.length];\n      TermStatistics termStats[] = new TermStatistics[terms.length];\n      for (int i = 0; i < terms.length; i++) {\n        final Term term = terms[i];\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(boost, searcher.collectionStatistics(field), termStats);\n    }\n\n","sourceOld":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(PhraseQuery.this);\n      final int[] positions = PhraseQuery.this.getPositions();\n      if (positions.length < 2) {\n        throw new IllegalStateException(\"PhraseWeight does not support less than 2 terms, call rewrite first\");\n      } else if (positions[0] != 0) {\n        throw new IllegalStateException(\"PhraseWeight requires that the first position is 0, call rewrite first\");\n      }\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.length];\n      TermStatistics termStats[] = new TermStatistics[terms.length];\n      for (int i = 0; i < terms.length; i++) {\n        final Term term = terms[i];\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(searcher.collectionStatistics(field), termStats);\n    }\n\n","bugFix":null,"bugIntro":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#PhraseWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"    public PhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(PhraseQuery.this);\n      final int[] positions = PhraseQuery.this.getPositions();\n      if (positions.length < 2) {\n        throw new IllegalStateException(\"PhraseWeight does not support less than 2 terms, call rewrite first\");\n      } else if (positions[0] != 0) {\n        throw new IllegalStateException(\"PhraseWeight requires that the first position is 0, call rewrite first\");\n      }\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      states = new TermContext[terms.length];\n      TermStatistics termStats[] = new TermStatistics[terms.length];\n      for (int i = 0; i < terms.length; i++) {\n        final Term term = terms[i];\n        states[i] = TermContext.build(context, term);\n        termStats[i] = searcher.termStatistics(term, states[i]);\n      }\n      stats = similarity.computeWeight(searcher.collectionStatistics(field), termStats);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"fb17639909a369c1e64866842e5c213440acc17e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9e1499c5d26c936238506df90a3c02c76707722":["485545da3b4429d6f138b4baac573a97820ee93b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["e9e1499c5d26c936238506df90a3c02c76707722"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"485545da3b4429d6f138b4baac573a97820ee93b":["6fb5dc223475059e18daa29ecbc9ee827971f72c"],"6fb5dc223475059e18daa29ecbc9ee827971f72c":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"954e59be3da8dc1b046646ad7af4b466852009d3":["fb17639909a369c1e64866842e5c213440acc17e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["6fb5dc223475059e18daa29ecbc9ee827971f72c"],"fb17639909a369c1e64866842e5c213440acc17e":["954e59be3da8dc1b046646ad7af4b466852009d3"],"e9e1499c5d26c936238506df90a3c02c76707722":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb17639909a369c1e64866842e5c213440acc17e"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"485545da3b4429d6f138b4baac573a97820ee93b":["e9e1499c5d26c936238506df90a3c02c76707722"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6fb5dc223475059e18daa29ecbc9ee827971f72c":["485545da3b4429d6f138b4baac573a97820ee93b"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}