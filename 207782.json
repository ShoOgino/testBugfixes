{"path":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(Automaton,RunAutomaton,Term,IndexReader,boolean).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(Automaton,RunAutomaton,Term,IndexReader,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * @lucene.internal Use the public ctor instead. This constructor allows the\n   * (dangerous) option of passing in a pre-compiled RunAutomaton. If you use \n   * this ctor and compile your own RunAutomaton, you are responsible for \n   * ensuring it is in sync with the Automaton object, including internal\n   * State numbering, or you will get undefined behavior.\n   * <p>\n   * @param preCompiled optional pre-compiled RunAutomaton (can be null)\n   * @param finite true if the automaton accepts a finite language\n   */\n  AutomatonTermsEnum(Automaton automaton, RunAutomaton preCompiled,\n      Term queryTerm, IndexReader reader, boolean finite)\n      throws IOException {\n    super(reader, queryTerm.field());\n    this.automaton = automaton;\n    this.finite = finite;\n\n    /* \n     * tableize the automaton. this also ensures it is deterministic, and has no \n     * transitions to dead states. it also invokes Automaton.setStateNumbers to\n     * number the original states (this is how they are tableized)\n     */\n    if (preCompiled == null)\n      runAutomaton = new RunAutomaton(this.automaton);\n    else\n      runAutomaton = preCompiled;\n\n    commonSuffixRef = finite ? null : new BytesRef(getValidUTF16Suffix(SpecialOperations\n        .getCommonSuffix(automaton)));\n    \n    // build a cache of sorted transitions for every state\n    allTransitions = new Transition[runAutomaton.getSize()][];\n    for (State state : this.automaton.getStates())\n      allTransitions[state.getNumber()] = state.getSortedTransitionArray(false);\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    setUseTermsCache(finite);\n    termComp = getComparator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,String,IndexReader,boolean,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(Automaton,RunAutomaton,Term,IndexReader,boolean).mjava","sourceNew":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * @lucene.internal Use the public ctor instead. \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     String field, IndexReader reader,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(reader, field);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = new Transition[runAutomaton.getSize()][];\n    for (State state : this.automaton.getNumberedStates()) {\n      state.sortTransitions(Transition.CompareByMinMaxThenDestUTF8InUTF16Order);\n      state.trimTransitionsArray();\n      allTransitions[state.getNumber()] = state.transitionsArray;\n    }\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    setUseTermsCache(finite);\n    termComp = getComparator();\n  }\n\n","sourceOld":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * @lucene.internal Use the public ctor instead. This constructor allows the\n   * (dangerous) option of passing in a pre-compiled RunAutomaton. If you use \n   * this ctor and compile your own RunAutomaton, you are responsible for \n   * ensuring it is in sync with the Automaton object, including internal\n   * State numbering, or you will get undefined behavior.\n   * <p>\n   * @param preCompiled optional pre-compiled RunAutomaton (can be null)\n   * @param finite true if the automaton accepts a finite language\n   */\n  AutomatonTermsEnum(Automaton automaton, RunAutomaton preCompiled,\n      Term queryTerm, IndexReader reader, boolean finite)\n      throws IOException {\n    super(reader, queryTerm.field());\n    this.automaton = automaton;\n    this.finite = finite;\n\n    /* \n     * tableize the automaton. this also ensures it is deterministic, and has no \n     * transitions to dead states. it also invokes Automaton.setStateNumbers to\n     * number the original states (this is how they are tableized)\n     */\n    if (preCompiled == null)\n      runAutomaton = new RunAutomaton(this.automaton);\n    else\n      runAutomaton = preCompiled;\n\n    commonSuffixRef = finite ? null : new BytesRef(getValidUTF16Suffix(SpecialOperations\n        .getCommonSuffix(automaton)));\n    \n    // build a cache of sorted transitions for every state\n    allTransitions = new Transition[runAutomaton.getSize()][];\n    for (State state : this.automaton.getStates())\n      allTransitions[state.getNumber()] = state.getSortedTransitionArray(false);\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    setUseTermsCache(finite);\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"]},"commit2Childs":{"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}