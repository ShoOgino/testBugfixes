{"path":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#initializeWebServer(String,String,Configuration,String[]).mjava","commits":[{"id":"99b97f030e743d8dd4d7685202f71718d7e5af22","date":1548957620,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#initializeWebServer(String,String,Configuration,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void initializeWebServer(String name, String hostName,\n                                   Configuration conf, String[] pathSpecs)\n      throws IOException {\n\n    Preconditions.checkNotNull(webAppContext);\n\n    int maxThreads = conf.getInt(HTTP_MAX_THREADS_KEY, -1);\n    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n    // default value (currently 250).\n\n    QueuedThreadPool threadPool = (QueuedThreadPool) webServer.getThreadPool();\n    threadPool.setDaemon(true);\n    if (maxThreads != -1) {\n      // Minimum number of threads must be > 3.\n      // DatanodeHttpServer sets the HTTP_MAX_THREADS_KEY to 3\n      threadPool.setMaxThreads(Math.max(maxThreads, 4));\n    }\n\n    SessionHandler sessionHandler = webAppContext.getSessionHandler();\n    sessionHandler.setHttpOnly(true);\n    sessionHandler.getSessionCookieConfig().setSecure(true);\n\n    ContextHandlerCollection contexts = new ContextHandlerCollection();\n    RequestLog requestLog = HttpRequestLog.getRequestLog(name);\n\n    handlers.addHandler(contexts);\n    if (requestLog != null) {\n      RequestLogHandler requestLogHandler = new RequestLogHandler();\n      requestLogHandler.setRequestLog(requestLog);\n      handlers.addHandler(requestLogHandler);\n    }\n    handlers.addHandler(webAppContext);\n    final String appDir = getWebAppsPath(name);\n    addDefaultApps(contexts, appDir, conf);\n    webServer.setHandler(handlers);\n\n    Map<String, String> xFrameParams = setHeaders(conf);\n    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n    final FilterInitializer[] initializers = getFilterInitializers(conf);\n    if (initializers != null) {\n      conf = new Configuration(conf);\n      conf.set(BIND_ADDRESS, hostName);\n      for (FilterInitializer c : initializers) {\n        c.initFilter(this, conf);\n      }\n    }\n\n    addDefaultServlets();\n\n    if (pathSpecs != null) {\n      for (String path : pathSpecs) {\n        LOG.info(\"adding path spec: \" + path);\n        addFilterPathMapping(path, webAppContext);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34b74c124d68d8e306d6ef09624f3cd053b8a2fd","date":1548981962,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#initializeWebServer(String,String,Configuration,String[]).mjava","sourceNew":null,"sourceOld":"  private void initializeWebServer(String name, String hostName,\n                                   Configuration conf, String[] pathSpecs)\n      throws IOException {\n\n    Preconditions.checkNotNull(webAppContext);\n\n    int maxThreads = conf.getInt(HTTP_MAX_THREADS_KEY, -1);\n    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n    // default value (currently 250).\n\n    QueuedThreadPool threadPool = (QueuedThreadPool) webServer.getThreadPool();\n    threadPool.setDaemon(true);\n    if (maxThreads != -1) {\n      // Minimum number of threads must be > 3.\n      // DatanodeHttpServer sets the HTTP_MAX_THREADS_KEY to 3\n      threadPool.setMaxThreads(Math.max(maxThreads, 4));\n    }\n\n    SessionHandler sessionHandler = webAppContext.getSessionHandler();\n    sessionHandler.setHttpOnly(true);\n    sessionHandler.getSessionCookieConfig().setSecure(true);\n\n    ContextHandlerCollection contexts = new ContextHandlerCollection();\n    RequestLog requestLog = HttpRequestLog.getRequestLog(name);\n\n    handlers.addHandler(contexts);\n    if (requestLog != null) {\n      RequestLogHandler requestLogHandler = new RequestLogHandler();\n      requestLogHandler.setRequestLog(requestLog);\n      handlers.addHandler(requestLogHandler);\n    }\n    handlers.addHandler(webAppContext);\n    final String appDir = getWebAppsPath(name);\n    addDefaultApps(contexts, appDir, conf);\n    webServer.setHandler(handlers);\n\n    Map<String, String> xFrameParams = setHeaders(conf);\n    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n    final FilterInitializer[] initializers = getFilterInitializers(conf);\n    if (initializers != null) {\n      conf = new Configuration(conf);\n      conf.set(BIND_ADDRESS, hostName);\n      for (FilterInitializer c : initializers) {\n        c.initFilter(this, conf);\n      }\n    }\n\n    addDefaultServlets();\n\n    if (pathSpecs != null) {\n      for (String path : pathSpecs) {\n        LOG.info(\"adding path spec: \" + path);\n        addFilterPathMapping(path, webAppContext);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44ca189138a5b6e1989d12ab992fab60e235ddc7","date":1549051496,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#initializeWebServer(String,String,Configuration,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void initializeWebServer(String name, String hostName,\n                                   Configuration conf, String[] pathSpecs)\n      throws IOException {\n\n    Preconditions.checkNotNull(webAppContext);\n\n    int maxThreads = conf.getInt(HTTP_MAX_THREADS_KEY, -1);\n    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n    // default value (currently 250).\n\n    QueuedThreadPool threadPool = (QueuedThreadPool) webServer.getThreadPool();\n    threadPool.setDaemon(true);\n    if (maxThreads != -1) {\n      // Minimum number of threads must be > 3.\n      // DatanodeHttpServer sets the HTTP_MAX_THREADS_KEY to 3\n      threadPool.setMaxThreads(Math.max(maxThreads, 4));\n    }\n\n    SessionHandler sessionHandler = webAppContext.getSessionHandler();\n    sessionHandler.setHttpOnly(true);\n    sessionHandler.getSessionCookieConfig().setSecure(true);\n\n    ContextHandlerCollection contexts = new ContextHandlerCollection();\n    RequestLog requestLog = HttpRequestLog.getRequestLog(name);\n\n    handlers.addHandler(contexts);\n    if (requestLog != null) {\n      RequestLogHandler requestLogHandler = new RequestLogHandler();\n      requestLogHandler.setRequestLog(requestLog);\n      handlers.addHandler(requestLogHandler);\n    }\n    handlers.addHandler(webAppContext);\n    final String appDir = getWebAppsPath(name);\n    addDefaultApps(contexts, appDir, conf);\n    webServer.setHandler(handlers);\n\n    Map<String, String> xFrameParams = setHeaders(conf);\n    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n    final FilterInitializer[] initializers = getFilterInitializers(conf);\n    if (initializers != null) {\n      conf = new Configuration(conf);\n      conf.set(BIND_ADDRESS, hostName);\n      for (FilterInitializer c : initializers) {\n        c.initFilter(this, conf);\n      }\n    }\n\n    addDefaultServlets();\n\n    if (pathSpecs != null) {\n      for (String path : pathSpecs) {\n        LOG.info(\"adding path spec: \" + path);\n        addFilterPathMapping(path, webAppContext);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#initializeWebServer(String,String,Configuration,String[]).mjava","pathOld":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#initializeWebServer(String,String,Configuration,String[]).mjava","sourceNew":"  private void initializeWebServer(String name, String hostName,\n                                   Configuration conf, String[] pathSpecs)\n      throws IOException {\n\n    Preconditions.checkNotNull(webAppContext);\n\n    int maxThreads = conf.getInt(HTTP_MAX_THREADS_KEY, -1);\n    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n    // default value (currently 250).\n\n    QueuedThreadPool threadPool = (QueuedThreadPool) webServer.getThreadPool();\n    threadPool.setDaemon(true);\n    if (maxThreads != -1) {\n      // Minimum number of threads must be > 3.\n      // DatanodeHttpServer sets the HTTP_MAX_THREADS_KEY to 3\n      threadPool.setMaxThreads(Math.max(maxThreads, 4));\n    }\n\n    SessionHandler sessionHandler = webAppContext.getSessionHandler();\n    sessionHandler.setHttpOnly(true);\n    sessionHandler.getSessionCookieConfig().setSecure(true);\n\n    ContextHandlerCollection contexts = new ContextHandlerCollection();\n    RequestLog requestLog = HttpRequestLog.getRequestLog(name);\n\n    handlers.addHandler(contexts);\n    if (requestLog != null) {\n      RequestLogHandler requestLogHandler = new RequestLogHandler();\n      requestLogHandler.setRequestLog(requestLog);\n      handlers.addHandler(requestLogHandler);\n    }\n    handlers.addHandler(webAppContext);\n    final String appDir = getWebAppsPath(name);\n    addDefaultApps(contexts, appDir, conf);\n    webServer.setHandler(handlers);\n\n    Map<String, String> xFrameParams = setHeaders(conf);\n    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n    final FilterInitializer[] initializers = getFilterInitializers(conf);\n    if (initializers != null) {\n      conf = new Configuration(conf);\n      conf.set(BIND_ADDRESS, hostName);\n      for (FilterInitializer c : initializers) {\n        c.initFilter(this, conf);\n      }\n    }\n\n    addDefaultServlets();\n\n    if (pathSpecs != null) {\n      for (String path : pathSpecs) {\n        LOG.info(\"adding path spec: {}\", path);\n        addFilterPathMapping(path, webAppContext);\n      }\n    }\n  }\n\n","sourceOld":"  private void initializeWebServer(String name, String hostName,\n                                   Configuration conf, String[] pathSpecs)\n      throws IOException {\n\n    Preconditions.checkNotNull(webAppContext);\n\n    int maxThreads = conf.getInt(HTTP_MAX_THREADS_KEY, -1);\n    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n    // default value (currently 250).\n\n    QueuedThreadPool threadPool = (QueuedThreadPool) webServer.getThreadPool();\n    threadPool.setDaemon(true);\n    if (maxThreads != -1) {\n      // Minimum number of threads must be > 3.\n      // DatanodeHttpServer sets the HTTP_MAX_THREADS_KEY to 3\n      threadPool.setMaxThreads(Math.max(maxThreads, 4));\n    }\n\n    SessionHandler sessionHandler = webAppContext.getSessionHandler();\n    sessionHandler.setHttpOnly(true);\n    sessionHandler.getSessionCookieConfig().setSecure(true);\n\n    ContextHandlerCollection contexts = new ContextHandlerCollection();\n    RequestLog requestLog = HttpRequestLog.getRequestLog(name);\n\n    handlers.addHandler(contexts);\n    if (requestLog != null) {\n      RequestLogHandler requestLogHandler = new RequestLogHandler();\n      requestLogHandler.setRequestLog(requestLog);\n      handlers.addHandler(requestLogHandler);\n    }\n    handlers.addHandler(webAppContext);\n    final String appDir = getWebAppsPath(name);\n    addDefaultApps(contexts, appDir, conf);\n    webServer.setHandler(handlers);\n\n    Map<String, String> xFrameParams = setHeaders(conf);\n    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), xFrameParams);\n    final FilterInitializer[] initializers = getFilterInitializers(conf);\n    if (initializers != null) {\n      conf = new Configuration(conf);\n      conf.set(BIND_ADDRESS, hostName);\n      for (FilterInitializer c : initializers) {\n        c.initFilter(this, conf);\n      }\n    }\n\n    addDefaultServlets();\n\n    if (pathSpecs != null) {\n      for (String path : pathSpecs) {\n        LOG.info(\"adding path spec: \" + path);\n        addFilterPathMapping(path, webAppContext);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34b74c124d68d8e306d6ef09624f3cd053b8a2fd":["99b97f030e743d8dd4d7685202f71718d7e5af22"],"99b97f030e743d8dd4d7685202f71718d7e5af22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["34b74c124d68d8e306d6ef09624f3cd053b8a2fd"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["44ca189138a5b6e1989d12ab992fab60e235ddc7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"34b74c124d68d8e306d6ef09624f3cd053b8a2fd":["44ca189138a5b6e1989d12ab992fab60e235ddc7"],"99b97f030e743d8dd4d7685202f71718d7e5af22":["34b74c124d68d8e306d6ef09624f3cd053b8a2fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99b97f030e743d8dd4d7685202f71718d7e5af22"],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}