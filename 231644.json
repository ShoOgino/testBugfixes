{"path":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      String[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      String[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      BytesRef[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i].utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      String[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      BytesRef[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i].utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      String[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      BytesRef[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i].utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      BytesRef[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i].utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      BytesRef[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i].utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      BytesRef[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i].utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos, IOContext.READ);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      BytesRef[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i].utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      BytesRef[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i].utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      BytesRef[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i].utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos, IOContext.READ);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      BytesRef[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i].utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      BytesRef[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i].utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      BytesRef[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i].utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      BytesRef[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i].utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      BytesRef[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i].utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      BytesRef[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i].utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    for (int j = 0; j < 5; j++) {\n      Terms vector = reader.get(j).terms(testFields[0]);\n      assertNotNull(vector);\n      assertEquals(testTerms.length, vector.getUniqueTermCount());\n      TermsEnum termsEnum = vector.iterator(null);\n      for (int i = 0; i < testTerms.length; i++) {\n        final BytesRef text = termsEnum.next();\n        assertNotNull(text);\n        String term = text.utf8ToString();\n        //System.out.println(\"Term: \" + term);\n        assertEquals(testTerms[i], term);\n      }\n      assertNull(termsEnum.next());\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","b6f9be74ca7baaef11857ad002cad40419979516"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","5f4e87790277826a2aea119328600dfb07761f32"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["3cc749c053615f5871f3b95715fe292f34e70a53","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}