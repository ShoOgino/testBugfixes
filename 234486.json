{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner,boolean).mjava","commits":[{"id":"ad28156288ac00b91352582904d97e6653205757","date":1486850922,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#checkForSingleIndex(JettySolrRunner,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void checkForSingleIndex(JettySolrRunner jetty, boolean afterReload) {\n    CoreContainer cores = jetty.getCoreContainer();\n    Collection<SolrCore> theCores = cores.getCores();\n    for (SolrCore core : theCores) {\n      String ddir = core.getDataDir();\n      CachingDirectoryFactory dirFactory = getCachingDirectoryFactory(core);\n      synchronized (dirFactory) {\n        Set<String> livePaths = dirFactory.getLivePaths();\n        // one for data, one for the index under data and one for the snapshot metadata.\n        // we also allow one extra index dir - it may not be removed until the core is closed\n        if (afterReload) {\n          assertTrue(livePaths.toString() + \":\" + livePaths.size(), 3 == livePaths.size() || 4 == livePaths.size());\n        } else {\n          assertTrue(livePaths.toString() + \":\" + livePaths.size(), 3 == livePaths.size());\n        }\n\n        // :TODO: assert that one of the paths is a subpath of hte other\n      }\n      if (dirFactory instanceof StandardDirectoryFactory) {\n        System.out.println(Arrays.asList(new File(ddir).list()));\n        // we also allow one extra index dir - it may not be removed until the core is closed\n        int cnt = indexDirCount(ddir);\n        // if after reload, there may be 2 index dirs while the reloaded SolrCore closes.\n        if (afterReload) {\n          assertTrue(\"found:\" + cnt + Arrays.asList(new File(ddir).list()).toString(), 1 == cnt || 2 == cnt);\n        } else {\n          assertTrue(\"found:\" + cnt + Arrays.asList(new File(ddir).list()).toString(), 1 == cnt);\n        }\n\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad28156288ac00b91352582904d97e6653205757":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad28156288ac00b91352582904d97e6653205757"]},"commit2Childs":{"ad28156288ac00b91352582904d97e6653205757":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad28156288ac00b91352582904d97e6653205757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}