{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Node#getSubCells(Shape).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Node#getSubCells(Shape).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Node#getSubCells(Shape).mjava","sourceNew":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If that shape is a {@link com.spatial4j.core.shape.Point} then it\n   * must call {@link #getSubCell(com.spatial4j.core.shape.Point)};\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Node> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      return Collections.singleton(getSubCell((Point) shapeFilter));\n    }\n    Collection<Node> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n    List<Node> copy = new ArrayList<Node>(cells.size());//copy since cells contractually isn't modifiable\n    for (Node cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter, spatialPrefixTree.ctx);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      copy.add(cell);\n    }\n    cells = copy;\n    return cells;\n  }\n\n","sourceOld":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If that shape is a {@link com.spatial4j.core.shape.Point} then it\n   * must call {@link #getSubCell(com.spatial4j.core.shape.Point)};\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Node> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      return Collections.singleton(getSubCell((Point) shapeFilter));\n    }\n    Collection<Node> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n    List<Node> copy = new ArrayList<Node>(cells.size());//copy since cells contractually isn't modifiable\n    for (Node cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter, spatialPrefixTree.ctx);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      copy.add(cell);\n    }\n    cells = copy;\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da956410d7a790f567af4e7e94584fb0930212f2","date":1346859431,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Node#getSubCells(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Node#getSubCells(Shape).mjava","sourceNew":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If that shape is a {@link com.spatial4j.core.shape.Point} then it\n   * must call {@link #getSubCell(com.spatial4j.core.shape.Point)};\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Node> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      return Collections.singleton(getSubCell((Point) shapeFilter));\n    }\n    Collection<Node> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n    List<Node> copy = new ArrayList<Node>(cells.size());//copy since cells contractually isn't modifiable\n    for (Node cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      copy.add(cell);\n    }\n    cells = copy;\n    return cells;\n  }\n\n","sourceOld":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If that shape is a {@link com.spatial4j.core.shape.Point} then it\n   * must call {@link #getSubCell(com.spatial4j.core.shape.Point)};\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Node> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      return Collections.singleton(getSubCell((Point) shapeFilter));\n    }\n    Collection<Node> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n    List<Node> copy = new ArrayList<Node>(cells.size());//copy since cells contractually isn't modifiable\n    for (Node cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter, spatialPrefixTree.ctx);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      copy.add(cell);\n    }\n    cells = copy;\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec1f7d2f42d19b4ca07d5685b650ef589be4763f","date":1354814273,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Node#getSubCells(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Node#getSubCells(Shape).mjava","sourceNew":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If\n   * that shape is a {@link com.spatial4j.core.shape.Point} then it\n   * must call {@link #getSubCell(com.spatial4j.core.shape.Point)}.\n   * The returned cells should have their {@link Node#shapeRel} set to their\n   * relation with {@code shapeFilter} for non-point. As such,\n   * {@link org.apache.lucene.spatial.prefix.tree.Node#isLeaf()} should be\n   * accurate.\n   * <p/>\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Node> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      return Collections.singleton(getSubCell((Point) shapeFilter));\n    }\n    Collection<Node> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n    List<Node> copy = new ArrayList<Node>(cells.size());//copy since cells contractually isn't modifiable\n    for (Node cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      copy.add(cell);\n    }\n    cells = copy;\n    return cells;\n  }\n\n","sourceOld":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If that shape is a {@link com.spatial4j.core.shape.Point} then it\n   * must call {@link #getSubCell(com.spatial4j.core.shape.Point)};\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Node> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      return Collections.singleton(getSubCell((Point) shapeFilter));\n    }\n    Collection<Node> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n    List<Node> copy = new ArrayList<Node>(cells.size());//copy since cells contractually isn't modifiable\n    for (Node cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      copy.add(cell);\n    }\n    cells = copy;\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Node#getSubCells(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Node#getSubCells(Shape).mjava","sourceNew":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If\n   * that shape is a {@link com.spatial4j.core.shape.Point} then it\n   * must call {@link #getSubCell(com.spatial4j.core.shape.Point)}.\n   * The returned cells should have their {@link Node#shapeRel} set to their\n   * relation with {@code shapeFilter} for non-point. As such,\n   * {@link org.apache.lucene.spatial.prefix.tree.Node#isLeaf()} should be\n   * accurate.\n   * <p/>\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Node> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      return Collections.singleton(getSubCell((Point) shapeFilter));\n    }\n    Collection<Node> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n    List<Node> copy = new ArrayList<Node>(cells.size());//copy since cells contractually isn't modifiable\n    for (Node cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      copy.add(cell);\n    }\n    cells = copy;\n    return cells;\n  }\n\n","sourceOld":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If that shape is a {@link com.spatial4j.core.shape.Point} then it\n   * must call {@link #getSubCell(com.spatial4j.core.shape.Point)};\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Node> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      return Collections.singleton(getSubCell((Point) shapeFilter));\n    }\n    Collection<Node> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n    List<Node> copy = new ArrayList<Node>(cells.size());//copy since cells contractually isn't modifiable\n    for (Node cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      copy.add(cell);\n    }\n    cells = copy;\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c659c37800c0dfd82fa025b5834f4ab065903d11","date":1361851047,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Node#getSubCells(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Node#getSubCells(Shape).mjava","sourceNew":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If\n   * that shape is a {@link com.spatial4j.core.shape.Point} then it must call\n   * {@link #getSubCell(com.spatial4j.core.shape.Point)}. The returned cells\n   * should have {@link Node#getShapeRel()} set to their relation with {@code\n   * shapeFilter}. In addition, {@link org.apache.lucene.spatial.prefix.tree.Node#isLeaf()}\n   * must be true when that relation is WITHIN.\n   * <p/>\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Node> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      Node subCell = getSubCell((Point) shapeFilter);\n      subCell.shapeRel = SpatialRelation.CONTAINS;\n      return Collections.singletonList(subCell);\n    }\n    Collection<Node> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n\n    //TODO change API to return a filtering iterator\n    List<Node> copy = new ArrayList<Node>(cells.size());\n    for (Node cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      if (rel == SpatialRelation.WITHIN)\n        cell.setLeaf();\n      copy.add(cell);\n    }\n    return copy;\n  }\n\n","sourceOld":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If\n   * that shape is a {@link com.spatial4j.core.shape.Point} then it\n   * must call {@link #getSubCell(com.spatial4j.core.shape.Point)}.\n   * The returned cells should have their {@link Node#shapeRel} set to their\n   * relation with {@code shapeFilter} for non-point. As such,\n   * {@link org.apache.lucene.spatial.prefix.tree.Node#isLeaf()} should be\n   * accurate.\n   * <p/>\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Node> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      return Collections.singleton(getSubCell((Point) shapeFilter));\n    }\n    Collection<Node> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n    List<Node> copy = new ArrayList<Node>(cells.size());//copy since cells contractually isn't modifiable\n    for (Node cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      copy.add(cell);\n    }\n    cells = copy;\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8259c159da2de2e8528524fb76b244b46cbded59","date":1364478249,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Cell#getSubCells(Shape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/Node#getSubCells(Shape).mjava","sourceNew":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If\n   * that shape is a {@link com.spatial4j.core.shape.Point} then it must call\n   * {@link #getSubCell(com.spatial4j.core.shape.Point)}. The returned cells\n   * should have {@link Cell#getShapeRel()} set to their relation with {@code\n   * shapeFilter}. In addition, {@link Cell#isLeaf()}\n   * must be true when that relation is WITHIN.\n   * <p/>\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Cell> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      Cell subCell = getSubCell((Point) shapeFilter);\n      subCell.shapeRel = SpatialRelation.CONTAINS;\n      return Collections.singletonList(subCell);\n    }\n    Collection<Cell> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n\n    //TODO change API to return a filtering iterator\n    List<Cell> copy = new ArrayList<Cell>(cells.size());\n    for (Cell cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      if (rel == SpatialRelation.WITHIN)\n        cell.setLeaf();\n      copy.add(cell);\n    }\n    return copy;\n  }\n\n","sourceOld":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If\n   * that shape is a {@link com.spatial4j.core.shape.Point} then it must call\n   * {@link #getSubCell(com.spatial4j.core.shape.Point)}. The returned cells\n   * should have {@link Node#getShapeRel()} set to their relation with {@code\n   * shapeFilter}. In addition, {@link org.apache.lucene.spatial.prefix.tree.Node#isLeaf()}\n   * must be true when that relation is WITHIN.\n   * <p/>\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Node> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      Node subCell = getSubCell((Point) shapeFilter);\n      subCell.shapeRel = SpatialRelation.CONTAINS;\n      return Collections.singletonList(subCell);\n    }\n    Collection<Node> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n\n    //TODO change API to return a filtering iterator\n    List<Node> copy = new ArrayList<Node>(cells.size());\n    for (Node cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      if (rel == SpatialRelation.WITHIN)\n        cell.setLeaf();\n      copy.add(cell);\n    }\n    return copy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"da956410d7a790f567af4e7e94584fb0930212f2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["da956410d7a790f567af4e7e94584fb0930212f2","ec1f7d2f42d19b4ca07d5685b650ef589be4763f"],"ec1f7d2f42d19b4ca07d5685b650ef589be4763f":["da956410d7a790f567af4e7e94584fb0930212f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8259c159da2de2e8528524fb76b244b46cbded59"],"8259c159da2de2e8528524fb76b244b46cbded59":["c659c37800c0dfd82fa025b5834f4ab065903d11"],"c659c37800c0dfd82fa025b5834f4ab065903d11":["ec1f7d2f42d19b4ca07d5685b650ef589be4763f"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["da956410d7a790f567af4e7e94584fb0930212f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"da956410d7a790f567af4e7e94584fb0930212f2":["407687e67faf6e1f02a211ca078d8e3eed631027","ec1f7d2f42d19b4ca07d5685b650ef589be4763f"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"ec1f7d2f42d19b4ca07d5685b650ef589be4763f":["407687e67faf6e1f02a211ca078d8e3eed631027","c659c37800c0dfd82fa025b5834f4ab065903d11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8259c159da2de2e8528524fb76b244b46cbded59":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c659c37800c0dfd82fa025b5834f4ab065903d11":["8259c159da2de2e8528524fb76b244b46cbded59"]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}