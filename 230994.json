{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestManager#exportShardData(DataOutput).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestManager#exportShardData(DataOutput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Export the shard data for this request through a bit-stream,\n   * to be imported by the {@link #importShardData} method in the originating shard.\n   * <p>\n   * First the overall data is exported, then the grouping data is exported.\n   * \n   * @param output The bit-stream to output the shard data through\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportShardData(DataOutput output) throws IOException {\n    ungroupedReductionManager.setShardOutput(output);\n    \n    ungroupedReductionManager.prepareReductionDataIO(ungroupedData);\n    ungroupedReductionManager.exportData();\n    \n    output.writeInt(groupingManagers.size());\n    for (String groupingName : groupingManagers.keySet()) {\n      output.writeUTF(groupingName);\n      groupingManagers.get(groupingName).exportShardData(output);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestManager#exportShardData(DataOutput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Export the shard data for this request through a bit-stream,\n   * to be imported by the {@link #importShardData} method in the originating shard.\n   * <p>\n   * First the overall data is exported, then the grouping data is exported.\n   * \n   * @param output The bit-stream to output the shard data through\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportShardData(DataOutput output) throws IOException {\n    ungroupedReductionManager.setShardOutput(output);\n    \n    ungroupedReductionManager.prepareReductionDataIO(ungroupedData);\n    ungroupedReductionManager.exportData();\n    \n    output.writeInt(groupingManagers.size());\n    for (String groupingName : groupingManagers.keySet()) {\n      output.writeUTF(groupingName);\n      groupingManagers.get(groupingName).exportShardData(output);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestManager#exportShardData(DataOutput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Export the shard data for this request through a bit-stream,\n   * to be imported by the {@link #importShardData} method in the originating shard.\n   * <p>\n   * First the overall data is exported, then the grouping data is exported.\n   * \n   * @param output The bit-stream to output the shard data through\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportShardData(DataOutput output) throws IOException {\n    ungroupedReductionManager.setShardOutput(output);\n    \n    ungroupedReductionManager.prepareReductionDataIO(ungroupedData);\n    ungroupedReductionManager.exportData();\n    \n    output.writeInt(groupingManagers.size());\n    for (String groupingName : groupingManagers.keySet()) {\n      output.writeUTF(groupingName);\n      groupingManagers.get(groupingName).exportShardData(output);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestManager#exportShardData(DataOutput).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestManager#exportShardData(DataOutput).mjava","sourceNew":"  /**\n   * Export the shard data for this request through a bit-stream,\n   * to be imported by the {@link #importShardData} method in the originating shard.\n   * <p>\n   * First the overall data is exported, then the grouping data is exported.\n   *\n   * @param output The bit-stream to output the shard data through\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportShardData(DataOutput output) throws IOException {\n    ungroupedReductionManager.setShardOutput(output);\n\n    ungroupedReductionManager.prepareReductionDataIO(ungroupedData);\n    ungroupedReductionManager.exportData();\n\n    output.writeInt(groupingManagers.size());\n    for (String groupingName : groupingManagers.keySet()) {\n      output.writeUTF(groupingName);\n      groupingManagers.get(groupingName).exportShardData(output);\n    }\n  }\n\n","sourceOld":"  /**\n   * Export the shard data for this request through a bit-stream,\n   * to be imported by the {@link #importShardData} method in the originating shard.\n   * <p>\n   * First the overall data is exported, then the grouping data is exported.\n   * \n   * @param output The bit-stream to output the shard data through\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportShardData(DataOutput output) throws IOException {\n    ungroupedReductionManager.setShardOutput(output);\n    \n    ungroupedReductionManager.prepareReductionDataIO(ungroupedData);\n    ungroupedReductionManager.exportData();\n    \n    output.writeInt(groupingManagers.size());\n    for (String groupingName : groupingManagers.keySet()) {\n      output.writeUTF(groupingName);\n      groupingManagers.get(groupingName).exportShardData(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestManager#exportShardData(DataOutput).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestManager#exportShardData(DataOutput).mjava","sourceNew":"  /**\n   * Export the shard data for this request through a bit-stream,\n   * to be imported by the {@link #importShardData} method in the originating shard.\n   * <p>\n   * First the overall data is exported, then the grouping data is exported.\n   *\n   * @param output The bit-stream to output the shard data through\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportShardData(DataOutput output) throws IOException {\n    ungroupedReductionManager.setShardOutput(output);\n\n    ungroupedReductionManager.prepareReductionDataIO(ungroupedData);\n    ungroupedReductionManager.exportData();\n\n    output.writeInt(groupingManagers.size());\n    for (String groupingName : groupingManagers.keySet()) {\n      output.writeUTF(groupingName);\n      groupingManagers.get(groupingName).exportShardData(output);\n    }\n  }\n\n","sourceOld":"  /**\n   * Export the shard data for this request through a bit-stream,\n   * to be imported by the {@link #importShardData} method in the originating shard.\n   * <p>\n   * First the overall data is exported, then the grouping data is exported.\n   * \n   * @param output The bit-stream to output the shard data through\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportShardData(DataOutput output) throws IOException {\n    ungroupedReductionManager.setShardOutput(output);\n    \n    ungroupedReductionManager.prepareReductionDataIO(ungroupedData);\n    ungroupedReductionManager.exportData();\n    \n    output.writeInt(groupingManagers.size());\n    for (String groupingName : groupingManagers.keySet()) {\n      output.writeUTF(groupingName);\n      groupingManagers.get(groupingName).exportShardData(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestManager#exportShardData(DataOutput).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestManager#exportShardData(DataOutput).mjava","sourceNew":"  /**\n   * Export the shard data for this request through a bit-stream,\n   * to be imported by the {@link #importShardData} method in the originating shard.\n   * <p>\n   * First the overall data is exported, then the grouping data is exported.\n   *\n   * @param output The bit-stream to output the shard data through\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportShardData(DataOutput output) throws IOException {\n    ungroupedReductionManager.setShardOutput(output);\n\n    ungroupedReductionManager.prepareReductionDataIO(ungroupedData);\n    ungroupedReductionManager.exportData();\n\n    output.writeInt(groupingManagers.size());\n    for (Map.Entry<String, AnalyticsGroupingManager> entry : groupingManagers.entrySet()) {\n      output.writeUTF(entry.getKey());\n      entry.getValue().exportShardData(output);\n    }\n  }\n\n","sourceOld":"  /**\n   * Export the shard data for this request through a bit-stream,\n   * to be imported by the {@link #importShardData} method in the originating shard.\n   * <p>\n   * First the overall data is exported, then the grouping data is exported.\n   *\n   * @param output The bit-stream to output the shard data through\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportShardData(DataOutput output) throws IOException {\n    ungroupedReductionManager.setShardOutput(output);\n\n    ungroupedReductionManager.prepareReductionDataIO(ungroupedData);\n    ungroupedReductionManager.exportData();\n\n    output.writeInt(groupingManagers.size());\n    for (String groupingName : groupingManagers.keySet()) {\n      output.writeUTF(groupingName);\n      groupingManagers.get(groupingName).exportShardData(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestManager#exportShardData(DataOutput).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestManager#exportShardData(DataOutput).mjava","sourceNew":"  /**\n   * Export the shard data for this request through a bit-stream,\n   * to be imported by the {@link #importShardData} method in the originating shard.\n   * <p>\n   * First the overall data is exported, then the grouping data is exported.\n   *\n   * @param output The bit-stream to output the shard data through\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportShardData(DataOutput output) throws IOException {\n    ungroupedReductionManager.setShardOutput(output);\n\n    ungroupedReductionManager.prepareReductionDataIO(ungroupedData);\n    ungroupedReductionManager.exportData();\n\n    output.writeInt(groupingManagers.size());\n    for (Map.Entry<String, AnalyticsGroupingManager> entry : groupingManagers.entrySet()) {\n      output.writeUTF(entry.getKey());\n      entry.getValue().exportShardData(output);\n    }\n  }\n\n","sourceOld":"  /**\n   * Export the shard data for this request through a bit-stream,\n   * to be imported by the {@link #importShardData} method in the originating shard.\n   * <p>\n   * First the overall data is exported, then the grouping data is exported.\n   *\n   * @param output The bit-stream to output the shard data through\n   * @throws IOException if an exception occurs while writing to the {@link DataOutput}\n   */\n  public void exportShardData(DataOutput output) throws IOException {\n    ungroupedReductionManager.setShardOutput(output);\n\n    ungroupedReductionManager.prepareReductionDataIO(ungroupedData);\n    ungroupedReductionManager.exportData();\n\n    output.writeInt(groupingManagers.size());\n    for (String groupingName : groupingManagers.keySet()) {\n      output.writeUTF(groupingName);\n      groupingManagers.get(groupingName).exportShardData(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["28288370235ed02234a64753cdbf0c6ec096304a"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["28288370235ed02234a64753cdbf0c6ec096304a","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"b0b597c65628ca9e73913a07e81691f8229bae35":["1e4e64b7199d2f2a17be7f3926c7532553910dce","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","f8061ddd97f3352007d927dae445884a6f3d857b","b0b597c65628ca9e73913a07e81691f8229bae35"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["1e4e64b7199d2f2a17be7f3926c7532553910dce","30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}