{"path":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#doNext(int).mjava","commits":[{"id":"3d4e5ccb1c589a2962235f13b65cc725050818d9","date":1404995758,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#doNext(int).mjava","pathOld":"/dev/null","sourceNew":"  private int doNext(int doc) throws IOException {\n    for(;;) {\n      // TODO: don't dup this logic from conjunctionscorer :)\n      advanceHead: for(;;) {\n        for (int i = 1; i < chunkStates.length; i++) {\n          final DocsAndPositionsEnum de = chunkStates[i].posEnum;\n          if (de.docID() < doc) {\n            int d = de.advance(doc);\n\n            if (d > doc) {\n              // DocsEnum beyond the current doc - break and advance lead to the new highest doc.\n              doc = d;\n              break advanceHead;\n            }\n          }\n        }\n        // all DocsEnums are on the same doc\n        if (doc == NO_MORE_DOCS) {\n          return doc;\n        } else if (phraseFreq() > 0) {\n          return doc;            // success: matches phrase\n        } else {\n          doc = lead.nextDoc();  // doesn't match phrase\n        }\n      }\n      // advance head for next iteration\n      doc = lead.advance(doc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#doNext(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#doNext(int).mjava","sourceNew":"  private int doNext(int doc) throws IOException {\n    for(;;) {\n      // TODO: don't dup this logic from conjunctionscorer :)\n      advanceHead: for(;;) {\n        for (int i = 1; i < chunkStates.length; i++) {\n          final PostingsEnum de = chunkStates[i].posEnum;\n          if (de.docID() < doc) {\n            int d = de.advance(doc);\n\n            if (d > doc) {\n              // DocsEnum beyond the current doc - break and advance lead to the new highest doc.\n              doc = d;\n              break advanceHead;\n            }\n          }\n        }\n        // all DocsEnums are on the same doc\n        if (doc == NO_MORE_DOCS) {\n          return doc;\n        } else if (phraseFreq() > 0) {\n          return doc;            // success: matches phrase\n        } else {\n          doc = lead.nextDoc();  // doesn't match phrase\n        }\n      }\n      // advance head for next iteration\n      doc = lead.advance(doc);\n    }\n  }\n\n","sourceOld":"  private int doNext(int doc) throws IOException {\n    for(;;) {\n      // TODO: don't dup this logic from conjunctionscorer :)\n      advanceHead: for(;;) {\n        for (int i = 1; i < chunkStates.length; i++) {\n          final DocsAndPositionsEnum de = chunkStates[i].posEnum;\n          if (de.docID() < doc) {\n            int d = de.advance(doc);\n\n            if (d > doc) {\n              // DocsEnum beyond the current doc - break and advance lead to the new highest doc.\n              doc = d;\n              break advanceHead;\n            }\n          }\n        }\n        // all DocsEnums are on the same doc\n        if (doc == NO_MORE_DOCS) {\n          return doc;\n        } else if (phraseFreq() > 0) {\n          return doc;            // success: matches phrase\n        } else {\n          doc = lead.nextDoc();  // doesn't match phrase\n        }\n      }\n      // advance head for next iteration\n      doc = lead.advance(doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","date":1423845906,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#doNext(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#doNext(int).mjava","sourceNew":"  private int doNext(int doc) throws IOException {\n    for (;; doc = conjunction.nextDoc()) {\n      if (doc == NO_MORE_DOCS || phraseFreq() > 0) {\n        return doc;\n      }\n    }\n  }\n\n","sourceOld":"  private int doNext(int doc) throws IOException {\n    for(;;) {\n      // TODO: don't dup this logic from conjunctionscorer :)\n      advanceHead: for(;;) {\n        for (int i = 1; i < chunkStates.length; i++) {\n          final PostingsEnum de = chunkStates[i].posEnum;\n          if (de.docID() < doc) {\n            int d = de.advance(doc);\n\n            if (d > doc) {\n              // DocsEnum beyond the current doc - break and advance lead to the new highest doc.\n              doc = d;\n              break advanceHead;\n            }\n          }\n        }\n        // all DocsEnums are on the same doc\n        if (doc == NO_MORE_DOCS) {\n          return doc;\n        } else if (phraseFreq() > 0) {\n          return doc;            // success: matches phrase\n        } else {\n          doc = lead.nextDoc();  // doesn't match phrase\n        }\n      }\n      // advance head for next iteration\n      doc = lead.advance(doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/ExactPhraseScorer#doNext(int).mjava","sourceNew":null,"sourceOld":"  private int doNext(int doc) throws IOException {\n    for (;; doc = conjunction.nextDoc()) {\n      if (doc == NO_MORE_DOCS || phraseFreq() > 0) {\n        return doc;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3d4e5ccb1c589a2962235f13b65cc725050818d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"51f5280f31484820499077f41fcdfe92d527d9dc":["3d4e5ccb1c589a2962235f13b65cc725050818d9"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["51f5280f31484820499077f41fcdfe92d527d9dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"3d4e5ccb1c589a2962235f13b65cc725050818d9":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3d4e5ccb1c589a2962235f13b65cc725050818d9"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51f5280f31484820499077f41fcdfe92d527d9dc":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}