{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getSecurityProps(boolean).mjava","commits":[{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getSecurityProps(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getSecurityProps().mjava","sourceNew":"  /**\n   * Returns the content of /security.json from ZooKeeper as a Map\n   * If the files doesn't exist, it returns null.\n   */\n  public ConfigData getSecurityProps(boolean getFresh) {\n    if (!getFresh) {\n      if (securityData == null) return new ConfigData(EMPTY_MAP,-1);\n      return new ConfigData(securityData.data, securityData.version);\n    }\n    try {\n      Stat stat = new Stat();\n      if(getZkClient().exists(SOLR_SECURITY_CONF_PATH, true)) {\n        byte[] data = getZkClient()\n            .getData(ZkStateReader.SOLR_SECURITY_CONF_PATH, null, stat, true);\n        return data != null && data.length > 0 ?\n            new ConfigData((Map<String, Object>) Utils.fromJSON(data), stat.getVersion()) :\n            null;\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading security properties\",e) ;\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the content of /security.json from ZooKeeper as a Map\n   * If the files doesn't exist, it returns null.\n   */\n  public Map getSecurityProps() {\n    try {\n      if(getZkClient().exists(SOLR_SECURITY_CONF_PATH, true)) {\n        return (Map) Utils.fromJSON(getZkClient()\n            .getData(ZkStateReader.SOLR_SECURITY_CONF_PATH, null, new Stat(), true)) ;\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading security properties\",e) ;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7477015ee104ad8144fba06b9b0a8ea93aea50f8","date":1450790907,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getSecurityProps(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getSecurityProps(boolean).mjava","sourceNew":"  /**\n   * Returns the content of /security.json from ZooKeeper as a Map\n   * If the files doesn't exist, it returns null.\n   */\n  public ConfigData getSecurityProps(boolean getFresh) {\n    if (!getFresh) {\n      if (securityData == null) return new ConfigData(EMPTY_MAP,-1);\n      return new ConfigData(securityData.data, securityData.version);\n    }\n    try {\n      Stat stat = new Stat();\n      if(getZkClient().exists(SOLR_SECURITY_CONF_PATH, true)) {\n        final byte[] data = getZkClient().getData(ZkStateReader.SOLR_SECURITY_CONF_PATH, null, stat, true);\n        return data != null && data.length > 0 ?\n            new ConfigData((Map<String, Object>) Utils.fromJSON(data), stat.getVersion()) :\n            null;\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading security properties\",e) ;\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the content of /security.json from ZooKeeper as a Map\n   * If the files doesn't exist, it returns null.\n   */\n  public ConfigData getSecurityProps(boolean getFresh) {\n    if (!getFresh) {\n      if (securityData == null) return new ConfigData(EMPTY_MAP,-1);\n      return new ConfigData(securityData.data, securityData.version);\n    }\n    try {\n      Stat stat = new Stat();\n      if(getZkClient().exists(SOLR_SECURITY_CONF_PATH, true)) {\n        byte[] data = getZkClient()\n            .getData(ZkStateReader.SOLR_SECURITY_CONF_PATH, null, stat, true);\n        return data != null && data.length > 0 ?\n            new ConfigData((Map<String, Object>) Utils.fromJSON(data), stat.getVersion()) :\n            null;\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading security properties\",e) ;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f6502a4045d17684af5347826b9c6cf24b8beac","date":1457102520,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getSecurityProps(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getSecurityProps(boolean).mjava","sourceNew":"  /**\n   * Returns the content of /security.json from ZooKeeper as a Map\n   * If the files doesn't exist, it returns null.\n   */\n  public ConfigData getSecurityProps(boolean getFresh) {\n    if (!getFresh) {\n      if (securityData == null) return new ConfigData(EMPTY_MAP,-1);\n      return new ConfigData(securityData.data, securityData.version);\n    }\n    try {\n      Stat stat = new Stat();\n      if(getZkClient().exists(SOLR_SECURITY_CONF_PATH, true)) {\n        final byte[] data = getZkClient().getData(ZkStateReader.SOLR_SECURITY_CONF_PATH, null, stat, true);\n        return data != null && data.length > 0 ?\n            new ConfigData((Map<String, Object>) Utils.fromJSON(data), stat.getVersion()) :\n            null;\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading security properties\", e) ;\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading security properties\", e) ;\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the content of /security.json from ZooKeeper as a Map\n   * If the files doesn't exist, it returns null.\n   */\n  public ConfigData getSecurityProps(boolean getFresh) {\n    if (!getFresh) {\n      if (securityData == null) return new ConfigData(EMPTY_MAP,-1);\n      return new ConfigData(securityData.data, securityData.version);\n    }\n    try {\n      Stat stat = new Stat();\n      if(getZkClient().exists(SOLR_SECURITY_CONF_PATH, true)) {\n        final byte[] data = getZkClient().getData(ZkStateReader.SOLR_SECURITY_CONF_PATH, null, stat, true);\n        return data != null && data.length > 0 ?\n            new ConfigData((Map<String, Object>) Utils.fromJSON(data), stat.getVersion()) :\n            null;\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading security properties\",e) ;\n    }\n    return null;\n  }\n\n","bugFix":["6bdcb86c29922edae9a14852e636303bc52df094"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getSecurityProps(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getSecurityProps(boolean).mjava","sourceNew":"  /**\n   * Returns the content of /security.json from ZooKeeper as a Map\n   * If the files doesn't exist, it returns null.\n   */\n  public ConfigData getSecurityProps(boolean getFresh) {\n    if (!getFresh) {\n      if (securityData == null) return new ConfigData(EMPTY_MAP,-1);\n      return new ConfigData(securityData.data, securityData.version);\n    }\n    try {\n      Stat stat = new Stat();\n      if(getZkClient().exists(SOLR_SECURITY_CONF_PATH, true)) {\n        final byte[] data = getZkClient().getData(ZkStateReader.SOLR_SECURITY_CONF_PATH, null, stat, true);\n        return data != null && data.length > 0 ?\n            new ConfigData((Map<String, Object>) Utils.fromJSON(data), stat.getVersion()) :\n            null;\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading security properties\", e) ;\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading security properties\", e) ;\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the content of /security.json from ZooKeeper as a Map\n   * If the files doesn't exist, it returns null.\n   */\n  public ConfigData getSecurityProps(boolean getFresh) {\n    if (!getFresh) {\n      if (securityData == null) return new ConfigData(EMPTY_MAP,-1);\n      return new ConfigData(securityData.data, securityData.version);\n    }\n    try {\n      Stat stat = new Stat();\n      if(getZkClient().exists(SOLR_SECURITY_CONF_PATH, true)) {\n        final byte[] data = getZkClient().getData(ZkStateReader.SOLR_SECURITY_CONF_PATH, null, stat, true);\n        return data != null && data.length > 0 ?\n            new ConfigData((Map<String, Object>) Utils.fromJSON(data), stat.getVersion()) :\n            null;\n      }\n    } catch (KeeperException | InterruptedException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading security properties\",e) ;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getSecurityProps(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getSecurityProps(boolean).mjava","sourceNew":"  /**\n   * Returns the content of /security.json from ZooKeeper as a Map\n   * If the files doesn't exist, it returns null.\n   */\n  public ConfigData getSecurityProps(boolean getFresh) {\n    if (!getFresh) {\n      if (securityData == null) return new ConfigData(EMPTY_MAP, -1);\n      return new ConfigData(securityData.data, securityData.version);\n    }\n    try {\n      Stat stat = new Stat();\n      if (getZkClient().exists(SOLR_SECURITY_CONF_PATH, true)) {\n        final byte[] data = getZkClient().getData(ZkStateReader.SOLR_SECURITY_CONF_PATH, null, stat, true);\n        return data != null && data.length > 0 ?\n            new ConfigData((Map<String, Object>) Utils.fromJSON(data), stat.getVersion()) :\n            null;\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading security properties\", e);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading security properties\", e);\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the content of /security.json from ZooKeeper as a Map\n   * If the files doesn't exist, it returns null.\n   */\n  public ConfigData getSecurityProps(boolean getFresh) {\n    if (!getFresh) {\n      if (securityData == null) return new ConfigData(EMPTY_MAP,-1);\n      return new ConfigData(securityData.data, securityData.version);\n    }\n    try {\n      Stat stat = new Stat();\n      if(getZkClient().exists(SOLR_SECURITY_CONF_PATH, true)) {\n        final byte[] data = getZkClient().getData(ZkStateReader.SOLR_SECURITY_CONF_PATH, null, stat, true);\n        return data != null && data.length > 0 ?\n            new ConfigData((Map<String, Object>) Utils.fromJSON(data), stat.getVersion()) :\n            null;\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading security properties\", e) ;\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading security properties\", e) ;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getSecurityProps(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#getSecurityProps(boolean).mjava","sourceNew":"  /**\n   * Returns the content of /security.json from ZooKeeper as a Map\n   * If the files doesn't exist, it returns null.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public ConfigData getSecurityProps(boolean getFresh) {\n    if (!getFresh) {\n      if (securityData == null) return new ConfigData(EMPTY_MAP, -1);\n      return new ConfigData(securityData.data, securityData.version);\n    }\n    try {\n      Stat stat = new Stat();\n      if (getZkClient().exists(SOLR_SECURITY_CONF_PATH, true)) {\n        final byte[] data = getZkClient().getData(ZkStateReader.SOLR_SECURITY_CONF_PATH, null, stat, true);\n        return data != null && data.length > 0 ?\n            new ConfigData((Map<String, Object>) Utils.fromJSON(data), stat.getVersion()) :\n            null;\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading security properties\", e);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading security properties\", e);\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the content of /security.json from ZooKeeper as a Map\n   * If the files doesn't exist, it returns null.\n   */\n  public ConfigData getSecurityProps(boolean getFresh) {\n    if (!getFresh) {\n      if (securityData == null) return new ConfigData(EMPTY_MAP, -1);\n      return new ConfigData(securityData.data, securityData.version);\n    }\n    try {\n      Stat stat = new Stat();\n      if (getZkClient().exists(SOLR_SECURITY_CONF_PATH, true)) {\n        final byte[] data = getZkClient().getData(ZkStateReader.SOLR_SECURITY_CONF_PATH, null, stat, true);\n        return data != null && data.length > 0 ?\n            new ConfigData((Map<String, Object>) Utils.fromJSON(data), stat.getVersion()) :\n            null;\n      }\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading security properties\", e);\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading security properties\", e);\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bdcb86c29922edae9a14852e636303bc52df094":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"922ddd897402a6df25c766ea8300443be5e82b3d":["7477015ee104ad8144fba06b9b0a8ea93aea50f8","5f6502a4045d17684af5347826b9c6cf24b8beac"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["922ddd897402a6df25c766ea8300443be5e82b3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6502a4045d17684af5347826b9c6cf24b8beac":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["6bdcb86c29922edae9a14852e636303bc52df094"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"]},"commit2Childs":{"6bdcb86c29922edae9a14852e636303bc52df094":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"922ddd897402a6df25c766ea8300443be5e82b3d":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bdcb86c29922edae9a14852e636303bc52df094"],"5f6502a4045d17684af5347826b9c6cf24b8beac":["922ddd897402a6df25c766ea8300443be5e82b3d"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["922ddd897402a6df25c766ea8300443be5e82b3d","5f6502a4045d17684af5347826b9c6cf24b8beac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}