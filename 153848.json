{"path":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","commits":[{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[LeafReader],SegmentInfo,InfoStream).mjava","sourceNew":"  /** Sole constructor. */\n  MergeState(List<CodecReader> readers, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n\n    setDocMaps(readers);\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  MergeState(List<LeafReader> readers, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final LeafReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      NormsProducer normsProducer;\n      DocValuesProducer docValuesProducer;\n      StoredFieldsReader storedFieldsReader;\n      TermVectorsReader termVectorsReader;\n      FieldsProducer fieldsProducer;\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        normsProducer = segmentReader.getNormsReader();\n        if (normsProducer != null) {\n          normsProducer = normsProducer.getMergeInstance();\n        }\n        docValuesProducer = segmentReader.getDocValuesReader();\n        if (docValuesProducer != null) {\n          docValuesProducer = docValuesProducer.getMergeInstance();\n        }\n        storedFieldsReader = segmentReader.getFieldsReader();\n        if (storedFieldsReader != null) {\n          storedFieldsReader = storedFieldsReader.getMergeInstance();\n        }\n        termVectorsReader = segmentReader.getTermVectorsReader();\n        if (termVectorsReader != null) {\n          termVectorsReader = termVectorsReader.getMergeInstance();\n        }\n        fieldsProducer = segmentReader.fields().getMergeInstance();\n      } else {\n        // A \"foreign\" reader\n        normsProducer = readerToNormsProducer(reader);\n        docValuesProducer = readerToDocValuesProducer(reader);\n        storedFieldsReader = readerToStoredFieldsReader(reader);\n        termVectorsReader = readerToTermVectorsReader(reader);\n        fieldsProducer = readerToFieldsProducer(reader);\n      }\n\n      normsProducers[i] = normsProducer;\n      docValuesProducers[i] = docValuesProducer;\n      storedFieldsReaders[i] = storedFieldsReader;\n      termVectorsReaders[i] = termVectorsReader;\n      fieldsProducers[i] = fieldsProducer;\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n\n    setDocMaps(readers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","sourceNew":"  /** Sole constructor. */\n  MergeState(List<CodecReader> readers, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    dimensionalReaders = new DimensionalReader[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n      dimensionalReaders[i] = reader.getDimensionalReader();\n      if (dimensionalReaders[i] != null) {\n        dimensionalReaders[i] = dimensionalReaders[i].getMergeInstance();\n      }\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n\n    setDocMaps(readers);\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  MergeState(List<CodecReader> readers, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n\n    setDocMaps(readers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","sourceNew":"  /** Sole constructor. */\n  MergeState(List<CodecReader> readers, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    pointReaders = new PointReader[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n      pointReaders[i] = reader.getPointReader();\n      if (pointReaders[i] != null) {\n        pointReaders[i] = pointReaders[i].getMergeInstance();\n      }\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n\n    setDocMaps(readers);\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  MergeState(List<CodecReader> readers, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    dimensionalReaders = new DimensionalReader[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n      dimensionalReaders[i] = reader.getDimensionalReader();\n      if (dimensionalReaders[i] != null) {\n        dimensionalReaders[i] = dimensionalReaders[i].getMergeInstance();\n      }\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n\n    setDocMaps(readers);\n  }\n\n","bugFix":null,"bugIntro":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","sourceNew":"  /** Sole constructor. */\n  MergeState(List<CodecReader> readers, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    pointsReaders = new PointsReader[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n      pointsReaders[i] = reader.getPointsReader();\n      if (pointsReaders[i] != null) {\n        pointsReaders[i] = pointsReaders[i].getMergeInstance();\n      }\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n\n    setDocMaps(readers);\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  MergeState(List<CodecReader> readers, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    pointReaders = new PointReader[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n      pointReaders[i] = reader.getPointReader();\n      if (pointReaders[i] != null) {\n        pointReaders[i] = pointReaders[i].getMergeInstance();\n      }\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n\n    setDocMaps(readers);\n  }\n\n","bugFix":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","sourceNew":"  /** Sole constructor. */\n  MergeState(List<CodecReader> originalReaders, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    final Sort indexSort = segmentInfo.getIndexSort();\n    int numReaders = originalReaders.size();\n    leafDocMaps = new DocMap[numReaders];\n    List<CodecReader> readers = maybeSortReaders(originalReaders, segmentInfo);\n\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    pointsReaders = new PointsReader[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    int numDocs = 0;\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n      pointsReaders[i] = reader.getPointsReader();\n      if (pointsReaders[i] != null) {\n        pointsReaders[i] = pointsReaders[i].getMergeInstance();\n      }\n      numDocs += reader.numDocs();\n    }\n\n    segmentInfo.setMaxDoc(numDocs);\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n    this.docMaps = buildDocMaps(readers, indexSort);\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  MergeState(List<CodecReader> readers, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    pointsReaders = new PointsReader[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n      pointsReaders[i] = reader.getPointsReader();\n      if (pointsReaders[i] != null) {\n        pointsReaders[i] = pointsReaders[i].getMergeInstance();\n      }\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n\n    setDocMaps(readers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e03940e6e9044943de4b7ac08f8581da37a9534","date":1462870173,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","sourceNew":"  /** Sole constructor. */\n  MergeState(List<CodecReader> originalReaders, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    this.infoStream = infoStream;\n\n    final Sort indexSort = segmentInfo.getIndexSort();\n    int numReaders = originalReaders.size();\n    leafDocMaps = new DocMap[numReaders];\n    List<CodecReader> readers = maybeSortReaders(originalReaders, segmentInfo);\n\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    pointsReaders = new PointsReader[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    int numDocs = 0;\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n      pointsReaders[i] = reader.getPointsReader();\n      if (pointsReaders[i] != null) {\n        pointsReaders[i] = pointsReaders[i].getMergeInstance();\n      }\n      numDocs += reader.numDocs();\n    }\n\n    segmentInfo.setMaxDoc(numDocs);\n\n    this.segmentInfo = segmentInfo;\n    this.docMaps = buildDocMaps(readers, indexSort);\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  MergeState(List<CodecReader> originalReaders, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    final Sort indexSort = segmentInfo.getIndexSort();\n    int numReaders = originalReaders.size();\n    leafDocMaps = new DocMap[numReaders];\n    List<CodecReader> readers = maybeSortReaders(originalReaders, segmentInfo);\n\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    pointsReaders = new PointsReader[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    int numDocs = 0;\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n      pointsReaders[i] = reader.getPointsReader();\n      if (pointsReaders[i] != null) {\n        pointsReaders[i] = pointsReaders[i].getMergeInstance();\n      }\n      numDocs += reader.numDocs();\n    }\n\n    segmentInfo.setMaxDoc(numDocs);\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n    this.docMaps = buildDocMaps(readers, indexSort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","sourceNew":"  /** Sole constructor. */\n  MergeState(List<CodecReader> originalReaders, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    this.infoStream = infoStream;\n\n    final Sort indexSort = segmentInfo.getIndexSort();\n    int numReaders = originalReaders.size();\n    leafDocMaps = new DocMap[numReaders];\n    List<CodecReader> readers = maybeSortReaders(originalReaders, segmentInfo);\n\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    pointsReaders = new PointsReader[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    int numDocs = 0;\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n      pointsReaders[i] = reader.getPointsReader();\n      if (pointsReaders[i] != null) {\n        pointsReaders[i] = pointsReaders[i].getMergeInstance();\n      }\n      numDocs += reader.numDocs();\n    }\n\n    segmentInfo.setMaxDoc(numDocs);\n\n    this.segmentInfo = segmentInfo;\n    this.docMaps = buildDocMaps(readers, indexSort);\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  MergeState(List<CodecReader> readers, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    pointsReaders = new PointsReader[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n      pointsReaders[i] = reader.getPointsReader();\n      if (pointsReaders[i] != null) {\n        pointsReaders[i] = pointsReaders[i].getMergeInstance();\n      }\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n\n    setDocMaps(readers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","sourceNew":"  /** Sole constructor. */\n  MergeState(List<CodecReader> originalReaders, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    this.infoStream = infoStream;\n\n    final Sort indexSort = segmentInfo.getIndexSort();\n    int numReaders = originalReaders.size();\n    leafDocMaps = new DocMap[numReaders];\n    List<CodecReader> readers = maybeSortReaders(originalReaders, segmentInfo);\n\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    pointsReaders = new PointsReader[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    int numDocs = 0;\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n      pointsReaders[i] = reader.getPointsReader();\n      if (pointsReaders[i] != null) {\n        pointsReaders[i] = pointsReaders[i].getMergeInstance();\n      }\n      numDocs += reader.numDocs();\n    }\n\n    segmentInfo.setMaxDoc(numDocs);\n\n    this.segmentInfo = segmentInfo;\n    this.docMaps = buildDocMaps(readers, indexSort);\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  MergeState(List<CodecReader> readers, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    pointsReaders = new PointsReader[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n      pointsReaders[i] = reader.getPointsReader();\n      if (pointsReaders[i] != null) {\n        pointsReaders[i] = pointsReaders[i].getMergeInstance();\n      }\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n\n    setDocMaps(readers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","sourceNew":"  /** Sole constructor. */\n  MergeState(List<CodecReader> originalReaders, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    this.infoStream = infoStream;\n\n    final Sort indexSort = segmentInfo.getIndexSort();\n    int numReaders = originalReaders.size();\n    leafDocMaps = new DocMap[numReaders];\n    List<CodecReader> readers = maybeSortReaders(originalReaders, segmentInfo);\n\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    pointsReaders = new PointsReader[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    int numDocs = 0;\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n      pointsReaders[i] = reader.getPointsReader();\n      if (pointsReaders[i] != null) {\n        pointsReaders[i] = pointsReaders[i].getMergeInstance();\n      }\n      numDocs += reader.numDocs();\n    }\n\n    segmentInfo.setMaxDoc(numDocs);\n\n    this.segmentInfo = segmentInfo;\n    this.docMaps = buildDocMaps(readers, indexSort);\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  MergeState(List<CodecReader> readers, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    pointsReaders = new PointsReader[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n      pointsReaders[i] = reader.getPointsReader();\n      if (pointsReaders[i] != null) {\n        pointsReaders[i] = pointsReaders[i].getMergeInstance();\n      }\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n\n    setDocMaps(readers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","sourceNew":"  /** Sole constructor. */\n  MergeState(List<CodecReader> originalReaders, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    this.infoStream = infoStream;\n\n    final Sort indexSort = segmentInfo.getIndexSort();\n    int numReaders = originalReaders.size();\n    leafDocMaps = new DocMap[numReaders];\n    List<CodecReader> readers = maybeSortReaders(originalReaders, segmentInfo);\n\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    pointsReaders = new PointsReader[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    int numDocs = 0;\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n      pointsReaders[i] = reader.getPointsReader();\n      if (pointsReaders[i] != null) {\n        pointsReaders[i] = pointsReaders[i].getMergeInstance();\n      }\n      numDocs += reader.numDocs();\n    }\n\n    segmentInfo.setMaxDoc(numDocs);\n\n    this.segmentInfo = segmentInfo;\n    this.docMaps = buildDocMaps(readers, indexSort);\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  MergeState(List<CodecReader> readers, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    pointsReaders = new PointsReader[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n      pointsReaders[i] = reader.getPointsReader();\n      if (pointsReaders[i] != null) {\n        pointsReaders[i] = pointsReaders[i].getMergeInstance();\n      }\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n\n    setDocMaps(readers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["4522ffca5a1f420c6a02198c9332d7c596a30ca5","3d33e731a93d4b57e662ff094f64f94a745422d4"],"5e03940e6e9044943de4b7ac08f8581da37a9534":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["4522ffca5a1f420c6a02198c9332d7c596a30ca5","5e03940e6e9044943de4b7ac08f8581da37a9534"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["4522ffca5a1f420c6a02198c9332d7c596a30ca5","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4522ffca5a1f420c6a02198c9332d7c596a30ca5","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["5e03940e6e9044943de4b7ac08f8581da37a9534"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5e03940e6e9044943de4b7ac08f8581da37a9534":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}