{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.Iterator#run().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.Iterator#run().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.Iterator#run().mjava","sourceNew":"    /**\n     * traverse the tree to find next key\n     */\n    private int run() {\n      if (cur == -1) {\n        return -1;\n      }\n\n      boolean leaf = false;\n      while (true) {\n        // first go down on low branch until leaf or compressed branch\n        while (cur != 0) {\n          if (sc[cur] == 0xFFFF) {\n            leaf = true;\n            break;\n          }\n          ns.push(new Item((char) cur, '\\u0000'));\n          if (sc[cur] == 0) {\n            leaf = true;\n            break;\n          }\n          cur = lo[cur];\n        }\n        if (leaf) {\n          break;\n        }\n        // nothing found, go up one node and try again\n        cur = up();\n        if (cur == -1) {\n          return -1;\n        }\n      }\n      // The current node should be a data node and\n      // the key should be in the key stack (at least partially)\n      StringBuilder buf = new StringBuilder(ks.toString());\n      if (sc[cur] == 0xFFFF) {\n        int p = lo[cur];\n        while (kv.get(p) != 0) {\n          buf.append(kv.get(p++));\n        }\n      }\n      curkey = buf.toString();\n      return 0;\n    }\n\n","sourceOld":"    /**\n     * traverse the tree to find next key\n     */\n    private int run() {\n      if (cur == -1) {\n        return -1;\n      }\n\n      boolean leaf = false;\n      while (true) {\n        // first go down on low branch until leaf or compressed branch\n        while (cur != 0) {\n          if (sc[cur] == 0xFFFF) {\n            leaf = true;\n            break;\n          }\n          ns.push(new Item((char) cur, '\\u0000'));\n          if (sc[cur] == 0) {\n            leaf = true;\n            break;\n          }\n          cur = lo[cur];\n        }\n        if (leaf) {\n          break;\n        }\n        // nothing found, go up one node and try again\n        cur = up();\n        if (cur == -1) {\n          return -1;\n        }\n      }\n      // The current node should be a data node and\n      // the key should be in the key stack (at least partially)\n      StringBuilder buf = new StringBuilder(ks.toString());\n      if (sc[cur] == 0xFFFF) {\n        int p = lo[cur];\n        while (kv.get(p) != 0) {\n          buf.append(kv.get(p++));\n        }\n      }\n      curkey = buf.toString();\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.Iterator#run().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.Iterator#run().mjava","sourceNew":"    /**\n     * traverse the tree to find next key\n     */\n    private int run() {\n      if (cur == -1) {\n        return -1;\n      }\n\n      boolean leaf = false;\n      while (true) {\n        // first go down on low branch until leaf or compressed branch\n        while (cur != 0) {\n          if (sc[cur] == 0xFFFF) {\n            leaf = true;\n            break;\n          }\n          ns.push(new Item((char) cur, '\\u0000'));\n          if (sc[cur] == 0) {\n            leaf = true;\n            break;\n          }\n          cur = lo[cur];\n        }\n        if (leaf) {\n          break;\n        }\n        // nothing found, go up one node and try again\n        cur = up();\n        if (cur == -1) {\n          return -1;\n        }\n      }\n      // The current node should be a data node and\n      // the key should be in the key stack (at least partially)\n      StringBuilder buf = new StringBuilder(ks.toString());\n      if (sc[cur] == 0xFFFF) {\n        int p = lo[cur];\n        while (kv.get(p) != 0) {\n          buf.append(kv.get(p++));\n        }\n      }\n      curkey = buf.toString();\n      return 0;\n    }\n\n","sourceOld":"    /**\n     * traverse the tree to find next key\n     */\n    private int run() {\n      if (cur == -1) {\n        return -1;\n      }\n\n      boolean leaf = false;\n      while (true) {\n        // first go down on low branch until leaf or compressed branch\n        while (cur != 0) {\n          if (sc[cur] == 0xFFFF) {\n            leaf = true;\n            break;\n          }\n          ns.push(new Item((char) cur, '\\u0000'));\n          if (sc[cur] == 0) {\n            leaf = true;\n            break;\n          }\n          cur = lo[cur];\n        }\n        if (leaf) {\n          break;\n        }\n        // nothing found, go up one node and try again\n        cur = up();\n        if (cur == -1) {\n          return -1;\n        }\n      }\n      // The current node should be a data node and\n      // the key should be in the key stack (at least partially)\n      StringBuilder buf = new StringBuilder(ks.toString());\n      if (sc[cur] == 0xFFFF) {\n        int p = lo[cur];\n        while (kv.get(p) != 0) {\n          buf.append(kv.get(p++));\n        }\n      }\n      curkey = buf.toString();\n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}