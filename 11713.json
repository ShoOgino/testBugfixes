{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#forEachCollection(Consumer[DocCollection]).mjava","commits":[{"id":"c37f0eb6df569f1492eae2d4f3e522417747e453","date":1501724988,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#forEachCollection(Consumer[DocCollection]).mjava","pathOld":"/dev/null","sourceNew":"  public void forEachCollection(Consumer<DocCollection> consumer) {\n    collectionStates.forEach((s, collectionRef) -> {\n      try {\n        consumer.accept(collectionRef.get());\n      } catch (SolrException e) {\n        if (e.getCause() instanceof KeeperException.NoNodeException) {\n          //don't do anything. This collection does not exist\n        } else{\n          throw e;\n        }\n      }\n    });\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#forEachCollection(Consumer[DocCollection]).mjava","pathOld":"/dev/null","sourceNew":"  public void forEachCollection(Consumer<DocCollection> consumer) {\n    collectionStates.forEach((s, collectionRef) -> {\n      try {\n        consumer.accept(collectionRef.get());\n      } catch (SolrException e) {\n        if (e.getCause() instanceof KeeperException.NoNodeException) {\n          //don't do anything. This collection does not exist\n        } else{\n          throw e;\n        }\n      }\n    });\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#forEachCollection(Consumer[DocCollection]).mjava","pathOld":"/dev/null","sourceNew":"  public void forEachCollection(Consumer<DocCollection> consumer) {\n    collectionStates.forEach((s, collectionRef) -> {\n      try {\n        consumer.accept(collectionRef.get());\n      } catch (SolrException e) {\n        if (e.getCause() instanceof KeeperException.NoNodeException) {\n          //don't do anything. This collection does not exist\n        } else{\n          throw e;\n        }\n      }\n    });\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdc4dd8e0df32216b2332cf2271b2ae9ce5b5b59","date":1557835764,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#forEachCollection(Consumer[DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#forEachCollection(Consumer[DocCollection]).mjava","sourceNew":"  /**\n   * Iterate over collections. Unlike {@link #getCollectionStates()} collections passed to the\n   * consumer are guaranteed to exist.\n   * @param consumer collection consumer.\n   */\n  public void forEachCollection(Consumer<DocCollection> consumer) {\n    collectionStates.forEach((s, collectionRef) -> {\n      try {\n        DocCollection collection = collectionRef.get();\n        if (collection != null) {\n          consumer.accept(collection);\n        }\n      } catch (SolrException e) {\n        if (e.getCause() instanceof KeeperException.NoNodeException) {\n          //don't do anything. This collection does not exist\n        } else{\n          throw e;\n        }\n      }\n    });\n\n  }\n\n","sourceOld":"  public void forEachCollection(Consumer<DocCollection> consumer) {\n    collectionStates.forEach((s, collectionRef) -> {\n      try {\n        consumer.accept(collectionRef.get());\n      } catch (SolrException e) {\n        if (e.getCause() instanceof KeeperException.NoNodeException) {\n          //don't do anything. This collection does not exist\n        } else{\n          throw e;\n        }\n      }\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c37f0eb6df569f1492eae2d4f3e522417747e453"],"bdc4dd8e0df32216b2332cf2271b2ae9ce5b5b59":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c37f0eb6df569f1492eae2d4f3e522417747e453":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bdc4dd8e0df32216b2332cf2271b2ae9ce5b5b59"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"bdc4dd8e0df32216b2332cf2271b2ae9ce5b5b59":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","c37f0eb6df569f1492eae2d4f3e522417747e453","560c18d71dad43d675158783c3840f8c80d6d39c"],"c37f0eb6df569f1492eae2d4f3e522417747e453":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["bdc4dd8e0df32216b2332cf2271b2ae9ce5b5b59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}