{"path":"modules/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","commits":[{"id":"683d3f90dda2bbb999c3ce855706d74563a53680","date":1285654576,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.US);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), \"UTF-8\");\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.US);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), \"UTF-8\");\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","pathOld":"modules/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#writeOutput(SortedSet[String]).mjava","sourceNew":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.US);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), \"UTF-8\");\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a file containing a JFlex macro that will accept any of the given\n   * TLDs case-insensitively.\n   * \n   * @param ASCIITLDs The downcased sorted set of top level domains to accept\n   * @throws IOException if there is an error writing the output file\n   */\n  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {\n    final DateFormat dateFormat = DateFormat.getDateTimeInstance\n      (DateFormat.FULL, DateFormat.FULL, Locale.US);\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    final Writer writer = new OutputStreamWriter\n      (new FileOutputStream(outputFile), \"UTF-8\");\n    try {\n      writer.write(APACHE_LICENSE);\n      writer.write(\"// Generated from IANA Root Zone Database <\");\n      writer.write(tldFileURL.toString());\n      writer.write(\">\");\n      writer.write(NL);\n      if (tldFileLastModified > 0L) {\n        writer.write(\"// file version from \");\n        writer.write(dateFormat.format(tldFileLastModified));\n        writer.write(NL);\n      }\n      writer.write(\"// generated on \");\n      writer.write(dateFormat.format(new Date()));\n      writer.write(NL);\n      writer.write(\"// by \");\n      writer.write(this.getClass().getName());\n      writer.write(NL);\n      writer.write(NL);\n      writer.write(\"ASCIITLD = \\\".\\\" (\");\n      writer.write(NL);\n      boolean isFirst = true;\n      for (String ASCIITLD : ASCIITLDs) {\n        writer.write(\"\\t\");\n        if (isFirst) {\n          isFirst = false;\n          writer.write(\"  \"); \n        } else {\n          writer.write(\"| \"); \n        }\n        writer.write(getCaseInsensitiveRegex(ASCIITLD));\n        writer.write(NL);\n      }\n      writer.write(\"\\t) \\\".\\\"?   // Accept trailing root (empty) domain\");\n      writer.write(NL);\n      writer.write(NL);\n    } finally {\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["683d3f90dda2bbb999c3ce855706d74563a53680"],"683d3f90dda2bbb999c3ce855706d74563a53680":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","683d3f90dda2bbb999c3ce855706d74563a53680"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"683d3f90dda2bbb999c3ce855706d74563a53680":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["683d3f90dda2bbb999c3ce855706d74563a53680","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}