{"path":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    File dirName = new File(TEMP_DIR, \"luceneTestThreadedOptimize\");\n    directory = FSDirectory.open(dirName);\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    File dirName = new File(TEMP_DIR, \"luceneTestThreadedOptimize\");\n    directory = FSDirectory.open(dirName);\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#_testThreadedOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  // nocommit\n  public void _testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    File dirName = new File(TEMP_DIR, \"luceneTestThreadedOptimize\");\n    directory = FSDirectory.open(dirName);\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    File dirName = new File(TEMP_DIR, \"luceneTestThreadedOptimize\");\n    directory = FSDirectory.open(dirName);\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#_testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    File dirName = new File(TEMP_DIR, \"luceneTestThreadedOptimize\");\n    directory = FSDirectory.open(dirName);\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  // nocommit\n  public void _testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    File dirName = new File(TEMP_DIR, \"luceneTestThreadedOptimize\");\n    directory = FSDirectory.open(dirName);\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Random random = newRandom();\n    Directory directory = new MockRAMDirectory();\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    File dirName = new File(TEMP_DIR, \"luceneTestThreadedOptimize\");\n    directory = FSDirectory.open(dirName);\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    File dirName = new File(TEMP_DIR, \"luceneTestThreadedOptimize\");\n    directory = FSDirectory.open(dirName);\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Random random = newRandom();\n    Directory directory = newDirectory(random);\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    File dirName = new File(TEMP_DIR, \"luceneTestThreadedOptimize\");\n    directory = FSDirectory.open(dirName);\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Random random = newRandom();\n    Directory directory = new MockRAMDirectory();\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    File dirName = new File(TEMP_DIR, \"luceneTestThreadedOptimize\");\n    directory = FSDirectory.open(dirName);\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = newDirectory();\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    File dirName = new File(TEMP_DIR, \"luceneTestThreadedOptimize\");\n    directory = FSDirectory.open(dirName);\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Random random = newRandom();\n    Directory directory = newDirectory(random);\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    File dirName = new File(TEMP_DIR, \"luceneTestThreadedOptimize\");\n    directory = FSDirectory.open(dirName);\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = newDirectory();\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = newDirectory();\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    File dirName = new File(TEMP_DIR, \"luceneTestThreadedOptimize\");\n    directory = FSDirectory.open(dirName);\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = newDirectory();\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = newDirectory();\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    File dirName = new File(TEMP_DIR, \"luceneTestThreadedOptimize\");\n    directory = FSDirectory.open(dirName);\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = newDirectory();\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = new MockRAMDirectory();\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n\n    File dirName = new File(TEMP_DIR, \"luceneTestThreadedOptimize\");\n    directory = FSDirectory.open(dirName);\n    runTest(directory, new SerialMergeScheduler());\n    runTest(directory, new ConcurrentMergeScheduler());\n    directory.close();\n    _TestUtil.rmDir(dirName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cca56866c19997e28ef073622656669c15210540","date":1307449014,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = newDirectory();\n    runTest(random, directory);\n    directory.close();\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = newDirectory();\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = newDirectory();\n    runTest(random, directory);\n    directory.close();\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = newDirectory();\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = newDirectory();\n    runTest(random, directory);\n    directory.close();\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = newDirectory();\n    runTest(random, directory, new SerialMergeScheduler());\n    runTest(random, directory, new ConcurrentMergeScheduler());\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedForceMerge#testThreadedForceMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#testThreadedOptimize().mjava","sourceNew":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedForceMerge() throws Exception {\n    Directory directory = newDirectory();\n    runTest(random, directory);\n    directory.close();\n  }\n\n","sourceOld":"  /*\n    Run above stress test against RAMDirectory and then\n    FSDirectory.\n  */\n  public void testThreadedOptimize() throws Exception {\n    Directory directory = newDirectory();\n    runTest(random, directory);\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","cca56866c19997e28ef073622656669c15210540"],"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1f653cfcf159baeaafe5d01682a911e95bba4012","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cca56866c19997e28ef073622656669c15210540"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","cca56866c19997e28ef073622656669c15210540"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["6c18273ea5b3974d2f30117f46f1ae416c28f727"],"cca56866c19997e28ef073622656669c15210540":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cca56866c19997e28ef073622656669c15210540"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cca56866c19997e28ef073622656669c15210540":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d14e8d18c0e3970c20354dbeeb49da11bd587fbd","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6c18273ea5b3974d2f30117f46f1ae416c28f727","b21422ff1d1d56499dec481f193b402e5e8def5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}