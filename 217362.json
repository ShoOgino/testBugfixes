{"path":"solr/core/src/test/org/apache/solr/response/TestExportWriter#testDuplicates().mjava","commits":[{"id":"64e822dccd1b346ce9d46853cebd9bc5550e8a55","date":1497302501,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestExportWriter#testDuplicates().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDuplicates() throws Exception {\n    RefCounted<SolrIndexSearcher> ref = null;\n    try {\n      ref = h.getCore().getSearcher();\n      LeafReader reader = ref.get().getSlowAtomicReader();\n      // MultiValued Trie fields use SortedSet\n      assertNotNull(reader.getSortedSetDocValues(\"int_is_t\"));\n      assertNull(reader.getSortedNumericDocValues(\"int_is_t\"));\n      // MultiValued Point fields use SortedNumerics\n      assertNull(reader.getSortedSetDocValues(\"int_is_p\"));\n      assertNotNull(reader.getSortedNumericDocValues(\"int_is_p\"));\n    } finally {\n      if (ref != null) ref.decref();\n    }\n    String s =  h.query(req(\"q\", \"id:3\", \"qt\", \"/export\", \"fl\", \"int_is_t\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"int_is_t\\\":[1]}]}}\");\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"int_is_p\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"int_is_p\\\":[1,1,1,1]}]}}\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestExportWriter#testDuplicates().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDuplicates() throws Exception {\n    RefCounted<SolrIndexSearcher> ref = null;\n    try {\n      ref = h.getCore().getSearcher();\n      LeafReader reader = ref.get().getSlowAtomicReader();\n      // MultiValued Trie fields use SortedSet\n      assertNotNull(reader.getSortedSetDocValues(\"int_is_t\"));\n      assertNull(reader.getSortedNumericDocValues(\"int_is_t\"));\n      // MultiValued Point fields use SortedNumerics\n      assertNull(reader.getSortedSetDocValues(\"int_is_p\"));\n      assertNotNull(reader.getSortedNumericDocValues(\"int_is_p\"));\n    } finally {\n      if (ref != null) ref.decref();\n    }\n    String s =  h.query(req(\"q\", \"id:3\", \"qt\", \"/export\", \"fl\", \"int_is_t\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"int_is_t\\\":[1]}]}}\");\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"int_is_p\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"int_is_p\\\":[1,1,1,1]}]}}\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestExportWriter#testDuplicates().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestExportWriter#testDuplicates().mjava","sourceNew":"  @Test\n  public void testDuplicates() throws Exception {\n    // see SOLR-10924\n    String expected = h.getCore().getLatestSchema().getField(\"int_is_t\").getType().isPointField()\n      ? \"1,1,1,1\" : \"1\";\n    String s =  h.query(req(\"q\", \"id:3\", \"qt\", \"/export\", \"fl\", \"int_is_t\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"int_is_t\\\":[\"+expected+\"]}]}}\");\n    expected = h.getCore().getLatestSchema().getField(\"int_is_p\").getType().isPointField()\n      ? \"1,1,1,1\" : \"1\";\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"int_is_p\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"int_is_p\\\":[1,1,1,1]}]}}\");\n  }\n\n","sourceOld":"  @Test\n  public void testDuplicates() throws Exception {\n    RefCounted<SolrIndexSearcher> ref = null;\n    try {\n      ref = h.getCore().getSearcher();\n      LeafReader reader = ref.get().getSlowAtomicReader();\n      // MultiValued Trie fields use SortedSet\n      assertNotNull(reader.getSortedSetDocValues(\"int_is_t\"));\n      assertNull(reader.getSortedNumericDocValues(\"int_is_t\"));\n      // MultiValued Point fields use SortedNumerics\n      assertNull(reader.getSortedSetDocValues(\"int_is_p\"));\n      assertNotNull(reader.getSortedNumericDocValues(\"int_is_p\"));\n    } finally {\n      if (ref != null) ref.decref();\n    }\n    String s =  h.query(req(\"q\", \"id:3\", \"qt\", \"/export\", \"fl\", \"int_is_t\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"int_is_t\\\":[1]}]}}\");\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"int_is_p\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"int_is_p\\\":[1,1,1,1]}]}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestExportWriter#testDuplicates().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDuplicates() throws Exception {\n    // see SOLR-10924\n    String expected = h.getCore().getLatestSchema().getField(\"int_is_t\").getType().isPointField()\n      ? \"1,1,1,1\" : \"1\";\n    String s =  h.query(req(\"q\", \"id:3\", \"qt\", \"/export\", \"fl\", \"int_is_t\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"int_is_t\\\":[\"+expected+\"]}]}}\");\n    expected = h.getCore().getLatestSchema().getField(\"int_is_p\").getType().isPointField()\n      ? \"1,1,1,1\" : \"1\";\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"int_is_p\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"int_is_p\\\":[1,1,1,1]}]}}\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80","date":1532111887,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testDuplicates().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestExportWriter#testDuplicates().mjava","sourceNew":"  @Test\n  public void testDuplicates() throws Exception {\n    // see SOLR-10924\n    String expected = h.getCore().getLatestSchema().getField(\"int_is_t\").getType().isPointField()\n      ? \"1,1,1,1\" : \"1\";\n    String s =  h.query(req(\"q\", \"id:3\", \"qt\", \"/export\", \"fl\", \"int_is_t\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"int_is_t\\\":[\"+expected+\"]}]}}\");\n    expected = h.getCore().getLatestSchema().getField(\"int_is_p\").getType().isPointField()\n      ? \"1,1,1,1\" : \"1\";\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"int_is_p\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"int_is_p\\\":[1,1,1,1]}]}}\");\n  }\n\n","sourceOld":"  @Test\n  public void testDuplicates() throws Exception {\n    // see SOLR-10924\n    String expected = h.getCore().getLatestSchema().getField(\"int_is_t\").getType().isPointField()\n      ? \"1,1,1,1\" : \"1\";\n    String s =  h.query(req(\"q\", \"id:3\", \"qt\", \"/export\", \"fl\", \"int_is_t\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"int_is_t\\\":[\"+expected+\"]}]}}\");\n    expected = h.getCore().getLatestSchema().getField(\"int_is_p\").getType().isPointField()\n      ? \"1,1,1,1\" : \"1\";\n    s =  h.query(req(\"q\", \"id:8\", \"qt\", \"/export\", \"fl\", \"int_is_p\", \"sort\", \"intdv asc\"));\n    assertJsonEquals(s, \"{\\\"responseHeader\\\": {\\\"status\\\": 0}, \\\"response\\\":{\\\"numFound\\\":1, \\\"docs\\\":[{\\\"int_is_p\\\":[1,1,1,1]}]}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64e822dccd1b346ce9d46853cebd9bc5550e8a55":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","64e822dccd1b346ce9d46853cebd9bc5550e8a55"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","64e822dccd1b346ce9d46853cebd9bc5550e8a55"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","64e822dccd1b346ce9d46853cebd9bc5550e8a55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"]},"commit2Childs":{"64e822dccd1b346ce9d46853cebd9bc5550e8a55":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["64e822dccd1b346ce9d46853cebd9bc5550e8a55","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}