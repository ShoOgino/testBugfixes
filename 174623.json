{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setAnalyzer().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setAnalyzer().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setAnalyzer().mjava","sourceNew":"  private void setAnalyzer() throws Exception {\n    Class<? extends Analyzer> clazz = null;\n    Analyzer wrappedAnalyzer;\n    try {\n      if (analyzerClassName == null || analyzerClassName.equals(\"\")) {\n        analyzerClassName \n          = \"org.apache.lucene.analysis.standard.StandardAnalyzer\"; \n      }\n      if (analyzerClassName.indexOf(\".\") == -1 \n          || analyzerClassName.startsWith(\"standard.\")) {\n        //there is no package name, assume o.a.l.analysis\n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n      }\n      clazz = Class.forName(analyzerClassName).asSubclass(Analyzer.class);\n      // first try to use a ctor with version parameter (needed for many new \n      // Analyzers that have no default one anymore)\n      Constructor<? extends Analyzer> ctor = clazz.getConstructor(Version.class);\n      wrappedAnalyzer = ctor.newInstance(Version.LUCENE_CURRENT);\n    } catch (NoSuchMethodException e) {\n      // otherwise use default ctor\n      wrappedAnalyzer = clazz.newInstance();\n    }\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(wrappedAnalyzer, maxShingleSize);\n    analyzer.setOutputUnigrams(outputUnigrams);\n    getRunData().setAnalyzer(analyzer);\n  }\n\n","sourceOld":"  private void setAnalyzer() throws Exception {\n    Class<? extends Analyzer> clazz = null;\n    Analyzer wrappedAnalyzer;\n    try {\n      if (analyzerClassName == null || analyzerClassName.equals(\"\")) {\n        analyzerClassName \n          = \"org.apache.lucene.analysis.standard.StandardAnalyzer\"; \n      }\n      if (analyzerClassName.indexOf(\".\") == -1 \n          || analyzerClassName.startsWith(\"standard.\")) {\n        //there is no package name, assume o.a.l.analysis\n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n      }\n      clazz = Class.forName(analyzerClassName).asSubclass(Analyzer.class);\n      // first try to use a ctor with version parameter (needed for many new \n      // Analyzers that have no default one anymore)\n      Constructor<? extends Analyzer> ctor = clazz.getConstructor(Version.class);\n      wrappedAnalyzer = ctor.newInstance(Version.LUCENE_CURRENT);\n    } catch (NoSuchMethodException e) {\n      // otherwise use default ctor\n      wrappedAnalyzer = clazz.newInstance();\n    }\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(wrappedAnalyzer, maxShingleSize);\n    analyzer.setOutputUnigrams(outputUnigrams);\n    getRunData().setAnalyzer(analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setAnalyzer().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setAnalyzer().mjava","sourceNew":"  private void setAnalyzer() throws Exception {\n    Class<? extends Analyzer> clazz = null;\n    Analyzer wrappedAnalyzer;\n    try {\n      if (analyzerClassName == null || analyzerClassName.equals(\"\")) {\n        analyzerClassName \n          = \"org.apache.lucene.analysis.standard.StandardAnalyzer\"; \n      }\n      if (analyzerClassName.indexOf(\".\") == -1 \n          || analyzerClassName.startsWith(\"standard.\")) {\n        //there is no package name, assume o.a.l.analysis\n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n      }\n      clazz = Class.forName(analyzerClassName).asSubclass(Analyzer.class);\n      // first try to use a ctor with version parameter (needed for many new \n      // Analyzers that have no default one anymore)\n      Constructor<? extends Analyzer> ctor = clazz.getConstructor(Version.class);\n      wrappedAnalyzer = ctor.newInstance(Version.LUCENE_CURRENT);\n    } catch (NoSuchMethodException e) {\n      // otherwise use default ctor\n      wrappedAnalyzer = clazz.newInstance();\n    }\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(wrappedAnalyzer, maxShingleSize);\n    analyzer.setOutputUnigrams(outputUnigrams);\n    getRunData().setAnalyzer(analyzer);\n  }\n\n","sourceOld":"  private void setAnalyzer() throws Exception {\n    Class<? extends Analyzer> clazz = null;\n    Analyzer wrappedAnalyzer;\n    try {\n      if (analyzerClassName == null || analyzerClassName.equals(\"\")) {\n        analyzerClassName \n          = \"org.apache.lucene.analysis.standard.StandardAnalyzer\"; \n      }\n      if (analyzerClassName.indexOf(\".\") == -1 \n          || analyzerClassName.startsWith(\"standard.\")) {\n        //there is no package name, assume o.a.l.analysis\n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n      }\n      clazz = Class.forName(analyzerClassName).asSubclass(Analyzer.class);\n      // first try to use a ctor with version parameter (needed for many new \n      // Analyzers that have no default one anymore)\n      Constructor<? extends Analyzer> ctor = clazz.getConstructor(Version.class);\n      wrappedAnalyzer = ctor.newInstance(Version.LUCENE_CURRENT);\n    } catch (NoSuchMethodException e) {\n      // otherwise use default ctor\n      wrappedAnalyzer = clazz.newInstance();\n    }\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(wrappedAnalyzer, maxShingleSize);\n    analyzer.setOutputUnigrams(outputUnigrams);\n    getRunData().setAnalyzer(analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setAnalyzer().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setAnalyzer().mjava","sourceNew":"  private void setAnalyzer() throws Exception {\n    Class<? extends Analyzer> clazz = null;\n    Analyzer wrappedAnalyzer;\n    try {\n      if (analyzerClassName == null || analyzerClassName.equals(\"\")) {\n        analyzerClassName \n          = \"org.apache.lucene.analysis.standard.StandardAnalyzer\"; \n      }\n      if (analyzerClassName.indexOf(\".\") == -1 \n          || analyzerClassName.startsWith(\"standard.\")) {\n        //there is no package name, assume o.a.l.analysis\n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n      }\n      clazz = Class.forName(analyzerClassName).asSubclass(Analyzer.class);\n      // first try to use a ctor with version parameter (needed for many new \n      // Analyzers that have no default one anymore)\n      Constructor<? extends Analyzer> ctor = clazz.getConstructor(Version.class);\n      wrappedAnalyzer = ctor.newInstance(Version.LUCENE_CURRENT);\n    } catch (NoSuchMethodException e) {\n      // otherwise use default ctor\n      wrappedAnalyzer = clazz.newInstance();\n    }\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(wrappedAnalyzer, maxShingleSize);\n    analyzer.setOutputUnigrams(outputUnigrams);\n    getRunData().setAnalyzer(analyzer);\n  }\n\n","sourceOld":"  private void setAnalyzer() throws Exception {\n    Class<? extends Analyzer> clazz = null;\n    Analyzer wrappedAnalyzer;\n    try {\n      if (analyzerClassName == null || analyzerClassName.equals(\"\")) {\n        analyzerClassName \n          = \"org.apache.lucene.analysis.standard.StandardAnalyzer\"; \n      }\n      if (analyzerClassName.indexOf(\".\") == -1 \n          || analyzerClassName.startsWith(\"standard.\")) {\n        //there is no package name, assume o.a.l.analysis\n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n      }\n      clazz = Class.forName(analyzerClassName).asSubclass(Analyzer.class);\n      // first try to use a ctor with version parameter (needed for many new \n      // Analyzers that have no default one anymore)\n      Constructor<? extends Analyzer> ctor = clazz.getConstructor(Version.class);\n      wrappedAnalyzer = ctor.newInstance(Version.LUCENE_CURRENT);\n    } catch (NoSuchMethodException e) {\n      // otherwise use default ctor\n      wrappedAnalyzer = clazz.newInstance();\n    }\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(wrappedAnalyzer, maxShingleSize);\n    analyzer.setOutputUnigrams(outputUnigrams);\n    getRunData().setAnalyzer(analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e900bd4e9633cee011b2c3ae686f3039b7fc0ee","date":1301610886,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setAnalyzer().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setAnalyzer().mjava","sourceNew":"  private void setAnalyzer() throws Exception {\n    Analyzer wrappedAnalyzer = null;\n    if (null == analyzerClassName || 0 == analyzerClassName.length()) {\n      analyzerClassName = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n    } \n    if (-1 == analyzerClassName.indexOf(\".\")) {\n      String coreClassName = \"org.apache.lucene.analysis.core.\" + analyzerClassName;\n      try {\n        // If there is no package, first attempt to instantiate a core analyzer\n        wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(coreClassName);\n        analyzerClassName = coreClassName;\n      } catch (ClassNotFoundException e) {\n        // If this is not a core analyzer, try the base analysis package \n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n        wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(analyzerClassName);\n      }\n    } else {    \n      if (analyzerClassName.startsWith(\"standard.\")) {\n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n      }\n      wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(analyzerClassName);\n    }\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(wrappedAnalyzer, maxShingleSize);\n    analyzer.setOutputUnigrams(outputUnigrams);\n    getRunData().setAnalyzer(analyzer);\n  }\n\n","sourceOld":"  private void setAnalyzer() throws Exception {\n    Class<? extends Analyzer> clazz = null;\n    Analyzer wrappedAnalyzer;\n    try {\n      if (analyzerClassName == null || analyzerClassName.equals(\"\")) {\n        analyzerClassName \n          = \"org.apache.lucene.analysis.standard.StandardAnalyzer\"; \n      }\n      if (analyzerClassName.indexOf(\".\") == -1 \n          || analyzerClassName.startsWith(\"standard.\")) {\n        //there is no package name, assume o.a.l.analysis\n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n      }\n      clazz = Class.forName(analyzerClassName).asSubclass(Analyzer.class);\n      // first try to use a ctor with version parameter (needed for many new \n      // Analyzers that have no default one anymore)\n      Constructor<? extends Analyzer> ctor = clazz.getConstructor(Version.class);\n      wrappedAnalyzer = ctor.newInstance(Version.LUCENE_CURRENT);\n    } catch (NoSuchMethodException e) {\n      // otherwise use default ctor\n      wrappedAnalyzer = clazz.newInstance();\n    }\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(wrappedAnalyzer, maxShingleSize);\n    analyzer.setOutputUnigrams(outputUnigrams);\n    getRunData().setAnalyzer(analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setAnalyzer().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setAnalyzer().mjava","sourceNew":"  private void setAnalyzer() throws Exception {\n    Analyzer wrappedAnalyzer = null;\n    if (null == analyzerClassName || 0 == analyzerClassName.length()) {\n      analyzerClassName = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n    } \n    if (-1 == analyzerClassName.indexOf(\".\")) {\n      String coreClassName = \"org.apache.lucene.analysis.core.\" + analyzerClassName;\n      try {\n        // If there is no package, first attempt to instantiate a core analyzer\n        wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(coreClassName);\n        analyzerClassName = coreClassName;\n      } catch (ClassNotFoundException e) {\n        // If this is not a core analyzer, try the base analysis package \n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n        wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(analyzerClassName);\n      }\n    } else {    \n      if (analyzerClassName.startsWith(\"standard.\")) {\n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n      }\n      wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(analyzerClassName);\n    }\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(wrappedAnalyzer, maxShingleSize);\n    analyzer.setOutputUnigrams(outputUnigrams);\n    getRunData().setAnalyzer(analyzer);\n  }\n\n","sourceOld":"  private void setAnalyzer() throws Exception {\n    Class<? extends Analyzer> clazz = null;\n    Analyzer wrappedAnalyzer;\n    try {\n      if (analyzerClassName == null || analyzerClassName.equals(\"\")) {\n        analyzerClassName \n          = \"org.apache.lucene.analysis.standard.StandardAnalyzer\"; \n      }\n      if (analyzerClassName.indexOf(\".\") == -1 \n          || analyzerClassName.startsWith(\"standard.\")) {\n        //there is no package name, assume o.a.l.analysis\n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n      }\n      clazz = Class.forName(analyzerClassName).asSubclass(Analyzer.class);\n      // first try to use a ctor with version parameter (needed for many new \n      // Analyzers that have no default one anymore)\n      Constructor<? extends Analyzer> ctor = clazz.getConstructor(Version.class);\n      wrappedAnalyzer = ctor.newInstance(Version.LUCENE_CURRENT);\n    } catch (NoSuchMethodException e) {\n      // otherwise use default ctor\n      wrappedAnalyzer = clazz.newInstance();\n    }\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(wrappedAnalyzer, maxShingleSize);\n    analyzer.setOutputUnigrams(outputUnigrams);\n    getRunData().setAnalyzer(analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setAnalyzer().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setAnalyzer().mjava","sourceNew":"  private void setAnalyzer() throws Exception {\n    Analyzer wrappedAnalyzer = null;\n    if (null == analyzerClassName || 0 == analyzerClassName.length()) {\n      analyzerClassName = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n    } \n    if (-1 == analyzerClassName.indexOf(\".\")) {\n      String coreClassName = \"org.apache.lucene.analysis.core.\" + analyzerClassName;\n      try {\n        // If there is no package, first attempt to instantiate a core analyzer\n        wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(coreClassName);\n        analyzerClassName = coreClassName;\n      } catch (ClassNotFoundException e) {\n        // If this is not a core analyzer, try the base analysis package \n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n        wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(analyzerClassName);\n      }\n    } else {    \n      if (analyzerClassName.startsWith(\"standard.\")) {\n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n      }\n      wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(analyzerClassName);\n    }\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(wrappedAnalyzer, maxShingleSize);\n    analyzer.setOutputUnigrams(outputUnigrams);\n    getRunData().setAnalyzer(analyzer);\n  }\n\n","sourceOld":"  private void setAnalyzer() throws Exception {\n    Class<? extends Analyzer> clazz = null;\n    Analyzer wrappedAnalyzer;\n    try {\n      if (analyzerClassName == null || analyzerClassName.equals(\"\")) {\n        analyzerClassName \n          = \"org.apache.lucene.analysis.standard.StandardAnalyzer\"; \n      }\n      if (analyzerClassName.indexOf(\".\") == -1 \n          || analyzerClassName.startsWith(\"standard.\")) {\n        //there is no package name, assume o.a.l.analysis\n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n      }\n      clazz = Class.forName(analyzerClassName).asSubclass(Analyzer.class);\n      // first try to use a ctor with version parameter (needed for many new \n      // Analyzers that have no default one anymore)\n      Constructor<? extends Analyzer> ctor = clazz.getConstructor(Version.class);\n      wrappedAnalyzer = ctor.newInstance(Version.LUCENE_CURRENT);\n    } catch (NoSuchMethodException e) {\n      // otherwise use default ctor\n      wrappedAnalyzer = clazz.newInstance();\n    }\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(wrappedAnalyzer, maxShingleSize);\n    analyzer.setOutputUnigrams(outputUnigrams);\n    getRunData().setAnalyzer(analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"871f13bf1a6255d5315451355f9fd2ebdd84e740","date":1316056877,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setAnalyzer().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setAnalyzer().mjava","sourceNew":"  private void setAnalyzer() throws Exception {\n    Analyzer wrappedAnalyzer = null;\n    if (null == analyzerClassName || 0 == analyzerClassName.length()) {\n      analyzerClassName = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n    } \n    if (-1 == analyzerClassName.indexOf(\".\")) {\n      String coreClassName = \"org.apache.lucene.analysis.core.\" + analyzerClassName;\n      try {\n        // If there is no package, first attempt to instantiate a core analyzer\n        wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(coreClassName);\n        analyzerClassName = coreClassName;\n      } catch (ClassNotFoundException e) {\n        // If this is not a core analyzer, try the base analysis package \n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n        wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(analyzerClassName);\n      }\n    } else {    \n      if (analyzerClassName.startsWith(\"standard.\")) {\n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n      }\n      wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(analyzerClassName);\n    }\n    \n    ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(\n        wrappedAnalyzer,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        maxShingleSize,\n        ShingleFilter.TOKEN_SEPARATOR,\n        outputUnigrams,\n        false);\n    getRunData().setAnalyzer(analyzer);\n  }\n\n","sourceOld":"  private void setAnalyzer() throws Exception {\n    Analyzer wrappedAnalyzer = null;\n    if (null == analyzerClassName || 0 == analyzerClassName.length()) {\n      analyzerClassName = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n    } \n    if (-1 == analyzerClassName.indexOf(\".\")) {\n      String coreClassName = \"org.apache.lucene.analysis.core.\" + analyzerClassName;\n      try {\n        // If there is no package, first attempt to instantiate a core analyzer\n        wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(coreClassName);\n        analyzerClassName = coreClassName;\n      } catch (ClassNotFoundException e) {\n        // If this is not a core analyzer, try the base analysis package \n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n        wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(analyzerClassName);\n      }\n    } else {    \n      if (analyzerClassName.startsWith(\"standard.\")) {\n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n      }\n      wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(analyzerClassName);\n    }\n    ShingleAnalyzerWrapper analyzer \n      = new ShingleAnalyzerWrapper(wrappedAnalyzer, maxShingleSize);\n    analyzer.setOutputUnigrams(outputUnigrams);\n    getRunData().setAnalyzer(analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setAnalyzer().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewShingleAnalyzerTask#setAnalyzer().mjava","sourceNew":"  private void setAnalyzer() throws Exception {\n    Analyzer wrappedAnalyzer = null;\n    if (null == analyzerClassName || 0 == analyzerClassName.length()) {\n      analyzerClassName = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n    } \n    if (-1 == analyzerClassName.indexOf(\".\")) {\n      String coreClassName = \"org.apache.lucene.analysis.core.\" + analyzerClassName;\n      try {\n        // If there is no package, first attempt to instantiate a core analyzer\n        wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(coreClassName);\n        analyzerClassName = coreClassName;\n      } catch (ClassNotFoundException e) {\n        // If this is not a core analyzer, try the base analysis package \n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n        wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(analyzerClassName);\n      }\n    } else {    \n      if (analyzerClassName.startsWith(\"standard.\")) {\n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n      }\n      wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(analyzerClassName);\n    }\n    \n    ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(\n        wrappedAnalyzer,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        maxShingleSize,\n        ShingleFilter.TOKEN_SEPARATOR,\n        outputUnigrams,\n        false);\n    getRunData().setAnalyzer(analyzer);\n  }\n\n","sourceOld":"  private void setAnalyzer() throws Exception {\n    Analyzer wrappedAnalyzer = null;\n    if (null == analyzerClassName || 0 == analyzerClassName.length()) {\n      analyzerClassName = \"org.apache.lucene.analysis.standard.StandardAnalyzer\";\n    } \n    if (-1 == analyzerClassName.indexOf(\".\")) {\n      String coreClassName = \"org.apache.lucene.analysis.core.\" + analyzerClassName;\n      try {\n        // If there is no package, first attempt to instantiate a core analyzer\n        wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(coreClassName);\n        analyzerClassName = coreClassName;\n      } catch (ClassNotFoundException e) {\n        // If this is not a core analyzer, try the base analysis package \n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n        wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(analyzerClassName);\n      }\n    } else {    \n      if (analyzerClassName.startsWith(\"standard.\")) {\n        analyzerClassName = \"org.apache.lucene.analysis.\" + analyzerClassName;\n      }\n      wrappedAnalyzer = NewAnalyzerTask.createAnalyzer(analyzerClassName);\n    }\n    \n    ShingleAnalyzerWrapper analyzer = new ShingleAnalyzerWrapper(\n        wrappedAnalyzer,\n        ShingleFilter.DEFAULT_MIN_SHINGLE_SIZE,\n        maxShingleSize,\n        ShingleFilter.TOKEN_SEPARATOR,\n        outputUnigrams,\n        false);\n    getRunData().setAnalyzer(analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["871f13bf1a6255d5315451355f9fd2ebdd84e740"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e900bd4e9633cee011b2c3ae686f3039b7fc0ee":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["70ad682703b8585f5d0a637efec044d57ec05efb","2e900bd4e9633cee011b2c3ae686f3039b7fc0ee"],"871f13bf1a6255d5315451355f9fd2ebdd84e740":["2e900bd4e9633cee011b2c3ae686f3039b7fc0ee"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"45669a651c970812a680841b97a77cce06af559f":["868da859b43505d9d2a023bfeae6dd0c795f5295","2e900bd4e9633cee011b2c3ae686f3039b7fc0ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","2e900bd4e9633cee011b2c3ae686f3039b7fc0ee","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e900bd4e9633cee011b2c3ae686f3039b7fc0ee":["135621f3a0670a9394eb563224a3b76cc4dddc0f","871f13bf1a6255d5315451355f9fd2ebdd84e740","45669a651c970812a680841b97a77cce06af559f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"871f13bf1a6255d5315451355f9fd2ebdd84e740":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["45669a651c970812a680841b97a77cce06af559f"],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}