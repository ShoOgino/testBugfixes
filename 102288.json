{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemmerTest#testStem_simpleSuffix().mjava","commits":[{"id":"8f976917c54bb925b908d73fc4c2092e4abb8508","date":1315634439,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemmerTest#testStem_simpleSuffix().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStem_simpleSuffix() {\n    List<HunspellStemmer.Stem> stems = stemmer.stem(\"lucene\");\n\n    assertEquals(2, stems.size());\n    assertEquals(\"lucene\", stems.get(0).getStemString());\n    assertEquals(\"lucen\", stems.get(1).getStemString());\n\n    stems = stemmer.stem(\"mahoute\");\n    assertEquals(1, stems.size());\n    assertEquals(\"mahout\", stems.get(0).getStemString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemmerTest#testStem_simpleSuffix().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemmerTest#testStem_simpleSuffix().mjava","sourceNew":"  @Test\n  public void testStem_simpleSuffix() {\n    List<HunspellStemmer.Stem> stems = stemmer.stem(\"lucene\");\n\n    assertEquals(2, stems.size());\n    assertEquals(\"lucene\", stems.get(0).getStemString());\n    assertEquals(\"lucen\", stems.get(1).getStemString());\n\n    stems = stemmer.stem(\"mahoute\");\n    assertEquals(1, stems.size());\n    assertEquals(\"mahout\", stems.get(0).getStemString());\n  }\n\n","sourceOld":"  @Test\n  public void testStem_simpleSuffix() {\n    List<HunspellStemmer.Stem> stems = stemmer.stem(\"lucene\");\n\n    assertEquals(2, stems.size());\n    assertEquals(\"lucene\", stems.get(0).getStemString());\n    assertEquals(\"lucen\", stems.get(1).getStemString());\n\n    stems = stemmer.stem(\"mahoute\");\n    assertEquals(1, stems.size());\n    assertEquals(\"mahout\", stems.get(0).getStemString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f976917c54bb925b908d73fc4c2092e4abb8508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"8f976917c54bb925b908d73fc4c2092e4abb8508":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}