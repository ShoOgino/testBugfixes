{"path":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoTailSegments().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoTailSegments().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoTailSegments().mjava","sourceNew":"  // in all the remaining tests, make the doc count of the oldest segment\n  // in dir large so that it is never merged in addIndexesNoOptimize()\n  // case 1: no tail segments\n  public void testNoTailSegments() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n    addDocs(writer, 10);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux });\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(2, writer.getSegmentCount());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1040);\n  }\n\n","sourceOld":"  // in all the remaining tests, make the doc count of the oldest segment\n  // in dir large so that it is never merged in addIndexesNoOptimize()\n  // case 1: no tail segments\n  public void testNoTailSegments() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n    addDocs(writer, 10);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux });\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(2, writer.getSegmentCount());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1040);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoTailSegments().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoTailSegments().mjava","sourceNew":"  // in all the remaining tests, make the doc count of the oldest segment\n  // in dir large so that it is never merged in addIndexesNoOptimize()\n  // case 1: no tail segments\n  public void testNoTailSegments() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n    addDocs(writer, 10);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux });\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(2, writer.getSegmentCount());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1040);\n  }\n\n","sourceOld":"  // in all the remaining tests, make the doc count of the oldest segment\n  // in dir large so that it is never merged in addIndexesNoOptimize()\n  // case 1: no tail segments\n  public void testNoTailSegments() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(4);\n    addDocs(writer, 10);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux });\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(2, writer.getSegmentCount());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1040);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoTailSegments().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoTailSegments().mjava","sourceNew":"  // in all the remaining tests, make the doc count of the oldest segment\n  // in dir large so that it is never merged in addIndexesNoOptimize()\n  // case 1: no tail segments\n  public void testNoTailSegments() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n    addDocs(writer, 10);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux });\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(2, writer.getSegmentCount());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1040);\n  }\n\n","sourceOld":"  // in all the remaining tests, make the doc count of the oldest segment\n  // in dir large so that it is never merged in addIndexesNoOptimize()\n  // case 1: no tail segments\n  public void testNoTailSegments() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n    addDocs(writer, 10);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux });\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(2, writer.getSegmentCount());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1040);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testNoTailSegments().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testNoTailSegments().mjava","sourceNew":"  // in all the remaining tests, make the doc count of the oldest segment\n  // in dir large so that it is never merged in addIndexes()\n  // case 1: no tail segments\n  public void testNoTailSegments() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n    addDocs(writer, 10);\n\n    writer.addIndexes(new Directory[] { aux });\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1040);\n  }\n\n","sourceOld":"  // in all the remaining tests, make the doc count of the oldest segment\n  // in dir large so that it is never merged in addIndexesNoOptimize()\n  // case 1: no tail segments\n  public void testNoTailSegments() throws IOException {\n    // main directory\n    Directory dir = new RAMDirectory();\n    // auxiliary directory\n    Directory aux = new RAMDirectory();\n\n    setUpDirs(dir, aux);\n\n    IndexWriter writer = newWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n    addDocs(writer, 10);\n\n    writer.addIndexesNoOptimize(new Directory[] { aux });\n    assertEquals(1040, writer.maxDoc());\n    assertEquals(2, writer.getSegmentCount());\n    assertEquals(1000, writer.getDocCount(0));\n    writer.close();\n\n    // make sure the index is correct\n    verifyNumDocs(dir, 1040);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["d572389229127c297dd1fa5ce4758e1cec41e799"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d572389229127c297dd1fa5ce4758e1cec41e799":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}