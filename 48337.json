{"path":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-16 characters, followed by the string encoded\n   * in modified-UTF8\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    // Can't use string serialization or toUTF()... it's limited to 64K\n    // plus it's bigger than it needs to be for small strings anyway\n    int len = s.length();\n    writeTag(STR, len);\n    writeChars(daos, s, 0, len);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-16 characters, followed by the string encoded\n   * in modified-UTF8\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    // Can't use string serialization or toUTF()... it's limited to 64K\n    // plus it's bigger than it needs to be for small strings anyway\n    int len = s.length();\n    writeTag(STR, len);\n    writeChars(daos, s, 0, len);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","pathOld":"src/common/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-16 characters, followed by the string encoded\n   * in modified-UTF8\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    // Can't use string serialization or toUTF()... it's limited to 64K\n    // plus it's bigger than it needs to be for small strings anyway\n    int len = s.length();\n    writeTag(STR, len);\n    writeChars(daos, s, 0, len);\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-16 characters, followed by the string encoded\n   * in modified-UTF8\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    // Can't use string serialization or toUTF()... it's limited to 64K\n    // plus it's bigger than it needs to be for small strings anyway\n    int len = s.length();\n    writeTag(STR, len);\n    writeChars(daos, s, 0, len);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-16 characters, followed by the string encoded\n   * in modified-UTF8\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    // Can't use string serialization or toUTF()... it's limited to 64K\n    // plus it's bigger than it needs to be for small strings anyway\n    int len = s.length();\n    writeTag(STR, len);\n    writeChars(daos, s, 0, len);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"75db8ef3eec8aa3c49d42c476471ae9935bbdc6c","date":1282923617,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int upto = 0;\n    for(int i=0;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        bytes[upto++] = (byte) code;\n      else if (code < 0x800) {\n        bytes[upto++] = (byte) (0xC0 | (code >> 6));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        bytes[upto++] = (byte)(0xE0 | (code >> 12));\n        bytes[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            bytes[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        bytes[upto++] = (byte) 0xEF;\n        bytes[upto++] = (byte) 0xBF;\n        bytes[upto++] = (byte) 0xBD;\n      }\n    }\n    writeTag(STR, upto);\n    daos.write(bytes, 0, upto);\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-16 characters, followed by the string encoded\n   * in modified-UTF8\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    // Can't use string serialization or toUTF()... it's limited to 64K\n    // plus it's bigger than it needs to be for small strings anyway\n    int len = s.length();\n    writeTag(STR, len);\n    writeChars(daos, s, 0, len);\n  }\n\n","bugFix":["da0acfe5ceed804451d76c8f887855b3d060e132","18a1b51b47d1035bf90ecfc7d16c739fe983647a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int upto = 0;\n    for(int i=0;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        bytes[upto++] = (byte) code;\n      else if (code < 0x800) {\n        bytes[upto++] = (byte) (0xC0 | (code >> 6));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        bytes[upto++] = (byte)(0xE0 | (code >> 12));\n        bytes[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            bytes[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        bytes[upto++] = (byte) 0xEF;\n        bytes[upto++] = (byte) 0xBF;\n        bytes[upto++] = (byte) 0xBD;\n      }\n    }\n    writeTag(STR, upto);\n    daos.write(bytes, 0, upto);\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-16 characters, followed by the string encoded\n   * in modified-UTF8\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    // Can't use string serialization or toUTF()... it's limited to 64K\n    // plus it's bigger than it needs to be for small strings anyway\n    int len = s.length();\n    writeTag(STR, len);\n    writeChars(daos, s, 0, len);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int upto = 0;\n    for(int i=0;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        bytes[upto++] = (byte) code;\n      else if (code < 0x800) {\n        bytes[upto++] = (byte) (0xC0 | (code >> 6));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        bytes[upto++] = (byte)(0xE0 | (code >> 12));\n        bytes[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            bytes[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        bytes[upto++] = (byte) 0xEF;\n        bytes[upto++] = (byte) 0xBF;\n        bytes[upto++] = (byte) 0xBD;\n      }\n    }\n    writeTag(STR, upto);\n    daos.write(bytes, 0, upto);\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int upto = 0;\n    for(int i=0;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        bytes[upto++] = (byte) code;\n      else if (code < 0x800) {\n        bytes[upto++] = (byte) (0xC0 | (code >> 6));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        bytes[upto++] = (byte)(0xE0 | (code >> 12));\n        bytes[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            bytes[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        bytes[upto++] = (byte) 0xEF;\n        bytes[upto++] = (byte) 0xBF;\n        bytes[upto++] = (byte) 0xBD;\n      }\n    }\n    writeTag(STR, upto);\n    daos.write(bytes, 0, upto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int upto = 0;\n    for(int i=0;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        bytes[upto++] = (byte) code;\n      else if (code < 0x800) {\n        bytes[upto++] = (byte) (0xC0 | (code >> 6));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        bytes[upto++] = (byte)(0xE0 | (code >> 12));\n        bytes[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            bytes[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        bytes[upto++] = (byte) 0xEF;\n        bytes[upto++] = (byte) 0xBF;\n        bytes[upto++] = (byte) 0xBD;\n      }\n    }\n    writeTag(STR, upto);\n    daos.write(bytes, 0, upto);\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int upto = 0;\n    for(int i=0;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        bytes[upto++] = (byte) code;\n      else if (code < 0x800) {\n        bytes[upto++] = (byte) (0xC0 | (code >> 6));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        bytes[upto++] = (byte)(0xE0 | (code >> 12));\n        bytes[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            bytes[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        bytes[upto++] = (byte) 0xEF;\n        bytes[upto++] = (byte) 0xBF;\n        bytes[upto++] = (byte) 0xBD;\n      }\n    }\n    writeTag(STR, upto);\n    daos.write(bytes, 0, upto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int upto = 0;\n    for(int i=0;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        bytes[upto++] = (byte) code;\n      else if (code < 0x800) {\n        bytes[upto++] = (byte) (0xC0 | (code >> 6));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        bytes[upto++] = (byte)(0xE0 | (code >> 12));\n        bytes[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            bytes[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        bytes[upto++] = (byte) 0xEF;\n        bytes[upto++] = (byte) 0xBF;\n        bytes[upto++] = (byte) 0xBD;\n      }\n    }\n    writeTag(STR, upto);\n    daos.write(bytes, 0, upto);\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int upto = 0;\n    for(int i=0;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        bytes[upto++] = (byte) code;\n      else if (code < 0x800) {\n        bytes[upto++] = (byte) (0xC0 | (code >> 6));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        bytes[upto++] = (byte)(0xE0 | (code >> 12));\n        bytes[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            bytes[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        bytes[upto++] = (byte) 0xEF;\n        bytes[upto++] = (byte) 0xBF;\n        bytes[upto++] = (byte) 0xBD;\n      }\n    }\n    writeTag(STR, upto);\n    daos.write(bytes, 0, upto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["75db8ef3eec8aa3c49d42c476471ae9935bbdc6c"],"75db8ef3eec8aa3c49d42c476471ae9935bbdc6c":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["75db8ef3eec8aa3c49d42c476471ae9935bbdc6c","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["75db8ef3eec8aa3c49d42c476471ae9935bbdc6c"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","75db8ef3eec8aa3c49d42c476471ae9935bbdc6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["75db8ef3eec8aa3c49d42c476471ae9935bbdc6c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"75db8ef3eec8aa3c49d42c476471ae9935bbdc6c":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}