{"path":"src/java/org/apache/lucene/index/MultiLevelSkipListReader#loadSkipLevels().mjava","commits":[{"id":"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709","date":1180597733,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiLevelSkipListReader#loadSkipLevels().mjava","pathOld":"/dev/null","sourceNew":"  /** Loads the skip levels  */\r\n  private void loadSkipLevels() throws IOException {\r\n    numberOfSkipLevels = docCount == 0 ? 0 : (int) Math.floor(Math.log(docCount) / Math.log(skipInterval[0]));\r\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\r\n      numberOfSkipLevels = maxNumberOfSkipLevels;\r\n    }\r\n\r\n    skipStream[0].seek(skipPointer[0]);\r\n    \r\n    int toBuffer = numberOfLevelsToBuffer;\r\n    \r\n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\r\n      // the length of the current level\r\n      long length = skipStream[0].readVLong();\r\n      \r\n      // the start pointer of the current level\r\n      skipPointer[i] = skipStream[0].getFilePointer();\r\n      if (toBuffer > 0) {\r\n        // buffer this level\r\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\r\n        toBuffer--;\r\n      } else {\r\n        // clone this stream, it is already at the start of the current level\r\n        skipStream[i] = (IndexInput) skipStream[0].clone();\r\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\r\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\r\n        }\r\n        \r\n        // move base stream beyond the current level\r\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\r\n      }\r\n    }\r\n   \r\n    // use base stream for the lowest level\r\n    skipPointer[0] = skipStream[0].getFilePointer();\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiLevelSkipListReader#loadSkipLevels().mjava","pathOld":"src/java/org/apache/lucene/index/MultiLevelSkipListReader#loadSkipLevels().mjava","sourceNew":"  /** Loads the skip levels  */\n  private void loadSkipLevels() throws IOException {\n    numberOfSkipLevels = docCount == 0 ? 0 : (int) Math.floor(Math.log(docCount) / Math.log(skipInterval[0]));\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\n      numberOfSkipLevels = maxNumberOfSkipLevels;\n    }\n\n    skipStream[0].seek(skipPointer[0]);\n    \n    int toBuffer = numberOfLevelsToBuffer;\n    \n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\n      // the length of the current level\n      long length = skipStream[0].readVLong();\n      \n      // the start pointer of the current level\n      skipPointer[i] = skipStream[0].getFilePointer();\n      if (toBuffer > 0) {\n        // buffer this level\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\n        toBuffer--;\n      } else {\n        // clone this stream, it is already at the start of the current level\n        skipStream[i] = (IndexInput) skipStream[0].clone();\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\n        }\n        \n        // move base stream beyond the current level\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\n      }\n    }\n   \n    // use base stream for the lowest level\n    skipPointer[0] = skipStream[0].getFilePointer();\n  }\n\n","sourceOld":"  /** Loads the skip levels  */\r\n  private void loadSkipLevels() throws IOException {\r\n    numberOfSkipLevels = docCount == 0 ? 0 : (int) Math.floor(Math.log(docCount) / Math.log(skipInterval[0]));\r\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\r\n      numberOfSkipLevels = maxNumberOfSkipLevels;\r\n    }\r\n\r\n    skipStream[0].seek(skipPointer[0]);\r\n    \r\n    int toBuffer = numberOfLevelsToBuffer;\r\n    \r\n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\r\n      // the length of the current level\r\n      long length = skipStream[0].readVLong();\r\n      \r\n      // the start pointer of the current level\r\n      skipPointer[i] = skipStream[0].getFilePointer();\r\n      if (toBuffer > 0) {\r\n        // buffer this level\r\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\r\n        toBuffer--;\r\n      } else {\r\n        // clone this stream, it is already at the start of the current level\r\n        skipStream[i] = (IndexInput) skipStream[0].clone();\r\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\r\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\r\n        }\r\n        \r\n        // move base stream beyond the current level\r\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\r\n      }\r\n    }\r\n   \r\n    // use base stream for the lowest level\r\n    skipPointer[0] = skipStream[0].getFilePointer();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiLevelSkipListReader#loadSkipLevels().mjava","pathOld":"src/java/org/apache/lucene/index/MultiLevelSkipListReader#loadSkipLevels().mjava","sourceNew":"  /** Loads the skip levels  */\n  private void loadSkipLevels() throws IOException {\n    numberOfSkipLevels = docCount == 0 ? 0 : (int) Math.floor(Math.log(docCount) / Math.log(skipInterval[0]));\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\n      numberOfSkipLevels = maxNumberOfSkipLevels;\n    }\n\n    skipStream[0].seek(skipPointer[0]);\n    \n    int toBuffer = numberOfLevelsToBuffer;\n    \n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\n      // the length of the current level\n      long length = skipStream[0].readVLong();\n      \n      // the start pointer of the current level\n      skipPointer[i] = skipStream[0].getFilePointer();\n      if (toBuffer > 0) {\n        // buffer this level\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\n        toBuffer--;\n      } else {\n        // clone this stream, it is already at the start of the current level\n        skipStream[i] = (IndexInput) skipStream[0].clone();\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\n        }\n        \n        // move base stream beyond the current level\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\n      }\n    }\n   \n    // use base stream for the lowest level\n    skipPointer[0] = skipStream[0].getFilePointer();\n  }\n\n","sourceOld":"  /** Loads the skip levels  */\n  private void loadSkipLevels() throws IOException {\n    numberOfSkipLevels = docCount == 0 ? 0 : (int) Math.floor(Math.log(docCount) / Math.log(skipInterval[0]));\n    if (numberOfSkipLevels > maxNumberOfSkipLevels) {\n      numberOfSkipLevels = maxNumberOfSkipLevels;\n    }\n\n    skipStream[0].seek(skipPointer[0]);\n    \n    int toBuffer = numberOfLevelsToBuffer;\n    \n    for (int i = numberOfSkipLevels - 1; i > 0; i--) {\n      // the length of the current level\n      long length = skipStream[0].readVLong();\n      \n      // the start pointer of the current level\n      skipPointer[i] = skipStream[0].getFilePointer();\n      if (toBuffer > 0) {\n        // buffer this level\n        skipStream[i] = new SkipBuffer(skipStream[0], (int) length);\n        toBuffer--;\n      } else {\n        // clone this stream, it is already at the start of the current level\n        skipStream[i] = (IndexInput) skipStream[0].clone();\n        if (inputIsBuffered && length < BufferedIndexInput.BUFFER_SIZE) {\n          ((BufferedIndexInput) skipStream[i]).setBufferSize((int) length);\n        }\n        \n        // move base stream beyond the current level\n        skipStream[0].seek(skipStream[0].getFilePointer() + length);\n      }\n    }\n   \n    // use base stream for the lowest level\n    skipPointer[0] = skipStream[0].getFilePointer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["08d1ee9808e270c86ce5c9be08b8bd7a19d0a709"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2123bddbd65dea198cac380540636ce43a880403"],"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08d1ee9808e270c86ce5c9be08b8bd7a19d0a709"],"2123bddbd65dea198cac380540636ce43a880403":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709":["2123bddbd65dea198cac380540636ce43a880403"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}