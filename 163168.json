{"path":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#doTimeoutTests().mjava","commits":[{"id":"eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e","date":1411674127,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#doTimeoutTests().mjava","pathOld":"/dev/null","sourceNew":"  public void doTimeoutTests() throws Exception {\n    assertFail(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    long oneSecond = 1000L; // query rewriting for NUM_DOCS_PER_TYPE terms should take less time than this\n    Long timeAllowed = TestUtil.nextLong(random(), oneSecond, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:a*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertFail(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    timeAllowed = TestUtil.nextLong(random(), oneSecond, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    timeAllowed = TestUtil.nextLong(random(), Long.MIN_VALUE, -1L);  // negative timeAllowed should disable timeouts\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertSuccess(params(\"q\",\"name:b*\")); // no time limitation\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2df5da9b9a665127f75b19af580e9df62caced1d","4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da951a24a6a87d5ba7e1820f8c28a1e2beea76c1","date":1411744836,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#doTimeoutTests().mjava","pathOld":"/dev/null","sourceNew":"  public void doTimeoutTests() throws Exception {\n    assertFail(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    long oneSecond = 1000L; // query rewriting for NUM_DOCS_PER_TYPE terms should take less time than this\n    Long timeAllowed = TestUtil.nextLong(random(), oneSecond, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:a*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertFail(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    timeAllowed = TestUtil.nextLong(random(), oneSecond, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    timeAllowed = TestUtil.nextLong(random(), Long.MIN_VALUE, -1L);  // negative timeAllowed should disable timeouts\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertSuccess(params(\"q\",\"name:b*\")); // no time limitation\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41caecdd537fce144a1c27219d0e2aca99573c89","date":1412281841,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#doTimeoutTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#doTimeoutTests().mjava","sourceNew":"  public void doTimeoutTests() throws Exception {\n    assertFail(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    /*\n    query rewriting for NUM_DOCS_PER_TYPE terms should take less \n    time than this. Keeping it at 5 because the delaying search component delays all requests \n    by at 1 second.\n     */\n    long fiveSeconds = 5000L;\n    \n    Long timeAllowed = TestUtil.nextLong(random(), fiveSeconds, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:a*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertFail(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    timeAllowed = TestUtil.nextLong(random(), fiveSeconds, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    timeAllowed = TestUtil.nextLong(random(), Long.MIN_VALUE, -1L);  // negative timeAllowed should disable timeouts\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertSuccess(params(\"q\",\"name:b*\")); // no time limitation\n  }\n\n","sourceOld":"  public void doTimeoutTests() throws Exception {\n    assertFail(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    long oneSecond = 1000L; // query rewriting for NUM_DOCS_PER_TYPE terms should take less time than this\n    Long timeAllowed = TestUtil.nextLong(random(), oneSecond, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:a*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertFail(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    timeAllowed = TestUtil.nextLong(random(), oneSecond, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    timeAllowed = TestUtil.nextLong(random(), Long.MIN_VALUE, -1L);  // negative timeAllowed should disable timeouts\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertSuccess(params(\"q\",\"name:b*\")); // no time limitation\n  }\n\n","bugFix":null,"bugIntro":["2df5da9b9a665127f75b19af580e9df62caced1d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#doTimeoutTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#doTimeoutTests().mjava","sourceNew":"  public void doTimeoutTests() throws Exception {\n    assertFail(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    /*\n    query rewriting for NUM_DOCS_PER_TYPE terms should take less \n    time than this. Keeping it at 5 because the delaying search component delays all requests \n    by at 1 second.\n     */\n    long fiveSeconds = 5000L;\n    \n    Long timeAllowed = TestUtil.nextLong(random(), fiveSeconds, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:a*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertFail(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    timeAllowed = TestUtil.nextLong(random(), fiveSeconds, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    timeAllowed = TestUtil.nextLong(random(), Long.MIN_VALUE, -1L);  // negative timeAllowed should disable timeouts\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertSuccess(params(\"q\",\"name:b*\")); // no time limitation\n  }\n\n","sourceOld":"  public void doTimeoutTests() throws Exception {\n    assertFail(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    long oneSecond = 1000L; // query rewriting for NUM_DOCS_PER_TYPE terms should take less time than this\n    Long timeAllowed = TestUtil.nextLong(random(), oneSecond, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:a*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertFail(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    timeAllowed = TestUtil.nextLong(random(), oneSecond, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    timeAllowed = TestUtil.nextLong(random(), Long.MIN_VALUE, -1L);  // negative timeAllowed should disable timeouts\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertSuccess(params(\"q\",\"name:b*\")); // no time limitation\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f001da93ec624cbfbf3655c529836b5b1ec1aa46","date":1412885266,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#doTimeoutTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#doTimeoutTests().mjava","sourceNew":"  public void doTimeoutTests() throws Exception {\n    assertPartialResults(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    /*\n    query rewriting for NUM_DOCS_PER_TYPE terms should take less \n    time than this. Keeping it at 5 because the delaying search component delays all requests \n    by at 1 second.\n     */\n    long fiveSeconds = 5000L;\n    \n    Long timeAllowed = TestUtil.nextLong(random(), fiveSeconds, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:a*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertPartialResults(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    timeAllowed = TestUtil.nextLong(random(), fiveSeconds, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    timeAllowed = TestUtil.nextLong(random(), Long.MIN_VALUE, -1L);  // negative timeAllowed should disable timeouts\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertSuccess(params(\"q\",\"name:b*\")); // no time limitation\n  }\n\n","sourceOld":"  public void doTimeoutTests() throws Exception {\n    assertFail(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    /*\n    query rewriting for NUM_DOCS_PER_TYPE terms should take less \n    time than this. Keeping it at 5 because the delaying search component delays all requests \n    by at 1 second.\n     */\n    long fiveSeconds = 5000L;\n    \n    Long timeAllowed = TestUtil.nextLong(random(), fiveSeconds, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:a*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertFail(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    timeAllowed = TestUtil.nextLong(random(), fiveSeconds, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    timeAllowed = TestUtil.nextLong(random(), Long.MIN_VALUE, -1L);  // negative timeAllowed should disable timeouts\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertSuccess(params(\"q\",\"name:b*\")); // no time limitation\n  }\n\n","bugFix":null,"bugIntro":["4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#doTimeoutTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#doTimeoutTests().mjava","sourceNew":"  public void doTimeoutTests() throws Exception {\n    assertPartialResults(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    /*\n    query rewriting for NUM_DOCS_PER_TYPE terms should take less \n    time than this. Keeping it at 5 because the delaying search component delays all requests \n    by at 1 second.\n     */\n    long fiveSeconds = 5000L;\n    \n    Long timeAllowed = TestUtil.nextLong(random(), fiveSeconds, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:a*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertPartialResults(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    timeAllowed = TestUtil.nextLong(random(), fiveSeconds, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    timeAllowed = TestUtil.nextLong(random(), Long.MIN_VALUE, -1L);  // negative timeAllowed should disable timeouts\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertSuccess(params(\"q\",\"name:b*\")); // no time limitation\n  }\n\n","sourceOld":"  public void doTimeoutTests() throws Exception {\n    assertFail(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    /*\n    query rewriting for NUM_DOCS_PER_TYPE terms should take less \n    time than this. Keeping it at 5 because the delaying search component delays all requests \n    by at 1 second.\n     */\n    long fiveSeconds = 5000L;\n    \n    Long timeAllowed = TestUtil.nextLong(random(), fiveSeconds, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:a*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertFail(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    timeAllowed = TestUtil.nextLong(random(), fiveSeconds, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    timeAllowed = TestUtil.nextLong(random(), Long.MIN_VALUE, -1L);  // negative timeAllowed should disable timeouts\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertSuccess(params(\"q\",\"name:b*\")); // no time limitation\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2df5da9b9a665127f75b19af580e9df62caced1d","date":1421106730,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#doTimeoutTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#doTimeoutTests().mjava","sourceNew":"  public void doTimeoutTests() throws Exception {\n    assertPartialResults(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    /*\n    query rewriting for NUM_DOCS_PER_TYPE terms should take less \n    time than this. Keeping it at 5 because the delaying search component delays all requests \n    by at 1 second.\n     */\n    int fiveSeconds = 5000;\n    \n    Integer timeAllowed = TestUtil.nextInt(random(), fiveSeconds, Integer.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:a*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertPartialResults(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    timeAllowed = TestUtil.nextInt(random(), fiveSeconds, Integer.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    // negative timeAllowed should disable timeouts\n    timeAllowed = TestUtil.nextInt(random(), Integer.MIN_VALUE, -1); \n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertSuccess(params(\"q\",\"name:b*\")); // no time limitation\n  }\n\n","sourceOld":"  public void doTimeoutTests() throws Exception {\n    assertPartialResults(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    /*\n    query rewriting for NUM_DOCS_PER_TYPE terms should take less \n    time than this. Keeping it at 5 because the delaying search component delays all requests \n    by at 1 second.\n     */\n    long fiveSeconds = 5000L;\n    \n    Long timeAllowed = TestUtil.nextLong(random(), fiveSeconds, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:a*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertPartialResults(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    timeAllowed = TestUtil.nextLong(random(), fiveSeconds, Long.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    timeAllowed = TestUtil.nextLong(random(), Long.MIN_VALUE, -1L);  // negative timeAllowed should disable timeouts\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertSuccess(params(\"q\",\"name:b*\")); // no time limitation\n  }\n\n","bugFix":["eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e","41caecdd537fce144a1c27219d0e2aca99573c89"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4801fd4ad4830fcde9b6ed9024c04839ade25e42","date":1441807244,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#doTimeoutTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#doTimeoutTests().mjava","sourceNew":"  public void doTimeoutTests() throws Exception {\n    assertPartialResults(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n\n    /*\n    query rewriting for NUM_DOCS_PER_TYPE terms should take less \n    time than this. Keeping it at 5 because the delaying search component delays all requests \n    by at 1 second.\n     */\n    int fiveSeconds = 5000;\n    \n    Integer timeAllowed = TestUtil.nextInt(random(), fiveSeconds, Integer.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:a*\", \"timeAllowed\", timeAllowed.toString()));\n\n    assertPartialResults(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n\n    timeAllowed = TestUtil.nextInt(random(), fiveSeconds, Integer.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    // negative timeAllowed should disable timeouts\n    timeAllowed = TestUtil.nextInt(random(), Integer.MIN_VALUE, -1); \n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertSuccess(params(\"q\",\"name:b*\")); // no time limitation\n  }\n\n","sourceOld":"  public void doTimeoutTests() throws Exception {\n    assertPartialResults(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    /*\n    query rewriting for NUM_DOCS_PER_TYPE terms should take less \n    time than this. Keeping it at 5 because the delaying search component delays all requests \n    by at 1 second.\n     */\n    int fiveSeconds = 5000;\n    \n    Integer timeAllowed = TestUtil.nextInt(random(), fiveSeconds, Integer.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:a*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertPartialResults(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\"));\n\n    timeAllowed = TestUtil.nextInt(random(), fiveSeconds, Integer.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    // negative timeAllowed should disable timeouts\n    timeAllowed = TestUtil.nextInt(random(), Integer.MIN_VALUE, -1); \n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertSuccess(params(\"q\",\"name:b*\")); // no time limitation\n  }\n\n","bugFix":["eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e","f001da93ec624cbfbf3655c529836b5b1ec1aa46"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3584d3db8b472772e3329d9d95d584b68ae997e","date":1551710517,"type":4,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#doTimeoutTests().mjava","sourceNew":null,"sourceOld":"  public void doTimeoutTests() throws Exception {\n    assertPartialResults(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n\n    /*\n    query rewriting for NUM_DOCS_PER_TYPE terms should take less \n    time than this. Keeping it at 5 because the delaying search component delays all requests \n    by at 1 second.\n     */\n    int fiveSeconds = 5000;\n    \n    Integer timeAllowed = TestUtil.nextInt(random(), fiveSeconds, Integer.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:a*\", \"timeAllowed\", timeAllowed.toString()));\n\n    assertPartialResults(params(\"q\", \"name:a*\", \"timeAllowed\", \"1\", \"sleep\", sleep));\n\n    timeAllowed = TestUtil.nextInt(random(), fiveSeconds, Integer.MAX_VALUE);\n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    // negative timeAllowed should disable timeouts\n    timeAllowed = TestUtil.nextInt(random(), Integer.MIN_VALUE, -1); \n    assertSuccess(params(\"q\", \"name:b*\", \"timeAllowed\",timeAllowed.toString()));\n\n    assertSuccess(params(\"q\",\"name:b*\")); // no time limitation\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2df5da9b9a665127f75b19af580e9df62caced1d":["f001da93ec624cbfbf3655c529836b5b1ec1aa46"],"eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55980207f1977bd1463465de1659b821347e2fa8":["d9a47902d6207303f5ed3e7aaca62ca33433af66","f001da93ec624cbfbf3655c529836b5b1ec1aa46"],"da951a24a6a87d5ba7e1820f8c28a1e2beea76c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e"],"f001da93ec624cbfbf3655c529836b5b1ec1aa46":["41caecdd537fce144a1c27219d0e2aca99573c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["da951a24a6a87d5ba7e1820f8c28a1e2beea76c1","41caecdd537fce144a1c27219d0e2aca99573c89"],"a3584d3db8b472772e3329d9d95d584b68ae997e":["4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"4801fd4ad4830fcde9b6ed9024c04839ade25e42":["2df5da9b9a665127f75b19af580e9df62caced1d"],"41caecdd537fce144a1c27219d0e2aca99573c89":["eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3584d3db8b472772e3329d9d95d584b68ae997e"]},"commit2Childs":{"2df5da9b9a665127f75b19af580e9df62caced1d":["4801fd4ad4830fcde9b6ed9024c04839ade25e42"],"eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e":["da951a24a6a87d5ba7e1820f8c28a1e2beea76c1","41caecdd537fce144a1c27219d0e2aca99573c89"],"55980207f1977bd1463465de1659b821347e2fa8":[],"da951a24a6a87d5ba7e1820f8c28a1e2beea76c1":["d9a47902d6207303f5ed3e7aaca62ca33433af66"],"f001da93ec624cbfbf3655c529836b5b1ec1aa46":["2df5da9b9a665127f75b19af580e9df62caced1d","55980207f1977bd1463465de1659b821347e2fa8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e","da951a24a6a87d5ba7e1820f8c28a1e2beea76c1"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["55980207f1977bd1463465de1659b821347e2fa8"],"a3584d3db8b472772e3329d9d95d584b68ae997e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4801fd4ad4830fcde9b6ed9024c04839ade25e42":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"41caecdd537fce144a1c27219d0e2aca99573c89":["f001da93ec624cbfbf3655c529836b5b1ec1aa46","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}