{"path":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUserAndTestDefaultConfigsetsAreSame().mjava","commits":[{"id":"3dc9e1a7a552fea4325daea83bc538ea4a481aad","date":1498713374,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUserAndTestDefaultConfigsetsAreSame().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUserAndTestDefaultConfigsetsAreSame() throws IOException {\n    File testDefaultConf = configset(\"_default\").toFile();\n    log.info(\"Test _default path: \" + testDefaultConf);\n    \n    File userDefaultConf = new File(ExternalPaths.DEFAULT_CONFIGSET);\n    log.info(\"User _default path: \" + userDefaultConf);\n    \n    compareDirectories(userDefaultConf, testDefaultConf);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUserAndTestDefaultConfigsetsAreSame().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUserAndTestDefaultConfigsetsAreSame() throws IOException {\n    File testDefaultConf = configset(\"_default\").toFile();\n    log.info(\"Test _default path: \" + testDefaultConf);\n    \n    File userDefaultConf = new File(ExternalPaths.DEFAULT_CONFIGSET);\n    log.info(\"User _default path: \" + userDefaultConf);\n    \n    compareDirectories(userDefaultConf, testDefaultConf);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUserAndTestDefaultConfigsetsAreSame().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUserAndTestDefaultConfigsetsAreSame() throws IOException {\n    File testDefaultConf = configset(\"_default\").toFile();\n    log.info(\"Test _default path: \" + testDefaultConf);\n    \n    File userDefaultConf = new File(ExternalPaths.DEFAULT_CONFIGSET);\n    log.info(\"User _default path: \" + userDefaultConf);\n    \n    compareDirectories(userDefaultConf, testDefaultConf);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbb2d9cb96e731a93749beccbf9d0a5e4849cae2","date":1581705413,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUserAndTestDefaultConfigsetsAreSame().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testUserAndTestDefaultConfigsetsAreSame().mjava","sourceNew":"  /**\n   * A simple sanity check that the test-framework hueristic logic for setting \n   * {@link ExternalPaths#DEFAULT_CONFIGSET} is working as it should \n   * in the current test env, and finding the real directory which matches what {@link ZkController}\n   * finds and uses to bootstrap ZK in cloud based tests.\n   *\n   * <p>\n   * This assumes the {@link SolrDispatchFilter#SOLR_DEFAULT_CONFDIR_ATTRIBUTE} system property \n   * has not been externally set in the environment where this test is being run -- which should \n   * <b>never</b> be the case, since it would prevent the test-framework from using \n   * {@link ExternalPaths#DEFAULT_CONFIGSET}\n   *\n   * @see SolrDispatchFilter#SOLR_DEFAULT_CONFDIR_ATTRIBUTE\n   * @see #setDefaultConfigDirSysPropIfNotSet\n   * @see ZkController#getDefaultConfigDirPath\n   */\n  @Test\n  public void testUserAndTestDefaultConfigsetsAreSame() throws IOException {\n    final File extPath = new File(ExternalPaths.DEFAULT_CONFIGSET);\n    assertTrue(\"_default dir doesn't exist: \" + ExternalPaths.DEFAULT_CONFIGSET, extPath.exists());\n    assertTrue(\"_default dir isn't a dir: \" + ExternalPaths.DEFAULT_CONFIGSET, extPath.isDirectory());\n    \n    final String zkBootStrap = ZkController.getDefaultConfigDirPath();\n    assertEquals(\"extPath _default configset dir vs zk bootstrap path\",\n                 ExternalPaths.DEFAULT_CONFIGSET, zkBootStrap);\n  }\n\n","sourceOld":"  @Test\n  public void testUserAndTestDefaultConfigsetsAreSame() throws IOException {\n    File testDefaultConf = configset(\"_default\").toFile();\n    log.info(\"Test _default path: \" + testDefaultConf);\n    \n    File userDefaultConf = new File(ExternalPaths.DEFAULT_CONFIGSET);\n    log.info(\"User _default path: \" + userDefaultConf);\n    \n    compareDirectories(userDefaultConf, testDefaultConf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3dc9e1a7a552fea4325daea83bc538ea4a481aad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cbb2d9cb96e731a93749beccbf9d0a5e4849cae2":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3dc9e1a7a552fea4325daea83bc538ea4a481aad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cbb2d9cb96e731a93749beccbf9d0a5e4849cae2"]},"commit2Childs":{"3dc9e1a7a552fea4325daea83bc538ea4a481aad":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dc9e1a7a552fea4325daea83bc538ea4a481aad","30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a"],"cbb2d9cb96e731a93749beccbf9d0a5e4849cae2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30c8e5574b55d57947e989443dfde611646530ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cbb2d9cb96e731a93749beccbf9d0a5e4849cae2","30c8e5574b55d57947e989443dfde611646530ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}