{"path":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#shapeToString(Shape).mjava","commits":[{"id":"c11e1d33f2ba742976268153f6edd2d29710cf69","date":1347851822,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#shapeToString(Shape).mjava","pathOld":"/dev/null","sourceNew":"  protected String shapeToString(Shape shape) {\n    return ctx.toString(shape);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#shapeToString(Shape).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#shapeToString(Shape).mjava","sourceNew":"  /**\n   * Returns a String version of a shape to be used for the stored value. This method in Solr is only called if for some\n   * reason a Shape object is passed to the field type (perhaps via a custom UpdateRequestProcessor),\n   * *and* the field is marked as stored.  <em>The default implementation throws an exception.</em>\n   * <p/>\n   * Spatial4j 0.4 is probably the last release to support SpatialContext.toString(shape) but it's deprecated with no\n   * planned replacement.  Shapes do have a toString() method but they are generally internal/diagnostic and not\n   * standard WKT.\n   * The solution is subclassing and calling ctx.toString(shape) or directly using LegacyShapeReadWriterFormat or\n   * passing in some sort of custom wrapped shape that holds a reference to a String or can generate it.\n   */\n  protected String shapeToString(Shape shape) {\n//    return ctx.toString(shape);\n    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Getting a String from a Shape is no longer possible. See javadocs for commentary.\");\n  }\n\n","sourceOld":"  protected String shapeToString(Shape shape) {\n    return ctx.toString(shape);\n  }\n\n","bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#shapeToString(Shape).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#shapeToString(Shape).mjava","sourceNew":"  /**\n   * Returns a String version of a shape to be used for the stored value. This method in Solr is only called if for some\n   * reason a Shape object is passed to the field type (perhaps via a custom UpdateRequestProcessor),\n   * *and* the field is marked as stored.  <em>The default implementation throws an exception.</em>\n   * <p>\n   * Spatial4j 0.4 is probably the last release to support SpatialContext.toString(shape) but it's deprecated with no\n   * planned replacement.  Shapes do have a toString() method but they are generally internal/diagnostic and not\n   * standard WKT.\n   * The solution is subclassing and calling ctx.toString(shape) or directly using LegacyShapeReadWriterFormat or\n   * passing in some sort of custom wrapped shape that holds a reference to a String or can generate it.\n   */\n  protected String shapeToString(Shape shape) {\n//    return ctx.toString(shape);\n    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Getting a String from a Shape is no longer possible. See javadocs for commentary.\");\n  }\n\n","sourceOld":"  /**\n   * Returns a String version of a shape to be used for the stored value. This method in Solr is only called if for some\n   * reason a Shape object is passed to the field type (perhaps via a custom UpdateRequestProcessor),\n   * *and* the field is marked as stored.  <em>The default implementation throws an exception.</em>\n   * <p/>\n   * Spatial4j 0.4 is probably the last release to support SpatialContext.toString(shape) but it's deprecated with no\n   * planned replacement.  Shapes do have a toString() method but they are generally internal/diagnostic and not\n   * standard WKT.\n   * The solution is subclassing and calling ctx.toString(shape) or directly using LegacyShapeReadWriterFormat or\n   * passing in some sort of custom wrapped shape that holds a reference to a String or can generate it.\n   */\n  protected String shapeToString(Shape shape) {\n//    return ctx.toString(shape);\n    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Getting a String from a Shape is no longer possible. See javadocs for commentary.\");\n  }\n\n","bugFix":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03d8df7e95735d8cda6a255c42e0997c699bb176","date":1458157920,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#shapeToString(Shape).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#shapeToString(Shape).mjava","sourceNew":"  /**\n   * Returns a String version of a shape to be used for the stored value.\n   *\n   * The format can be selected using the initParam <code>format={WKT|GeoJSON}</code>\n   */\n  public String shapeToString(Shape shape) {\n    if(shapeWriter!=null) {\n      return shapeWriter.toString(shape);\n    }\n    // This will only happen if the context does not have any writers\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"ShapeWriter not configured\");\n  }\n\n","sourceOld":"  /**\n   * Returns a String version of a shape to be used for the stored value. This method in Solr is only called if for some\n   * reason a Shape object is passed to the field type (perhaps via a custom UpdateRequestProcessor),\n   * *and* the field is marked as stored.  <em>The default implementation throws an exception.</em>\n   * <p>\n   * Spatial4j 0.4 is probably the last release to support SpatialContext.toString(shape) but it's deprecated with no\n   * planned replacement.  Shapes do have a toString() method but they are generally internal/diagnostic and not\n   * standard WKT.\n   * The solution is subclassing and calling ctx.toString(shape) or directly using LegacyShapeReadWriterFormat or\n   * passing in some sort of custom wrapped shape that holds a reference to a String or can generate it.\n   */\n  protected String shapeToString(Shape shape) {\n//    return ctx.toString(shape);\n    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Getting a String from a Shape is no longer possible. See javadocs for commentary.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23aec8f6a0b5a11d050d784a13871261bef7c925","date":1465332514,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#shapeToString(Shape).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#shapeToString(Shape).mjava","sourceNew":"  /**\n   * Returns a String version of a shape to be used for the stored value.\n   *\n   * The format can be selected using the initParam <code>format={WKT|GeoJSON}</code>\n   */\n  public String shapeToString(Shape shape) {\n    return shapeWriter.toString(shape);\n  }\n\n","sourceOld":"  /**\n   * Returns a String version of a shape to be used for the stored value.\n   *\n   * The format can be selected using the initParam <code>format={WKT|GeoJSON}</code>\n   */\n  public String shapeToString(Shape shape) {\n    if(shapeWriter!=null) {\n      return shapeWriter.toString(shape);\n    }\n    // This will only happen if the context does not have any writers\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"ShapeWriter not configured\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#shapeToString(Shape).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#shapeToString(Shape).mjava","sourceNew":"  /**\n   * Returns a String version of a shape to be used for the stored value.\n   *\n   * The format can be selected using the initParam <code>format={WKT|GeoJSON}</code>\n   */\n  public String shapeToString(Shape shape) {\n    return shapeWriter.toString(shape);\n  }\n\n","sourceOld":"  /**\n   * Returns a String version of a shape to be used for the stored value.\n   *\n   * The format can be selected using the initParam <code>format={WKT|GeoJSON}</code>\n   */\n  public String shapeToString(Shape shape) {\n    if(shapeWriter!=null) {\n      return shapeWriter.toString(shape);\n    }\n    // This will only happen if the context does not have any writers\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"ShapeWriter not configured\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c11e1d33f2ba742976268153f6edd2d29710cf69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"03d8df7e95735d8cda6a255c42e0997c699bb176":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"23aec8f6a0b5a11d050d784a13871261bef7c925":["03d8df7e95735d8cda6a255c42e0997c699bb176"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["03d8df7e95735d8cda6a255c42e0997c699bb176","23aec8f6a0b5a11d050d784a13871261bef7c925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23aec8f6a0b5a11d050d784a13871261bef7c925"]},"commit2Childs":{"c11e1d33f2ba742976268153f6edd2d29710cf69":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"03d8df7e95735d8cda6a255c42e0997c699bb176":["23aec8f6a0b5a11d050d784a13871261bef7c925","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"23aec8f6a0b5a11d050d784a13871261bef7c925":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["03d8df7e95735d8cda6a255c42e0997c699bb176"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}