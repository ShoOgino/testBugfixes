{"path":"src/test/org/apache/lucene/TestHitIterator#testIterator().mjava","commits":[{"id":"92c0ce283271f89e97f4800bc383677f0c776a73","date":1114474913,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestHitIterator#testIterator().mjava","pathOld":"/dev/null","sourceNew":"  public void testIterator() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 1\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 2\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    Hits hits = searcher.search(new TermQuery(new Term(\"field\", \"iterator\")));\n\n    HitIterator iterator = (HitIterator) hits.iterator();\n    assertEquals(2, iterator.length());\n    assertTrue(iterator.hasNext());\n    Hit hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 1\", hit.get(\"field\"));\n\n    assertTrue(iterator.hasNext());\n    hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 2\", hit.getDocument().get(\"field\"));\n\n    assertFalse(iterator.hasNext());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f75dcff3e8494bdfd6430543cf6e005d3d0b8cdc","date":1114485547,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestHitIterator#testIterator().mjava","pathOld":"src/test/org/apache/lucene/TestHitIterator#testIterator().mjava","sourceNew":"  public void testIterator() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 1\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 2\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    Hits hits = searcher.search(new TermQuery(new Term(\"field\", \"iterator\")));\n\n    HitIterator iterator = (HitIterator) hits.iterator();\n    assertEquals(2, iterator.length());\n    assertTrue(iterator.hasNext());\n    Hit hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 1\", hit.get(\"field\"));\n\n    assertTrue(iterator.hasNext());\n    hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 2\", hit.getDocument().get(\"field\"));\n\n    assertFalse(iterator.hasNext());\n\n    boolean caughtException = false;\n    try {\n      iterator.next();\n    } catch (NoSuchElementException e) {\n      assertTrue(true);\n      caughtException = true;\n    }\n\n    assertTrue(caughtException);\n  }\n\n","sourceOld":"  public void testIterator() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 1\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 2\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    Hits hits = searcher.search(new TermQuery(new Term(\"field\", \"iterator\")));\n\n    HitIterator iterator = (HitIterator) hits.iterator();\n    assertEquals(2, iterator.length());\n    assertTrue(iterator.hasNext());\n    Hit hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 1\", hit.get(\"field\"));\n\n    assertTrue(iterator.hasNext());\n    hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 2\", hit.getDocument().get(\"field\"));\n\n    assertFalse(iterator.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestHitIterator#testIterator().mjava","pathOld":"src/test/org/apache/lucene/TestHitIterator#testIterator().mjava","sourceNew":"  public void testIterator() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 1\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 2\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    Hits hits = searcher.search(new TermQuery(new Term(\"field\", \"iterator\")));\n\n    HitIterator iterator = (HitIterator) hits.iterator();\n    assertEquals(2, iterator.length());\n    assertTrue(iterator.hasNext());\n    Hit hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 1\", hit.get(\"field\"));\n\n    assertTrue(iterator.hasNext());\n    hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 2\", hit.getDocument().get(\"field\"));\n\n    assertFalse(iterator.hasNext());\n\n    boolean caughtException = false;\n    try {\n      iterator.next();\n    } catch (NoSuchElementException e) {\n      assertTrue(true);\n      caughtException = true;\n    }\n\n    assertTrue(caughtException);\n  }\n\n","sourceOld":"  public void testIterator() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 1\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 2\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    Hits hits = searcher.search(new TermQuery(new Term(\"field\", \"iterator\")));\n\n    HitIterator iterator = (HitIterator) hits.iterator();\n    assertEquals(2, iterator.length());\n    assertTrue(iterator.hasNext());\n    Hit hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 1\", hit.get(\"field\"));\n\n    assertTrue(iterator.hasNext());\n    hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 2\", hit.getDocument().get(\"field\"));\n\n    assertFalse(iterator.hasNext());\n\n    boolean caughtException = false;\n    try {\n      iterator.next();\n    } catch (NoSuchElementException e) {\n      assertTrue(true);\n      caughtException = true;\n    }\n\n    assertTrue(caughtException);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902ba79f4590a41c663c447756d2e5041cbbdda9","date":1217956662,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestHitIterator#testIterator().mjava","pathOld":"src/test/org/apache/lucene/TestHitIterator#testIterator().mjava","sourceNew":"  public void testIterator() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 1\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 2\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.close();\n\n    _TestUtil.checkIndex(directory);\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    Hits hits = searcher.search(new TermQuery(new Term(\"field\", \"iterator\")));\n\n    HitIterator iterator = (HitIterator) hits.iterator();\n    assertEquals(2, iterator.length());\n    assertTrue(iterator.hasNext());\n    Hit hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 1\", hit.get(\"field\"));\n\n    assertTrue(iterator.hasNext());\n    hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 2\", hit.getDocument().get(\"field\"));\n\n    assertFalse(iterator.hasNext());\n\n    boolean caughtException = false;\n    try {\n      iterator.next();\n    } catch (NoSuchElementException e) {\n      assertTrue(true);\n      caughtException = true;\n    }\n\n    assertTrue(caughtException);\n  }\n\n","sourceOld":"  public void testIterator() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 1\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 2\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    Hits hits = searcher.search(new TermQuery(new Term(\"field\", \"iterator\")));\n\n    HitIterator iterator = (HitIterator) hits.iterator();\n    assertEquals(2, iterator.length());\n    assertTrue(iterator.hasNext());\n    Hit hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 1\", hit.get(\"field\"));\n\n    assertTrue(iterator.hasNext());\n    hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 2\", hit.getDocument().get(\"field\"));\n\n    assertFalse(iterator.hasNext());\n\n    boolean caughtException = false;\n    try {\n      iterator.next();\n    } catch (NoSuchElementException e) {\n      assertTrue(true);\n      caughtException = true;\n    }\n\n    assertTrue(caughtException);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestHitIterator#testIterator().mjava","pathOld":"src/test/org/apache/lucene/TestHitIterator#testIterator().mjava","sourceNew":"  public void testIterator() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 1\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 2\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n\n    _TestUtil.checkIndex(directory);\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    Hits hits = searcher.search(new TermQuery(new Term(\"field\", \"iterator\")));\n\n    HitIterator iterator = (HitIterator) hits.iterator();\n    assertEquals(2, iterator.length());\n    assertTrue(iterator.hasNext());\n    Hit hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 1\", hit.get(\"field\"));\n\n    assertTrue(iterator.hasNext());\n    hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 2\", hit.getDocument().get(\"field\"));\n\n    assertFalse(iterator.hasNext());\n\n    boolean caughtException = false;\n    try {\n      iterator.next();\n    } catch (NoSuchElementException e) {\n      assertTrue(true);\n      caughtException = true;\n    }\n\n    assertTrue(caughtException);\n  }\n\n","sourceOld":"  public void testIterator() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 1\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 2\", Field.Store.YES, Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.close();\n\n    _TestUtil.checkIndex(directory);\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    Hits hits = searcher.search(new TermQuery(new Term(\"field\", \"iterator\")));\n\n    HitIterator iterator = (HitIterator) hits.iterator();\n    assertEquals(2, iterator.length());\n    assertTrue(iterator.hasNext());\n    Hit hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 1\", hit.get(\"field\"));\n\n    assertTrue(iterator.hasNext());\n    hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 2\", hit.getDocument().get(\"field\"));\n\n    assertFalse(iterator.hasNext());\n\n    boolean caughtException = false;\n    try {\n      iterator.next();\n    } catch (NoSuchElementException e) {\n      assertTrue(true);\n      caughtException = true;\n    }\n\n    assertTrue(caughtException);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/TestHitIterator#testIterator().mjava","sourceNew":null,"sourceOld":"  public void testIterator() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 1\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 2\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n\n    _TestUtil.checkIndex(directory);\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    Hits hits = searcher.search(new TermQuery(new Term(\"field\", \"iterator\")));\n\n    HitIterator iterator = (HitIterator) hits.iterator();\n    assertEquals(2, iterator.length());\n    assertTrue(iterator.hasNext());\n    Hit hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 1\", hit.get(\"field\"));\n\n    assertTrue(iterator.hasNext());\n    hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 2\", hit.getDocument().get(\"field\"));\n\n    assertFalse(iterator.hasNext());\n\n    boolean caughtException = false;\n    try {\n      iterator.next();\n    } catch (NoSuchElementException e) {\n      assertTrue(true);\n      caughtException = true;\n    }\n\n    assertTrue(caughtException);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/TestHitIterator#testIterator().mjava","sourceNew":null,"sourceOld":"  public void testIterator() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 1\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new Field(\"field\", \"iterator test doc 2\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n\n    _TestUtil.checkIndex(directory);\n\n    IndexSearcher searcher = new IndexSearcher(directory);\n    Hits hits = searcher.search(new TermQuery(new Term(\"field\", \"iterator\")));\n\n    HitIterator iterator = (HitIterator) hits.iterator();\n    assertEquals(2, iterator.length());\n    assertTrue(iterator.hasNext());\n    Hit hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 1\", hit.get(\"field\"));\n\n    assertTrue(iterator.hasNext());\n    hit = (Hit) iterator.next();\n    assertEquals(\"iterator test doc 2\", hit.getDocument().get(\"field\"));\n\n    assertFalse(iterator.hasNext());\n\n    boolean caughtException = false;\n    try {\n      iterator.next();\n    } catch (NoSuchElementException e) {\n      assertTrue(true);\n      caughtException = true;\n    }\n\n    assertTrue(caughtException);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["f75dcff3e8494bdfd6430543cf6e005d3d0b8cdc"],"92c0ce283271f89e97f4800bc383677f0c776a73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"f75dcff3e8494bdfd6430543cf6e005d3d0b8cdc":["92c0ce283271f89e97f4800bc383677f0c776a73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"92c0ce283271f89e97f4800bc383677f0c776a73":["f75dcff3e8494bdfd6430543cf6e005d3d0b8cdc"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92c0ce283271f89e97f4800bc383677f0c776a73"],"0a046c0c310bc77931fc8441bd920053b607dd14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"f75dcff3e8494bdfd6430543cf6e005d3d0b8cdc":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}