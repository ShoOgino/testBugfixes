{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2.0\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^3\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(2.0f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2.0\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2.0\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^3\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(2.0f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2.0\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2.0\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^3\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(2.0f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2.0\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4018ae902b0e5dc1211c95cafb6dd04e85dc217","date":1337085126,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\") instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\") instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\");\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\");\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\") instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce","383aa9f87d58abbaf809bb02bfd29588e0d7694f","8d9fea655f6db2fa5d07175d364e4801e0b761b9","df63e0c4264f6da210aa1c1c3cb609554f4f43af"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\") instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\") instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\");\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\");\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\") instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\") instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\") instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\");\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\");\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\") instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\", null);\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\", null);\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(ParseException pe) {\n      // expected exception\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\") instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\")).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\") instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\") instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\");\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\");\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\") instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\") instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\") instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\");\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\");\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\") instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0cdf628dda21ad509f09608c835dc27541d1ca3","date":1444665868,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\") instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\")).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\") instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\") instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\");\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\");\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\") instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\") instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\")).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\") instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\") instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\");\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\");\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\") instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\") instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\")).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\") instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\") instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\");\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\");\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\") instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", \"term*\");\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", \"term*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", \"te?m*germ\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", \"*term\", false);\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", \"?term\");\n      fail();\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\") instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\")).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\") instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\") instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\");\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\");\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\") instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\") instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\")).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\") instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\") instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\");\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\");\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\") instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", \"term*\");\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", \"term*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", \"te?m*germ\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", \"*term\", false);\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", \"?term\");\n      fail();\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\") instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\")).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\") instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\") instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\");\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\");\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\") instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", true, \"*term\");\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", true, \"?term\");\n      fail();\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", true, \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", true, \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd8a7e622c1138188be79e193b1dc52f3f0889a5","date":1564419078,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\") instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\")).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\") instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\") instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\");\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\");\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\") instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", \"term*\");\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", \"term*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", \"te?m*germ\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    // Test suffix queries: first disallow\n    Exception ex = expectThrows(Exception.class, () -> {\n      assertWildcardQueryEquals(\"*Term\", \"*term\", false);\n    });\n    assertTrue(isQueryParserException(ex));\n\n    ex = expectThrows(Exception.class, () -> {\n      assertWildcardQueryEquals(\"?Term\", \"?term\");\n    });\n    assertTrue(isQueryParserException(ex));\n\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\") instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\")).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\") instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\") instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\");\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\");\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\") instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", \"term*\");\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", \"term*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", \"te?m*germ\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", \"*term\", false);\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", \"?term\");\n      fail();\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\") instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\")).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\") instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\") instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\");\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\");\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\") instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", \"term*\");\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", \"term*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", \"te?m*germ\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    // Test suffix queries: first disallow\n    Exception ex = expectThrows(Exception.class, () -> {\n      assertWildcardQueryEquals(\"*Term\", \"*term\", false);\n    });\n    assertTrue(isQueryParserException(ex));\n\n    ex = expectThrows(Exception.class, () -> {\n      assertWildcardQueryEquals(\"?Term\", \"?term\");\n    });\n    assertTrue(isQueryParserException(ex));\n\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\") instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\")).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\") instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\") instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\");\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\");\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\") instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", \"term*\");\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", \"term*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", \"te?m*germ\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    // Test suffix queries: first disallow\n    try {\n      assertWildcardQueryEquals(\"*Term\", \"*term\", false);\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    try {\n      assertWildcardQueryEquals(\"?Term\", \"?term\");\n      fail();\n    } catch(Exception pe) {\n      // expected exception\n      if(!isQueryParserException(pe)){\n        fail();\n      }\n    }\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9","date":1600414700,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\") instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\")).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\") instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\") instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\");\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\");\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\") instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", \"term*\");\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", \"term*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", \"te?m*germ\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    // Test suffix queries: first disallow\n    Exception ex = expectThrows(Exception.class, () -> {\n      assertWildcardQueryEquals(\"*Term\", \"*term\", false);\n    });\n    assertTrue(isQueryParserException(ex));\n\n    ex = expectThrows(Exception.class, () -> {\n      assertWildcardQueryEquals(\"?Term\", \"?term\");\n    });\n    assertTrue(isQueryParserException(ex));\n\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", \"?term\", true);\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~1\", null, \"term~1\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\") instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\") instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\")).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\") instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\") instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery)getQuery(\"term~0.7\");\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery)getQuery(\"term~\");\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    \n    assertParseException(\"term~1.1\"); // value > 1, throws exception\n\n    assertTrue(getQuery(\"term*germ\") instanceof WildcardQuery);\n\n/* Tests to see that wild card terms are (or are not) properly\n   * lower-cased with propery parser configuration\n   */\n// First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", \"term*\");\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", \"term*\");\n// Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", \"te?m*germ\");\n//  Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n//  Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    // Test suffix queries: first disallow\n    Exception ex = expectThrows(Exception.class, () -> {\n      assertWildcardQueryEquals(\"*Term\", \"*term\", false);\n    });\n    assertTrue(isQueryParserException(ex));\n\n    ex = expectThrows(Exception.class, () -> {\n      assertWildcardQueryEquals(\"?Term\", \"?term\");\n    });\n    assertTrue(isQueryParserException(ex));\n\n    // Test suffix queries: then allow\n    assertWildcardQueryEquals(\"*Term\", \"*term\", true);\n    assertWildcardQueryEquals(\"?Term\", \"?term\", true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["ea4107f60b9f95623c16025c9c247412ff809092"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9":["cd8a7e622c1138188be79e193b1dc52f3f0889a5"],"f4018ae902b0e5dc1211c95cafb6dd04e85dc217":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"f8061ddd97f3352007d927dae445884a6f3d857b":["ea4107f60b9f95623c16025c9c247412ff809092","cd8a7e622c1138188be79e193b1dc52f3f0889a5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b0cdf628dda21ad509f09608c835dc27541d1ca3","ea4107f60b9f95623c16025c9c247412ff809092"],"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["f4018ae902b0e5dc1211c95cafb6dd04e85dc217"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["f4018ae902b0e5dc1211c95cafb6dd04e85dc217","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["f4018ae902b0e5dc1211c95cafb6dd04e85dc217","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"ea4107f60b9f95623c16025c9c247412ff809092":["b0cdf628dda21ad509f09608c835dc27541d1ca3"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9"]},"commit2Childs":{"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9","f8061ddd97f3352007d927dae445884a6f3d857b"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["b0cdf628dda21ad509f09608c835dc27541d1ca3"],"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4018ae902b0e5dc1211c95cafb6dd04e85dc217":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["2dfdf766e55e943d942055d7de53c7ad6bc45283","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ea4107f60b9f95623c16025c9c247412ff809092"],"ea4107f60b9f95623c16025c9c247412ff809092":["cd8a7e622c1138188be79e193b1dc52f3f0889a5","f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["f4018ae902b0e5dc1211c95cafb6dd04e85dc217"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}