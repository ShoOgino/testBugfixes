{"path":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processAdd(AddUpdateCommand).mjava","commits":[{"id":"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0","date":1383246815,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (!isLeader(cmd)) {\n        super.processAdd(cmd);\n      }\n\n      final SolrInputDocument newDoc = cmd.getSolrInputDocument();\n\n      Object newVersion = newDoc.getFieldValue(versionFieldName);\n      if ( null == newVersion ) {\n        throw new SolrException(BAD_REQUEST, \"Doc does not have versionField: \" + versionFieldName);\n      }\n\n      for (int i=0; ;i++) {\n        // Log a warning every 256 retries.... even a few retries should normally be very unusual.\n        if ((i&0xff) == 0xff) {\n          log.warn(\"Unusual number of optimistic concurrency retries: retries=\" + i + \" cmd=\" + cmd);\n        }\n\n        if (!isVersionNewEnough(cmd.getIndexedId(), newVersion)) {\n          // drop older update\n          return;\n        }\n\n        try {\n          cmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n          super.processAdd(cmd);\n          return;\n        } catch (SolrException e) {\n          if (e.code() == 409) {\n            continue;  // if a version conflict, retry\n          }\n          throw e;  // rethrow\n        }\n\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a094a3cf22dfb1f022ba368c1605239343aa873","date":1384012589,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (!isLeader(cmd)) {\n        super.processAdd(cmd);\n        return;\n      }\n\n      final SolrInputDocument newDoc = cmd.getSolrInputDocument();\n\n      Object newVersion = newDoc.getFieldValue(versionFieldName);\n      if ( null == newVersion ) {\n        throw new SolrException(BAD_REQUEST, \"Doc does not have versionField: \" + versionFieldName);\n      }\n\n      for (int i=0; ;i++) {\n        // Log a warning every 256 retries.... even a few retries should normally be very unusual.\n        if ((i&0xff) == 0xff) {\n          log.warn(\"Unusual number of optimistic concurrency retries: retries=\" + i + \" cmd=\" + cmd);\n        }\n\n        if (!isVersionNewEnough(cmd.getIndexedId(), newVersion)) {\n          // drop older update\n          return;\n        }\n\n        try {\n          cmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n          super.processAdd(cmd);\n          return;\n        } catch (SolrException e) {\n          if (e.code() == 409) {\n            // log.info (\"##################### CONFLICT ADDING newDoc=\" + newDoc + \" newVersion=\" + newVersion );\n            continue;  // if a version conflict, retry\n          }\n          throw e;  // rethrow\n        }\n\n      }\n    }\n\n","sourceOld":"    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (!isLeader(cmd)) {\n        super.processAdd(cmd);\n      }\n\n      final SolrInputDocument newDoc = cmd.getSolrInputDocument();\n\n      Object newVersion = newDoc.getFieldValue(versionFieldName);\n      if ( null == newVersion ) {\n        throw new SolrException(BAD_REQUEST, \"Doc does not have versionField: \" + versionFieldName);\n      }\n\n      for (int i=0; ;i++) {\n        // Log a warning every 256 retries.... even a few retries should normally be very unusual.\n        if ((i&0xff) == 0xff) {\n          log.warn(\"Unusual number of optimistic concurrency retries: retries=\" + i + \" cmd=\" + cmd);\n        }\n\n        if (!isVersionNewEnough(cmd.getIndexedId(), newVersion)) {\n          // drop older update\n          return;\n        }\n\n        try {\n          cmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n          super.processAdd(cmd);\n          return;\n        } catch (SolrException e) {\n          if (e.code() == 409) {\n            continue;  // if a version conflict, retry\n          }\n          throw e;  // rethrow\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f8973f28b29873ff0d7a016e562c9036ae649a9","date":1428098193,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (!isLeader(cmd)) {\n        super.processAdd(cmd);\n        return;\n      }\n\n      final SolrInputDocument newDoc = cmd.getSolrInputDocument();\n\n      Object newVersion = newDoc.getFieldValue(versionFieldName);\n      if ( null == newVersion ) {\n        throw new SolrException(BAD_REQUEST, \"Doc does not have versionField: \" + versionFieldName);\n      }\n\n      for (int i=0; ;i++) {\n        // Log a warning every 256 retries.... even a few retries should normally be very unusual.\n        if ((i&0xff) == 0xff) {\n          log.warn(\"Unusual number of optimistic concurrency retries: retries=\" + i + \" cmd=\" + cmd);\n        }\n\n        if (!isVersionNewEnough(cmd.getIndexedId(), newVersion)) {\n          // drop older update\n          return;\n        }\n\n        try {\n          cmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n          super.processAdd(cmd);\n          return;\n        } catch (SolrException e) {\n          if (e.code() == 409) {\n            // log.info (\"##################### CONFLICT ADDING newDoc=\" + newDoc + \" newVersion=\" + newVersion );\n            continue;  // if a version conflict, retry\n          }\n          throw e;  // rethrow\n        }\n\n      }\n    }\n\n","sourceOld":"    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (!isLeader(cmd)) {\n        super.processAdd(cmd);\n        return;\n      }\n\n      final SolrInputDocument newDoc = cmd.getSolrInputDocument();\n\n      Object newVersion = newDoc.getFieldValue(versionFieldName);\n      if ( null == newVersion ) {\n        throw new SolrException(BAD_REQUEST, \"Doc does not have versionField: \" + versionFieldName);\n      }\n\n      for (int i=0; ;i++) {\n        // Log a warning every 256 retries.... even a few retries should normally be very unusual.\n        if ((i&0xff) == 0xff) {\n          log.warn(\"Unusual number of optimistic concurrency retries: retries=\" + i + \" cmd=\" + cmd);\n        }\n\n        if (!isVersionNewEnough(cmd.getIndexedId(), newVersion)) {\n          // drop older update\n          return;\n        }\n\n        try {\n          cmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n          super.processAdd(cmd);\n          return;\n        } catch (SolrException e) {\n          if (e.code() == 409) {\n            // log.info (\"##################### CONFLICT ADDING newDoc=\" + newDoc + \" newVersion=\" + newVersion );\n            continue;  // if a version conflict, retry\n          }\n          throw e;  // rethrow\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15","date":1523556268,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DocBasedVersionConstraintsProcessorFactory.DocBasedVersionConstraintsProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":null,"sourceOld":"    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (!isLeader(cmd)) {\n        super.processAdd(cmd);\n        return;\n      }\n\n      final SolrInputDocument newDoc = cmd.getSolrInputDocument();\n\n      Object newVersion = newDoc.getFieldValue(versionFieldName);\n      if ( null == newVersion ) {\n        throw new SolrException(BAD_REQUEST, \"Doc does not have versionField: \" + versionFieldName);\n      }\n\n      for (int i=0; ;i++) {\n        // Log a warning every 256 retries.... even a few retries should normally be very unusual.\n        if ((i&0xff) == 0xff) {\n          log.warn(\"Unusual number of optimistic concurrency retries: retries=\" + i + \" cmd=\" + cmd);\n        }\n\n        if (!isVersionNewEnough(cmd.getIndexedId(), newVersion)) {\n          // drop older update\n          return;\n        }\n\n        try {\n          cmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime\n          super.processAdd(cmd);\n          return;\n        } catch (SolrException e) {\n          if (e.code() == 409) {\n            // log.info (\"##################### CONFLICT ADDING newDoc=\" + newDoc + \" newVersion=\" + newVersion );\n            continue;  // if a version conflict, retry\n          }\n          throw e;  // rethrow\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["3f8973f28b29873ff0d7a016e562c9036ae649a9"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["9a094a3cf22dfb1f022ba368c1605239343aa873"],"9a094a3cf22dfb1f022ba368c1605239343aa873":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["9a094a3cf22dfb1f022ba368c1605239343aa873"],"31b9d540ce892a94ad2ad89f9b9cddc9180b6c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["31b9d540ce892a94ad2ad89f9b9cddc9180b6c15"],"9a094a3cf22dfb1f022ba368c1605239343aa873":["3f8973f28b29873ff0d7a016e562c9036ae649a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}