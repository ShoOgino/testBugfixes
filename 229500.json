{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getNumeric(NumericEntry).mjava","commits":[{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final long delta = entry.minValue;\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return delta + values.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final LongValues quotientReader = DirectReader.getInstance(slice, entry.bitsPerValue);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final LongValues ords = DirectReader.getInstance(slice, entry.bitsPerValue);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get(id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final long delta = entry.minValue;\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return delta + values.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final LongValues quotientReader = DirectReader.getInstance(slice, entry.bitsPerValue);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final LongValues ords = DirectReader.getInstance(slice, entry.bitsPerValue);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get(id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final long delta = entry.minValue;\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return delta + values.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final LongValues quotientReader = DirectReader.getInstance(slice, entry.bitsPerValue);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final LongValues ords = DirectReader.getInstance(slice, entry.bitsPerValue);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get(id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final long delta = entry.minValue;\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return delta + values.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final LongValues quotientReader = DirectReader.getInstance(slice, entry.bitsPerValue);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final LongValues ords = DirectReader.getInstance(slice, entry.bitsPerValue);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get(id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":null,"sourceOld":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n    switch (entry.format) {\n      case DELTA_COMPRESSED:\n        final long delta = entry.minValue;\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return delta + values.get(id);\n          }\n        };\n      case GCD_COMPRESSED:\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final LongValues quotientReader = DirectReader.getInstance(slice, entry.bitsPerValue);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      case TABLE_COMPRESSED:\n        final long table[] = entry.table;\n        final LongValues ords = DirectReader.getInstance(slice, entry.bitsPerValue);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get(id)];\n          }\n        };\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}