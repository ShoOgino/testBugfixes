{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianStemmer#getRV(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianStemmer#getRV(String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianStemmer#getRV(String).mjava","sourceNew":"\t/**\n\t * Gets RV\n   *\n   * RV - IF the second letter is a consonant, RV is the region after\n   *      the next following vowel,\n   *\n   *      OR if the first two letters are vowels, RV is the region\n   *      after the next consonant,\n   *\n   *      AND otherwise (consonant-vowel case) RV is the region after\n   *      the third letter.\n   *\n   *      BUT RV is the end of the word if this positions cannot be\n   *      found.\n   *\n   * @return null or a string representing RV\n\t */\n\tprivate String getRV( String value ) {\n    int     i;\n    int     j;\n\n    // be-safe !!!\n    if (value == null) {\n      return null ;\n    }\n\n    i = value.length()-1 ;\n\n    // RV - IF the second letter is a consonant, RV is the region after\n    //      the next following vowel,\n    if ((i > 0) && !isVowel(value.charAt(1))) {\n      // find 1st vowel\n      for (j=2 ; j < i ; j++) {\n        if (isVowel(value.charAt(j))) {\n          break ;\n        }\n      }\n\n      if (j < i) {\n        return value.substring(j+1) ;\n      }\n    }\n\n\n    // RV - OR if the first two letters are vowels, RV is the region\n    //      after the next consonant,\n    if ((i > 1) &&\n        isVowel(value.charAt(0)) &&\n        isVowel(value.charAt(1))) {\n      // find 1st consoant\n      for (j=2 ; j < i ; j++) {\n        if (!isVowel(value.charAt(j))) {\n          break ;\n        }\n      }\n\n      if (j < i) {\n        return value.substring(j+1) ;\n      }\n    }\n\n    // RV - AND otherwise (consonant-vowel case) RV is the region after\n    //      the third letter.\n    if (i > 2) {\n      return value.substring(3) ;\n    }\n\n    return null ;\n  }\n\n","sourceOld":"\t/**\n\t * Gets RV\n   *\n   * RV - IF the second letter is a consonant, RV is the region after\n   *      the next following vowel,\n   *\n   *      OR if the first two letters are vowels, RV is the region\n   *      after the next consonant,\n   *\n   *      AND otherwise (consonant-vowel case) RV is the region after\n   *      the third letter.\n   *\n   *      BUT RV is the end of the word if this positions cannot be\n   *      found.\n   *\n   * @return null or a string representing RV\n\t */\n\tprivate String getRV( String value ) {\n    int     i;\n    int     j;\n\n    // be-safe !!!\n    if (value == null) {\n      return null ;\n    }\n\n    i = value.length()-1 ;\n\n    // RV - IF the second letter is a consonant, RV is the region after\n    //      the next following vowel,\n    if ((i > 0) && !isVowel(value.charAt(1))) {\n      // find 1st vowel\n      for (j=2 ; j < i ; j++) {\n        if (isVowel(value.charAt(j))) {\n          break ;\n        }\n      }\n\n      if (j < i) {\n        return value.substring(j+1) ;\n      }\n    }\n\n\n    // RV - OR if the first two letters are vowels, RV is the region\n    //      after the next consonant,\n    if ((i > 1) &&\n        isVowel(value.charAt(0)) &&\n        isVowel(value.charAt(1))) {\n      // find 1st consoant\n      for (j=2 ; j < i ; j++) {\n        if (!isVowel(value.charAt(j))) {\n          break ;\n        }\n      }\n\n      if (j < i) {\n        return value.substring(j+1) ;\n      }\n    }\n\n    // RV - AND otherwise (consonant-vowel case) RV is the region after\n    //      the third letter.\n    if (i > 2) {\n      return value.substring(3) ;\n    }\n\n    return null ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/br/BrazilianStemmer#getRV(String).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianStemmer#getRV(String).mjava","sourceNew":"\t/**\n\t * Gets RV\n   *\n   * RV - IF the second letter is a consonant, RV is the region after\n   *      the next following vowel,\n   *\n   *      OR if the first two letters are vowels, RV is the region\n   *      after the next consonant,\n   *\n   *      AND otherwise (consonant-vowel case) RV is the region after\n   *      the third letter.\n   *\n   *      BUT RV is the end of the word if this positions cannot be\n   *      found.\n   *\n   * @return null or a string representing RV\n\t */\n\tprivate String getRV( String value ) {\n    int     i;\n    int     j;\n\n    // be-safe !!!\n    if (value == null) {\n      return null ;\n    }\n\n    i = value.length()-1 ;\n\n    // RV - IF the second letter is a consonant, RV is the region after\n    //      the next following vowel,\n    if ((i > 0) && !isVowel(value.charAt(1))) {\n      // find 1st vowel\n      for (j=2 ; j < i ; j++) {\n        if (isVowel(value.charAt(j))) {\n          break ;\n        }\n      }\n\n      if (j < i) {\n        return value.substring(j+1) ;\n      }\n    }\n\n\n    // RV - OR if the first two letters are vowels, RV is the region\n    //      after the next consonant,\n    if ((i > 1) &&\n        isVowel(value.charAt(0)) &&\n        isVowel(value.charAt(1))) {\n      // find 1st consoant\n      for (j=2 ; j < i ; j++) {\n        if (!isVowel(value.charAt(j))) {\n          break ;\n        }\n      }\n\n      if (j < i) {\n        return value.substring(j+1) ;\n      }\n    }\n\n    // RV - AND otherwise (consonant-vowel case) RV is the region after\n    //      the third letter.\n    if (i > 2) {\n      return value.substring(3) ;\n    }\n\n    return null ;\n  }\n\n","sourceOld":"\t/**\n\t * Gets RV\n   *\n   * RV - IF the second letter is a consonant, RV is the region after\n   *      the next following vowel,\n   *\n   *      OR if the first two letters are vowels, RV is the region\n   *      after the next consonant,\n   *\n   *      AND otherwise (consonant-vowel case) RV is the region after\n   *      the third letter.\n   *\n   *      BUT RV is the end of the word if this positions cannot be\n   *      found.\n   *\n   * @return null or a string representing RV\n\t */\n\tprivate String getRV( String value ) {\n    int     i;\n    int     j;\n\n    // be-safe !!!\n    if (value == null) {\n      return null ;\n    }\n\n    i = value.length()-1 ;\n\n    // RV - IF the second letter is a consonant, RV is the region after\n    //      the next following vowel,\n    if ((i > 0) && !isVowel(value.charAt(1))) {\n      // find 1st vowel\n      for (j=2 ; j < i ; j++) {\n        if (isVowel(value.charAt(j))) {\n          break ;\n        }\n      }\n\n      if (j < i) {\n        return value.substring(j+1) ;\n      }\n    }\n\n\n    // RV - OR if the first two letters are vowels, RV is the region\n    //      after the next consonant,\n    if ((i > 1) &&\n        isVowel(value.charAt(0)) &&\n        isVowel(value.charAt(1))) {\n      // find 1st consoant\n      for (j=2 ; j < i ; j++) {\n        if (!isVowel(value.charAt(j))) {\n          break ;\n        }\n      }\n\n      if (j < i) {\n        return value.substring(j+1) ;\n      }\n    }\n\n    // RV - AND otherwise (consonant-vowel case) RV is the region after\n    //      the third letter.\n    if (i > 2) {\n      return value.substring(3) ;\n    }\n\n    return null ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}