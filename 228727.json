{"path":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties).mjava","commits":[{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getSolrHome()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties);\n    }\n    else {\n      cloudDesc = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getSolrHome()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties);\n    }\n    else {\n      cloudDesc = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e9769bcabf28416689da7ec56a0c799b2a66b87","date":1376765390,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getSolrHome()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties);\n    }\n    else {\n      cloudDesc = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getSolrHome()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties);\n    }\n    else {\n      cloudDesc = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getSolrHome()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties);\n    }\n    else {\n      cloudDesc = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getSolrHome()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties);\n    }\n    else {\n      cloudDesc = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getSolrHome()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties);\n    }\n    else {\n      cloudDesc = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getSolrHome()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties);\n    }\n    else {\n      cloudDesc = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a82d855abc18f7ee3e1ec359d8f256c8c86977a","date":1381347960,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps) {\n    this(container, name, instanceDir, coreProps, null);\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getSolrHome()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties);\n    }\n    else {\n      cloudDesc = null;\n    }\n  }\n\n","bugFix":["6e764e9a107f93be9fa3c922bc6a197b3eec387e","1e9769bcabf28416689da7ec56a0c799b2a66b87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps) {\n    this(container, name, instanceDir, coreProps, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e9769bcabf28416689da7ec56a0c799b2a66b87":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["37a0f60745e53927c4c876cfe5b5a58170f0646c","1e9769bcabf28416689da7ec56a0c799b2a66b87"],"31d4861802ca404d78ca1d15f4550eec415b9199":["6e764e9a107f93be9fa3c922bc6a197b3eec387e","1e9769bcabf28416689da7ec56a0c799b2a66b87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["1e9769bcabf28416689da7ec56a0c799b2a66b87"]},"commit2Childs":{"1e9769bcabf28416689da7ec56a0c799b2a66b87":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","5a82d855abc18f7ee3e1ec359d8f256c8c86977a"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["1e9769bcabf28416689da7ec56a0c799b2a66b87","37a0f60745e53927c4c876cfe5b5a58170f0646c","31d4861802ca404d78ca1d15f4550eec415b9199"],"5a82d855abc18f7ee3e1ec359d8f256c8c86977a":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}