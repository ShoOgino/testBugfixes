{"path":"solr/core/src/java/org/apache/solr/cloud/CloudUtil#getTrustedKeys(SolrZkClient).mjava","commits":[{"id":"b4d01dd8bb594fcd007a358009375967f9333d0a","date":1425496373,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudUtil#getTrustedKeys(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  /**Read the list of public keys from ZK\n   */\n\n  public static Map<String, byte[]> getTrustedKeys(SolrZkClient zk){\n     Map<String,byte[]> result =  new HashMap<>();\n    try {\n      List<String> children = zk.getChildren(\"/keys\", null, true);\n      for (String key : children) {\n        result.put(key, zk.getData(\"/keys/\"+key,null,null,true));\n      }\n    } catch (KeeperException.NoNodeException e) {\n      log.warn(\"Error fetching key names\");\n      return Collections.EMPTY_MAP;\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Unable to read crypto keys\",e );\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Unable to read crypto keys\",e );\n    }\n    return result;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82d485dfb2d8c31baefb7ef96b64021a1ffa170","date":1425903839,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudUtil#getTrustedKeys(SolrZkClient,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudUtil#getTrustedKeys(SolrZkClient).mjava","sourceNew":"  /**Read the list of public keys from ZK\n   */\n\n  public static Map<String, byte[]> getTrustedKeys(SolrZkClient zk, String dir) {\n    Map<String, byte[]> result = new HashMap<>();\n    try {\n      List<String> children = zk.getChildren(\"/keys/\" + dir, null, true);\n      for (String key : children) {\n        if (key.endsWith(\".der\")) result.put(key, zk.getData(\"/keys/\" + dir +\n            \"/\" + key, null, null, true));\n      }\n    } catch (KeeperException.NoNodeException e) {\n      log.warn(\"Error fetching key names\");\n      return Collections.EMPTY_MAP;\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Unable to read crypto keys\",e );\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Unable to read crypto keys\",e );\n    }\n    return result;\n\n  }\n\n","sourceOld":"  /**Read the list of public keys from ZK\n   */\n\n  public static Map<String, byte[]> getTrustedKeys(SolrZkClient zk){\n     Map<String,byte[]> result =  new HashMap<>();\n    try {\n      List<String> children = zk.getChildren(\"/keys\", null, true);\n      for (String key : children) {\n        result.put(key, zk.getData(\"/keys/\"+key,null,null,true));\n      }\n    } catch (KeeperException.NoNodeException e) {\n      log.warn(\"Error fetching key names\");\n      return Collections.EMPTY_MAP;\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Unable to read crypto keys\",e );\n    } catch (KeeperException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Unable to read crypto keys\",e );\n    }\n    return result;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e82d485dfb2d8c31baefb7ef96b64021a1ffa170":["b4d01dd8bb594fcd007a358009375967f9333d0a"],"b4d01dd8bb594fcd007a358009375967f9333d0a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e82d485dfb2d8c31baefb7ef96b64021a1ffa170"]},"commit2Childs":{"e82d485dfb2d8c31baefb7ef96b64021a1ffa170":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b4d01dd8bb594fcd007a358009375967f9333d0a":["e82d485dfb2d8c31baefb7ef96b64021a1ffa170"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4d01dd8bb594fcd007a358009375967f9333d0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}