{"path":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#writeFooter(IndexOutput).mjava","commits":[{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#writeFooter(IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Writes a codec footer, which records both a checksum\n   * algorithm ID and a checksum. This footer can\n   * be parsed and validated with \n   * {@link #checkFooter(ChecksumIndexInput) checkFooter()}.\n   * <p>\n   * CodecFooter --&gt; Magic,AlgorithmID,Checksum\n   * <ul>\n   *    <li>Magic --&gt; {@link DataOutput#writeInt Uint32}. This\n   *        identifies the start of the footer. It is always {@value #FOOTER_MAGIC}.\n   *    <li>AlgorithmID --&gt; {@link DataOutput#writeInt Uint32}. This\n   *        indicates the checksum algorithm used. Currently this is always 0,\n   *        for zlib-crc32.\n   *    <li>Checksum --&gt; {@link DataOutput#writeLong Uint32}. The\n   *        actual checksum value for all previous bytes in the stream, including\n   *        the bytes from Magic and AlgorithmID.\n   * </ul>\n   * \n   * @param out Output stream\n   * @throws IOException If there is an I/O error writing to the underlying medium.\n   */\n  public static void writeFooter(IndexOutput out) throws IOException {\n    out.writeInt(FOOTER_MAGIC);\n    out.writeInt(0);\n    out.writeLong(out.getChecksum());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#writeFooter(IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Writes a codec footer, which records both a checksum\n   * algorithm ID and a checksum. This footer can\n   * be parsed and validated with \n   * {@link #checkFooter(ChecksumIndexInput) checkFooter()}.\n   * <p>\n   * CodecFooter --&gt; Magic,AlgorithmID,Checksum\n   * <ul>\n   *    <li>Magic --&gt; {@link DataOutput#writeInt Uint32}. This\n   *        identifies the start of the footer. It is always {@value #FOOTER_MAGIC}.\n   *    <li>AlgorithmID --&gt; {@link DataOutput#writeInt Uint32}. This\n   *        indicates the checksum algorithm used. Currently this is always 0,\n   *        for zlib-crc32.\n   *    <li>Checksum --&gt; {@link DataOutput#writeLong Uint32}. The\n   *        actual checksum value for all previous bytes in the stream, including\n   *        the bytes from Magic and AlgorithmID.\n   * </ul>\n   * \n   * @param out Output stream\n   * @throws IOException If there is an I/O error writing to the underlying medium.\n   */\n  public static void writeFooter(IndexOutput out) throws IOException {\n    out.writeInt(FOOTER_MAGIC);\n    out.writeInt(0);\n    out.writeLong(out.getChecksum());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74453a4aa2a282c2529b80a39271acd6baeef5a2","date":1398197183,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#writeFooter(IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#writeFooter(IndexOutput).mjava","sourceNew":"  /**\n   * Writes a codec footer, which records both a checksum\n   * algorithm ID and a checksum. This footer can\n   * be parsed and validated with \n   * {@link #checkFooter(ChecksumIndexInput) checkFooter()}.\n   * <p>\n   * CodecFooter --&gt; Magic,AlgorithmID,Checksum\n   * <ul>\n   *    <li>Magic --&gt; {@link DataOutput#writeInt Uint32}. This\n   *        identifies the start of the footer. It is always {@value #FOOTER_MAGIC}.\n   *    <li>AlgorithmID --&gt; {@link DataOutput#writeInt Uint32}. This\n   *        indicates the checksum algorithm used. Currently this is always 0,\n   *        for zlib-crc32.\n   *    <li>Checksum --&gt; {@link DataOutput#writeLong Uint64}. The\n   *        actual checksum value for all previous bytes in the stream, including\n   *        the bytes from Magic and AlgorithmID.\n   * </ul>\n   * \n   * @param out Output stream\n   * @throws IOException If there is an I/O error writing to the underlying medium.\n   */\n  public static void writeFooter(IndexOutput out) throws IOException {\n    out.writeInt(FOOTER_MAGIC);\n    out.writeInt(0);\n    out.writeLong(out.getChecksum());\n  }\n\n","sourceOld":"  /**\n   * Writes a codec footer, which records both a checksum\n   * algorithm ID and a checksum. This footer can\n   * be parsed and validated with \n   * {@link #checkFooter(ChecksumIndexInput) checkFooter()}.\n   * <p>\n   * CodecFooter --&gt; Magic,AlgorithmID,Checksum\n   * <ul>\n   *    <li>Magic --&gt; {@link DataOutput#writeInt Uint32}. This\n   *        identifies the start of the footer. It is always {@value #FOOTER_MAGIC}.\n   *    <li>AlgorithmID --&gt; {@link DataOutput#writeInt Uint32}. This\n   *        indicates the checksum algorithm used. Currently this is always 0,\n   *        for zlib-crc32.\n   *    <li>Checksum --&gt; {@link DataOutput#writeLong Uint32}. The\n   *        actual checksum value for all previous bytes in the stream, including\n   *        the bytes from Magic and AlgorithmID.\n   * </ul>\n   * \n   * @param out Output stream\n   * @throws IOException If there is an I/O error writing to the underlying medium.\n   */\n  public static void writeFooter(IndexOutput out) throws IOException {\n    out.writeInt(FOOTER_MAGIC);\n    out.writeInt(0);\n    out.writeLong(out.getChecksum());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#writeFooter(IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#writeFooter(IndexOutput).mjava","sourceNew":"  /**\n   * Writes a codec footer, which records both a checksum\n   * algorithm ID and a checksum. This footer can\n   * be parsed and validated with \n   * {@link #checkFooter(ChecksumIndexInput) checkFooter()}.\n   * <p>\n   * CodecFooter --&gt; Magic,AlgorithmID,Checksum\n   * <ul>\n   *    <li>Magic --&gt; {@link DataOutput#writeInt Uint32}. This\n   *        identifies the start of the footer. It is always {@value #FOOTER_MAGIC}.\n   *    <li>AlgorithmID --&gt; {@link DataOutput#writeInt Uint32}. This\n   *        indicates the checksum algorithm used. Currently this is always 0,\n   *        for zlib-crc32.\n   *    <li>Checksum --&gt; {@link DataOutput#writeLong Uint64}. The\n   *        actual checksum value for all previous bytes in the stream, including\n   *        the bytes from Magic and AlgorithmID.\n   * </ul>\n   * \n   * @param out Output stream\n   * @throws IOException If there is an I/O error writing to the underlying medium.\n   */\n  public static void writeFooter(IndexOutput out) throws IOException {\n    out.writeInt(FOOTER_MAGIC);\n    out.writeInt(0);\n    out.writeLong(out.getChecksum());\n  }\n\n","sourceOld":"  /**\n   * Writes a codec footer, which records both a checksum\n   * algorithm ID and a checksum. This footer can\n   * be parsed and validated with \n   * {@link #checkFooter(ChecksumIndexInput) checkFooter()}.\n   * <p>\n   * CodecFooter --&gt; Magic,AlgorithmID,Checksum\n   * <ul>\n   *    <li>Magic --&gt; {@link DataOutput#writeInt Uint32}. This\n   *        identifies the start of the footer. It is always {@value #FOOTER_MAGIC}.\n   *    <li>AlgorithmID --&gt; {@link DataOutput#writeInt Uint32}. This\n   *        indicates the checksum algorithm used. Currently this is always 0,\n   *        for zlib-crc32.\n   *    <li>Checksum --&gt; {@link DataOutput#writeLong Uint32}. The\n   *        actual checksum value for all previous bytes in the stream, including\n   *        the bytes from Magic and AlgorithmID.\n   * </ul>\n   * \n   * @param out Output stream\n   * @throws IOException If there is an I/O error writing to the underlying medium.\n   */\n  public static void writeFooter(IndexOutput out) throws IOException {\n    out.writeInt(FOOTER_MAGIC);\n    out.writeInt(0);\n    out.writeLong(out.getChecksum());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72","date":1434509375,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#writeFooter(IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#writeFooter(IndexOutput).mjava","sourceNew":"  /**\n   * Writes a codec footer, which records both a checksum\n   * algorithm ID and a checksum. This footer can\n   * be parsed and validated with \n   * {@link #checkFooter(ChecksumIndexInput) checkFooter()}.\n   * <p>\n   * CodecFooter --&gt; Magic,AlgorithmID,Checksum\n   * <ul>\n   *    <li>Magic --&gt; {@link DataOutput#writeInt Uint32}. This\n   *        identifies the start of the footer. It is always {@value #FOOTER_MAGIC}.\n   *    <li>AlgorithmID --&gt; {@link DataOutput#writeInt Uint32}. This\n   *        indicates the checksum algorithm used. Currently this is always 0,\n   *        for zlib-crc32.\n   *    <li>Checksum --&gt; {@link DataOutput#writeLong Uint64}. The\n   *        actual checksum value for all previous bytes in the stream, including\n   *        the bytes from Magic and AlgorithmID.\n   * </ul>\n   * \n   * @param out Output stream\n   * @throws IOException If there is an I/O error writing to the underlying medium.\n   */\n  public static void writeFooter(IndexOutput out) throws IOException {\n    out.writeInt(FOOTER_MAGIC);\n    out.writeInt(0);\n    writeCRC(out);\n  }\n\n","sourceOld":"  /**\n   * Writes a codec footer, which records both a checksum\n   * algorithm ID and a checksum. This footer can\n   * be parsed and validated with \n   * {@link #checkFooter(ChecksumIndexInput) checkFooter()}.\n   * <p>\n   * CodecFooter --&gt; Magic,AlgorithmID,Checksum\n   * <ul>\n   *    <li>Magic --&gt; {@link DataOutput#writeInt Uint32}. This\n   *        identifies the start of the footer. It is always {@value #FOOTER_MAGIC}.\n   *    <li>AlgorithmID --&gt; {@link DataOutput#writeInt Uint32}. This\n   *        indicates the checksum algorithm used. Currently this is always 0,\n   *        for zlib-crc32.\n   *    <li>Checksum --&gt; {@link DataOutput#writeLong Uint64}. The\n   *        actual checksum value for all previous bytes in the stream, including\n   *        the bytes from Magic and AlgorithmID.\n   * </ul>\n   * \n   * @param out Output stream\n   * @throws IOException If there is an I/O error writing to the underlying medium.\n   */\n  public static void writeFooter(IndexOutput out) throws IOException {\n    out.writeInt(FOOTER_MAGIC);\n    out.writeInt(0);\n    out.writeLong(out.getChecksum());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74453a4aa2a282c2529b80a39271acd6baeef5a2":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["1f3b037cd083286b2af89f96e768f85dcd8072d6","74453a4aa2a282c2529b80a39271acd6baeef5a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72":["74453a4aa2a282c2529b80a39271acd6baeef5a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","74453a4aa2a282c2529b80a39271acd6baeef5a2","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"74453a4aa2a282c2529b80a39271acd6baeef5a2":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}