{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testActionLifecycle().mjava","commits":[{"id":"d64e4b13048b3a4c03a20959037e5fb858764a2f","date":1495651323,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testActionLifecycle().mjava","pathOld":"/dev/null","sourceNew":"  public void testActionLifecycle() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", NodeAddedTriggerTest.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2f4717538692c396242d8b00ae0001626caebdd","date":1495700710,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testActionLifecycle().mjava","pathOld":"/dev/null","sourceNew":"  public void testActionLifecycle() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", NodeAddedTriggerTest.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testActionLifecycle().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testActionLifecycle().mjava","sourceNew":"  public void testActionLifecycle() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", NodeAddedTriggerTest.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getClusterDataProvider())) {\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","sourceOld":"  public void testActionLifecycle() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", NodeAddedTriggerTest.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testActionLifecycle().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testActionLifecycle().mjava","sourceNew":"  public void testActionLifecycle() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", NodeAddedTriggerTest.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","sourceOld":"  public void testActionLifecycle() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", NodeAddedTriggerTest.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getClusterDataProvider())) {\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8cffee0b9c10b78bd087c71485b482217fe84f","date":1505950827,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testActionLifecycle().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testActionLifecycle().mjava","sourceNew":"  public void testActionLifecycle() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", NodeAddedTriggerTest.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController())) {\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","sourceOld":"  public void testActionLifecycle() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", NodeAddedTriggerTest.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container)) {\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testActionLifecycle().mjava","pathOld":"/dev/null","sourceNew":"  public void testActionLifecycle() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", NodeAddedTriggerTest.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController())) {\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testActionLifecycle().mjava","pathOld":"/dev/null","sourceNew":"  public void testActionLifecycle() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", NodeAddedTriggerTest.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController())) {\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testActionLifecycle().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testActionLifecycle().mjava","sourceNew":"  public void testActionLifecycle() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", NodeAddedTriggerTest.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager())) {\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","sourceOld":"  public void testActionLifecycle() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", NodeAddedTriggerTest.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container, container.getZkController())) {\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testActionLifecycle().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testActionLifecycle().mjava","sourceNew":"  public void testActionLifecycle() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", NodeAddedTriggerTest.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","sourceOld":"  public void testActionLifecycle() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", NodeAddedTriggerTest.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, container.getResourceLoader(),\n        container.getZkController().getSolrCloudManager())) {\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testActionLifecycle().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testActionLifecycle().mjava","sourceNew":"  public void testActionLifecycle() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    @SuppressWarnings({\"unchecked\"})\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", NodeAddedTriggerTest.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","sourceOld":"  public void testActionLifecycle() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", NodeAddedTriggerTest.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerTest#testActionLifecycle().mjava","sourceNew":null,"sourceOld":"  public void testActionLifecycle() throws Exception {\n    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();\n    Map<String, Object> props = createTriggerProps(0);\n    @SuppressWarnings({\"unchecked\"})\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", NodeAddedTriggerTest.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8cffee0b9c10b78bd087c71485b482217fe84f"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["e2f4717538692c396242d8b00ae0001626caebdd"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"e2f4717538692c396242d8b00ae0001626caebdd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d64e4b13048b3a4c03a20959037e5fb858764a2f"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"d64e4b13048b3a4c03a20959037e5fb858764a2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"e2f4717538692c396242d8b00ae0001626caebdd":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["5b8cffee0b9c10b78bd087c71485b482217fe84f"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"d64e4b13048b3a4c03a20959037e5fb858764a2f":["e2f4717538692c396242d8b00ae0001626caebdd"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","e2f4717538692c396242d8b00ae0001626caebdd","d64e4b13048b3a4c03a20959037e5fb858764a2f","560c18d71dad43d675158783c3840f8c80d6d39c"],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}