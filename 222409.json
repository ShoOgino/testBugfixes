{"path":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager.BootstrapStatusRunnable#close().mjava","commits":[{"id":"06e38ae84477e7a7eacea808dc3de9950fce5ccf","date":1470634560,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager.BootstrapStatusRunnable#close().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void close() throws IOException {\n      closed = true;\n      try {\n        Replica leader = state.getClient().getZkStateReader().getLeaderRetry(targetCollection, shard, 30000); // assume same shard exists on target\n        String leaderCoreUrl = leader.getCoreUrl();\n        HttpClient httpClient = state.getClient().getLbClient().getHttpClient();\n        try (HttpSolrClient client = new HttpSolrClient.Builder(leaderCoreUrl).withHttpClient(httpClient).build()) {\n          sendCdcrCommand(client, CdcrParams.CdcrAction.CANCEL_BOOTSTRAP);\n        } catch (SolrServerException e) {\n          log.error(\"Error sending cancel bootstrap message to target collection: {} shard: {} leader: {}\",\n              targetCollection, shard, leaderCoreUrl);\n        }\n      } catch (InterruptedException e) {\n        log.error(\"Interrupted while closing BootstrapStatusRunnable\", e);\n        Thread.currentThread().interrupt();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager.BootstrapStatusRunnable#close().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void close() throws IOException {\n      closed = true;\n      try {\n        Replica leader = state.getClient().getZkStateReader().getLeaderRetry(targetCollection, shard, 30000); // assume same shard exists on target\n        String leaderCoreUrl = leader.getCoreUrl();\n        HttpClient httpClient = state.getClient().getLbClient().getHttpClient();\n        try (HttpSolrClient client = new HttpSolrClient.Builder(leaderCoreUrl).withHttpClient(httpClient).build()) {\n          sendCdcrCommand(client, CdcrParams.CdcrAction.CANCEL_BOOTSTRAP);\n        } catch (SolrServerException e) {\n          log.error(\"Error sending cancel bootstrap message to target collection: {} shard: {} leader: {}\",\n              targetCollection, shard, leaderCoreUrl);\n        }\n      } catch (InterruptedException e) {\n        log.error(\"Interrupted while closing BootstrapStatusRunnable\", e);\n        Thread.currentThread().interrupt();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager.BootstrapStatusRunnable#close().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void close() throws IOException {\n      closed = true;\n      try {\n        Replica leader = state.getClient().getZkStateReader().getLeaderRetry(targetCollection, shard, 30000); // assume same shard exists on target\n        String leaderCoreUrl = leader.getCoreUrl();\n        HttpClient httpClient = state.getClient().getLbClient().getHttpClient();\n        try (HttpSolrClient client = new HttpSolrClient.Builder(leaderCoreUrl).withHttpClient(httpClient).build()) {\n          sendCdcrCommand(client, CdcrParams.CdcrAction.CANCEL_BOOTSTRAP);\n        } catch (SolrServerException e) {\n          log.error(\"Error sending cancel bootstrap message to target collection: {} shard: {} leader: {}\",\n              targetCollection, shard, leaderCoreUrl);\n        }\n      } catch (InterruptedException e) {\n        log.error(\"Interrupted while closing BootstrapStatusRunnable\", e);\n        Thread.currentThread().interrupt();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrReplicatorManager.BootstrapStatusRunnable#close().mjava","sourceNew":null,"sourceOld":"    @Override\n    public void close() throws IOException {\n      closed = true;\n      try {\n        Replica leader = state.getClient().getZkStateReader().getLeaderRetry(targetCollection, shard, 30000); // assume same shard exists on target\n        String leaderCoreUrl = leader.getCoreUrl();\n        HttpClient httpClient = state.getClient().getLbClient().getHttpClient();\n        try (HttpSolrClient client = new HttpSolrClient.Builder(leaderCoreUrl).withHttpClient(httpClient).build()) {\n          sendCdcrCommand(client, CdcrParams.CdcrAction.CANCEL_BOOTSTRAP);\n        } catch (SolrServerException e) {\n          log.error(\"Error sending cancel bootstrap message to target collection: {} shard: {} leader: {}\",\n              targetCollection, shard, leaderCoreUrl);\n        }\n      } catch (InterruptedException e) {\n        log.error(\"Interrupted while closing BootstrapStatusRunnable\", e);\n        Thread.currentThread().interrupt();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}