{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","commits":[{"id":"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","date":1358793943,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    assert entry.numBytes < Integer.MAX_VALUE; // nocommit\n    final byte[] bytes = new byte[(int)entry.numBytes];\n    data.readBytes(bytes, 0, bytes.length);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          result.bytes = bytes;\n          result.offset = docID * fixedLength;\n          result.length = fixedLength;\n        }\n      };\n    } else {\n      final NumericDocValues addresses = getNumeric(field);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          int startAddress = docID == 0 ? 0 : (int) addresses.get(docID-1);\n          int endAddress = (int)addresses.get(docID); \n          result.bytes = bytes;\n          result.offset = startAddress;\n          result.length = endAddress - startAddress;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    assert entry.numBytes < Integer.MAX_VALUE; // nocommit\n    final byte[] bytes = new byte[(int)entry.numBytes];\n    data.readBytes(bytes, 0, bytes.length);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          result.bytes = bytes;\n          result.offset = docID * fixedLength;\n          result.length = fixedLength;\n        }\n      };\n    } else {\n      final NumericDocValues addresses = getNumeric(field);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          int startAddress = docID == 0 ? 0 : (int) addresses.get(docID-1);\n          int endAddress = (int)addresses.get(docID); \n          result.bytes = bytes;\n          result.offset = startAddress;\n          result.length = endAddress - startAddress;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e76d3450662dab47d54e3f462c7b3eba4e38b9ac","date":1358866496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    assert entry.numBytes < Integer.MAX_VALUE; // nocommit\n    final byte[] bytes = new byte[(int)entry.numBytes];\n    data.readBytes(bytes, 0, bytes.length);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          result.bytes = bytes;\n          result.offset = docID * fixedLength;\n          result.length = fixedLength;\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          result.bytes = bytes;\n          result.offset = (int) startAddress;\n          result.length = (int) (endAddress - startAddress);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    assert entry.numBytes < Integer.MAX_VALUE; // nocommit\n    final byte[] bytes = new byte[(int)entry.numBytes];\n    data.readBytes(bytes, 0, bytes.length);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          result.bytes = bytes;\n          result.offset = docID * fixedLength;\n          result.length = fixedLength;\n        }\n      };\n    } else {\n      final NumericDocValues addresses = getNumeric(field);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          int startAddress = docID == 0 ? 0 : (int) addresses.get(docID-1);\n          int endAddress = (int)addresses.get(docID); \n          result.bytes = bytes;\n          result.offset = startAddress;\n          result.length = endAddress - startAddress;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce33b902e857f52067011e1a4f4bd4a42627b139","date":1359144094,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    assert entry.numBytes < Integer.MAX_VALUE; // nocommit\n    final byte[] bytes = new byte[(int)entry.numBytes];\n    data.readBytes(bytes, 0, bytes.length);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          result.bytes = bytes;\n          result.offset = docID * fixedLength;\n          result.length = fixedLength;\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          result.bytes = bytes;\n          result.offset = (int) startAddress;\n          result.length = (int) (endAddress - startAddress);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    assert entry.numBytes < Integer.MAX_VALUE; // nocommit\n    final byte[] bytes = new byte[(int)entry.numBytes];\n    data.readBytes(bytes, 0, bytes.length);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          result.bytes = bytes;\n          result.offset = docID * fixedLength;\n          result.length = fixedLength;\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          result.bytes = bytes;\n          result.offset = (int) startAddress;\n          result.length = (int) (endAddress - startAddress);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caa40272511a69bd4ad04b8242ae420932f5799b","date":1359341326,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          bytesReader.fillSlice(result, fixedLength * (long)docID, fixedLength);\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          bytesReader.fillSlice(result, startAddress, (int) (endAddress - startAddress));\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    assert entry.numBytes < Integer.MAX_VALUE; // nocommit\n    final byte[] bytes = new byte[(int)entry.numBytes];\n    data.readBytes(bytes, 0, bytes.length);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          result.bytes = bytes;\n          result.offset = docID * fixedLength;\n          result.length = fixedLength;\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          result.bytes = bytes;\n          result.offset = (int) startAddress;\n          result.length = (int) (endAddress - startAddress);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          bytesReader.fillSlice(result, fixedLength * (long)docID, fixedLength);\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          bytesReader.fillSlice(result, startAddress, (int) (endAddress - startAddress));\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dac1db31006989ae24922811f00f909d30f1391d","date":1387560411,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          bytesReader.fillSlice(result, fixedLength * (long)docID, fixedLength);\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed() + addresses.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          bytesReader.fillSlice(result, startAddress, (int) (endAddress - startAddress));\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          bytesReader.fillSlice(result, fixedLength * (long)docID, fixedLength);\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          bytesReader.fillSlice(result, startAddress, (int) (endAddress - startAddress));\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed() + addresses.ramBytesUsed());\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          bytesReader.fillSlice(result, fixedLength * (long)docID, fixedLength);\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed() + addresses.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public void get(int docID, BytesRef result) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          bytesReader.fillSlice(result, startAddress, (int) (endAddress - startAddress));\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db1893644d5f20456c9524b28e826293d767db65","date":1401985804,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed() + addresses.ramBytesUsed());\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed() + addresses.ramBytesUsed());\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d943163030bbd7a9caf93cb5fea92257390a2a99","date":1403094254,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed() + addresses.ramBytesUsed());\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed() + addresses.ramBytesUsed());\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed() + addresses.ramBytesUsed());\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytes.ramBytesUsed() + addresses.ramBytesUsed());\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed() + addresses.ramBytesUsed());\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed() + addresses.ramBytesUsed());\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#loadBinary(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed() + addresses.ramBytesUsed());\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBinary(FieldInfo field) throws IOException {\n    BinaryEntry entry = binaries.get(field.number);\n    data.seek(entry.offset);\n    PagedBytes bytes = new PagedBytes(16);\n    bytes.copy(data, entry.numBytes);\n    final PagedBytes.Reader bytesReader = bytes.freeze(true);\n    if (entry.minLength == entry.maxLength) {\n      final int fixedLength = entry.minLength;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed());\n      return new BinaryDocValues() {\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } else {\n      final MonotonicBlockPackedReader addresses = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, maxDoc, false);\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed() + addresses.ramBytesUsed());\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          long startAddress = docID == 0 ? 0 : addresses.get(docID-1);\n          long endAddress = addresses.get(docID); \n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, startAddress, (int) (endAddress - startAddress));\n          return term;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"db1893644d5f20456c9524b28e826293d767db65":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["db1893644d5f20456c9524b28e826293d767db65","d943163030bbd7a9caf93cb5fea92257390a2a99"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["dac1db31006989ae24922811f00f909d30f1391d"],"caa40272511a69bd4ad04b8242ae420932f5799b":["ce33b902e857f52067011e1a4f4bd4a42627b139"],"d943163030bbd7a9caf93cb5fea92257390a2a99":["db1893644d5f20456c9524b28e826293d767db65"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["d943163030bbd7a9caf93cb5fea92257390a2a99","4cc45c615dbb82bf79d5f9550286098367874fbf"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","caa40272511a69bd4ad04b8242ae420932f5799b"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ce33b902e857f52067011e1a4f4bd4a42627b139":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["d943163030bbd7a9caf93cb5fea92257390a2a99"],"dac1db31006989ae24922811f00f909d30f1391d":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"commit2Childs":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["ce33b902e857f52067011e1a4f4bd4a42627b139"],"db1893644d5f20456c9524b28e826293d767db65":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","d943163030bbd7a9caf93cb5fea92257390a2a99"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["db1893644d5f20456c9524b28e826293d767db65"],"caa40272511a69bd4ad04b8242ae420932f5799b":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d943163030bbd7a9caf93cb5fea92257390a2a99":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","402ad3ddc9da7b70da1b167667a60ece6a1381fb","4cc45c615dbb82bf79d5f9550286098367874fbf"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["dac1db31006989ae24922811f00f909d30f1391d"],"ce33b902e857f52067011e1a4f4bd4a42627b139":["caa40272511a69bd4ad04b8242ae420932f5799b"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"dac1db31006989ae24922811f00f909d30f1391d":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}