{"path":"src/test/org/apache/lucene/analysis/TestAnalyzers#assertAnalyzesTo(Analyzer,String,String[]).mjava","commits":[{"id":"12600386fedb0398b0f8e7b710089727b833c2e0","date":1004754826,"type":0,"author":"Brian Goetz","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestAnalyzers#assertAnalyzesTo(Analyzer,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  public void assertAnalyzesTo(Analyzer a, \n                               String input, \n                               String[] output) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    for (int i=0; i<output.length; i++) {\n      Token t = ts.next();\n      assertNotNull(t);\n      assertEquals(t.termText(), output[i]);\n    }\n    assertNull(ts.next());\n    ts.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestAnalyzers#assertAnalyzesTo(Analyzer,String,String[]).mjava","pathOld":"src/test/org/apache/lucene/analysis/TestAnalyzers#assertAnalyzesTo(Analyzer,String,String[]).mjava","sourceNew":"  public void assertAnalyzesTo(Analyzer a, \n                               String input, \n                               String[] output) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    final Token reusableToken  = new Token();\n    for (int i=0; i<output.length; i++) {\n      Token nextToken = ts.next(reusableToken);\n      assertNotNull(nextToken);\n      assertEquals(nextToken.term(), output[i]);\n    }\n    assertNull(ts.next(reusableToken));\n    ts.close();\n  }\n\n","sourceOld":"  public void assertAnalyzesTo(Analyzer a, \n                               String input, \n                               String[] output) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    for (int i=0; i<output.length; i++) {\n      Token t = ts.next();\n      assertNotNull(t);\n      assertEquals(t.termText(), output[i]);\n    }\n    assertNull(ts.next());\n    ts.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestAnalyzers#assertAnalyzesTo(Analyzer,String,String[]).mjava","pathOld":"src/test/org/apache/lucene/analysis/TestAnalyzers#assertAnalyzesTo(Analyzer,String,String[]).mjava","sourceNew":"  public void assertAnalyzesTo(Analyzer a, \n                               String input, \n                               String[] output) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    TermAttribute termAtt = (TermAttribute) ts.getAttribute(TermAttribute.class);\n    for (int i=0; i<output.length; i++) {\n      assertTrue(ts.incrementToken());\n      assertEquals(termAtt.term(), output[i]);\n    }\n    assertFalse(ts.incrementToken());\n    ts.close();\n  }\n\n","sourceOld":"  public void assertAnalyzesTo(Analyzer a, \n                               String input, \n                               String[] output) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    final Token reusableToken  = new Token();\n    for (int i=0; i<output.length; i++) {\n      Token nextToken = ts.next(reusableToken);\n      assertNotNull(nextToken);\n      assertEquals(nextToken.term(), output[i]);\n    }\n    assertNull(ts.next(reusableToken));\n    ts.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc","date":1251117853,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/TestAnalyzers#assertAnalyzesTo(Analyzer,String,String[]).mjava","sourceNew":null,"sourceOld":"  public void assertAnalyzesTo(Analyzer a, \n                               String input, \n                               String[] output) throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(input));\n    TermAttribute termAtt = (TermAttribute) ts.getAttribute(TermAttribute.class);\n    for (int i=0; i<output.length; i++) {\n      assertTrue(ts.incrementToken());\n      assertEquals(termAtt.term(), output[i]);\n    }\n    assertFalse(ts.incrementToken());\n    ts.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["12600386fedb0398b0f8e7b710089727b833c2e0"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12600386fedb0398b0f8e7b710089727b833c2e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12600386fedb0398b0f8e7b710089727b833c2e0"],"12600386fedb0398b0f8e7b710089727b833c2e0":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}