{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/BlockGroupingTest#testSimple().mjava","commits":[{"id":"fdedc06ffe6518d5666d12901a738624563d147d","date":1588593300,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/BlockGroupingTest#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws IOException {\n\n    Shard shard = new Shard();\n    indexRandomDocs(shard.writer);\n    IndexSearcher searcher = shard.getIndexSearcher();\n\n    Query blockEndQuery = new TermQuery(new Term(\"blockEnd\", \"true\"));\n    GroupingSearch grouper = new GroupingSearch(blockEndQuery);\n    grouper.setGroupDocsLimit(10);\n\n    Query topLevel = new TermQuery(new Term(\"text\", \"grandmother\"));\n    TopGroups<?> tg = grouper.search(searcher, topLevel, 0, 5);\n\n    // We're sorting by score, so the score of the top group should be the same as the\n    // score of the top document from the same query with no grouping\n    TopDocs topDoc = searcher.search(topLevel, 1);\n    assertEquals(topDoc.scoreDocs[0].score, tg.groups[0].scoreDocs[0].score, 0);\n    assertEquals(topDoc.scoreDocs[0].doc, tg.groups[0].scoreDocs[0].doc);\n\n    for (int i = 0; i < tg.groups.length; i++) {\n      String bookName = searcher.doc(tg.groups[i].scoreDocs[0].doc).get(\"book\");\n      // The contents of each group should be equal to the results of a search for\n      // that group alone\n      Query filtered = new BooleanQuery.Builder()\n          .add(topLevel, BooleanClause.Occur.MUST)\n          .add(new TermQuery(new Term(\"book\", bookName)), BooleanClause.Occur.FILTER)\n          .build();\n      TopDocs td = searcher.search(filtered, 10);\n      assertScoreDocsEquals(td.scoreDocs, tg.groups[i].scoreDocs);\n    }\n\n    shard.close();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fdedc06ffe6518d5666d12901a738624563d147d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fdedc06ffe6518d5666d12901a738624563d147d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fdedc06ffe6518d5666d12901a738624563d147d"],"fdedc06ffe6518d5666d12901a738624563d147d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}