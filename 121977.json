{"path":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/server/registry/configuration/PropertyInjector#createObject(String,Class[#]).mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/server/registry/configuration/PropertyInjector#createObject(String,Class[#]).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/server/registry/configuration/PropertyInjector#createObject(String,Class[#]).mjava","sourceNew":"    private Object createObject(String s, Class<?> clazz) {\n\n        try {\n            // if class is requested use s as fully qualified class name\n            if (clazz == Class.class)\n                return Class.forName(s);\n            // check for primitive type\n            if (clazz.isPrimitive())\n                clazz = ReflectionUtils.getPrimitiveWrapper(clazz);\n            boolean defaultConst = false;\n            boolean stringConst = false;\n            Constructor[] constructors = clazz.getConstructors();\n            if (constructors.length == 0)\n                defaultConst = true;\n            for (int i = 0; i < constructors.length; i++) {\n                if (constructors[i].getParameterTypes().length == 0) {\n                    defaultConst = true;\n                    continue;\n                }\n                if (constructors[i].getParameterTypes().length == 1\n                        && constructors[i].getParameterTypes()[0]\n                                .equals(String.class))\n                    stringConst = true;\n            }\n            /*\n             * if there is a string constructor use the string as a parameter\n             */\n            if (stringConst) {\n                Constructor constructor = clazz\n                        .getConstructor(new Class[] { String.class });\n                return constructor.newInstance(new Object[] { s });\n            }\n            /*\n             * if no string const. but a default const. -- use the string as a\n             * class name\n             */\n            if (defaultConst)\n                return Class.forName(s).newInstance();\n            throw new InjectionException(\n                    \"Parameter can not be created -- no default or String constructor found for class \"\n                            + clazz.getName());\n\n        } catch (Exception e) {\n\n            throw new InjectionException(\"can not create object for setter\", e);\n        }\n\n    }\n\n","sourceOld":"    private Object createObject(String s, Class<?> clazz) {\n\n        try {\n            // if class is requested use s as fully qualified class name\n            if (clazz == Class.class)\n                return Class.forName(s);\n            // check for primitive type\n            if (clazz.isPrimitive())\n                clazz = ReflectionUtils.getPrimitiveWrapper(clazz);\n            boolean defaultConst = false;\n            boolean stringConst = false;\n            Constructor[] constructors = clazz.getConstructors();\n            if (constructors.length == 0)\n                defaultConst = true;\n            for (int i = 0; i < constructors.length; i++) {\n                if (constructors[i].getParameterTypes().length == 0) {\n                    defaultConst = true;\n                    continue;\n                }\n                if (constructors[i].getParameterTypes().length == 1\n                        && constructors[i].getParameterTypes()[0]\n                                .equals(String.class))\n                    stringConst = true;\n            }\n            /*\n             * if there is a string constructor use the string as a parameter\n             */\n            if (stringConst) {\n                Constructor constructor = clazz\n                        .getConstructor(new Class[] { String.class });\n                return constructor.newInstance(new Object[] { s });\n            }\n            /*\n             * if no string const. but a default const. -- use the string as a\n             * class name\n             */\n            if (defaultConst)\n                return Class.forName(s).newInstance();\n            throw new InjectionException(\n                    \"Parameter can not be created -- no default or String constructor found for class \"\n                            + clazz.getName());\n\n        } catch (Exception e) {\n\n            throw new InjectionException(\"can not create object for setter\", e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/server/registry/configuration/PropertyInjector#createObject(String,Class[#]).mjava","sourceNew":null,"sourceOld":"    private Object createObject(String s, Class<?> clazz) {\n\n        try {\n            // if class is requested use s as fully qualified class name\n            if (clazz == Class.class)\n                return Class.forName(s);\n            // check for primitive type\n            if (clazz.isPrimitive())\n                clazz = ReflectionUtils.getPrimitiveWrapper(clazz);\n            boolean defaultConst = false;\n            boolean stringConst = false;\n            Constructor[] constructors = clazz.getConstructors();\n            if (constructors.length == 0)\n                defaultConst = true;\n            for (int i = 0; i < constructors.length; i++) {\n                if (constructors[i].getParameterTypes().length == 0) {\n                    defaultConst = true;\n                    continue;\n                }\n                if (constructors[i].getParameterTypes().length == 1\n                        && constructors[i].getParameterTypes()[0]\n                                .equals(String.class))\n                    stringConst = true;\n            }\n            /*\n             * if there is a string constructor use the string as a parameter\n             */\n            if (stringConst) {\n                Constructor constructor = clazz\n                        .getConstructor(new Class[] { String.class });\n                return constructor.newInstance(new Object[] { s });\n            }\n            /*\n             * if no string const. but a default const. -- use the string as a\n             * class name\n             */\n            if (defaultConst)\n                return Class.forName(s).newInstance();\n            throw new InjectionException(\n                    \"Parameter can not be created -- no default or String constructor found for class \"\n                            + clazz.getName());\n\n        } catch (Exception e) {\n\n            throw new InjectionException(\"can not create object for setter\", e);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}