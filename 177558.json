{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","commits":[{"id":"50e7972fe4865715af8951d4ba15555e3426fc5d","date":1115024647,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","pathOld":"/dev/null","sourceNew":"\t\tpublic TermPositions termPositions() {\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n\t\t\t\n\t\t\treturn new TermPositions() {\n\t\n\t\t\t\tprivate boolean hasNext;\n\t\t\t\tprivate int cursor = 0;\n\t\t\t\tprivate ArrayIntList current;\n\t\t\t\t\n\t\t\t\tpublic void seek(Term term) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".seek: \" + term);\n\t\t\t\t\tInfo info = getInfo(term.field());\n\t\t\t\t\tcurrent = info == null ? null : info.getPositions(term.text());\n\t\t\t\t\thasNext = (current != null);\n\t\t\t\t\tcursor = 0;\n\t\t\t\t}\n\t\n\t\t\t\tpublic void seek(TermEnum termEnum) {\n\t\t\t\t\tseek(termEnum.term());\n\t\t\t\t}\n\t\n\t\t\t\tpublic int doc() {\n\t\t\t\t\tif (DEBUG) System.err.println(\".doc\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int freq() {\n\t\t\t\t\tint freq = current != null ? numPositions(current) : 0;\n\t\t\t\t\tif (DEBUG) System.err.println(\".freq: \" + freq);\n\t\t\t\t\treturn freq;\n\t\t\t\t}\n\t\n\t\t\t\tpublic boolean next() {\n\t\t\t\t\tif (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n\t\t\t\t\tboolean next = hasNext;\n\t\t\t\t\thasNext = false;\n\t\t\t\t\treturn next;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int read(int[] docs, int[] freqs) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".read: \" + docs.length);\n\t\t\t\t\tif (!hasNext) return 0;\n\t\t\t\t\thasNext = false;\n\t\t\t\t\tdocs[0] = 0;\n\t\t\t\t\tfreqs[0] = freq();\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\n\t\t\t\tpublic boolean skipTo(int target) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".skipTo\");\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\n\t\t\t\tpublic void close() {\n\t\t\t\t\tif (DEBUG) System.err.println(\".close\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic int nextPosition() { // implements TermPositions\n\t\t\t\t\tint pos = current.get(cursor);\n\t\t\t\t\tcursor += stride;\n\t\t\t\t\tif (DEBUG) System.err.println(\".nextPosition: \" + pos);\n\t\t\t\t\treturn pos;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"420466ea6fb8e01e3bfb4e8a097659f185e90174","date":1115080407,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","sourceNew":"\t\tpublic TermPositions termPositions() {\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n\t\t\t\n\t\t\treturn new TermPositions() {\n\t\n\t\t\t\tprivate boolean hasNext;\n\t\t\t\tprivate int cursor = 0;\n\t\t\t\tprivate ArrayIntList current;\n\t\t\t\t\n\t\t\t\tpublic void seek(Term term) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".seek: \" + term);\n\t\t\t\t\tInfo info = getInfo(term.field());\n\t\t\t\t\tcurrent = info == null ? null : info.getPositions(term.text());\n\t\t\t\t\thasNext = (current != null);\n\t\t\t\t\tcursor = 0;\n\t\t\t\t}\n\t\n\t\t\t\tpublic void seek(TermEnum termEnum) {\n\t\t\t\t\tseek(termEnum.term());\n\t\t\t\t}\n\t\n\t\t\t\tpublic int doc() {\n\t\t\t\t\tif (DEBUG) System.err.println(\".doc\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int freq() {\n\t\t\t\t\tint freq = current != null ? numPositions(current) : 0;\n\t\t\t\t\tif (DEBUG) System.err.println(\".freq: \" + freq);\n\t\t\t\t\treturn freq;\n\t\t\t\t}\n\t\n\t\t\t\tpublic boolean next() {\n\t\t\t\t\tif (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n\t\t\t\t\tboolean next = hasNext;\n\t\t\t\t\thasNext = false;\n\t\t\t\t\treturn next;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int read(int[] docs, int[] freqs) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".read: \" + docs.length);\n\t\t\t\t\tif (!hasNext) return 0;\n\t\t\t\t\thasNext = false;\n\t\t\t\t\tdocs[0] = 0;\n\t\t\t\t\tfreqs[0] = freq();\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\n\t\t\t\tpublic boolean skipTo(int target) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".skipTo: \" + target);\n\t\t\t\t\treturn next();\n\t\t\t\t}\n        \n\t\t\t\tpublic void close() {\n\t\t\t\t\tif (DEBUG) System.err.println(\".close\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic int nextPosition() { // implements TermPositions\n\t\t\t\t\tint pos = current.get(cursor);\n\t\t\t\t\tcursor += stride;\n\t\t\t\t\tif (DEBUG) System.err.println(\".nextPosition: \" + pos);\n\t\t\t\t\treturn pos;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n","sourceOld":"\t\tpublic TermPositions termPositions() {\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n\t\t\t\n\t\t\treturn new TermPositions() {\n\t\n\t\t\t\tprivate boolean hasNext;\n\t\t\t\tprivate int cursor = 0;\n\t\t\t\tprivate ArrayIntList current;\n\t\t\t\t\n\t\t\t\tpublic void seek(Term term) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".seek: \" + term);\n\t\t\t\t\tInfo info = getInfo(term.field());\n\t\t\t\t\tcurrent = info == null ? null : info.getPositions(term.text());\n\t\t\t\t\thasNext = (current != null);\n\t\t\t\t\tcursor = 0;\n\t\t\t\t}\n\t\n\t\t\t\tpublic void seek(TermEnum termEnum) {\n\t\t\t\t\tseek(termEnum.term());\n\t\t\t\t}\n\t\n\t\t\t\tpublic int doc() {\n\t\t\t\t\tif (DEBUG) System.err.println(\".doc\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int freq() {\n\t\t\t\t\tint freq = current != null ? numPositions(current) : 0;\n\t\t\t\t\tif (DEBUG) System.err.println(\".freq: \" + freq);\n\t\t\t\t\treturn freq;\n\t\t\t\t}\n\t\n\t\t\t\tpublic boolean next() {\n\t\t\t\t\tif (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n\t\t\t\t\tboolean next = hasNext;\n\t\t\t\t\thasNext = false;\n\t\t\t\t\treturn next;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int read(int[] docs, int[] freqs) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".read: \" + docs.length);\n\t\t\t\t\tif (!hasNext) return 0;\n\t\t\t\t\thasNext = false;\n\t\t\t\t\tdocs[0] = 0;\n\t\t\t\t\tfreqs[0] = freq();\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\n\t\t\t\tpublic boolean skipTo(int target) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".skipTo\");\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\n\t\t\t\tpublic void close() {\n\t\t\t\t\tif (DEBUG) System.err.println(\".close\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic int nextPosition() { // implements TermPositions\n\t\t\t\t\tint pos = current.get(cursor);\n\t\t\t\t\tcursor += stride;\n\t\t\t\t\tif (DEBUG) System.err.println(\".nextPosition: \" + pos);\n\t\t\t\t\treturn pos;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8f14489323057ef6de92ba5ea2d0cfe6e34755f","date":1120167605,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","sourceNew":"\t\tpublic TermPositions termPositions() {\r\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\r\n\t\t\t\r\n\t\t\treturn new TermPositions() {\r\n\t\r\n\t\t\t\tprivate boolean hasNext;\r\n\t\t\t\tprivate int cursor = 0;\r\n\t\t\t\tprivate ArrayIntList current;\r\n\t\t\t\t\r\n\t\t\t\tpublic void seek(Term term) {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\".seek: \" + term);\r\n\t\t\t\t\tInfo info = getInfo(term.field());\r\n\t\t\t\t\tcurrent = info == null ? null : info.getPositions(term.text());\r\n\t\t\t\t\thasNext = (current != null);\r\n\t\t\t\t\tcursor = 0;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic void seek(TermEnum termEnum) {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\".seekEnum\");\r\n\t\t\t\t\tseek(termEnum.term());\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic int doc() {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\".doc\");\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic int freq() {\r\n\t\t\t\t\tint freq = current != null ? numPositions(current) : 0;\r\n\t\t\t\t\tif (DEBUG) System.err.println(\".freq: \" + freq);\r\n\t\t\t\t\treturn freq;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic boolean next() {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\r\n\t\t\t\t\tboolean next = hasNext;\r\n\t\t\t\t\thasNext = false;\r\n\t\t\t\t\treturn next;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic int read(int[] docs, int[] freqs) {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\".read: \" + docs.length);\r\n\t\t\t\t\tif (!hasNext) return 0;\r\n\t\t\t\t\thasNext = false;\r\n\t\t\t\t\tdocs[0] = 0;\r\n\t\t\t\t\tfreqs[0] = freq();\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic boolean skipTo(int target) {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\".skipTo: \" + target);\r\n\t\t\t\t\treturn next();\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic void close() {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\".close\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tpublic int nextPosition() { // implements TermPositions\r\n\t\t\t\t\tint pos = current.get(cursor);\r\n\t\t\t\t\tcursor += stride;\r\n\t\t\t\t\tif (DEBUG) System.err.println(\".nextPosition: \" + pos);\r\n\t\t\t\t\treturn pos;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\n","sourceOld":"\t\tpublic TermPositions termPositions() {\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n\t\t\t\n\t\t\treturn new TermPositions() {\n\t\n\t\t\t\tprivate boolean hasNext;\n\t\t\t\tprivate int cursor = 0;\n\t\t\t\tprivate ArrayIntList current;\n\t\t\t\t\n\t\t\t\tpublic void seek(Term term) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".seek: \" + term);\n\t\t\t\t\tInfo info = getInfo(term.field());\n\t\t\t\t\tcurrent = info == null ? null : info.getPositions(term.text());\n\t\t\t\t\thasNext = (current != null);\n\t\t\t\t\tcursor = 0;\n\t\t\t\t}\n\t\n\t\t\t\tpublic void seek(TermEnum termEnum) {\n\t\t\t\t\tseek(termEnum.term());\n\t\t\t\t}\n\t\n\t\t\t\tpublic int doc() {\n\t\t\t\t\tif (DEBUG) System.err.println(\".doc\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int freq() {\n\t\t\t\t\tint freq = current != null ? numPositions(current) : 0;\n\t\t\t\t\tif (DEBUG) System.err.println(\".freq: \" + freq);\n\t\t\t\t\treturn freq;\n\t\t\t\t}\n\t\n\t\t\t\tpublic boolean next() {\n\t\t\t\t\tif (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n\t\t\t\t\tboolean next = hasNext;\n\t\t\t\t\thasNext = false;\n\t\t\t\t\treturn next;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int read(int[] docs, int[] freqs) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".read: \" + docs.length);\n\t\t\t\t\tif (!hasNext) return 0;\n\t\t\t\t\thasNext = false;\n\t\t\t\t\tdocs[0] = 0;\n\t\t\t\t\tfreqs[0] = freq();\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\n\t\t\t\tpublic boolean skipTo(int target) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".skipTo: \" + target);\n\t\t\t\t\treturn next();\n\t\t\t\t}\n        \n\t\t\t\tpublic void close() {\n\t\t\t\t\tif (DEBUG) System.err.println(\".close\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic int nextPosition() { // implements TermPositions\n\t\t\t\t\tint pos = current.get(cursor);\n\t\t\t\t\tcursor += stride;\n\t\t\t\t\tif (DEBUG) System.err.println(\".nextPosition: \" + pos);\n\t\t\t\t\treturn pos;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35dd40ede4dd66fa47506858c4a073d295c5a76e","date":1133587328,"type":4,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","sourceNew":null,"sourceOld":"\t\tpublic TermPositions termPositions() {\r\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\r\n\t\t\t\r\n\t\t\treturn new TermPositions() {\r\n\t\r\n\t\t\t\tprivate boolean hasNext;\r\n\t\t\t\tprivate int cursor = 0;\r\n\t\t\t\tprivate ArrayIntList current;\r\n\t\t\t\t\r\n\t\t\t\tpublic void seek(Term term) {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\".seek: \" + term);\r\n\t\t\t\t\tInfo info = getInfo(term.field());\r\n\t\t\t\t\tcurrent = info == null ? null : info.getPositions(term.text());\r\n\t\t\t\t\thasNext = (current != null);\r\n\t\t\t\t\tcursor = 0;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic void seek(TermEnum termEnum) {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\".seekEnum\");\r\n\t\t\t\t\tseek(termEnum.term());\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic int doc() {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\".doc\");\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic int freq() {\r\n\t\t\t\t\tint freq = current != null ? numPositions(current) : 0;\r\n\t\t\t\t\tif (DEBUG) System.err.println(\".freq: \" + freq);\r\n\t\t\t\t\treturn freq;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic boolean next() {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\r\n\t\t\t\t\tboolean next = hasNext;\r\n\t\t\t\t\thasNext = false;\r\n\t\t\t\t\treturn next;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic int read(int[] docs, int[] freqs) {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\".read: \" + docs.length);\r\n\t\t\t\t\tif (!hasNext) return 0;\r\n\t\t\t\t\thasNext = false;\r\n\t\t\t\t\tdocs[0] = 0;\r\n\t\t\t\t\tfreqs[0] = freq();\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic boolean skipTo(int target) {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\".skipTo: \" + target);\r\n\t\t\t\t\treturn next();\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tpublic void close() {\r\n\t\t\t\t\tif (DEBUG) System.err.println(\".close\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tpublic int nextPosition() { // implements TermPositions\r\n\t\t\t\t\tint pos = current.get(cursor);\r\n\t\t\t\t\tcursor += stride;\r\n\t\t\t\t\tif (DEBUG) System.err.println(\".nextPosition: \" + pos);\r\n\t\t\t\t\treturn pos;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a93e1e4a21be8ebb98e53e6933412a363931faa1","date":1133587471,"type":0,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","pathOld":"/dev/null","sourceNew":"\t\tpublic TermPositions termPositions() {\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n\t\t\t\n\t\t\treturn new TermPositions() {\n\t\n\t\t\t\tprivate boolean hasNext;\n\t\t\t\tprivate int cursor = 0;\n\t\t\t\tprivate ArrayIntList current;\n\t\t\t\t\n\t\t\t\tpublic void seek(Term term) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".seek: \" + term);\n\t\t\t\t\tInfo info = getInfo(term.field());\n\t\t\t\t\tcurrent = info == null ? null : info.getPositions(term.text());\n\t\t\t\t\thasNext = (current != null);\n\t\t\t\t\tcursor = 0;\n\t\t\t\t}\n\t\n\t\t\t\tpublic void seek(TermEnum termEnum) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".seekEnum\");\n\t\t\t\t\tseek(termEnum.term());\n\t\t\t\t}\n\t\n\t\t\t\tpublic int doc() {\n\t\t\t\t\tif (DEBUG) System.err.println(\".doc\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int freq() {\n\t\t\t\t\tint freq = current != null ? numPositions(current) : 0;\n\t\t\t\t\tif (DEBUG) System.err.println(\".freq: \" + freq);\n\t\t\t\t\treturn freq;\n\t\t\t\t}\n\t\n\t\t\t\tpublic boolean next() {\n\t\t\t\t\tif (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n\t\t\t\t\tboolean next = hasNext;\n\t\t\t\t\thasNext = false;\n\t\t\t\t\treturn next;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int read(int[] docs, int[] freqs) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".read: \" + docs.length);\n\t\t\t\t\tif (!hasNext) return 0;\n\t\t\t\t\thasNext = false;\n\t\t\t\t\tdocs[0] = 0;\n\t\t\t\t\tfreqs[0] = freq();\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\n\t\t\t\tpublic boolean skipTo(int target) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".skipTo: \" + target);\n\t\t\t\t\treturn next();\n\t\t\t\t}\n\t\n\t\t\t\tpublic void close() {\n\t\t\t\t\tif (DEBUG) System.err.println(\".close\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic int nextPosition() { // implements TermPositions\n\t\t\t\t\tint pos = current.get(cursor);\n\t\t\t\t\tcursor += stride;\n\t\t\t\t\tif (DEBUG) System.err.println(\".nextPosition: \" + pos);\n\t\t\t\t\treturn pos;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","sourceNew":"    public TermPositions termPositions() {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n      \n      return new TermPositions() {\n  \n        private boolean hasNext;\n        private int cursor = 0;\n        private ArrayIntList current;\n        \n        public void seek(Term term) {\n          if (DEBUG) System.err.println(\".seek: \" + term);\n          Info info = getInfo(term.field());\n          current = info == null ? null : info.getPositions(term.text());\n          hasNext = (current != null);\n          cursor = 0;\n        }\n  \n        public void seek(TermEnum termEnum) {\n          if (DEBUG) System.err.println(\".seekEnum\");\n          seek(termEnum.term());\n        }\n  \n        public int doc() {\n          if (DEBUG) System.err.println(\".doc\");\n          return 0;\n        }\n  \n        public int freq() {\n          int freq = current != null ? numPositions(current) : 0;\n          if (DEBUG) System.err.println(\".freq: \" + freq);\n          return freq;\n        }\n  \n        public boolean next() {\n          if (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n          boolean next = hasNext;\n          hasNext = false;\n          return next;\n        }\n  \n        public int read(int[] docs, int[] freqs) {\n          if (DEBUG) System.err.println(\".read: \" + docs.length);\n          if (!hasNext) return 0;\n          hasNext = false;\n          docs[0] = 0;\n          freqs[0] = freq();\n          return 1;\n        }\n  \n        public boolean skipTo(int target) {\n          if (DEBUG) System.err.println(\".skipTo: \" + target);\n          return next();\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\".close\");\n        }\n        \n        public int nextPosition() { // implements TermPositions\n          int pos = current.get(cursor);\n          cursor += stride;\n          if (DEBUG) System.err.println(\".nextPosition: \" + pos);\n          return pos;\n        }\n      };\n    }\n\n","sourceOld":"\t\tpublic TermPositions termPositions() {\n\t\t\tif (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n\t\t\t\n\t\t\treturn new TermPositions() {\n\t\n\t\t\t\tprivate boolean hasNext;\n\t\t\t\tprivate int cursor = 0;\n\t\t\t\tprivate ArrayIntList current;\n\t\t\t\t\n\t\t\t\tpublic void seek(Term term) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".seek: \" + term);\n\t\t\t\t\tInfo info = getInfo(term.field());\n\t\t\t\t\tcurrent = info == null ? null : info.getPositions(term.text());\n\t\t\t\t\thasNext = (current != null);\n\t\t\t\t\tcursor = 0;\n\t\t\t\t}\n\t\n\t\t\t\tpublic void seek(TermEnum termEnum) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".seekEnum\");\n\t\t\t\t\tseek(termEnum.term());\n\t\t\t\t}\n\t\n\t\t\t\tpublic int doc() {\n\t\t\t\t\tif (DEBUG) System.err.println(\".doc\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int freq() {\n\t\t\t\t\tint freq = current != null ? numPositions(current) : 0;\n\t\t\t\t\tif (DEBUG) System.err.println(\".freq: \" + freq);\n\t\t\t\t\treturn freq;\n\t\t\t\t}\n\t\n\t\t\t\tpublic boolean next() {\n\t\t\t\t\tif (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n\t\t\t\t\tboolean next = hasNext;\n\t\t\t\t\thasNext = false;\n\t\t\t\t\treturn next;\n\t\t\t\t}\n\t\n\t\t\t\tpublic int read(int[] docs, int[] freqs) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".read: \" + docs.length);\n\t\t\t\t\tif (!hasNext) return 0;\n\t\t\t\t\thasNext = false;\n\t\t\t\t\tdocs[0] = 0;\n\t\t\t\t\tfreqs[0] = freq();\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\n\t\t\t\tpublic boolean skipTo(int target) {\n\t\t\t\t\tif (DEBUG) System.err.println(\".skipTo: \" + target);\n\t\t\t\t\treturn next();\n\t\t\t\t}\n\t\n\t\t\t\tpublic void close() {\n\t\t\t\t\tif (DEBUG) System.err.println(\".close\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpublic int nextPosition() { // implements TermPositions\n\t\t\t\t\tint pos = current.get(cursor);\n\t\t\t\t\tcursor += stride;\n\t\t\t\t\tif (DEBUG) System.err.println(\".nextPosition: \" + pos);\n\t\t\t\t\treturn pos;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n","bugFix":null,"bugIntro":["512366c273bec3211f7d36ef75e58e3d32a06e26"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d7bd1340fdceda1dbe4ce3dbb1f47d6a8ef936a","date":1173998152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","sourceNew":"    public TermPositions termPositions() {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n      \n      return new TermPositions() {\n  \n        private boolean hasNext;\n        private int cursor = 0;\n        private ArrayIntList current;\n        \n        public void seek(Term term) {\n          if (DEBUG) System.err.println(\".seek: \" + term);\n          Info info = getInfo(term.field());\n          current = info == null ? null : info.getPositions(term.text());\n          hasNext = (current != null);\n          cursor = 0;\n        }\n  \n        public void seek(TermEnum termEnum) {\n          if (DEBUG) System.err.println(\".seekEnum\");\n          seek(termEnum.term());\n        }\n  \n        public int doc() {\n          if (DEBUG) System.err.println(\".doc\");\n          return 0;\n        }\n  \n        public int freq() {\n          int freq = current != null ? numPositions(current) : 0;\n          if (DEBUG) System.err.println(\".freq: \" + freq);\n          return freq;\n        }\n  \n        public boolean next() {\n          if (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n          boolean next = hasNext;\n          hasNext = false;\n          return next;\n        }\n  \n        public int read(int[] docs, int[] freqs) {\n          if (DEBUG) System.err.println(\".read: \" + docs.length);\n          if (!hasNext) return 0;\n          hasNext = false;\n          docs[0] = 0;\n          freqs[0] = freq();\n          return 1;\n        }\n  \n        public boolean skipTo(int target) {\n          if (DEBUG) System.err.println(\".skipTo: \" + target);\n          return next();\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\".close\");\n        }\n        \n        public int nextPosition() { // implements TermPositions\n          int pos = current.get(cursor);\n          cursor += stride;\n          if (DEBUG) System.err.println(\".nextPosition: \" + pos);\n          return pos;\n        }\n        \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public int getPayloadLength() {\n          throw new UnsupportedOperationException();\n        }\n         \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public byte[] getPayload(byte[] data, int offset) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n      };\n    }\n\n","sourceOld":"    public TermPositions termPositions() {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n      \n      return new TermPositions() {\n  \n        private boolean hasNext;\n        private int cursor = 0;\n        private ArrayIntList current;\n        \n        public void seek(Term term) {\n          if (DEBUG) System.err.println(\".seek: \" + term);\n          Info info = getInfo(term.field());\n          current = info == null ? null : info.getPositions(term.text());\n          hasNext = (current != null);\n          cursor = 0;\n        }\n  \n        public void seek(TermEnum termEnum) {\n          if (DEBUG) System.err.println(\".seekEnum\");\n          seek(termEnum.term());\n        }\n  \n        public int doc() {\n          if (DEBUG) System.err.println(\".doc\");\n          return 0;\n        }\n  \n        public int freq() {\n          int freq = current != null ? numPositions(current) : 0;\n          if (DEBUG) System.err.println(\".freq: \" + freq);\n          return freq;\n        }\n  \n        public boolean next() {\n          if (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n          boolean next = hasNext;\n          hasNext = false;\n          return next;\n        }\n  \n        public int read(int[] docs, int[] freqs) {\n          if (DEBUG) System.err.println(\".read: \" + docs.length);\n          if (!hasNext) return 0;\n          hasNext = false;\n          docs[0] = 0;\n          freqs[0] = freq();\n          return 1;\n        }\n  \n        public boolean skipTo(int target) {\n          if (DEBUG) System.err.println(\".skipTo: \" + target);\n          return next();\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\".close\");\n        }\n        \n        public int nextPosition() { // implements TermPositions\n          int pos = current.get(cursor);\n          cursor += stride;\n          if (DEBUG) System.err.println(\".nextPosition: \" + pos);\n          return pos;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c0aeeba524e0e8bb0582de3313175c424513b31","date":1178307614,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","sourceNew":"    public TermPositions termPositions() {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n      \n      return new TermPositions() {\n  \n        private boolean hasNext;\n        private int cursor = 0;\n        private ArrayIntList current;\n        \n        public void seek(Term term) {\n          if (DEBUG) System.err.println(\".seek: \" + term);\n          Info info = getInfo(term.field());\n          current = info == null ? null : info.getPositions(term.text());\n          hasNext = (current != null);\n          cursor = 0;\n        }\n  \n        public void seek(TermEnum termEnum) {\n          if (DEBUG) System.err.println(\".seekEnum\");\n          seek(termEnum.term());\n        }\n  \n        public int doc() {\n          if (DEBUG) System.err.println(\".doc\");\n          return 0;\n        }\n  \n        public int freq() {\n          int freq = current != null ? numPositions(current) : 0;\n          if (DEBUG) System.err.println(\".freq: \" + freq);\n          return freq;\n        }\n  \n        public boolean next() {\n          if (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n          boolean next = hasNext;\n          hasNext = false;\n          return next;\n        }\n  \n        public int read(int[] docs, int[] freqs) {\n          if (DEBUG) System.err.println(\".read: \" + docs.length);\n          if (!hasNext) return 0;\n          hasNext = false;\n          docs[0] = 0;\n          freqs[0] = freq();\n          return 1;\n        }\n  \n        public boolean skipTo(int target) {\n          if (DEBUG) System.err.println(\".skipTo: \" + target);\n          return next();\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\".close\");\n        }\n        \n        public int nextPosition() { // implements TermPositions\n          int pos = current.get(cursor);\n          cursor += stride;\n          if (DEBUG) System.err.println(\".nextPosition: \" + pos);\n          return pos;\n        }\n        \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public int getPayloadLength() {\n          throw new UnsupportedOperationException();\n        }\n         \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public byte[] getPayload(byte[] data, int offset) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        public boolean isPayloadAvailable() {\n          // unsuported\n          return false;\n        }\n\n      };\n    }\n\n","sourceOld":"    public TermPositions termPositions() {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n      \n      return new TermPositions() {\n  \n        private boolean hasNext;\n        private int cursor = 0;\n        private ArrayIntList current;\n        \n        public void seek(Term term) {\n          if (DEBUG) System.err.println(\".seek: \" + term);\n          Info info = getInfo(term.field());\n          current = info == null ? null : info.getPositions(term.text());\n          hasNext = (current != null);\n          cursor = 0;\n        }\n  \n        public void seek(TermEnum termEnum) {\n          if (DEBUG) System.err.println(\".seekEnum\");\n          seek(termEnum.term());\n        }\n  \n        public int doc() {\n          if (DEBUG) System.err.println(\".doc\");\n          return 0;\n        }\n  \n        public int freq() {\n          int freq = current != null ? numPositions(current) : 0;\n          if (DEBUG) System.err.println(\".freq: \" + freq);\n          return freq;\n        }\n  \n        public boolean next() {\n          if (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n          boolean next = hasNext;\n          hasNext = false;\n          return next;\n        }\n  \n        public int read(int[] docs, int[] freqs) {\n          if (DEBUG) System.err.println(\".read: \" + docs.length);\n          if (!hasNext) return 0;\n          hasNext = false;\n          docs[0] = 0;\n          freqs[0] = freq();\n          return 1;\n        }\n  \n        public boolean skipTo(int target) {\n          if (DEBUG) System.err.println(\".skipTo: \" + target);\n          return next();\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\".close\");\n        }\n        \n        public int nextPosition() { // implements TermPositions\n          int pos = current.get(cursor);\n          cursor += stride;\n          if (DEBUG) System.err.println(\".nextPosition: \" + pos);\n          return pos;\n        }\n        \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public int getPayloadLength() {\n          throw new UnsupportedOperationException();\n        }\n         \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public byte[] getPayload(byte[] data, int offset) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"512366c273bec3211f7d36ef75e58e3d32a06e26","date":1232894323,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","sourceNew":"    public TermPositions termPositions() {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n      \n      return new TermPositions() {\n  \n        private boolean hasNext;\n        private int cursor = 0;\n        private ArrayIntList current;\n        private Term term;\n        \n        public void seek(Term term) {\n          this.term = term;\n          if (DEBUG) System.err.println(\".seek: \" + term);\n          if (term == null) {\n            hasNext = true;  // term==null means match all docs\n          } else {\n            Info info = getInfo(term.field());\n            current = info == null ? null : info.getPositions(term.text());\n            hasNext = (current != null);\n            cursor = 0;\n          }\n        }\n  \n        public void seek(TermEnum termEnum) {\n          if (DEBUG) System.err.println(\".seekEnum\");\n          seek(termEnum.term());\n        }\n  \n        public int doc() {\n          if (DEBUG) System.err.println(\".doc\");\n          return 0;\n        }\n  \n        public int freq() {\n          int freq = current != null ? numPositions(current) : (term == null ? 1 : 0);\n          if (DEBUG) System.err.println(\".freq: \" + freq);\n          return freq;\n        }\n  \n        public boolean next() {\n          if (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n          boolean next = hasNext;\n          hasNext = false;\n          return next;\n        }\n  \n        public int read(int[] docs, int[] freqs) {\n          if (DEBUG) System.err.println(\".read: \" + docs.length);\n          if (!hasNext) return 0;\n          hasNext = false;\n          docs[0] = 0;\n          freqs[0] = freq();\n          return 1;\n        }\n  \n        public boolean skipTo(int target) {\n          if (DEBUG) System.err.println(\".skipTo: \" + target);\n          return next();\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\".close\");\n        }\n        \n        public int nextPosition() { // implements TermPositions\n          int pos = current.get(cursor);\n          cursor += stride;\n          if (DEBUG) System.err.println(\".nextPosition: \" + pos);\n          return pos;\n        }\n        \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public int getPayloadLength() {\n          throw new UnsupportedOperationException();\n        }\n         \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public byte[] getPayload(byte[] data, int offset) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        public boolean isPayloadAvailable() {\n          // unsuported\n          return false;\n        }\n\n      };\n    }\n\n","sourceOld":"    public TermPositions termPositions() {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n      \n      return new TermPositions() {\n  \n        private boolean hasNext;\n        private int cursor = 0;\n        private ArrayIntList current;\n        \n        public void seek(Term term) {\n          if (DEBUG) System.err.println(\".seek: \" + term);\n          Info info = getInfo(term.field());\n          current = info == null ? null : info.getPositions(term.text());\n          hasNext = (current != null);\n          cursor = 0;\n        }\n  \n        public void seek(TermEnum termEnum) {\n          if (DEBUG) System.err.println(\".seekEnum\");\n          seek(termEnum.term());\n        }\n  \n        public int doc() {\n          if (DEBUG) System.err.println(\".doc\");\n          return 0;\n        }\n  \n        public int freq() {\n          int freq = current != null ? numPositions(current) : 0;\n          if (DEBUG) System.err.println(\".freq: \" + freq);\n          return freq;\n        }\n  \n        public boolean next() {\n          if (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n          boolean next = hasNext;\n          hasNext = false;\n          return next;\n        }\n  \n        public int read(int[] docs, int[] freqs) {\n          if (DEBUG) System.err.println(\".read: \" + docs.length);\n          if (!hasNext) return 0;\n          hasNext = false;\n          docs[0] = 0;\n          freqs[0] = freq();\n          return 1;\n        }\n  \n        public boolean skipTo(int target) {\n          if (DEBUG) System.err.println(\".skipTo: \" + target);\n          return next();\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\".close\");\n        }\n        \n        public int nextPosition() { // implements TermPositions\n          int pos = current.get(cursor);\n          cursor += stride;\n          if (DEBUG) System.err.println(\".nextPosition: \" + pos);\n          return pos;\n        }\n        \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public int getPayloadLength() {\n          throw new UnsupportedOperationException();\n        }\n         \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public byte[] getPayload(byte[] data, int offset) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        public boolean isPayloadAvailable() {\n          // unsuported\n          return false;\n        }\n\n      };\n    }\n\n","bugFix":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","sourceNew":"    @Override\n    public TermPositions termPositions() {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n      \n      return new TermPositions() {\n  \n        private boolean hasNext;\n        private int cursor = 0;\n        private ArrayIntList current;\n        private Term term;\n        \n        public void seek(Term term) {\n          this.term = term;\n          if (DEBUG) System.err.println(\".seek: \" + term);\n          if (term == null) {\n            hasNext = true;  // term==null means match all docs\n          } else {\n            Info info = getInfo(term.field());\n            current = info == null ? null : info.getPositions(term.text());\n            hasNext = (current != null);\n            cursor = 0;\n          }\n        }\n  \n        public void seek(TermEnum termEnum) {\n          if (DEBUG) System.err.println(\".seekEnum\");\n          seek(termEnum.term());\n        }\n  \n        public int doc() {\n          if (DEBUG) System.err.println(\".doc\");\n          return 0;\n        }\n  \n        public int freq() {\n          int freq = current != null ? numPositions(current) : (term == null ? 1 : 0);\n          if (DEBUG) System.err.println(\".freq: \" + freq);\n          return freq;\n        }\n  \n        public boolean next() {\n          if (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n          boolean next = hasNext;\n          hasNext = false;\n          return next;\n        }\n  \n        public int read(int[] docs, int[] freqs) {\n          if (DEBUG) System.err.println(\".read: \" + docs.length);\n          if (!hasNext) return 0;\n          hasNext = false;\n          docs[0] = 0;\n          freqs[0] = freq();\n          return 1;\n        }\n  \n        public boolean skipTo(int target) {\n          if (DEBUG) System.err.println(\".skipTo: \" + target);\n          return next();\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\".close\");\n        }\n        \n        public int nextPosition() { // implements TermPositions\n          int pos = current.get(cursor);\n          cursor += stride;\n          if (DEBUG) System.err.println(\".nextPosition: \" + pos);\n          return pos;\n        }\n        \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public int getPayloadLength() {\n          throw new UnsupportedOperationException();\n        }\n         \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public byte[] getPayload(byte[] data, int offset) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        public boolean isPayloadAvailable() {\n          // unsuported\n          return false;\n        }\n\n      };\n    }\n\n","sourceOld":"    public TermPositions termPositions() {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n      \n      return new TermPositions() {\n  \n        private boolean hasNext;\n        private int cursor = 0;\n        private ArrayIntList current;\n        private Term term;\n        \n        public void seek(Term term) {\n          this.term = term;\n          if (DEBUG) System.err.println(\".seek: \" + term);\n          if (term == null) {\n            hasNext = true;  // term==null means match all docs\n          } else {\n            Info info = getInfo(term.field());\n            current = info == null ? null : info.getPositions(term.text());\n            hasNext = (current != null);\n            cursor = 0;\n          }\n        }\n  \n        public void seek(TermEnum termEnum) {\n          if (DEBUG) System.err.println(\".seekEnum\");\n          seek(termEnum.term());\n        }\n  \n        public int doc() {\n          if (DEBUG) System.err.println(\".doc\");\n          return 0;\n        }\n  \n        public int freq() {\n          int freq = current != null ? numPositions(current) : (term == null ? 1 : 0);\n          if (DEBUG) System.err.println(\".freq: \" + freq);\n          return freq;\n        }\n  \n        public boolean next() {\n          if (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n          boolean next = hasNext;\n          hasNext = false;\n          return next;\n        }\n  \n        public int read(int[] docs, int[] freqs) {\n          if (DEBUG) System.err.println(\".read: \" + docs.length);\n          if (!hasNext) return 0;\n          hasNext = false;\n          docs[0] = 0;\n          freqs[0] = freq();\n          return 1;\n        }\n  \n        public boolean skipTo(int target) {\n          if (DEBUG) System.err.println(\".skipTo: \" + target);\n          return next();\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\".close\");\n        }\n        \n        public int nextPosition() { // implements TermPositions\n          int pos = current.get(cursor);\n          cursor += stride;\n          if (DEBUG) System.err.println(\".nextPosition: \" + pos);\n          return pos;\n        }\n        \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public int getPayloadLength() {\n          throw new UnsupportedOperationException();\n        }\n         \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public byte[] getPayload(byte[] data, int offset) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        public boolean isPayloadAvailable() {\n          // unsuported\n          return false;\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader#termPositions().mjava","sourceNew":"    @Override\n    public TermPositions termPositions() {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n      \n      return new TermPositions() {\n  \n        private boolean hasNext;\n        private int cursor = 0;\n        private ArrayIntList current;\n        private Term term;\n        \n        public void seek(Term term) {\n          this.term = term;\n          if (DEBUG) System.err.println(\".seek: \" + term);\n          if (term == null) {\n            hasNext = true;  // term==null means match all docs\n          } else {\n            Info info = getInfo(term.field());\n            current = info == null ? null : info.getPositions(term.text());\n            hasNext = (current != null);\n            cursor = 0;\n          }\n        }\n  \n        public void seek(TermEnum termEnum) {\n          if (DEBUG) System.err.println(\".seekEnum\");\n          seek(termEnum.term());\n        }\n  \n        public int doc() {\n          if (DEBUG) System.err.println(\".doc\");\n          return 0;\n        }\n  \n        public int freq() {\n          int freq = current != null ? numPositions(current) : (term == null ? 1 : 0);\n          if (DEBUG) System.err.println(\".freq: \" + freq);\n          return freq;\n        }\n  \n        public boolean next() {\n          if (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n          boolean next = hasNext;\n          hasNext = false;\n          return next;\n        }\n  \n        public int read(int[] docs, int[] freqs) {\n          if (DEBUG) System.err.println(\".read: \" + docs.length);\n          if (!hasNext) return 0;\n          hasNext = false;\n          docs[0] = 0;\n          freqs[0] = freq();\n          return 1;\n        }\n  \n        public boolean skipTo(int target) {\n          if (DEBUG) System.err.println(\".skipTo: \" + target);\n          return next();\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\".close\");\n        }\n        \n        public int nextPosition() { // implements TermPositions\n          int pos = current.get(cursor);\n          cursor += stride;\n          if (DEBUG) System.err.println(\".nextPosition: \" + pos);\n          return pos;\n        }\n        \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public int getPayloadLength() {\n          throw new UnsupportedOperationException();\n        }\n         \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public byte[] getPayload(byte[] data, int offset) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        public boolean isPayloadAvailable() {\n          // unsuported\n          return false;\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public TermPositions termPositions() {\n      if (DEBUG) System.err.println(\"MemoryIndexReader.termPositions\");\n      \n      return new TermPositions() {\n  \n        private boolean hasNext;\n        private int cursor = 0;\n        private ArrayIntList current;\n        private Term term;\n        \n        public void seek(Term term) {\n          this.term = term;\n          if (DEBUG) System.err.println(\".seek: \" + term);\n          if (term == null) {\n            hasNext = true;  // term==null means match all docs\n          } else {\n            Info info = getInfo(term.field());\n            current = info == null ? null : info.getPositions(term.text());\n            hasNext = (current != null);\n            cursor = 0;\n          }\n        }\n  \n        public void seek(TermEnum termEnum) {\n          if (DEBUG) System.err.println(\".seekEnum\");\n          seek(termEnum.term());\n        }\n  \n        public int doc() {\n          if (DEBUG) System.err.println(\".doc\");\n          return 0;\n        }\n  \n        public int freq() {\n          int freq = current != null ? numPositions(current) : (term == null ? 1 : 0);\n          if (DEBUG) System.err.println(\".freq: \" + freq);\n          return freq;\n        }\n  \n        public boolean next() {\n          if (DEBUG) System.err.println(\".next: \" + current + \", oldHasNext=\" + hasNext);\n          boolean next = hasNext;\n          hasNext = false;\n          return next;\n        }\n  \n        public int read(int[] docs, int[] freqs) {\n          if (DEBUG) System.err.println(\".read: \" + docs.length);\n          if (!hasNext) return 0;\n          hasNext = false;\n          docs[0] = 0;\n          freqs[0] = freq();\n          return 1;\n        }\n  \n        public boolean skipTo(int target) {\n          if (DEBUG) System.err.println(\".skipTo: \" + target);\n          return next();\n        }\n  \n        public void close() {\n          if (DEBUG) System.err.println(\".close\");\n        }\n        \n        public int nextPosition() { // implements TermPositions\n          int pos = current.get(cursor);\n          cursor += stride;\n          if (DEBUG) System.err.println(\".nextPosition: \" + pos);\n          return pos;\n        }\n        \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public int getPayloadLength() {\n          throw new UnsupportedOperationException();\n        }\n         \n        /**\n         * Not implemented.\n         * @throws UnsupportedOperationException\n         */\n        public byte[] getPayload(byte[] data, int offset) throws IOException {\n          throw new UnsupportedOperationException();\n        }\n\n        public boolean isPayloadAvailable() {\n          // unsuported\n          return false;\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"420466ea6fb8e01e3bfb4e8a097659f185e90174":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"35dd40ede4dd66fa47506858c4a073d295c5a76e":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["420466ea6fb8e01e3bfb4e8a097659f185e90174"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["a93e1e4a21be8ebb98e53e6933412a363931faa1"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["512366c273bec3211f7d36ef75e58e3d32a06e26"],"4c0aeeba524e0e8bb0582de3313175c424513b31":["0d7bd1340fdceda1dbe4ce3dbb1f47d6a8ef936a"],"a93e1e4a21be8ebb98e53e6933412a363931faa1":["35dd40ede4dd66fa47506858c4a073d295c5a76e"],"512366c273bec3211f7d36ef75e58e3d32a06e26":["4c0aeeba524e0e8bb0582de3313175c424513b31"],"0d7bd1340fdceda1dbe4ce3dbb1f47d6a8ef936a":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"50e7972fe4865715af8951d4ba15555e3426fc5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"420466ea6fb8e01e3bfb4e8a097659f185e90174":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"35dd40ede4dd66fa47506858c4a073d295c5a76e":["a93e1e4a21be8ebb98e53e6933412a363931faa1"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["35dd40ede4dd66fa47506858c4a073d295c5a76e"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["0d7bd1340fdceda1dbe4ce3dbb1f47d6a8ef936a"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a93e1e4a21be8ebb98e53e6933412a363931faa1":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"4c0aeeba524e0e8bb0582de3313175c424513b31":["512366c273bec3211f7d36ef75e58e3d32a06e26"],"512366c273bec3211f7d36ef75e58e3d32a06e26":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"0d7bd1340fdceda1dbe4ce3dbb1f47d6a8ef936a":["4c0aeeba524e0e8bb0582de3313175c424513b31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["420466ea6fb8e01e3bfb4e8a097659f185e90174"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}