{"path":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],List[Field],List[Field]).mjava","commits":[{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],List[Field],List[Field]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(Map[String,List[AssociationFacetField]],List[Field],List[Field]).mjava","sourceNew":"  private void processAssocFacetFields(TaxonomyWriter taxoWriter, Map<String,List<AssociationFacetField>> byField,\n                                       List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n    for(Map.Entry<String,List<AssociationFacetField>> ent : byField.entrySet()) {\n      byte[] bytes = new byte[16];\n      int upto = 0;\n      String indexFieldName = ent.getKey();\n      for(AssociationFacetField field : ent.getValue()) {\n        // NOTE: we don't add parents for associations\n        // nocommit is that right?  maybe we are supposed to\n        // add to taxo writer, and just not index the parent\n        // ords?\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(new FacetLabel(field.dim, field.path));\n        if (upto + 4 > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+4);\n        }\n        // big-endian:\n        bytes[upto++] = (byte) (ordinal >> 24);\n        bytes[upto++] = (byte) (ordinal >> 16);\n        bytes[upto++] = (byte) (ordinal >> 8);\n        bytes[upto++] = (byte) ordinal;\n        if (upto + field.assoc.length > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+field.assoc.length);\n        }\n        System.arraycopy(field.assoc.bytes, field.assoc.offset, bytes, upto, field.assoc.length);\n        upto += field.assoc.length;\n      }\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, new BytesRef(bytes, 0, upto)));\n    }\n  }\n\n","sourceOld":"  private void processAssocFacetFields(Map<String,List<AssociationFacetField>> byField,\n                                       List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n    for(Map.Entry<String,List<AssociationFacetField>> ent : byField.entrySet()) {\n      byte[] bytes = new byte[16];\n      int upto = 0;\n      String indexFieldName = ent.getKey();\n      for(AssociationFacetField field : ent.getValue()) {\n        // NOTE: we don't add parents for associations\n        // nocommit is that right?  maybe we are supposed to\n        // add to taxo writer, and just not index the parent\n        // ords?\n        checkTaxoWriter();\n        int ordinal = taxoWriter.addCategory(FacetLabel.create(field.dim, field.path));\n        if (upto + 4 > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+4);\n        }\n        // big-endian:\n        bytes[upto++] = (byte) (ordinal >> 24);\n        bytes[upto++] = (byte) (ordinal >> 16);\n        bytes[upto++] = (byte) (ordinal >> 8);\n        bytes[upto++] = (byte) ordinal;\n        if (upto + field.assoc.length > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+field.assoc.length);\n        }\n        System.arraycopy(field.assoc.bytes, field.assoc.offset, bytes, upto, field.assoc.length);\n        upto += field.assoc.length;\n      }\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, new BytesRef(bytes, 0, upto)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51aa27dcefc9a1be9ba2bb5f1c29d5e357cec4f8","date":1387415264,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],List[Field],List[Field]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],List[Field],List[Field]).mjava","sourceNew":"  private void processAssocFacetFields(TaxonomyWriter taxoWriter, Map<String,List<AssociationFacetField>> byField,\n                                       List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n    for(Map.Entry<String,List<AssociationFacetField>> ent : byField.entrySet()) {\n      byte[] bytes = new byte[16];\n      int upto = 0;\n      String indexFieldName = ent.getKey();\n      for(AssociationFacetField field : ent.getValue()) {\n        // NOTE: we don't add parents for associations\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(new FacetLabel(field.dim, field.path));\n        if (upto + 4 > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+4);\n        }\n        // big-endian:\n        bytes[upto++] = (byte) (ordinal >> 24);\n        bytes[upto++] = (byte) (ordinal >> 16);\n        bytes[upto++] = (byte) (ordinal >> 8);\n        bytes[upto++] = (byte) ordinal;\n        if (upto + field.assoc.length > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+field.assoc.length);\n        }\n        System.arraycopy(field.assoc.bytes, field.assoc.offset, bytes, upto, field.assoc.length);\n        upto += field.assoc.length;\n      }\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, new BytesRef(bytes, 0, upto)));\n    }\n  }\n\n","sourceOld":"  private void processAssocFacetFields(TaxonomyWriter taxoWriter, Map<String,List<AssociationFacetField>> byField,\n                                       List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n    for(Map.Entry<String,List<AssociationFacetField>> ent : byField.entrySet()) {\n      byte[] bytes = new byte[16];\n      int upto = 0;\n      String indexFieldName = ent.getKey();\n      for(AssociationFacetField field : ent.getValue()) {\n        // NOTE: we don't add parents for associations\n        // nocommit is that right?  maybe we are supposed to\n        // add to taxo writer, and just not index the parent\n        // ords?\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(new FacetLabel(field.dim, field.path));\n        if (upto + 4 > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+4);\n        }\n        // big-endian:\n        bytes[upto++] = (byte) (ordinal >> 24);\n        bytes[upto++] = (byte) (ordinal >> 16);\n        bytes[upto++] = (byte) (ordinal >> 8);\n        bytes[upto++] = (byte) ordinal;\n        if (upto + field.assoc.length > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+field.assoc.length);\n        }\n        System.arraycopy(field.assoc.bytes, field.assoc.offset, bytes, upto, field.assoc.length);\n        upto += field.assoc.length;\n      }\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, new BytesRef(bytes, 0, upto)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],List[Field],List[Field]).mjava","pathOld":"/dev/null","sourceNew":"  private void processAssocFacetFields(TaxonomyWriter taxoWriter, Map<String,List<AssociationFacetField>> byField,\n                                       List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n    for(Map.Entry<String,List<AssociationFacetField>> ent : byField.entrySet()) {\n      byte[] bytes = new byte[16];\n      int upto = 0;\n      String indexFieldName = ent.getKey();\n      for(AssociationFacetField field : ent.getValue()) {\n        // NOTE: we don't add parents for associations\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(new FacetLabel(field.dim, field.path));\n        if (upto + 4 > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+4);\n        }\n        // big-endian:\n        bytes[upto++] = (byte) (ordinal >> 24);\n        bytes[upto++] = (byte) (ordinal >> 16);\n        bytes[upto++] = (byte) (ordinal >> 8);\n        bytes[upto++] = (byte) ordinal;\n        if (upto + field.assoc.length > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+field.assoc.length);\n        }\n        System.arraycopy(field.assoc.bytes, field.assoc.offset, bytes, upto, field.assoc.length);\n        upto += field.assoc.length;\n      }\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, new BytesRef(bytes, 0, upto)));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"755faee94413f220e729a0b60122d6b24f7a2468","date":1391011756,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],Document).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#processAssocFacetFields(TaxonomyWriter,Map[String,List[AssociationFacetField]],List[Field],List[Field]).mjava","sourceNew":"  private void processAssocFacetFields(TaxonomyWriter taxoWriter,\n      Map<String,List<AssociationFacetField>> byField, Document doc)\n      throws IOException {\n    for (Map.Entry<String,List<AssociationFacetField>> ent : byField.entrySet()) {\n      byte[] bytes = new byte[16];\n      int upto = 0;\n      String indexFieldName = ent.getKey();\n      for(AssociationFacetField field : ent.getValue()) {\n        // NOTE: we don't add parents for associations\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(new FacetLabel(field.dim, field.path));\n        if (upto + 4 > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+4);\n        }\n        // big-endian:\n        bytes[upto++] = (byte) (ordinal >> 24);\n        bytes[upto++] = (byte) (ordinal >> 16);\n        bytes[upto++] = (byte) (ordinal >> 8);\n        bytes[upto++] = (byte) ordinal;\n        if (upto + field.assoc.length > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+field.assoc.length);\n        }\n        System.arraycopy(field.assoc.bytes, field.assoc.offset, bytes, upto, field.assoc.length);\n        upto += field.assoc.length;\n      }\n      doc.add(new BinaryDocValuesField(indexFieldName, new BytesRef(bytes, 0, upto)));\n    }\n  }\n\n","sourceOld":"  private void processAssocFacetFields(TaxonomyWriter taxoWriter, Map<String,List<AssociationFacetField>> byField,\n                                       List<Field> addedIndexedFields, List<Field> addedStoredFields) throws IOException {\n    for(Map.Entry<String,List<AssociationFacetField>> ent : byField.entrySet()) {\n      byte[] bytes = new byte[16];\n      int upto = 0;\n      String indexFieldName = ent.getKey();\n      for(AssociationFacetField field : ent.getValue()) {\n        // NOTE: we don't add parents for associations\n        checkTaxoWriter(taxoWriter);\n        int ordinal = taxoWriter.addCategory(new FacetLabel(field.dim, field.path));\n        if (upto + 4 > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+4);\n        }\n        // big-endian:\n        bytes[upto++] = (byte) (ordinal >> 24);\n        bytes[upto++] = (byte) (ordinal >> 16);\n        bytes[upto++] = (byte) (ordinal >> 8);\n        bytes[upto++] = (byte) ordinal;\n        if (upto + field.assoc.length > bytes.length) {\n          bytes = ArrayUtil.grow(bytes, upto+field.assoc.length);\n        }\n        System.arraycopy(field.assoc.bytes, field.assoc.offset, bytes, upto, field.assoc.length);\n        upto += field.assoc.length;\n      }\n      addedStoredFields.add(new BinaryDocValuesField(indexFieldName, new BytesRef(bytes, 0, upto)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"755faee94413f220e729a0b60122d6b24f7a2468":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd83550e4b0bdd36e7d9dca9273264100782440b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51aa27dcefc9a1be9ba2bb5f1c29d5e357cec4f8"],"51aa27dcefc9a1be9ba2bb5f1c29d5e357cec4f8":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["755faee94413f220e729a0b60122d6b24f7a2468"]},"commit2Childs":{"755faee94413f220e729a0b60122d6b24f7a2468":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd83550e4b0bdd36e7d9dca9273264100782440b","3cc728b07df73b197e6d940d27f9b08b63918f13"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["51aa27dcefc9a1be9ba2bb5f1c29d5e357cec4f8"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["755faee94413f220e729a0b60122d6b24f7a2468"],"51aa27dcefc9a1be9ba2bb5f1c29d5e357cec4f8":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}