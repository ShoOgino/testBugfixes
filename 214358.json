{"path":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testTieBreakByDocID().mjava","commits":[{"id":"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","date":1456936072,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testTieBreakByDocID().mjava","pathOld":"/dev/null","sourceNew":"  public void testTieBreakByDocID() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    for(int i=0;i<300000;i++) {\n      w.addDocument(doc);\n      if (false && random().nextInt(1000) == 17) {\n        w.commit();\n      }\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues points = ctx.reader().getPointValues();\n      points.intersect(\"int\",\n                       new IntersectVisitor() {\n\n                         int lastDocID = -1;\n\n                         @Override\n                         public void visit(int docID) {\n                           if (docID < lastDocID) {\n                             fail(\"docs out of order: docID=\" + docID + \" but lastDocID=\" + lastDocID);\n                           }\n                           lastDocID = docID;\n                         }\n\n                         @Override\n                         public void visit(int docID, byte[] packedValue) {\n                           visit(docID);\n                         }\n\n                         @Override\n                         public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                           if (random().nextBoolean()) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           } else {\n                             return Relation.CELL_INSIDE_QUERY;\n                           }\n                         }\n                       });\n    }\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testTieBreakByDocID().mjava","pathOld":"/dev/null","sourceNew":"  public void testTieBreakByDocID() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    for(int i=0;i<300000;i++) {\n      w.addDocument(doc);\n      if (false && random().nextInt(1000) == 17) {\n        w.commit();\n      }\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues points = ctx.reader().getPointValues();\n      points.intersect(\"int\",\n                       new IntersectVisitor() {\n\n                         int lastDocID = -1;\n\n                         @Override\n                         public void visit(int docID) {\n                           if (docID < lastDocID) {\n                             fail(\"docs out of order: docID=\" + docID + \" but lastDocID=\" + lastDocID);\n                           }\n                           lastDocID = docID;\n                         }\n\n                         @Override\n                         public void visit(int docID, byte[] packedValue) {\n                           visit(docID);\n                         }\n\n                         @Override\n                         public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                           if (random().nextBoolean()) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           } else {\n                             return Relation.CELL_INSIDE_QUERY;\n                           }\n                         }\n                       });\n    }\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18976891ccd347c7963909e21898bd56fe440797","date":1458033533,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testTieBreakByDocID().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testTieBreakByDocID().mjava","sourceNew":"  public void testTieBreakByDocID() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    for(int i=0;i<300000;i++) {\n      w.addDocument(doc);\n      if (random().nextInt(1000) == 17) {\n        w.commit();\n      }\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues points = ctx.reader().getPointValues();\n      points.intersect(\"int\",\n                       new IntersectVisitor() {\n\n                         int lastDocID = -1;\n\n                         @Override\n                         public void visit(int docID) {\n                           if (docID < lastDocID) {\n                             fail(\"docs out of order: docID=\" + docID + \" but lastDocID=\" + lastDocID);\n                           }\n                           lastDocID = docID;\n                         }\n\n                         @Override\n                         public void visit(int docID, byte[] packedValue) {\n                           visit(docID);\n                         }\n\n                         @Override\n                         public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                           if (random().nextBoolean()) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           } else {\n                             return Relation.CELL_INSIDE_QUERY;\n                           }\n                         }\n                       });\n    }\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTieBreakByDocID() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    for(int i=0;i<300000;i++) {\n      w.addDocument(doc);\n      if (false && random().nextInt(1000) == 17) {\n        w.commit();\n      }\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues points = ctx.reader().getPointValues();\n      points.intersect(\"int\",\n                       new IntersectVisitor() {\n\n                         int lastDocID = -1;\n\n                         @Override\n                         public void visit(int docID) {\n                           if (docID < lastDocID) {\n                             fail(\"docs out of order: docID=\" + docID + \" but lastDocID=\" + lastDocID);\n                           }\n                           lastDocID = docID;\n                         }\n\n                         @Override\n                         public void visit(int docID, byte[] packedValue) {\n                           visit(docID);\n                         }\n\n                         @Override\n                         public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                           if (random().nextBoolean()) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           } else {\n                             return Relation.CELL_INSIDE_QUERY;\n                           }\n                         }\n                       });\n    }\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testTieBreakByDocID().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testTieBreakByDocID().mjava","sourceNew":"  public void testTieBreakByDocID() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    for(int i=0;i<300000;i++) {\n      w.addDocument(doc);\n      if (random().nextInt(1000) == 17) {\n        w.commit();\n      }\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues points = ctx.reader().getPointValues(\"int\");\n      points.intersect(\n                       new IntersectVisitor() {\n\n                         int lastDocID = -1;\n\n                         @Override\n                         public void visit(int docID) {\n                           if (docID < lastDocID) {\n                             fail(\"docs out of order: docID=\" + docID + \" but lastDocID=\" + lastDocID);\n                           }\n                           lastDocID = docID;\n                         }\n\n                         @Override\n                         public void visit(int docID, byte[] packedValue) {\n                           visit(docID);\n                         }\n\n                         @Override\n                         public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                           if (random().nextBoolean()) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           } else {\n                             return Relation.CELL_INSIDE_QUERY;\n                           }\n                         }\n                       });\n    }\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTieBreakByDocID() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    for(int i=0;i<300000;i++) {\n      w.addDocument(doc);\n      if (random().nextInt(1000) == 17) {\n        w.commit();\n      }\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues points = ctx.reader().getPointValues();\n      points.intersect(\"int\",\n                       new IntersectVisitor() {\n\n                         int lastDocID = -1;\n\n                         @Override\n                         public void visit(int docID) {\n                           if (docID < lastDocID) {\n                             fail(\"docs out of order: docID=\" + docID + \" but lastDocID=\" + lastDocID);\n                           }\n                           lastDocID = docID;\n                         }\n\n                         @Override\n                         public void visit(int docID, byte[] packedValue) {\n                           visit(docID);\n                         }\n\n                         @Override\n                         public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                           if (random().nextBoolean()) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           } else {\n                             return Relation.CELL_INSIDE_QUERY;\n                           }\n                         }\n                       });\n    }\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testTieBreakByDocID().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testTieBreakByDocID().mjava","sourceNew":"  public void testTieBreakByDocID() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    for(int i=0;i<300000;i++) {\n      w.addDocument(doc);\n      if (random().nextInt(1000) == 17) {\n        w.commit();\n      }\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues points = ctx.reader().getPointValues(\"int\");\n      points.intersect(\n                       new IntersectVisitor() {\n\n                         int lastDocID = -1;\n\n                         @Override\n                         public void visit(int docID) {\n                           if (docID < lastDocID) {\n                             fail(\"docs out of order: docID=\" + docID + \" but lastDocID=\" + lastDocID);\n                           }\n                           lastDocID = docID;\n                         }\n\n                         @Override\n                         public void visit(int docID, byte[] packedValue) {\n                           visit(docID);\n                         }\n\n                         @Override\n                         public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                           if (random().nextBoolean()) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           } else {\n                             return Relation.CELL_INSIDE_QUERY;\n                           }\n                         }\n                       });\n    }\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTieBreakByDocID() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    for(int i=0;i<300000;i++) {\n      w.addDocument(doc);\n      if (random().nextInt(1000) == 17) {\n        w.commit();\n      }\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues points = ctx.reader().getPointValues();\n      points.intersect(\"int\",\n                       new IntersectVisitor() {\n\n                         int lastDocID = -1;\n\n                         @Override\n                         public void visit(int docID) {\n                           if (docID < lastDocID) {\n                             fail(\"docs out of order: docID=\" + docID + \" but lastDocID=\" + lastDocID);\n                           }\n                           lastDocID = docID;\n                         }\n\n                         @Override\n                         public void visit(int docID, byte[] packedValue) {\n                           visit(docID);\n                         }\n\n                         @Override\n                         public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                           if (random().nextBoolean()) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           } else {\n                             return Relation.CELL_INSIDE_QUERY;\n                           }\n                         }\n                       });\n    }\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db3ae422c232cf9f86344d23f88e947d5db2b92c","date":1579706835,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testTieBreakByDocID().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testTieBreakByDocID().mjava","sourceNew":"  public void testTieBreakByDocID() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    int numDocs = TEST_NIGHTLY ? 300000 : 3000;\n    for(int i=0;i<numDocs;i++) {\n      w.addDocument(doc);\n      if (random().nextInt(1000) == 17) {\n        w.commit();\n      }\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues points = ctx.reader().getPointValues(\"int\");\n      points.intersect(\n                       new IntersectVisitor() {\n\n                         int lastDocID = -1;\n\n                         @Override\n                         public void visit(int docID) {\n                           if (docID < lastDocID) {\n                             fail(\"docs out of order: docID=\" + docID + \" but lastDocID=\" + lastDocID);\n                           }\n                           lastDocID = docID;\n                         }\n\n                         @Override\n                         public void visit(int docID, byte[] packedValue) {\n                           visit(docID);\n                         }\n\n                         @Override\n                         public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                           if (random().nextBoolean()) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           } else {\n                             return Relation.CELL_INSIDE_QUERY;\n                           }\n                         }\n                       });\n    }\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testTieBreakByDocID() throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    for(int i=0;i<300000;i++) {\n      w.addDocument(doc);\n      if (random().nextInt(1000) == 17) {\n        w.commit();\n      }\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues points = ctx.reader().getPointValues(\"int\");\n      points.intersect(\n                       new IntersectVisitor() {\n\n                         int lastDocID = -1;\n\n                         @Override\n                         public void visit(int docID) {\n                           if (docID < lastDocID) {\n                             fail(\"docs out of order: docID=\" + docID + \" but lastDocID=\" + lastDocID);\n                           }\n                           lastDocID = docID;\n                         }\n\n                         @Override\n                         public void visit(int docID, byte[] packedValue) {\n                           visit(docID);\n                         }\n\n                         @Override\n                         public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                           if (random().nextBoolean()) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           } else {\n                             return Relation.CELL_INSIDE_QUERY;\n                           }\n                         }\n                       });\n    }\n    \n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db3ae422c232cf9f86344d23f88e947d5db2b92c":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"18976891ccd347c7963909e21898bd56fe440797":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["18976891ccd347c7963909e21898bd56fe440797"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["18976891ccd347c7963909e21898bd56fe440797","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db3ae422c232cf9f86344d23f88e947d5db2b92c"]},"commit2Childs":{"db3ae422c232cf9f86344d23f88e947d5db2b92c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"18976891ccd347c7963909e21898bd56fe440797":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["db3ae422c232cf9f86344d23f88e947d5db2b92c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["18976891ccd347c7963909e21898bd56fe440797"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}