{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#topScorer(AtomicReaderContext,boolean,Bits).mjava","commits":[{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#topScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public TopScorer topScorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                               Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.topScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<TopScorer> prohibited = new ArrayList<TopScorer>();\n      List<TopScorer> optional = new ArrayList<TopScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        TopScorer subScorer = w.topScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.topScorer(context, scoreDocsInOrder, acceptDocs);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // Check if we can and should return a BooleanScorer\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5794e5c995c57444b154b01a9f3c837cd530a77","date":1394190201,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#topScorer(AtomicReaderContext,boolean,Bits).mjava","sourceNew":"    @Override\n    public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                               Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<BulkScorer> prohibited = new ArrayList<BulkScorer>();\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // Check if we can and should return a BooleanScorer\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n    }\n\n","sourceOld":"    @Override\n    public TopScorer topScorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                               Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.topScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<TopScorer> prohibited = new ArrayList<TopScorer>();\n      List<TopScorer> optional = new ArrayList<TopScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        TopScorer subScorer = w.topScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.topScorer(context, scoreDocsInOrder, acceptDocs);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // Check if we can and should return a BooleanScorer\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5794e5c995c57444b154b01a9f3c837cd530a77":["2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["a5794e5c995c57444b154b01a9f3c837cd530a77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5794e5c995c57444b154b01a9f3c837cd530a77":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a5794e5c995c57444b154b01a9f3c837cd530a77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}