{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#main(String[]).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * this class reads in store.log, constructs a graph of the crawled web and is able\n     * to perform a breadth-first search for the shortest distance between two nodes<br>\n     * Note: this is experimental stuff. get into the source code to see how it works\n     * @param args  args[0] must point to the store.log file\n     */\n    public static void main(String[] args)\n    {\n        // Syntax: DistanceCount <store.log>\n        try\n        {\n            DistanceCount dc = new DistanceCount(args[0]);\n            boolean running = true;\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in),400);\n            while (running)\n            {\n                System.out.print(\"\\n\\nCommand (? for help) > \");\n                String newL;\n                String input = \"\";\n                //while((newL = in.readLine()) != null)\n                //{\n                    input = in.readLine();\n                StringTokenizer st = new StringTokenizer(input,\" \");\n                String command;\n                boolean printHelp = false;\n\n                if (!st.hasMoreTokens())\n                {\n                    printHelp = true;\n                    command = \"?\";\n                }\n                else\n                {\n                    command = st.nextToken();\n                }\n\n                try\n                {\n                    if (\"?\".equals(command))\n                    {\n                        printHelp = true;\n                    }\n                    else if (\"d\".equals(command))\n                    {\n                        String from = st.nextToken();\n                        String to = st.nextToken();\n                        dc.printDistance(from ,to);\n                    }\n                    else if (\"q\".equals(command))\n                    {\n                        running = false;\n                    }\n                    else if (\"r\".equals(command))\n                    {\n                        dc.printRandomRoute();\n                    }\n                    else\n                    {\n                        System.out.println(\"unknown command '\" + command + \"'\");\n                    }\n                }\n                catch (java.util.NoSuchElementException e)\n                {\n                    System.out.println(\"Syntax error\");\n                    e.printStackTrace();\n                    printHelp = true;\n                }\n                catch(Exception e)\n                {\n                    e.printStackTrace();\n                }\n\n                if (printHelp)\n                {\n                    System.out.println(\"\\nSyntax\\n\" +\n                            \"?   print this help message\\n\" +\n                            \"d <page1> <page2>   print shortest route from page1 to page2\\n\" +\n                            \"r                   print random walk\\n\" +\n                            \"q                   quit\");\n\n                }\n            }\n\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            System.out.println(\"Syntax: java ... store.log\");\n        }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21b526e3e9974b2651365fbae52a976e6fc77aa4","date":1022108962,"type":3,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#main(String[]).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#main(String[]).mjava","sourceNew":"    /**\n     * this class reads in store.log, constructs a graph of the crawled web and\n     * is able to perform a breadth-first search for the shortest distance\n     * between two nodes<br>\n     * Note: this is experimental stuff. get into the source code to see how it\n     * works\n     *\n     * @param args  args[0] must point to the store.log file\n     */\n\n    public static void main(String[] args)\n    {\n\n        // Syntax: DistanceCount <store.log>\n\n        try\n        {\n\n            DistanceCount dc = new DistanceCount(args[0]);\n\n            boolean running = true;\n\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in), 400);\n\n            while (running)\n            {\n\n                System.out.print(\"\\n\\nCommand (? for help) > \");\n\n                String newL;\n\n                String input = \"\";\n\n                //while((newL = in.readLine()) != null)\n\n                //{\n\n                input = in.readLine();\n\n                StringTokenizer st = new StringTokenizer(input, \" \");\n\n                String command;\n\n                boolean printHelp = false;\n\n                if (!st.hasMoreTokens())\n                {\n\n                    printHelp = true;\n\n                    command = \"?\";\n\n                }\n\n                else\n                {\n\n                    command = st.nextToken();\n\n                }\n\n                try\n                {\n\n                    if (\"?\".equals(command))\n                    {\n\n                        printHelp = true;\n\n                    }\n\n                    else if (\"d\".equals(command))\n                    {\n\n                        String from = st.nextToken();\n\n                        String to = st.nextToken();\n\n                        dc.printDistance(from, to);\n\n                    }\n\n                    else if (\"q\".equals(command))\n                    {\n\n                        running = false;\n\n                    }\n\n                    else if (\"r\".equals(command))\n                    {\n\n                        dc.printRandomRoute();\n\n                    }\n\n                    else\n                    {\n\n                        System.out.println(\"unknown command '\" + command + \"'\");\n\n                    }\n\n                }\n\n                catch (java.util.NoSuchElementException e)\n                {\n\n                    System.out.println(\"Syntax error\");\n\n                    e.printStackTrace();\n\n                    printHelp = true;\n\n                }\n\n                catch (Exception e)\n                {\n\n                    e.printStackTrace();\n\n                }\n\n                if (printHelp)\n                {\n\n                    System.out.println(\"\\nSyntax\\n\" +\n                            \"?   print this help message\\n\" +\n                            \"d <page1> <page2>   print shortest route from page1 to page2\\n\" +\n                            \"r                   print random walk\\n\" +\n                            \"q                   quit\");\n\n                }\n\n            }\n\n        }\n\n        catch (IOException e)\n        {\n\n            e.printStackTrace();\n\n        }\n\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n\n            System.out.println(\"Syntax: java ... store.log\");\n\n        }\n\n    }\n\n","sourceOld":"    /**\n     * this class reads in store.log, constructs a graph of the crawled web and is able\n     * to perform a breadth-first search for the shortest distance between two nodes<br>\n     * Note: this is experimental stuff. get into the source code to see how it works\n     * @param args  args[0] must point to the store.log file\n     */\n    public static void main(String[] args)\n    {\n        // Syntax: DistanceCount <store.log>\n        try\n        {\n            DistanceCount dc = new DistanceCount(args[0]);\n            boolean running = true;\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in),400);\n            while (running)\n            {\n                System.out.print(\"\\n\\nCommand (? for help) > \");\n                String newL;\n                String input = \"\";\n                //while((newL = in.readLine()) != null)\n                //{\n                    input = in.readLine();\n                StringTokenizer st = new StringTokenizer(input,\" \");\n                String command;\n                boolean printHelp = false;\n\n                if (!st.hasMoreTokens())\n                {\n                    printHelp = true;\n                    command = \"?\";\n                }\n                else\n                {\n                    command = st.nextToken();\n                }\n\n                try\n                {\n                    if (\"?\".equals(command))\n                    {\n                        printHelp = true;\n                    }\n                    else if (\"d\".equals(command))\n                    {\n                        String from = st.nextToken();\n                        String to = st.nextToken();\n                        dc.printDistance(from ,to);\n                    }\n                    else if (\"q\".equals(command))\n                    {\n                        running = false;\n                    }\n                    else if (\"r\".equals(command))\n                    {\n                        dc.printRandomRoute();\n                    }\n                    else\n                    {\n                        System.out.println(\"unknown command '\" + command + \"'\");\n                    }\n                }\n                catch (java.util.NoSuchElementException e)\n                {\n                    System.out.println(\"Syntax error\");\n                    e.printStackTrace();\n                    printHelp = true;\n                }\n                catch(Exception e)\n                {\n                    e.printStackTrace();\n                }\n\n                if (printHelp)\n                {\n                    System.out.println(\"\\nSyntax\\n\" +\n                            \"?   print this help message\\n\" +\n                            \"d <page1> <page2>   print shortest route from page1 to page2\\n\" +\n                            \"r                   print random walk\\n\" +\n                            \"q                   quit\");\n\n                }\n            }\n\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            System.out.println(\"Syntax: java ... store.log\");\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#main(String[]).mjava","sourceNew":null,"sourceOld":"    /**\n     * this class reads in store.log, constructs a graph of the crawled web and\n     * is able to perform a breadth-first search for the shortest distance\n     * between two nodes<br>\n     * Note: this is experimental stuff. get into the source code to see how it\n     * works\n     *\n     * @param args  args[0] must point to the store.log file\n     */\n\n    public static void main(String[] args)\n    {\n\n        // Syntax: DistanceCount <store.log>\n\n        try\n        {\n\n            DistanceCount dc = new DistanceCount(args[0]);\n\n            boolean running = true;\n\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in), 400);\n\n            while (running)\n            {\n\n                System.out.print(\"\\n\\nCommand (? for help) > \");\n\n                String newL;\n\n                String input = \"\";\n\n                //while((newL = in.readLine()) != null)\n\n                //{\n\n                input = in.readLine();\n\n                StringTokenizer st = new StringTokenizer(input, \" \");\n\n                String command;\n\n                boolean printHelp = false;\n\n                if (!st.hasMoreTokens())\n                {\n\n                    printHelp = true;\n\n                    command = \"?\";\n\n                }\n\n                else\n                {\n\n                    command = st.nextToken();\n\n                }\n\n                try\n                {\n\n                    if (\"?\".equals(command))\n                    {\n\n                        printHelp = true;\n\n                    }\n\n                    else if (\"d\".equals(command))\n                    {\n\n                        String from = st.nextToken();\n\n                        String to = st.nextToken();\n\n                        dc.printDistance(from, to);\n\n                    }\n\n                    else if (\"q\".equals(command))\n                    {\n\n                        running = false;\n\n                    }\n\n                    else if (\"r\".equals(command))\n                    {\n\n                        dc.printRandomRoute();\n\n                    }\n\n                    else\n                    {\n\n                        System.out.println(\"unknown command '\" + command + \"'\");\n\n                    }\n\n                }\n\n                catch (java.util.NoSuchElementException e)\n                {\n\n                    System.out.println(\"Syntax error\");\n\n                    e.printStackTrace();\n\n                    printHelp = true;\n\n                }\n\n                catch (Exception e)\n                {\n\n                    e.printStackTrace();\n\n                }\n\n                if (printHelp)\n                {\n\n                    System.out.println(\"\\nSyntax\\n\" +\n                            \"?   print this help message\\n\" +\n                            \"d <page1> <page2>   print shortest route from page1 to page2\\n\" +\n                            \"r                   print random walk\\n\" +\n                            \"q                   quit\");\n\n                }\n\n            }\n\n        }\n\n        catch (IOException e)\n        {\n\n            e.printStackTrace();\n\n        }\n\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n\n            System.out.println(\"Syntax: java ... store.log\");\n\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21b526e3e9974b2651365fbae52a976e6fc77aa4":["05d36e0b328ec96237035fbcca240e73631396e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["21b526e3e9974b2651365fbae52a976e6fc77aa4"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"21b526e3e9974b2651365fbae52a976e6fc77aa4":["afc16d717d9ed1a8e45371668ca6de674164d624"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["21b526e3e9974b2651365fbae52a976e6fc77aa4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}