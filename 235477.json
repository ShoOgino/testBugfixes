{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocsEnumEquals(String,DocsEnum,DocsEnum,boolean).mjava","commits":[{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocsEnumEquals(String,DocsEnum,DocsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDocsEnum(DocsEnum,DocsEnum,boolean).mjava","sourceNew":"  /**\n   * checks docs + freqs, sequentially\n   */\n  public void assertDocsEnumEquals(String info, DocsEnum leftDocs, DocsEnum rightDocs, boolean hasFreqs) throws IOException {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    assertTrue(info, leftDocs.docID() == -1 || leftDocs.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(info, rightDocs.docID() == -1 || rightDocs.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      if (hasFreqs) {\n        assertEquals(info, leftDocs.freq(), rightDocs.freq());\n      }\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","sourceOld":"  /**\n   * checks docs + freqs, sequentially\n   */\n  public void assertDocsEnum(DocsEnum leftDocs, DocsEnum rightDocs, boolean hasFreqs) throws Exception {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    assertTrue(info, leftDocs.docID() == -1 || leftDocs.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(info, rightDocs.docID() == -1 || rightDocs.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      if (hasFreqs) {\n        assertEquals(info, leftDocs.freq(), rightDocs.freq());\n      }\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af527d067afb6ca5bd58afc7b9a5fbc0f80979af","date":1366034882,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocsEnumEquals(String,DocsEnum,DocsEnum,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocsEnumEquals(String,DocsEnum,DocsEnum,boolean).mjava","sourceNew":"  /**\n   * checks docs + freqs, sequentially\n   */\n  public void assertDocsEnumEquals(String info, DocsEnum leftDocs, DocsEnum rightDocs, boolean hasFreqs) throws IOException {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    assertEquals(info, -1, leftDocs.docID());\n    assertEquals(info, -1, rightDocs.docID());\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      if (hasFreqs) {\n        assertEquals(info, leftDocs.freq(), rightDocs.freq());\n      }\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","sourceOld":"  /**\n   * checks docs + freqs, sequentially\n   */\n  public void assertDocsEnumEquals(String info, DocsEnum leftDocs, DocsEnum rightDocs, boolean hasFreqs) throws IOException {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    assertTrue(info, leftDocs.docID() == -1 || leftDocs.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(info, rightDocs.docID() == -1 || rightDocs.docID() == DocIdSetIterator.NO_MORE_DOCS);\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      if (hasFreqs) {\n        assertEquals(info, leftDocs.freq(), rightDocs.freq());\n      }\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocsEnumEquals(String,PostingsEnum,PostingsEnum,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDocsEnumEquals(String,DocsEnum,DocsEnum,boolean).mjava","sourceNew":"  /**\n   * checks docs + freqs, sequentially\n   */\n  public void assertDocsEnumEquals(String info, PostingsEnum leftDocs, PostingsEnum rightDocs, boolean hasFreqs) throws IOException {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    assertEquals(info, -1, leftDocs.docID());\n    assertEquals(info, -1, rightDocs.docID());\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      if (hasFreqs) {\n        assertEquals(info, leftDocs.freq(), rightDocs.freq());\n      }\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","sourceOld":"  /**\n   * checks docs + freqs, sequentially\n   */\n  public void assertDocsEnumEquals(String info, DocsEnum leftDocs, DocsEnum rightDocs, boolean hasFreqs) throws IOException {\n    if (leftDocs == null) {\n      assertNull(rightDocs);\n      return;\n    }\n    assertEquals(info, -1, leftDocs.docID());\n    assertEquals(info, -1, rightDocs.docID());\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(info, docid, rightDocs.nextDoc());\n      if (hasFreqs) {\n        assertEquals(info, leftDocs.freq(), rightDocs.freq());\n      }\n    }\n    assertEquals(info, DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af527d067afb6ca5bd58afc7b9a5fbc0f80979af":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["af527d067afb6ca5bd58afc7b9a5fbc0f80979af"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"af527d067afb6ca5bd58afc7b9a5fbc0f80979af":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["af527d067afb6ca5bd58afc7b9a5fbc0f80979af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}