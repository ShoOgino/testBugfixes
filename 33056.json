{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","commits":[{"id":"307cff5af2b00f126fdf9d3435b75d5ed4d0f402","date":1305370109,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","pathOld":"/dev/null","sourceNew":"  private Comparable[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c12f3f9ad631aa7d2e93e90bf877662f0df0cdc4","date":1305515875,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","sourceNew":"  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","sourceOld":"  private Comparable[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","pathOld":"/dev/null","sourceNew":"  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","pathOld":"/dev/null","sourceNew":"  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b861c0fdfa4d005c70848c9121655e9dc704f96","date":1307129511,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","sourceNew":"  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.SCORE) {\n        c = new Float(d.score);\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","sourceOld":"  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03daa6ddcb4768a702115ec63799cab5fff3d92","date":1307140842,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","sourceNew":"  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.SCORE) {\n        c = new Float(d.score);\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","sourceOld":"  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e7c99bd45fa88a3d93a03fdd773053bef72268e","date":1307218088,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","sourceNew":"  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.SCORE) {\n        c = new Float(d.score);\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","sourceOld":"  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","sourceNew":"  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.Type.SCORE) {\n        c = new Float(d.score);\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","sourceOld":"  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.SCORE) {\n        c = new Float(d.score);\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","sourceNew":"  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.Type.SCORE) {\n        c = new Float(d.score);\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","sourceOld":"  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.SCORE) {\n        c = new Float(d.score);\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","sourceNew":"  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.Type.SCORE) {\n        c = new Float(d.score);\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","sourceOld":"  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.SCORE) {\n        c = new Float(d.score);\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6005b05c19356dfca18f39979caeeb6b85bc88bb","date":1331204804,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.Type.SCORE) {\n        c = new Float(d.score);\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","sourceOld":"  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.Type.SCORE) {\n        c = new Float(d.score);\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.Type.SCORE) {\n        c = new Float(d.score);\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","sourceOld":"  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.Type.SCORE) {\n        c = new Float(d.score);\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.Type.SCORE) {\n        c = new Float(d.score);\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.Type.SCORE) {\n        c = new Float(d.score);\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["090a0320e4de4a3674376aef96b9701f47564f86","6005b05c19356dfca18f39979caeeb6b85bc88bb"],"6b861c0fdfa4d005c70848c9121655e9dc704f96":["c12f3f9ad631aa7d2e93e90bf877662f0df0cdc4"],"6005b05c19356dfca18f39979caeeb6b85bc88bb":["090a0320e4de4a3674376aef96b9701f47564f86"],"2553b00f699380c64959ccb27991289aae87be2e":["1e7c99bd45fa88a3d93a03fdd773053bef72268e","090a0320e4de4a3674376aef96b9701f47564f86"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["6b861c0fdfa4d005c70848c9121655e9dc704f96","090a0320e4de4a3674376aef96b9701f47564f86"],"090a0320e4de4a3674376aef96b9701f47564f86":["6b861c0fdfa4d005c70848c9121655e9dc704f96"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["a3776dccca01c11e7046323cfad46a3b4a471233","6b861c0fdfa4d005c70848c9121655e9dc704f96"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6005b05c19356dfca18f39979caeeb6b85bc88bb"],"c12f3f9ad631aa7d2e93e90bf877662f0df0cdc4":["307cff5af2b00f126fdf9d3435b75d5ed4d0f402"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c12f3f9ad631aa7d2e93e90bf877662f0df0cdc4"],"307cff5af2b00f126fdf9d3435b75d5ed4d0f402":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c12f3f9ad631aa7d2e93e90bf877662f0df0cdc4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c03daa6ddcb4768a702115ec63799cab5fff3d92":["c3a8a449466c1ff7ce2274fe73dab487256964b4","6b861c0fdfa4d005c70848c9121655e9dc704f96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"6b861c0fdfa4d005c70848c9121655e9dc704f96":["d083e83f225b11e5fdd900e83d26ddb385b6955c","090a0320e4de4a3674376aef96b9701f47564f86","1e7c99bd45fa88a3d93a03fdd773053bef72268e","c03daa6ddcb4768a702115ec63799cab5fff3d92"],"6005b05c19356dfca18f39979caeeb6b85bc88bb":["38e3b736c7ca086d61b7dbb841c905ee115490da","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["38e3b736c7ca086d61b7dbb841c905ee115490da","6005b05c19356dfca18f39979caeeb6b85bc88bb","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["2553b00f699380c64959ccb27991289aae87be2e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c12f3f9ad631aa7d2e93e90bf877662f0df0cdc4":["6b861c0fdfa4d005c70848c9121655e9dc704f96","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c03daa6ddcb4768a702115ec63799cab5fff3d92"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"307cff5af2b00f126fdf9d3435b75d5ed4d0f402":["c12f3f9ad631aa7d2e93e90bf877662f0df0cdc4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3a8a449466c1ff7ce2274fe73dab487256964b4","307cff5af2b00f126fdf9d3435b75d5ed4d0f402","a3776dccca01c11e7046323cfad46a3b4a471233"],"c03daa6ddcb4768a702115ec63799cab5fff3d92":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","c03daa6ddcb4768a702115ec63799cab5fff3d92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}