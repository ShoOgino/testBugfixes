{"path":"solr/core/src/java/org/apache/solr/util/BCDUtils#base100SortableIntToBase10(char[],int,int,char[],int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/BCDUtils#base100SortableIntToBase10(char[],int,int,char[],int).mjava","pathOld":"solr/src/java/org/apache/solr/util/BCDUtils#base100SortableIntToBase10(char[],int,int,char[],int).mjava","sourceNew":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base100SortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg = false;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    }\n\n    boolean firstDigit=true;\n    while (start < end) {\n      int val = arr[start++];\n      if (neg) val = 99 - val;\n      // opt - if we ever want a faster version we can avoid one integer\n      // divide by using fixed point math to multiply by 1/10\n      // http://www.cs.uiowa.edu/~jones/bcd/divide.html\n      // TIP: write a small function in gcc or cl and see what\n      // the optimized assemply output looks like (and which is fastest).\n      // In C you can specify \"unsigned\" which gives the compiler more\n      // info than the Java compiler has.\n      char tens = (char)(val / 10 + '0');\n      if (!firstDigit || tens!='0') {  // skip leading 0\n        out[wpos++] = tens;      // write tens position\n      }\n      out[wpos++] = (char)(val % 10 + '0');    // write ones position\n      firstDigit=false;\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","sourceOld":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base100SortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg = false;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    }\n\n    boolean firstDigit=true;\n    while (start < end) {\n      int val = arr[start++];\n      if (neg) val = 99 - val;\n      // opt - if we ever want a faster version we can avoid one integer\n      // divide by using fixed point math to multiply by 1/10\n      // http://www.cs.uiowa.edu/~jones/bcd/divide.html\n      // TIP: write a small function in gcc or cl and see what\n      // the optimized assemply output looks like (and which is fastest).\n      // In C you can specify \"unsigned\" which gives the compiler more\n      // info than the Java compiler has.\n      char tens = (char)(val / 10 + '0');\n      if (!firstDigit || tens!='0') {  // skip leading 0\n        out[wpos++] = tens;      // write tens position\n      }\n      out[wpos++] = (char)(val % 10 + '0');    // write ones position\n      firstDigit=false;\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/BCDUtils#base100SortableIntToBase10(char[],int,int,char[],int).mjava","pathOld":"solr/src/java/org/apache/solr/util/BCDUtils#base100SortableIntToBase10(char[],int,int,char[],int).mjava","sourceNew":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base100SortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg = false;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    }\n\n    boolean firstDigit=true;\n    while (start < end) {\n      int val = arr[start++];\n      if (neg) val = 99 - val;\n      // opt - if we ever want a faster version we can avoid one integer\n      // divide by using fixed point math to multiply by 1/10\n      // http://www.cs.uiowa.edu/~jones/bcd/divide.html\n      // TIP: write a small function in gcc or cl and see what\n      // the optimized assemply output looks like (and which is fastest).\n      // In C you can specify \"unsigned\" which gives the compiler more\n      // info than the Java compiler has.\n      char tens = (char)(val / 10 + '0');\n      if (!firstDigit || tens!='0') {  // skip leading 0\n        out[wpos++] = tens;      // write tens position\n      }\n      out[wpos++] = (char)(val % 10 + '0');    // write ones position\n      firstDigit=false;\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","sourceOld":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base100SortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg = false;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    }\n\n    boolean firstDigit=true;\n    while (start < end) {\n      int val = arr[start++];\n      if (neg) val = 99 - val;\n      // opt - if we ever want a faster version we can avoid one integer\n      // divide by using fixed point math to multiply by 1/10\n      // http://www.cs.uiowa.edu/~jones/bcd/divide.html\n      // TIP: write a small function in gcc or cl and see what\n      // the optimized assemply output looks like (and which is fastest).\n      // In C you can specify \"unsigned\" which gives the compiler more\n      // info than the Java compiler has.\n      char tens = (char)(val / 10 + '0');\n      if (!firstDigit || tens!='0') {  // skip leading 0\n        out[wpos++] = tens;      // write tens position\n      }\n      out[wpos++] = (char)(val % 10 + '0');    // write ones position\n      firstDigit=false;\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/BCDUtils#base100SortableIntToBase10(char[],int,int,char[],int).mjava","pathOld":"solr/src/java/org/apache/solr/util/BCDUtils#base100SortableIntToBase10(char[],int,int,char[],int).mjava","sourceNew":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base100SortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg = false;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    }\n\n    boolean firstDigit=true;\n    while (start < end) {\n      int val = arr[start++];\n      if (neg) val = 99 - val;\n      // opt - if we ever want a faster version we can avoid one integer\n      // divide by using fixed point math to multiply by 1/10\n      // http://www.cs.uiowa.edu/~jones/bcd/divide.html\n      // TIP: write a small function in gcc or cl and see what\n      // the optimized assemply output looks like (and which is fastest).\n      // In C you can specify \"unsigned\" which gives the compiler more\n      // info than the Java compiler has.\n      char tens = (char)(val / 10 + '0');\n      if (!firstDigit || tens!='0') {  // skip leading 0\n        out[wpos++] = tens;      // write tens position\n      }\n      out[wpos++] = (char)(val % 10 + '0');    // write ones position\n      firstDigit=false;\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","sourceOld":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base100SortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg = false;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    }\n\n    boolean firstDigit=true;\n    while (start < end) {\n      int val = arr[start++];\n      if (neg) val = 99 - val;\n      // opt - if we ever want a faster version we can avoid one integer\n      // divide by using fixed point math to multiply by 1/10\n      // http://www.cs.uiowa.edu/~jones/bcd/divide.html\n      // TIP: write a small function in gcc or cl and see what\n      // the optimized assemply output looks like (and which is fastest).\n      // In C you can specify \"unsigned\" which gives the compiler more\n      // info than the Java compiler has.\n      char tens = (char)(val / 10 + '0');\n      if (!firstDigit || tens!='0') {  // skip leading 0\n        out[wpos++] = tens;      // write tens position\n      }\n      out[wpos++] = (char)(val % 10 + '0');    // write ones position\n      firstDigit=false;\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/BCDUtils#base100SortableIntToBase10(char[],int,int,char[],int).mjava","sourceNew":null,"sourceOld":"  // Converts a base100 sortable number to base10 character form\n// returns number of chars written.\n// At least 1 char is always written.\n  public static int base100SortableIntToBase10(char[] arr, int start, int end,\n                                               char[] out, int offset)\n  {\n    // Take care of \"0\" case first.  It's the only number that is represented\n    // in one char.\n    if (end-start == 1) {\n      out[offset]='0';\n      return 1;\n    }\n\n    int wpos = offset;  // write position\n    boolean neg = false;\n    int exp = arr[start++];\n    if (exp < ZERO_EXPONENT) {\n      neg=true;\n      exp = ZERO_EXPONENT - exp;\n      out[wpos++]='-';\n    }\n\n    boolean firstDigit=true;\n    while (start < end) {\n      int val = arr[start++];\n      if (neg) val = 99 - val;\n      // opt - if we ever want a faster version we can avoid one integer\n      // divide by using fixed point math to multiply by 1/10\n      // http://www.cs.uiowa.edu/~jones/bcd/divide.html\n      // TIP: write a small function in gcc or cl and see what\n      // the optimized assemply output looks like (and which is fastest).\n      // In C you can specify \"unsigned\" which gives the compiler more\n      // info than the Java compiler has.\n      char tens = (char)(val / 10 + '0');\n      if (!firstDigit || tens!='0') {  // skip leading 0\n        out[wpos++] = tens;      // write tens position\n      }\n      out[wpos++] = (char)(val % 10 + '0');    // write ones position\n      firstDigit=false;\n    }\n\n    // OPTIONAL: if trailing zeros were truncated, then this is where\n    // we would restore them (compare number of chars read vs exponent)\n\n    return wpos-offset;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2106271e380c198349e0f6eac0395bb462913fab":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2106271e380c198349e0f6eac0395bb462913fab"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"2106271e380c198349e0f6eac0395bb462913fab":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["2106271e380c198349e0f6eac0395bb462913fab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}