{"path":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int).mjava","commits":[{"id":"d47326e0c6ce589b6962777df409aad0550940fa","date":1304584540,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesProducerBase#load(FieldInfos,String,int,Directory,int).mjava","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected void load(FieldInfos fieldInfos, String segment, int docCount,\n      Directory dir, int codecId) throws IOException {\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n        final String field = fieldInfo.name;\n        // TODO can we have a compound file per segment and codec for docvalues?\n        final String id = DefaultDocValuesConsumer.docValuesId(segment, codecId, fieldInfo.number);\n        docValues.put(field, loadDocValues(docCount, dir, id, fieldInfo\n            .getDocValues()));\n      }\n    }\n  }\n\n","sourceOld":"  // Only opens files... doesn't actually load any values\n  protected void load(FieldInfos fieldInfos, String segment, int docCount,\n      Directory dir, int codecId) throws IOException {\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n        final String field = fieldInfo.name;\n        // TODO can we have a compound file per segment and codec for docvalues?\n        final String id = DocValuesCodec.docValuesId(segment, codecId, fieldInfo.number);\n        docValues.put(field, loadDocValues(docCount, dir, id, fieldInfo\n            .getDocValues()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd04845a7e675e6eda07c4475e3f5ec15d5a2f94","date":1305894342,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int).mjava","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, DocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId)\n      throws IOException {\n    TreeMap<String, DocValues> values = new TreeMap<String, DocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues()));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeDocValues(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":"  // Only opens files... doesn't actually load any values\n  protected void load(FieldInfos fieldInfos, String segment, int docCount,\n      Directory dir, int codecId) throws IOException {\n    for (FieldInfo fieldInfo : fieldInfos) {\n      if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n        final String field = fieldInfo.name;\n        // TODO can we have a compound file per segment and codec for docvalues?\n        final String id = DefaultDocValuesConsumer.docValuesId(segment, codecId, fieldInfo.number);\n        docValues.put(field, loadDocValues(docCount, dir, id, fieldInfo\n            .getDocValues()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41e5bbad683f7546e96f08ffe8bc50cf447f2586","date":1307113213,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int).mjava","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues()));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeDocValues(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, DocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId)\n      throws IOException {\n    TreeMap<String, DocValues> values = new TreeMap<String, DocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues()));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeDocValues(values.values());\n      }\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int).mjava","pathOld":"/dev/null","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues()));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeDocValues(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int).mjava","pathOld":"/dev/null","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues()));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeDocValues(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int).mjava","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId, IOContext context)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeDocValues(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues()));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeDocValues(values.values());\n      }\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc0b8069918917b33f361011899a1af0cdd2d462","date":1310039336,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int).mjava","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), sortComparator));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues()));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeDocValues(values.values());\n      }\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int).mjava","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), sortComparator));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues()));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeDocValues(values.values());\n      }\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int).mjava","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId, IOContext context)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), sortComparator, context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), sortComparator));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#load(FieldInfos,String,int,Directory,int).mjava","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId, IOContext context)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), sortComparator, context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), sortComparator));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","41e5bbad683f7546e96f08ffe8bc50cf447f2586"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","bc0b8069918917b33f361011899a1af0cdd2d462"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"bc0b8069918917b33f361011899a1af0cdd2d462":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["f0b9507caf22f292ac0e5e59f62db4275adf4511","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"dd04845a7e675e6eda07c4475e3f5ec15d5a2f94":["d47326e0c6ce589b6962777df409aad0550940fa"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["bc0b8069918917b33f361011899a1af0cdd2d462","b6f9be74ca7baaef11857ad002cad40419979516"],"41e5bbad683f7546e96f08ffe8bc50cf447f2586":["dd04845a7e675e6eda07c4475e3f5ec15d5a2f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"d47326e0c6ce589b6962777df409aad0550940fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","b6f9be74ca7baaef11857ad002cad40419979516","bc0b8069918917b33f361011899a1af0cdd2d462"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","d47326e0c6ce589b6962777df409aad0550940fa"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"bc0b8069918917b33f361011899a1af0cdd2d462":["f0b9507caf22f292ac0e5e59f62db4275adf4511","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd04845a7e675e6eda07c4475e3f5ec15d5a2f94":["41e5bbad683f7546e96f08ffe8bc50cf447f2586"],"41e5bbad683f7546e96f08ffe8bc50cf447f2586":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"d47326e0c6ce589b6962777df409aad0550940fa":["dd04845a7e675e6eda07c4475e3f5ec15d5a2f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}