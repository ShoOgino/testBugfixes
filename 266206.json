{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDownNodeFailover().mjava","commits":[{"id":"4e42079c4c34cc1868518eff79f79ebaeb6d1965","date":1507883024,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDownNodeFailover().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDownNodeFailover() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      for (int i = 0; i < 5; i++) {\n        zkController.createCollection(\"collection\" + i, 1);\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection\"+i, \"core1\",\n            \"core_node1\", \"shard1\" , Replica.State.ACTIVE, 1));\n      }\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n          ZkStateReader.NODE_NAME_PROP, \"127.0.0.1\");\n      List<ZkWriteCommand> commands = new NodeMutator().downNode(reader.getClusterState(), m);\n\n      ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      // More than Overseer.STATE_UPDATE_DELAY\n      Thread.sleep(2200);\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, commands.get(0).name, \"shard1\", \"core_node1\", Replica.State.DOWN);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n      for (int i = 0; i < 5; i++) {\n        verifyReplicaStatus(reader, \"collection\"+i, \"shard1\", \"core_node1\", Replica.State.DOWN);\n      }\n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDownNodeFailover().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDownNodeFailover().mjava","sourceNew":"  @Test\n  public void testDownNodeFailover() throws Exception {\n    MockZKController mockController = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        mockController = new MockZKController(server.getZkAddress(), \"127.0.0.1\", overseers);\n\n        try (ZkController zkController = createMockZkController(server.getZkAddress(), zkClient, reader)) {\n\n          for (int i = 0; i < 5; i++) {\n            mockController.createCollection(\"collection\" + i, 1);\n            assertNotNull(\"shard got no id?\", mockController.publishState(\"collection\" + i, \"core1\",\n                \"core_node1\", \"shard1\", Replica.State.ACTIVE, 1, true, overseers.get(0)));\n          }\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, \"127.0.0.1\");\n        List<ZkWriteCommand> commands = new NodeMutator().downNode(reader.getClusterState(), m);\n\n        ZkDistributedQueue q = overseers.get(0).getStateUpdateQueue();\n\n        q.offer(Utils.toJSON(m));\n\n        verifyReplicaStatus(reader, commands.get(0).name, \"shard1\", \"core_node1\", Replica.State.DOWN);\n        overseerClient.close();\n\n        overseerClient = electNewOverseer(server.getZkAddress());\n        for (int i = 0; i < 5; i++) {\n          verifyReplicaStatus(reader, \"collection\" + i, \"shard1\", \"core_node1\", Replica.State.DOWN);\n        }\n      }\n    } finally {\n      if (mockController != null) {\n        mockController.close();\n      }\n      close(overseerClient);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDownNodeFailover() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      for (int i = 0; i < 5; i++) {\n        zkController.createCollection(\"collection\" + i, 1);\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"collection\"+i, \"core1\",\n            \"core_node1\", \"shard1\" , Replica.State.ACTIVE, 1));\n      }\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n          ZkStateReader.NODE_NAME_PROP, \"127.0.0.1\");\n      List<ZkWriteCommand> commands = new NodeMutator().downNode(reader.getClusterState(), m);\n\n      ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      // More than Overseer.STATE_UPDATE_DELAY\n      Thread.sleep(2200);\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, commands.get(0).name, \"shard1\", \"core_node1\", Replica.State.DOWN);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n      for (int i = 0; i < 5; i++) {\n        verifyReplicaStatus(reader, \"collection\"+i, \"shard1\", \"core_node1\", Replica.State.DOWN);\n      }\n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["4e42079c4c34cc1868518eff79f79ebaeb6d1965"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDownNodeFailover().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testDownNodeFailover().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"try\"})\n  public void testDownNodeFailover() throws Exception {\n    MockZKController mockController = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        mockController = new MockZKController(server.getZkAddress(), \"127.0.0.1\", overseers);\n\n        try (ZkController zkController = createMockZkController(server.getZkAddress(), zkClient, reader)) {\n\n          for (int i = 0; i < 5; i++) {\n            mockController.createCollection(\"collection\" + i, 1);\n            assertNotNull(\"shard got no id?\", mockController.publishState(\"collection\" + i, \"core1\",\n                \"core_node1\", \"shard1\", Replica.State.ACTIVE, 1, true, overseers.get(0)));\n          }\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, \"127.0.0.1\");\n        List<ZkWriteCommand> commands = new NodeMutator().downNode(reader.getClusterState(), m);\n\n        ZkDistributedQueue q = overseers.get(0).getStateUpdateQueue();\n\n        q.offer(Utils.toJSON(m));\n\n        verifyReplicaStatus(reader, commands.get(0).name, \"shard1\", \"core_node1\", Replica.State.DOWN);\n        overseerClient.close();\n\n        overseerClient = electNewOverseer(server.getZkAddress());\n        for (int i = 0; i < 5; i++) {\n          verifyReplicaStatus(reader, \"collection\" + i, \"shard1\", \"core_node1\", Replica.State.DOWN);\n        }\n      }\n    } finally {\n      if (mockController != null) {\n        mockController.close();\n      }\n      close(overseerClient);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDownNodeFailover() throws Exception {\n    MockZKController mockController = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        mockController = new MockZKController(server.getZkAddress(), \"127.0.0.1\", overseers);\n\n        try (ZkController zkController = createMockZkController(server.getZkAddress(), zkClient, reader)) {\n\n          for (int i = 0; i < 5; i++) {\n            mockController.createCollection(\"collection\" + i, 1);\n            assertNotNull(\"shard got no id?\", mockController.publishState(\"collection\" + i, \"core1\",\n                \"core_node1\", \"shard1\", Replica.State.ACTIVE, 1, true, overseers.get(0)));\n          }\n        }\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.DOWNNODE.toLower(),\n            ZkStateReader.NODE_NAME_PROP, \"127.0.0.1\");\n        List<ZkWriteCommand> commands = new NodeMutator().downNode(reader.getClusterState(), m);\n\n        ZkDistributedQueue q = overseers.get(0).getStateUpdateQueue();\n\n        q.offer(Utils.toJSON(m));\n\n        verifyReplicaStatus(reader, commands.get(0).name, \"shard1\", \"core_node1\", Replica.State.DOWN);\n        overseerClient.close();\n\n        overseerClient = electNewOverseer(server.getZkAddress());\n        for (int i = 0; i < 5; i++) {\n          verifyReplicaStatus(reader, \"collection\" + i, \"shard1\", \"core_node1\", Replica.State.DOWN);\n        }\n      }\n    } finally {\n      if (mockController != null) {\n        mockController.close();\n      }\n      close(overseerClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["4e42079c4c34cc1868518eff79f79ebaeb6d1965"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e42079c4c34cc1868518eff79f79ebaeb6d1965"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}