{"path":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,DocIdSet,IndexReader.CacheHelper).mjava","commits":[{"id":"d4e703a107dabba92e897b4405f4a69f135565a2","date":1567669029,"type":1,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,DocIdSet,IndexReader.CacheHelper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#putIfAbsent(Query,LeafReaderContext,DocIdSet,IndexReader.CacheHelper).mjava","sourceNew":"  private void putIfAbsent(Query query, DocIdSet set, IndexReader.CacheHelper cacheHelper) {\n    assert query instanceof BoostQuery == false;\n    assert query instanceof ConstantScoreQuery == false;\n    // under a lock to make sure that mostRecentlyUsedQueries and cache remain sync'ed\n    lock.lock();\n    try {\n      Query singleton = uniqueQueries.putIfAbsent(query, query);\n      if (singleton == null) {\n        onQueryCache(query, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + QUERY_DEFAULT_RAM_BYTES_USED);\n      } else {\n        query = singleton;\n      }\n      final IndexReader.CacheKey key = cacheHelper.getKey();\n      LeafCache leafCache = cache.get(key);\n      if (leafCache == null) {\n        leafCache = new LeafCache(key);\n        final LeafCache previous = cache.put(key, leafCache);\n        ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n        assert previous == null;\n        // we just created a new leaf cache, need to register a close listener\n        cacheHelper.addClosedListener(this::clearCoreCacheKey);\n      }\n      leafCache.putIfAbsent(query, set);\n      evictIfNecessary();\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  void putIfAbsent(Query query, LeafReaderContext context, DocIdSet set, IndexReader.CacheHelper cacheHelper) {\n    assert query instanceof BoostQuery == false;\n    assert query instanceof ConstantScoreQuery == false;\n    // under a lock to make sure that mostRecentlyUsedQueries and cache remain sync'ed\n    lock.lock();\n    try {\n      Query singleton = uniqueQueries.putIfAbsent(query, query);\n      if (singleton == null) {\n        onQueryCache(query, LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + QUERY_DEFAULT_RAM_BYTES_USED);\n      } else {\n        query = singleton;\n      }\n      final IndexReader.CacheKey key = cacheHelper.getKey();\n      LeafCache leafCache = cache.get(key);\n      if (leafCache == null) {\n        leafCache = new LeafCache(key);\n        final LeafCache previous = cache.put(key, leafCache);\n        ramBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY;\n        assert previous == null;\n        // we just created a new leaf cache, need to register a close listener\n        cacheHelper.addClosedListener(this::clearCoreCacheKey);\n      }\n      leafCache.putIfAbsent(query, set);\n      evictIfNecessary();\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4e703a107dabba92e897b4405f4a69f135565a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4e703a107dabba92e897b4405f4a69f135565a2"]},"commit2Childs":{"d4e703a107dabba92e897b4405f4a69f135565a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4e703a107dabba92e897b4405f4a69f135565a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}