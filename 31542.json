{"path":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PassageFormatter#append(StringBuilder,String,int,int).mjava","commits":[{"id":"de75ff011665b8661eefbff2954ce4fbe8b6b791","date":1365261286,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PassageFormatter#append(StringBuilder,String,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void append(StringBuilder dest, String content, int start, int end) {\n    if (escape) {\n      // note: these are the rules from owasp.org\n      for (int i = start; i < end; i++) {\n        char ch = content.charAt(i);\n        switch(ch) {\n          case '&': \n            dest.append(\"&amp;\");\n            break;\n          case '<':\n            dest.append(\"&lt;\");\n            break;\n          case '>':\n            dest.append(\"&gt;\");\n            break;\n          case '\"':\n            dest.append(\"&quot;\");\n            break;\n          case '\\'':\n            dest.append(\"&#x27;\");\n            break;\n          case '/':\n            dest.append(\"&#x2F;\");\n            break;\n          default:\n            if (ch >= 0x30 && ch <= 0x39 || ch >= 0x41 && ch <= 0x5A || ch >= 0x61 && ch <= 0x7A) {\n              dest.append(ch);\n            } else if (ch < 0xff) {\n              dest.append(\"&#\");\n              dest.append((int)ch);\n              dest.append(\";\");\n            } else {\n              dest.append(ch);\n            }\n        }\n      }\n    } else {\n      dest.append(content, start, end);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116a468ed771d87fd94eb1350dd2d42bbf0b262f","date":1365791134,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/DefaultPassageFormatter#append(StringBuilder,String,int,int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PassageFormatter#append(StringBuilder,String,int,int).mjava","sourceNew":"  /** \n   * Appends original text to the response.\n   * @param dest resulting text, possibly transformed or encoded\n   * @param content original text content\n   * @param start index of the first character in content\n   * @param end index of the character following the last character in content\n   */\n  protected void append(StringBuilder dest, String content, int start, int end) {\n    if (escape) {\n      // note: these are the rules from owasp.org\n      for (int i = start; i < end; i++) {\n        char ch = content.charAt(i);\n        switch(ch) {\n          case '&':\n            dest.append(\"&amp;\");\n            break;\n          case '<':\n            dest.append(\"&lt;\");\n            break;\n          case '>':\n            dest.append(\"&gt;\");\n            break;\n          case '\"':\n            dest.append(\"&quot;\");\n            break;\n          case '\\'':\n            dest.append(\"&#x27;\");\n            break;\n          case '/':\n            dest.append(\"&#x2F;\");\n            break;\n          default:\n            if (ch >= 0x30 && ch <= 0x39 || ch >= 0x41 && ch <= 0x5A || ch >= 0x61 && ch <= 0x7A) {\n              dest.append(ch);\n            } else if (ch < 0xff) {\n              dest.append(\"&#\");\n              dest.append((int)ch);\n              dest.append(\";\");\n            } else {\n              dest.append(ch);\n            }\n        }\n      }\n    } else {\n      dest.append(content, start, end);\n    }\n  }\n\n","sourceOld":"  private void append(StringBuilder dest, String content, int start, int end) {\n    if (escape) {\n      // note: these are the rules from owasp.org\n      for (int i = start; i < end; i++) {\n        char ch = content.charAt(i);\n        switch(ch) {\n          case '&': \n            dest.append(\"&amp;\");\n            break;\n          case '<':\n            dest.append(\"&lt;\");\n            break;\n          case '>':\n            dest.append(\"&gt;\");\n            break;\n          case '\"':\n            dest.append(\"&quot;\");\n            break;\n          case '\\'':\n            dest.append(\"&#x27;\");\n            break;\n          case '/':\n            dest.append(\"&#x2F;\");\n            break;\n          default:\n            if (ch >= 0x30 && ch <= 0x39 || ch >= 0x41 && ch <= 0x5A || ch >= 0x61 && ch <= 0x7A) {\n              dest.append(ch);\n            } else if (ch < 0xff) {\n              dest.append(\"&#\");\n              dest.append((int)ch);\n              dest.append(\";\");\n            } else {\n              dest.append(ch);\n            }\n        }\n      }\n    } else {\n      dest.append(content, start, end);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"de75ff011665b8661eefbff2954ce4fbe8b6b791":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"116a468ed771d87fd94eb1350dd2d42bbf0b262f":["de75ff011665b8661eefbff2954ce4fbe8b6b791"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116a468ed771d87fd94eb1350dd2d42bbf0b262f"]},"commit2Childs":{"de75ff011665b8661eefbff2954ce4fbe8b6b791":["116a468ed771d87fd94eb1350dd2d42bbf0b262f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de75ff011665b8661eefbff2954ce4fbe8b6b791"],"116a468ed771d87fd94eb1350dd2d42bbf0b262f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}