{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","commits":[{"id":"3c528d38c8d9b2452e932321931b11e7c19a96d5","date":1185353698,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"/dev/null","sourceNew":"  public WriteLineDocTask(PerfRunData runData) {\n    super(runData);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4bea909b475e3f9d726f4fee3c27d3c870b9027","date":1239875190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16);\n    docMaker = runData.getDocMaker();\n    logStep = config.get(\"doc.writeline.log.step\", DEFAULT_WRITELINE_DOC_LOG_STEP);\n    // To avoid the check 'if (logStep > 0)' in log(). This effectively turns\n    // logging off.\n    if (logStep <= 0) {\n      logStep = Integer.MAX_VALUE;\n    }\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) {\n    super(runData);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16);\n    docMaker = runData.getDocMaker();\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16);\n    docMaker = runData.getDocMaker();\n    logStep = config.get(\"doc.writeline.log.step\", DEFAULT_WRITELINE_DOC_LOG_STEP);\n    // To avoid the check 'if (logStep > 0)' in log(). This effectively turns\n    // logging off.\n    if (logStep <= 0) {\n      logStep = Integer.MAX_VALUE;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTask#WriteLineDocTask(PerfRunData).mjava","sourceNew":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16);\n    docMaker = runData.getDocMaker();\n  }\n\n","sourceOld":"  public WriteLineDocTask(PerfRunData runData) throws Exception {\n    super(runData);\n    Config config = runData.getConfig();\n    String fileName = config.get(\"line.file.out\", null);\n    if (fileName == null) {\n      throw new IllegalArgumentException(\"line.file.out must be set\");\n    }\n\n    OutputStream out = new FileOutputStream(fileName);\n    boolean doBzipCompression = false;\n    String doBZCompress = config.get(\"bzip.compression\", null);\n    if (doBZCompress != null) {\n      // Property was set, use the value.\n      doBzipCompression = Boolean.valueOf(doBZCompress).booleanValue();\n    } else {\n      // Property was not set, attempt to detect based on file's extension\n      doBzipCompression = fileName.endsWith(\"bz2\");\n    }\n\n    if (doBzipCompression) {\n      // Wrap with BOS since BZip2CompressorOutputStream calls out.write(int) \n      // and does not use the write(byte[]) version. This proved to speed the \n      // compression process by 70% !\n      out = new BufferedOutputStream(out, 1 << 16);\n      out = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n    }\n    lineFileOut = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"), 1 << 16);\n    docMaker = runData.getDocMaker();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c528d38c8d9b2452e932321931b11e7c19a96d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["c4bea909b475e3f9d726f4fee3c27d3c870b9027"],"c4bea909b475e3f9d726f4fee3c27d3c870b9027":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"]},"commit2Childs":{"3c528d38c8d9b2452e932321931b11e7c19a96d5":["c4bea909b475e3f9d726f4fee3c27d3c870b9027"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"c4bea909b475e3f9d726f4fee3c27d3c870b9027":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}