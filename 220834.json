{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#getFirstArc(Arc[T]).mjava","commits":[{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#getFirstArc(Arc[T]).mjava","pathOld":"/dev/null","sourceNew":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n    }\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0, and then readFirstTargetArc\n    arc.target = startNode;\n    return arc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#getFirstArc(Arc[T]).mjava","pathOld":"/dev/null","sourceNew":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n    }\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0, and then readFirstTargetArc\n    arc.target = startNode;\n    return arc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#getFirstArc(Arc[T]).mjava","pathOld":"/dev/null","sourceNew":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n    }\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0, and then readFirstTargetArc\n    arc.target = startNode;\n    return arc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41a7130051d507b3a37c0b9f41f5937dfed6a88e","date":1302628279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#getFirstArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#getFirstArc(Arc[T]).mjava","sourceNew":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0, and then readFirstTargetArc\n    arc.target = startNode;\n    return arc;\n  }\n\n","sourceOld":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n    }\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0, and then readFirstTargetArc\n    arc.target = startNode;\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#getFirstArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#getFirstArc(Arc[T]).mjava","sourceNew":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0, and then readFirstTargetArc\n    arc.target = startNode;\n    return arc;\n  }\n\n","sourceOld":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n    }\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0, and then readFirstTargetArc\n    arc.target = startNode;\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#getFirstArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#getFirstArc(Arc[T]).mjava","sourceNew":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0, and then readFirstTargetArc\n    arc.target = startNode;\n    return arc;\n  }\n\n","sourceOld":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n    }\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0, and then readFirstTargetArc\n    arc.target = startNode;\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#getFirstArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#getFirstArc(Arc[T]).mjava","sourceNew":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0, and then readFirstTargetArc\n    arc.target = startNode;\n    return arc;\n  }\n\n","sourceOld":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n    }\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0, and then readFirstTargetArc\n    arc.target = startNode;\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#getFirstArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#getFirstArc(Arc[T]).mjava","sourceNew":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0, and then readFirstTargetArc\n    arc.target = startNode;\n    return arc;\n  }\n\n","sourceOld":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0, and then readFirstTargetArc\n    arc.target = startNode;\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#getFirstArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#getFirstArc(Arc[T]).mjava","sourceNew":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0, and then readFirstTargetArc\n    arc.target = startNode;\n    return arc;\n  }\n\n","sourceOld":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0, and then readFirstTargetArc\n    arc.target = startNode;\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#getFirstArc(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#getFirstArc(Arc[T]).mjava","sourceNew":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0, and then readFirstTargetArc\n    arc.target = startNode;\n    return arc;\n  }\n\n","sourceOld":"  /** Fills virtual 'start' arc, ie, an empty incoming arc to\n   *  the FST's start node */\n  public Arc<T> getFirstArc(Arc<T> arc) {\n    if (emptyOutput != null) {\n      arc.flags = BIT_FINAL_ARC | BIT_LAST_ARC;\n      arc.nextFinalOutput = emptyOutput;\n    } else {\n      arc.flags = BIT_LAST_ARC;\n      arc.nextFinalOutput = NO_OUTPUT;\n    }\n    arc.output = NO_OUTPUT;\n\n    // If there are no nodes, ie, the FST only accepts the\n    // empty string, then startNode is 0, and then readFirstTargetArc\n    arc.target = startNode;\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"56da903869515527852ee21ea7ef7bfe414cd40d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["56da903869515527852ee21ea7ef7bfe414cd40d","41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["70ad682703b8585f5d0a637efec044d57ec05efb","41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"962d04139994fce5193143ef35615499a9a96d78":["868da859b43505d9d2a023bfeae6dd0c795f5295","41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"41a7130051d507b3a37c0b9f41f5937dfed6a88e":["56da903869515527852ee21ea7ef7bfe414cd40d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","a3776dccca01c11e7046323cfad46a3b4a471233","41a7130051d507b3a37c0b9f41f5937dfed6a88e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"962d04139994fce5193143ef35615499a9a96d78":[],"41a7130051d507b3a37c0b9f41f5937dfed6a88e":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}