{"path":"solr/core/src/test/org/apache/solr/schema/TestSortableTextField#testSimpleSearchAndFacets().mjava","commits":[{"id":"09db84b25dda87b73022d145a68f14c86a3a552d","date":1517506829,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestSortableTextField#testSimpleSearchAndFacets().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleSearchAndFacets() throws Exception {\n    assertU(adoc(\"id\",\"1\", \"whitespace_stxt\", \"how now brown cow ?\"));\n    assertU(adoc(\"id\",\"2\", \"whitespace_stxt\", \"how now brown cow ?\"));\n    assertU(adoc(\"id\",\"3\", \"whitespace_stxt\", \"holy cow !\"));\n    assertU(adoc(\"id\",\"4\", \"whitespace_stxt\", \"dog and cat\"));\n    \n    assertU(commit());\n\n    // NOTE: even if the field is indexed=false, should still be able to facet on it\n    for (String facet : Arrays.asList(\"whitespace_stxt\", \"whitespace_nois_stxt\",\n                                      \"whitespace_m_stxt\", \"whitespace_plain_str\")) {\n      for (String search : Arrays.asList(\"whitespace_stxt\", \"whitespace_nodv_stxt\",\n                                         \"whitespace_m_stxt\", \"whitespace_plain_txt\")) {\n        // facet.field\n        final String fpre = \"//lst[@name='facet_fields']/lst[@name='\"+facet+\"']/\";\n        assertQ(req(\"q\", search + \":cow\", \"rows\", \"0\", \n                    \"facet.field\", facet, \"facet\", \"true\")\n                , \"//*[@numFound='3']\"\n                , fpre + \"int[@name='how now brown cow ?'][.=2]\"\n                , fpre + \"int[@name='holy cow !'][.=1]\"\n                , fpre + \"int[@name='dog and cat'][.=0]\"\n                );\n        \n        // json facet\n        final String jpre = \"//lst[@name='facets']/lst[@name='x']/arr[@name='buckets']/\";\n        assertQ(req(\"q\", search + \":cow\", \"rows\", \"0\", \n                    \"json.facet\", \"{x:{ type: terms, field:'\" + facet + \"', mincount:0 }}\")\n                , \"//*[@numFound='3']\"\n                , jpre + \"lst[str[@name='val'][.='how now brown cow ?']][int[@name='count'][.=2]]\"\n                , jpre + \"lst[str[@name='val'][.='holy cow !']][int[@name='count'][.=1]]\"\n                , jpre + \"lst[str[@name='val'][.='dog and cat']][int[@name='count'][.=0]]\"\n                );\n        \n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c841e27891873cab110ebeb89f124a8ec470176"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c841e27891873cab110ebeb89f124a8ec470176","date":1586527220,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestSortableTextField#testSimpleSearchAndFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestSortableTextField#testSimpleSearchAndFacets().mjava","sourceNew":"  public void testSimpleSearchAndFacets() throws Exception {\n    assertU(adoc(\"id\",\"1\", \"whitespace_stxt\", \"how now brown cow ?\"));\n    assertU(adoc(\"id\",\"2\", \"whitespace_stxt\", \"how now brown cow ?\"));\n    assertU(adoc(\"id\",\"3\", \"whitespace_stxt\", \"holy cow !\"));\n    assertU(adoc(\"id\",\"4\", \"whitespace_stxt\", \"dog and cat\"));\n    \n    assertU(commit());\n\n    // NOTE: even if the field is indexed=false, should still be able to facet on it\n    for (String facet : Arrays.asList(\"whitespace_stxt\", \"whitespace_nois_stxt\",\n                                      \"whitespace_m_stxt\", \"whitespace_plain_str\")) {\n      for (String search : Arrays.asList(\"whitespace_stxt\", \"whitespace_nodv_stxt\",\n                                         \"whitespace_m_stxt\", \"whitespace_plain_txt\")) {\n        // facet.field\n        final String fpre = \"//lst[@name='facet_fields']/lst[@name='\"+facet+\"']/\";\n        assertQ(req(\"q\", search + \":cow\", \"rows\", \"0\", \n                    \"facet.field\", facet, \"facet\", \"true\")\n                , \"//*[@numFound='3']\"\n                , fpre + \"int[@name='how now brown cow ?'][.=2]\"\n                , fpre + \"int[@name='holy cow !'][.=1]\"\n                , fpre + \"int[@name='dog and cat'][.=0]\"\n                );\n        \n        // json facet\n        final String jpre = \"//lst[@name='facets']/lst[@name='x']/arr[@name='buckets']/\";\n        assertQ(req(\"q\", search + \":cow\", \"rows\", \"0\", \n                    \"json.facet\", \"{x:{ type: terms, field:'\" + facet + \"', mincount:0 }}\")\n                , \"//*[@numFound='3']\"\n                , jpre + \"lst[str[@name='val'][.='how now brown cow ?']][long[@name='count'][.=2]]\"\n                , jpre + \"lst[str[@name='val'][.='holy cow !']][long[@name='count'][.=1]]\"\n                , jpre + \"lst[str[@name='val'][.='dog and cat']][long[@name='count'][.=0]]\"\n                );\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void testSimpleSearchAndFacets() throws Exception {\n    assertU(adoc(\"id\",\"1\", \"whitespace_stxt\", \"how now brown cow ?\"));\n    assertU(adoc(\"id\",\"2\", \"whitespace_stxt\", \"how now brown cow ?\"));\n    assertU(adoc(\"id\",\"3\", \"whitespace_stxt\", \"holy cow !\"));\n    assertU(adoc(\"id\",\"4\", \"whitespace_stxt\", \"dog and cat\"));\n    \n    assertU(commit());\n\n    // NOTE: even if the field is indexed=false, should still be able to facet on it\n    for (String facet : Arrays.asList(\"whitespace_stxt\", \"whitespace_nois_stxt\",\n                                      \"whitespace_m_stxt\", \"whitespace_plain_str\")) {\n      for (String search : Arrays.asList(\"whitespace_stxt\", \"whitespace_nodv_stxt\",\n                                         \"whitespace_m_stxt\", \"whitespace_plain_txt\")) {\n        // facet.field\n        final String fpre = \"//lst[@name='facet_fields']/lst[@name='\"+facet+\"']/\";\n        assertQ(req(\"q\", search + \":cow\", \"rows\", \"0\", \n                    \"facet.field\", facet, \"facet\", \"true\")\n                , \"//*[@numFound='3']\"\n                , fpre + \"int[@name='how now brown cow ?'][.=2]\"\n                , fpre + \"int[@name='holy cow !'][.=1]\"\n                , fpre + \"int[@name='dog and cat'][.=0]\"\n                );\n        \n        // json facet\n        final String jpre = \"//lst[@name='facets']/lst[@name='x']/arr[@name='buckets']/\";\n        assertQ(req(\"q\", search + \":cow\", \"rows\", \"0\", \n                    \"json.facet\", \"{x:{ type: terms, field:'\" + facet + \"', mincount:0 }}\")\n                , \"//*[@numFound='3']\"\n                , jpre + \"lst[str[@name='val'][.='how now brown cow ?']][int[@name='count'][.=2]]\"\n                , jpre + \"lst[str[@name='val'][.='holy cow !']][int[@name='count'][.=1]]\"\n                , jpre + \"lst[str[@name='val'][.='dog and cat']][int[@name='count'][.=0]]\"\n                );\n        \n      }\n    }\n  }\n\n","bugFix":["09db84b25dda87b73022d145a68f14c86a3a552d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c841e27891873cab110ebeb89f124a8ec470176":["09db84b25dda87b73022d145a68f14c86a3a552d"],"09db84b25dda87b73022d145a68f14c86a3a552d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c841e27891873cab110ebeb89f124a8ec470176"]},"commit2Childs":{"1c841e27891873cab110ebeb89f124a8ec470176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09db84b25dda87b73022d145a68f14c86a3a552d":["1c841e27891873cab110ebeb89f124a8ec470176"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09db84b25dda87b73022d145a68f14c86a3a552d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}