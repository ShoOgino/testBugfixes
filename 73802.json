{"path":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveIntegerUsingDoubleType().mjava","commits":[{"id":"1166b183ba6d2f30d8660b254c6a8255505a44c3","date":1413452503,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveIntegerUsingDoubleType().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRemoveIntegerUsingDoubleType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"33333333\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1002\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"22222222\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1020\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"44444444\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    List<Double> removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", 11111111D)); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:11111111\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveIntegerUsingDoubleType().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRemoveIntegerUsingDoubleType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"33333333\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1002\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"22222222\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1020\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"44444444\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    List<Double> removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", 11111111D)); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:11111111\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744b111b17d15d490a648eb021bfa240e7f11556","date":1487008069,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveIntegerUsingDoubleType().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveIntegerUsingDoubleType().mjava","sourceNew":"  @Test\n  public void testRemoveIntegerUsingDoubleType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"33333333\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1002\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"22222222\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1020\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"44444444\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    List<Double> removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", 11111111D)); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:11111111\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":"  @Test\n  public void testRemoveIntegerUsingDoubleType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"33333333\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1002\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"22222222\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1020\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"44444444\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    List<Double> removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", 11111111D)); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:11111111\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveIntegerUsingDoubleType().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveIntegerUsingDoubleType().mjava","sourceNew":"  @Test\n  public void testRemoveIntegerUsingDoubleType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"33333333\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1002\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"22222222\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1020\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"44444444\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    List<Double> removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", 11111111D)); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:11111111\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":"  @Test\n  public void testRemoveIntegerUsingDoubleType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"33333333\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1002\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"22222222\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1020\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"44444444\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    List<Double> removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", 11111111D)); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:11111111\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveIntegerUsingDoubleType().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveIntegerUsingDoubleType().mjava","sourceNew":"  @Test\n  public void testRemoveIntegerUsingDoubleType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"33333333\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1002\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"22222222\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1020\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"44444444\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    List<Double> removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", 11111111D)); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:11111111\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":"  @Test\n  public void testRemoveIntegerUsingDoubleType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"33333333\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1002\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"22222222\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1020\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"44444444\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    List<Double> removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", 11111111D)); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:11111111\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveIntegerUsingDoubleType().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveIntegerUsingDoubleType().mjava","sourceNew":"  @Test\n  public void testRemoveIntegerUsingDoubleType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"33333333\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1002\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"22222222\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1020\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"44444444\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    List<Double> removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", 11111111D)); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:11111111\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":"  @Test\n  public void testRemoveIntegerUsingDoubleType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"33333333\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1002\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"22222222\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1020\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"44444444\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    List<Double> removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", 11111111D)); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:*\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:11111111\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a25dacbb15b3a184ab77b437a6b4d54ff286b5d","date":1570469935,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveIntegerUsingDoubleType().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveIntegerUsingDoubleType().mjava","sourceNew":"  @Test\n  public void testRemoveIntegerUsingDoubleType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"33333333\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1002\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"22222222\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1020\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"44444444\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n    assertQ(req(\"q\", \"intRemove:33333333\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    List<Double> removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"intRemove:33333333\", \"indent\", \"true\"), \"//result[@numFound = '3']\"); // remove only removed first occurrence\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", 11111111D)); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:11111111\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":"  @Test\n  public void testRemoveIntegerUsingDoubleType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"33333333\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1002\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"22222222\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1020\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"44444444\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    List<Double> removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", 11111111D)); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:11111111\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveIntegerUsingDoubleType().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testRemoveIntegerUsingDoubleType().mjava","sourceNew":"  @Test\n  public void testRemoveIntegerUsingDoubleType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"33333333\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1002\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"22222222\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1020\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"44444444\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n    assertQ(req(\"q\", \"intRemove:33333333\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    List<Double> removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"intRemove:33333333\", \"indent\", \"true\"), \"//result[@numFound = '3']\"); // remove only removed first occurrence\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", 11111111D)); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:11111111\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","sourceOld":"  @Test\n  public void testRemoveIntegerUsingDoubleType() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"33333333\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1002\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"22222222\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1020\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"33333333\", \"44444444\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    doc.setField(\"intRemove\", new String[]{\"11111111\", \"22222222\", \"44444444\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    List<Double> removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1021\");\n    removeList = new ArrayList<Double>();\n    removeList.add(22222222D);\n    removeList.add(33333333D);\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", removeList)); //behavior when hitting Solr through ZK\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:22222222\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1001\");\n    doc.setField(\"intRemove\", ImmutableMap.of(\"remove\", 11111111D)); //behavior when hitting Solr directly\n\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"intRemove:[* TO *]\", \"indent\", \"true\"), \"//result[@numFound = '4']\");\n    assertQ(req(\"q\", \"intRemove:11111111\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1166b183ba6d2f30d8660b254c6a8255505a44c3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["1166b183ba6d2f30d8660b254c6a8255505a44c3","744b111b17d15d490a648eb021bfa240e7f11556"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"6a25dacbb15b3a184ab77b437a6b4d54ff286b5d":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1166b183ba6d2f30d8660b254c6a8255505a44c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"744b111b17d15d490a648eb021bfa240e7f11556":["1166b183ba6d2f30d8660b254c6a8255505a44c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a25dacbb15b3a184ab77b437a6b4d54ff286b5d"],"b0b597c65628ca9e73913a07e81691f8229bae35":["897b06b1364bd1f658a8be7591e43f0851458e7f","6a25dacbb15b3a184ab77b437a6b4d54ff286b5d"]},"commit2Childs":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":[],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["6a25dacbb15b3a184ab77b437a6b4d54ff286b5d","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","1166b183ba6d2f30d8660b254c6a8255505a44c3"],"6a25dacbb15b3a184ab77b437a6b4d54ff286b5d":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"1166b183ba6d2f30d8660b254c6a8255505a44c3":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","022a4de90e0479b604264ca9c2e134c996454ab3","744b111b17d15d490a648eb021bfa240e7f11556"],"744b111b17d15d490a648eb021bfa240e7f11556":["022a4de90e0479b604264ca9c2e134c996454ab3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}