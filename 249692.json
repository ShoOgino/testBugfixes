{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","commits":[{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,Map).mjava","sourceNew":"  private void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n    if (fls == null) {\n      throw new IOException(\"fl param expected for a stream\");\n    }\n\n    String sorts = String.join(\",\", params.getParams(\"sort\"));\n    if (sorts == null) {\n      throw new IOException(\"sort param expected for a stream\");\n    }\n    this.comp = parseComp(sorts, fls);\n  }\n\n","sourceOld":"  private void init(String collectionName, String zkHost, Map params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = params;\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n    if(!params.containsKey(\"fl\")){\n      throw new IOException(\"fl param expected for a stream\");\n    }\n    if(!params.containsKey(\"sort\")){\n      throw new IOException(\"sort param expected for a stream\");\n    }\n    this.comp = parseComp((String)params.get(\"sort\"), (String)params.get(\"fl\")); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,Map).mjava","sourceNew":"  private void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n    if (fls == null) {\n      throw new IOException(\"fl param expected for a stream\");\n    }\n\n    String sorts = String.join(\",\", params.getParams(\"sort\"));\n    if (sorts == null) {\n      throw new IOException(\"sort param expected for a stream\");\n    }\n    this.comp = parseComp(sorts, fls);\n  }\n\n","sourceOld":"  private void init(String collectionName, String zkHost, Map params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = params;\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n    if(!params.containsKey(\"fl\")){\n      throw new IOException(\"fl param expected for a stream\");\n    }\n    if(!params.containsKey(\"sort\")){\n      throw new IOException(\"sort param expected for a stream\");\n    }\n    this.comp = parseComp((String)params.get(\"sort\"), (String)params.get(\"fl\")); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"071baff2e8ccdf4709b106e0c0f720868fd7b444","date":1463622773,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","sourceNew":"  private void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n\n    if (params.get(\"q\") == null) {\n      throw new IOException(\"q param expected for search function\");\n    }\n\n    if (params.getParams(\"fl\") == null) {\n      throw new IOException(\"fl param expected for search function\");\n    }\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n\n    if (params.getParams(\"sort\") == null) {\n      throw new IOException(\"sort param expected for search function\");\n    }\n    String sorts = String.join(\",\", params.getParams(\"sort\"));\n    this.comp = parseComp(sorts, fls);\n  }\n\n","sourceOld":"  private void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n    if (fls == null) {\n      throw new IOException(\"fl param expected for a stream\");\n    }\n\n    String sorts = String.join(\",\", params.getParams(\"sort\"));\n    if (sorts == null) {\n      throw new IOException(\"sort param expected for a stream\");\n    }\n    this.comp = parseComp(sorts, fls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb10453c4217aa50392c51e3e89deb8b779bd51","date":1463648949,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","sourceNew":"  private void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n\n    if (params.get(\"q\") == null) {\n      throw new IOException(\"q param expected for search function\");\n    }\n\n    if (params.getParams(\"fl\") == null) {\n      throw new IOException(\"fl param expected for search function\");\n    }\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n\n    if (params.getParams(\"sort\") == null) {\n      throw new IOException(\"sort param expected for search function\");\n    }\n    String sorts = String.join(\",\", params.getParams(\"sort\"));\n    this.comp = parseComp(sorts, fls);\n  }\n\n","sourceOld":"  private void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n    if (fls == null) {\n      throw new IOException(\"fl param expected for a stream\");\n    }\n\n    String sorts = String.join(\",\", params.getParams(\"sort\"));\n    if (sorts == null) {\n      throw new IOException(\"sort param expected for a stream\");\n    }\n    this.comp = parseComp(sorts, fls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,Map).mjava","sourceNew":"  private void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n\n    if (params.get(\"q\") == null) {\n      throw new IOException(\"q param expected for search function\");\n    }\n\n    if (params.getParams(\"fl\") == null) {\n      throw new IOException(\"fl param expected for search function\");\n    }\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n\n    if (params.getParams(\"sort\") == null) {\n      throw new IOException(\"sort param expected for search function\");\n    }\n    String sorts = String.join(\",\", params.getParams(\"sort\"));\n    this.comp = parseComp(sorts, fls);\n  }\n\n","sourceOld":"  private void init(String collectionName, String zkHost, Map params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = params;\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n    if(!params.containsKey(\"fl\")){\n      throw new IOException(\"fl param expected for a stream\");\n    }\n    if(!params.containsKey(\"sort\")){\n      throw new IOException(\"sort param expected for a stream\");\n    }\n    this.comp = parseComp((String)params.get(\"sort\"), (String)params.get(\"fl\")); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  private void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n\n    if (params.get(\"q\") == null) {\n      throw new IOException(\"q param expected for search function\");\n    }\n\n    if (params.getParams(\"fl\") == null) {\n      throw new IOException(\"fl param expected for search function\");\n    }\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n\n    if (params.getParams(\"sort\") == null) {\n      throw new IOException(\"sort param expected for search function\");\n    }\n    String sorts = String.join(\",\", params.getParams(\"sort\"));\n    this.comp = parseComp(sorts, fls);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","sourceNew":"  private void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n\n    if (params.get(\"q\") == null) {\n      throw new IOException(\"q param expected for search function\");\n    }\n\n    if (params.getParams(\"fl\") == null) {\n      throw new IOException(\"fl param expected for search function\");\n    }\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n\n    if (params.getParams(SORT) == null) {\n      throw new IOException(\"sort param expected for search function\");\n    }\n    String sorts = String.join(\",\", params.getParams(SORT));\n    this.comp = parseComp(sorts, fls);\n  }\n\n","sourceOld":"  private void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n\n    if (params.get(\"q\") == null) {\n      throw new IOException(\"q param expected for search function\");\n    }\n\n    if (params.getParams(\"fl\") == null) {\n      throw new IOException(\"fl param expected for search function\");\n    }\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n\n    if (params.getParams(\"sort\") == null) {\n      throw new IOException(\"sort param expected for search function\");\n    }\n    String sorts = String.join(\",\", params.getParams(\"sort\"));\n    this.comp = parseComp(sorts, fls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","sourceNew":"  private void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n\n    if (params.get(\"q\") == null) {\n      throw new IOException(\"q param expected for search function\");\n    }\n\n    if (params.getParams(\"fl\") == null) {\n      throw new IOException(\"fl param expected for search function\");\n    }\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n\n    if (params.getParams(SORT) == null) {\n      throw new IOException(\"sort param expected for search function\");\n    }\n    String sorts = String.join(\",\", params.getParams(SORT));\n    this.comp = parseComp(sorts, fls);\n  }\n\n","sourceOld":"  private void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n\n    if (params.get(\"q\") == null) {\n      throw new IOException(\"q param expected for search function\");\n    }\n\n    if (params.getParams(\"fl\") == null) {\n      throw new IOException(\"fl param expected for search function\");\n    }\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n\n    if (params.getParams(\"sort\") == null) {\n      throw new IOException(\"sort param expected for search function\");\n    }\n    String sorts = String.join(\",\", params.getParams(\"sort\"));\n    this.comp = parseComp(sorts, fls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11e5446472f245825b6f1cc220252acaab5990cf","date":1491429444,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","sourceNew":"  protected void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n\n    if (params.get(\"q\") == null) {\n      throw new IOException(\"q param expected for search function\");\n    }\n\n    if (params.getParams(\"fl\") == null) {\n      throw new IOException(\"fl param expected for search function\");\n    }\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n\n    if (params.getParams(SORT) == null) {\n      throw new IOException(\"sort param expected for search function\");\n    }\n    String sorts = String.join(\",\", params.getParams(SORT));\n    this.comp = parseComp(sorts, fls);\n  }\n\n","sourceOld":"  private void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n\n    if (params.get(\"q\") == null) {\n      throw new IOException(\"q param expected for search function\");\n    }\n\n    if (params.getParams(\"fl\") == null) {\n      throw new IOException(\"fl param expected for search function\");\n    }\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n\n    if (params.getParams(SORT) == null) {\n      throw new IOException(\"sort param expected for search function\");\n    }\n    String sorts = String.join(\",\", params.getParams(SORT));\n    this.comp = parseComp(sorts, fls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","sourceNew":"  protected void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n\n    if (params.get(\"q\") == null) {\n      throw new IOException(\"q param expected for search function\");\n    }\n\n    if (params.getParams(\"fl\") == null) {\n      throw new IOException(\"fl param expected for search function\");\n    }\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n\n    if (params.getParams(SORT) == null) {\n      throw new IOException(\"sort param expected for search function\");\n    }\n    String sorts = String.join(\",\", params.getParams(SORT));\n    this.comp = parseComp(sorts, fls);\n  }\n\n","sourceOld":"  private void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n\n    if (params.get(\"q\") == null) {\n      throw new IOException(\"q param expected for search function\");\n    }\n\n    if (params.getParams(\"fl\") == null) {\n      throw new IOException(\"fl param expected for search function\");\n    }\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n\n    if (params.getParams(SORT) == null) {\n      throw new IOException(\"sort param expected for search function\");\n    }\n    String sorts = String.join(\",\", params.getParams(SORT));\n    this.comp = parseComp(sorts, fls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233","date":1543335722,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#init(String,String,SolrParams).mjava","sourceNew":"  void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n\n    if (params.get(\"q\") == null) {\n      throw new IOException(\"q param expected for search function\");\n    }\n\n    if (params.getParams(\"fl\") == null) {\n      throw new IOException(\"fl param expected for search function\");\n    }\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n\n    if (params.getParams(SORT) == null) {\n      throw new IOException(\"sort param expected for search function\");\n    }\n    String sorts = String.join(\",\", params.getParams(SORT));\n    this.comp = parseComp(sorts, fls);\n  }\n\n","sourceOld":"  protected void init(String collectionName, String zkHost, SolrParams params) throws IOException {\n    this.zkHost = zkHost;\n    this.collection = collectionName;\n    this.params = new ModifiableSolrParams(params);\n\n    // If the comparator is null then it was not explicitly set so we will create one using the sort parameter\n    // of the query. While doing this we will also take into account any aliases such that if we are sorting on\n    // fieldA but fieldA is aliased to alias.fieldA then the comparater will be against alias.fieldA.\n\n    if (params.get(\"q\") == null) {\n      throw new IOException(\"q param expected for search function\");\n    }\n\n    if (params.getParams(\"fl\") == null) {\n      throw new IOException(\"fl param expected for search function\");\n    }\n    String fls = String.join(\",\", params.getParams(\"fl\"));\n\n    if (params.getParams(SORT) == null) {\n      throw new IOException(\"sort param expected for search function\");\n    }\n    String sorts = String.join(\",\", params.getParams(SORT));\n    this.comp = parseComp(sorts, fls);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1eb10453c4217aa50392c51e3e89deb8b779bd51":["826d15444ddf61716dc768c229cd54b2c2ccce1c","071baff2e8ccdf4709b106e0c0f720868fd7b444"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["6f4c5d3859373c3a74734e85efa122b17514e3e8"],"071baff2e8ccdf4709b106e0c0f720868fd7b444":["826d15444ddf61716dc768c229cd54b2c2ccce1c"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"01624b85de12fb02335810bdf325124e59040772":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1eb10453c4217aa50392c51e3e89deb8b779bd51"],"11e5446472f245825b6f1cc220252acaab5990cf":["01624b85de12fb02335810bdf325124e59040772"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233"],"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233":["11e5446472f245825b6f1cc220252acaab5990cf"]},"commit2Childs":{"1eb10453c4217aa50392c51e3e89deb8b779bd51":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"071baff2e8ccdf4709b106e0c0f720868fd7b444":["1eb10453c4217aa50392c51e3e89deb8b779bd51"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["1eb10453c4217aa50392c51e3e89deb8b779bd51","071baff2e8ccdf4709b106e0c0f720868fd7b444","e66a459d38c1c4a2f97128433dab546f683a9fed"],"01624b85de12fb02335810bdf325124e59040772":["11e5446472f245825b6f1cc220252acaab5990cf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"11e5446472f245825b6f1cc220252acaab5990cf":["b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}