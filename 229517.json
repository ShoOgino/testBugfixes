{"path":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(float).mjava","commits":[{"id":"f58d67a8f4d66d0872915c9bb14606874988efc3","date":1132166857,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(float).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a new empty DisjunctionMaxQuery.  Use add() to add the subqueries.\r\n   * @param tieBreakerMultiplier this score of each non-maximum disjunct for a document is multiplied by this weight\r\n   *        and added into the final score.  If non-zero, the value should be small, on the order of 0.1, which says that\r\n   *        10 occurrences of word in a lower-scored field that is also in a higher scored field is just as good as a unique\r\n   *        word in the lower scored field (i.e., one that is not in any higher scored field.\r\n   */\r\n  public DisjunctionMaxQuery(float tieBreakerMultiplier) {\r\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(float).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(float).mjava","sourceNew":"  /** Creates a new empty DisjunctionMaxQuery.  Use add() to add the subqueries.\n   * @param tieBreakerMultiplier this score of each non-maximum disjunct for a document is multiplied by this weight\n   *        and added into the final score.  If non-zero, the value should be small, on the order of 0.1, which says that\n   *        10 occurrences of word in a lower-scored field that is also in a higher scored field is just as good as a unique\n   *        word in the lower scored field (i.e., one that is not in any higher scored field.\n   */\n  public DisjunctionMaxQuery(float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n  }\n\n","sourceOld":"  /** Creates a new empty DisjunctionMaxQuery.  Use add() to add the subqueries.\r\n   * @param tieBreakerMultiplier this score of each non-maximum disjunct for a document is multiplied by this weight\r\n   *        and added into the final score.  If non-zero, the value should be small, on the order of 0.1, which says that\r\n   *        10 occurrences of word in a lower-scored field that is also in a higher scored field is just as good as a unique\r\n   *        word in the lower scored field (i.e., one that is not in any higher scored field.\r\n   */\r\n  public DisjunctionMaxQuery(float tieBreakerMultiplier) {\r\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744b16f2f69a24cad88256b661a886dffed0c095","date":1218109878,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(float).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(float).mjava","sourceNew":"  /** Creates a new empty DisjunctionMaxQuery.  Use add() to add the subqueries.\n   * @param tieBreakerMultiplier the score of each non-maximum disjunct for a document is multiplied by this weight\n   *        and added into the final score.  If non-zero, the value should be small, on the order of 0.1, which says that\n   *        10 occurrences of word in a lower-scored field that is also in a higher scored field is just as good as a unique\n   *        word in the lower scored field (i.e., one that is not in any higher scored field.\n   */\n  public DisjunctionMaxQuery(float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n  }\n\n","sourceOld":"  /** Creates a new empty DisjunctionMaxQuery.  Use add() to add the subqueries.\n   * @param tieBreakerMultiplier this score of each non-maximum disjunct for a document is multiplied by this weight\n   *        and added into the final score.  If non-zero, the value should be small, on the order of 0.1, which says that\n   *        10 occurrences of word in a lower-scored field that is also in a higher scored field is just as good as a unique\n   *        word in the lower scored field (i.e., one that is not in any higher scored field.\n   */\n  public DisjunctionMaxQuery(float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(float).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(float).mjava","sourceNew":"  /** Creates a new empty DisjunctionMaxQuery.  Use add() to add the subqueries.\n   * @param tieBreakerMultiplier the score of each non-maximum disjunct for a document is multiplied by this weight\n   *        and added into the final score.  If non-zero, the value should be small, on the order of 0.1, which says that\n   *        10 occurrences of word in a lower-scored field that is also in a higher scored field is just as good as a unique\n   *        word in the lower scored field (i.e., one that is not in any higher scored field.\n   */\n  public DisjunctionMaxQuery(float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n  }\n\n","sourceOld":"  /** Creates a new empty DisjunctionMaxQuery.  Use add() to add the subqueries.\n   * @param tieBreakerMultiplier the score of each non-maximum disjunct for a document is multiplied by this weight\n   *        and added into the final score.  If non-zero, the value should be small, on the order of 0.1, which says that\n   *        10 occurrences of word in a lower-scored field that is also in a higher scored field is just as good as a unique\n   *        word in the lower scored field (i.e., one that is not in any higher scored field.\n   */\n  public DisjunctionMaxQuery(float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f58d67a8f4d66d0872915c9bb14606874988efc3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["744b16f2f69a24cad88256b661a886dffed0c095"],"744b16f2f69a24cad88256b661a886dffed0c095":["2123bddbd65dea198cac380540636ce43a880403"]},"commit2Childs":{"f58d67a8f4d66d0872915c9bb14606874988efc3":["2123bddbd65dea198cac380540636ce43a880403"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"2123bddbd65dea198cac380540636ce43a880403":["744b16f2f69a24cad88256b661a886dffed0c095"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"744b16f2f69a24cad88256b661a886dffed0c095":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}