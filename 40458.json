{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","sourceNew":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n\n\n    TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    boolean allTimesAreCorrect = false;\n    while (! timeout.hasTimedOut()) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","sourceOld":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n\n\n    TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    boolean allTimesAreCorrect = false;\n    while (! timeout.hasTimedOut()) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","sourceNew":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n\n\n    TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    boolean allTimesAreCorrect = false;\n    while (! timeout.hasTimedOut()) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","sourceOld":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n\n\n    TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    boolean allTimesAreCorrect = false;\n    while (! timeout.hasTimedOut()) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"273ff2f5b0b365591fcbe91ea23b5e97027ca60d","date":1551111277,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","sourceNew":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n    TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    boolean allTimesAreCorrect = false;\n    while (! timeout.hasTimedOut()) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","sourceOld":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n\n\n    TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    boolean allTimesAreCorrect = false;\n    while (! timeout.hasTimedOut()) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","bugFix":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91f7dccce9b0ec051304926da532b96944956895","date":1551188806,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#waitForReloads(String,Map[String,Long]).mjava","sourceNew":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n    TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    boolean allTimesAreCorrect = false;\n    while (! timeout.hasTimedOut()) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","sourceOld":"  private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {\n\n\n    TimeOut timeout = new TimeOut(45, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n\n    boolean allTimesAreCorrect = false;\n    while (! timeout.hasTimedOut()) {\n      Map<String,Long> urlToTimeAfter = new HashMap<>();\n      collectStartTimes(collectionName, urlToTimeAfter);\n      \n      boolean retry = false;\n      Set<Entry<String,Long>> entries = urlToTimeBefore.entrySet();\n      for (Entry<String,Long> entry : entries) {\n        Long beforeTime = entry.getValue();\n        Long afterTime = urlToTimeAfter.get(entry.getKey());\n        assertNotNull(afterTime);\n        if (afterTime <= beforeTime) {\n          retry = true;\n          break;\n        }\n\n      }\n      if (!retry) {\n        allTimesAreCorrect = true;\n        break;\n      }\n    }\n    return allTimesAreCorrect;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"91f7dccce9b0ec051304926da532b96944956895":["b94236357aaa22b76c10629851fe4e376e0cea82","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"273ff2f5b0b365591fcbe91ea23b5e97027ca60d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91f7dccce9b0ec051304926da532b96944956895"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["91f7dccce9b0ec051304926da532b96944956895","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"91f7dccce9b0ec051304926da532b96944956895":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"273ff2f5b0b365591fcbe91ea23b5e97027ca60d":["91f7dccce9b0ec051304926da532b96944956895"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}