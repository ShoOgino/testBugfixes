{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testLotsOfPhrases().mjava","commits":[{"id":"9052c1a564d473a9e5d397f7bf9a96e9ec5819cc","date":1377013503,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testLotsOfPhrases().mjava","pathOld":"/dev/null","sourceNew":"  public void testLotsOfPhrases() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,  new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET)));\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    String[] terms = { \"org\", \"apache\", \"lucene\"};\n    int iters = atLeast(1000);\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < iters; i++) {\n      builder.append(terms[random().nextInt(terms.length)]).append(\" \");\n      if (random().nextInt(6) == 3) {\n        builder.append(\"solr\").append(\" \");\n      }\n    }\n      Document doc = new Document();\n      Field field = new Field(\"field\", builder.toString(), type);\n      doc.add(field);\n      writer.addDocument(doc);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"org\"));\n    query.add(new Term(\"field\", \"apache\"));\n    query.add(new Term(\"field\", \"lucene\"));\n    \n   \n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(1, hits.totalHits);\n    FieldQuery fieldQuery  = highlighter.getFieldQuery(query, reader);\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, hits.scoreDocs[0].doc, \"field\", 1000, 1);\n    for (int i = 0; i < bestFragments.length; i++) {\n      String result = bestFragments[i].replaceAll(\"<b>org apache lucene</b>\", \"FOOBAR\");\n      assertFalse(result.contains(\"org apache lucene\"));\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0a0cab1608cf420b8433a979dbe4a2f69fb3f20e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a0cab1608cf420b8433a979dbe4a2f69fb3f20e","date":1377036433,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testLotsOfPhrases().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testLotsOfPhrases().mjava","sourceNew":"  public void testLotsOfPhrases() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,  new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET)));\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    String[] terms = { \"org\", \"apache\", \"lucene\"};\n    int iters = 1000; // don't let it go too big, or jenkins will stack overflow: atLeast(1000);\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < iters; i++) {\n      builder.append(terms[random().nextInt(terms.length)]).append(\" \");\n      if (random().nextInt(6) == 3) {\n        builder.append(\"solr\").append(\" \");\n      }\n    }\n      Document doc = new Document();\n      Field field = new Field(\"field\", builder.toString(), type);\n      doc.add(field);\n      writer.addDocument(doc);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"org\"));\n    query.add(new Term(\"field\", \"apache\"));\n    query.add(new Term(\"field\", \"lucene\"));\n    \n   \n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(1, hits.totalHits);\n    FieldQuery fieldQuery  = highlighter.getFieldQuery(query, reader);\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, hits.scoreDocs[0].doc, \"field\", 1000, 1);\n    for (int i = 0; i < bestFragments.length; i++) {\n      String result = bestFragments[i].replaceAll(\"<b>org apache lucene</b>\", \"FOOBAR\");\n      assertFalse(result.contains(\"org apache lucene\"));\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testLotsOfPhrases() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,  new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET)));\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    String[] terms = { \"org\", \"apache\", \"lucene\"};\n    int iters = atLeast(1000);\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < iters; i++) {\n      builder.append(terms[random().nextInt(terms.length)]).append(\" \");\n      if (random().nextInt(6) == 3) {\n        builder.append(\"solr\").append(\" \");\n      }\n    }\n      Document doc = new Document();\n      Field field = new Field(\"field\", builder.toString(), type);\n      doc.add(field);\n      writer.addDocument(doc);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"org\"));\n    query.add(new Term(\"field\", \"apache\"));\n    query.add(new Term(\"field\", \"lucene\"));\n    \n   \n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(1, hits.totalHits);\n    FieldQuery fieldQuery  = highlighter.getFieldQuery(query, reader);\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, hits.scoreDocs[0].doc, \"field\", 1000, 1);\n    for (int i = 0; i < bestFragments.length; i++) {\n      String result = bestFragments[i].replaceAll(\"<b>org apache lucene</b>\", \"FOOBAR\");\n      assertFalse(result.contains(\"org apache lucene\"));\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["9052c1a564d473a9e5d397f7bf9a96e9ec5819cc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testLotsOfPhrases().mjava","pathOld":"/dev/null","sourceNew":"  public void testLotsOfPhrases() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,  new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET)));\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    String[] terms = { \"org\", \"apache\", \"lucene\"};\n    int iters = 1000; // don't let it go too big, or jenkins will stack overflow: atLeast(1000);\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < iters; i++) {\n      builder.append(terms[random().nextInt(terms.length)]).append(\" \");\n      if (random().nextInt(6) == 3) {\n        builder.append(\"solr\").append(\" \");\n      }\n    }\n      Document doc = new Document();\n      Field field = new Field(\"field\", builder.toString(), type);\n      doc.add(field);\n      writer.addDocument(doc);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"org\"));\n    query.add(new Term(\"field\", \"apache\"));\n    query.add(new Term(\"field\", \"lucene\"));\n    \n   \n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(1, hits.totalHits);\n    FieldQuery fieldQuery  = highlighter.getFieldQuery(query, reader);\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, hits.scoreDocs[0].doc, \"field\", 1000, 1);\n    for (int i = 0; i < bestFragments.length; i++) {\n      String result = bestFragments[i].replaceAll(\"<b>org apache lucene</b>\", \"FOOBAR\");\n      assertFalse(result.contains(\"org apache lucene\"));\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08","date":1378464767,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testLotsOfPhrases().mjava","sourceNew":null,"sourceOld":"  public void testLotsOfPhrases() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,  new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET)));\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n    String[] terms = { \"org\", \"apache\", \"lucene\"};\n    int iters = 1000; // don't let it go too big, or jenkins will stack overflow: atLeast(1000);\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < iters; i++) {\n      builder.append(terms[random().nextInt(terms.length)]).append(\" \");\n      if (random().nextInt(6) == 3) {\n        builder.append(\"solr\").append(\" \");\n      }\n    }\n      Document doc = new Document();\n      Field field = new Field(\"field\", builder.toString(), type);\n      doc.add(field);\n      writer.addDocument(doc);\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"org\"));\n    query.add(new Term(\"field\", \"apache\"));\n    query.add(new Term(\"field\", \"lucene\"));\n    \n   \n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n    IndexReader reader = DirectoryReader.open(writer, true);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(1, hits.totalHits);\n    FieldQuery fieldQuery  = highlighter.getFieldQuery(query, reader);\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, hits.scoreDocs[0].doc, \"field\", 1000, 1);\n    for (int i = 0; i < bestFragments.length; i++) {\n      String result = bestFragments[i].replaceAll(\"<b>org apache lucene</b>\", \"FOOBAR\");\n      assertFalse(result.contains(\"org apache lucene\"));\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9052c1a564d473a9e5d397f7bf9a96e9ec5819cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0a0cab1608cf420b8433a979dbe4a2f69fb3f20e":["9052c1a564d473a9e5d397f7bf9a96e9ec5819cc"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0a0cab1608cf420b8433a979dbe4a2f69fb3f20e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08":["0a0cab1608cf420b8433a979dbe4a2f69fb3f20e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08"]},"commit2Childs":{"9052c1a564d473a9e5d397f7bf9a96e9ec5819cc":["0a0cab1608cf420b8433a979dbe4a2f69fb3f20e"],"0a0cab1608cf420b8433a979dbe4a2f69fb3f20e":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9052c1a564d473a9e5d397f7bf9a96e9ec5819cc","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}