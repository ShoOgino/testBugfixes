{"path":"client/java/solrj/src/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","commits":[{"id":"ed6e0b4985bdfd7791bee5b0f15f9760568bc01f","date":1212680426,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","pathOld":"/dev/null","sourceNew":"    public <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = sdoc.getFieldValue(name);\n      if(val == null) return;\n      if (isArray) {\n        if (val instanceof List) {\n          List collection = (List) val;\n          set(obj, collection.toArray((Object[]) Array.newInstance(type,collection.size())));\n        } else {\n          set(obj, new Object[]{val});\n        }\n      } else if (isList) {\n        if (val instanceof List) {\n          set(obj, val);\n        } else {\n          ArrayList l = new ArrayList();\n          l.add(val);\n          set(obj, l);\n        }\n      } else {\n        if (val instanceof List) {\n          List l = (List) val;\n          if(l.size()>0) \n            set(obj, l.get(0));\n        } \n        else {\n          set(obj,val) ;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a2afab7f47cc7ee500011abb11b6ac1ce829b94","date":1216493790,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","sourceNew":"    public <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = sdoc.getFieldValue(name);\n      if(val == null) return;\n      if (isArray) {\n        if (val instanceof List) {\n          List collection = (List) val;\n          set(obj, collection.toArray((Object[]) Array.newInstance(type,collection.size())));\n        } else {\n          Object[] arr = (Object[]) Array.newInstance(type, 1);\n          arr[0] = val;\n          set(obj, arr);\n        }\n      } else if (isList) {\n        if (val instanceof List) {\n          set(obj, val);\n        } else {\n          ArrayList l = new ArrayList();\n          l.add(val);\n          set(obj, l);\n        }\n      } else {\n        if (val instanceof List) {\n          List l = (List) val;\n          if(l.size()>0) \n            set(obj, l.get(0));\n        } \n        else {\n          set(obj,val) ;\n        }\n      }\n    }\n\n","sourceOld":"    public <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = sdoc.getFieldValue(name);\n      if(val == null) return;\n      if (isArray) {\n        if (val instanceof List) {\n          List collection = (List) val;\n          set(obj, collection.toArray((Object[]) Array.newInstance(type,collection.size())));\n        } else {\n          set(obj, new Object[]{val});\n        }\n      } else if (isList) {\n        if (val instanceof List) {\n          set(obj, val);\n        } else {\n          ArrayList l = new ArrayList();\n          l.add(val);\n          set(obj, l);\n        }\n      } else {\n        if (val instanceof List) {\n          List l = (List) val;\n          if(l.size()>0) \n            set(obj, l.get(0));\n        } \n        else {\n          set(obj,val) ;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","sourceNew":"    public <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = sdoc.getFieldValue(name);\n      if(val == null) return;\n      if (isArray) {\n        if (val instanceof List) {\n          List collection = (List) val;\n          set(obj, collection.toArray((Object[]) Array.newInstance(type,collection.size())));\n        } else {\n          Object[] arr = (Object[]) Array.newInstance(type, 1);\n          arr[0] = val;\n          set(obj, arr);\n        }\n      } else if (isList) {\n        if (val instanceof List) {\n          set(obj, val);\n        } else {\n          ArrayList l = new ArrayList();\n          l.add(val);\n          set(obj, l);\n        }\n      } else {\n        if (val instanceof List) {\n          List l = (List) val;\n          if(l.size()>0) \n            set(obj, l.get(0));\n        } \n        else {\n          set(obj,val) ;\n        }\n      }\n    }\n\n","sourceOld":"    public <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = sdoc.getFieldValue(name);\n      if(val == null) return;\n      if (isArray) {\n        if (val instanceof List) {\n          List collection = (List) val;\n          set(obj, collection.toArray((Object[]) Array.newInstance(type,collection.size())));\n        } else {\n          Object[] arr = (Object[]) Array.newInstance(type, 1);\n          arr[0] = val;\n          set(obj, arr);\n        }\n      } else if (isList) {\n        if (val instanceof List) {\n          set(obj, val);\n        } else {\n          ArrayList l = new ArrayList();\n          l.add(val);\n          set(obj, l);\n        }\n      } else {\n        if (val instanceof List) {\n          List l = (List) val;\n          if(l.size()>0) \n            set(obj, l.get(0));\n        } \n        else {\n          set(obj,val) ;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ed6e0b4985bdfd7791bee5b0f15f9760568bc01f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"e3602d5eab954caecc726ab136ad580ac1ceb917":["3a2afab7f47cc7ee500011abb11b6ac1ce829b94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"3a2afab7f47cc7ee500011abb11b6ac1ce829b94":["ed6e0b4985bdfd7791bee5b0f15f9760568bc01f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ed6e0b4985bdfd7791bee5b0f15f9760568bc01f":["3a2afab7f47cc7ee500011abb11b6ac1ce829b94"],"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ed6e0b4985bdfd7791bee5b0f15f9760568bc01f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a2afab7f47cc7ee500011abb11b6ac1ce829b94":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}