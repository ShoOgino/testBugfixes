{"path":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    \n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n    String q = params.get( CommonParams.Q );\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      // What fields do we need to return\n      String fl = params.get(CommonParams.FL);\n      int flags = 0;\n      if (fl != null) {\n        flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF),\n            params, req.getSchema());\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    \n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n    String q = params.get( CommonParams.Q );\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      // What fields do we need to return\n      String fl = params.get(CommonParams.FL);\n      int flags = 0;\n      if (fl != null) {\n        flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF),\n            params, req.getSchema());\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    \n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n    String q = params.get( CommonParams.Q );\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      // What fields do we need to return\n      String fl = params.get(CommonParams.FL);\n      int flags = 0;\n      if (fl != null) {\n        flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF),\n            params, req.getSchema());\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    \n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n    String q = params.get( CommonParams.Q );\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      // What fields do we need to return\n      String fl = params.get(CommonParams.FL);\n      int flags = 0;\n      if (fl != null) {\n        flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF),\n            params, req.getSchema());\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    \n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n    String q = params.get( CommonParams.Q );\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      // What fields do we need to return\n      String fl = params.get(CommonParams.FL);\n      int flags = 0;\n      if (fl != null) {\n        flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF),\n            params, req.getSchema());\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd00dd91853514614379b0e680d65bd19cac0f30","date":1283087816,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    \n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n    String q = params.get( CommonParams.Q );\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      // What fields do we need to return\n      String fl = params.get(CommonParams.FL);\n      int flags = 0;\n      if (fl != null) {\n        flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF),\n            params, req.getSchema());\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      for (int i = 0; i < dbgParams.length; i++) {\n        if (dbgParams[i].equals(CommonParams.QUERY)){\n          dbgQuery = true;\n        } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n          dbgResults = true;\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    \n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n    String q = params.get( CommonParams.Q );\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      // What fields do we need to return\n      String fl = params.get(CommonParams.FL);\n      int flags = 0;\n      if (fl != null) {\n        flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF),\n            params, req.getSchema());\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"036440f92bbe33d6d11533d9f5fd2358239ebd4d","date":1283889953,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    \n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n    String q = params.get( CommonParams.Q );\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      // What fields do we need to return\n      String fl = params.get(CommonParams.FL);\n      int flags = 0;\n      if (fl != null) {\n        flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF),\n            params, req.getSchema());\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    \n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n    String q = params.get( CommonParams.Q );\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      // What fields do we need to return\n      String fl = params.get(CommonParams.FL);\n      int flags = 0;\n      if (fl != null) {\n        flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF),\n            params, req.getSchema());\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      for (int i = 0; i < dbgParams.length; i++) {\n        if (dbgParams[i].equals(CommonParams.QUERY)){\n          dbgQuery = true;\n        } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n          dbgResults = true;\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be4da9fa3a0ba5b4246b7587ae016cf1f57bf865","date":1283910026,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int flags = 0;\n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    \n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n    String q = params.get( CommonParams.Q );\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      // What fields do we need to return\n      String fl = params.get(CommonParams.FL);\n      int flags = 0;\n      if (fl != null) {\n        flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF),\n            params, req.getSchema());\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","bugFix":["fa96fdb58cefcada21fc51faf37114033f044f3f","dbf8bf15546966c2999be987d32191fc1ef495ef"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int flags = 0;\n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n    SolrIndexSearcher searcher = req.getSearcher();\n    \n    \n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n    List<Query> filters = SolrPluginUtils.parseFilterQueries(req);\n    \n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n    String q = params.get( CommonParams.Q );\n    \n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      // What fields do we need to return\n      String fl = params.get(CommonParams.FL);\n      int flags = 0;\n      if (fl != null) {\n        flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        Query query = QueryParsing.parseQuery(q, params.get(CommonParams.DF),\n            params, req.getSchema());\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    \n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    try {\n      NamedList<Object> dbg = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList );\n      if (null != dbg) {\n        if (null != filters) {\n          dbg.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n          List<String> fqs = new ArrayList<String>(filters.size());\n          for (Query fq : filters) {\n            fqs.add(QueryParsing.toString(fq, req.getSchema()));\n          }\n          dbg.add(\"parsed_filter_queries\",fqs);\n        }\n        rsp.add(\"debug\", dbg);\n      }\n    } catch (Exception e) {\n      SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n      rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d701c455e4783533e275f01bf3e813737b7e593","date":1296229063,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int flags = 0;\n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.getRawMLTQuery(), mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int flags = 0;\n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int flags = 0;\n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.getRawMLTQuery(), mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int flags = 0;\n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int flags = 0;\n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.getRawMLTQuery(), mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int flags = 0;\n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.mltquery, mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    ReturnFields returnFields = ReturnFields.getReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.getWantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.getRawMLTQuery(), mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int flags = 0;\n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.getRawMLTQuery(), mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"794957d0f3853445bdf9319bfb72f8b8c2443a7d","date":1301088393,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.getRawMLTQuery(), mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    ReturnFields returnFields = ReturnFields.getReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.getWantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.getRawMLTQuery(), mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.getRawMLTQuery(), mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int flags = 0;\n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.getRawMLTQuery(), mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.getRawMLTQuery(), mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    String fl = params.get(CommonParams.FL);\n    int flags = 0;\n    if (fl != null) {\n      flags |= SolrPluginUtils.setReturnFields(fl, rsp);\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.getRawMLTQuery(), mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.getRawMLTQuery(), mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.getRawMLTQuery(), mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.getRawMLTQuery(), mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.getRawMLTQuery(), mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.getRawMLTQuery(), mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception \n  {\n    SolrParams params = req.getParams();\n\n    // Set field flags\n    ReturnFields returnFields = new ReturnFields( req );\n    rsp.setReturnFields( returnFields );\n    int flags = 0;\n    if (returnFields.wantsScore()) {\n      flags |= SolrIndexSearcher.GET_SCORES;\n    }\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n    String q = params.get( CommonParams.Q );\n    Query query = null;\n    SortSpec sortSpec = null;\n    List<Query> filters = null;\n\n    try {\n      if (q != null) {\n        QParser parser = QParser.getParser(q, defType, req);\n        query = parser.getQuery();\n        sortSpec = parser.getSort(true);\n      }\n\n      String[] fqs = req.getParams().getParams(CommonParams.FQ);\n      if (fqs!=null && fqs.length!=0) {\n          filters = new ArrayList<Query>();\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            filters.add(fqp.getQuery());\n          }\n        }\n      }\n    } catch (ParseException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    MoreLikeThisHelper mlt = new MoreLikeThisHelper( params, searcher );\n\n    // Hold on to the interesting terms if relevant\n    TermStyle termStyle = TermStyle.get( params.get( MoreLikeThisParams.INTERESTING_TERMS ) );\n    List<InterestingTerm> interesting = (termStyle == TermStyle.NONE )\n      ? null : new ArrayList<InterestingTerm>( mlt.mlt.getMaxQueryTerms() );\n    \n    DocListAndSet mltDocs = null;\n\n    // Parse Required Params\n    // This will either have a single Reader or valid query\n    Reader reader = null;\n    try {\n      if (q == null || q.trim().length() < 1) {\n        Iterable<ContentStream> streams = req.getContentStreams();\n        if (streams != null) {\n          Iterator<ContentStream> iter = streams.iterator();\n          if (iter.hasNext()) {\n            reader = iter.next().getReader();\n          }\n          if (iter.hasNext()) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"MoreLikeThis does not support multiple ContentStreams\");\n          }\n        }\n      }\n\n      int start = params.getInt(CommonParams.START, 0);\n      int rows = params.getInt(CommonParams.ROWS, 10);\n\n      // Find documents MoreLikeThis - either with a reader or a query\n      // --------------------------------------------------------------------------------\n      if (reader != null) {\n        mltDocs = mlt.getMoreLikeThis(reader, start, rows, filters,\n            interesting, flags);\n      } else if (q != null) {\n        // Matching options\n        boolean includeMatch = params.getBool(MoreLikeThisParams.MATCH_INCLUDE,\n            true);\n        int matchOffset = params.getInt(MoreLikeThisParams.MATCH_OFFSET, 0);\n        // Find the base match\n        DocList match = searcher.getDocList(query, null, null, matchOffset, 1,\n            flags); // only get the first one...\n        if (includeMatch) {\n          rsp.add(\"match\", match);\n        }\n\n        // This is an iterator, but we only handle the first match\n        DocIterator iterator = match.iterator();\n        if (iterator.hasNext()) {\n          // do a MoreLikeThis query for each document in results\n          int id = iterator.nextDoc();\n          mltDocs = mlt.getMoreLikeThis(id, start, rows, filters, interesting,\n              flags);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"MoreLikeThis requires either a query (?q=) or text to find similar documents.\");\n      }\n\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n    \n    if( mltDocs == null ) {\n      mltDocs = new DocListAndSet(); // avoid NPE\n    }\n    rsp.add( \"response\", mltDocs.docList );\n    \n  \n    if( interesting != null ) {\n      if( termStyle == TermStyle.DETAILS ) {\n        NamedList<Float> it = new NamedList<Float>();\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.toString(), t.boost );\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n      else {\n        List<String> it = new ArrayList<String>( interesting.size() );\n        for( InterestingTerm t : interesting ) {\n          it.add( t.term.text());\n        }\n        rsp.add( \"interestingTerms\", it );\n      }\n    }\n    \n    // maybe facet the results\n    if (params.getBool(FacetParams.FACET,false)) {\n      if( mltDocs.docSet == null ) {\n        rsp.add( \"facet_counts\", null );\n      }\n      else {\n        SimpleFacets f = new SimpleFacets(req, mltDocs.docSet, params );\n        rsp.add( \"facet_counts\", f.getFacetCounts() );\n      }\n    }\n    boolean dbg = req.getParams().getBool(CommonParams.DEBUG_QUERY, false);\n\n    boolean dbgQuery = false, dbgResults = false;\n    if (dbg == false){//if it's true, we are doing everything anyway.\n      String[] dbgParams = req.getParams().getParams(CommonParams.DEBUG);\n      if (dbgParams != null) {\n        for (int i = 0; i < dbgParams.length; i++) {\n          if (dbgParams[i].equals(CommonParams.QUERY)){\n            dbgQuery = true;\n          } else if (dbgParams[i].equals(CommonParams.RESULTS)){\n            dbgResults = true;\n          }\n        }\n      }\n    } else {\n      dbgQuery = true;\n      dbgResults = true;\n    }\n    // Copied from StandardRequestHandler... perhaps it should be added to doStandardDebug?\n    if (dbg == true) {\n      try {\n        NamedList<Object> dbgInfo = SolrPluginUtils.doStandardDebug(req, q, mlt.getRawMLTQuery(), mltDocs.docList, dbgQuery, dbgResults);\n        if (null != dbgInfo) {\n          if (null != filters) {\n            dbgInfo.add(\"filter_queries\",req.getParams().getParams(CommonParams.FQ));\n            List<String> fqs = new ArrayList<String>(filters.size());\n            for (Query fq : filters) {\n              fqs.add(QueryParsing.toString(fq, req.getSchema()));\n            }\n            dbgInfo.add(\"parsed_filter_queries\",fqs);\n          }\n          rsp.add(\"debug\", dbgInfo);\n        }\n      } catch (Exception e) {\n        SolrException.logOnce(SolrCore.log, \"Exception during debug\", e);\n        rsp.add(\"exception_during_debug\", SolrException.toStr(e));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be4da9fa3a0ba5b4246b7587ae016cf1f57bf865":["036440f92bbe33d6d11533d9f5fd2358239ebd4d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["6aedf81f068e430dec27d94310415cc6ff52731c"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["794957d0f3853445bdf9319bfb72f8b8c2443a7d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"036440f92bbe33d6d11533d9f5fd2358239ebd4d":["cd00dd91853514614379b0e680d65bd19cac0f30"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","be4da9fa3a0ba5b4246b7587ae016cf1f57bf865"],"cd00dd91853514614379b0e680d65bd19cac0f30":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["be4da9fa3a0ba5b4246b7587ae016cf1f57bf865","8d701c455e4783533e275f01bf3e813737b7e593"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d701c455e4783533e275f01bf3e813737b7e593":["be4da9fa3a0ba5b4246b7587ae016cf1f57bf865"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"6aedf81f068e430dec27d94310415cc6ff52731c":["8d701c455e4783533e275f01bf3e813737b7e593"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8d701c455e4783533e275f01bf3e813737b7e593"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"be4da9fa3a0ba5b4246b7587ae016cf1f57bf865":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d","8d701c455e4783533e275f01bf3e813737b7e593"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["c26f00b574427b55127e869b935845554afde1fa","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"036440f92bbe33d6d11533d9f5fd2358239ebd4d":["be4da9fa3a0ba5b4246b7587ae016cf1f57bf865"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd00dd91853514614379b0e680d65bd19cac0f30":["036440f92bbe33d6d11533d9f5fd2358239ebd4d"],"1da8d55113b689b06716246649de6f62430f15c0":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd00dd91853514614379b0e680d65bd19cac0f30"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"8d701c455e4783533e275f01bf3e813737b7e593":["29ef99d61cda9641b6250bf9567329a6e65f901d","6aedf81f068e430dec27d94310415cc6ff52731c","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"6aedf81f068e430dec27d94310415cc6ff52731c":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}