{"path":"solr/src/test/org/apache/solr/analysis/TestShingleFilterFactory#testOutputUnigramsIfNoShingles().mjava","commits":[{"id":"81f30f660ca7dcbf4994d3394d8a9e5e9bc8abf2","date":1286643403,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestShingleFilterFactory#testOutputUnigramsIfNoShingles().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test with unigrams disabled except when there are no shingles, with\n   * a single input token. Using default min/max shingle sizes: 2/2.  No\n   * shingles will be created, since there are fewer input tokens than\n   * min shingle size.  However, because outputUnigramsIfNoShingles is\n   * set to true, even though outputUnigrams is set to false, one\n   * unigram should be output.\n   */\n  public void testOutputUnigramsIfNoShingles() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"outputUnigrams\", \"false\");\n    args.put(\"outputUnigramsIfNoShingles\", \"true\");\n    ShingleFilterFactory factory = new ShingleFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, reader));\n    assertTokenStreamContents(stream, new String[] { \"test\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestShingleFilterFactory#testOutputUnigramsIfNoShingles().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test with unigrams disabled except when there are no shingles, with\n   * a single input token. Using default min/max shingle sizes: 2/2.  No\n   * shingles will be created, since there are fewer input tokens than\n   * min shingle size.  However, because outputUnigramsIfNoShingles is\n   * set to true, even though outputUnigrams is set to false, one\n   * unigram should be output.\n   */\n  public void testOutputUnigramsIfNoShingles() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"outputUnigrams\", \"false\");\n    args.put(\"outputUnigramsIfNoShingles\", \"true\");\n    ShingleFilterFactory factory = new ShingleFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, reader));\n    assertTokenStreamContents(stream, new String[] { \"test\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestShingleFilterFactory#testOutputUnigramsIfNoShingles().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestShingleFilterFactory#testOutputUnigramsIfNoShingles().mjava","sourceNew":"  /**\n   * Test with unigrams disabled except when there are no shingles, with\n   * a single input token. Using default min/max shingle sizes: 2/2.  No\n   * shingles will be created, since there are fewer input tokens than\n   * min shingle size.  However, because outputUnigramsIfNoShingles is\n   * set to true, even though outputUnigrams is set to false, one\n   * unigram should be output.\n   */\n  public void testOutputUnigramsIfNoShingles() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"outputUnigrams\", \"false\");\n    args.put(\"outputUnigramsIfNoShingles\", \"true\");\n    ShingleFilterFactory factory = new ShingleFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, reader));\n    assertTokenStreamContents(stream, new String[] { \"test\" });\n  }\n\n","sourceOld":"  /**\n   * Test with unigrams disabled except when there are no shingles, with\n   * a single input token. Using default min/max shingle sizes: 2/2.  No\n   * shingles will be created, since there are fewer input tokens than\n   * min shingle size.  However, because outputUnigramsIfNoShingles is\n   * set to true, even though outputUnigrams is set to false, one\n   * unigram should be output.\n   */\n  public void testOutputUnigramsIfNoShingles() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"outputUnigrams\", \"false\");\n    args.put(\"outputUnigramsIfNoShingles\", \"true\");\n    ShingleFilterFactory factory = new ShingleFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, reader));\n    assertTokenStreamContents(stream, new String[] { \"test\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestShingleFilterFactory#testOutputUnigramsIfNoShingles().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestShingleFilterFactory#testOutputUnigramsIfNoShingles().mjava","sourceNew":"  /**\n   * Test with unigrams disabled except when there are no shingles, with\n   * a single input token. Using default min/max shingle sizes: 2/2.  No\n   * shingles will be created, since there are fewer input tokens than\n   * min shingle size.  However, because outputUnigramsIfNoShingles is\n   * set to true, even though outputUnigrams is set to false, one\n   * unigram should be output.\n   */\n  public void testOutputUnigramsIfNoShingles() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"outputUnigrams\", \"false\");\n    args.put(\"outputUnigramsIfNoShingles\", \"true\");\n    ShingleFilterFactory factory = new ShingleFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, reader));\n    assertTokenStreamContents(stream, new String[] { \"test\" });\n  }\n\n","sourceOld":"  /**\n   * Test with unigrams disabled except when there are no shingles, with\n   * a single input token. Using default min/max shingle sizes: 2/2.  No\n   * shingles will be created, since there are fewer input tokens than\n   * min shingle size.  However, because outputUnigramsIfNoShingles is\n   * set to true, even though outputUnigrams is set to false, one\n   * unigram should be output.\n   */\n  public void testOutputUnigramsIfNoShingles() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"outputUnigrams\", \"false\");\n    args.put(\"outputUnigramsIfNoShingles\", \"true\");\n    ShingleFilterFactory factory = new ShingleFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, reader));\n    assertTokenStreamContents(stream, new String[] { \"test\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestShingleFilterFactory#testOutputUnigramsIfNoShingles().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestShingleFilterFactory#testOutputUnigramsIfNoShingles().mjava","sourceNew":"  /**\n   * Test with unigrams disabled except when there are no shingles, with\n   * a single input token. Using default min/max shingle sizes: 2/2.  No\n   * shingles will be created, since there are fewer input tokens than\n   * min shingle size.  However, because outputUnigramsIfNoShingles is\n   * set to true, even though outputUnigrams is set to false, one\n   * unigram should be output.\n   */\n  public void testOutputUnigramsIfNoShingles() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"outputUnigrams\", \"false\");\n    args.put(\"outputUnigramsIfNoShingles\", \"true\");\n    ShingleFilterFactory factory = new ShingleFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, reader));\n    assertTokenStreamContents(stream, new String[] { \"test\" });\n  }\n\n","sourceOld":"  /**\n   * Test with unigrams disabled except when there are no shingles, with\n   * a single input token. Using default min/max shingle sizes: 2/2.  No\n   * shingles will be created, since there are fewer input tokens than\n   * min shingle size.  However, because outputUnigramsIfNoShingles is\n   * set to true, even though outputUnigrams is set to false, one\n   * unigram should be output.\n   */\n  public void testOutputUnigramsIfNoShingles() throws Exception {\n    Reader reader = new StringReader(\"test\");\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"outputUnigrams\", \"false\");\n    args.put(\"outputUnigramsIfNoShingles\", \"true\");\n    ShingleFilterFactory factory = new ShingleFilterFactory();\n    factory.init(args);\n    TokenStream stream = factory.create(new WhitespaceTokenizer(DEFAULT_VERSION, reader));\n    assertTokenStreamContents(stream, new String[] { \"test\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["81f30f660ca7dcbf4994d3394d8a9e5e9bc8abf2"],"c26f00b574427b55127e869b935845554afde1fa":["81f30f660ca7dcbf4994d3394d8a9e5e9bc8abf2","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["81f30f660ca7dcbf4994d3394d8a9e5e9bc8abf2"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","81f30f660ca7dcbf4994d3394d8a9e5e9bc8abf2"],"81f30f660ca7dcbf4994d3394d8a9e5e9bc8abf2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","81f30f660ca7dcbf4994d3394d8a9e5e9bc8abf2"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"81f30f660ca7dcbf4994d3394d8a9e5e9bc8abf2":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}