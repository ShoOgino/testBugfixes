{"path":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","commits":[{"id":"317c809622a7a74e9257dd0eaf0b7c4dd7399bc7","date":1214673815,"type":0,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testEquals(aprioriIndex,  testIndex);\n\n       // delete a few documents\n    IndexReader ir = IndexReader.open(aprioriIndex);\n    ir.deleteDocument(3);\n    ir.deleteDocument(8);\n    ir.close();\n\n    ir = testIndex.indexReaderFactory();\n    ir.deleteDocument(3);\n    ir.deleteDocument(8);\n    ir.close();\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","sourceNew":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testEquals(aprioriIndex,  testIndex);\n\n       // delete a few documents\n    IndexReader ir = IndexReader.open(aprioriIndex, false);\n    ir.deleteDocument(3);\n    ir.deleteDocument(8);\n    ir.close();\n\n    ir = testIndex.indexReaderFactory();\n    ir.deleteDocument(3);\n    ir.deleteDocument(8);\n    ir.close();\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","sourceOld":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testEquals(aprioriIndex,  testIndex);\n\n       // delete a few documents\n    IndexReader ir = IndexReader.open(aprioriIndex);\n    ir.deleteDocument(3);\n    ir.deleteDocument(8);\n    ir.close();\n\n    ir = testIndex.indexReaderFactory();\n    ir.deleteDocument(3);\n    ir.deleteDocument(8);\n    ir.close();\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c41356c8a19fd7493940c7a1d798ede2fe03ddf8","date":1260481087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","sourceNew":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n\n    testEquals(aprioriIndex,  testIndex);\n\n    // delete a few documents\n    IndexReader air = IndexReader.open(aprioriIndex, false);\n    InstantiatedIndexReader tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(3);\n    tir.deleteDocument(3);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(8);\n    tir.deleteDocument(8);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());    \n\n    // this (in 3.0) commits the deletions\n    air.close();\n    tir.close();\n\n    air = IndexReader.open(aprioriIndex, false);\n    tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    for (int d =0; d<air.maxDoc(); d++) {\n      assertEquals(air.isDeleted(d), tir.isDeleted(d));\n    }\n\n    air.close();\n    tir.close();\n\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","sourceOld":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testEquals(aprioriIndex,  testIndex);\n\n       // delete a few documents\n    IndexReader ir = IndexReader.open(aprioriIndex, false);\n    ir.deleteDocument(3);\n    ir.deleteDocument(8);\n    ir.close();\n\n    ir = testIndex.indexReaderFactory();\n    ir.deleteDocument(3);\n    ir.deleteDocument(8);\n    ir.close();\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEqualBehaviour(Directory,InstantiatedIndex).mjava","sourceNew":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n\n    testEquals(aprioriIndex,  testIndex);\n\n    // delete a few documents\n    IndexReader air = IndexReader.open(aprioriIndex, false);\n    InstantiatedIndexReader tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(3);\n    tir.deleteDocument(3);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(8);\n    tir.deleteDocument(8);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());    \n\n    // this (in 3.0) commits the deletions\n    air.close();\n    tir.close();\n\n    air = IndexReader.open(aprioriIndex, false);\n    tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    for (int d =0; d<air.maxDoc(); d++) {\n      assertEquals(air.isDeleted(d), tir.isDeleted(d));\n    }\n\n    air.close();\n    tir.close();\n\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","sourceOld":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEqualBehaviour(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n\n    testEquals(aprioriIndex,  testIndex);\n\n    // delete a few documents\n    IndexReader air = IndexReader.open(aprioriIndex, false);\n    InstantiatedIndexReader tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(3);\n    tir.deleteDocument(3);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    air.deleteDocument(8);\n    tir.deleteDocument(8);\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());    \n\n    // this (in 3.0) commits the deletions\n    air.close();\n    tir.close();\n\n    air = IndexReader.open(aprioriIndex, false);\n    tir = testIndex.indexReaderFactory();\n\n    assertEquals(air.isCurrent(), tir.isCurrent());\n    assertEquals(air.hasDeletions(), tir.hasDeletions());\n    assertEquals(air.maxDoc(), tir.maxDoc());\n    assertEquals(air.numDocs(), tir.numDocs());\n    assertEquals(air.numDeletedDocs(), tir.numDeletedDocs());\n\n    for (int d =0; d<air.maxDoc(); d++) {\n      assertEquals(air.isDeleted(d), tir.isDeleted(d));\n    }\n\n    air.close();\n    tir.close();\n\n\n    // make sure they still equal\n    testEquals(aprioriIndex,  testIndex);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c41356c8a19fd7493940c7a1d798ede2fe03ddf8":["4256bc1b3c94786287ccdfc751230374521843cf"],"317c809622a7a74e9257dd0eaf0b7c4dd7399bc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4256bc1b3c94786287ccdfc751230374521843cf":["317c809622a7a74e9257dd0eaf0b7c4dd7399bc7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c41356c8a19fd7493940c7a1d798ede2fe03ddf8"]},"commit2Childs":{"c41356c8a19fd7493940c7a1d798ede2fe03ddf8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"317c809622a7a74e9257dd0eaf0b7c4dd7399bc7":["4256bc1b3c94786287ccdfc751230374521843cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["317c809622a7a74e9257dd0eaf0b7c4dd7399bc7"],"4256bc1b3c94786287ccdfc751230374521843cf":["c41356c8a19fd7493940c7a1d798ede2fe03ddf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}