{"path":"src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper#test().mjava","commits":[{"id":"b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d","date":1187140494,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws IOException {\n    PositionBasedTermVectorMapper mapper = new PositionBasedTermVectorMapper();\n    \n    mapper.setExpectations(\"test\", tokens.length, true, true);\n    //Test single position\n    for (int i = 0; i < tokens.length; i++) {\n      String token = tokens[i];\n      mapper.map(token, 1, null, thePositions[i]);\n\n    }\n    Map map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 1, map.size() == 1);\n    Map positions = (Map) map.get(\"test\");\n    assertTrue(\"thePositions is null and it shouldn't be\", positions != null);\n    \n    assertTrue(\"thePositions Size: \" + positions.size() + \" is not: \" + numPositions, positions.size() == numPositions);\n    BitSet bits = new BitSet(numPositions);\n    for (Iterator iterator = positions.entrySet().iterator(); iterator.hasNext();) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      PositionBasedTermVectorMapper.TVPositionInfo info = (PositionBasedTermVectorMapper.TVPositionInfo) entry.getValue();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      int pos = ((Integer) entry.getKey()).intValue();\n      bits.set(pos);\n      assertTrue(info.getPosition() + \" does not equal: \" + pos, info.getPosition() == pos);\n      assertTrue(\"info.getOffsets() is null and it shouldn't be\", info.getOffsets() != null);\n      if (pos == 0)\n      {\n        assertTrue(\"info.getTerms() Size: \" + info.getTerms().size() + \" is not: \" + 2, info.getTerms().size() == 2);//need a test for multiple terms at one pos\n        assertTrue(\"info.getOffsets() Size: \" + info.getOffsets().size() + \" is not: \" + 2, info.getOffsets().size() == 2);\n      }\n      else\n      {\n        assertTrue(\"info.getTerms() Size: \" + info.getTerms().size() + \" is not: \" + 1, info.getTerms().size() == 1);//need a test for multiple terms at one pos\n        assertTrue(\"info.getOffsets() Size: \" + info.getOffsets().size() + \" is not: \" + 1, info.getOffsets().size() == 1);\n      }\n    }\n    assertTrue(\"Bits are not all on\", bits.cardinality() == numPositions);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper#test().mjava","sourceNew":"  public void test() throws IOException {\n    PositionBasedTermVectorMapper mapper = new PositionBasedTermVectorMapper();\n    \n    mapper.setExpectations(\"test\", tokens.length, true, true);\n    //Test single position\n    for (int i = 0; i < tokens.length; i++) {\n      String token = tokens[i];\n      mapper.map(token, 1, null, thePositions[i]);\n\n    }\n    Map<String,Map<Integer,PositionBasedTermVectorMapper.TVPositionInfo>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 1, map.size() == 1);\n    Map<Integer,PositionBasedTermVectorMapper.TVPositionInfo> positions = map.get(\"test\");\n    assertTrue(\"thePositions is null and it shouldn't be\", positions != null);\n    \n    assertTrue(\"thePositions Size: \" + positions.size() + \" is not: \" + numPositions, positions.size() == numPositions);\n    BitSet bits = new BitSet(numPositions);\n    for (Map.Entry<Integer,PositionBasedTermVectorMapper.TVPositionInfo> entry : positions.entrySet()) {\n    \n      PositionBasedTermVectorMapper.TVPositionInfo info = entry.getValue();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      int pos = entry.getKey().intValue();\n      bits.set(pos);\n      assertTrue(info.getPosition() + \" does not equal: \" + pos, info.getPosition() == pos);\n      assertTrue(\"info.getOffsets() is null and it shouldn't be\", info.getOffsets() != null);\n      if (pos == 0)\n      {\n        assertTrue(\"info.getTerms() Size: \" + info.getTerms().size() + \" is not: \" + 2, info.getTerms().size() == 2);//need a test for multiple terms at one pos\n        assertTrue(\"info.getOffsets() Size: \" + info.getOffsets().size() + \" is not: \" + 2, info.getOffsets().size() == 2);\n      }\n      else\n      {\n        assertTrue(\"info.getTerms() Size: \" + info.getTerms().size() + \" is not: \" + 1, info.getTerms().size() == 1);//need a test for multiple terms at one pos\n        assertTrue(\"info.getOffsets() Size: \" + info.getOffsets().size() + \" is not: \" + 1, info.getOffsets().size() == 1);\n      }\n    }\n    assertTrue(\"Bits are not all on\", bits.cardinality() == numPositions);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    PositionBasedTermVectorMapper mapper = new PositionBasedTermVectorMapper();\n    \n    mapper.setExpectations(\"test\", tokens.length, true, true);\n    //Test single position\n    for (int i = 0; i < tokens.length; i++) {\n      String token = tokens[i];\n      mapper.map(token, 1, null, thePositions[i]);\n\n    }\n    Map map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 1, map.size() == 1);\n    Map positions = (Map) map.get(\"test\");\n    assertTrue(\"thePositions is null and it shouldn't be\", positions != null);\n    \n    assertTrue(\"thePositions Size: \" + positions.size() + \" is not: \" + numPositions, positions.size() == numPositions);\n    BitSet bits = new BitSet(numPositions);\n    for (Iterator iterator = positions.entrySet().iterator(); iterator.hasNext();) {\n      Map.Entry entry = (Map.Entry) iterator.next();\n      PositionBasedTermVectorMapper.TVPositionInfo info = (PositionBasedTermVectorMapper.TVPositionInfo) entry.getValue();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      int pos = ((Integer) entry.getKey()).intValue();\n      bits.set(pos);\n      assertTrue(info.getPosition() + \" does not equal: \" + pos, info.getPosition() == pos);\n      assertTrue(\"info.getOffsets() is null and it shouldn't be\", info.getOffsets() != null);\n      if (pos == 0)\n      {\n        assertTrue(\"info.getTerms() Size: \" + info.getTerms().size() + \" is not: \" + 2, info.getTerms().size() == 2);//need a test for multiple terms at one pos\n        assertTrue(\"info.getOffsets() Size: \" + info.getOffsets().size() + \" is not: \" + 2, info.getOffsets().size() == 2);\n      }\n      else\n      {\n        assertTrue(\"info.getTerms() Size: \" + info.getTerms().size() + \" is not: \" + 1, info.getTerms().size() == 1);//need a test for multiple terms at one pos\n        assertTrue(\"info.getOffsets() Size: \" + info.getOffsets().size() + \" is not: \" + 1, info.getOffsets().size() == 1);\n      }\n    }\n    assertTrue(\"Bits are not all on\", bits.cardinality() == numPositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper#test().mjava","pathOld":"src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper#test().mjava","sourceNew":"  public void test() throws IOException {\n    PositionBasedTermVectorMapper mapper = new PositionBasedTermVectorMapper();\n    \n    mapper.setExpectations(\"test\", tokens.length, true, true);\n    //Test single position\n    for (int i = 0; i < tokens.length; i++) {\n      String token = tokens[i];\n      mapper.map(token, 1, null, thePositions[i]);\n\n    }\n    Map<String,Map<Integer,PositionBasedTermVectorMapper.TVPositionInfo>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 1, map.size() == 1);\n    Map<Integer,PositionBasedTermVectorMapper.TVPositionInfo> positions = map.get(\"test\");\n    assertTrue(\"thePositions is null and it shouldn't be\", positions != null);\n    \n    assertTrue(\"thePositions Size: \" + positions.size() + \" is not: \" + numPositions, positions.size() == numPositions);\n    BitSet bits = new BitSet(numPositions);\n    for (Map.Entry<Integer,PositionBasedTermVectorMapper.TVPositionInfo> entry : positions.entrySet()) {\n    \n      PositionBasedTermVectorMapper.TVPositionInfo info = entry.getValue();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      int pos = entry.getKey().intValue();\n      bits.set(pos);\n      assertTrue(info.getPosition() + \" does not equal: \" + pos, info.getPosition() == pos);\n      assertTrue(\"info.getOffsets() is null and it shouldn't be\", info.getOffsets() != null);\n      if (pos == 0)\n      {\n        assertTrue(\"info.getTerms() Size: \" + info.getTerms().size() + \" is not: \" + 2, info.getTerms().size() == 2);//need a test for multiple terms at one pos\n        assertTrue(\"info.getOffsets() Size: \" + info.getOffsets().size() + \" is not: \" + 2, info.getOffsets().size() == 2);\n      }\n      else\n      {\n        assertTrue(\"info.getTerms() Size: \" + info.getTerms().size() + \" is not: \" + 1, info.getTerms().size() == 1);//need a test for multiple terms at one pos\n        assertTrue(\"info.getOffsets() Size: \" + info.getOffsets().size() + \" is not: \" + 1, info.getOffsets().size() == 1);\n      }\n    }\n    assertTrue(\"Bits are not all on\", bits.cardinality() == numPositions);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    PositionBasedTermVectorMapper mapper = new PositionBasedTermVectorMapper();\n    \n    mapper.setExpectations(\"test\", tokens.length, true, true);\n    //Test single position\n    for (int i = 0; i < tokens.length; i++) {\n      String token = tokens[i];\n      mapper.map(token, 1, null, thePositions[i]);\n\n    }\n    Map<String,Map<Integer,PositionBasedTermVectorMapper.TVPositionInfo>> map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 1, map.size() == 1);\n    Map<Integer,PositionBasedTermVectorMapper.TVPositionInfo> positions = map.get(\"test\");\n    assertTrue(\"thePositions is null and it shouldn't be\", positions != null);\n    \n    assertTrue(\"thePositions Size: \" + positions.size() + \" is not: \" + numPositions, positions.size() == numPositions);\n    BitSet bits = new BitSet(numPositions);\n    for (Map.Entry<Integer,PositionBasedTermVectorMapper.TVPositionInfo> entry : positions.entrySet()) {\n    \n      PositionBasedTermVectorMapper.TVPositionInfo info = entry.getValue();\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      int pos = entry.getKey().intValue();\n      bits.set(pos);\n      assertTrue(info.getPosition() + \" does not equal: \" + pos, info.getPosition() == pos);\n      assertTrue(\"info.getOffsets() is null and it shouldn't be\", info.getOffsets() != null);\n      if (pos == 0)\n      {\n        assertTrue(\"info.getTerms() Size: \" + info.getTerms().size() + \" is not: \" + 2, info.getTerms().size() == 2);//need a test for multiple terms at one pos\n        assertTrue(\"info.getOffsets() Size: \" + info.getOffsets().size() + \" is not: \" + 2, info.getOffsets().size() == 2);\n      }\n      else\n      {\n        assertTrue(\"info.getTerms() Size: \" + info.getTerms().size() + \" is not: \" + 1, info.getTerms().size() == 1);//need a test for multiple terms at one pos\n        assertTrue(\"info.getOffsets() Size: \" + info.getOffsets().size() + \" is not: \" + 1, info.getOffsets().size() == 1);\n      }\n    }\n    assertTrue(\"Bits are not all on\", bits.cardinality() == numPositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d"],"b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}