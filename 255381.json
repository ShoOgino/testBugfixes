{"path":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testUpconfig().mjava","commits":[{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":0,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testUpconfig().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUpconfig() throws Exception {\n    // Use a full, explicit path for configset.\n    Path src = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\").resolve(\"conf\");\n    Path configSet = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\");\n    copyConfigUp(src, configSet, \"upconfig1\");\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(src, \"/configs/upconfig1\");\n\n    // Now just use a name in the configsets directory, do we find it?\n    configSet = TEST_PATH().resolve(\"configsets\");\n\n    String[] args = new String[]{\n        \"-confname\", \"upconfig2\",\n        \"-confdir\", \"cloud-subdirs\",\n        \"-zkHost\", zkAddr,\n        \"-configsetsDir\", configSet.toAbsolutePath().toString(),\n    };\n\n    SolrCLI.ConfigSetUploadTool tool = new SolrCLI.ConfigSetUploadTool();\n\n    int res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    assertEquals(\"tool should have returned 0 for success \", 0, res);\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(src, \"/configs/upconfig2\");\n\n    // do we barf on a bogus path?\n    args = new String[]{\n        \"-confname\", \"upconfig3\",\n        \"-confdir\", \"nothinghere\",\n        \"-zkHost\", zkAddr,\n        \"-configsetsDir\", configSet.toAbsolutePath().toString(),\n    };\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    assertTrue(\"tool should have returned non-zero for failure \", 0 != res);\n\n    String content = new String(zkClient.getData(\"/configs/upconfig2/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"Apache Software Foundation\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3100fa57deee363537557f82c2b38812a2576acc","date":1467500858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testUpconfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testUpconfig().mjava","sourceNew":"  @Test\n  public void testUpconfig() throws Exception {\n    // Use a full, explicit path for configset.\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    copyConfigUp(configSet, \"cloud-subdirs\", \"upconfig1\");\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/configs/upconfig1\");\n\n    // Now just use a name in the configsets directory, do we find it?\n    configSet = TEST_PATH().resolve(\"configsets\");\n\n    String[] args = new String[]{\n        \"-confname\", \"upconfig2\",\n        \"-confdir\", \"cloud-subdirs\",\n        \"-zkHost\", zkAddr,\n        \"-configsetsDir\", configSet.toAbsolutePath().toString(),\n    };\n\n    SolrCLI.ConfigSetUploadTool tool = new SolrCLI.ConfigSetUploadTool();\n\n    int res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    assertEquals(\"tool should have returned 0 for success \", 0, res);\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/configs/upconfig2\");\n\n    // do we barf on a bogus path?\n    args = new String[]{\n        \"-confname\", \"upconfig3\",\n        \"-confdir\", \"nothinghere\",\n        \"-zkHost\", zkAddr,\n        \"-configsetsDir\", configSet.toAbsolutePath().toString(),\n    };\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    assertTrue(\"tool should have returned non-zero for failure \", 0 != res);\n\n    String content = new String(zkClient.getData(\"/configs/upconfig2/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"Apache Software Foundation\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testUpconfig() throws Exception {\n    // Use a full, explicit path for configset.\n    Path src = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\").resolve(\"conf\");\n    Path configSet = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\");\n    copyConfigUp(src, configSet, \"upconfig1\");\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(src, \"/configs/upconfig1\");\n\n    // Now just use a name in the configsets directory, do we find it?\n    configSet = TEST_PATH().resolve(\"configsets\");\n\n    String[] args = new String[]{\n        \"-confname\", \"upconfig2\",\n        \"-confdir\", \"cloud-subdirs\",\n        \"-zkHost\", zkAddr,\n        \"-configsetsDir\", configSet.toAbsolutePath().toString(),\n    };\n\n    SolrCLI.ConfigSetUploadTool tool = new SolrCLI.ConfigSetUploadTool();\n\n    int res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    assertEquals(\"tool should have returned 0 for success \", 0, res);\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(src, \"/configs/upconfig2\");\n\n    // do we barf on a bogus path?\n    args = new String[]{\n        \"-confname\", \"upconfig3\",\n        \"-confdir\", \"nothinghere\",\n        \"-zkHost\", zkAddr,\n        \"-configsetsDir\", configSet.toAbsolutePath().toString(),\n    };\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    assertTrue(\"tool should have returned non-zero for failure \", 0 != res);\n\n    String content = new String(zkClient.getData(\"/configs/upconfig2/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"Apache Software Foundation\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testUpconfig().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUpconfig() throws Exception {\n    // Use a full, explicit path for configset.\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    copyConfigUp(configSet, \"cloud-subdirs\", \"upconfig1\");\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/configs/upconfig1\");\n\n    // Now just use a name in the configsets directory, do we find it?\n    configSet = TEST_PATH().resolve(\"configsets\");\n\n    String[] args = new String[]{\n        \"-confname\", \"upconfig2\",\n        \"-confdir\", \"cloud-subdirs\",\n        \"-zkHost\", zkAddr,\n        \"-configsetsDir\", configSet.toAbsolutePath().toString(),\n    };\n\n    SolrCLI.ConfigSetUploadTool tool = new SolrCLI.ConfigSetUploadTool();\n\n    int res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    assertEquals(\"tool should have returned 0 for success \", 0, res);\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/configs/upconfig2\");\n\n    // do we barf on a bogus path?\n    args = new String[]{\n        \"-confname\", \"upconfig3\",\n        \"-confdir\", \"nothinghere\",\n        \"-zkHost\", zkAddr,\n        \"-configsetsDir\", configSet.toAbsolutePath().toString(),\n    };\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    assertTrue(\"tool should have returned non-zero for failure \", 0 != res);\n\n    String content = new String(zkClient.getData(\"/configs/upconfig2/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"Apache Software Foundation\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4949836c6e83246ddba8997472e3333f40986c8c","date":1560293762,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testUpconfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testUpconfig().mjava","sourceNew":"  @Test\n  public void testUpconfig() throws Exception {\n    // Use a full, explicit path for configset.\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    AbstractDistribZkTestBase.copyConfigUp(configSet, \"cloud-subdirs\", \"upconfig1\", zkAddr);\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/configs/upconfig1\");\n\n    // Now just use a name in the configsets directory, do we find it?\n    configSet = TEST_PATH().resolve(\"configsets\");\n\n    String[] args = new String[]{\n        \"-confname\", \"upconfig2\",\n        \"-confdir\", \"cloud-subdirs\",\n        \"-zkHost\", zkAddr,\n        \"-configsetsDir\", configSet.toAbsolutePath().toString(),\n    };\n\n    SolrCLI.ConfigSetUploadTool tool = new SolrCLI.ConfigSetUploadTool();\n\n    int res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    assertEquals(\"tool should have returned 0 for success \", 0, res);\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/configs/upconfig2\");\n\n    // do we barf on a bogus path?\n    args = new String[]{\n        \"-confname\", \"upconfig3\",\n        \"-confdir\", \"nothinghere\",\n        \"-zkHost\", zkAddr,\n        \"-configsetsDir\", configSet.toAbsolutePath().toString(),\n    };\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    assertTrue(\"tool should have returned non-zero for failure \", 0 != res);\n\n    String content = new String(zkClient.getData(\"/configs/upconfig2/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"Apache Software Foundation\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testUpconfig() throws Exception {\n    // Use a full, explicit path for configset.\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    copyConfigUp(configSet, \"cloud-subdirs\", \"upconfig1\");\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/configs/upconfig1\");\n\n    // Now just use a name in the configsets directory, do we find it?\n    configSet = TEST_PATH().resolve(\"configsets\");\n\n    String[] args = new String[]{\n        \"-confname\", \"upconfig2\",\n        \"-confdir\", \"cloud-subdirs\",\n        \"-zkHost\", zkAddr,\n        \"-configsetsDir\", configSet.toAbsolutePath().toString(),\n    };\n\n    SolrCLI.ConfigSetUploadTool tool = new SolrCLI.ConfigSetUploadTool();\n\n    int res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    assertEquals(\"tool should have returned 0 for success \", 0, res);\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/configs/upconfig2\");\n\n    // do we barf on a bogus path?\n    args = new String[]{\n        \"-confname\", \"upconfig3\",\n        \"-confdir\", \"nothinghere\",\n        \"-zkHost\", zkAddr,\n        \"-configsetsDir\", configSet.toAbsolutePath().toString(),\n    };\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    assertTrue(\"tool should have returned non-zero for failure \", 0 != res);\n\n    String content = new String(zkClient.getData(\"/configs/upconfig2/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"There should be content in the node! \", content.contains(\"Apache Software Foundation\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3100fa57deee363537557f82c2b38812a2576acc":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4949836c6e83246ddba8997472e3333f40986c8c":["3100fa57deee363537557f82c2b38812a2576acc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3100fa57deee363537557f82c2b38812a2576acc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4949836c6e83246ddba8997472e3333f40986c8c"]},"commit2Childs":{"3100fa57deee363537557f82c2b38812a2576acc":["4949836c6e83246ddba8997472e3333f40986c8c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["3100fa57deee363537557f82c2b38812a2576acc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4949836c6e83246ddba8997472e3333f40986c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}