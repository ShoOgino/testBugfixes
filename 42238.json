{"path":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testInit().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testInit().mjava","pathOld":"/dev/null","sourceNew":"  public void testInit() throws Exception {\n    SolrCore core = h.getCore();\n    SpellCheckComponent scc = new SpellCheckComponent();\n    NamedList args = new NamedList();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    spellchecker.add(\"name\", \"default\");\n    spellchecker.add(\"field\", \"lowerfilt\");\n    spellchecker.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", spellchecker);\n    NamedList altSC = new NamedList();\n    altSC.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    altSC.add(\"name\", \"alternate\");\n    altSC.add(\"field\", \"lowerfilt\");\n    altSC.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", altSC);\n    args.add(\"queryAnalyzerFieldType\", \"lowerfilt\");\n    NamedList defaults = new NamedList();\n    defaults.add(SpellCheckComponent.SPELLCHECK_COLLATE, true);\n    defaults.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, false);\n    defaults.add(SpellCheckComponent.SPELLCHECK_COUNT, 2);\n    args.add(\"defaults\", defaults);\n    scc.init(args);\n    scc.inform(core);\n    //hmm, not sure what to assert here...\n\n    //add the sc again and then init again, we should get an exception\n    args.add(\"spellchecker\", spellchecker);\n    scc = new SpellCheckComponent();\n    scc.init(args);\n    try {\n      scc.inform(core);\n      assertTrue(false);\n    } catch (Exception e) {\n\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testInit().mjava","sourceNew":null,"sourceOld":"  public void testInit() throws Exception {\n    SolrCore core = h.getCore();\n    SpellCheckComponent scc = new SpellCheckComponent();\n    NamedList args = new NamedList();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    spellchecker.add(\"name\", \"default\");\n    spellchecker.add(\"field\", \"lowerfilt\");\n    spellchecker.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", spellchecker);\n    NamedList altSC = new NamedList();\n    altSC.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    altSC.add(\"name\", \"alternate\");\n    altSC.add(\"field\", \"lowerfilt\");\n    altSC.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", altSC);\n    args.add(\"queryAnalyzerFieldType\", \"lowerfilt\");\n    NamedList defaults = new NamedList();\n    defaults.add(SpellCheckComponent.SPELLCHECK_COLLATE, true);\n    defaults.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, false);\n    defaults.add(SpellCheckComponent.SPELLCHECK_COUNT, 2);\n    args.add(\"defaults\", defaults);\n    scc.init(args);\n    scc.inform(core);\n    //hmm, not sure what to assert here...\n\n    //add the sc again and then init again, we should get an exception\n    args.add(\"spellchecker\", spellchecker);\n    scc = new SpellCheckComponent();\n    scc.init(args);\n    try {\n      scc.inform(core);\n      assertTrue(false);\n    } catch (Exception e) {\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testInit().mjava","pathOld":"src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testInit().mjava","sourceNew":"  public void testInit() throws Exception {\n    SolrCore core = h.getCore();\n    SpellCheckComponent scc = new SpellCheckComponent();\n    NamedList args = new NamedList();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    spellchecker.add(\"name\", \"default\");\n    spellchecker.add(\"field\", \"lowerfilt\");\n    spellchecker.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", spellchecker);\n    NamedList altSC = new NamedList();\n    altSC.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    altSC.add(\"name\", \"alternate\");\n    altSC.add(\"field\", \"lowerfilt\");\n    altSC.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", altSC);\n    args.add(\"queryAnalyzerFieldType\", \"lowerfilt\");\n    NamedList defaults = new NamedList();\n    defaults.add(SpellCheckComponent.SPELLCHECK_COLLATE, true);\n    defaults.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, false);\n    defaults.add(SpellCheckComponent.SPELLCHECK_COUNT, 2);\n    args.add(\"defaults\", defaults);\n    scc.init(args);\n    scc.inform(core);\n    //hmm, not sure what to assert here...\n\n    //add the sc again and then init again, we should get an exception\n    args.add(\"spellchecker\", spellchecker);\n    scc = new SpellCheckComponent();\n    scc.init(args);\n    try {\n      scc.inform(core);\n      assertTrue(false);\n    } catch (Exception e) {\n\n    }\n\n\n  }\n\n","sourceOld":"  public void testInit() throws Exception {\n    SolrCore core = h.getCore();\n    SpellCheckComponent scc = new SpellCheckComponent();\n    NamedList args = new NamedList();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    spellchecker.add(\"name\", \"default\");\n    spellchecker.add(\"field\", \"lowerfilt\");\n    spellchecker.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", spellchecker);\n    NamedList altSC = new NamedList();\n    altSC.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    altSC.add(\"name\", \"alternate\");\n    altSC.add(\"field\", \"lowerfilt\");\n    altSC.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", altSC);\n    args.add(\"queryAnalyzerFieldType\", \"lowerfilt\");\n    NamedList defaults = new NamedList();\n    defaults.add(SpellCheckComponent.SPELLCHECK_COLLATE, true);\n    defaults.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, false);\n    defaults.add(SpellCheckComponent.SPELLCHECK_COUNT, 2);\n    args.add(\"defaults\", defaults);\n    scc.init(args);\n    scc.inform(core);\n    //hmm, not sure what to assert here...\n\n    //add the sc again and then init again, we should get an exception\n    args.add(\"spellchecker\", spellchecker);\n    scc = new SpellCheckComponent();\n    scc.init(args);\n    try {\n      scc.inform(core);\n      assertTrue(false);\n    } catch (Exception e) {\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testInit().mjava","pathOld":"/dev/null","sourceNew":"  public void testInit() throws Exception {\n    SolrCore core = h.getCore();\n    SpellCheckComponent scc = new SpellCheckComponent();\n    NamedList args = new NamedList();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    spellchecker.add(\"name\", \"default\");\n    spellchecker.add(\"field\", \"lowerfilt\");\n    spellchecker.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", spellchecker);\n    NamedList altSC = new NamedList();\n    altSC.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    altSC.add(\"name\", \"alternate\");\n    altSC.add(\"field\", \"lowerfilt\");\n    altSC.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", altSC);\n    args.add(\"queryAnalyzerFieldType\", \"lowerfilt\");\n    NamedList defaults = new NamedList();\n    defaults.add(SpellCheckComponent.SPELLCHECK_COLLATE, true);\n    defaults.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, false);\n    defaults.add(SpellCheckComponent.SPELLCHECK_COUNT, 2);\n    args.add(\"defaults\", defaults);\n    scc.init(args);\n    scc.inform(core);\n    //hmm, not sure what to assert here...\n\n    //add the sc again and then init again, we should get an exception\n    args.add(\"spellchecker\", spellchecker);\n    scc = new SpellCheckComponent();\n    scc.init(args);\n    try {\n      scc.inform(core);\n      assertTrue(false);\n    } catch (Exception e) {\n\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d94d4f1c6cd11a42dfb22d21e36fa6b582ee09c3","date":1269092670,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testInit().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testInit().mjava","sourceNew":"  @Test\n  public void testInit() throws Exception {\n    SolrCore core = h.getCore();\n    SpellCheckComponent scc = new SpellCheckComponent();\n    NamedList args = new NamedList();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    spellchecker.add(\"name\", \"default\");\n    spellchecker.add(\"field\", \"lowerfilt\");\n    spellchecker.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", spellchecker);\n    NamedList altSC = new NamedList();\n    altSC.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    altSC.add(\"name\", \"alternate\");\n    altSC.add(\"field\", \"lowerfilt\");\n    altSC.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", altSC);\n    args.add(\"queryAnalyzerFieldType\", \"lowerfilt\");\n    NamedList defaults = new NamedList();\n    defaults.add(SpellCheckComponent.SPELLCHECK_COLLATE, true);\n    defaults.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, false);\n    defaults.add(SpellCheckComponent.SPELLCHECK_COUNT, 2);\n    args.add(\"defaults\", defaults);\n    scc.init(args);\n    scc.inform(core);\n    //hmm, not sure what to assert here...\n\n    //add the sc again and then init again, we should get an exception\n    args.add(\"spellchecker\", spellchecker);\n    scc = new SpellCheckComponent();\n    scc.init(args);\n    try {\n      scc.inform(core);\n      assertTrue(false);\n    } catch (Exception e) {\n\n    }\n\n\n  }\n\n","sourceOld":"  public void testInit() throws Exception {\n    SolrCore core = h.getCore();\n    SpellCheckComponent scc = new SpellCheckComponent();\n    NamedList args = new NamedList();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    spellchecker.add(\"name\", \"default\");\n    spellchecker.add(\"field\", \"lowerfilt\");\n    spellchecker.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", spellchecker);\n    NamedList altSC = new NamedList();\n    altSC.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    altSC.add(\"name\", \"alternate\");\n    altSC.add(\"field\", \"lowerfilt\");\n    altSC.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", altSC);\n    args.add(\"queryAnalyzerFieldType\", \"lowerfilt\");\n    NamedList defaults = new NamedList();\n    defaults.add(SpellCheckComponent.SPELLCHECK_COLLATE, true);\n    defaults.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, false);\n    defaults.add(SpellCheckComponent.SPELLCHECK_COUNT, 2);\n    args.add(\"defaults\", defaults);\n    scc.init(args);\n    scc.inform(core);\n    //hmm, not sure what to assert here...\n\n    //add the sc again and then init again, we should get an exception\n    args.add(\"spellchecker\", spellchecker);\n    scc = new SpellCheckComponent();\n    scc.init(args);\n    try {\n      scc.inform(core);\n      assertTrue(false);\n    } catch (Exception e) {\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f176b352a988eb72e2af3a739c6de8bf24808ce","date":1287101027,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testInit().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testInit() throws Exception {\n    SolrCore core = h.getCore();\n    SpellCheckComponent scc = new SpellCheckComponent();\n    NamedList args = new NamedList();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    spellchecker.add(\"name\", \"default\");\n    spellchecker.add(\"field\", \"lowerfilt\");\n    spellchecker.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", spellchecker);\n    NamedList altSC = new NamedList();\n    altSC.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    altSC.add(\"name\", \"alternate\");\n    altSC.add(\"field\", \"lowerfilt\");\n    altSC.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", altSC);\n    args.add(\"queryAnalyzerFieldType\", \"lowerfilt\");\n    NamedList defaults = new NamedList();\n    defaults.add(SpellCheckComponent.SPELLCHECK_COLLATE, true);\n    defaults.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, false);\n    defaults.add(SpellCheckComponent.SPELLCHECK_COUNT, 2);\n    args.add(\"defaults\", defaults);\n    scc.init(args);\n    scc.inform(core);\n    //hmm, not sure what to assert here...\n\n    //add the sc again and then init again, we should get an exception\n    args.add(\"spellchecker\", spellchecker);\n    scc = new SpellCheckComponent();\n    scc.init(args);\n    try {\n      scc.inform(core);\n      assertTrue(false);\n    } catch (Exception e) {\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testInit().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testInit() throws Exception {\n    SolrCore core = h.getCore();\n    SpellCheckComponent scc = new SpellCheckComponent();\n    NamedList args = new NamedList();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    spellchecker.add(\"name\", \"default\");\n    spellchecker.add(\"field\", \"lowerfilt\");\n    spellchecker.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", spellchecker);\n    NamedList altSC = new NamedList();\n    altSC.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    altSC.add(\"name\", \"alternate\");\n    altSC.add(\"field\", \"lowerfilt\");\n    altSC.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", altSC);\n    args.add(\"queryAnalyzerFieldType\", \"lowerfilt\");\n    NamedList defaults = new NamedList();\n    defaults.add(SpellCheckComponent.SPELLCHECK_COLLATE, true);\n    defaults.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, false);\n    defaults.add(SpellCheckComponent.SPELLCHECK_COUNT, 2);\n    args.add(\"defaults\", defaults);\n    scc.init(args);\n    scc.inform(core);\n    //hmm, not sure what to assert here...\n\n    //add the sc again and then init again, we should get an exception\n    args.add(\"spellchecker\", spellchecker);\n    scc = new SpellCheckComponent();\n    scc.init(args);\n    try {\n      scc.inform(core);\n      assertTrue(false);\n    } catch (Exception e) {\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testInit().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testInit() throws Exception {\n    SolrCore core = h.getCore();\n    SpellCheckComponent scc = new SpellCheckComponent();\n    NamedList args = new NamedList();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    spellchecker.add(\"name\", \"default\");\n    spellchecker.add(\"field\", \"lowerfilt\");\n    spellchecker.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", spellchecker);\n    NamedList altSC = new NamedList();\n    altSC.add(\"classname\", IndexBasedSpellChecker.class.getName());\n    altSC.add(\"name\", \"alternate\");\n    altSC.add(\"field\", \"lowerfilt\");\n    altSC.add(\"spellcheckIndexDir\", \"./spellchecker\");\n\n    args.add(\"spellchecker\", altSC);\n    args.add(\"queryAnalyzerFieldType\", \"lowerfilt\");\n    NamedList defaults = new NamedList();\n    defaults.add(SpellCheckComponent.SPELLCHECK_COLLATE, true);\n    defaults.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, false);\n    defaults.add(SpellCheckComponent.SPELLCHECK_COUNT, 2);\n    args.add(\"defaults\", defaults);\n    scc.init(args);\n    scc.inform(core);\n    //hmm, not sure what to assert here...\n\n    //add the sc again and then init again, we should get an exception\n    args.add(\"spellchecker\", spellchecker);\n    scc = new SpellCheckComponent();\n    scc.init(args);\n    try {\n      scc.inform(core);\n      assertTrue(false);\n    } catch (Exception e) {\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"4f176b352a988eb72e2af3a739c6de8bf24808ce":["d94d4f1c6cd11a42dfb22d21e36fa6b582ee09c3"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d94d4f1c6cd11a42dfb22d21e36fa6b582ee09c3":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d94d4f1c6cd11a42dfb22d21e36fa6b582ee09c3","4f176b352a988eb72e2af3a739c6de8bf24808ce"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["d94d4f1c6cd11a42dfb22d21e36fa6b582ee09c3","4f176b352a988eb72e2af3a739c6de8bf24808ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4f176b352a988eb72e2af3a739c6de8bf24808ce"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["d94d4f1c6cd11a42dfb22d21e36fa6b582ee09c3"],"4f176b352a988eb72e2af3a739c6de8bf24808ce":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"d94d4f1c6cd11a42dfb22d21e36fa6b582ee09c3":["4f176b352a988eb72e2af3a739c6de8bf24808ce","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}