{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.TermsWriter#finishTerm(BytesRef,BlockTermState).mjava","commits":[{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.TermsWriter#finishTerm(BytesRef,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    public void finishTerm(BytesRef text, BlockTermState state) throws IOException {\n      // write term meta data into fst\n      final FSTTermOutputs.TermData meta = new FSTTermOutputs.TermData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq;\n      meta.totalTermFreq = state.totalTermFreq;\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      final int bytesSize = (int)metaWriter.getFilePointer();\n      if (bytesSize > 0) {\n        meta.bytes = new byte[bytesSize];\n        metaWriter.writeTo(meta.bytes, 0);\n        metaWriter.reset();\n      }\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n      // write term meta data into fst\n      final BlockTermState state = postingsWriter.newTermState();\n      final FSTTermOutputs.TermData meta = new FSTTermOutputs.TermData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq = stats.docFreq;\n      meta.totalTermFreq = state.totalTermFreq = stats.totalTermFreq;\n      postingsWriter.finishTerm(state);\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      final int bytesSize = (int)metaWriter.getFilePointer();\n      if (bytesSize > 0) {\n        meta.bytes = new byte[bytesSize];\n        metaWriter.writeTo(meta.bytes, 0);\n        metaWriter.reset();\n      }\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.TermsWriter#finishTerm(BytesRef,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.TermsWriter#finishTerm(BytesRef,BlockTermState).mjava","sourceNew":"    public void finishTerm(BytesRef text, BlockTermState state) throws IOException {\n      // write term meta data into fst\n      final FSTTermOutputs.TermData meta = new FSTTermOutputs.TermData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq;\n      meta.totalTermFreq = state.totalTermFreq;\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      if (metaWriter.size() > 0) {\n        meta.bytes = metaWriter.toArrayCopy();\n        metaWriter.reset();\n      }\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","sourceOld":"    public void finishTerm(BytesRef text, BlockTermState state) throws IOException {\n      // write term meta data into fst\n      final FSTTermOutputs.TermData meta = new FSTTermOutputs.TermData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq;\n      meta.totalTermFreq = state.totalTermFreq;\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      final int bytesSize = (int)metaWriter.getFilePointer();\n      if (bytesSize > 0) {\n        meta.bytes = new byte[bytesSize];\n        metaWriter.writeTo(meta.bytes, 0);\n        metaWriter.reset();\n      }\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.TermsWriter#finishTerm(BytesRef,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.TermsWriter#finishTerm(BytesRef,BlockTermState).mjava","sourceNew":"    public void finishTerm(BytesRef text, BlockTermState state) throws IOException {\n      // write term meta data into fst\n      final FSTTermOutputs.TermData meta = new FSTTermOutputs.TermData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq;\n      meta.totalTermFreq = state.totalTermFreq;\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      if (metaWriter.size() > 0) {\n        meta.bytes = metaWriter.toArrayCopy();\n        metaWriter.reset();\n      }\n      fstCompiler.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","sourceOld":"    public void finishTerm(BytesRef text, BlockTermState state) throws IOException {\n      // write term meta data into fst\n      final FSTTermOutputs.TermData meta = new FSTTermOutputs.TermData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq;\n      meta.totalTermFreq = state.totalTermFreq;\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      if (metaWriter.size() > 0) {\n        meta.bytes = metaWriter.toArrayCopy();\n        metaWriter.reset();\n      }\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.TermsWriter#finishTerm(BytesRef,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.TermsWriter#finishTerm(BytesRef,BlockTermState).mjava","sourceNew":"    public void finishTerm(BytesRef text, BlockTermState state) throws IOException {\n      // write term meta data into fst\n      final FSTTermOutputs.TermData meta = new FSTTermOutputs.TermData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq;\n      meta.totalTermFreq = state.totalTermFreq;\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      if (metaWriter.size() > 0) {\n        meta.bytes = metaWriter.toArrayCopy();\n        metaWriter.reset();\n      }\n      fstCompiler.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","sourceOld":"    public void finishTerm(BytesRef text, BlockTermState state) throws IOException {\n      // write term meta data into fst\n      final FSTTermOutputs.TermData meta = new FSTTermOutputs.TermData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq;\n      meta.totalTermFreq = state.totalTermFreq;\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      if (metaWriter.size() > 0) {\n        meta.bytes = metaWriter.toArrayCopy();\n        metaWriter.reset();\n      }\n      builder.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.TermsWriter#finishTerm(BytesRef,BlockTermState).mjava","sourceNew":null,"sourceOld":"    public void finishTerm(BytesRef text, BlockTermState state) throws IOException {\n      // write term meta data into fst\n      final FSTTermOutputs.TermData meta = new FSTTermOutputs.TermData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq;\n      meta.totalTermFreq = state.totalTermFreq;\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      if (metaWriter.size() > 0) {\n        meta.bytes = metaWriter.toArrayCopy();\n        metaWriter.reset();\n      }\n      fstCompiler.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.TermsWriter#finishTerm(BytesRef,BlockTermState).mjava","pathOld":"/dev/null","sourceNew":"    public void finishTerm(BytesRef text, BlockTermState state) throws IOException {\n      // write term meta data into fst\n      final FSTTermOutputs.TermData meta = new FSTTermOutputs.TermData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq;\n      meta.totalTermFreq = state.totalTermFreq;\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      if (metaWriter.size() > 0) {\n        meta.bytes = metaWriter.toArrayCopy();\n        metaWriter.reset();\n      }\n      fstCompiler.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.TermsWriter#finishTerm(BytesRef,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermsWriter.TermsWriter#finishTerm(BytesRef,BlockTermState).mjava","sourceNew":"    public void finishTerm(BytesRef text, BlockTermState state) throws IOException {\n      // write term meta data into fst\n      final FSTTermOutputs.TermData meta = new FSTTermOutputs.TermData();\n      meta.bytes = null;\n      meta.docFreq = state.docFreq;\n      meta.totalTermFreq = state.totalTermFreq;\n      postingsWriter.encodeTerm(metaWriter, fieldInfo, state, true);\n      if (metaWriter.size() > 0) {\n        meta.bytes = metaWriter.toArrayCopy();\n        metaWriter.reset();\n      }\n      fstCompiler.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","sourceOld":"    public void finishTerm(BytesRef text, BlockTermState state) throws IOException {\n      // write term meta data into fst\n      final FSTTermOutputs.TermData meta = new FSTTermOutputs.TermData();\n      meta.longs = new long[longsSize];\n      meta.bytes = null;\n      meta.docFreq = state.docFreq;\n      meta.totalTermFreq = state.totalTermFreq;\n      postingsWriter.encodeTerm(meta.longs, metaWriter, fieldInfo, state, true);\n      if (metaWriter.size() > 0) {\n        meta.bytes = metaWriter.toArrayCopy();\n        metaWriter.reset();\n      }\n      fstCompiler.add(Util.toIntsRef(text, scratchTerm), meta);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["409da428f28953cf35fddd5c9ff5c7e4f5439863","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["cb77022ef17ff655c519a3f6ecd393747ac88bcf","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}