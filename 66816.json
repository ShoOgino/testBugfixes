{"path":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendDependencyXml(StringBuilder,String,String,String,String,boolean,boolean,String,Collection[String]).mjava","commits":[{"id":"71b83dcf02fe2854488bc83d70dee29c5baa7e5c","date":1383232808,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendDependencyXml(StringBuilder,String,String,String,String,boolean,boolean,String,Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"/**\n * Appends a &lt;dependency&gt; snippet to the given builder.\n */\n  private void appendDependencyXml(StringBuilder builder, String groupId, String artifactId, \n                                   String indent, String version, boolean isTestDependency, \n                                   boolean isOptional, String classifier, Collection<String> exclusions) {\n    builder.append(indent).append(\"<dependency>\\n\");\n    builder.append(indent).append(\"  <groupId>\").append(groupId).append(\"</groupId>\\n\");\n    builder.append(indent).append(\"  <artifactId>\").append(artifactId).append(\"</artifactId>\\n\");\n    if (null != version) {\n      builder.append(indent).append(\"  <version>\").append(version).append(\"</version>\\n\");\n    }\n    if (isTestDependency) {\n      builder.append(indent).append(\"  <scope>test</scope>\\n\");\n    }\n    if (isOptional) {\n      builder.append(indent).append(\"  <optional>true</optional>\\n\");\n    }\n    if (null != classifier) {\n      builder.append(indent).append(\"  <classifier>\").append(classifier).append(\"</classifier>\\n\");\n    }\n    if (null != exclusions && ! exclusions.isEmpty()) {\n      builder.append(indent).append(\"  <exclusions>\\n\");\n      for (String dependency : exclusions) {\n        int splitPos = dependency.indexOf(':');\n        String excludedGroupId = dependency.substring(0, splitPos);\n        String excludedArtifactId = dependency.substring(splitPos + 1);\n        builder.append(indent).append(\"    <exclusion>\\n\");\n        builder.append(indent).append(\"      <groupId>\").append(excludedGroupId).append(\"</groupId>\\n\");\n        builder.append(indent).append(\"      <artifactId>\").append(excludedArtifactId).append(\"</artifactId>\\n\");\n        builder.append(indent).append(\"    </exclusion>\\n\");\n      }\n      builder.append(indent).append(\"  </exclusions>\\n\");\n    }\n    builder.append(indent).append(\"</dependency>\\n\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92f3b9469d18ca27d27a92c42d00c9eed2ad5228","date":1545316216,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendDependencyXml(StringBuilder,String,String,String,String,boolean,boolean,String,Collection[String]).mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendDependencyXml(StringBuilder,String,String,String,String,boolean,boolean,String,Collection[String]).mjava","sourceNew":"/**\n * Appends a &lt;dependency&gt; snippet to the given builder.\n */\n  private void appendDependencyXml(StringBuilder builder, String groupId, String artifactId, \n                                   String indent, String version, boolean isTestDependency, \n                                   boolean isOptional, String classifier, Collection<String> exclusions) {\n    builder.append(indent).append(\"<dependency>\\n\");\n    builder.append(indent).append(\"  <groupId>\").append(groupId).append(\"</groupId>\\n\");\n    builder.append(indent).append(\"  <artifactId>\").append(artifactId).append(\"</artifactId>\\n\");\n    if (null != version) {\n      builder.append(indent).append(\"  <version>\").append(version).append(\"</version>\\n\");\n    }\n    if (isTestDependency) {\n      builder.append(indent).append(\"  <scope>test</scope>\\n\");\n    }\n    if (isOptional) {\n      builder.append(indent).append(\"  <optional>true</optional>\\n\");\n    }\n    if (null != classifier) {\n      builder.append(indent).append(\"  <classifier>\").append(classifier).append(\"</classifier>\\n\");\n    }\n    if ( ! modulesWithTransitiveDependencies.contains(artifactId) && null != exclusions && ! exclusions.isEmpty()) {\n      builder.append(indent).append(\"  <exclusions>\\n\");\n      for (String dependency : exclusions) {\n        int splitPos = dependency.indexOf(':');\n        String excludedGroupId = dependency.substring(0, splitPos);\n        String excludedArtifactId = dependency.substring(splitPos + 1);\n        builder.append(indent).append(\"    <exclusion>\\n\");\n        builder.append(indent).append(\"      <groupId>\").append(excludedGroupId).append(\"</groupId>\\n\");\n        builder.append(indent).append(\"      <artifactId>\").append(excludedArtifactId).append(\"</artifactId>\\n\");\n        builder.append(indent).append(\"    </exclusion>\\n\");\n      }\n      builder.append(indent).append(\"  </exclusions>\\n\");\n    }\n    builder.append(indent).append(\"</dependency>\\n\");\n  }\n\n","sourceOld":"/**\n * Appends a &lt;dependency&gt; snippet to the given builder.\n */\n  private void appendDependencyXml(StringBuilder builder, String groupId, String artifactId, \n                                   String indent, String version, boolean isTestDependency, \n                                   boolean isOptional, String classifier, Collection<String> exclusions) {\n    builder.append(indent).append(\"<dependency>\\n\");\n    builder.append(indent).append(\"  <groupId>\").append(groupId).append(\"</groupId>\\n\");\n    builder.append(indent).append(\"  <artifactId>\").append(artifactId).append(\"</artifactId>\\n\");\n    if (null != version) {\n      builder.append(indent).append(\"  <version>\").append(version).append(\"</version>\\n\");\n    }\n    if (isTestDependency) {\n      builder.append(indent).append(\"  <scope>test</scope>\\n\");\n    }\n    if (isOptional) {\n      builder.append(indent).append(\"  <optional>true</optional>\\n\");\n    }\n    if (null != classifier) {\n      builder.append(indent).append(\"  <classifier>\").append(classifier).append(\"</classifier>\\n\");\n    }\n    if (null != exclusions && ! exclusions.isEmpty()) {\n      builder.append(indent).append(\"  <exclusions>\\n\");\n      for (String dependency : exclusions) {\n        int splitPos = dependency.indexOf(':');\n        String excludedGroupId = dependency.substring(0, splitPos);\n        String excludedArtifactId = dependency.substring(splitPos + 1);\n        builder.append(indent).append(\"    <exclusion>\\n\");\n        builder.append(indent).append(\"      <groupId>\").append(excludedGroupId).append(\"</groupId>\\n\");\n        builder.append(indent).append(\"      <artifactId>\").append(excludedArtifactId).append(\"</artifactId>\\n\");\n        builder.append(indent).append(\"    </exclusion>\\n\");\n      }\n      builder.append(indent).append(\"  </exclusions>\\n\");\n    }\n    builder.append(indent).append(\"</dependency>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e025cf1c07150c8db28879d785db17eb3a66ca9f","date":1598788864,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#appendDependencyXml(StringBuilder,String,String,String,String,boolean,boolean,String,Collection[String]).mjava","sourceNew":null,"sourceOld":"/**\n * Appends a &lt;dependency&gt; snippet to the given builder.\n */\n  private void appendDependencyXml(StringBuilder builder, String groupId, String artifactId, \n                                   String indent, String version, boolean isTestDependency, \n                                   boolean isOptional, String classifier, Collection<String> exclusions) {\n    builder.append(indent).append(\"<dependency>\\n\");\n    builder.append(indent).append(\"  <groupId>\").append(groupId).append(\"</groupId>\\n\");\n    builder.append(indent).append(\"  <artifactId>\").append(artifactId).append(\"</artifactId>\\n\");\n    if (null != version) {\n      builder.append(indent).append(\"  <version>\").append(version).append(\"</version>\\n\");\n    }\n    if (isTestDependency) {\n      builder.append(indent).append(\"  <scope>test</scope>\\n\");\n    }\n    if (isOptional) {\n      builder.append(indent).append(\"  <optional>true</optional>\\n\");\n    }\n    if (null != classifier) {\n      builder.append(indent).append(\"  <classifier>\").append(classifier).append(\"</classifier>\\n\");\n    }\n    if ( ! modulesWithTransitiveDependencies.contains(artifactId) && null != exclusions && ! exclusions.isEmpty()) {\n      builder.append(indent).append(\"  <exclusions>\\n\");\n      for (String dependency : exclusions) {\n        int splitPos = dependency.indexOf(':');\n        String excludedGroupId = dependency.substring(0, splitPos);\n        String excludedArtifactId = dependency.substring(splitPos + 1);\n        builder.append(indent).append(\"    <exclusion>\\n\");\n        builder.append(indent).append(\"      <groupId>\").append(excludedGroupId).append(\"</groupId>\\n\");\n        builder.append(indent).append(\"      <artifactId>\").append(excludedArtifactId).append(\"</artifactId>\\n\");\n        builder.append(indent).append(\"    </exclusion>\\n\");\n      }\n      builder.append(indent).append(\"  </exclusions>\\n\");\n    }\n    builder.append(indent).append(\"</dependency>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e025cf1c07150c8db28879d785db17eb3a66ca9f":["92f3b9469d18ca27d27a92c42d00c9eed2ad5228"],"71b83dcf02fe2854488bc83d70dee29c5baa7e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f3b9469d18ca27d27a92c42d00c9eed2ad5228":["71b83dcf02fe2854488bc83d70dee29c5baa7e5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e025cf1c07150c8db28879d785db17eb3a66ca9f"]},"commit2Childs":{"e025cf1c07150c8db28879d785db17eb3a66ca9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"71b83dcf02fe2854488bc83d70dee29c5baa7e5c":["92f3b9469d18ca27d27a92c42d00c9eed2ad5228"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71b83dcf02fe2854488bc83d70dee29c5baa7e5c"],"92f3b9469d18ca27d27a92c42d00c9eed2ad5228":["e025cf1c07150c8db28879d785db17eb3a66ca9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}