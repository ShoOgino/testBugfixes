{"path":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","commits":[{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","sourceNew":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Range[][] ranges = new Range[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (ranges[id] == null) {\n        ranges[id] = new Range[] {nextRange(dimensions)};\n      }\n      if (x == 17) {\n        // some docs don't have a box:\n        ranges[id][0].isMissing = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        ranges[id] = new Range[n];\n        for (int i=0; i<n; ++i) {\n          ranges[id][i] = nextRange(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing ranges:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (ranges[oldID][0].isMissing == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n            ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) {\n                ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else {\n                ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(ranges);\n  }\n\n","sourceOld":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Range[][] ranges = new Range[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (ranges[id] == null) {\n        ranges[id] = new Range[] {nextRange(dimensions)};\n      }\n      if (x == 17) {\n        // some docs don't have a box:\n        ranges[id][0].isMissing = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        ranges[id] = new Range[n];\n        for (int i=0; i<n; ++i) {\n          ranges[id][i] = nextRange(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing ranges:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (ranges[oldID][0].isMissing == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n            ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) {\n                ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else {\n                ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(ranges);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdda3f3b5e7c93c42e41bc22701a84c26ddf125a","date":1505850304,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","sourceNew":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Range[][] ranges = new Range[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (ranges[id] == null) {\n        ranges[id] = new Range[] {nextRange(dimensions)};\n      }\n      if (x == 17) {\n        // some docs don't have a box:\n        ranges[id][0].isMissing = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        ranges[id] = new Range[n];\n        for (int i=0; i<n; ++i) {\n          ranges[id][i] = nextRange(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing ranges:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (ranges[oldID][0].isMissing == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n            ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) { // even is min\n                ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else { // odd is max\n                ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(ranges);\n  }\n\n","sourceOld":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Range[][] ranges = new Range[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (ranges[id] == null) {\n        ranges[id] = new Range[] {nextRange(dimensions)};\n      }\n      if (x == 17) {\n        // some docs don't have a box:\n        ranges[id][0].isMissing = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        ranges[id] = new Range[n];\n        for (int i=0; i<n; ++i) {\n          ranges[id][i] = nextRange(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing ranges:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (ranges[oldID][0].isMissing == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n            ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) {\n                ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else {\n                ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(ranges);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","sourceNew":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Range[][] ranges = new Range[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (ranges[id] == null) {\n        ranges[id] = new Range[] {nextRange(dimensions)};\n      }\n      if (x == 17) {\n        // some docs don't have a box:\n        ranges[id][0].isMissing = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        ranges[id] = new Range[n];\n        for (int i=0; i<n; ++i) {\n          ranges[id][i] = nextRange(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing ranges:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (ranges[oldID][0].isMissing == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n            ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) { // even is min\n                ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else { // odd is max\n                ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(ranges);\n  }\n\n","sourceOld":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Range[][] ranges = new Range[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (ranges[id] == null) {\n        ranges[id] = new Range[] {nextRange(dimensions)};\n      }\n      if (x == 17) {\n        // some docs don't have a box:\n        ranges[id][0].isMissing = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        ranges[id] = new Range[n];\n        for (int i=0; i<n; ++i) {\n          ranges[id][i] = nextRange(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing ranges:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (ranges[oldID][0].isMissing == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n            ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) {\n                ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else {\n                ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(ranges);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f94c392daa8f5708186bede16c84eafad4cdd2","date":1599578873,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BaseRangeFieldQueryTestCase#doTestRandom(int,boolean).mjava","sourceNew":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Range[][] ranges = new Range[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (ranges[id] == null) {\n        ranges[id] = new Range[] {nextRange(dimensions)};\n      }\n      if (x == 17) {\n        // some docs don't have a box:\n        ranges[id][0].isMissing = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        ranges[id] = new Range[n];\n        for (int i=0; i<n; ++i) {\n          ranges[id][i] = nextRange(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing ranges:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (ranges[oldID][0].isMissing == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n            ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + Arrays.toString(ranges[id]) + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) { // even is min\n                ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + Arrays.toString(ranges[id]) + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else { // odd is max\n                ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + Arrays.toString(ranges[id]) + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(ranges);\n  }\n\n","sourceOld":"  private void doTestRandom(int count, boolean multiValued) throws Exception {\n    int numDocs = atLeast(count);\n    int dimensions = dimension();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: numDocs=\" + numDocs);\n    }\n\n    Range[][] ranges = new Range[numDocs][];\n\n    boolean haveRealDoc = true;\n\n    nextdoc: for (int id=0; id<numDocs; ++id) {\n      int x = random().nextInt(20);\n      if (ranges[id] == null) {\n        ranges[id] = new Range[] {nextRange(dimensions)};\n      }\n      if (x == 17) {\n        // some docs don't have a box:\n        ranges[id][0].isMissing = true;\n        if (VERBOSE) {\n          System.out.println(\"  id=\" + id + \" is missing\");\n        }\n        continue;\n      }\n\n      if (multiValued == true && random().nextBoolean()) {\n        // randomly add multi valued documents (up to 2 fields)\n        int n = random().nextInt(2) + 1;\n        ranges[id] = new Range[n];\n        for (int i=0; i<n; ++i) {\n          ranges[id][i] = nextRange(dimensions);\n        }\n      }\n\n      if (id > 0 && x < 9 && haveRealDoc) {\n        int oldID;\n        int i=0;\n        // don't step on missing ranges:\n        while (true) {\n          oldID = random().nextInt(id);\n          if (ranges[oldID][0].isMissing == false) {\n            break;\n          } else if (++i > id) {\n            continue nextdoc;\n          }\n        }\n\n        if (x == dimensions*2) {\n          // Fully identical box (use first box in case current is multivalued but old is not)\n          for (int d=0; d<dimensions; ++d) {\n            ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n            ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n          }\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same box as doc=\" + oldID + \")\");\n          }\n        } else {\n          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {\n            if (x == m) {\n              int d = (int)Math.floor(m/2);\n              // current could be multivalue but old may not be, so use first box\n              if (even == 0) { // even is min\n                ranges[id][0].setMin(d, ranges[oldID][0].getMin(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same min[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              } else { // odd is max\n                ranges[id][0].setMax(d, ranges[oldID][0].getMax(d));\n                if (VERBOSE) {\n                  System.out.println(\"  id=\" + id + \" box=\" + ranges[id] + \" (same max[\" + d + \"] as doc=\" + oldID + \")\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    verify(ranges);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c9f94c392daa8f5708186bede16c84eafad4cdd2":["bdda3f3b5e7c93c42e41bc22701a84c26ddf125a"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["4a52b01a73cacbd2d360240e72d64c0ba353618f","bdda3f3b5e7c93c42e41bc22701a84c26ddf125a"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bdda3f3b5e7c93c42e41bc22701a84c26ddf125a":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9f94c392daa8f5708186bede16c84eafad4cdd2"]},"commit2Childs":{"c9f94c392daa8f5708186bede16c84eafad4cdd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["6240b74b884c5587f2a4062dd27d6c32bf228889","bdda3f3b5e7c93c42e41bc22701a84c26ddf125a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"bdda3f3b5e7c93c42e41bc22701a84c26ddf125a":["c9f94c392daa8f5708186bede16c84eafad4cdd2","6240b74b884c5587f2a4062dd27d6c32bf228889"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}