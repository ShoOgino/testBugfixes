{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyFlushTickets().mjava","commits":[{"id":"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4","date":1303818069,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyFlushTickets().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyFlushTickets(FlushTicket,FlushedSegment).mjava","sourceNew":"  private void applyFlushTickets() throws IOException {\n    synchronized (ticketQueue) {\n      while (true) {\n        // Keep publishing eligible flushed segments:\n        final FlushTicket head = ticketQueue.peek();\n        if (head != null && head.canPublish()) {\n          ticketQueue.poll();\n          finishFlush(head.segment, head.frozenDeletes);\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void applyFlushTickets(FlushTicket current, FlushedSegment segment) throws IOException {\n    synchronized (ticketQueue) {\n      if (current != null) {\n        // nocommit -- can't caller set current.segment = segment?\n        // nocommit -- confused by this comment:\n        // This is a segment FlushTicket so assign the flushed segment so we can make progress.\n        assert segment != null;\n        current.segment = segment;\n      }\n      while (true) {\n        // Keep publishing eligible flushed segments:\n        final FlushTicket head = ticketQueue.peek();\n        if (head != null && head.canPublish()) {\n          ticketQueue.poll();\n          finishFlush(head.segment, head.frozenDeletes);\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyFlushTickets().mjava","pathOld":"/dev/null","sourceNew":"  private void applyFlushTickets() throws IOException {\n    synchronized (ticketQueue) {\n      while (true) {\n        // Keep publishing eligible flushed segments:\n        final FlushTicket head = ticketQueue.peek();\n        if (head != null && head.canPublish()) {\n          ticketQueue.poll();\n          finishFlush(head.segment, head.frozenDeletes);\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyFlushTickets().mjava","pathOld":"/dev/null","sourceNew":"  private void applyFlushTickets() throws IOException {\n    synchronized (ticketQueue) {\n      while (true) {\n        // Keep publishing eligible flushed segments:\n        final FlushTicket head = ticketQueue.peek();\n        if (head != null && head.canPublish()) {\n          ticketQueue.poll();\n          finishFlush(head.segment, head.frozenDeletes);\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyFlushTickets().mjava","pathOld":"/dev/null","sourceNew":"  private void applyFlushTickets() throws IOException {\n    synchronized (ticketQueue) {\n      while (true) {\n        // Keep publishing eligible flushed segments:\n        final FlushTicket head = ticketQueue.peek();\n        if (head != null && head.canPublish()) {\n          ticketQueue.poll();\n          finishFlush(head.segment, head.frozenDeletes);\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c3710e755dc60691ac0d7fe23c9fcba0537bdc","date":1320437768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyFlushTickets().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyFlushTickets().mjava","sourceNew":"  private void applyFlushTickets() throws IOException {\n    synchronized (ticketQueue) {\n      while (true) {\n        // Keep publishing eligible flushed segments:\n        final FlushTicket head = ticketQueue.peek();\n        if (head != null && head.canPublish()) {\n          try {\n            finishFlush(head.segment, head.frozenDeletes);\n          } finally {\n            ticketQueue.poll();\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void applyFlushTickets() throws IOException {\n    synchronized (ticketQueue) {\n      while (true) {\n        // Keep publishing eligible flushed segments:\n        final FlushTicket head = ticketQueue.peek();\n        if (head != null && head.canPublish()) {\n          ticketQueue.poll();\n          finishFlush(head.segment, head.frozenDeletes);\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":["761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e096accda90a8bd2279f890efe2e287f47c743","date":1326726424,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#applyFlushTickets().mjava","sourceNew":null,"sourceOld":"  private void applyFlushTickets() throws IOException {\n    synchronized (ticketQueue) {\n      while (true) {\n        // Keep publishing eligible flushed segments:\n        final FlushTicket head = ticketQueue.peek();\n        if (head != null && head.canPublish()) {\n          try {\n            finishFlush(head.segment, head.frozenDeletes);\n          } finally {\n            ticketQueue.poll();\n          }\n        } else {\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a1c3710e755dc60691ac0d7fe23c9fcba0537bdc":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4"],"33e096accda90a8bd2279f890efe2e287f47c743":["a1c3710e755dc60691ac0d7fe23c9fcba0537bdc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["33e096accda90a8bd2279f890efe2e287f47c743"]},"commit2Childs":{"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a1c3710e755dc60691ac0d7fe23c9fcba0537bdc":["33e096accda90a8bd2279f890efe2e287f47c743"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","a1c3710e755dc60691ac0d7fe23c9fcba0537bdc","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"33e096accda90a8bd2279f890efe2e287f47c743":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}