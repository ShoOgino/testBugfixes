{"path":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"/dev/null","sourceNew":"  public void testWatchChildren() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n    \r\n    final AtomicInteger cnt = new AtomicInteger();\r\n    ZkTestServer server = new ZkTestServer(zkDir);\r\n    server.run();\r\n    Thread.sleep(400);\r\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    try {\r\n      zkClient.makePath(\"/collections\");\r\n\r\n      zkClient.getChildren(\"/collections\", new Watcher() {\r\n\r\n        public void process(WatchedEvent event) {\r\n          if (DEBUG) {\r\n            System.out.println(\"children changed\");\r\n          }\r\n          cnt.incrementAndGet();\r\n          // remake watch\r\n          try {\r\n            zkClient.getChildren(\"/collections\", this);\r\n          } catch (KeeperException e) {\r\n            throw new RuntimeException(e);\r\n          } catch (InterruptedException e) {\r\n            throw new RuntimeException(e);\r\n          }\r\n        }\r\n      });\r\n\r\n      zkClient.makePath(\"/collections/collection99/shards\");\r\n\r\n      zkClient.makePath(\"collections/collection99/config=collection1\");\r\n\r\n      zkClient.makePath(\"collections/collection99/config=collection3\");\r\n      \r\n      zkClient.makePath(\"/collections/collection97/shards\");\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n      \r\n      // pause for the watches to fire\r\n      Thread.sleep(700);\r\n      \r\n      if (cnt.intValue() < 2) {\r\n        Thread.sleep(4000); // wait a bit more\r\n      }\r\n      \r\n      assertEquals(2, cnt.intValue());\r\n\r\n    } finally {\r\n\r\n      if (zkClient != null) {\r\n        zkClient.close();\r\n      }\r\n      if (server != null) {\r\n        server.shutdown();\r\n      }\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"/dev/null","sourceNew":"  public void testWatchChildren() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n    \r\n    final AtomicInteger cnt = new AtomicInteger();\r\n    ZkTestServer server = new ZkTestServer(zkDir);\r\n    server.run();\r\n    Thread.sleep(400);\r\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    try {\r\n      zkClient.makePath(\"/collections\");\r\n\r\n      zkClient.getChildren(\"/collections\", new Watcher() {\r\n\r\n        public void process(WatchedEvent event) {\r\n          if (DEBUG) {\r\n            System.out.println(\"children changed\");\r\n          }\r\n          cnt.incrementAndGet();\r\n          // remake watch\r\n          try {\r\n            zkClient.getChildren(\"/collections\", this);\r\n          } catch (KeeperException e) {\r\n            throw new RuntimeException(e);\r\n          } catch (InterruptedException e) {\r\n            throw new RuntimeException(e);\r\n          }\r\n        }\r\n      });\r\n\r\n      zkClient.makePath(\"/collections/collection99/shards\");\r\n\r\n      zkClient.makePath(\"collections/collection99/config=collection1\");\r\n\r\n      zkClient.makePath(\"collections/collection99/config=collection3\");\r\n      \r\n      zkClient.makePath(\"/collections/collection97/shards\");\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n      \r\n      // pause for the watches to fire\r\n      Thread.sleep(700);\r\n      \r\n      if (cnt.intValue() < 2) {\r\n        Thread.sleep(4000); // wait a bit more\r\n      }\r\n      \r\n      assertEquals(2, cnt.intValue());\r\n\r\n    } finally {\r\n\r\n      if (zkClient != null) {\r\n        zkClient.close();\r\n      }\r\n      if (server != null) {\r\n        server.shutdown();\r\n      }\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"/dev/null","sourceNew":"  public void testWatchChildren() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n    \r\n    final AtomicInteger cnt = new AtomicInteger();\r\n    ZkTestServer server = new ZkTestServer(zkDir);\r\n    server.run();\r\n    Thread.sleep(400);\r\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    try {\r\n      zkClient.makePath(\"/collections\");\r\n\r\n      zkClient.getChildren(\"/collections\", new Watcher() {\r\n\r\n        public void process(WatchedEvent event) {\r\n          if (DEBUG) {\r\n            System.out.println(\"children changed\");\r\n          }\r\n          cnt.incrementAndGet();\r\n          // remake watch\r\n          try {\r\n            zkClient.getChildren(\"/collections\", this);\r\n          } catch (KeeperException e) {\r\n            throw new RuntimeException(e);\r\n          } catch (InterruptedException e) {\r\n            throw new RuntimeException(e);\r\n          }\r\n        }\r\n      });\r\n\r\n      zkClient.makePath(\"/collections/collection99/shards\");\r\n\r\n      zkClient.makePath(\"collections/collection99/config=collection1\");\r\n\r\n      zkClient.makePath(\"collections/collection99/config=collection3\");\r\n      \r\n      zkClient.makePath(\"/collections/collection97/shards\");\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n      \r\n      // pause for the watches to fire\r\n      Thread.sleep(700);\r\n      \r\n      if (cnt.intValue() < 2) {\r\n        Thread.sleep(4000); // wait a bit more\r\n      }\r\n      \r\n      assertEquals(2, cnt.intValue());\r\n\r\n    } finally {\r\n\r\n      if (zkClient != null) {\r\n        zkClient.close();\r\n      }\r\n      if (server != null) {\r\n        server.shutdown();\r\n      }\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bed62fe6383040eaff2ec720cdc55bb1462c61da","date":1296408595,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n    \r\n    final AtomicInteger cnt = new AtomicInteger();\r\n    ZkTestServer server = new ZkTestServer(zkDir);\r\n    server.run();\r\n    Thread.sleep(400);\r\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    try {\r\n      zkClient.makePath(\"/collections\");\r\n\r\n      zkClient.getChildren(\"/collections\", new Watcher() {\r\n\r\n        public void process(WatchedEvent event) {\r\n          if (DEBUG) {\r\n            System.out.println(\"children changed\");\r\n          }\r\n          cnt.incrementAndGet();\r\n          // remake watch\r\n          try {\r\n            zkClient.getChildren(\"/collections\", this);\r\n          } catch (KeeperException e) {\r\n            throw new RuntimeException(e);\r\n          } catch (InterruptedException e) {\r\n            throw new RuntimeException(e);\r\n          }\r\n        }\r\n      });\r\n\r\n      zkClient.makePath(\"/collections/collection99/shards\");\r\n\r\n      zkClient.makePath(\"collections/collection99/config=collection1\");\r\n\r\n      zkClient.makePath(\"collections/collection99/config=collection3\");\r\n      \r\n      zkClient.makePath(\"/collections/collection97/shards\");\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n      \r\n      // pause for the watches to fire\r\n      Thread.sleep(700);\r\n      \r\n      if (cnt.intValue() < 2) {\r\n        Thread.sleep(4000); // wait a bit more\r\n      }\r\n      \r\n      assertEquals(2, cnt.intValue());\r\n\r\n    } finally {\r\n\r\n      if (zkClient != null) {\r\n        zkClient.close();\r\n      }\r\n      if (server != null) {\r\n        server.shutdown();\r\n      }\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143","1e9ce820cd3ed9efb959c181daaafd22f0c70143","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n    \r\n    final AtomicInteger cnt = new AtomicInteger();\r\n    ZkTestServer server = new ZkTestServer(zkDir);\r\n    server.run();\r\n    Thread.sleep(400);\r\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    try {\r\n      zkClient.makePath(\"/collections\");\r\n\r\n      zkClient.getChildren(\"/collections\", new Watcher() {\r\n\r\n        public void process(WatchedEvent event) {\r\n          if (DEBUG) {\r\n            System.out.println(\"children changed\");\r\n          }\r\n          cnt.incrementAndGet();\r\n          // remake watch\r\n          try {\r\n            zkClient.getChildren(\"/collections\", this);\r\n          } catch (KeeperException e) {\r\n            throw new RuntimeException(e);\r\n          } catch (InterruptedException e) {\r\n            throw new RuntimeException(e);\r\n          }\r\n        }\r\n      });\r\n\r\n      zkClient.makePath(\"/collections/collection99/shards\");\r\n\r\n      zkClient.makePath(\"collections/collection99/config=collection1\");\r\n\r\n      zkClient.makePath(\"collections/collection99/config=collection3\");\r\n      \r\n      zkClient.makePath(\"/collections/collection97/shards\");\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n      \r\n      // pause for the watches to fire\r\n      Thread.sleep(700);\r\n      \r\n      if (cnt.intValue() < 2) {\r\n        Thread.sleep(4000); // wait a bit more\r\n      }\r\n      \r\n      assertEquals(2, cnt.intValue());\r\n\r\n    } finally {\r\n\r\n      if (zkClient != null) {\r\n        zkClient.close();\r\n      }\r\n      if (server != null) {\r\n        server.shutdown();\r\n      }\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\r\n    String zkDir = dataDir.getAbsolutePath() + File.separator\r\n        + \"zookeeper/server1/data\";\r\n    \r\n    final AtomicInteger cnt = new AtomicInteger();\r\n    ZkTestServer server = new ZkTestServer(zkDir);\r\n    server.run();\r\n    Thread.sleep(400);\r\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\r\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\r\n    try {\r\n      zkClient.makePath(\"/collections\");\r\n\r\n      zkClient.getChildren(\"/collections\", new Watcher() {\r\n\r\n        public void process(WatchedEvent event) {\r\n          if (DEBUG) {\r\n            System.out.println(\"children changed\");\r\n          }\r\n          cnt.incrementAndGet();\r\n          // remake watch\r\n          try {\r\n            zkClient.getChildren(\"/collections\", this);\r\n          } catch (KeeperException e) {\r\n            throw new RuntimeException(e);\r\n          } catch (InterruptedException e) {\r\n            throw new RuntimeException(e);\r\n          }\r\n        }\r\n      });\r\n\r\n      zkClient.makePath(\"/collections/collection99/shards\");\r\n\r\n      zkClient.makePath(\"collections/collection99/config=collection1\");\r\n\r\n      zkClient.makePath(\"collections/collection99/config=collection3\");\r\n      \r\n      zkClient.makePath(\"/collections/collection97/shards\");\r\n\r\n      if (DEBUG) {\r\n        zkClient.printLayoutToStdOut();\r\n      }\r\n      \r\n      // pause for the watches to fire\r\n      Thread.sleep(700);\r\n      \r\n      if (cnt.intValue() < 2) {\r\n        Thread.sleep(4000); // wait a bit more\r\n      }\r\n      \r\n      assertEquals(2, cnt.intValue());\r\n\r\n    } finally {\r\n\r\n      if (zkClient != null) {\r\n        zkClient.close();\r\n      }\r\n      if (server != null) {\r\n        server.shutdown();\r\n      }\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb4754fbc61d2e31d1875be5cbd891390326279","date":1299874324,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  @Ignore(\"test case crashes modern jres\")\n  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a7ca0101e43a9f8fc16f9467a9c107f68dc1b56","date":1299876367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Ignore(\"test case crashes modern jres\")\n  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkSolrClientTest#testWatchChildren().mjava","sourceNew":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  public void testWatchChildren() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    final AtomicInteger cnt = new AtomicInteger();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    Thread.sleep(400);\n    AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n    final SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), AbstractZkTestCase.TIMEOUT);\n    try {\n      zkClient.makePath(\"/collections\");\n\n      zkClient.getChildren(\"/collections\", new Watcher() {\n\n        public void process(WatchedEvent event) {\n          if (DEBUG) {\n            System.out.println(\"children changed\");\n          }\n          cnt.incrementAndGet();\n          // remake watch\n          try {\n            zkClient.getChildren(\"/collections\", this);\n          } catch (KeeperException e) {\n            throw new RuntimeException(e);\n          } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n\n      zkClient.makePath(\"/collections/collection99/shards\");\n\n      zkClient.makePath(\"collections/collection99/config=collection1\");\n\n      zkClient.makePath(\"collections/collection99/config=collection3\");\n      \n      zkClient.makePath(\"/collections/collection97/shards\");\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n      \n      // pause for the watches to fire\n      Thread.sleep(700);\n      \n      if (cnt.intValue() < 2) {\n        Thread.sleep(4000); // wait a bit more\n      }\n      \n      assertEquals(2, cnt.intValue());\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["8a7ca0101e43a9f8fc16f9467a9c107f68dc1b56","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["8a7ca0101e43a9f8fc16f9467a9c107f68dc1b56"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a7ca0101e43a9f8fc16f9467a9c107f68dc1b56":["1eb4754fbc61d2e31d1875be5cbd891390326279"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["8a7ca0101e43a9f8fc16f9467a9c107f68dc1b56"],"1eb4754fbc61d2e31d1875be5cbd891390326279":["bed62fe6383040eaff2ec720cdc55bb1462c61da"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","bed62fe6383040eaff2ec720cdc55bb1462c61da","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["29ef99d61cda9641b6250bf9567329a6e65f901d","1eb4754fbc61d2e31d1875be5cbd891390326279","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"8a7ca0101e43a9f8fc16f9467a9c107f68dc1b56":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"1eb4754fbc61d2e31d1875be5cbd891390326279":["8a7ca0101e43a9f8fc16f9467a9c107f68dc1b56"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}