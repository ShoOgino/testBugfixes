{"path":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setCheckPendingFlushUpdate(boolean).mjava","commits":[{"id":"f1ea5763a93795952100d48e19c48f19777c552c","date":1512660172,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setCheckPendingFlushUpdate(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: sets if indexing threads check for pending flushes on update in order\n   * to help our flushing indexing buffers to disk. As a consequence, threads calling\n   * {@link DirectoryReader#openIfChanged(DirectoryReader, IndexWriter)} or {@link IndexWriter#flush()} will\n   * be the only thread writing segments to disk unless flushes are falling behind. If indexing is stalled\n   * due to too many pending flushes indexing threads will help our writing pending segment flushes to disk.\n   *\n   * @lucene.eperimental\n   */\n  public LiveIndexWriterConfig setCheckPendingFlushUpdate(boolean checkPendingFlushOnUpdate) {\n    this.checkPendingFlushOnUpdate = checkPendingFlushOnUpdate;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43ff1a9fe9a96520a6ece31614ac4d7af3c67961","date":1512719539,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setCheckPendingFlushUpdate(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setCheckPendingFlushUpdate(boolean).mjava","sourceNew":"  /**\n   * Expert: sets if indexing threads check for pending flushes on update in order\n   * to help our flushing indexing buffers to disk. As a consequence, threads calling\n   * {@link DirectoryReader#openIfChanged(DirectoryReader, IndexWriter)} or {@link IndexWriter#flush()} will\n   * be the only thread writing segments to disk unless flushes are falling behind. If indexing is stalled\n   * due to too many pending flushes indexing threads will help our writing pending segment flushes to disk.\n   *\n   * @lucene.experimental\n   */\n  public LiveIndexWriterConfig setCheckPendingFlushUpdate(boolean checkPendingFlushOnUpdate) {\n    this.checkPendingFlushOnUpdate = checkPendingFlushOnUpdate;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: sets if indexing threads check for pending flushes on update in order\n   * to help our flushing indexing buffers to disk. As a consequence, threads calling\n   * {@link DirectoryReader#openIfChanged(DirectoryReader, IndexWriter)} or {@link IndexWriter#flush()} will\n   * be the only thread writing segments to disk unless flushes are falling behind. If indexing is stalled\n   * due to too many pending flushes indexing threads will help our writing pending segment flushes to disk.\n   *\n   * @lucene.eperimental\n   */\n  public LiveIndexWriterConfig setCheckPendingFlushUpdate(boolean checkPendingFlushOnUpdate) {\n    this.checkPendingFlushOnUpdate = checkPendingFlushOnUpdate;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LiveIndexWriterConfig#setCheckPendingFlushUpdate(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: sets if indexing threads check for pending flushes on update in order\n   * to help our flushing indexing buffers to disk. As a consequence, threads calling\n   * {@link DirectoryReader#openIfChanged(DirectoryReader, IndexWriter)} or {@link IndexWriter#flush()} will\n   * be the only thread writing segments to disk unless flushes are falling behind. If indexing is stalled\n   * due to too many pending flushes indexing threads will help our writing pending segment flushes to disk.\n   *\n   * @lucene.experimental\n   */\n  public LiveIndexWriterConfig setCheckPendingFlushUpdate(boolean checkPendingFlushOnUpdate) {\n    this.checkPendingFlushOnUpdate = checkPendingFlushOnUpdate;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43ff1a9fe9a96520a6ece31614ac4d7af3c67961":["f1ea5763a93795952100d48e19c48f19777c552c"],"f1ea5763a93795952100d48e19c48f19777c552c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43ff1a9fe9a96520a6ece31614ac4d7af3c67961"]},"commit2Childs":{"43ff1a9fe9a96520a6ece31614ac4d7af3c67961":["417142ff08fda9cf0b72d5133e63097a166c6458"],"f1ea5763a93795952100d48e19c48f19777c552c":["43ff1a9fe9a96520a6ece31614ac4d7af3c67961"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1ea5763a93795952100d48e19c48f19777c552c","417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}