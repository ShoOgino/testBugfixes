{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTPostingsEnum#nextDoc().mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTPostingsEnum#nextDoc().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        //System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          //System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        \n        final int code = in.readVInt();\n        accum += code >>> 1;\n        if ((code & 1) != 0) {\n          freq = 1;\n        } else {\n          freq = in.readVInt();\n          assert freq > 0;\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          pos = 0;\n          startOffset = storeOffsets ? 0 : -1;\n          posPending = freq;\n          //System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n          return (docID = accum);\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int skipCode = in.readVInt();\n            if ((skipCode & 1) != 0) {\n              payloadLength = in.readVInt();\n              //System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n          }\n          \n          if (storeOffsets) {\n            if ((in.readVInt() & 1) != 0) {\n              // new offset length\n              offsetLength = in.readVInt();\n            }\n          }\n          \n          if (storePayloads) {\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        //System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          //System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        \n        final int code = in.readVInt();\n        accum += code >>> 1;\n        if ((code & 1) != 0) {\n          freq = 1;\n        } else {\n          freq = in.readVInt();\n          assert freq > 0;\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          pos = 0;\n          startOffset = storeOffsets ? 0 : -1;\n          posPending = freq;\n          //System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n          return (docID = accum);\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int skipCode = in.readVInt();\n            if ((skipCode & 1) != 0) {\n              payloadLength = in.readVInt();\n              //System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n          }\n          \n          if (storeOffsets) {\n            if ((in.readVInt() & 1) != 0) {\n              // new offset length\n              offsetLength = in.readVInt();\n            }\n          }\n          \n          if (storePayloads) {\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTPostingsEnum#nextDoc().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTPostingsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        //System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          //System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        \n        final int code = in.readVInt();\n        accum += code >>> 1;\n        if ((code & 1) != 0) {\n          freq = 1;\n        } else {\n          freq = in.readVInt();\n          assert freq > 0;\n        }\n\n        pos = 0;\n        startOffset = storeOffsets ? 0 : -1;\n        posPending = freq;\n        //System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n        return (docID = accum);\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        //System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          //System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        \n        final int code = in.readVInt();\n        accum += code >>> 1;\n        if ((code & 1) != 0) {\n          freq = 1;\n        } else {\n          freq = in.readVInt();\n          assert freq > 0;\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          pos = 0;\n          startOffset = storeOffsets ? 0 : -1;\n          posPending = freq;\n          //System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n          return (docID = accum);\n        }\n\n        // Skip positions\n        for(int posUpto=0;posUpto<freq;posUpto++) {\n          if (!storePayloads) {\n            in.readVInt();\n          } else {\n            final int skipCode = in.readVInt();\n            if ((skipCode & 1) != 0) {\n              payloadLength = in.readVInt();\n              //System.out.println(\"    new payloadLen=\" + payloadLength);\n            }\n          }\n          \n          if (storeOffsets) {\n            if ((in.readVInt() & 1) != 0) {\n              // new offset length\n              offsetLength = in.readVInt();\n            }\n          }\n          \n          if (storePayloads) {\n            in.skipBytes(payloadLength);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTPostingsEnum#nextDoc().mjava","sourceNew":null,"sourceOld":"    @Override\n    public int nextDoc() {\n      while (posPending > 0) {\n        nextPosition();\n      }\n      while(true) {\n        //System.out.println(\"  nextDoc cycle docUpto=\" + docUpto + \" numDocs=\" + numDocs + \" fp=\" + in.getPosition() + \" this=\" + this);\n        if (docUpto == numDocs) {\n          //System.out.println(\"    END\");\n          return docID = NO_MORE_DOCS;\n        }\n        docUpto++;\n        \n        final int code = in.readVInt();\n        accum += code >>> 1;\n        if ((code & 1) != 0) {\n          freq = 1;\n        } else {\n          freq = in.readVInt();\n          assert freq > 0;\n        }\n\n        pos = 0;\n        startOffset = storeOffsets ? 0 : -1;\n        posPending = freq;\n        //System.out.println(\"    return docID=\" + accum + \" freq=\" + freq);\n        return (docID = accum);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["51f5280f31484820499077f41fcdfe92d527d9dc"],"24f89e8a6aac05753cde4c83d62a74356098200d":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["24f89e8a6aac05753cde4c83d62a74356098200d"],"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}