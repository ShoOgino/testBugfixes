{"path":"lucene/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToLong(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToLong(String).mjava","pathOld":"src/java/org/apache/lucene/util/NumericUtils#prefixCodedToLong(String).mjava","sourceNew":"  /**\n   * Returns a long from prefixCoded characters.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode e.g. a stored field.\n   * @throws NumberFormatException if the supplied string is\n   * not correctly prefix encoded.\n   * @see #longToPrefixCoded(long)\n   */\n  public static long prefixCodedToLong(final String prefixCoded) {\n    final int shift = prefixCoded.charAt(0)-SHIFT_START_LONG;\n    if (shift>63 || shift<0)\n      throw new NumberFormatException(\"Invalid shift value in prefixCoded string (is encoded value really a LONG?)\");\n    long sortableBits = 0L;\n    for (int i=1, len=prefixCoded.length(); i<len; i++) {\n      sortableBits <<= 7;\n      final char ch = prefixCoded.charAt(i);\n      if (ch>0x7f) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (char \"+\n          Integer.toHexString(ch)+\" at position \"+i+\" is invalid)\"\n        );\n      }\n      sortableBits |= ch;\n    }\n    return (sortableBits << shift) ^ 0x8000000000000000L;\n  }\n\n","sourceOld":"  /**\n   * Returns a long from prefixCoded characters.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode e.g. a stored field.\n   * @throws NumberFormatException if the supplied string is\n   * not correctly prefix encoded.\n   * @see #longToPrefixCoded(long)\n   */\n  public static long prefixCodedToLong(final String prefixCoded) {\n    final int shift = prefixCoded.charAt(0)-SHIFT_START_LONG;\n    if (shift>63 || shift<0)\n      throw new NumberFormatException(\"Invalid shift value in prefixCoded string (is encoded value really a LONG?)\");\n    long sortableBits = 0L;\n    for (int i=1, len=prefixCoded.length(); i<len; i++) {\n      sortableBits <<= 7;\n      final char ch = prefixCoded.charAt(i);\n      if (ch>0x7f) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (char \"+\n          Integer.toHexString(ch)+\" at position \"+i+\" is invalid)\"\n        );\n      }\n      sortableBits |= ch;\n    }\n    return (sortableBits << shift) ^ 0x8000000000000000L;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/NumericUtils#prefixCodedToLong(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a long from prefixCoded characters.\n   * Rightmost bits will be zero for lower precision codes.\n   * This method can be used to decode e.g. a stored field.\n   * @throws NumberFormatException if the supplied string is\n   * not correctly prefix encoded.\n   * @see #longToPrefixCoded(long)\n   */\n  public static long prefixCodedToLong(final String prefixCoded) {\n    final int shift = prefixCoded.charAt(0)-SHIFT_START_LONG;\n    if (shift>63 || shift<0)\n      throw new NumberFormatException(\"Invalid shift value in prefixCoded string (is encoded value really a LONG?)\");\n    long sortableBits = 0L;\n    for (int i=1, len=prefixCoded.length(); i<len; i++) {\n      sortableBits <<= 7;\n      final char ch = prefixCoded.charAt(i);\n      if (ch>0x7f) {\n        throw new NumberFormatException(\n          \"Invalid prefixCoded numerical value representation (char \"+\n          Integer.toHexString(ch)+\" at position \"+i+\" is invalid)\"\n        );\n      }\n      sortableBits |= ch;\n    }\n    return (sortableBits << shift) ^ 0x8000000000000000L;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}