{"path":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#writePersistentIndex(boolean).mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#writePersistentIndex(boolean).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#writePersistentIndex(boolean).mjava","sourceNew":"    private void writePersistentIndex(final boolean optimize)\n            throws IOException {\n        try {\n\n            /*\n             * first delete all updated documents\n             */\n            for (Term entryIdTerm : this.deletedForUpdateDocumentQueue) {\n                this.modifier.deleteDocuments(entryIdTerm);\n            }\n\n            for (Term term : this.forceWriteTerms) {\n                this.modifier.deleteDocuments(term);\n            }\n            /*\n             * add all documents\n             */\n            Collection<Document> documents = this.documentMap.values();\n            for (Document doc : documents) {\n                this.modifier.addDocument(doc);\n            }\n            /*\n             * write all users or feeds\n             */\n            for (Document docs : this.forceWriteDocuments) {\n                this.modifier.addDocument(docs);\n            }\n\n            /*\n             * delete all documents marked as deleted. As the DocumentIDs are\n             * unique the document marked as deleted must not persist after the\n             * index has been written. In the case of an update of a document\n             * and a previous delete the concurrency component will not allow an\n             * update. new inserted entries can not be deleted accidently-\n             */\n            for (Term entryIdTerm : this.deletedDocumentQueue) {\n                this.modifier.deleteDocuments(entryIdTerm);\n            }\n            this.modifier.flush();\n            if (optimize) {\n                if (LOG.isInfoEnabled())\n                    LOG.info(\"Optimizing index -- optimize interval \"\n                            + this.optimizeInterval);\n                this.modifier.optimize();\n            }\n\n        } finally {\n            if (optimize)\n                this.optimizeCounter = 0;\n            this.modifier.close();\n            this.deletedForUpdateDocumentQueue.clear();\n            this.deletedDocumentQueue.clear();\n            this.documentMap.clear();\n            this.forceWriteDocuments.clear();\n            this.forceWriteTerms.clear();\n        }\n    }\n\n","sourceOld":"    private void writePersistentIndex(final boolean optimize)\n            throws IOException {\n        try {\n\n            /*\n             * first delete all updated documents\n             */\n            for (Term entryIdTerm : this.deletedForUpdateDocumentQueue) {\n                this.modifier.deleteDocuments(entryIdTerm);\n            }\n\n            for (Term term : this.forceWriteTerms) {\n                this.modifier.deleteDocuments(term);\n            }\n            /*\n             * add all documents\n             */\n            Collection<Document> documents = this.documentMap.values();\n            for (Document doc : documents) {\n                this.modifier.addDocument(doc);\n            }\n            /*\n             * write all users or feeds\n             */\n            for (Document docs : this.forceWriteDocuments) {\n                this.modifier.addDocument(docs);\n            }\n\n            /*\n             * delete all documents marked as deleted. As the DocumentIDs are\n             * unique the document marked as deleted must not persist after the\n             * index has been written. In the case of an update of a document\n             * and a previous delete the concurrency component will not allow an\n             * update. new inserted entries can not be deleted accidently-\n             */\n            for (Term entryIdTerm : this.deletedDocumentQueue) {\n                this.modifier.deleteDocuments(entryIdTerm);\n            }\n            this.modifier.flush();\n            if (optimize) {\n                if (LOG.isInfoEnabled())\n                    LOG.info(\"Optimizing index -- optimize interval \"\n                            + this.optimizeInterval);\n                this.modifier.optimize();\n            }\n\n        } finally {\n            if (optimize)\n                this.optimizeCounter = 0;\n            this.modifier.close();\n            this.deletedForUpdateDocumentQueue.clear();\n            this.deletedDocumentQueue.clear();\n            this.documentMap.clear();\n            this.forceWriteDocuments.clear();\n            this.forceWriteTerms.clear();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageModifier#writePersistentIndex(boolean).mjava","sourceNew":null,"sourceOld":"    private void writePersistentIndex(final boolean optimize)\n            throws IOException {\n        try {\n\n            /*\n             * first delete all updated documents\n             */\n            for (Term entryIdTerm : this.deletedForUpdateDocumentQueue) {\n                this.modifier.deleteDocuments(entryIdTerm);\n            }\n\n            for (Term term : this.forceWriteTerms) {\n                this.modifier.deleteDocuments(term);\n            }\n            /*\n             * add all documents\n             */\n            Collection<Document> documents = this.documentMap.values();\n            for (Document doc : documents) {\n                this.modifier.addDocument(doc);\n            }\n            /*\n             * write all users or feeds\n             */\n            for (Document docs : this.forceWriteDocuments) {\n                this.modifier.addDocument(docs);\n            }\n\n            /*\n             * delete all documents marked as deleted. As the DocumentIDs are\n             * unique the document marked as deleted must not persist after the\n             * index has been written. In the case of an update of a document\n             * and a previous delete the concurrency component will not allow an\n             * update. new inserted entries can not be deleted accidently-\n             */\n            for (Term entryIdTerm : this.deletedDocumentQueue) {\n                this.modifier.deleteDocuments(entryIdTerm);\n            }\n            this.modifier.flush();\n            if (optimize) {\n                if (LOG.isInfoEnabled())\n                    LOG.info(\"Optimizing index -- optimize interval \"\n                            + this.optimizeInterval);\n                this.modifier.optimize();\n            }\n\n        } finally {\n            if (optimize)\n                this.optimizeCounter = 0;\n            this.modifier.close();\n            this.deletedForUpdateDocumentQueue.clear();\n            this.deletedDocumentQueue.clear();\n            this.documentMap.clear();\n            this.forceWriteDocuments.clear();\n            this.forceWriteTerms.clear();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}