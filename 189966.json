{"path":"src/java/org/apache/lucene/search/StringSortedHitQueue#comparator(IndexReader,String).mjava","commits":[{"id":"c6691cb6747f9e850337c706c06b92e9ddf816e1","date":1077044431,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/StringSortedHitQueue#comparator(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Returns a comparator for sorting hits according to a field containing strings.\n\t * @param reader  Index to use.\n\t * @param field  Field containg string values.\n\t * @return  Comparator for sorting hits.\n\t * @throws IOException If an error occurs reading the index.\n\t */\n\tstatic ScoreDocLookupComparator comparator (final IndexReader reader, final String field)\n\tthrows IOException {\n\t\treturn new ScoreDocLookupComparator() {\n\n\t\t\t/** The sort information being used by this instance */\n\t\t\tprotected final int[] fieldOrder = generateSortIndex();\n\n\t\t\tprivate final int[] generateSortIndex()\n\t\t\tthrows IOException {\n\n\t\t\t\tfinal int[] retArray = new int[reader.maxDoc()];\n\n\t\t\t\tTermEnum enumerator = reader.terms (new Term (field, \"\"));\n\t\t\t\tTermDocs termDocs = reader.termDocs();\n\t\t\t\tif (enumerator.term() == null) {\n\t\t\t\t\tthrow new RuntimeException (\"no terms in field \" + field);\n\t\t\t\t}\n\n\t\t\t\t// NOTE: the contract for TermEnum says the\n\t\t\t\t// terms will be in natural order (which is\n\t\t\t\t// ordering by field name, term text).  The\n\t\t\t\t// contract for TermDocs says the docs will\n\t\t\t\t// be ordered by document number.  So the\n\t\t\t\t// following loop will automatically sort the\n\t\t\t\t// terms in the correct order.\n\n\t\t\t\ttry {\n\t\t\t\t\tint t = 0;  // current term number\n\t\t\t\t\tdo {\n\t\t\t\t\t\tTerm term = enumerator.term();\n\t\t\t\t\t\tif (term.field() != field) break;\n\t\t\t\t\t\tt++;\n\t\t\t\t\t\ttermDocs.seek (enumerator);\n\t\t\t\t\t\twhile (termDocs.next()) {\n\t\t\t\t\t\t\tretArray[termDocs.doc()] = t;\n\t\t\t\t\t\t}\n\t\t\t\t\t} while (enumerator.next());\n\t\t\t\t} finally {\n\t\t\t\t\tenumerator.close();\n\t\t\t\t\ttermDocs.close();\n\t\t\t\t}\n\n\t\t\t\treturn retArray;\n\t\t\t}\n\n\t\t\tpublic final int compare (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi < fj) return -1;\n\t\t\t\tif (fi > fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final int compareReverse (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi > fj) return -1;\n\t\t\t\tif (fi < fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final boolean sizeMatches (final int n) {\n\t\t\t\treturn fieldOrder.length == n;\n\t\t\t}\n\n\t\t\tpublic Object sortValue (final ScoreDoc i) {\n\t\t\t\treturn new Integer(fieldOrder[i.doc]);\n\t\t\t}\n\n\t\t\tpublic int sortType() {\n\t\t\t\treturn SortField.INT;\n\t\t\t}\n\t\t};\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dbb966a37f0529a142daa7828f509fb9fe9a6f5","date":1077655276,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/StringSortedHitQueue#comparator(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/StringSortedHitQueue#comparator(IndexReader,String).mjava","sourceNew":"\t/**\n\t * Returns a comparator for sorting hits according to a field containing strings.\n\t * @param reader  Index to use.\n\t * @param fieldname  Field containg string values.\n\t * @return  Comparator for sorting hits.\n\t * @throws IOException If an error occurs reading the index.\n\t */\n\tstatic ScoreDocLookupComparator comparator (final IndexReader reader, final String fieldname)\n\tthrows IOException {\n\t\tfinal String field = fieldname.intern();\n\t\treturn new ScoreDocLookupComparator() {\n\n\t\t\t/** The sort information being used by this instance */\n\t\t\tprotected final int[] fieldOrder = generateSortIndex();\n\t\t\tprotected String[] terms;\n\n\t\t\tprivate final int[] generateSortIndex()\n\t\t\tthrows IOException {\n\n\t\t\t\tfinal int[] retArray = new int[reader.maxDoc()];\n\t\t\t\tfinal String[] mterms = new String[reader.maxDoc()];   // guess length\n\n\t\t\t\tTermEnum enumerator = reader.terms (new Term (field, \"\"));\n\t\t\t\tTermDocs termDocs = reader.termDocs();\n\t\t\t\tif (enumerator.term() == null) {\n\t\t\t\t\tthrow new RuntimeException (\"no terms in field \" + field);\n\t\t\t\t}\n\n\t\t\t\t// NOTE: the contract for TermEnum says the\n\t\t\t\t// terms will be in natural order (which is\n\t\t\t\t// ordering by field name, term text).  The\n\t\t\t\t// contract for TermDocs says the docs will\n\t\t\t\t// be ordered by document number.  So the\n\t\t\t\t// following loop will automatically sort the\n\t\t\t\t// terms in the correct order.\n\n\t\t\t\t// if a given document has more than one term\n\t\t\t\t// in the field, only the last one will be used.\n\n\t\t\t\tint t = 0;  // current term number\n\t\t\t\ttry {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tTerm term = enumerator.term();\n\t\t\t\t\t\tif (term.field() != field) break;\n\n\t\t\t\t\t\t// store term text\n\t\t\t\t\t\t// we expect that there is at most one term per document\n\t\t\t\t\t\tif (t >= mterms.length) throw new RuntimeException (\"there are more terms than documents in field \\\"\"+field+\"\\\"\");\n\t\t\t\t\t\tmterms[t] = term.text();\n\n\t\t\t\t\t\t// store which documents use this term\n\t\t\t\t\t\ttermDocs.seek (enumerator);\n\t\t\t\t\t\twhile (termDocs.next()) {\n\t\t\t\t\t\t\tretArray[termDocs.doc()] = t;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tt++;\n\t\t\t\t\t} while (enumerator.next());\n\n\t\t\t\t} finally {\n\t\t\t\t\tenumerator.close();\n\t\t\t\t\ttermDocs.close();\n\t\t\t\t}\n\n\t\t\t\t// if there are less terms than documents,\n\t\t\t\t// trim off the dead array space\n\t\t\t\tif (t < mterms.length) {\n\t\t\t\t\tterms = new String[t];\n\t\t\t\t\tSystem.arraycopy (mterms, 0, terms, 0, t);\n\t\t\t\t} else {\n\t\t\t\t\tterms = mterms;\n\t\t\t\t}\n\n\t\t\t\treturn retArray;\n\t\t\t}\n\n\t\t\tpublic final int compare (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi < fj) return -1;\n\t\t\t\tif (fi > fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final int compareReverse (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi > fj) return -1;\n\t\t\t\tif (fi < fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final boolean sizeMatches (final int n) {\n\t\t\t\treturn fieldOrder.length == n;\n\t\t\t}\n\n\t\t\tpublic Object sortValue (final ScoreDoc i) {\n\t\t\t\treturn terms[fieldOrder[i.doc]];\n\t\t\t}\n\n\t\t\tpublic int sortType() {\n\t\t\t\treturn SortField.STRING;\n\t\t\t}\n\t\t};\n\t}\n\n","sourceOld":"\t/**\n\t * Returns a comparator for sorting hits according to a field containing strings.\n\t * @param reader  Index to use.\n\t * @param field  Field containg string values.\n\t * @return  Comparator for sorting hits.\n\t * @throws IOException If an error occurs reading the index.\n\t */\n\tstatic ScoreDocLookupComparator comparator (final IndexReader reader, final String field)\n\tthrows IOException {\n\t\treturn new ScoreDocLookupComparator() {\n\n\t\t\t/** The sort information being used by this instance */\n\t\t\tprotected final int[] fieldOrder = generateSortIndex();\n\n\t\t\tprivate final int[] generateSortIndex()\n\t\t\tthrows IOException {\n\n\t\t\t\tfinal int[] retArray = new int[reader.maxDoc()];\n\n\t\t\t\tTermEnum enumerator = reader.terms (new Term (field, \"\"));\n\t\t\t\tTermDocs termDocs = reader.termDocs();\n\t\t\t\tif (enumerator.term() == null) {\n\t\t\t\t\tthrow new RuntimeException (\"no terms in field \" + field);\n\t\t\t\t}\n\n\t\t\t\t// NOTE: the contract for TermEnum says the\n\t\t\t\t// terms will be in natural order (which is\n\t\t\t\t// ordering by field name, term text).  The\n\t\t\t\t// contract for TermDocs says the docs will\n\t\t\t\t// be ordered by document number.  So the\n\t\t\t\t// following loop will automatically sort the\n\t\t\t\t// terms in the correct order.\n\n\t\t\t\ttry {\n\t\t\t\t\tint t = 0;  // current term number\n\t\t\t\t\tdo {\n\t\t\t\t\t\tTerm term = enumerator.term();\n\t\t\t\t\t\tif (term.field() != field) break;\n\t\t\t\t\t\tt++;\n\t\t\t\t\t\ttermDocs.seek (enumerator);\n\t\t\t\t\t\twhile (termDocs.next()) {\n\t\t\t\t\t\t\tretArray[termDocs.doc()] = t;\n\t\t\t\t\t\t}\n\t\t\t\t\t} while (enumerator.next());\n\t\t\t\t} finally {\n\t\t\t\t\tenumerator.close();\n\t\t\t\t\ttermDocs.close();\n\t\t\t\t}\n\n\t\t\t\treturn retArray;\n\t\t\t}\n\n\t\t\tpublic final int compare (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi < fj) return -1;\n\t\t\t\tif (fi > fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final int compareReverse (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi > fj) return -1;\n\t\t\t\tif (fi < fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final boolean sizeMatches (final int n) {\n\t\t\t\treturn fieldOrder.length == n;\n\t\t\t}\n\n\t\t\tpublic Object sortValue (final ScoreDoc i) {\n\t\t\t\treturn new Integer(fieldOrder[i.doc]);\n\t\t\t}\n\n\t\t\tpublic int sortType() {\n\t\t\t\treturn SortField.INT;\n\t\t\t}\n\t\t};\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dba073cad85af8b853f4461a62b0a245480fcd7a","date":1080156191,"type":3,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/StringSortedHitQueue#comparator(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/StringSortedHitQueue#comparator(IndexReader,String).mjava","sourceNew":"\t/**\n\t * Returns a comparator for sorting hits according to a field containing strings.\n\t * @param reader  Index to use.\n\t * @param fieldname  Field containg string values.\n\t * @return  Comparator for sorting hits.\n\t * @throws IOException If an error occurs reading the index.\n\t */\n\tstatic ScoreDocLookupComparator comparator (final IndexReader reader, final String fieldname)\n\tthrows IOException {\n\t\tfinal String field = fieldname.intern();\n\t\treturn new ScoreDocLookupComparator() {\n\n\t\t\t/** The sort information being used by this instance */\n\t\t\tprotected final int[] fieldOrder = generateSortIndex();\n\t\t\tprotected String[] terms;\n\n\t\t\tprivate final int[] generateSortIndex()\n\t\t\tthrows IOException {\n\n\t\t\t\tfinal int[] retArray = new int[reader.maxDoc()];\n\t\t\t\tfinal String[] mterms = new String[reader.maxDoc()];   // guess length\n\t\t\t\tif (retArray.length > 0) {\n\t\t\t\t\tTermEnum enumerator = reader.terms (new Term (field, \"\"));\n\t\t\t\t\tTermDocs termDocs = reader.termDocs();\n\n\t\t\t\t\tint t = 0;  // current term number\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (enumerator.term() == null) {\n\t\t\t\t\t\t\tthrow new RuntimeException (\"no terms in field \" + field);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// NOTE: the contract for TermEnum says the\n\t\t\t\t\t\t// terms will be in natural order (which is\n\t\t\t\t\t\t// ordering by field name, term text).  The\n\t\t\t\t\t\t// contract for TermDocs says the docs will\n\t\t\t\t\t\t// be ordered by document number.  So the\n\t\t\t\t\t\t// following loop will automatically sort the\n\t\t\t\t\t\t// terms in the correct order.\n\n\t\t\t\t\t\t// if a given document has more than one term\n\t\t\t\t\t\t// in the field, only the last one will be used.\n\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tTerm term = enumerator.term();\n\t\t\t\t\t\t\tif (term.field() != field) break;\n\n\t\t\t\t\t\t\t// store term text\n\t\t\t\t\t\t\t// we expect that there is at most one term per document\n\t\t\t\t\t\t\tif (t >= mterms.length) throw new RuntimeException (\"there are more terms than documents in field \\\"\"+field+\"\\\"\");\n\t\t\t\t\t\t\tmterms[t] = term.text();\n\n\t\t\t\t\t\t\t// store which documents use this term\n\t\t\t\t\t\t\ttermDocs.seek (enumerator);\n\t\t\t\t\t\t\twhile (termDocs.next()) {\n\t\t\t\t\t\t\t\tretArray[termDocs.doc()] = t;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tt++;\n\t\t\t\t\t\t} while (enumerator.next());\n\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tenumerator.close();\n\t\t\t\t\t\ttermDocs.close();\n\t\t\t\t\t}\n\n\t\t\t\t\t// if there are less terms than documents,\n\t\t\t\t\t// trim off the dead array space\n\t\t\t\t\tif (t < mterms.length) {\n\t\t\t\t\t\tterms = new String[t];\n\t\t\t\t\t\tSystem.arraycopy (mterms, 0, terms, 0, t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tterms = mterms;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn retArray;\n\t\t\t}\n\n\t\t\tpublic final int compare (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi < fj) return -1;\n\t\t\t\tif (fi > fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final int compareReverse (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi > fj) return -1;\n\t\t\t\tif (fi < fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final boolean sizeMatches (final int n) {\n\t\t\t\treturn fieldOrder.length == n;\n\t\t\t}\n\n\t\t\tpublic Object sortValue (final ScoreDoc i) {\n\t\t\t\treturn terms[fieldOrder[i.doc]];\n\t\t\t}\n\n\t\t\tpublic int sortType() {\n\t\t\t\treturn SortField.STRING;\n\t\t\t}\n\t\t};\n\t}\n\n","sourceOld":"\t/**\n\t * Returns a comparator for sorting hits according to a field containing strings.\n\t * @param reader  Index to use.\n\t * @param fieldname  Field containg string values.\n\t * @return  Comparator for sorting hits.\n\t * @throws IOException If an error occurs reading the index.\n\t */\n\tstatic ScoreDocLookupComparator comparator (final IndexReader reader, final String fieldname)\n\tthrows IOException {\n\t\tfinal String field = fieldname.intern();\n\t\treturn new ScoreDocLookupComparator() {\n\n\t\t\t/** The sort information being used by this instance */\n\t\t\tprotected final int[] fieldOrder = generateSortIndex();\n\t\t\tprotected String[] terms;\n\n\t\t\tprivate final int[] generateSortIndex()\n\t\t\tthrows IOException {\n\n\t\t\t\tfinal int[] retArray = new int[reader.maxDoc()];\n\t\t\t\tfinal String[] mterms = new String[reader.maxDoc()];   // guess length\n\n\t\t\t\tTermEnum enumerator = reader.terms (new Term (field, \"\"));\n\t\t\t\tTermDocs termDocs = reader.termDocs();\n\t\t\t\tif (enumerator.term() == null) {\n\t\t\t\t\tthrow new RuntimeException (\"no terms in field \" + field);\n\t\t\t\t}\n\n\t\t\t\t// NOTE: the contract for TermEnum says the\n\t\t\t\t// terms will be in natural order (which is\n\t\t\t\t// ordering by field name, term text).  The\n\t\t\t\t// contract for TermDocs says the docs will\n\t\t\t\t// be ordered by document number.  So the\n\t\t\t\t// following loop will automatically sort the\n\t\t\t\t// terms in the correct order.\n\n\t\t\t\t// if a given document has more than one term\n\t\t\t\t// in the field, only the last one will be used.\n\n\t\t\t\tint t = 0;  // current term number\n\t\t\t\ttry {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tTerm term = enumerator.term();\n\t\t\t\t\t\tif (term.field() != field) break;\n\n\t\t\t\t\t\t// store term text\n\t\t\t\t\t\t// we expect that there is at most one term per document\n\t\t\t\t\t\tif (t >= mterms.length) throw new RuntimeException (\"there are more terms than documents in field \\\"\"+field+\"\\\"\");\n\t\t\t\t\t\tmterms[t] = term.text();\n\n\t\t\t\t\t\t// store which documents use this term\n\t\t\t\t\t\ttermDocs.seek (enumerator);\n\t\t\t\t\t\twhile (termDocs.next()) {\n\t\t\t\t\t\t\tretArray[termDocs.doc()] = t;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tt++;\n\t\t\t\t\t} while (enumerator.next());\n\n\t\t\t\t} finally {\n\t\t\t\t\tenumerator.close();\n\t\t\t\t\ttermDocs.close();\n\t\t\t\t}\n\n\t\t\t\t// if there are less terms than documents,\n\t\t\t\t// trim off the dead array space\n\t\t\t\tif (t < mterms.length) {\n\t\t\t\t\tterms = new String[t];\n\t\t\t\t\tSystem.arraycopy (mterms, 0, terms, 0, t);\n\t\t\t\t} else {\n\t\t\t\t\tterms = mterms;\n\t\t\t\t}\n\n\t\t\t\treturn retArray;\n\t\t\t}\n\n\t\t\tpublic final int compare (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi < fj) return -1;\n\t\t\t\tif (fi > fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final int compareReverse (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi > fj) return -1;\n\t\t\t\tif (fi < fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final boolean sizeMatches (final int n) {\n\t\t\t\treturn fieldOrder.length == n;\n\t\t\t}\n\n\t\t\tpublic Object sortValue (final ScoreDoc i) {\n\t\t\t\treturn terms[fieldOrder[i.doc]];\n\t\t\t}\n\n\t\t\tpublic int sortType() {\n\t\t\t\treturn SortField.STRING;\n\t\t\t}\n\t\t};\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba642776a798f4209071f2241e5c6faefc6ea2fb","date":1080586530,"type":3,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/StringSortedHitQueue#comparator(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/StringSortedHitQueue#comparator(IndexReader,String).mjava","sourceNew":"\t/**\n\t * Returns a comparator for sorting hits according to a field containing strings.\n\t * @param reader  Index to use.\n\t * @param fieldname  Field containg string values.\n\t * @return  Comparator for sorting hits.\n\t * @throws IOException If an error occurs reading the index.\n\t */\n\tstatic ScoreDocLookupComparator comparator (final IndexReader reader, final String fieldname)\n\tthrows IOException {\n\t\tTermEnum enumerator = reader.terms (new Term (fieldname, \"\"));\n\t\treturn comparator (reader, enumerator, fieldname);\n\t}\n\n","sourceOld":"\t/**\n\t * Returns a comparator for sorting hits according to a field containing strings.\n\t * @param reader  Index to use.\n\t * @param fieldname  Field containg string values.\n\t * @return  Comparator for sorting hits.\n\t * @throws IOException If an error occurs reading the index.\n\t */\n\tstatic ScoreDocLookupComparator comparator (final IndexReader reader, final String fieldname)\n\tthrows IOException {\n\t\tfinal String field = fieldname.intern();\n\t\treturn new ScoreDocLookupComparator() {\n\n\t\t\t/** The sort information being used by this instance */\n\t\t\tprotected final int[] fieldOrder = generateSortIndex();\n\t\t\tprotected String[] terms;\n\n\t\t\tprivate final int[] generateSortIndex()\n\t\t\tthrows IOException {\n\n\t\t\t\tfinal int[] retArray = new int[reader.maxDoc()];\n\t\t\t\tfinal String[] mterms = new String[reader.maxDoc()];   // guess length\n\t\t\t\tif (retArray.length > 0) {\n\t\t\t\t\tTermEnum enumerator = reader.terms (new Term (field, \"\"));\n\t\t\t\t\tTermDocs termDocs = reader.termDocs();\n\n\t\t\t\t\tint t = 0;  // current term number\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (enumerator.term() == null) {\n\t\t\t\t\t\t\tthrow new RuntimeException (\"no terms in field \" + field);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// NOTE: the contract for TermEnum says the\n\t\t\t\t\t\t// terms will be in natural order (which is\n\t\t\t\t\t\t// ordering by field name, term text).  The\n\t\t\t\t\t\t// contract for TermDocs says the docs will\n\t\t\t\t\t\t// be ordered by document number.  So the\n\t\t\t\t\t\t// following loop will automatically sort the\n\t\t\t\t\t\t// terms in the correct order.\n\n\t\t\t\t\t\t// if a given document has more than one term\n\t\t\t\t\t\t// in the field, only the last one will be used.\n\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tTerm term = enumerator.term();\n\t\t\t\t\t\t\tif (term.field() != field) break;\n\n\t\t\t\t\t\t\t// store term text\n\t\t\t\t\t\t\t// we expect that there is at most one term per document\n\t\t\t\t\t\t\tif (t >= mterms.length) throw new RuntimeException (\"there are more terms than documents in field \\\"\"+field+\"\\\"\");\n\t\t\t\t\t\t\tmterms[t] = term.text();\n\n\t\t\t\t\t\t\t// store which documents use this term\n\t\t\t\t\t\t\ttermDocs.seek (enumerator);\n\t\t\t\t\t\t\twhile (termDocs.next()) {\n\t\t\t\t\t\t\t\tretArray[termDocs.doc()] = t;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tt++;\n\t\t\t\t\t\t} while (enumerator.next());\n\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tenumerator.close();\n\t\t\t\t\t\ttermDocs.close();\n\t\t\t\t\t}\n\n\t\t\t\t\t// if there are less terms than documents,\n\t\t\t\t\t// trim off the dead array space\n\t\t\t\t\tif (t < mterms.length) {\n\t\t\t\t\t\tterms = new String[t];\n\t\t\t\t\t\tSystem.arraycopy (mterms, 0, terms, 0, t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tterms = mterms;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn retArray;\n\t\t\t}\n\n\t\t\tpublic final int compare (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi < fj) return -1;\n\t\t\t\tif (fi > fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final int compareReverse (final ScoreDoc i, final ScoreDoc j) {\n\t\t\t\tfinal int fi = fieldOrder[i.doc];\n\t\t\t\tfinal int fj = fieldOrder[j.doc];\n\t\t\t\tif (fi > fj) return -1;\n\t\t\t\tif (fi < fj) return 1;\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tpublic final boolean sizeMatches (final int n) {\n\t\t\t\treturn fieldOrder.length == n;\n\t\t\t}\n\n\t\t\tpublic Object sortValue (final ScoreDoc i) {\n\t\t\t\treturn terms[fieldOrder[i.doc]];\n\t\t\t}\n\n\t\t\tpublic int sortType() {\n\t\t\t\treturn SortField.STRING;\n\t\t\t}\n\t\t};\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99ee715b9c02dd47d9e69a18607a5192c1ebd82b","date":1085007927,"type":4,"author":"Tim Jones","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/StringSortedHitQueue#comparator(IndexReader,String).mjava","sourceNew":null,"sourceOld":"\t/**\n\t * Returns a comparator for sorting hits according to a field containing strings.\n\t * @param reader  Index to use.\n\t * @param fieldname  Field containg string values.\n\t * @return  Comparator for sorting hits.\n\t * @throws IOException If an error occurs reading the index.\n\t */\n\tstatic ScoreDocLookupComparator comparator (final IndexReader reader, final String fieldname)\n\tthrows IOException {\n\t\tTermEnum enumerator = reader.terms (new Term (fieldname, \"\"));\n\t\treturn comparator (reader, enumerator, fieldname);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6691cb6747f9e850337c706c06b92e9ddf816e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["ba642776a798f4209071f2241e5c6faefc6ea2fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba642776a798f4209071f2241e5c6faefc6ea2fb":["dba073cad85af8b853f4461a62b0a245480fcd7a"],"dba073cad85af8b853f4461a62b0a245480fcd7a":["2dbb966a37f0529a142daa7828f509fb9fe9a6f5"],"2dbb966a37f0529a142daa7828f509fb9fe9a6f5":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"]},"commit2Childs":{"c6691cb6747f9e850337c706c06b92e9ddf816e1":["2dbb966a37f0529a142daa7828f509fb9fe9a6f5"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"ba642776a798f4209071f2241e5c6faefc6ea2fb":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"dba073cad85af8b853f4461a62b0a245480fcd7a":["ba642776a798f4209071f2241e5c6faefc6ea2fb"],"2dbb966a37f0529a142daa7828f509fb9fe9a6f5":["dba073cad85af8b853f4461a62b0a245480fcd7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}