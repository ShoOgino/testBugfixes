{"path":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#rawToNormal(Query).mjava","commits":[{"id":"68c354ba50abc8ed5c5fe98901e61d68f93952bb","date":1479836000,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#rawToNormal(Query).mjava","pathOld":"/dev/null","sourceNew":"  // Create a \"normal\" query from a RawQuery (or just return the current query if it's not raw)\n  Query rawToNormal(Query q) {\n    if (!(q instanceof RawQuery)) return q;\n    RawQuery rq = (RawQuery)q;\n    return rq.sfield.getType().getFieldQuery(parser, rq.sfield, rq.externalVal);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#rawToNormal(Query).mjava","pathOld":"/dev/null","sourceNew":"  // Create a \"normal\" query from a RawQuery (or just return the current query if it's not raw)\n  Query rawToNormal(Query q) {\n    if (!(q instanceof RawQuery)) return q;\n    RawQuery rq = (RawQuery)q;\n    return rq.sfield.getType().getFieldQuery(parser, rq.sfield, rq.externalVal);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#rawToNormal(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#rawToNormal(Query).mjava","sourceNew":"  // Create a \"normal\" query from a RawQuery (or just return the current query if it's not raw)\n  Query rawToNormal(Query q) {\n    Query normal = q;\n    if (q instanceof RawQuery) {\n      RawQuery rawq = (RawQuery)q;\n      if (rawq.sfield.getType().isTokenized()) {\n        normal = rawq.sfield.getType().getFieldQuery(parser, rawq.sfield, rawq.getJoinedExternalVal());\n      } else {\n        FieldType ft = rawq.sfield.getType();\n        if (rawq.getTermCount() == 1) {\n          normal = ft.getFieldQuery(this.parser, rawq.sfield, rawq.getExternalVals().get(0));\n        } else {\n          BooleanQuery.Builder booleanBuilder = newBooleanQuery();\n          for (String externalVal : rawq.getExternalVals()) {\n            Query subq = ft.getFieldQuery(this.parser, rawq.sfield, externalVal);\n            booleanBuilder.add(subq, BooleanClause.Occur.SHOULD);\n          }\n          normal = booleanBuilder.build();\n        }\n      }\n    }\n    return normal;\n  }\n\n","sourceOld":"  // Create a \"normal\" query from a RawQuery (or just return the current query if it's not raw)\n  Query rawToNormal(Query q) {\n    if (!(q instanceof RawQuery)) return q;\n    RawQuery rq = (RawQuery)q;\n    return rq.sfield.getType().getFieldQuery(parser, rq.sfield, rq.externalVal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#rawToNormal(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#rawToNormal(Query).mjava","sourceNew":"  // Create a \"normal\" query from a RawQuery (or just return the current query if it's not raw)\n  Query rawToNormal(Query q) {\n    Query normal = q;\n    if (q instanceof RawQuery) {\n      RawQuery rawq = (RawQuery)q;\n      if (rawq.sfield.getType().isTokenized()) {\n        normal = rawq.sfield.getType().getFieldQuery(parser, rawq.sfield, rawq.getJoinedExternalVal());\n      } else {\n        FieldType ft = rawq.sfield.getType();\n        if (rawq.getTermCount() == 1) {\n          normal = ft.getFieldQuery(this.parser, rawq.sfield, rawq.getExternalVals().get(0));\n        } else {\n          BooleanQuery.Builder booleanBuilder = newBooleanQuery();\n          for (String externalVal : rawq.getExternalVals()) {\n            Query subq = ft.getFieldQuery(this.parser, rawq.sfield, externalVal);\n            booleanBuilder.add(subq, BooleanClause.Occur.SHOULD);\n          }\n          normal = booleanBuilder.build();\n        }\n      }\n    }\n    return normal;\n  }\n\n","sourceOld":"  // Create a \"normal\" query from a RawQuery (or just return the current query if it's not raw)\n  Query rawToNormal(Query q) {\n    if (!(q instanceof RawQuery)) return q;\n    RawQuery rq = (RawQuery)q;\n    return rq.sfield.getType().getFieldQuery(parser, rq.sfield, rq.externalVal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39fdbc59d893f5a211736e861fe145798a40b9ff","date":1498161919,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#rawToNormal(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#rawToNormal(Query).mjava","sourceNew":"  // Create a \"normal\" query from a RawQuery (or just return the current query if it's not raw)\n  Query rawToNormal(Query q) {\n    Query normal = q;\n    if (q instanceof RawQuery) {\n      RawQuery rawq = (RawQuery)q;\n      if (rawq.sfield.getType().isTokenized()) {\n        normal = rawq.sfield.getType().getFieldQuery(parser, rawq.sfield, rawq.getJoinedExternalVal());\n      } else {\n        FieldType ft = rawq.sfield.getType();\n        if (rawq.getTermCount() == 1) {\n          normal = ft.getFieldQuery(this.parser, rawq.sfield, rawq.getExternalVals().get(0));\n        } else {\n          BooleanQuery.Builder booleanBuilder = newBooleanQuery();\n          for (String externalVal : rawq.getExternalVals()) {\n            Query subq = ft.getFieldQuery(this.parser, rawq.sfield, externalVal);\n            booleanBuilder.add(subq, BooleanClause.Occur.SHOULD);\n          }\n          normal = QueryUtils.build(booleanBuilder, parser);\n        }\n      }\n    }\n    return normal;\n  }\n\n","sourceOld":"  // Create a \"normal\" query from a RawQuery (or just return the current query if it's not raw)\n  Query rawToNormal(Query q) {\n    Query normal = q;\n    if (q instanceof RawQuery) {\n      RawQuery rawq = (RawQuery)q;\n      if (rawq.sfield.getType().isTokenized()) {\n        normal = rawq.sfield.getType().getFieldQuery(parser, rawq.sfield, rawq.getJoinedExternalVal());\n      } else {\n        FieldType ft = rawq.sfield.getType();\n        if (rawq.getTermCount() == 1) {\n          normal = ft.getFieldQuery(this.parser, rawq.sfield, rawq.getExternalVals().get(0));\n        } else {\n          BooleanQuery.Builder booleanBuilder = newBooleanQuery();\n          for (String externalVal : rawq.getExternalVals()) {\n            Query subq = ft.getFieldQuery(this.parser, rawq.sfield, externalVal);\n            booleanBuilder.add(subq, BooleanClause.Occur.SHOULD);\n          }\n          normal = booleanBuilder.build();\n        }\n      }\n    }\n    return normal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#rawToNormal(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#rawToNormal(Query).mjava","sourceNew":"  // Create a \"normal\" query from a RawQuery (or just return the current query if it's not raw)\n  Query rawToNormal(Query q) {\n    Query normal = q;\n    if (q instanceof RawQuery) {\n      RawQuery rawq = (RawQuery)q;\n      if (rawq.sfield.getType().isTokenized()) {\n        normal = rawq.sfield.getType().getFieldQuery(parser, rawq.sfield, rawq.getJoinedExternalVal());\n      } else {\n        FieldType ft = rawq.sfield.getType();\n        if (rawq.getTermCount() == 1) {\n          normal = ft.getFieldQuery(this.parser, rawq.sfield, rawq.getExternalVals().get(0));\n        } else {\n          BooleanQuery.Builder booleanBuilder = newBooleanQuery();\n          for (String externalVal : rawq.getExternalVals()) {\n            Query subq = ft.getFieldQuery(this.parser, rawq.sfield, externalVal);\n            booleanBuilder.add(subq, BooleanClause.Occur.SHOULD);\n          }\n          normal = QueryUtils.build(booleanBuilder, parser);\n        }\n      }\n    }\n    return normal;\n  }\n\n","sourceOld":"  // Create a \"normal\" query from a RawQuery (or just return the current query if it's not raw)\n  Query rawToNormal(Query q) {\n    Query normal = q;\n    if (q instanceof RawQuery) {\n      RawQuery rawq = (RawQuery)q;\n      if (rawq.sfield.getType().isTokenized()) {\n        normal = rawq.sfield.getType().getFieldQuery(parser, rawq.sfield, rawq.getJoinedExternalVal());\n      } else {\n        FieldType ft = rawq.sfield.getType();\n        if (rawq.getTermCount() == 1) {\n          normal = ft.getFieldQuery(this.parser, rawq.sfield, rawq.getExternalVals().get(0));\n        } else {\n          BooleanQuery.Builder booleanBuilder = newBooleanQuery();\n          for (String externalVal : rawq.getExternalVals()) {\n            Query subq = ft.getFieldQuery(this.parser, rawq.sfield, externalVal);\n            booleanBuilder.add(subq, BooleanClause.Occur.SHOULD);\n          }\n          normal = booleanBuilder.build();\n        }\n      }\n    }\n    return normal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#rawToNormal(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#rawToNormal(Query).mjava","sourceNew":"  // Create a \"normal\" query from a RawQuery (or just return the current query if it's not raw)\n  Query rawToNormal(Query q) {\n    Query normal = q;\n    if (q instanceof RawQuery) {\n      RawQuery rawq = (RawQuery)q;\n      if (rawq.sfield.getType().isTokenized()) {\n        normal = rawq.sfield.getType().getFieldQuery(parser, rawq.sfield, rawq.getJoinedExternalVal());\n      } else {\n        FieldType ft = rawq.sfield.getType();\n        if (rawq.getTermCount() == 1) {\n          normal = ft.getFieldQuery(this.parser, rawq.sfield, rawq.getExternalVals().get(0));\n        } else {\n          BooleanQuery.Builder booleanBuilder = newBooleanQuery();\n          for (String externalVal : rawq.getExternalVals()) {\n            Query subq = ft.getFieldQuery(this.parser, rawq.sfield, externalVal);\n            booleanBuilder.add(subq, BooleanClause.Occur.SHOULD);\n          }\n          normal = QueryUtils.build(booleanBuilder, parser);\n        }\n      }\n    }\n    return normal;\n  }\n\n","sourceOld":"  // Create a \"normal\" query from a RawQuery (or just return the current query if it's not raw)\n  Query rawToNormal(Query q) {\n    Query normal = q;\n    if (q instanceof RawQuery) {\n      RawQuery rawq = (RawQuery)q;\n      if (rawq.sfield.getType().isTokenized()) {\n        normal = rawq.sfield.getType().getFieldQuery(parser, rawq.sfield, rawq.getJoinedExternalVal());\n      } else {\n        FieldType ft = rawq.sfield.getType();\n        if (rawq.getTermCount() == 1) {\n          normal = ft.getFieldQuery(this.parser, rawq.sfield, rawq.getExternalVals().get(0));\n        } else {\n          BooleanQuery.Builder booleanBuilder = newBooleanQuery();\n          for (String externalVal : rawq.getExternalVals()) {\n            Query subq = ft.getFieldQuery(this.parser, rawq.sfield, externalVal);\n            booleanBuilder.add(subq, BooleanClause.Occur.SHOULD);\n          }\n          normal = booleanBuilder.build();\n        }\n      }\n    }\n    return normal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"39fdbc59d893f5a211736e861fe145798a40b9ff":["e55782fb51a6e9789542818eb2161a3247f39ace"],"c03778630c4604270d88c148afb8c7de35b51d3c":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["c03778630c4604270d88c148afb8c7de35b51d3c","39fdbc59d893f5a211736e861fe145798a40b9ff"],"e55782fb51a6e9789542818eb2161a3247f39ace":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["e55782fb51a6e9789542818eb2161a3247f39ace","39fdbc59d893f5a211736e861fe145798a40b9ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"39fdbc59d893f5a211736e861fe145798a40b9ff":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"c03778630c4604270d88c148afb8c7de35b51d3c":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["727bb765ff2542275f6d31f67be18d7104bae148","c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace"],"e55782fb51a6e9789542818eb2161a3247f39ace":["39fdbc59d893f5a211736e861fe145798a40b9ff","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}