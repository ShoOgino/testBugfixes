{"path":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#doTestSoftAndHardCommitMaxTimeMixedAdds(CommitWithinType).mjava","commits":[{"id":"25aea5e95fe9399f6ca9758178fa3a003159ff4d","date":1507651705,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SoftAutoCommitTest#doTestSoftAndHardCommitMaxTimeMixedAdds(CommitWithinType).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSoftAndHardCommitMaxTimeMixedAdds(final CommitWithinType commitWithinType)\n    throws Exception {\n    \n    final int softCommitWaitMillis = 500;\n    final int hardCommitWaitMillis = 1200;\n    final int commitWithin = commitWithinType.useValue(softCommitWaitMillis, hardCommitWaitMillis);\n    \n    CommitTracker hardTracker = updater.commitTracker;\n    CommitTracker softTracker = updater.softCommitTracker;\n    updater.setCommitWithinSoftCommit(commitWithinType.equals(CommitWithinType.SOFT));\n    \n    // wait out any leaked commits\n    monitor.soft.poll(softCommitWaitMillis * 2, MILLISECONDS);\n    monitor.hard.poll(hardCommitWaitMillis * 2, MILLISECONDS);\n    \n    int startingHardCommits = hardTracker.getCommitCount();\n    int startingSoftCommits = softTracker.getCommitCount();\n    \n    softTracker.setTimeUpperBound(commitWithinType.equals(CommitWithinType.SOFT) ? -1 : softCommitWaitMillis);\n    softTracker.setDocsUpperBound(-1);\n    hardTracker.setTimeUpperBound(commitWithinType.equals(CommitWithinType.HARD) ? -1 : hardCommitWaitMillis);\n    hardTracker.setDocsUpperBound(-1);\n    // simplify whats going on by only having soft auto commits trigger new searchers\n    hardTracker.setOpenSearcher(false);\n\n    // Add a single document\n    long add529 = System.nanoTime();\n    assertU(adoc(commitWithin, \"id\", \"529\", \"subject\", \"the doc we care about in this test\"));\n\n    monitor.assertSaneOffers();\n\n    // Wait for the soft commit with some fudge\n    Long soft529 = monitor.soft.poll(softCommitWaitMillis * 5, MILLISECONDS);\n    assertNotNull(\"soft529 wasn't fast enough\", soft529);\n    monitor.assertSaneOffers();\n\n    \n    // wait for the hard commit\n    Long hard529 = monitor.hard.poll(hardCommitWaitMillis * 5, MILLISECONDS);\n    assertNotNull(\"hard529 wasn't fast enough\", hard529);\n    \n    // check for the searcher, should have happened right after soft commit\n    Long searcher529 = monitor.searcher.poll(5000, MILLISECONDS);\n    assertNotNull(\"searcher529 wasn't fast enough\", searcher529);\n    monitor.assertSaneOffers();\n\n    // toss in another doc, shouldn't affect first hard commit time we poll\n    assertU(adoc(commitWithin, \"id\", \"530\", \"subject\", \"just for noise/activity\"));\n\n\n    monitor.assertSaneOffers();\n\n    final long soft529Ms = TimeUnit.MILLISECONDS.convert(soft529 - add529, TimeUnit.NANOSECONDS);\n    assertTrue(\"soft529 occurred too fast, in \" +\n            soft529Ms + \"ms, less than soft commit interval \" + softCommitWaitMillis,\n        soft529Ms >= softCommitWaitMillis);\n    final long hard529Ms = TimeUnit.MILLISECONDS.convert(hard529 - add529, TimeUnit.NANOSECONDS);\n    assertTrue(\"hard529 occurred too fast, in \" +\n            hard529Ms + \"ms, less than hard commit interval \" + hardCommitWaitMillis,\n        hard529Ms >= hardCommitWaitMillis);\n\n    // however slow the machine was to do the soft commit compared to expected,\n    // assume newSearcher had some magnitude of that much overhead as well \n    long slowTestFudge = Math.max(300, 12 * (soft529Ms - softCommitWaitMillis));\n    final long softCommitToSearcherOpenMs = TimeUnit.MILLISECONDS.convert(searcher529 - soft529, TimeUnit.NANOSECONDS);\n    assertTrue(\"searcher529 wasn't soon enough after soft529: Took \" +\n            softCommitToSearcherOpenMs + \"ms, >= acceptable \" + slowTestFudge + \"ms (fudge)\",\n        softCommitToSearcherOpenMs < slowTestFudge);\n\n    assertTrue(\"hard529 was before searcher529: \" +\n               searcher529 + \" !<= \" + hard529,\n               searcher529 <= hard529);\n\n    monitor.assertSaneOffers();\n\n    // there may have been (or will be) a second hard commit for 530\n    Long hard530 = monitor.hard.poll(hardCommitWaitMillis * 5, MILLISECONDS);\n    assertEquals(\"Tracker reports too many hard commits\",\n                 (null == hard530 ? 1 : 2),\n                 hardTracker.getCommitCount() - startingHardCommits);\n\n    // there may have been a second soft commit for 530, \n    // but if so it must have already happend\n    Long soft530 = monitor.soft.poll(0, MILLISECONDS);\n    if (null != soft530) {\n      assertEquals(\"Tracker reports too many soft commits\",\n                   2, softTracker.getCommitCount() - startingSoftCommits);\n      if (null != hard530) {\n        assertTrue(\"soft530 after hard530: \" +\n                   soft530 + \" !<= \" + hard530,\n                   soft530 <= hard530);\n      } else {\n        assertTrue(\"soft530 after hard529 but no hard530: \" +\n                   soft530 + \" !<= \" + hard529,\n                   soft530 <= hard529);\n      }\n    } else {\n      assertEquals(\"Tracker reports too many soft commits\",\n                   1, softTracker.getCommitCount() - startingSoftCommits);\n    }\n      \n    if (null != soft530 || null != hard530) {\n      assertNotNull(\"at least one extra commit for 530, but no searcher\",\n                    monitor.searcher.poll(0, MILLISECONDS));\n    }\n\n    // clear commits\n    monitor.hard.clear();\n    monitor.soft.clear();\n\n    // wait a bit, w/o other action we shouldn't see any \n    // new hard/soft commits \n    assertNull(\"Got a hard commit we weren't expecting\",\n               monitor.hard.poll(1000, MILLISECONDS));\n    assertNull(\"Got a soft commit we weren't expecting\",\n               monitor.soft.poll(0, MILLISECONDS));\n\n    monitor.assertSaneOffers();\n    monitor.searcher.clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"25aea5e95fe9399f6ca9758178fa3a003159ff4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["25aea5e95fe9399f6ca9758178fa3a003159ff4d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25aea5e95fe9399f6ca9758178fa3a003159ff4d"],"25aea5e95fe9399f6ca9758178fa3a003159ff4d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}