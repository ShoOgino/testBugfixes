{"path":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n          boolean topScorer, Bits acceptDocs) throws IOException {\n        Scorer scorer = w.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n        if (scorer != null) {\n          // check that scorer obeys disi contract for docID() before next()/advance\n          try {\n            int docid = scorer.docID();\n            assert docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS;\n          } catch (UnsupportedOperationException ignored) {\n            // from a top-level BS1\n            assert topScorer;\n          }\n        }\n        return scorer;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","sourceOld":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n          boolean topScorer, Bits acceptDocs) throws IOException {\n        Scorer scorer = w.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n        if (scorer != null) {\n          // check that scorer obeys disi contract for docID() before next()/advance\n          try {\n            int docid = scorer.docID();\n            assert docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS;\n          } catch (UnsupportedOperationException ignored) {\n            // from a top-level BS1\n            assert topScorer;\n          }\n        }\n        return scorer;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n          boolean topScorer, Bits acceptDocs) throws IOException {\n        Scorer scorer = w.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n        if (scorer != null) {\n          // check that scorer obeys disi contract for docID() before next()/advance\n          try {\n            int docid = scorer.docID();\n            assert docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS;\n          } catch (UnsupportedOperationException ignored) {\n            // from a top-level BS1\n            assert topScorer;\n          }\n        }\n        return scorer;\n      }\n\n      @Override\n      public float getValueForNormalization() {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","sourceOld":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n          boolean topScorer, Bits acceptDocs) throws IOException {\n        Scorer scorer = w.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n        if (scorer != null) {\n          // check that scorer obeys disi contract for docID() before next()/advance\n          try {\n            int docid = scorer.docID();\n            assert docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS;\n          } catch (UnsupportedOperationException ignored) {\n            // from a top-level BS1\n            assert topScorer;\n          }\n        }\n        return scorer;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","bugFix":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n          boolean topScorer, Bits acceptDocs) throws IOException {\n        Scorer scorer = w.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n        if (scorer != null) {\n          // check that scorer obeys disi contract for docID() before next()/advance\n          try {\n            int docid = scorer.docID();\n            assert docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS;\n          } catch (UnsupportedOperationException ignored) {\n            // from a top-level BS1\n            assert topScorer;\n          }\n        }\n        return scorer;\n      }\n\n      @Override\n      public float getValueForNormalization() {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","sourceOld":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n          boolean topScorer, Bits acceptDocs) throws IOException {\n        Scorer scorer = w.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n        if (scorer != null) {\n          // check that scorer obeys disi contract for docID() before next()/advance\n          try {\n            int docid = scorer.docID();\n            assert docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS;\n          } catch (UnsupportedOperationException ignored) {\n            // from a top-level BS1\n            assert topScorer;\n          }\n        }\n        return scorer;\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd","date":1361836936,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n          boolean topScorer, Bits acceptDocs) throws IOException {\n        Scorer scorer = w.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n        if (scorer != null) {\n          // check that scorer obeys disi contract for docID() before next()/advance\n          try {\n            int docid = scorer.docID();\n            assert docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS;\n          } catch (UnsupportedOperationException ignored) {\n            // from a top-level BS1\n            assert topScorer;\n          }\n        }\n        return scorer;\n      }\n\n      @Override\n      public float getValueForNormalization() {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: if this returns false, we should wrap\n        // Scorer with AssertingScorer that confirms docIDs\n        // are in order?\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","sourceOld":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n          boolean topScorer, Bits acceptDocs) throws IOException {\n        Scorer scorer = w.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n        if (scorer != null) {\n          // check that scorer obeys disi contract for docID() before next()/advance\n          try {\n            int docid = scorer.docID();\n            assert docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS;\n          } catch (UnsupportedOperationException ignored) {\n            // from a top-level BS1\n            assert topScorer;\n          }\n        }\n        return scorer;\n      }\n\n      @Override\n      public float getValueForNormalization() {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new AssertingWeight(random, w) {\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public float getValueForNormalization() {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n    };\n  }\n\n","sourceOld":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n          boolean topScorer, Bits acceptDocs) throws IOException {\n        Scorer scorer = w.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n        if (scorer != null) {\n          // check that scorer obeys disi contract for docID() before next()/advance\n          try {\n            int docid = scorer.docID();\n            assert docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS;\n          } catch (UnsupportedOperationException ignored) {\n            // from a top-level BS1\n            assert topScorer;\n          }\n        }\n        return scorer;\n      }\n\n      @Override\n      public float getValueForNormalization() {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        // TODO: if this returns false, we should wrap\n        // Scorer with AssertingScorer that confirms docIDs\n        // are in order?\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new AssertingWeight(random, w) {\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n        Scorer scorer = w.scorer(context, acceptDocs, needsScores);\n        if (scorer != null) {\n          // check that scorer obeys disi contract for docID() before next()/advance\n          try {\n            int docid = scorer.docID();\n            assert docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS;\n          } catch (UnsupportedOperationException ignored) {\n            // from a top-level BS1\n          }\n        }\n        return scorer;\n      }\n\n      @Override\n      public float getValueForNormalization() {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n    };\n  }\n\n","sourceOld":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new AssertingWeight(random, w) {\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public float getValueForNormalization() {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query, boolean needsScores) throws IOException {\n    final Weight w = super.createNormalizedWeight(query, needsScores);\n    return new AssertingWeight(random, w) {\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        Scorer scorer = w.scorer(context, acceptDocs);\n        if (scorer != null) {\n          // check that scorer obeys disi contract for docID() before next()/advance\n          try {\n            int docid = scorer.docID();\n            assert docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS;\n          } catch (UnsupportedOperationException ignored) {\n            // from a top-level BS1\n          }\n        }\n        return scorer;\n      }\n\n      @Override\n      public float getValueForNormalization() {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n    };\n  }\n\n","sourceOld":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new AssertingWeight(random, w) {\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n        Scorer scorer = w.scorer(context, acceptDocs, needsScores);\n        if (scorer != null) {\n          // check that scorer obeys disi contract for docID() before next()/advance\n          try {\n            int docid = scorer.docID();\n            assert docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS;\n          } catch (UnsupportedOperationException ignored) {\n            // from a top-level BS1\n          }\n        }\n        return scorer;\n      }\n\n      @Override\n      public float getValueForNormalization() {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["51f5280f31484820499077f41fcdfe92d527d9dc"],"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd"],"51f5280f31484820499077f41fcdfe92d527d9dc":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb17639909a369c1e64866842e5c213440acc17e"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["fb17639909a369c1e64866842e5c213440acc17e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}