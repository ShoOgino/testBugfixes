{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","commits":[{"id":"c32a8448145a74a8902798f2e63e322827757ff2","date":1496834422,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    assertEquals(overseerLeader, ev.getProperty(TriggerEvent.NODE_NAME));\n    assertEquals(AutoScaling.EventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","98d4af357762468d37df7424f81785cd89b49a7b","98d4af357762468d37df7424f81785cd89b49a7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"664ff2b928393480d9655010aa700656b0fcade0","date":1496842764,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    assertEquals(overseerLeader, ev.getProperty(TriggerEvent.NODE_NAME));\n    assertEquals(AutoScaling.EventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2480cf60350a342e5e57439f3e71092fabc364a2","date":1499215962,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    assertEquals(overseerLeader, ev.getProperty(TriggerEvent.NODE_NAME));\n    assertEquals(AutoScaling.EventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    assertEquals(overseerLeader, ev.getProperty(TriggerEvent.NODE_NAME));\n    assertEquals(AutoScaling.EventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0d9c88546c1a130d50b56981790d87a308daffd","date":1499234617,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    assertEquals(overseerLeader, ev.getProperty(TriggerEvent.NODE_NAME));\n    assertEquals(AutoScaling.EventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    assertEquals(overseerLeader, ev.getProperty(TriggerEvent.NODE_NAME));\n    assertEquals(AutoScaling.EventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    assertEquals(overseerLeader, ev.getProperty(TriggerEvent.NODE_NAME));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    assertEquals(overseerLeader, ev.getProperty(TriggerEvent.NODE_NAME));\n    assertEquals(AutoScaling.EventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1","date":1503489512,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>)ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    assertEquals(overseerLeader, ev.getProperty(TriggerEvent.NODE_NAME));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>)ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>)ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9ccfe45460d496c5e5e1b70396521dac842d966","date":1516798975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>)ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>)ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>)ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>)ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5aafdd1bebcab8e3b8107db6700fc679b16cc58","date":1519934338,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>)ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>)ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","date":1522388336,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    actionConstructorCalled = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>)ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeMarkersRegistrationTest#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeMarkersRegistration().mjava","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    actionConstructorCalled = new CountDownLatch(1);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>) ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    // add a node\n    JettySolrRunner node = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node.getNodeName();\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\", zkClient().exists(pathAdded, true));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    Thread.sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", zkClient().exists(pathLost, true));\n\n    listener.reset();\n\n    // set up triggers\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerMR',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_triggerMR',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    overseerLeader = (String) overSeerStatus.get(\"leader\");\n    overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    JettySolrRunner node1 = cluster.startJettySolrRunner();\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1.getNodeName(), listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1.getNodeName();\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", zkClient().exists(pathAdded, true));\n\n    Thread.sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\", zkClient().exists(pathAdded, true));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    if (!listener.onChangeLatch.await(10, TimeUnit.SECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20, TimeUnit.SECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>)ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2480cf60350a342e5e57439f3e71092fabc364a2":["664ff2b928393480d9655010aa700656b0fcade0"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["e0d9c88546c1a130d50b56981790d87a308daffd"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["560c18d71dad43d675158783c3840f8c80d6d39c","d9ccfe45460d496c5e5e1b70396521dac842d966"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["a5aafdd1bebcab8e3b8107db6700fc679b16cc58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c32a8448145a74a8902798f2e63e322827757ff2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"e0d9c88546c1a130d50b56981790d87a308daffd":["664ff2b928393480d9655010aa700656b0fcade0","2480cf60350a342e5e57439f3e71092fabc364a2"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["a5aafdd1bebcab8e3b8107db6700fc679b16cc58","deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"a5aafdd1bebcab8e3b8107db6700fc679b16cc58":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"664ff2b928393480d9655010aa700656b0fcade0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c32a8448145a74a8902798f2e63e322827757ff2"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"2480cf60350a342e5e57439f3e71092fabc364a2":["e0d9c88546c1a130d50b56981790d87a308daffd"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["a5aafdd1bebcab8e3b8107db6700fc679b16cc58"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","c32a8448145a74a8902798f2e63e322827757ff2","560c18d71dad43d675158783c3840f8c80d6d39c","664ff2b928393480d9655010aa700656b0fcade0"],"c32a8448145a74a8902798f2e63e322827757ff2":["664ff2b928393480d9655010aa700656b0fcade0"],"e0d9c88546c1a130d50b56981790d87a308daffd":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"560c18d71dad43d675158783c3840f8c80d6d39c":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","d9ccfe45460d496c5e5e1b70396521dac842d966"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"664ff2b928393480d9655010aa700656b0fcade0":["2480cf60350a342e5e57439f3e71092fabc364a2","e0d9c88546c1a130d50b56981790d87a308daffd"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"a5aafdd1bebcab8e3b8107db6700fc679b16cc58":["deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}