{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/AbstractCloudBackupRestoreTestCase#testInvalidPath(String).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AbstractCloudBackupRestoreTestCase#testInvalidPath(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#testInvalidPath(String).mjava","sourceNew":"  // This test verifies the system behavior when the backup location cluster property is configured with an invalid\n  // value for the specified repository (and the default backup location is not configured in solr.xml).\n  private void testInvalidPath(String collectionName) throws Exception {\n    // Execute this test only if the default backup location is NOT configured in solr.xml\n    if (getBackupLocation() == null) {\n      return;\n    }\n\n    String backupName = \"invalidbackuprequest\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    ClusterProp req = CollectionAdminRequest.setClusterProperty(CoreAdminParams.BACKUP_LOCATION, \"/location/does/not/exist\");\n    assertEquals(0, req.process(solrClient).getStatus());\n\n    // Do not specify the backup location.\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      backup.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n\n    String restoreCollectionName = collectionName + \"_invalidrequest\";\n    CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      restore.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n  }\n\n","sourceOld":"  // This test verifies the system behavior when the backup location cluster property is configured with an invalid\n  // value for the specified repository (and the default backup location is not configured in solr.xml).\n  private void testInvalidPath(String collectionName) throws Exception {\n    // Execute this test only if the default backup location is NOT configured in solr.xml\n    if (getBackupLocation() == null) {\n      return;\n    }\n\n    String backupName = \"invalidbackuprequest\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    ClusterProp req = CollectionAdminRequest.setClusterProperty(CoreAdminParams.BACKUP_LOCATION, \"/location/does/not/exist\");\n    assertEquals(0, req.process(solrClient).getStatus());\n\n    // Do not specify the backup location.\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      backup.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n\n    String restoreCollectionName = collectionName + \"_invalidrequest\";\n    CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      restore.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AbstractCloudBackupRestoreTestCase#testInvalidPath(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#testInvalidPath(String).mjava","sourceNew":"  // This test verifies the system behavior when the backup location cluster property is configured with an invalid\n  // value for the specified repository (and the default backup location is not configured in solr.xml).\n  private void testInvalidPath(String collectionName) throws Exception {\n    // Execute this test only if the default backup location is NOT configured in solr.xml\n    if (getBackupLocation() == null) {\n      return;\n    }\n\n    String backupName = \"invalidbackuprequest\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    ClusterProp req = CollectionAdminRequest.setClusterProperty(CoreAdminParams.BACKUP_LOCATION, \"/location/does/not/exist\");\n    assertEquals(0, req.process(solrClient).getStatus());\n\n    // Do not specify the backup location.\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      backup.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n\n    String restoreCollectionName = collectionName + \"_invalidrequest\";\n    CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      restore.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n  }\n\n","sourceOld":"  // This test verifies the system behavior when the backup location cluster property is configured with an invalid\n  // value for the specified repository (and the default backup location is not configured in solr.xml).\n  private void testInvalidPath(String collectionName) throws Exception {\n    // Execute this test only if the default backup location is NOT configured in solr.xml\n    if (getBackupLocation() == null) {\n      return;\n    }\n\n    String backupName = \"invalidbackuprequest\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    ClusterProp req = CollectionAdminRequest.setClusterProperty(CoreAdminParams.BACKUP_LOCATION, \"/location/does/not/exist\");\n    assertEquals(0, req.process(solrClient).getStatus());\n\n    // Do not specify the backup location.\n    CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      backup.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n\n    String restoreCollectionName = collectionName + \"_invalidrequest\";\n    CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n        .setRepositoryName(getBackupRepoName());\n    try {\n      restore.process(solrClient);\n      fail(\"This request should have failed since the cluster property value for backup location property is invalid.\");\n    } catch (SolrException ex) {\n      assertEquals(ErrorCode.SERVER_ERROR.code, ex.code());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}