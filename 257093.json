{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#collapse(int,int,int).mjava","commits":[{"id":"8ced52befdc8d88d90766aadbaac496f3fd0e4ee","date":1421070034,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.ValueSourceCollapse#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if(needsScores || cscore) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      if(needsScores || cscore) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float val = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(val, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = val;\n          if(needsScores) {\n            scores[ord] = score;\n          }\n        }\n      } else if (this.collapsedSet.get(globalDoc)) {\n        //Elevated doc so do nothing\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(val, nullVal)) {\n          nullVal = val;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b42ae09e9ac11a8b035eb691b3aa7ede98551622","date":1473618566,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if(needsScores || cscore) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n\n","bugFix":["51e87f816b84771636e67fc67039925030ebe671"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if(needsScores || cscore) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if(needsScores || cscore) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if(needsScores || cscore) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3","date":1556831715,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores[ord] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            scores[ord] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3575e61fd7df2bbcce8b977a23d3d67aa423ce62","date":1586507050,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores.put(ord, score);\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals[ord])) {\n          ords[ord] = globalDoc;\n          ordVals[ord] = currentVal;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores[ord] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a813b523bf76aa0a68013d636b6eb53cedb142a4","date":1601387389,"type":3,"author":"Guna Sekhar Dora Kovvuru","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#collapse(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdValueSourceStrategy#collapse(int,int,int).mjava","sourceNew":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores.put(ord, score);\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n\n","sourceOld":"    public void collapse(int ord, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      if(boosted && mergeBoost.boost(globalDoc)) {\n        this.boostOrds.add(ord);\n        this.boostDocs.add(globalDoc);\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n        this.collapseScore.score = score;\n      }\n\n      float currentVal = functionValues.floatVal(contextDoc);\n\n      if(ord > -1) {\n        if(comp.test(currentVal, ordVals.get(ord))) {\n          ords.put(ord, globalDoc);\n          ordVals.put(ord, currentVal);\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores.put(ord, score);\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullVal)) {\n          nullVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a813b523bf76aa0a68013d636b6eb53cedb142a4":["3575e61fd7df2bbcce8b977a23d3d67aa423ce62"],"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3575e61fd7df2bbcce8b977a23d3d67aa423ce62":["446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee","89424def13674ea17829b41c5883c54ecc31a132"],"446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b42ae09e9ac11a8b035eb691b3aa7ede98551622":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a813b523bf76aa0a68013d636b6eb53cedb142a4"],"89424def13674ea17829b41c5883c54ecc31a132":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee","b42ae09e9ac11a8b035eb691b3aa7ede98551622"]},"commit2Childs":{"a813b523bf76aa0a68013d636b6eb53cedb142a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","b42ae09e9ac11a8b035eb691b3aa7ede98551622","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"3575e61fd7df2bbcce8b977a23d3d67aa423ce62":["a813b523bf76aa0a68013d636b6eb53cedb142a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"446ec69a32a7e8cb8bf6eb8be693e96ab5f5a0d3":["3575e61fd7df2bbcce8b977a23d3d67aa423ce62"],"b42ae09e9ac11a8b035eb691b3aa7ede98551622":["89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}