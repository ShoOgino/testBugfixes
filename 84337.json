{"path":"solr/core/src/java/org/apache/solr/cloud/ExclusiveSliceProperty#getReplicaFromChanged(Slice,String).mjava","commits":[{"id":"5886c3d78997b0c3f9151247c967e32a8529c59e","date":1473837274,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ExclusiveSliceProperty#getReplicaFromChanged(Slice,String).mjava","pathOld":"/dev/null","sourceNew":"  // Just a place to encapsulate the fact that we need to have new slices (copy) to update before we\n  // put this all in the cluster state.\n  private Replica getReplicaFromChanged(Slice origSlice, String replicaName) {\n    Slice newSlice = changedSlices.get(origSlice.getName());\n    Replica replica;\n    if (newSlice != null) {\n      replica = newSlice.getReplica(replicaName);\n    } else {\n      newSlice = new Slice(origSlice.getName(), origSlice.getReplicasCopy(), origSlice.shallowCopy());\n      changedSlices.put(origSlice.getName(), newSlice);\n      replica = newSlice.getReplica(replicaName);\n    }\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Should have been able to find replica '\" +\n          replicaName + \"' in slice '\" + origSlice.getName() + \"'. No action taken\");\n    }\n    return replica;\n\n  }\n  // Main entry point for carrying out the action. Returns \"true\" if we have actually moved properties around.\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ExclusiveSliceProperty#getReplicaFromChanged(Slice,String).mjava","pathOld":"/dev/null","sourceNew":"  // Just a place to encapsulate the fact that we need to have new slices (copy) to update before we\n  // put this all in the cluster state.\n  private Replica getReplicaFromChanged(Slice origSlice, String replicaName) {\n    Slice newSlice = changedSlices.get(origSlice.getName());\n    Replica replica;\n    if (newSlice != null) {\n      replica = newSlice.getReplica(replicaName);\n    } else {\n      newSlice = new Slice(origSlice.getName(), origSlice.getReplicasCopy(), origSlice.shallowCopy());\n      changedSlices.put(origSlice.getName(), newSlice);\n      replica = newSlice.getReplica(replicaName);\n    }\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Should have been able to find replica '\" +\n          replicaName + \"' in slice '\" + origSlice.getName() + \"'. No action taken\");\n    }\n    return replica;\n\n  }\n  // Main entry point for carrying out the action. Returns \"true\" if we have actually moved properties around.\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ExclusiveSliceProperty#getReplicaFromChanged(Slice,String).mjava","pathOld":"/dev/null","sourceNew":"  // Just a place to encapsulate the fact that we need to have new slices (copy) to update before we\n  // put this all in the cluster state.\n  private Replica getReplicaFromChanged(Slice origSlice, String replicaName) {\n    Slice newSlice = changedSlices.get(origSlice.getName());\n    Replica replica;\n    if (newSlice != null) {\n      replica = newSlice.getReplica(replicaName);\n    } else {\n      newSlice = new Slice(origSlice.getName(), origSlice.getReplicasCopy(), origSlice.shallowCopy());\n      changedSlices.put(origSlice.getName(), newSlice);\n      replica = newSlice.getReplica(replicaName);\n    }\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Should have been able to find replica '\" +\n          replicaName + \"' in slice '\" + origSlice.getName() + \"'. No action taken\");\n    }\n    return replica;\n\n  }\n  // Main entry point for carrying out the action. Returns \"true\" if we have actually moved properties around.\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ExclusiveSliceProperty#getReplicaFromChanged(Slice,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ExclusiveSliceProperty#getReplicaFromChanged(Slice,String).mjava","sourceNew":"  // Just a place to encapsulate the fact that we need to have new slices (copy) to update before we\n  // put this all in the cluster state.\n  private Replica getReplicaFromChanged(Slice origSlice, String replicaName) {\n    Slice newSlice = changedSlices.get(origSlice.getName());\n    Replica replica;\n    if (newSlice != null) {\n      replica = newSlice.getReplica(replicaName);\n    } else {\n      newSlice = new Slice(origSlice.getName(), origSlice.getReplicasCopy(), origSlice.shallowCopy(), origSlice.collection);\n      changedSlices.put(origSlice.getName(), newSlice);\n      replica = newSlice.getReplica(replicaName);\n    }\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Should have been able to find replica '\" +\n          replicaName + \"' in slice '\" + origSlice.getName() + \"'. No action taken\");\n    }\n    return replica;\n\n  }\n  // Main entry point for carrying out the action. Returns \"true\" if we have actually moved properties around.\n\n","sourceOld":"  // Just a place to encapsulate the fact that we need to have new slices (copy) to update before we\n  // put this all in the cluster state.\n  private Replica getReplicaFromChanged(Slice origSlice, String replicaName) {\n    Slice newSlice = changedSlices.get(origSlice.getName());\n    Replica replica;\n    if (newSlice != null) {\n      replica = newSlice.getReplica(replicaName);\n    } else {\n      newSlice = new Slice(origSlice.getName(), origSlice.getReplicasCopy(), origSlice.shallowCopy());\n      changedSlices.put(origSlice.getName(), newSlice);\n      replica = newSlice.getReplica(replicaName);\n    }\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Should have been able to find replica '\" +\n          replicaName + \"' in slice '\" + origSlice.getName() + \"'. No action taken\");\n    }\n    return replica;\n\n  }\n  // Main entry point for carrying out the action. Returns \"true\" if we have actually moved properties around.\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ExclusiveSliceProperty#getReplicaFromChanged(Slice,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ExclusiveSliceProperty#getReplicaFromChanged(Slice,String).mjava","sourceNew":"  // Just a place to encapsulate the fact that we need to have new slices (copy) to update before we\n  // put this all in the cluster state.\n  private Replica getReplicaFromChanged(Slice origSlice, String replicaName) {\n    Slice newSlice = changedSlices.get(origSlice.getName());\n    Replica replica;\n    if (newSlice != null) {\n      replica = newSlice.getReplica(replicaName);\n    } else {\n      newSlice = new Slice(origSlice.getName(), origSlice.getReplicasCopy(), origSlice.shallowCopy(), origSlice.collection);\n      changedSlices.put(origSlice.getName(), newSlice);\n      replica = newSlice.getReplica(replicaName);\n    }\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Should have been able to find replica '\" +\n          replicaName + \"' in slice '\" + origSlice.getName() + \"'. No action taken\");\n    }\n    return replica;\n\n  }\n  // Main entry point for carrying out the action. Returns \"true\" if we have actually moved properties around.\n\n","sourceOld":"  // Just a place to encapsulate the fact that we need to have new slices (copy) to update before we\n  // put this all in the cluster state.\n  private Replica getReplicaFromChanged(Slice origSlice, String replicaName) {\n    Slice newSlice = changedSlices.get(origSlice.getName());\n    Replica replica;\n    if (newSlice != null) {\n      replica = newSlice.getReplica(replicaName);\n    } else {\n      newSlice = new Slice(origSlice.getName(), origSlice.getReplicasCopy(), origSlice.shallowCopy());\n      changedSlices.put(origSlice.getName(), newSlice);\n      replica = newSlice.getReplica(replicaName);\n    }\n    if (replica == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Should have been able to find replica '\" +\n          replicaName + \"' in slice '\" + origSlice.getName() + \"'. No action taken\");\n    }\n    return replica;\n\n  }\n  // Main entry point for carrying out the action. Returns \"true\" if we have actually moved properties around.\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6681d02f2302c363be938426e68f8dfd090cc1bf"],"5886c3d78997b0c3f9151247c967e32a8529c59e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5886c3d78997b0c3f9151247c967e32a8529c59e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"5886c3d78997b0c3f9151247c967e32a8529c59e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d3aa683bba99315838c968fefedf3d74f44aa993","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6681d02f2302c363be938426e68f8dfd090cc1bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5886c3d78997b0c3f9151247c967e32a8529c59e","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}