{"path":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFiles(File[],int,OutputStream,String).mjava","commits":[{"id":"c2c3a504730329ae644b009dee43024116605d47","date":1345253449,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFiles(File[],int,OutputStream,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Post all filenames provided in args\n   * @param files array of Files\n   * @param startIndexInArgs offset to start\n   * @param out output stream to post data to\n   * @param type default content-type to use when posting (may be overridden in auto mode)\n   * @return number of files posted\n   * */\n  public int postFiles(File[] files, int startIndexInArgs, OutputStream out, String type) {\n    reset();\n    int filesPosted = 0;\n    for (File srcFile : files) {\n      if(srcFile.isDirectory() && srcFile.canRead()) {\n        filesPosted += postDirectory(srcFile, out, type);\n      } else if (srcFile.isFile() && srcFile.canRead()) {\n        filesPosted += postFiles(new File[] {srcFile}, out, type);\n      } else {\n        File parent = srcFile.getParentFile();\n        if(parent == null) parent = new File(\".\");\n        String fileGlob = srcFile.getName();\n        GlobFileFilter ff = new GlobFileFilter(fileGlob, false);\n        File[] fileList = parent.listFiles(ff);\n        if(fileList == null || fileList.length == 0) {\n          warn(\"No files or directories matching \"+srcFile);\n          continue;          \n        }\n        filesPosted += postFiles(fileList, out, type);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFiles(File[],int,OutputStream,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Post all filenames provided in args\n   * @param files array of Files\n   * @param startIndexInArgs offset to start\n   * @param out output stream to post data to\n   * @param type default content-type to use when posting (may be overridden in auto mode)\n   * @return number of files posted\n   * */\n  public int postFiles(File[] files, int startIndexInArgs, OutputStream out, String type) {\n    reset();\n    int filesPosted = 0;\n    for (File srcFile : files) {\n      if(srcFile.isDirectory() && srcFile.canRead()) {\n        filesPosted += postDirectory(srcFile, out, type);\n      } else if (srcFile.isFile() && srcFile.canRead()) {\n        filesPosted += postFiles(new File[] {srcFile}, out, type);\n      } else {\n        File parent = srcFile.getParentFile();\n        if(parent == null) parent = new File(\".\");\n        String fileGlob = srcFile.getName();\n        GlobFileFilter ff = new GlobFileFilter(fileGlob, false);\n        File[] fileList = parent.listFiles(ff);\n        if(fileList == null || fileList.length == 0) {\n          warn(\"No files or directories matching \"+srcFile);\n          continue;          \n        }\n        filesPosted += postFiles(fileList, out, type);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFiles(File[],int,OutputStream,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Post all filenames provided in args\n   * @param files array of Files\n   * @param startIndexInArgs offset to start\n   * @param out output stream to post data to\n   * @param type default content-type to use when posting (may be overridden in auto mode)\n   * @return number of files posted\n   * */\n  public int postFiles(File[] files, int startIndexInArgs, OutputStream out, String type) {\n    reset();\n    int filesPosted = 0;\n    for (File srcFile : files) {\n      if(srcFile.isDirectory() && srcFile.canRead()) {\n        filesPosted += postDirectory(srcFile, out, type);\n      } else if (srcFile.isFile() && srcFile.canRead()) {\n        filesPosted += postFiles(new File[] {srcFile}, out, type);\n      } else {\n        File parent = srcFile.getParentFile();\n        if(parent == null) parent = new File(\".\");\n        String fileGlob = srcFile.getName();\n        GlobFileFilter ff = new GlobFileFilter(fileGlob, false);\n        File[] fileList = parent.listFiles(ff);\n        if(fileList == null || fileList.length == 0) {\n          warn(\"No files or directories matching \"+srcFile);\n          continue;          \n        }\n        filesPosted += postFiles(fileList, out, type);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFiles(File[],int,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFiles(File[],int,OutputStream,String).mjava","sourceNew":"  /** Post all filenames provided in args\n   * @param files array of Files\n   * @param startIndexInArgs offset to start\n   * @param out output stream to post data to\n   * @param type default content-type to use when posting (may be overridden in auto mode)\n   * @return number of files posted\n   * */\n  public int postFiles(File[] files, int startIndexInArgs, OutputStream out, String type) {\n    reset();\n    int filesPosted = 0;\n    for (File srcFile : files) {\n      if(srcFile.isDirectory() && srcFile.canRead()) {\n        filesPosted += postDirectory(srcFile, out, type);\n      } else if (srcFile.isFile() && srcFile.canRead()) {\n        filesPosted += postFiles(new File[] {srcFile}, out, type);\n      } else {\n        File parent = srcFile.getParentFile();\n        if(parent == null) parent = new File(\".\");\n        String fileGlob = srcFile.getName();\n        GlobFileFilter ff = new GlobFileFilter(fileGlob, false);\n        File[] fileList = parent.listFiles(ff);\n        if(fileList == null || fileList.length == 0) {\n          warn(\"No files or directories matching \"+srcFile);\n          continue;\n        }\n        filesPosted += postFiles(fileList, out, type);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":"  /** Post all filenames provided in args\n   * @param files array of Files\n   * @param startIndexInArgs offset to start\n   * @param out output stream to post data to\n   * @param type default content-type to use when posting (may be overridden in auto mode)\n   * @return number of files posted\n   * */\n  public int postFiles(File[] files, int startIndexInArgs, OutputStream out, String type) {\n    reset();\n    int filesPosted = 0;\n    for (File srcFile : files) {\n      if(srcFile.isDirectory() && srcFile.canRead()) {\n        filesPosted += postDirectory(srcFile, out, type);\n      } else if (srcFile.isFile() && srcFile.canRead()) {\n        filesPosted += postFiles(new File[] {srcFile}, out, type);\n      } else {\n        File parent = srcFile.getParentFile();\n        if(parent == null) parent = new File(\".\");\n        String fileGlob = srcFile.getName();\n        GlobFileFilter ff = new GlobFileFilter(fileGlob, false);\n        File[] fileList = parent.listFiles(ff);\n        if(fileList == null || fileList.length == 0) {\n          warn(\"No files or directories matching \"+srcFile);\n          continue;          \n        }\n        filesPosted += postFiles(fileList, out, type);\n      }\n    }\n    return filesPosted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fb06c57f5589d7e17af048c4cabacfb8dba7e55","date":1575754331,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFiles(File[],int,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFiles(File[],int,OutputStream,String).mjava","sourceNew":"  /** Post all filenames provided in args\n   * @param files array of Files\n   * @param startIndexInArgs offset to start\n   * @param out output stream to post data to\n   * @param type default content-type to use when posting (may be overridden in auto mode)\n   * @return number of files posted\n   * */\n  public int postFiles(File[] files, int startIndexInArgs, OutputStream out, String type) {\n    reset();\n    int filesPosted = 0;\n    for (File srcFile : files) {\n      boolean isValidPath = checkIsValidPath(srcFile);\n      if(isValidPath && srcFile.isDirectory() && srcFile.canRead()) {\n        filesPosted += postDirectory(srcFile, out, type);\n      } else if (isValidPath && srcFile.isFile() && srcFile.canRead()) {\n        filesPosted += postFiles(new File[] {srcFile}, out, type);\n      } else {\n        filesPosted += handleGlob(srcFile, out, type);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":"  /** Post all filenames provided in args\n   * @param files array of Files\n   * @param startIndexInArgs offset to start\n   * @param out output stream to post data to\n   * @param type default content-type to use when posting (may be overridden in auto mode)\n   * @return number of files posted\n   * */\n  public int postFiles(File[] files, int startIndexInArgs, OutputStream out, String type) {\n    reset();\n    int filesPosted = 0;\n    for (File srcFile : files) {\n      if(srcFile.isDirectory() && srcFile.canRead()) {\n        filesPosted += postDirectory(srcFile, out, type);\n      } else if (srcFile.isFile() && srcFile.canRead()) {\n        filesPosted += postFiles(new File[] {srcFile}, out, type);\n      } else {\n        File parent = srcFile.getParentFile();\n        if(parent == null) parent = new File(\".\");\n        String fileGlob = srcFile.getName();\n        GlobFileFilter ff = new GlobFileFilter(fileGlob, false);\n        File[] fileList = parent.listFiles(ff);\n        if(fileList == null || fileList.length == 0) {\n          warn(\"No files or directories matching \"+srcFile);\n          continue;\n        }\n        filesPosted += postFiles(fileList, out, type);\n      }\n    }\n    return filesPosted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebdcd7cba625039937ab5b668449544f9dd36927","date":1575885354,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFiles(File[],int,OutputStream,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#postFiles(File[],int,OutputStream,String).mjava","sourceNew":"  /** Post all filenames provided in args\n   * @param files array of Files\n   * @param startIndexInArgs offset to start\n   * @param out output stream to post data to\n   * @param type default content-type to use when posting (may be overridden in auto mode)\n   * @return number of files posted\n   * */\n  public int postFiles(File[] files, int startIndexInArgs, OutputStream out, String type) {\n    reset();\n    int filesPosted = 0;\n    for (File srcFile : files) {\n      boolean isValidPath = checkIsValidPath(srcFile);\n      if(isValidPath && srcFile.isDirectory() && srcFile.canRead()) {\n        filesPosted += postDirectory(srcFile, out, type);\n      } else if (isValidPath && srcFile.isFile() && srcFile.canRead()) {\n        filesPosted += postFiles(new File[] {srcFile}, out, type);\n      } else {\n        filesPosted += handleGlob(srcFile, out, type);\n      }\n    }\n    return filesPosted;\n  }\n\n","sourceOld":"  /** Post all filenames provided in args\n   * @param files array of Files\n   * @param startIndexInArgs offset to start\n   * @param out output stream to post data to\n   * @param type default content-type to use when posting (may be overridden in auto mode)\n   * @return number of files posted\n   * */\n  public int postFiles(File[] files, int startIndexInArgs, OutputStream out, String type) {\n    reset();\n    int filesPosted = 0;\n    for (File srcFile : files) {\n      if(srcFile.isDirectory() && srcFile.canRead()) {\n        filesPosted += postDirectory(srcFile, out, type);\n      } else if (srcFile.isFile() && srcFile.canRead()) {\n        filesPosted += postFiles(new File[] {srcFile}, out, type);\n      } else {\n        File parent = srcFile.getParentFile();\n        if(parent == null) parent = new File(\".\");\n        String fileGlob = srcFile.getName();\n        GlobFileFilter ff = new GlobFileFilter(fileGlob, false);\n        File[] fileList = parent.listFiles(ff);\n        if(fileList == null || fileList.length == 0) {\n          warn(\"No files or directories matching \"+srcFile);\n          continue;\n        }\n        filesPosted += postFiles(fileList, out, type);\n      }\n    }\n    return filesPosted;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"616c1830142ff5c1ddedec1ed898733b73c8e23b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"c2c3a504730329ae644b009dee43024116605d47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2fb06c57f5589d7e17af048c4cabacfb8dba7e55":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["c2c3a504730329ae644b009dee43024116605d47"],"ebdcd7cba625039937ab5b668449544f9dd36927":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","2fb06c57f5589d7e17af048c4cabacfb8dba7e55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fb06c57f5589d7e17af048c4cabacfb8dba7e55"]},"commit2Childs":{"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","c2c3a504730329ae644b009dee43024116605d47"],"c2c3a504730329ae644b009dee43024116605d47":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"2fb06c57f5589d7e17af048c4cabacfb8dba7e55":["ebdcd7cba625039937ab5b668449544f9dd36927","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["2fb06c57f5589d7e17af048c4cabacfb8dba7e55","ebdcd7cba625039937ab5b668449544f9dd36927"],"ebdcd7cba625039937ab5b668449544f9dd36927":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","ebdcd7cba625039937ab5b668449544f9dd36927","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}