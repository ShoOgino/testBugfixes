{"path":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#simpleBackupCheck(File,int,String).mjava","commits":[{"id":"19f02bb04467ed179738a398a7da80bbbe161c16","date":1573660732,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#simpleBackupCheck(File,int,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simple check that the backup exists, is a valid index, and contains the expected number of docs.  \n   * If expectedSegmentsFileName is non null then confirms that file exists in the bakup dir \n   * <em>and</em> that it is reported as the current segment file when opening a reader on that backup.\n   */\n  private static void simpleBackupCheck(final File backup, final int numDocs,\n                                        final String expectedSegmentsFileName) throws IOException {\n    assertNotNull(backup);\n    assertTrue(\"Backup doesn't exist\" + backup.toString(), backup.exists());\n    if (null != expectedSegmentsFileName) {\n      assertTrue(expectedSegmentsFileName + \" doesn't exist in \" + backup.toString(),\n                 new File(backup, expectedSegmentsFileName).exists());\n    }\n    try (Directory dir = FSDirectory.open(backup.toPath())) {\n      TestUtil.checkIndex(dir, true, true, null);\n      try (DirectoryReader r = DirectoryReader.open(dir)) {\n        assertEquals(\"numDocs in \" + backup.toString(),\n                     numDocs, r.numDocs());\n        if (null != expectedSegmentsFileName) {\n          assertEquals(\"segmentsFile of IndexCommit for: \" + backup.toString(),\n                       expectedSegmentsFileName, r.getIndexCommit().getSegmentsFileName());\n        }\n      }\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19f02bb04467ed179738a398a7da80bbbe161c16":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19f02bb04467ed179738a398a7da80bbbe161c16"]},"commit2Childs":{"19f02bb04467ed179738a398a7da80bbbe161c16":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19f02bb04467ed179738a398a7da80bbbe161c16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}