{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","sourceNew":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * @param directory\n   *    The {@link Directory} in which to the taxonomy lives. Note that\n   *    the taxonomy is read directly to that directory (not from a\n   *    subdirectory of it).\n   * @throws CorruptIndexException if the Taxonomy is corrupted.\n   * @throws IOException if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    this.indexReader = openIndexReader(directory);\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<String, Integer>(4000);\n    categoryCache = new LRUHashMap<Integer, String>(4000);\n\n    // TODO (Facet): consider lazily create parent array when asked, not in the constructor\n    parentArray = new ParentArray();\n    parentArray.refresh(indexReader);\n  }\n\n","sourceOld":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * @param directory\n   *    The {@link Directory} in which to the taxonomy lives. Note that\n   *    the taxonomy is read directly to that directory (not from a\n   *    subdirectory of it).\n   * @throws CorruptIndexException if the Taxonomy is corrupted.\n   * @throws IOException if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    this.indexReader = openIndexReader(directory);\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<String, Integer>(4000);\n    categoryCache = new LRUHashMap<Integer, String>(4000);\n\n    // TODO (Facet): consider lazily create parent array when asked, not in the constructor\n    parentArray = new ParentArray();\n    parentArray.refresh(indexReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","sourceNew":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * \n   * @param directory\n   *          The {@link Directory} in which the taxonomy resides.\n   * @throws CorruptIndexException\n   *           if the Taxonomy is corrupt.\n   * @throws IOException\n   *           if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    indexReader = openIndexReader(directory);\n    taxoWriter = null;\n    taxoEpoch = -1;\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<String, Integer>(DEFAULT_CACHE_VALUE);\n    categoryCache = new LRUHashMap<Integer, String>(DEFAULT_CACHE_VALUE);\n  }\n\n","sourceOld":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * @param directory\n   *    The {@link Directory} in which to the taxonomy lives. Note that\n   *    the taxonomy is read directly to that directory (not from a\n   *    subdirectory of it).\n   * @throws CorruptIndexException if the Taxonomy is corrupted.\n   * @throws IOException if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    this.indexReader = openIndexReader(directory);\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<String, Integer>(4000);\n    categoryCache = new LRUHashMap<Integer, String>(4000);\n\n    // TODO (Facet): consider lazily create parent array when asked, not in the constructor\n    parentArray = new ParentArray();\n    parentArray.refresh(indexReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","sourceNew":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * \n   * @param directory\n   *          The {@link Directory} in which the taxonomy resides.\n   * @throws CorruptIndexException\n   *           if the Taxonomy is corrupt.\n   * @throws IOException\n   *           if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    indexReader = openIndexReader(directory);\n    taxoWriter = null;\n    taxoEpoch = -1;\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<String, Integer>(DEFAULT_CACHE_VALUE);\n    categoryCache = new LRUHashMap<Integer, String>(DEFAULT_CACHE_VALUE);\n  }\n\n","sourceOld":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * @param directory\n   *    The {@link Directory} in which to the taxonomy lives. Note that\n   *    the taxonomy is read directly to that directory (not from a\n   *    subdirectory of it).\n   * @throws CorruptIndexException if the Taxonomy is corrupted.\n   * @throws IOException if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    this.indexReader = openIndexReader(directory);\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<String, Integer>(4000);\n    categoryCache = new LRUHashMap<Integer, String>(4000);\n\n    // TODO (Facet): consider lazily create parent array when asked, not in the constructor\n    parentArray = new ParentArray();\n    parentArray.refresh(indexReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","sourceNew":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * \n   * @param directory\n   *          The {@link Directory} in which the taxonomy resides.\n   * @throws CorruptIndexException\n   *           if the Taxonomy is corrupt.\n   * @throws IOException\n   *           if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    indexReader = openIndexReader(directory);\n    taxoWriter = null;\n    taxoEpoch = -1;\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<CategoryPath, Integer>(DEFAULT_CACHE_VALUE);\n    categoryCache = new LRUHashMap<Integer, CategoryPath>(DEFAULT_CACHE_VALUE);\n  }\n\n","sourceOld":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * \n   * @param directory\n   *          The {@link Directory} in which the taxonomy resides.\n   * @throws CorruptIndexException\n   *           if the Taxonomy is corrupt.\n   * @throws IOException\n   *           if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    indexReader = openIndexReader(directory);\n    taxoWriter = null;\n    taxoEpoch = -1;\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<String, Integer>(DEFAULT_CACHE_VALUE);\n    categoryCache = new LRUHashMap<Integer, String>(DEFAULT_CACHE_VALUE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","sourceNew":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * \n   * @param directory\n   *          The {@link Directory} in which the taxonomy resides.\n   * @throws CorruptIndexException\n   *           if the Taxonomy is corrupt.\n   * @throws IOException\n   *           if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    indexReader = openIndexReader(directory);\n    taxoWriter = null;\n    taxoEpoch = -1;\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<CategoryPath, Integer>(DEFAULT_CACHE_VALUE);\n    categoryCache = new LRUHashMap<Integer, CategoryPath>(DEFAULT_CACHE_VALUE);\n  }\n\n","sourceOld":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * \n   * @param directory\n   *          The {@link Directory} in which the taxonomy resides.\n   * @throws CorruptIndexException\n   *           if the Taxonomy is corrupt.\n   * @throws IOException\n   *           if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    indexReader = openIndexReader(directory);\n    taxoWriter = null;\n    taxoEpoch = -1;\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<String, Integer>(DEFAULT_CACHE_VALUE);\n    categoryCache = new LRUHashMap<Integer, String>(DEFAULT_CACHE_VALUE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","sourceNew":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * \n   * @param directory\n   *          The {@link Directory} in which the taxonomy resides.\n   * @throws CorruptIndexException\n   *           if the Taxonomy is corrupt.\n   * @throws IOException\n   *           if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    indexReader = openIndexReader(directory);\n    taxoWriter = null;\n    taxoEpoch = -1;\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<FacetLabel, Integer>(DEFAULT_CACHE_VALUE);\n    categoryCache = new LRUHashMap<Integer, FacetLabel>(DEFAULT_CACHE_VALUE);\n  }\n\n","sourceOld":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * \n   * @param directory\n   *          The {@link Directory} in which the taxonomy resides.\n   * @throws CorruptIndexException\n   *           if the Taxonomy is corrupt.\n   * @throws IOException\n   *           if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    indexReader = openIndexReader(directory);\n    taxoWriter = null;\n    taxoEpoch = -1;\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<CategoryPath, Integer>(DEFAULT_CACHE_VALUE);\n    categoryCache = new LRUHashMap<Integer, CategoryPath>(DEFAULT_CACHE_VALUE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","sourceNew":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * \n   * @param directory\n   *          The {@link Directory} in which the taxonomy resides.\n   * @throws CorruptIndexException\n   *           if the Taxonomy is corrupt.\n   * @throws IOException\n   *           if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    indexReader = openIndexReader(directory);\n    taxoWriter = null;\n    taxoEpoch = -1;\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<FacetLabel, Integer>(DEFAULT_CACHE_VALUE);\n    categoryCache = new LRUHashMap<Integer, FacetLabel>(DEFAULT_CACHE_VALUE);\n  }\n\n","sourceOld":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * \n   * @param directory\n   *          The {@link Directory} in which the taxonomy resides.\n   * @throws CorruptIndexException\n   *           if the Taxonomy is corrupt.\n   * @throws IOException\n   *           if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    indexReader = openIndexReader(directory);\n    taxoWriter = null;\n    taxoEpoch = -1;\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<CategoryPath, Integer>(DEFAULT_CACHE_VALUE);\n    categoryCache = new LRUHashMap<Integer, CategoryPath>(DEFAULT_CACHE_VALUE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#DirectoryTaxonomyReader(Directory).mjava","sourceNew":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * \n   * @param directory\n   *          The {@link Directory} in which the taxonomy resides.\n   * @throws CorruptIndexException\n   *           if the Taxonomy is corrupt.\n   * @throws IOException\n   *           if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    indexReader = openIndexReader(directory);\n    taxoWriter = null;\n    taxoEpoch = -1;\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<>(DEFAULT_CACHE_VALUE);\n    categoryCache = new LRUHashMap<>(DEFAULT_CACHE_VALUE);\n  }\n\n","sourceOld":"  /**\n   * Open for reading a taxonomy stored in a given {@link Directory}.\n   * \n   * @param directory\n   *          The {@link Directory} in which the taxonomy resides.\n   * @throws CorruptIndexException\n   *           if the Taxonomy is corrupt.\n   * @throws IOException\n   *           if another error occurred.\n   */\n  public DirectoryTaxonomyReader(Directory directory) throws IOException {\n    indexReader = openIndexReader(directory);\n    taxoWriter = null;\n    taxoEpoch = -1;\n\n    // These are the default cache sizes; they can be configured after\n    // construction with the cache's setMaxSize() method\n    ordinalCache = new LRUHashMap<FacetLabel, Integer>(DEFAULT_CACHE_VALUE);\n    categoryCache = new LRUHashMap<Integer, FacetLabel>(DEFAULT_CACHE_VALUE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","407687e67faf6e1f02a211ca078d8e3eed631027"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}