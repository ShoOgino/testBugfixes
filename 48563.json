{"path":"lucene/facet/src/java/org/apache/lucene/facet/index/categorypolicy/NonTopLevelOrdinalPolicy#shouldAdd(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/categorypolicy/NonTopLevelOrdinalPolicy#shouldAdd(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/index/categorypolicy/NonTopLevelOrdinalPolicy#shouldAdd(int).mjava","sourceNew":"  /**\n   * Filters out ordinal which are ROOT or who's parent is ROOT. In order to\n   * determine if a parent is root, there's a need for\n   * {@link TaxonomyWriter#getParent(int)}.\n   */\n  public boolean shouldAdd(int ordinal) {\n    if (ordinal > TaxonomyReader.ROOT_ORDINAL) {\n      try {\n        if (this.taxonomyWriter.getParent(ordinal) > TaxonomyReader.ROOT_ORDINAL) {\n          return true;\n        }\n      } catch (Exception e) {\n        return false;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Filters out ordinal which are ROOT or who's parent is ROOT. In order to\n   * determine if a parent is root, there's a need for\n   * {@link TaxonomyWriter#getParent(int)}.\n   */\n  public boolean shouldAdd(int ordinal) {\n    if (ordinal > TaxonomyReader.ROOT_ORDINAL) {\n      try {\n        if (this.taxonomyWriter.getParent(ordinal) > TaxonomyReader.ROOT_ORDINAL) {\n          return true;\n        }\n      } catch (Exception e) {\n        return false;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/categorypolicy/NonTopLevelOrdinalPolicy#shouldAdd(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/categorypolicy/NonTopLevelOrdinalPolicy#shouldAdd(int).mjava","sourceNew":"  /**\n   * Filters out ordinal which are ROOT or who's parent is ROOT. In order to\n   * determine if a parent is root, there's a need for\n   * {@link TaxonomyWriter#getParent(int)}.\n   */\n  @Override\n  public boolean shouldAdd(int ordinal) {\n    if (ordinal > TaxonomyReader.ROOT_ORDINAL) {\n      try {\n        if (this.taxonomyWriter.getParent(ordinal) > TaxonomyReader.ROOT_ORDINAL) {\n          return true;\n        }\n      } catch (Exception e) {\n        return false;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Filters out ordinal which are ROOT or who's parent is ROOT. In order to\n   * determine if a parent is root, there's a need for\n   * {@link TaxonomyWriter#getParent(int)}.\n   */\n  public boolean shouldAdd(int ordinal) {\n    if (ordinal > TaxonomyReader.ROOT_ORDINAL) {\n      try {\n        if (this.taxonomyWriter.getParent(ordinal) > TaxonomyReader.ROOT_ORDINAL) {\n          return true;\n        }\n      } catch (Exception e) {\n        return false;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/categorypolicy/NonTopLevelOrdinalPolicy#shouldAdd(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/categorypolicy/NonTopLevelOrdinalPolicy#shouldAdd(int).mjava","sourceNew":"  /**\n   * Filters out ordinal which are ROOT or who's parent is ROOT. In order to\n   * determine if a parent is root, there's a need for\n   * {@link TaxonomyWriter#getParent(int)}.\n   */\n  @Override\n  public boolean shouldAdd(int ordinal) {\n    if (ordinal > TaxonomyReader.ROOT_ORDINAL) {\n      try {\n        if (this.taxonomyWriter.getParent(ordinal) > TaxonomyReader.ROOT_ORDINAL) {\n          return true;\n        }\n      } catch (Exception e) {\n        return false;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Filters out ordinal which are ROOT or who's parent is ROOT. In order to\n   * determine if a parent is root, there's a need for\n   * {@link TaxonomyWriter#getParent(int)}.\n   */\n  public boolean shouldAdd(int ordinal) {\n    if (ordinal > TaxonomyReader.ROOT_ORDINAL) {\n      try {\n        if (this.taxonomyWriter.getParent(ordinal) > TaxonomyReader.ROOT_ORDINAL) {\n          return true;\n        }\n      } catch (Exception e) {\n        return false;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66644845192a1c92d87d5324cc0b5af16ad31b42","date":1358970583,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/categorypolicy/NonTopLevelOrdinalPolicy#shouldAdd(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Filters out ordinal which are ROOT or who's parent is ROOT. In order to\n   * determine if a parent is root, there's a need for\n   * {@link TaxonomyWriter#getParent(int)}.\n   */\n  @Override\n  public boolean shouldAdd(int ordinal) {\n    if (ordinal > TaxonomyReader.ROOT_ORDINAL) {\n      try {\n        if (this.taxonomyWriter.getParent(ordinal) > TaxonomyReader.ROOT_ORDINAL) {\n          return true;\n        }\n      } catch (Exception e) {\n        return false;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/categorypolicy/NonTopLevelOrdinalPolicy#shouldAdd(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Filters out ordinal which are ROOT or who's parent is ROOT. In order to\n   * determine if a parent is root, there's a need for\n   * {@link TaxonomyWriter#getParent(int)}.\n   */\n  @Override\n  public boolean shouldAdd(int ordinal) {\n    if (ordinal > TaxonomyReader.ROOT_ORDINAL) {\n      try {\n        if (this.taxonomyWriter.getParent(ordinal) > TaxonomyReader.ROOT_ORDINAL) {\n          return true;\n        }\n      } catch (Exception e) {\n        return false;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"66644845192a1c92d87d5324cc0b5af16ad31b42":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["66644845192a1c92d87d5324cc0b5af16ad31b42"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","66644845192a1c92d87d5324cc0b5af16ad31b42"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b2d5244a676b83c2d551c3746e8181588ba619e1"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"66644845192a1c92d87d5324cc0b5af16ad31b42":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","66644845192a1c92d87d5324cc0b5af16ad31b42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b2d5244a676b83c2d551c3746e8181588ba619e1":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}