{"path":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField#write(TextResponseWriter,String,IndexableField).mjava","commits":[{"id":"54ad8c9e9210e008dc7b8ad5a037ff20879150ea","date":1501889566,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField#write(TextResponseWriter,String,IndexableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#write(TextResponseWriter,String,IndexableField).mjava","sourceNew":"  @Override\n  public void write(TextResponseWriter writer, String name, IndexableField f) throws IOException {\n    final Number val = f.numericValue();\n    if (val == null) {\n      writer.writeNull(name);\n      return;\n    }\n\n    final String readableValue = enumMapping.intValueToStringValue(val.intValue());\n    writer.writeStr(name, readableValue, true);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void write(TextResponseWriter writer, String name, IndexableField f) throws IOException {\n    final Number val = f.numericValue();\n    if (val == null) {\n      writer.writeNull(name);\n      return;\n    }\n\n    final String readableValue = intValueToStringValue(val.intValue());\n    writer.writeStr(name, readableValue, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractEnumField#write(TextResponseWriter,String,IndexableField).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/EnumField#write(TextResponseWriter,String,IndexableField).mjava","sourceNew":"  @Override\n  public void write(TextResponseWriter writer, String name, IndexableField f) throws IOException {\n    final Number val = f.numericValue();\n    if (val == null) {\n      writer.writeNull(name);\n      return;\n    }\n\n    final String readableValue = enumMapping.intValueToStringValue(val.intValue());\n    writer.writeStr(name, readableValue, true);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void write(TextResponseWriter writer, String name, IndexableField f) throws IOException {\n    final Number val = f.numericValue();\n    if (val == null) {\n      writer.writeNull(name);\n      return;\n    }\n\n    final String readableValue = intValueToStringValue(val.intValue());\n    writer.writeStr(name, readableValue, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","54ad8c9e9210e008dc7b8ad5a037ff20879150ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"54ad8c9e9210e008dc7b8ad5a037ff20879150ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54ad8c9e9210e008dc7b8ad5a037ff20879150ea"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","54ad8c9e9210e008dc7b8ad5a037ff20879150ea"],"54ad8c9e9210e008dc7b8ad5a037ff20879150ea":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}