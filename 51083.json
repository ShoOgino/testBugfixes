{"path":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#Boolean2ScorerSupplier(BooleanWeight,Map[Occur,Collection[ScorerSupplier]],ScoreMode,int).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#Boolean2ScorerSupplier(BooleanWeight,Map[Occur,Collection[ScorerSupplier]],ScoreMode,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#Boolean2ScorerSupplier(BooleanWeight,Map[Occur,Collection[ScorerSupplier]],boolean,int).mjava","sourceNew":"  Boolean2ScorerSupplier(BooleanWeight weight,\n      Map<Occur, Collection<ScorerSupplier>> subs,\n      ScoreMode scoreMode, int minShouldMatch) {\n    if (minShouldMatch < 0) {\n      throw new IllegalArgumentException(\"minShouldMatch must be positive, but got: \" + minShouldMatch);\n    }\n    if (minShouldMatch != 0 && minShouldMatch >= subs.get(Occur.SHOULD).size()) {\n      throw new IllegalArgumentException(\"minShouldMatch must be strictly less than the number of SHOULD clauses\");\n    }\n    if (scoreMode.needsScores() == false && minShouldMatch == 0 && subs.get(Occur.SHOULD).size() > 0\n        && subs.get(Occur.MUST).size() + subs.get(Occur.FILTER).size() > 0) {\n      throw new IllegalArgumentException(\"Cannot pass purely optional clauses if scores are not needed\");\n    }\n    if (subs.get(Occur.SHOULD).size() + subs.get(Occur.MUST).size() + subs.get(Occur.FILTER).size() == 0) {\n      throw new IllegalArgumentException(\"There should be at least one positive clause\");\n    }\n    this.weight = weight;\n    this.subs = subs;\n    this.scoreMode = scoreMode;\n    this.minShouldMatch = minShouldMatch;\n  }\n\n","sourceOld":"  Boolean2ScorerSupplier(BooleanWeight weight,\n      Map<Occur, Collection<ScorerSupplier>> subs,\n      boolean needsScores, int minShouldMatch) {\n    if (minShouldMatch < 0) {\n      throw new IllegalArgumentException(\"minShouldMatch must be positive, but got: \" + minShouldMatch);\n    }\n    if (minShouldMatch != 0 && minShouldMatch >= subs.get(Occur.SHOULD).size()) {\n      throw new IllegalArgumentException(\"minShouldMatch must be strictly less than the number of SHOULD clauses\");\n    }\n    if (needsScores == false && minShouldMatch == 0 && subs.get(Occur.SHOULD).size() > 0\n        && subs.get(Occur.MUST).size() + subs.get(Occur.FILTER).size() > 0) {\n      throw new IllegalArgumentException(\"Cannot pass purely optional clauses if scores are not needed\");\n    }\n    if (subs.get(Occur.SHOULD).size() + subs.get(Occur.MUST).size() + subs.get(Occur.FILTER).size() == 0) {\n      throw new IllegalArgumentException(\"There should be at least one positive clause\");\n    }\n    this.weight = weight;\n    this.subs = subs;\n    this.needsScores = needsScores;\n    this.minShouldMatch = minShouldMatch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#Boolean2ScorerSupplier(BooleanWeight,Map[Occur,Collection[ScorerSupplier]],ScoreMode,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#Boolean2ScorerSupplier(BooleanWeight,Map[Occur,Collection[ScorerSupplier]],boolean,int).mjava","sourceNew":"  Boolean2ScorerSupplier(BooleanWeight weight,\n      Map<Occur, Collection<ScorerSupplier>> subs,\n      ScoreMode scoreMode, int minShouldMatch) {\n    if (minShouldMatch < 0) {\n      throw new IllegalArgumentException(\"minShouldMatch must be positive, but got: \" + minShouldMatch);\n    }\n    if (minShouldMatch != 0 && minShouldMatch >= subs.get(Occur.SHOULD).size()) {\n      throw new IllegalArgumentException(\"minShouldMatch must be strictly less than the number of SHOULD clauses\");\n    }\n    if (scoreMode.needsScores() == false && minShouldMatch == 0 && subs.get(Occur.SHOULD).size() > 0\n        && subs.get(Occur.MUST).size() + subs.get(Occur.FILTER).size() > 0) {\n      throw new IllegalArgumentException(\"Cannot pass purely optional clauses if scores are not needed\");\n    }\n    if (subs.get(Occur.SHOULD).size() + subs.get(Occur.MUST).size() + subs.get(Occur.FILTER).size() == 0) {\n      throw new IllegalArgumentException(\"There should be at least one positive clause\");\n    }\n    this.weight = weight;\n    this.subs = subs;\n    this.scoreMode = scoreMode;\n    this.minShouldMatch = minShouldMatch;\n  }\n\n","sourceOld":"  Boolean2ScorerSupplier(BooleanWeight weight,\n      Map<Occur, Collection<ScorerSupplier>> subs,\n      boolean needsScores, int minShouldMatch) {\n    if (minShouldMatch < 0) {\n      throw new IllegalArgumentException(\"minShouldMatch must be positive, but got: \" + minShouldMatch);\n    }\n    if (minShouldMatch != 0 && minShouldMatch >= subs.get(Occur.SHOULD).size()) {\n      throw new IllegalArgumentException(\"minShouldMatch must be strictly less than the number of SHOULD clauses\");\n    }\n    if (needsScores == false && minShouldMatch == 0 && subs.get(Occur.SHOULD).size() > 0\n        && subs.get(Occur.MUST).size() + subs.get(Occur.FILTER).size() > 0) {\n      throw new IllegalArgumentException(\"Cannot pass purely optional clauses if scores are not needed\");\n    }\n    if (subs.get(Occur.SHOULD).size() + subs.get(Occur.MUST).size() + subs.get(Occur.FILTER).size() == 0) {\n      throw new IllegalArgumentException(\"There should be at least one positive clause\");\n    }\n    this.weight = weight;\n    this.subs = subs;\n    this.needsScores = needsScores;\n    this.minShouldMatch = minShouldMatch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#Boolean2ScorerSupplier(Weight,Map[Occur,Collection[ScorerSupplier]],ScoreMode,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#Boolean2ScorerSupplier(BooleanWeight,Map[Occur,Collection[ScorerSupplier]],ScoreMode,int).mjava","sourceNew":"  Boolean2ScorerSupplier(Weight weight,\n      Map<Occur, Collection<ScorerSupplier>> subs,\n      ScoreMode scoreMode, int minShouldMatch) {\n    if (minShouldMatch < 0) {\n      throw new IllegalArgumentException(\"minShouldMatch must be positive, but got: \" + minShouldMatch);\n    }\n    if (minShouldMatch != 0 && minShouldMatch >= subs.get(Occur.SHOULD).size()) {\n      throw new IllegalArgumentException(\"minShouldMatch must be strictly less than the number of SHOULD clauses\");\n    }\n    if (scoreMode.needsScores() == false && minShouldMatch == 0 && subs.get(Occur.SHOULD).size() > 0\n        && subs.get(Occur.MUST).size() + subs.get(Occur.FILTER).size() > 0) {\n      throw new IllegalArgumentException(\"Cannot pass purely optional clauses if scores are not needed\");\n    }\n    if (subs.get(Occur.SHOULD).size() + subs.get(Occur.MUST).size() + subs.get(Occur.FILTER).size() == 0) {\n      throw new IllegalArgumentException(\"There should be at least one positive clause\");\n    }\n    this.weight = weight;\n    this.subs = subs;\n    this.scoreMode = scoreMode;\n    this.minShouldMatch = minShouldMatch;\n  }\n\n","sourceOld":"  Boolean2ScorerSupplier(BooleanWeight weight,\n      Map<Occur, Collection<ScorerSupplier>> subs,\n      ScoreMode scoreMode, int minShouldMatch) {\n    if (minShouldMatch < 0) {\n      throw new IllegalArgumentException(\"minShouldMatch must be positive, but got: \" + minShouldMatch);\n    }\n    if (minShouldMatch != 0 && minShouldMatch >= subs.get(Occur.SHOULD).size()) {\n      throw new IllegalArgumentException(\"minShouldMatch must be strictly less than the number of SHOULD clauses\");\n    }\n    if (scoreMode.needsScores() == false && minShouldMatch == 0 && subs.get(Occur.SHOULD).size() > 0\n        && subs.get(Occur.MUST).size() + subs.get(Occur.FILTER).size() > 0) {\n      throw new IllegalArgumentException(\"Cannot pass purely optional clauses if scores are not needed\");\n    }\n    if (subs.get(Occur.SHOULD).size() + subs.get(Occur.MUST).size() + subs.get(Occur.FILTER).size() == 0) {\n      throw new IllegalArgumentException(\"There should be at least one positive clause\");\n    }\n    this.weight = weight;\n    this.subs = subs;\n    this.scoreMode = scoreMode;\n    this.minShouldMatch = minShouldMatch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}