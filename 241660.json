{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#edgeCrossesEnvelope(Plane,GeoPoint).mjava","commits":[{"id":"d564e0296db7f80d73dd62b17710f61c85f38c50","date":1523483630,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#edgeCrossesEnvelope(Plane,GeoPoint).mjava","pathOld":"/dev/null","sourceNew":"    /** Return true if the edge crosses the envelope plane, given the envelope intersection point.\n      */\n    private boolean edgeCrossesEnvelope(final Plane edgePlane, final GeoPoint intersectionPoint) {\n      final GeoPoint[] adjoiningPoints = findAdjoiningPoints(edgePlane, intersectionPoint);\n      int withinCount = 0;\n      for (final GeoPoint adjoining : adjoiningPoints) {\n        if ((travelPlane.evaluateIsZero(adjoining) && checkPointCutoffPlane.isWithin(adjoining) && checkPointOtherCutoffPlane.isWithin(adjoining)) ||\n          (testPointPlane.evaluateIsZero(adjoining) && testPointCutoffPlane.isWithin(adjoining) && testPointOtherCutoffPlane.isWithin(adjoining))) {\n          //System.out.println(\"   Adjoining point \"+adjoining+\" (dist = \"+intersectionPoint.linearDistance(adjoining)+\") is within\");\n          withinCount++;\n        } else {\n          //System.out.println(\"   Adjoining point \"+adjoining+\" (dist = \"+intersectionPoint.linearDistance(adjoining)+\") is not within\");\n        }\n      }\n      return (withinCount & 1) != 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4417cae689ce0fc964a3546ded2b0ab6e374f1b0","date":1523635542,"type":5,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#edgeCrossesEnvelope(Plane,GeoPoint,Plane).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#edgeCrossesEnvelope(Plane,GeoPoint).mjava","sourceNew":"    /** Return true if the edge crosses the envelope plane, given the envelope intersection point.\n      */\n    private boolean edgeCrossesEnvelope(final Plane edgePlane, final GeoPoint intersectionPoint, final Plane envelopePlane) {\n      final GeoPoint[] adjoiningPoints = findAdjoiningPoints(edgePlane, intersectionPoint, envelopePlane);\n      if (adjoiningPoints == null) {\n        // Couldn't find good adjoining points, so just assume there is a crossing.\n        return true;\n      }\n      int withinCount = 0;\n      for (final GeoPoint adjoining : adjoiningPoints) {\n        if ((travelPlane.evaluateIsZero(adjoining) && checkPointCutoffPlane.isWithin(adjoining) && checkPointOtherCutoffPlane.isWithin(adjoining)) ||\n          (testPointPlane.evaluateIsZero(adjoining) && testPointCutoffPlane.isWithin(adjoining) && testPointOtherCutoffPlane.isWithin(adjoining))) {\n          //System.out.println(\"   Adjoining point \"+adjoining+\" (intersection dist = \"+intersectionPoint.linearDistance(adjoining)+\") is within\");\n          withinCount++;\n        } else {\n          //System.out.println(\"   Adjoining point \"+adjoining+\" (intersection dist = \"+intersectionPoint.linearDistance(adjoining)+\"; travelPlane dist=\"+travelPlane.evaluate(adjoining)+\"; testPointPlane dist=\"+testPointPlane.evaluate(adjoining)+\") is not within\");\n        }\n      }\n      return (withinCount & 1) != 0;\n    }\n\n","sourceOld":"    /** Return true if the edge crosses the envelope plane, given the envelope intersection point.\n      */\n    private boolean edgeCrossesEnvelope(final Plane edgePlane, final GeoPoint intersectionPoint) {\n      final GeoPoint[] adjoiningPoints = findAdjoiningPoints(edgePlane, intersectionPoint);\n      int withinCount = 0;\n      for (final GeoPoint adjoining : adjoiningPoints) {\n        if ((travelPlane.evaluateIsZero(adjoining) && checkPointCutoffPlane.isWithin(adjoining) && checkPointOtherCutoffPlane.isWithin(adjoining)) ||\n          (testPointPlane.evaluateIsZero(adjoining) && testPointCutoffPlane.isWithin(adjoining) && testPointOtherCutoffPlane.isWithin(adjoining))) {\n          //System.out.println(\"   Adjoining point \"+adjoining+\" (dist = \"+intersectionPoint.linearDistance(adjoining)+\") is within\");\n          withinCount++;\n        } else {\n          //System.out.println(\"   Adjoining point \"+adjoining+\" (dist = \"+intersectionPoint.linearDistance(adjoining)+\") is not within\");\n        }\n      }\n      return (withinCount & 1) != 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d564e0296db7f80d73dd62b17710f61c85f38c50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4417cae689ce0fc964a3546ded2b0ab6e374f1b0":["d564e0296db7f80d73dd62b17710f61c85f38c50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4417cae689ce0fc964a3546ded2b0ab6e374f1b0"]},"commit2Childs":{"d564e0296db7f80d73dd62b17710f61c85f38c50":["4417cae689ce0fc964a3546ded2b0ab6e374f1b0"],"4417cae689ce0fc964a3546ded2b0ab6e374f1b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d564e0296db7f80d73dd62b17710f61c85f38c50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}