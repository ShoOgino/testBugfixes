{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getReader(long,long).mjava","commits":[{"id":"950b7a6881d14da782b60444c11295e3ec50d41a","date":1458379095,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getReader(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getReader(long).mjava","sourceNew":"  @Override\n  public PointReader getReader(long start, long length) {\n    assert start + length <= docIDs.length: \"start=\" + start + \" length=\" + length + \" docIDs.length=\" + docIDs.length;\n    return new HeapPointReader(blocks, valuesPerBlock, packedBytesLength, ords, ordsLong, docIDs, (int) start, nextWrite);\n  }\n\n","sourceOld":"  @Override\n  public PointReader getReader(long start) {\n    return new HeapPointReader(blocks, valuesPerBlock, packedBytesLength, ords, ordsLong, docIDs, (int) start, nextWrite);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416f9e28900210be57b69bc12e2954fb98ed7ebe","date":1458479803,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getReader(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getReader(long,long).mjava","sourceNew":"  @Override\n  public PointReader getReader(long start, long length) {\n    assert start + length <= docIDs.length: \"start=\" + start + \" length=\" + length + \" docIDs.length=\" + docIDs.length;\n    return new HeapPointReader(blocks, valuesPerBlock, packedBytesLength, ords, ordsLong, docIDs, (int) start, nextWrite, singleValuePerDoc);\n  }\n\n","sourceOld":"  @Override\n  public PointReader getReader(long start, long length) {\n    assert start + length <= docIDs.length: \"start=\" + start + \" length=\" + length + \" docIDs.length=\" + docIDs.length;\n    return new HeapPointReader(blocks, valuesPerBlock, packedBytesLength, ords, ordsLong, docIDs, (int) start, nextWrite);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getReader(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getReader(long,long).mjava","sourceNew":"  @Override\n  public PointReader getReader(long start, long length) {\n    assert start + length <= docIDs.length: \"start=\" + start + \" length=\" + length + \" docIDs.length=\" + docIDs.length;\n    assert start + length <= nextWrite: \"start=\" + start + \" length=\" + length + \" nextWrite=\" + nextWrite;\n    return new HeapPointReader(blocks, valuesPerBlock, packedBytesLength, ords, ordsLong, docIDs, (int) start, Math.toIntExact(start+length), singleValuePerDoc);\n  }\n\n","sourceOld":"  @Override\n  public PointReader getReader(long start, long length) {\n    assert start + length <= docIDs.length: \"start=\" + start + \" length=\" + length + \" docIDs.length=\" + docIDs.length;\n    return new HeapPointReader(blocks, valuesPerBlock, packedBytesLength, ords, ordsLong, docIDs, (int) start, nextWrite, singleValuePerDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getReader(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getReader(long,long).mjava","sourceNew":"  @Override\n  public PointReader getReader(long start, long length) {\n    assert start + length <= docIDs.length: \"start=\" + start + \" length=\" + length + \" docIDs.length=\" + docIDs.length;\n    assert start + length <= nextWrite: \"start=\" + start + \" length=\" + length + \" nextWrite=\" + nextWrite;\n    return new HeapPointReader(blocks, valuesPerBlock, packedBytesLength, ords, ordsLong, docIDs, (int) start, Math.toIntExact(start+length), singleValuePerDoc);\n  }\n\n","sourceOld":"  @Override\n  public PointReader getReader(long start, long length) {\n    assert start + length <= docIDs.length: \"start=\" + start + \" length=\" + length + \" docIDs.length=\" + docIDs.length;\n    return new HeapPointReader(blocks, valuesPerBlock, packedBytesLength, ords, ordsLong, docIDs, (int) start, nextWrite, singleValuePerDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getReader(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getReader(long,long).mjava","sourceNew":"  @Override\n  public PointReader getReader(long start, long length) {\n    assert start + length <= docIDs.length: \"start=\" + start + \" length=\" + length + \" docIDs.length=\" + docIDs.length;\n    assert start + length <= nextWrite: \"start=\" + start + \" length=\" + length + \" nextWrite=\" + nextWrite;\n    return new HeapPointReader(blocks, valuesPerBlock, packedBytesLength, docIDs, (int) start, Math.toIntExact(start+length));\n  }\n\n","sourceOld":"  @Override\n  public PointReader getReader(long start, long length) {\n    assert start + length <= docIDs.length: \"start=\" + start + \" length=\" + length + \" docIDs.length=\" + docIDs.length;\n    assert start + length <= nextWrite: \"start=\" + start + \" length=\" + length + \" nextWrite=\" + nextWrite;\n    return new HeapPointReader(blocks, valuesPerBlock, packedBytesLength, ords, ordsLong, docIDs, (int) start, Math.toIntExact(start+length), singleValuePerDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getReader(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getReader(long,long).mjava","sourceNew":"  @Override\n  public PointReader getReader(long start, long length) {\n    assert closed : \"point writer is still open and trying to get a reader\";\n    assert start + length <= docIDs.length: \"start=\" + start + \" length=\" + length + \" docIDs.length=\" + docIDs.length;\n    assert start + length <= nextWrite: \"start=\" + start + \" length=\" + length + \" nextWrite=\" + nextWrite;\n    return new HeapPointReader(block, packedBytesLength, docIDs, (int) start, Math.toIntExact(start+length));\n  }\n\n","sourceOld":"  @Override\n  public PointReader getReader(long start, long length) {\n    assert start + length <= docIDs.length: \"start=\" + start + \" length=\" + length + \" docIDs.length=\" + docIDs.length;\n    assert start + length <= nextWrite: \"start=\" + start + \" length=\" + length + \" nextWrite=\" + nextWrite;\n    return new HeapPointReader(blocks, valuesPerBlock, packedBytesLength, docIDs, (int) start, Math.toIntExact(start+length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f06758793500ca773d0df1037290e6e404fb33","date":1562230223,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getReader(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getReader(long,long).mjava","sourceNew":"  @Override\n  public PointReader getReader(long start, long length) {\n    assert closed : \"point writer is still open and trying to get a reader\";\n    assert start + length <= size: \"start=\" + start + \" length=\" + length + \" docIDs.length=\" + size;\n    assert start + length <= nextWrite: \"start=\" + start + \" length=\" + length + \" nextWrite=\" + nextWrite;\n    return new HeapPointReader(block, packedBytesLength, (int) start, Math.toIntExact(start+length));\n  }\n\n","sourceOld":"  @Override\n  public PointReader getReader(long start, long length) {\n    assert closed : \"point writer is still open and trying to get a reader\";\n    assert start + length <= docIDs.length: \"start=\" + start + \" length=\" + length + \" docIDs.length=\" + docIDs.length;\n    assert start + length <= nextWrite: \"start=\" + start + \" length=\" + length + \" nextWrite=\" + nextWrite;\n    return new HeapPointReader(block, packedBytesLength, docIDs, (int) start, Math.toIntExact(start+length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getReader(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointWriter#getReader(long,long).mjava","sourceNew":"  @Override\n  public PointReader getReader(long start, long length) {\n    assert closed : \"point writer is still open and trying to get a reader\";\n    assert start + length <= size: \"start=\" + start + \" length=\" + length + \" docIDs.length=\" + size;\n    assert start + length <= nextWrite: \"start=\" + start + \" length=\" + length + \" nextWrite=\" + nextWrite;\n    return new HeapPointReader(config, block, (int) start, Math.toIntExact(start+length));\n  }\n\n","sourceOld":"  @Override\n  public PointReader getReader(long start, long length) {\n    assert closed : \"point writer is still open and trying to get a reader\";\n    assert start + length <= size: \"start=\" + start + \" length=\" + length + \" docIDs.length=\" + size;\n    assert start + length <= nextWrite: \"start=\" + start + \" length=\" + length + \" nextWrite=\" + nextWrite;\n    return new HeapPointReader(block, packedBytesLength, (int) start, Math.toIntExact(start+length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"c7f06758793500ca773d0df1037290e6e404fb33":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["c7f06758793500ca773d0df1037290e6e404fb33"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["950b7a6881d14da782b60444c11295e3ec50d41a"],"950b7a6881d14da782b60444c11295e3ec50d41a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9856095f7afb5a607bf5e65077615ed91273508c":["416f9e28900210be57b69bc12e2954fb98ed7ebe","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["78bdc7d6906146edb12a1a6c1f765ba680ed5124","9856095f7afb5a607bf5e65077615ed91273508c"],"c7f06758793500ca773d0df1037290e6e404fb33":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["c7f06758793500ca773d0df1037290e6e404fb33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["950b7a6881d14da782b60444c11295e3ec50d41a"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"950b7a6881d14da782b60444c11295e3ec50d41a":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}