{"path":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#queryAndAssertResultSize(String,int,int).mjava","commits":[{"id":"e748d9ee3a1515b2ea3903d067f1f39fffdd083f","date":1467898648,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#queryAndAssertResultSize(String,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void queryAndAssertResultSize(String collection, int expectedResultSize, int timeoutMS)\n      throws SolrServerException, IOException, InterruptedException {\n    long startTimestamp = System.currentTimeMillis();\n\n    long actualResultSize = 0;\n    while(true) {\n      if (System.currentTimeMillis() - startTimestamp > timeoutMS || actualResultSize > expectedResultSize) {\n        fail(\"expected: \" + expectedResultSize + \", actual: \" + actualResultSize);\n      }\n      SolrParams queryAll = new SolrQuery(\"*:*\");\n      cloudClient.setDefaultCollection(collection);\n      QueryResponse queryResponse = cloudClient.query(queryAll);\n      actualResultSize = queryResponse.getResults().getNumFound();\n      if(expectedResultSize == actualResultSize) {\n        return;\n      }\n\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d1b17eac3f71284e6988521366269dfec230aa78"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1b17eac3f71284e6988521366269dfec230aa78","date":1467937913,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#queryAndAssertResultSize(String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#queryAndAssertResultSize(String,int,int).mjava","sourceNew":"  private void queryAndAssertResultSize(String collection, int expectedResultSize, int timeoutMS)\n      throws SolrServerException, IOException, InterruptedException {\n    long startTimestamp = System.nanoTime();\n\n    long actualResultSize = 0;\n    while(true) {\n      if (System.nanoTime() - startTimestamp > TimeUnit.MILLISECONDS.toNanos(timeoutMS) || actualResultSize > expectedResultSize) {\n        fail(\"expected: \" + expectedResultSize + \", actual: \" + actualResultSize);\n      }\n      SolrParams queryAll = new SolrQuery(\"*:*\");\n      cloudClient.setDefaultCollection(collection);\n      QueryResponse queryResponse = cloudClient.query(queryAll);\n      actualResultSize = queryResponse.getResults().getNumFound();\n      if(expectedResultSize == actualResultSize) {\n        return;\n      }\n\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":"  private void queryAndAssertResultSize(String collection, int expectedResultSize, int timeoutMS)\n      throws SolrServerException, IOException, InterruptedException {\n    long startTimestamp = System.currentTimeMillis();\n\n    long actualResultSize = 0;\n    while(true) {\n      if (System.currentTimeMillis() - startTimestamp > timeoutMS || actualResultSize > expectedResultSize) {\n        fail(\"expected: \" + expectedResultSize + \", actual: \" + actualResultSize);\n      }\n      SolrParams queryAll = new SolrQuery(\"*:*\");\n      cloudClient.setDefaultCollection(collection);\n      QueryResponse queryResponse = cloudClient.query(queryAll);\n      actualResultSize = queryResponse.getResults().getNumFound();\n      if(expectedResultSize == actualResultSize) {\n        return;\n      }\n\n      Thread.sleep(1000);\n    }\n  }\n\n","bugFix":["e748d9ee3a1515b2ea3903d067f1f39fffdd083f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#queryAndAssertResultSize(String,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void queryAndAssertResultSize(String collection, int expectedResultSize, int timeoutMS)\n      throws SolrServerException, IOException, InterruptedException {\n    long startTimestamp = System.nanoTime();\n\n    long actualResultSize = 0;\n    while(true) {\n      if (System.nanoTime() - startTimestamp > TimeUnit.MILLISECONDS.toNanos(timeoutMS) || actualResultSize > expectedResultSize) {\n        fail(\"expected: \" + expectedResultSize + \", actual: \" + actualResultSize);\n      }\n      SolrParams queryAll = new SolrQuery(\"*:*\");\n      cloudClient.setDefaultCollection(collection);\n      QueryResponse queryResponse = cloudClient.query(queryAll);\n      actualResultSize = queryResponse.getResults().getNumFound();\n      if(expectedResultSize == actualResultSize) {\n        return;\n      }\n\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8cffee0b9c10b78bd087c71485b482217fe84f","date":1505950827,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#queryAndAssertResultSize(String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#queryAndAssertResultSize(String,int,int).mjava","sourceNew":"  private void queryAndAssertResultSize(String collection, int expectedResultSize, int timeoutMS)\n      throws SolrServerException, IOException, InterruptedException {\n    long startTimestamp = System.nanoTime();\n\n    long actualResultSize = 0;\n    while(true) {\n      if (System.nanoTime() - startTimestamp > TimeUnit.MILLISECONDS.toNanos(timeoutMS) || actualResultSize > expectedResultSize) {\n        fail(\"expected: \" + expectedResultSize + \", actual: \" + actualResultSize);\n      }\n      SolrParams queryAll = new SolrQuery(\"*:*\");\n      cloudClient.setDefaultCollection(collection);\n      try {\n        QueryResponse queryResponse = cloudClient.query(queryAll);\n        actualResultSize = queryResponse.getResults().getNumFound();\n        if(expectedResultSize == actualResultSize) {\n          return;\n        }\n      } catch (SolrServerException | IOException e) {\n        log.warn(\"Querying solr threw an exception. This can be expected to happen during restarts.\", e);\n      }\n\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":"  private void queryAndAssertResultSize(String collection, int expectedResultSize, int timeoutMS)\n      throws SolrServerException, IOException, InterruptedException {\n    long startTimestamp = System.nanoTime();\n\n    long actualResultSize = 0;\n    while(true) {\n      if (System.nanoTime() - startTimestamp > TimeUnit.MILLISECONDS.toNanos(timeoutMS) || actualResultSize > expectedResultSize) {\n        fail(\"expected: \" + expectedResultSize + \", actual: \" + actualResultSize);\n      }\n      SolrParams queryAll = new SolrQuery(\"*:*\");\n      cloudClient.setDefaultCollection(collection);\n      QueryResponse queryResponse = cloudClient.query(queryAll);\n      actualResultSize = queryResponse.getResults().getNumFound();\n      if(expectedResultSize == actualResultSize) {\n        return;\n      }\n\n      Thread.sleep(1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#queryAndAssertResultSize(String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#queryAndAssertResultSize(String,int,int).mjava","sourceNew":"  private void queryAndAssertResultSize(String collection, int expectedResultSize, int timeoutMS)\n      throws SolrServerException, IOException, InterruptedException {\n    long startTimestamp = System.nanoTime();\n\n    long actualResultSize = 0;\n    while(true) {\n      if (System.nanoTime() - startTimestamp > TimeUnit.MILLISECONDS.toNanos(timeoutMS) || actualResultSize > expectedResultSize) {\n        fail(\"expected: \" + expectedResultSize + \", actual: \" + actualResultSize);\n      }\n      SolrParams queryAll = new SolrQuery(\"*:*\");\n      cloudClient.setDefaultCollection(collection);\n      try {\n        QueryResponse queryResponse = cloudClient.query(queryAll);\n        actualResultSize = queryResponse.getResults().getNumFound();\n        if(expectedResultSize == actualResultSize) {\n          return;\n        }\n      } catch (SolrServerException | IOException e) {\n        log.warn(\"Querying solr threw an exception. This can be expected to happen during restarts.\", e);\n      }\n\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":"  private void queryAndAssertResultSize(String collection, int expectedResultSize, int timeoutMS)\n      throws SolrServerException, IOException, InterruptedException {\n    long startTimestamp = System.nanoTime();\n\n    long actualResultSize = 0;\n    while(true) {\n      if (System.nanoTime() - startTimestamp > TimeUnit.MILLISECONDS.toNanos(timeoutMS) || actualResultSize > expectedResultSize) {\n        fail(\"expected: \" + expectedResultSize + \", actual: \" + actualResultSize);\n      }\n      SolrParams queryAll = new SolrQuery(\"*:*\");\n      cloudClient.setDefaultCollection(collection);\n      QueryResponse queryResponse = cloudClient.query(queryAll);\n      actualResultSize = queryResponse.getResults().getNumFound();\n      if(expectedResultSize == actualResultSize) {\n        return;\n      }\n\n      Thread.sleep(1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#queryAndAssertResultSize(String,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#queryAndAssertResultSize(String,int,int).mjava","sourceNew":"  private void queryAndAssertResultSize(String collection, int expectedResultSize, int timeoutMS)\n      throws SolrServerException, IOException, InterruptedException {\n    long startTimestamp = System.nanoTime();\n\n    long actualResultSize = 0;\n    while(true) {\n      if (System.nanoTime() - startTimestamp > TimeUnit.MILLISECONDS.toNanos(timeoutMS) || actualResultSize > expectedResultSize) {\n        fail(\"expected: \" + expectedResultSize + \", actual: \" + actualResultSize);\n      }\n      SolrParams queryAll = new SolrQuery(\"*:*\");\n      cloudClient.setDefaultCollection(collection);\n      try {\n        QueryResponse queryResponse = cloudClient.query(queryAll);\n        actualResultSize = queryResponse.getResults().getNumFound();\n        if(expectedResultSize == actualResultSize) {\n          return;\n        }\n      } catch (SolrServerException | IOException e) {\n        log.warn(\"Querying solr threw an exception. This can be expected to happen during restarts.\", e);\n      }\n\n      Thread.sleep(1000);\n    }\n  }\n\n","sourceOld":"  private void queryAndAssertResultSize(String collection, int expectedResultSize, int timeoutMS)\n      throws SolrServerException, IOException, InterruptedException {\n    long startTimestamp = System.nanoTime();\n\n    long actualResultSize = 0;\n    while(true) {\n      if (System.nanoTime() - startTimestamp > TimeUnit.MILLISECONDS.toNanos(timeoutMS) || actualResultSize > expectedResultSize) {\n        fail(\"expected: \" + expectedResultSize + \", actual: \" + actualResultSize);\n      }\n      SolrParams queryAll = new SolrQuery(\"*:*\");\n      cloudClient.setDefaultCollection(collection);\n      QueryResponse queryResponse = cloudClient.query(queryAll);\n      actualResultSize = queryResponse.getResults().getNumFound();\n      if(expectedResultSize == actualResultSize) {\n        return;\n      }\n\n      Thread.sleep(1000);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["d1b17eac3f71284e6988521366269dfec230aa78","5b8cffee0b9c10b78bd087c71485b482217fe84f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["d1b17eac3f71284e6988521366269dfec230aa78"],"560c18d71dad43d675158783c3840f8c80d6d39c":["d1b17eac3f71284e6988521366269dfec230aa78","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d1b17eac3f71284e6988521366269dfec230aa78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560c18d71dad43d675158783c3840f8c80d6d39c"],"d1b17eac3f71284e6988521366269dfec230aa78":["e748d9ee3a1515b2ea3903d067f1f39fffdd083f"],"e748d9ee3a1515b2ea3903d067f1f39fffdd083f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e748d9ee3a1515b2ea3903d067f1f39fffdd083f"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d1b17eac3f71284e6988521366269dfec230aa78":["c304e97e7c1d472bc70e801b35ee78583916c6cd","5b8cffee0b9c10b78bd087c71485b482217fe84f","560c18d71dad43d675158783c3840f8c80d6d39c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e748d9ee3a1515b2ea3903d067f1f39fffdd083f":["d1b17eac3f71284e6988521366269dfec230aa78"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}