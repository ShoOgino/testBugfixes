{"path":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#testPrefixCaseAccentFolding().mjava","commits":[{"id":"f8d5405ac4f2510f9f83e07236792d1056c19640","date":1322235986,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#testPrefixCaseAccentFolding().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPrefixCaseAccentFolding() throws Exception {\n    String matchOneDocPrefixUpper[][] = {\n        {\"A*\", \"ÁB*\", \"ABÇ*\"},   // these should find only doc 0\n        {\"H*\", \"HÏ*\", \"HìJ*\"},   // these should find only doc 1\n        {\"O*\", \"ÖP*\", \"OPQ*\"},   // these should find only doc 2\n    };\n\n    String matchRevPrefixUpper[][] = {\n        {\"*Ğ1\", \"*DEfG1\", \"*EfG1\"},\n        {\"*N1\", \"*LmŊ1\", \"*MÑ1\"},\n        {\"*Ǖ1\", \"*sTu1\", \"*RŠTU1\"}\n    };\n\n    // test the prefix queries find only one doc where the query is uppercased. Must go through query parser here!\n    for (int idx = 0; idx < matchOneDocPrefixUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchOneDocPrefixUpper[idx].length; jdx++) {\n        String me = matchOneDocPrefixUpper[idx][jdx];\n        assertQ(req(\"q\", \"content:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_ws:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_multi:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_lower_token:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n      }\n    }\n    for (int idx = 0; idx < matchRevPrefixUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchRevPrefixUpper[idx].length; jdx++) {\n        String me = matchRevPrefixUpper[idx][jdx];\n        assertQ(req(\"q\", \"content_rev:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15795b2193a8dd132f374975d4243687bee9351","date":1322413478,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#testPrefixCaseAccentFolding().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#testPrefixCaseAccentFolding().mjava","sourceNew":"  @Test\n  public void testPrefixCaseAccentFolding() throws Exception {\n    String matchOneDocPrefixUpper[][] = {\n        {\"A*\", \"ÁB*\", \"ABÇ*\"},   // these should find only doc 0\n        {\"H*\", \"HÏ*\", \"HìJ*\"},   // these should find only doc 1\n        {\"O*\", \"ÖP*\", \"OPQ*\"},   // these should find only doc 2\n    };\n\n    String matchRevPrefixUpper[][] = {\n        {\"*Ğ1\", \"*DEfG1\", \"*EfG1\"},\n        {\"*N1\", \"*LmŊ1\", \"*MÑ1\"},\n        {\"*Ǖ1\", \"*sTu1\", \"*RŠTU1\"}\n    };\n\n    // test the prefix queries find only one doc where the query is uppercased. Must go through query parser here!\n    for (int idx = 0; idx < matchOneDocPrefixUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchOneDocPrefixUpper[idx].length; jdx++) {\n        String me = matchOneDocPrefixUpper[idx][jdx];\n        assertQ(req(\"q\", \"content:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_ws:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_multi:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_lower_token:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_oldstyle:\" + me),\n            \"//result[@numFound='0']\");\n      }\n    }\n    for (int idx = 0; idx < matchRevPrefixUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchRevPrefixUpper[idx].length; jdx++) {\n        String me = matchRevPrefixUpper[idx][jdx];\n        assertQ(req(\"q\", \"content_rev:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPrefixCaseAccentFolding() throws Exception {\n    String matchOneDocPrefixUpper[][] = {\n        {\"A*\", \"ÁB*\", \"ABÇ*\"},   // these should find only doc 0\n        {\"H*\", \"HÏ*\", \"HìJ*\"},   // these should find only doc 1\n        {\"O*\", \"ÖP*\", \"OPQ*\"},   // these should find only doc 2\n    };\n\n    String matchRevPrefixUpper[][] = {\n        {\"*Ğ1\", \"*DEfG1\", \"*EfG1\"},\n        {\"*N1\", \"*LmŊ1\", \"*MÑ1\"},\n        {\"*Ǖ1\", \"*sTu1\", \"*RŠTU1\"}\n    };\n\n    // test the prefix queries find only one doc where the query is uppercased. Must go through query parser here!\n    for (int idx = 0; idx < matchOneDocPrefixUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchOneDocPrefixUpper[idx].length; jdx++) {\n        String me = matchOneDocPrefixUpper[idx][jdx];\n        assertQ(req(\"q\", \"content:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_ws:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_multi:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n        assertQ(req(\"q\", \"content_lower_token:\" + me),\n            \"//result[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n      }\n    }\n    for (int idx = 0; idx < matchRevPrefixUpper.length; idx++) {\n      for (int jdx = 0; jdx < matchRevPrefixUpper[idx].length; jdx++) {\n        String me = matchRevPrefixUpper[idx][jdx];\n        assertQ(req(\"q\", \"content_rev:\" + me),\n            \"//*[@numFound='1']\",\n            \"//*[@name='id'][.='\" + Integer.toString(idx) + \"']\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8d5405ac4f2510f9f83e07236792d1056c19640":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f15795b2193a8dd132f374975d4243687bee9351":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f15795b2193a8dd132f374975d4243687bee9351"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"f8d5405ac4f2510f9f83e07236792d1056c19640":["f15795b2193a8dd132f374975d4243687bee9351"],"f15795b2193a8dd132f374975d4243687bee9351":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}