{"path":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#toByteArray(InputStream).mjava","commits":[{"id":"50e7972fe4865715af8951d4ba15555e3426fc5d","date":1115024647,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#toByteArray(InputStream).mjava","pathOld":"/dev/null","sourceNew":"\tprivate static byte[] toByteArray(InputStream input) throws IOException {\n\t\ttry {\n\t\t\t// safe and fast even if input.available() behaves weird or buggy\n\t\t\tint len = Math.max(256, input.available());\n\t\t\tbyte[] buffer = new byte[len];\n\t\t\tbyte[] output = new byte[len];\n\t\t\t\n\t\t\tlen = 0;\n\t\t\tint n;\n\t\t\twhile ((n = input.read(buffer)) >= 0) {\n\t\t\t\tif (len + n > output.length) { // grow capacity\n\t\t\t\t\tbyte tmp[] = new byte[Math.max(output.length << 1, len + n)];\n\t\t\t\t\tSystem.arraycopy(output, 0, tmp, 0, len);\n\t\t\t\t\tSystem.arraycopy(buffer, 0, tmp, len, n);\n\t\t\t\t\tbuffer = output; // use larger buffer for future larger bulk reads\n\t\t\t\t\toutput = tmp;\n\t\t\t\t} else {\n\t\t\t\t\tSystem.arraycopy(buffer, 0, output, len, n);\n\t\t\t\t}\n\t\t\t\tlen += n;\n\t\t\t}\n\n\t\t\tif (len == output.length) return output;\n\t\t\tbuffer = null; // help gc\n\t\t\tbuffer = new byte[len];\n\t\t\tSystem.arraycopy(output, 0, buffer, 0, len);\n\t\t\treturn buffer;\n\t\t} finally {\n\t\t\tif (input != null) input.close();\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#toByteArray(InputStream).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#toByteArray(InputStream).mjava","sourceNew":"  private static byte[] toByteArray(InputStream input) throws IOException {\n    try {\n      // safe and fast even if input.available() behaves weird or buggy\n      int len = Math.max(256, input.available());\n      byte[] buffer = new byte[len];\n      byte[] output = new byte[len];\n      \n      len = 0;\n      int n;\n      while ((n = input.read(buffer)) >= 0) {\n        if (len + n > output.length) { // grow capacity\n          byte tmp[] = new byte[Math.max(output.length << 1, len + n)];\n          System.arraycopy(output, 0, tmp, 0, len);\n          System.arraycopy(buffer, 0, tmp, len, n);\n          buffer = output; // use larger buffer for future larger bulk reads\n          output = tmp;\n        } else {\n          System.arraycopy(buffer, 0, output, len, n);\n        }\n        len += n;\n      }\n\n      if (len == output.length) return output;\n      buffer = null; // help gc\n      buffer = new byte[len];\n      System.arraycopy(output, 0, buffer, 0, len);\n      return buffer;\n    } finally {\n      if (input != null) input.close();\n    }\n  }\n\n","sourceOld":"\tprivate static byte[] toByteArray(InputStream input) throws IOException {\n\t\ttry {\n\t\t\t// safe and fast even if input.available() behaves weird or buggy\n\t\t\tint len = Math.max(256, input.available());\n\t\t\tbyte[] buffer = new byte[len];\n\t\t\tbyte[] output = new byte[len];\n\t\t\t\n\t\t\tlen = 0;\n\t\t\tint n;\n\t\t\twhile ((n = input.read(buffer)) >= 0) {\n\t\t\t\tif (len + n > output.length) { // grow capacity\n\t\t\t\t\tbyte tmp[] = new byte[Math.max(output.length << 1, len + n)];\n\t\t\t\t\tSystem.arraycopy(output, 0, tmp, 0, len);\n\t\t\t\t\tSystem.arraycopy(buffer, 0, tmp, len, n);\n\t\t\t\t\tbuffer = output; // use larger buffer for future larger bulk reads\n\t\t\t\t\toutput = tmp;\n\t\t\t\t} else {\n\t\t\t\t\tSystem.arraycopy(buffer, 0, output, len, n);\n\t\t\t\t}\n\t\t\t\tlen += n;\n\t\t\t}\n\n\t\t\tif (len == output.length) return output;\n\t\t\tbuffer = null; // help gc\n\t\t\tbuffer = new byte[len];\n\t\t\tSystem.arraycopy(output, 0, buffer, 0, len);\n\t\t\treturn buffer;\n\t\t} finally {\n\t\t\tif (input != null) input.close();\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#toByteArray(InputStream).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#toByteArray(InputStream).mjava","sourceNew":"  private static byte[] toByteArray(InputStream input) throws IOException {\n    try {\n      // safe and fast even if input.available() behaves weird or buggy\n      int len = Math.max(256, input.available());\n      byte[] buffer = new byte[len];\n      byte[] output = new byte[len];\n      \n      len = 0;\n      int n;\n      while ((n = input.read(buffer)) >= 0) {\n        if (len + n > output.length) { // grow capacity\n          byte tmp[] = new byte[Math.max(output.length << 1, len + n)];\n          System.arraycopy(output, 0, tmp, 0, len);\n          System.arraycopy(buffer, 0, tmp, len, n);\n          buffer = output; // use larger buffer for future larger bulk reads\n          output = tmp;\n        } else {\n          System.arraycopy(buffer, 0, output, len, n);\n        }\n        len += n;\n      }\n\n      if (len == output.length) return output;\n      buffer = null; // help gc\n      buffer = new byte[len];\n      System.arraycopy(output, 0, buffer, 0, len);\n      return buffer;\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  private static byte[] toByteArray(InputStream input) throws IOException {\n    try {\n      // safe and fast even if input.available() behaves weird or buggy\n      int len = Math.max(256, input.available());\n      byte[] buffer = new byte[len];\n      byte[] output = new byte[len];\n      \n      len = 0;\n      int n;\n      while ((n = input.read(buffer)) >= 0) {\n        if (len + n > output.length) { // grow capacity\n          byte tmp[] = new byte[Math.max(output.length << 1, len + n)];\n          System.arraycopy(output, 0, tmp, 0, len);\n          System.arraycopy(buffer, 0, tmp, len, n);\n          buffer = output; // use larger buffer for future larger bulk reads\n          output = tmp;\n        } else {\n          System.arraycopy(buffer, 0, output, len, n);\n        }\n        len += n;\n      }\n\n      if (len == output.length) return output;\n      buffer = null; // help gc\n      buffer = new byte[len];\n      System.arraycopy(output, 0, buffer, 0, len);\n      return buffer;\n    } finally {\n      if (input != null) input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#toByteArray(InputStream).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#toByteArray(InputStream).mjava","sourceNew":"  private static byte[] toByteArray(InputStream input) throws IOException {\n    try {\n      // safe and fast even if input.available() behaves weird or buggy\n      int len = Math.max(256, input.available());\n      byte[] buffer = new byte[len];\n      byte[] output = new byte[len];\n      \n      len = 0;\n      int n;\n      while ((n = input.read(buffer)) >= 0) {\n        if (len + n > output.length) { // grow capacity\n          byte tmp[] = new byte[Math.max(output.length << 1, len + n)];\n          System.arraycopy(output, 0, tmp, 0, len);\n          System.arraycopy(buffer, 0, tmp, len, n);\n          buffer = output; // use larger buffer for future larger bulk reads\n          output = tmp;\n        } else {\n          System.arraycopy(buffer, 0, output, len, n);\n        }\n        len += n;\n      }\n\n      if (len == output.length) return output;\n      buffer = null; // help gc\n      buffer = new byte[len];\n      System.arraycopy(output, 0, buffer, 0, len);\n      return buffer;\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  private static byte[] toByteArray(InputStream input) throws IOException {\n    try {\n      // safe and fast even if input.available() behaves weird or buggy\n      int len = Math.max(256, input.available());\n      byte[] buffer = new byte[len];\n      byte[] output = new byte[len];\n      \n      len = 0;\n      int n;\n      while ((n = input.read(buffer)) >= 0) {\n        if (len + n > output.length) { // grow capacity\n          byte tmp[] = new byte[Math.max(output.length << 1, len + n)];\n          System.arraycopy(output, 0, tmp, 0, len);\n          System.arraycopy(buffer, 0, tmp, len, n);\n          buffer = output; // use larger buffer for future larger bulk reads\n          output = tmp;\n        } else {\n          System.arraycopy(buffer, 0, output, len, n);\n        }\n        len += n;\n      }\n\n      if (len == output.length) return output;\n      buffer = null; // help gc\n      buffer = new byte[len];\n      System.arraycopy(output, 0, buffer, 0, len);\n      return buffer;\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}