{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorDV[FacetField]#findStartAndEndOrds().mjava","commits":[{"id":"694c4ae1a6fef9d2740471ec0f3a8db6367817c8","date":1428290189,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorDV[FacetField]#findStartAndEndOrds().mjava","pathOld":"/dev/null","sourceNew":"  protected void findStartAndEndOrds() throws IOException {\n    if (multiValuedField) {\n      si = FieldUtil.getSortedSetDocValues(fcontext.qcontext, sf, null);\n      if (si instanceof MultiDocValues.MultiSortedSetDocValues) {\n        ordinalMap = ((MultiDocValues.MultiSortedSetDocValues)si).mapping;\n      }\n    } else {\n      SortedDocValues single = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      si = DocValues.singleton(single);  // multi-valued view\n      if (single instanceof MultiDocValues.MultiSortedDocValues) {\n        ordinalMap = ((MultiDocValues.MultiSortedDocValues)single).mapping;\n      }\n    }\n\n    if (si.getValueCount() >= Integer.MAX_VALUE) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field has too many unique values. field=\" + sf + \" nterms= \" + si.getValueCount());\n    }\n\n    if (prefixRef != null) {\n      startTermIndex = (int)si.lookupTerm(prefixRef.get());\n      if (startTermIndex < 0) startTermIndex = -startTermIndex - 1;\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      endTermIndex = (int)si.lookupTerm(prefixRef.get());\n      assert endTermIndex < 0;\n      endTermIndex = -endTermIndex - 1;\n    } else {\n      startTermIndex = 0;\n      endTermIndex = (int)si.getValueCount();\n    }\n\n    // optimize collecting the \"missing\" bucket when startTermindex is 0 (since the \"missing\" ord is -1)\n    startTermIndex = startTermIndex==0 && freq.missing ? -1 : startTermIndex;\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"168f749bbf9022a1ba5fea29c54baa1c00883d1d","date":1437587676,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorDV[FacetField]#findStartAndEndOrds().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorDV[FacetField]#findStartAndEndOrds().mjava","sourceNew":"  protected void findStartAndEndOrds() throws IOException {\n    if (multiValuedField) {\n      si = FieldUtil.getSortedSetDocValues(fcontext.qcontext, sf, null);\n      if (si instanceof MultiDocValues.MultiSortedSetDocValues) {\n        ordinalMap = ((MultiDocValues.MultiSortedSetDocValues)si).mapping;\n      }\n    } else {\n      SortedDocValues single = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      si = DocValues.singleton(single);  // multi-valued view\n      if (single instanceof MultiDocValues.MultiSortedDocValues) {\n        ordinalMap = ((MultiDocValues.MultiSortedDocValues)single).mapping;\n      }\n    }\n\n    if (si.getValueCount() >= Integer.MAX_VALUE) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field has too many unique values. field=\" + sf + \" nterms= \" + si.getValueCount());\n    }\n\n    if (prefixRef != null) {\n      startTermIndex = (int)si.lookupTerm(prefixRef.get());\n      if (startTermIndex < 0) startTermIndex = -startTermIndex - 1;\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      endTermIndex = (int)si.lookupTerm(prefixRef.get());\n      assert endTermIndex < 0;\n      endTermIndex = -endTermIndex - 1;\n    } else {\n      startTermIndex = 0;\n      endTermIndex = (int)si.getValueCount();\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","sourceOld":"  protected void findStartAndEndOrds() throws IOException {\n    if (multiValuedField) {\n      si = FieldUtil.getSortedSetDocValues(fcontext.qcontext, sf, null);\n      if (si instanceof MultiDocValues.MultiSortedSetDocValues) {\n        ordinalMap = ((MultiDocValues.MultiSortedSetDocValues)si).mapping;\n      }\n    } else {\n      SortedDocValues single = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      si = DocValues.singleton(single);  // multi-valued view\n      if (single instanceof MultiDocValues.MultiSortedDocValues) {\n        ordinalMap = ((MultiDocValues.MultiSortedDocValues)single).mapping;\n      }\n    }\n\n    if (si.getValueCount() >= Integer.MAX_VALUE) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field has too many unique values. field=\" + sf + \" nterms= \" + si.getValueCount());\n    }\n\n    if (prefixRef != null) {\n      startTermIndex = (int)si.lookupTerm(prefixRef.get());\n      if (startTermIndex < 0) startTermIndex = -startTermIndex - 1;\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      endTermIndex = (int)si.lookupTerm(prefixRef.get());\n      assert endTermIndex < 0;\n      endTermIndex = -endTermIndex - 1;\n    } else {\n      startTermIndex = 0;\n      endTermIndex = (int)si.getValueCount();\n    }\n\n    // optimize collecting the \"missing\" bucket when startTermindex is 0 (since the \"missing\" ord is -1)\n    startTermIndex = startTermIndex==0 && freq.missing ? -1 : startTermIndex;\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51b068b0154fe2220646b2dcc2133e168a31c743","date":1446661675,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorDV#findStartAndEndOrds().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorDV[FacetField]#findStartAndEndOrds().mjava","sourceNew":"  protected void findStartAndEndOrds() throws IOException {\n    if (multiValuedField) {\n      si = FieldUtil.getSortedSetDocValues(fcontext.qcontext, sf, null);\n      if (si instanceof MultiDocValues.MultiSortedSetDocValues) {\n        ordinalMap = ((MultiDocValues.MultiSortedSetDocValues)si).mapping;\n      }\n    } else {\n      SortedDocValues single = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      si = DocValues.singleton(single);  // multi-valued view\n      if (single instanceof MultiDocValues.MultiSortedDocValues) {\n        ordinalMap = ((MultiDocValues.MultiSortedDocValues)single).mapping;\n      }\n    }\n\n    if (si.getValueCount() >= Integer.MAX_VALUE) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field has too many unique values. field=\" + sf + \" nterms= \" + si.getValueCount());\n    }\n\n    if (prefixRef != null) {\n      startTermIndex = (int)si.lookupTerm(prefixRef.get());\n      if (startTermIndex < 0) startTermIndex = -startTermIndex - 1;\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      endTermIndex = (int)si.lookupTerm(prefixRef.get());\n      assert endTermIndex < 0;\n      endTermIndex = -endTermIndex - 1;\n    } else {\n      startTermIndex = 0;\n      endTermIndex = (int)si.getValueCount();\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","sourceOld":"  protected void findStartAndEndOrds() throws IOException {\n    if (multiValuedField) {\n      si = FieldUtil.getSortedSetDocValues(fcontext.qcontext, sf, null);\n      if (si instanceof MultiDocValues.MultiSortedSetDocValues) {\n        ordinalMap = ((MultiDocValues.MultiSortedSetDocValues)si).mapping;\n      }\n    } else {\n      SortedDocValues single = FieldUtil.getSortedDocValues(fcontext.qcontext, sf, null);\n      si = DocValues.singleton(single);  // multi-valued view\n      if (single instanceof MultiDocValues.MultiSortedDocValues) {\n        ordinalMap = ((MultiDocValues.MultiSortedDocValues)single).mapping;\n      }\n    }\n\n    if (si.getValueCount() >= Integer.MAX_VALUE) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field has too many unique values. field=\" + sf + \" nterms= \" + si.getValueCount());\n    }\n\n    if (prefixRef != null) {\n      startTermIndex = (int)si.lookupTerm(prefixRef.get());\n      if (startTermIndex < 0) startTermIndex = -startTermIndex - 1;\n      prefixRef.append(UnicodeUtil.BIG_TERM);\n      endTermIndex = (int)si.lookupTerm(prefixRef.get());\n      assert endTermIndex < 0;\n      endTermIndex = -endTermIndex - 1;\n    } else {\n      startTermIndex = 0;\n      endTermIndex = (int)si.getValueCount();\n    }\n\n    nTerms = endTermIndex - startTermIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51b068b0154fe2220646b2dcc2133e168a31c743":["168f749bbf9022a1ba5fea29c54baa1c00883d1d"],"694c4ae1a6fef9d2740471ec0f3a8db6367817c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"168f749bbf9022a1ba5fea29c54baa1c00883d1d":["694c4ae1a6fef9d2740471ec0f3a8db6367817c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51b068b0154fe2220646b2dcc2133e168a31c743"]},"commit2Childs":{"51b068b0154fe2220646b2dcc2133e168a31c743":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"694c4ae1a6fef9d2740471ec0f3a8db6367817c8":["168f749bbf9022a1ba5fea29c54baa1c00883d1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["694c4ae1a6fef9d2740471ec0f3a8db6367817c8"],"168f749bbf9022a1ba5fea29c54baa1c00883d1d":["51b068b0154fe2220646b2dcc2133e168a31c743"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}