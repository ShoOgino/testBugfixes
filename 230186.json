{"path":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    try {\n      super.close();\n      if(infoStream != null) {\n        infoStream.close();\n      }\n    } finally {\n      isClosed = true;\n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    try {\n      super.close();\n      if(infoStream != null) {\n        infoStream.close();\n      }\n    } finally {\n      isClosed = true;\n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    try {\n      super.close();\n      if(infoStream != null) {\n        infoStream.close();\n      }\n    } finally {\n      isClosed = true;\n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    try {\n      super.close();\n      if(infoStream != null) {\n        infoStream.close();\n      }\n    } finally {\n      isClosed = true;\n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    try {\n      super.close();\n      if(infoStream != null) {\n        infoStream.close();\n      }\n    } finally {\n      isClosed = true;\n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    try {\n      super.close();\n      if(infoStream != null) {\n        infoStream.close();\n      }\n    } finally {\n      isClosed = true;\n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e22ffe8cc51a892ae103df018822d7873e901c2a","date":1313696790,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    \n    try {\n      super.close();\n      if(infoStream != null) {\n        infoStream.close();\n      }\n    } finally {\n      isClosed = true;\n\n      directoryFactory.release(directory);\n     \n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    try {\n      super.close();\n      if(infoStream != null) {\n        infoStream.close();\n      }\n    } finally {\n      isClosed = true;\n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":["ab20a04a303d3d2a5078076f4633e0482d643cc0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();    \n    try {\n      super.close();\n      if(infoStream != null) {\n        infoStream.close();\n      }\n    } finally {\n      isClosed = true;\n\n      directoryFactory.release(directory);\n     \n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    \n    try {\n      super.close();\n      if(infoStream != null) {\n        infoStream.close();\n      }\n    } finally {\n      isClosed = true;\n\n      directoryFactory.release(directory);\n     \n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4897c5b415f476d84ec970a19c41510645887526","date":1342627582,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();    \n    try {\n      super.close();\n    } finally {\n      if(infoStream != null) {\n        infoStream.close();\n      }\n      \n      isClosed = true;\n\n      directoryFactory.release(directory);\n     \n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();    \n    try {\n      super.close();\n      if(infoStream != null) {\n        infoStream.close();\n      }\n    } finally {\n      isClosed = true;\n\n      directoryFactory.release(directory);\n     \n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1cb61792cbeba6c44e2530ca5836b96d956adb25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();    \n    try {\n      super.close();\n    } finally {\n      if(infoStream != null) {\n        infoStream.close();\n      }\n      \n      isClosed = true;\n\n      directoryFactory.release(directory);\n     \n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();    \n    try {\n      super.close();\n      if(infoStream != null) {\n        infoStream.close();\n      }\n    } finally {\n      isClosed = true;\n\n      directoryFactory.release(directory);\n     \n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();    \n    try {\n      super.close();\n    } finally {\n      if(infoStream != null) {\n        infoStream.close();\n      }\n      \n      isClosed = true;\n\n      directoryFactory.release(directory);\n     \n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();    \n    try {\n      super.close();\n      if(infoStream != null) {\n        infoStream.close();\n      }\n    } finally {\n      isClosed = true;\n\n      directoryFactory.release(directory);\n     \n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eba166b0f8bfe6fce0597a58cb2ec9f7dd398bcf","date":1355382810,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          super.close();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        }\n        break;\n      }\n    } finally {\n      if (infoStream != null) {\n        infoStream.close();\n      }\n      \n      isClosed = true;\n      \n      directoryFactory.release(directory);\n      \n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();    \n    try {\n      super.close();\n    } finally {\n      if(infoStream != null) {\n        infoStream.close();\n      }\n      \n      isClosed = true;\n\n      directoryFactory.release(directory);\n     \n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1cb61792cbeba6c44e2530ca5836b96d956adb25","ab20a04a303d3d2a5078076f4633e0482d643cc0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c8ddbfb3e01d52d30c5df59ad05900bd731e9b4a","date":1356194770,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          super.close();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        } catch (Throwable t) {\n          log.error(\"Error closing IndexWriter, trying rollback\", t);\n          super.rollback();\n        }\n        if (IndexWriter.isLocked(directory)) {\n          try {\n            IndexWriter.unlock(directory);\n          } catch (Throwable t) {\n            log.error(\"Coud not unlock directory after seemingly failed IndexWriter#close()\", t);\n          }\n        }\n        break;\n      }\n    } finally {\n      if (infoStream != null) {\n        infoStream.close();\n      }\n      \n      isClosed = true;\n      \n      directoryFactory.release(directory);\n      \n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          super.close();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        }\n        break;\n      }\n    } finally {\n      if (infoStream != null) {\n        infoStream.close();\n      }\n      \n      isClosed = true;\n      \n      directoryFactory.release(directory);\n      \n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":["ab20a04a303d3d2a5078076f4633e0482d643cc0","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4acbcab249146d9f5b359fbb160cb43757b963ee","date":1356308116,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          super.close();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        } catch (Throwable t) {\n          log.error(\"Error closing IndexWriter, trying rollback\", t);\n          super.rollback();\n        }\n        if (writeLock != null && writeLock.isLocked()) {\n          try {\n            // we go right to the lock because\n            // IndexWriter#unlock(Directory) does\n            // not work well in this case with\n            // native locks\n            writeLock.release();\n          } catch (Throwable t) {\n            log.error(\n                \"Coud not unlock directory after seemingly failed IndexWriter#close()\",\n                t);\n          }\n        }\n        break;\n      }\n    } finally {\n      if (infoStream != null) {\n        infoStream.close();\n      }\n      \n      isClosed = true;\n      \n      directoryFactory.release(directory);\n      \n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          super.close();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        } catch (Throwable t) {\n          log.error(\"Error closing IndexWriter, trying rollback\", t);\n          super.rollback();\n        }\n        if (IndexWriter.isLocked(directory)) {\n          try {\n            IndexWriter.unlock(directory);\n          } catch (Throwable t) {\n            log.error(\"Coud not unlock directory after seemingly failed IndexWriter#close()\", t);\n          }\n        }\n        break;\n      }\n    } finally {\n      if (infoStream != null) {\n        infoStream.close();\n      }\n      \n      isClosed = true;\n      \n      directoryFactory.release(directory);\n      \n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af3e8b5c594370136b6196c256f237c981c57752","date":1356315025,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          super.close();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        } catch (Throwable t) {\n          log.error(\"Error closing IndexWriter, trying rollback\", t);\n          super.rollback();\n        }\n        if (IndexWriter.isLocked(directory)) {\n          try {\n            IndexWriter.unlock(directory);\n          } catch (Throwable t) {\n            log.error(\"Coud not unlock directory after seemingly failed IndexWriter#close()\", t);\n          }\n        }\n        break;\n      }\n    } finally {\n      if (infoStream != null) {\n        infoStream.close();\n      }\n      \n      isClosed = true;\n      \n      directoryFactory.release(directory);\n      \n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          super.close();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        } catch (Throwable t) {\n          log.error(\"Error closing IndexWriter, trying rollback\", t);\n          super.rollback();\n        }\n        if (writeLock != null && writeLock.isLocked()) {\n          try {\n            // we go right to the lock because\n            // IndexWriter#unlock(Directory) does\n            // not work well in this case with\n            // native locks\n            writeLock.release();\n          } catch (Throwable t) {\n            log.error(\n                \"Coud not unlock directory after seemingly failed IndexWriter#close()\",\n                t);\n          }\n        }\n        break;\n      }\n    } finally {\n      if (infoStream != null) {\n        infoStream.close();\n      }\n      \n      isClosed = true;\n      \n      directoryFactory.release(directory);\n      \n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":["ab20a04a303d3d2a5078076f4633e0482d643cc0","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          super.close();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        } catch (Throwable t) {\n          log.error(\"Error closing IndexWriter, trying rollback\", t);\n          super.rollback();\n        }\n        if (IndexWriter.isLocked(directory)) {\n          try {\n            IndexWriter.unlock(directory);\n          } catch (Throwable t) {\n            log.error(\"Coud not unlock directory after seemingly failed IndexWriter#close()\", t);\n          }\n        }\n        break;\n      }\n    } finally {\n      if (infoStream != null) {\n        infoStream.close();\n      }\n      \n      isClosed = true;\n      \n      directoryFactory.release(directory);\n      \n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();    \n    try {\n      super.close();\n    } finally {\n      if(infoStream != null) {\n        infoStream.close();\n      }\n      \n      isClosed = true;\n\n      directoryFactory.release(directory);\n     \n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cb61792cbeba6c44e2530ca5836b96d956adb25","date":1372469272,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          super.close();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        } catch (Throwable t) {\n          log.error(\"Error closing IndexWriter, trying rollback\", t);\n          super.rollback();\n        }\n        if (IndexWriter.isLocked(directory)) {\n          try {\n            IndexWriter.unlock(directory);\n          } catch (Throwable t) {\n            log.error(\"Coud not unlock directory after seemingly failed IndexWriter#close()\", t);\n          }\n        }\n        break;\n      }\n    } finally {\n      infoStream.close();\n      isClosed = true;\n      directoryFactory.release(directory);\n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          super.close();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        } catch (Throwable t) {\n          log.error(\"Error closing IndexWriter, trying rollback\", t);\n          super.rollback();\n        }\n        if (IndexWriter.isLocked(directory)) {\n          try {\n            IndexWriter.unlock(directory);\n          } catch (Throwable t) {\n            log.error(\"Coud not unlock directory after seemingly failed IndexWriter#close()\", t);\n          }\n        }\n        break;\n      }\n    } finally {\n      if (infoStream != null) {\n        infoStream.close();\n      }\n      \n      isClosed = true;\n      \n      directoryFactory.release(directory);\n      \n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":["eba166b0f8bfe6fce0597a58cb2ec9f7dd398bcf","4897c5b415f476d84ec970a19c41510645887526","c0d8dceae0594e66ce62ce0f775689af35a2266c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f090a08308f0b18557e1a21719c61dd4ad3a7eb6","date":1372775875,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          super.close();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        } catch (Throwable t) {\n          log.error(\"Error closing IndexWriter, trying rollback\", t);\n          super.rollback();\n        }\n        if (IndexWriter.isLocked(directory)) {\n          try {\n            IndexWriter.unlock(directory);\n          } catch (Throwable t) {\n            log.error(\"Coud not unlock directory after seemingly failed IndexWriter#close()\", t);\n          }\n        }\n        break;\n      }\n    } finally {\n      if (infoStream != null) {\n        infoStream.close();\n      }\n      isClosed = true;\n      directoryFactory.release(directory);\n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          super.close();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        } catch (Throwable t) {\n          log.error(\"Error closing IndexWriter, trying rollback\", t);\n          super.rollback();\n        }\n        if (IndexWriter.isLocked(directory)) {\n          try {\n            IndexWriter.unlock(directory);\n          } catch (Throwable t) {\n            log.error(\"Coud not unlock directory after seemingly failed IndexWriter#close()\", t);\n          }\n        }\n        break;\n      }\n    } finally {\n      infoStream.close();\n      isClosed = true;\n      directoryFactory.release(directory);\n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":["ab20a04a303d3d2a5078076f4633e0482d643cc0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          super.close();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        } catch (Throwable t) {\n          log.error(\"Error closing IndexWriter, trying rollback\", t);\n          super.rollback();\n        }\n        if (IndexWriter.isLocked(directory)) {\n          try {\n            IndexWriter.unlock(directory);\n          } catch (Throwable t) {\n            log.error(\"Coud not unlock directory after seemingly failed IndexWriter#close()\", t);\n          }\n        }\n        break;\n      }\n    } finally {\n      if (infoStream != null) {\n        infoStream.close();\n      }\n      isClosed = true;\n      directoryFactory.release(directory);\n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          super.close();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        } catch (Throwable t) {\n          log.error(\"Error closing IndexWriter, trying rollback\", t);\n          super.rollback();\n        }\n        if (IndexWriter.isLocked(directory)) {\n          try {\n            IndexWriter.unlock(directory);\n          } catch (Throwable t) {\n            log.error(\"Coud not unlock directory after seemingly failed IndexWriter#close()\", t);\n          }\n        }\n        break;\n      }\n    } finally {\n      if (infoStream != null) {\n        infoStream.close();\n      }\n      \n      isClosed = true;\n      \n      directoryFactory.release(directory);\n      \n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          super.close();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        } catch (Throwable t) {\n          if (t instanceof OutOfMemoryError) {\n            throw (OutOfMemoryError) t;\n          }\n          log.error(\"Error closing IndexWriter, trying rollback\", t);\n          super.rollback();\n        }\n        if (IndexWriter.isLocked(directory)) {\n          try {\n            IndexWriter.unlock(directory);\n          } catch (Exception e) {\n            log.error(\"Coud not unlock directory after seemingly failed IndexWriter#close()\", e);\n          }\n        }\n        break;\n      }\n    } finally {\n      if (infoStream != null) {\n        infoStream.close();\n      }\n      isClosed = true;\n      directoryFactory.release(directory);\n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          super.close();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        } catch (Throwable t) {\n          log.error(\"Error closing IndexWriter, trying rollback\", t);\n          super.rollback();\n        }\n        if (IndexWriter.isLocked(directory)) {\n          try {\n            IndexWriter.unlock(directory);\n          } catch (Throwable t) {\n            log.error(\"Coud not unlock directory after seemingly failed IndexWriter#close()\", t);\n          }\n        }\n        break;\n      }\n    } finally {\n      if (infoStream != null) {\n        infoStream.close();\n      }\n      isClosed = true;\n      directoryFactory.release(directory);\n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":["af3e8b5c594370136b6196c256f237c981c57752","c8ddbfb3e01d52d30c5df59ad05900bd731e9b4a"],"bugIntro":["ab20a04a303d3d2a5078076f4633e0482d643cc0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          flush(true, true);\n          waitForMerges();\n          commit();\n          super.rollback();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        } catch (Throwable t) {\n          if (t instanceof OutOfMemoryError) {\n            throw (OutOfMemoryError) t;\n          }\n          log.error(\"Error closing IndexWriter, trying rollback\", t);\n          super.rollback();\n        }\n        if (IndexWriter.isLocked(directory)) {\n          try {\n            IndexWriter.unlock(directory);\n          } catch (Exception e) {\n            log.error(\"Coud not unlock directory after seemingly failed IndexWriter#close()\", e);\n          }\n        }\n        break;\n      }\n    } finally {\n      if (infoStream != null) {\n        infoStream.close();\n      }\n      isClosed = true;\n      directoryFactory.release(directory);\n      numCloses.incrementAndGet();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          super.close();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        } catch (Throwable t) {\n          if (t instanceof OutOfMemoryError) {\n            throw (OutOfMemoryError) t;\n          }\n          log.error(\"Error closing IndexWriter, trying rollback\", t);\n          super.rollback();\n        }\n        if (IndexWriter.isLocked(directory)) {\n          try {\n            IndexWriter.unlock(directory);\n          } catch (Exception e) {\n            log.error(\"Coud not unlock directory after seemingly failed IndexWriter#close()\", e);\n          }\n        }\n        break;\n      }\n    } finally {\n      if (infoStream != null) {\n        infoStream.close();\n      }\n      isClosed = true;\n      directoryFactory.release(directory);\n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":["ab20a04a303d3d2a5078076f4633e0482d643cc0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab20a04a303d3d2a5078076f4633e0482d643cc0","date":1398201811,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    try {\n      super.close();\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      log.error(\"Error closing IndexWriter\", t);\n    } finally {\n      cleanup();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          flush(true, true);\n          waitForMerges();\n          commit();\n          super.rollback();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        } catch (Throwable t) {\n          if (t instanceof OutOfMemoryError) {\n            throw (OutOfMemoryError) t;\n          }\n          log.error(\"Error closing IndexWriter, trying rollback\", t);\n          super.rollback();\n        }\n        if (IndexWriter.isLocked(directory)) {\n          try {\n            IndexWriter.unlock(directory);\n          } catch (Exception e) {\n            log.error(\"Coud not unlock directory after seemingly failed IndexWriter#close()\", e);\n          }\n        }\n        break;\n      }\n    } finally {\n      if (infoStream != null) {\n        infoStream.close();\n      }\n      isClosed = true;\n      directoryFactory.release(directory);\n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":["e22ffe8cc51a892ae103df018822d7873e901c2a","af3e8b5c594370136b6196c256f237c981c57752","eba166b0f8bfe6fce0597a58cb2ec9f7dd398bcf","ae14298f4eec6d5faee6a149f88ba57d14a6f21a","f090a08308f0b18557e1a21719c61dd4ad3a7eb6","7a71a0b2d4be2299a163f60626729852d81a8e02","c8ddbfb3e01d52d30c5df59ad05900bd731e9b4a","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","c0d8dceae0594e66ce62ce0f775689af35a2266c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    try {\n      super.close();\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      log.error(\"Error closing IndexWriter\", t);\n    } finally {\n      cleanup();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    Directory directory = getDirectory();\n    final InfoStream infoStream = isClosed ? null : getConfig().getInfoStream();\n    try {\n      while (true) {\n        try {\n          flush(true, true);\n          waitForMerges();\n          commit();\n          super.rollback();\n        } catch (ThreadInterruptedException e) {\n          // don't allow interruption\n          continue;\n        } catch (Throwable t) {\n          if (t instanceof OutOfMemoryError) {\n            throw (OutOfMemoryError) t;\n          }\n          log.error(\"Error closing IndexWriter, trying rollback\", t);\n          super.rollback();\n        }\n        if (IndexWriter.isLocked(directory)) {\n          try {\n            IndexWriter.unlock(directory);\n          } catch (Exception e) {\n            log.error(\"Coud not unlock directory after seemingly failed IndexWriter#close()\", e);\n          }\n        }\n        break;\n      }\n    } finally {\n      if (infoStream != null) {\n        infoStream.close();\n      }\n      isClosed = true;\n      directoryFactory.release(directory);\n      numCloses.incrementAndGet();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer {}\", name);\n    try {\n      super.close();\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      log.error(\"Error closing IndexWriter\", t);\n    } finally {\n      cleanup();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    log.debug(\"Closing Writer \" + name);\n    try {\n      super.close();\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      log.error(\"Error closing IndexWriter\", t);\n    } finally {\n      cleanup();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4897c5b415f476d84ec970a19c41510645887526","af3e8b5c594370136b6196c256f237c981c57752"],"1cb61792cbeba6c44e2530ca5836b96d956adb25":["af3e8b5c594370136b6196c256f237c981c57752"],"740d649f013f07efbeb73ca854f106c60166e7c0":["ab20a04a303d3d2a5078076f4633e0482d643cc0"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","ab20a04a303d3d2a5078076f4633e0482d643cc0"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["af3e8b5c594370136b6196c256f237c981c57752","f090a08308f0b18557e1a21719c61dd4ad3a7eb6"],"06584e6e98d592b34e1329b384182f368d2025e8":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"ab20a04a303d3d2a5078076f4633e0482d643cc0":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c8ddbfb3e01d52d30c5df59ad05900bd731e9b4a":["eba166b0f8bfe6fce0597a58cb2ec9f7dd398bcf"],"f090a08308f0b18557e1a21719c61dd4ad3a7eb6":["1cb61792cbeba6c44e2530ca5836b96d956adb25"],"aba371508186796cc6151d8223a5b4e16d02e26e":["06584e6e98d592b34e1329b384182f368d2025e8","4897c5b415f476d84ec970a19c41510645887526"],"eba166b0f8bfe6fce0597a58cb2ec9f7dd398bcf":["4897c5b415f476d84ec970a19c41510645887526"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"af3e8b5c594370136b6196c256f237c981c57752":["4acbcab249146d9f5b359fbb160cb43757b963ee"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["06584e6e98d592b34e1329b384182f368d2025e8","4897c5b415f476d84ec970a19c41510645887526"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4897c5b415f476d84ec970a19c41510645887526":["06584e6e98d592b34e1329b384182f368d2025e8"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4acbcab249146d9f5b359fbb160cb43757b963ee":["c8ddbfb3e01d52d30c5df59ad05900bd731e9b4a"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["f090a08308f0b18557e1a21719c61dd4ad3a7eb6"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"1cb61792cbeba6c44e2530ca5836b96d956adb25":["f090a08308f0b18557e1a21719c61dd4ad3a7eb6"],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"06584e6e98d592b34e1329b384182f368d2025e8":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","4897c5b415f476d84ec970a19c41510645887526"],"c26f00b574427b55127e869b935845554afde1fa":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"ab20a04a303d3d2a5078076f4633e0482d643cc0":["740d649f013f07efbeb73ca854f106c60166e7c0","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"c8ddbfb3e01d52d30c5df59ad05900bd731e9b4a":["4acbcab249146d9f5b359fbb160cb43757b963ee"],"f090a08308f0b18557e1a21719c61dd4ad3a7eb6":["37a0f60745e53927c4c876cfe5b5a58170f0646c","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"eba166b0f8bfe6fce0597a58cb2ec9f7dd398bcf":["c8ddbfb3e01d52d30c5df59ad05900bd731e9b4a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"af3e8b5c594370136b6196c256f237c981c57752":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1cb61792cbeba6c44e2530ca5836b96d956adb25","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"4897c5b415f476d84ec970a19c41510645887526":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","eba166b0f8bfe6fce0597a58cb2ec9f7dd398bcf","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","ab20a04a303d3d2a5078076f4633e0482d643cc0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4acbcab249146d9f5b359fbb160cb43757b963ee":["af3e8b5c594370136b6196c256f237c981c57752"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["06584e6e98d592b34e1329b384182f368d2025e8"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","37a0f60745e53927c4c876cfe5b5a58170f0646c","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}