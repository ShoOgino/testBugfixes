{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","sourceNew":"    public void testChangingRAMBuffer2() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMaxBufferedDeleteTerms(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      \n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10) {\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        } else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDeleteTerms(1);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDeleteTerms(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDeleteTerms(IndexWriter.DISABLE_AUTO_FLUSH);\n          writer.setMaxBufferedDeleteTerms(1);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDeleteTerms(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDeleteTerms(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testChangingRAMBuffer2() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMaxBufferedDeleteTerms(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      \n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10) {\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        } else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDeleteTerms(1);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDeleteTerms(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDeleteTerms(IndexWriter.DISABLE_AUTO_FLUSH);\n          writer.setMaxBufferedDeleteTerms(1);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDeleteTerms(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDeleteTerms(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer2().mjava","sourceNew":null,"sourceOld":"    public void testChangingRAMBuffer2() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setMaxBufferedDeleteTerms(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n      \n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        writer.deleteDocuments(new Term(\"field\", \"aaa\" + j));\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10) {\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        } else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDeleteTerms(1);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDeleteTerms(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDeleteTerms(IndexWriter.DISABLE_AUTO_FLUSH);\n          writer.setMaxBufferedDeleteTerms(1);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDeleteTerms(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDeleteTerms(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}