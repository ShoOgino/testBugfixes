{"path":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#testDoubles().mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#testDoubles().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testDoubles().mjava","sourceNew":"  public void testDoubles() throws Exception {\n    double[] vals=new double[]{\n      Double.NEGATIVE_INFINITY, -2.3E25, -1.0E15, -1.0, -1.0E-1, -1.0E-2, -0.0, \n      +0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY, Double.NaN\n    };\n    long[] longVals=new long[vals.length];\n    \n    // check forward and back conversion\n    for (int i=0; i<vals.length; i++) {\n      longVals[i]= NumericUtils.doubleToSortableLong(vals[i]);\n      assertTrue( \"forward and back conversion should generate same double\", Double.compare(vals[i], NumericUtils.sortableLongToDouble(longVals[i]))==0 );\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<longVals.length; i++) {\n      assertTrue( \"check sort order\", longVals[i-1] < longVals[i] );\n    }\n  }\n\n","sourceOld":"  public void testDoubles() throws Exception {\n    double[] vals=new double[]{\n      Double.NEGATIVE_INFINITY, -2.3E25, -1.0E15, -1.0, -1.0E-1, -1.0E-2, -0.0, \n      +0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY, Double.NaN\n    };\n    long[] longVals=new long[vals.length];\n    \n    // check forward and back conversion\n    for (int i=0; i<vals.length; i++) {\n      longVals[i]= NumericUtils.doubleToSortableLong(vals[i]);\n      assertTrue( \"forward and back conversion should generate same double\", Double.compare(vals[i], NumericUtils.sortableLongToDouble(longVals[i]))==0 );\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<longVals.length; i++) {\n      assertTrue( \"check sort order\", longVals[i-1] < longVals[i] );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#testDoubles().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testDoubles().mjava","sourceNew":"  public void testDoubles() throws Exception {\n    double[] vals=new double[]{\n      Double.NEGATIVE_INFINITY, -2.3E25, -1.0E15, -1.0, -1.0E-1, -1.0E-2, -0.0, \n      +0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY, Double.NaN\n    };\n    long[] longVals=new long[vals.length];\n    \n    // check forward and back conversion\n    for (int i=0; i<vals.length; i++) {\n      longVals[i]= NumericUtils.doubleToSortableLong(vals[i]);\n      assertTrue( \"forward and back conversion should generate same double\", Double.compare(vals[i], NumericUtils.sortableLongToDouble(longVals[i]))==0 );\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<longVals.length; i++) {\n      assertTrue( \"check sort order\", longVals[i-1] < longVals[i] );\n    }\n  }\n\n","sourceOld":"  public void testDoubles() throws Exception {\n    double[] vals=new double[]{\n      Double.NEGATIVE_INFINITY, -2.3E25, -1.0E15, -1.0, -1.0E-1, -1.0E-2, -0.0, \n      +0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY, Double.NaN\n    };\n    long[] longVals=new long[vals.length];\n    \n    // check forward and back conversion\n    for (int i=0; i<vals.length; i++) {\n      longVals[i]= NumericUtils.doubleToSortableLong(vals[i]);\n      assertTrue( \"forward and back conversion should generate same double\", Double.compare(vals[i], NumericUtils.sortableLongToDouble(longVals[i]))==0 );\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<longVals.length; i++) {\n      assertTrue( \"check sort order\", longVals[i-1] < longVals[i] );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestLegacyNumericUtils#testDoubles().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testDoubles().mjava","sourceNew":"  public void testDoubles() throws Exception {\n    double[] vals=new double[]{\n      Double.NEGATIVE_INFINITY, -2.3E25, -1.0E15, -1.0, -1.0E-1, -1.0E-2, -0.0, \n      +0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY, Double.NaN\n    };\n    long[] longVals=new long[vals.length];\n    \n    // check forward and back conversion\n    for (int i=0; i<vals.length; i++) {\n      longVals[i]= NumericUtils.doubleToSortableLong(vals[i]);\n      assertTrue( \"forward and back conversion should generate same double\", Double.compare(vals[i], NumericUtils.sortableLongToDouble(longVals[i]))==0 );\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<longVals.length; i++) {\n      assertTrue( \"check sort order\", longVals[i-1] < longVals[i] );\n    }\n  }\n\n","sourceOld":"  public void testDoubles() throws Exception {\n    double[] vals=new double[]{\n      Double.NEGATIVE_INFINITY, -2.3E25, -1.0E15, -1.0, -1.0E-1, -1.0E-2, -0.0, \n      +0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY, Double.NaN\n    };\n    long[] longVals=new long[vals.length];\n    \n    // check forward and back conversion\n    for (int i=0; i<vals.length; i++) {\n      longVals[i]= NumericUtils.doubleToSortableLong(vals[i]);\n      assertTrue( \"forward and back conversion should generate same double\", Double.compare(vals[i], NumericUtils.sortableLongToDouble(longVals[i]))==0 );\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<longVals.length; i++) {\n      assertTrue( \"check sort order\", longVals[i-1] < longVals[i] );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}