{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestUtil#verifyReadCeilArc(List[String],boolean).mjava","commits":[{"id":"b115f25f829e48473723bb73c2c09e29f0a3ed0d","date":1564170556,"type":0,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestUtil#verifyReadCeilArc(List[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyReadCeilArc(List<String> letters, boolean allowArrayArcs) throws Exception {\n    FST<Object> fst = buildFST(letters, allowArrayArcs);\n    FST.Arc<Object> first = fst.getFirstArc(new FST.Arc<>());\n    FST.Arc<Object> arc = new FST.Arc<>();\n    FST.BytesReader in = fst.getBytesReader();\n    for (String letter : letters) {\n      char c = letter.charAt(0);\n      arc = Util.readCeilArc(c, fst, first, arc, in);\n      assertNotNull(arc);\n      assertEquals(c, arc.label());\n    }\n    // before the first\n    assertEquals('A', Util.readCeilArc(' ', fst, first, arc, in).label());\n    // after the last\n    assertNull(Util.readCeilArc('~', fst, first, arc, in));\n    // in the middle\n    assertEquals('J', Util.readCeilArc('F', fst, first, arc, in).label());\n    // no following arcs\n    assertNull(Util.readCeilArc('Z', fst, arc, arc, in));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":0,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestUtil#verifyReadCeilArc(List[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyReadCeilArc(List<String> letters, boolean allowArrayArcs) throws Exception {\n    FST<Object> fst = buildFST(letters, allowArrayArcs);\n    FST.Arc<Object> first = fst.getFirstArc(new FST.Arc<>());\n    FST.Arc<Object> arc = new FST.Arc<>();\n    FST.BytesReader in = fst.getBytesReader();\n    for (String letter : letters) {\n      char c = letter.charAt(0);\n      arc = Util.readCeilArc(c, fst, first, arc, in);\n      assertNotNull(arc);\n      assertEquals(c, arc.label());\n    }\n    // before the first\n    assertEquals('A', Util.readCeilArc(' ', fst, first, arc, in).label());\n    // after the last\n    assertNull(Util.readCeilArc('~', fst, first, arc, in));\n    // in the middle\n    assertEquals('J', Util.readCeilArc('F', fst, first, arc, in).label());\n    // no following arcs\n    assertNull(Util.readCeilArc('Z', fst, arc, arc, in));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":5,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestUtil#verifyReadCeilArc(List[String],boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestUtil#verifyReadCeilArc(List[String],boolean).mjava","sourceNew":"  private void verifyReadCeilArc(List<String> letters, boolean allowArrayArcs, boolean allowDirectAddressing) throws Exception {\n    FST<Object> fst = buildFST(letters, allowArrayArcs, allowDirectAddressing);\n    FST.Arc<Object> first = fst.getFirstArc(new FST.Arc<>());\n    FST.Arc<Object> arc = new FST.Arc<>();\n    FST.BytesReader in = fst.getBytesReader();\n    for (String letter : letters) {\n      char c = letter.charAt(0);\n      arc = Util.readCeilArc(c, fst, first, arc, in);\n      assertNotNull(arc);\n      assertEquals(c, arc.label());\n    }\n    // before the first\n    assertEquals('A', Util.readCeilArc(' ', fst, first, arc, in).label());\n    // after the last\n    assertNull(Util.readCeilArc('~', fst, first, arc, in));\n    // in the middle\n    assertEquals('J', Util.readCeilArc('F', fst, first, arc, in).label());\n    // no following arcs\n    assertNull(Util.readCeilArc('Z', fst, arc, arc, in));\n  }\n\n","sourceOld":"  private void verifyReadCeilArc(List<String> letters, boolean allowArrayArcs) throws Exception {\n    FST<Object> fst = buildFST(letters, allowArrayArcs);\n    FST.Arc<Object> first = fst.getFirstArc(new FST.Arc<>());\n    FST.Arc<Object> arc = new FST.Arc<>();\n    FST.BytesReader in = fst.getBytesReader();\n    for (String letter : letters) {\n      char c = letter.charAt(0);\n      arc = Util.readCeilArc(c, fst, first, arc, in);\n      assertNotNull(arc);\n      assertEquals(c, arc.label());\n    }\n    // before the first\n    assertEquals('A', Util.readCeilArc(' ', fst, first, arc, in).label());\n    // after the last\n    assertNull(Util.readCeilArc('~', fst, first, arc, in));\n    // in the middle\n    assertEquals('J', Util.readCeilArc('F', fst, first, arc, in).label());\n    // no following arcs\n    assertNull(Util.readCeilArc('Z', fst, arc, arc, in));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b115f25f829e48473723bb73c2c09e29f0a3ed0d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71d31a7d5773508492505519bb5230b87c8937ad":["b115f25f829e48473723bb73c2c09e29f0a3ed0d"],"f8061ddd97f3352007d927dae445884a6f3d857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b115f25f829e48473723bb73c2c09e29f0a3ed0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71d31a7d5773508492505519bb5230b87c8937ad"]},"commit2Childs":{"b115f25f829e48473723bb73c2c09e29f0a3ed0d":["71d31a7d5773508492505519bb5230b87c8937ad","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b115f25f829e48473723bb73c2c09e29f0a3ed0d","f8061ddd97f3352007d927dae445884a6f3d857b"],"71d31a7d5773508492505519bb5230b87c8937ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}