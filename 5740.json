{"path":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#next(Token).mjava","commits":[{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#next(Token).mjava","pathOld":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#next().mjava","sourceNew":"  /** Returns the next input Token, after being stemmed */\n  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    Token nextToken = input.next(reusableToken);\n    if (nextToken == null)\n      return null;\n    String originalTerm = nextToken.term();\n    stemmer.setCurrent(originalTerm);\n    try {\n      stemMethod.invoke(stemmer, EMPTY_ARGS);\n    } catch (Exception e) {\n      throw new RuntimeException(e.toString());\n    }\n    String finalTerm = stemmer.getCurrent();\n    // Don't bother updating, if it is unchanged.\n    if (!originalTerm.equals(finalTerm))\n      nextToken.setTermBuffer(finalTerm);\n    return nextToken;\n  }\n\n","sourceOld":"  /** Returns the next input Token, after being stemmed */\n  public final Token next() throws IOException {\n    Token token = input.next();\n    if (token == null)\n      return null;\n    stemmer.setCurrent(token.termText());\n    try {\n      stemMethod.invoke(stemmer, EMPTY_ARGS);\n    } catch (Exception e) {\n      throw new RuntimeException(e.toString());\n    }\n    \n    Token newToken = new Token(stemmer.getCurrent(),\n                      token.startOffset(), token.endOffset(), token.type());\n    newToken.setPositionIncrement(token.getPositionIncrement());\n    return newToken;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b62da6a75575f59a016a076b4753dc6e20c74b44","date":1219528967,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#next(Token).mjava","pathOld":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#next(Token).mjava","sourceNew":"  /** Returns the next input Token, after being stemmed */\n  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    Token nextToken = input.next(reusableToken);\n    if (nextToken == null)\n      return null;\n    String originalTerm = nextToken.term();\n    stemmer.setCurrent(originalTerm);\n    stemmer.stem();\n    String finalTerm = stemmer.getCurrent();\n    // Don't bother updating, if it is unchanged.\n    if (!originalTerm.equals(finalTerm))\n      nextToken.setTermBuffer(finalTerm);\n    return nextToken;\n  }\n\n","sourceOld":"  /** Returns the next input Token, after being stemmed */\n  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    Token nextToken = input.next(reusableToken);\n    if (nextToken == null)\n      return null;\n    String originalTerm = nextToken.term();\n    stemmer.setCurrent(originalTerm);\n    try {\n      stemMethod.invoke(stemmer, EMPTY_ARGS);\n    } catch (Exception e) {\n      throw new RuntimeException(e.toString());\n    }\n    String finalTerm = stemmer.getCurrent();\n    // Don't bother updating, if it is unchanged.\n    if (!originalTerm.equals(finalTerm))\n      nextToken.setTermBuffer(finalTerm);\n    return nextToken;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#next(Token).mjava","pathOld":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#next(Token).mjava","sourceNew":"  /** @deprecated Will be removed in Lucene 3.0. This method is final, as it should\n   * not be overridden. Delegates to the backwards compatibility layer. */\n  public final Token next(final Token reusableToken) throws java.io.IOException {\n    return super.next(reusableToken);\n  }\n\n","sourceOld":"  /** Returns the next input Token, after being stemmed */\n  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    Token nextToken = input.next(reusableToken);\n    if (nextToken == null)\n      return null;\n    String originalTerm = nextToken.term();\n    stemmer.setCurrent(originalTerm);\n    stemmer.stem();\n    String finalTerm = stemmer.getCurrent();\n    // Don't bother updating, if it is unchanged.\n    if (!originalTerm.equals(finalTerm))\n      nextToken.setTermBuffer(finalTerm);\n    return nextToken;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"439b0fe2f799d1c722151e88e32bdefad8d34ebe","date":1255282509,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/snowball/src/java/org/apache/lucene/analysis/snowball/SnowballFilter#next(Token).mjava","sourceNew":null,"sourceOld":"  /** @deprecated Will be removed in Lucene 3.0. This method is final, as it should\n   * not be overridden. Delegates to the backwards compatibility layer. */\n  public final Token next(final Token reusableToken) throws java.io.IOException {\n    return super.next(reusableToken);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b62da6a75575f59a016a076b4753dc6e20c74b44":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["b62da6a75575f59a016a076b4753dc6e20c74b44"],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["b62da6a75575f59a016a076b4753dc6e20c74b44"],"b62da6a75575f59a016a076b4753dc6e20c74b44":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}