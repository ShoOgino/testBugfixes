{"path":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testWilcards().mjava","commits":[{"id":"937d1992553892661e4efbb659656cc565a9e621","date":1330719427,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testWilcards().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testReturnFields().mjava","sourceNew":"  @Test\n  public void testWilcards() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n\n    rf = new ReturnFields( req(\"fl\", \" * \") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaxxx\" ) );\n    assertFalse(rf.wantsField(\"xxxaaa\"));\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse(rf.wantsField(\"bbbxxx\"));\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testReturnFields() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"id,score\") );\n    assertTrue( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"score\" ) );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertFalse( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.getTransformer() instanceof ScoreAugmenter );\n    \n    rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n    \n    rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaa\" ) );\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testWilcards().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWilcards() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n\n    rf = new ReturnFields( req(\"fl\", \" * \") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaxxx\" ) );\n    assertFalse(rf.wantsField(\"xxxaaa\"));\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse(rf.wantsField(\"bbbxxx\"));\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d17ffdbce80d3dce181982a9cd16f4f90bc8619a","date":1357583592,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testWilcards().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testWilcards().mjava","sourceNew":"  @Test\n  public void testWilcards() {\n    ReturnFields rf = new SolrReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n\n    rf = new SolrReturnFields( req(\"fl\", \" * \") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n\n    // Check that we want wildcards\n    rf = new SolrReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaxxx\" ) );\n    assertFalse(rf.wantsField(\"xxxaaa\"));\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse(rf.wantsField(\"bbbxxx\"));\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testWilcards() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n\n    rf = new ReturnFields( req(\"fl\", \" * \") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaxxx\" ) );\n    assertFalse(rf.wantsField(\"xxxaaa\"));\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse(rf.wantsField(\"bbbxxx\"));\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testWilcards().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testWilcards().mjava","sourceNew":"  @Test\n  public void testWilcards() {\n    ReturnFields rf = new SolrReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n\n    rf = new SolrReturnFields( req(\"fl\", \" * \") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n\n    // Check that we want wildcards\n    rf = new SolrReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaxxx\" ) );\n    assertFalse(rf.wantsField(\"xxxaaa\"));\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse(rf.wantsField(\"bbbxxx\"));\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","sourceOld":"  @Test\n  public void testWilcards() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"*\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n\n    rf = new ReturnFields( req(\"fl\", \" * \") );\n    assertFalse( rf.wantsScore() );\n    assertTrue( rf.wantsField( \"xxx\" ) );\n    assertTrue( rf.wantsAllFields() );\n    assertNull( rf.getTransformer() );\n\n    // Check that we want wildcards\n    rf = new ReturnFields( req(\"fl\", \"id,aaa*,*bbb\") );\n    assertTrue( rf.wantsField( \"id\" ) );\n    assertTrue( rf.wantsField( \"aaaxxx\" ) );\n    assertFalse(rf.wantsField(\"xxxaaa\"));\n    assertTrue( rf.wantsField( \"xxxbbb\" ) );\n    assertFalse(rf.wantsField(\"bbbxxx\"));\n    assertFalse( rf.wantsField( \"aa\" ) );\n    assertFalse( rf.wantsField( \"bb\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["937d1992553892661e4efbb659656cc565a9e621","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["937d1992553892661e4efbb659656cc565a9e621"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937d1992553892661e4efbb659656cc565a9e621"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"937d1992553892661e4efbb659656cc565a9e621":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d17ffdbce80d3dce181982a9cd16f4f90bc8619a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","937d1992553892661e4efbb659656cc565a9e621"],"937d1992553892661e4efbb659656cc565a9e621":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d17ffdbce80d3dce181982a9cd16f4f90bc8619a","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}