{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,Directory,Analyzer,Analyzer,int).mjava","commits":[{"id":"f1e7da8a91a92330e8f04b171b83e655a4a25c31","date":1394125906,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,Directory,Analyzer,Analyzer,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,File,Analyzer,Analyzer,int).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists. Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, File indexPath, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.indexPath = indexPath;\n    this.minPrefixChars = minPrefixChars;\n    dir = getDirectory(indexPath);\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), SORT, IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4637747f71df783fc2014ef1f1e0418466e3bed6","date":1394196311,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,Directory,Analyzer,Analyzer,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,File,Analyzer,Analyzer,int).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists. Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, File indexPath, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.indexPath = indexPath;\n    this.minPrefixChars = minPrefixChars;\n    dir = getDirectory(indexPath);\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      initSorter();\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), sorter, IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,Directory,Analyzer,Analyzer,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,File,Analyzer,Analyzer,int).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists. Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, File indexPath, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.indexPath = indexPath;\n    this.minPrefixChars = minPrefixChars;\n    dir = getDirectory(indexPath);\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      initSorter();\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), sorter, IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cf15d89c400585df630cb62449fb4d6cb58434f","date":1397643074,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,Directory,Analyzer,Analyzer,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,Directory,Analyzer,Analyzer,int).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n   *  private to the infix suggester (i.e., not an external\n   *  Lucene index).  Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists. Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"158bf4b301557fdddcd1f665fa0700b7f19678d0","date":1397643258,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,Directory,Analyzer,Analyzer,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,Directory,Analyzer,Analyzer,int).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists. Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n   *  private to the infix suggester (i.e., not an external\n   *  Lucene index).  Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"948662c23cf2265775cabff4f768c1d5a06ecfea","date":1397643289,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,Directory,Analyzer,Analyzer,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,Directory,Analyzer,Analyzer,int).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n   *  private to the infix suggester (i.e., not an external\n   *  Lucene index).  Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  directory, if it exists. Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,Directory,Analyzer,Analyzer,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,Directory,Analyzer,Analyzer,int).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n   *  private to the infix suggester (i.e., not an external\n   *  Lucene index).  Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n   *  private to the infix suggester (i.e., not an external\n   *  Lucene index).  Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(matchVersion, getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6549d5ea6b7b25525309b981de3ec92b4dff99d1","date":1408666035,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,Directory,Analyzer,Analyzer,int,boolean).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#AnalyzingInfixSuggester(Version,Directory,Analyzer,Analyzer,int).mjava","sourceNew":"  /** Create a new instance, loading from a previously built\n   *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n   *  private to the infix suggester (i.e., not an external\n   *  Lucene index).  Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   *\n   *  @param commitOnBuild Call commit after the index has finished building. This would persist the\n   *                       suggester index to disk and future instances of this suggester can use this pre-built dictionary.\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars,\n                                 boolean commitOnBuild) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n    this.commitOnBuild = commitOnBuild;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","sourceOld":"  /** Create a new instance, loading from a previously built\n   *  AnalyzingInfixSuggester directory, if it exists.  This directory must be\n   *  private to the infix suggester (i.e., not an external\n   *  Lucene index).  Note that {@link #close}\n   *  will also close the provided directory.\n   *\n   *  @param minPrefixChars Minimum number of leading characters\n   *     before PrefixQuery is used (default 4).\n   *     Prefixes shorter than this are indexed as character\n   *     ngrams (increasing index size but making lookups\n   *     faster).\n   */\n  public AnalyzingInfixSuggester(Version matchVersion, Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, int minPrefixChars) throws IOException {\n\n    if (minPrefixChars < 0) {\n      throw new IllegalArgumentException(\"minPrefixChars must be >= 0; got: \" + minPrefixChars);\n    }\n\n    this.queryAnalyzer = queryAnalyzer;\n    this.indexAnalyzer = indexAnalyzer;\n    this.matchVersion = matchVersion;\n    this.dir = dir;\n    this.minPrefixChars = minPrefixChars;\n\n    if (DirectoryReader.indexExists(dir)) {\n      // Already built; open it:\n      writer = new IndexWriter(dir,\n                               getIndexWriterConfig(getGramAnalyzer(), IndexWriterConfig.OpenMode.APPEND));\n      searcherMgr = new SearcherManager(writer, true, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cf15d89c400585df630cb62449fb4d6cb58434f":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4637747f71df783fc2014ef1f1e0418466e3bed6"],"158bf4b301557fdddcd1f665fa0700b7f19678d0":["0cf15d89c400585df630cb62449fb4d6cb58434f"],"6549d5ea6b7b25525309b981de3ec92b4dff99d1":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["948662c23cf2265775cabff4f768c1d5a06ecfea"],"948662c23cf2265775cabff4f768c1d5a06ecfea":["158bf4b301557fdddcd1f665fa0700b7f19678d0"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f1e7da8a91a92330e8f04b171b83e655a4a25c31"],"f1e7da8a91a92330e8f04b171b83e655a4a25c31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6549d5ea6b7b25525309b981de3ec92b4dff99d1"]},"commit2Childs":{"0cf15d89c400585df630cb62449fb4d6cb58434f":["158bf4b301557fdddcd1f665fa0700b7f19678d0"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"158bf4b301557fdddcd1f665fa0700b7f19678d0":["948662c23cf2265775cabff4f768c1d5a06ecfea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96ea64d994d340044e0d57aeb6a5871539d10ca5","4637747f71df783fc2014ef1f1e0418466e3bed6","f1e7da8a91a92330e8f04b171b83e655a4a25c31"],"6549d5ea6b7b25525309b981de3ec92b4dff99d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["6549d5ea6b7b25525309b981de3ec92b4dff99d1"],"948662c23cf2265775cabff4f768c1d5a06ecfea":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["0cf15d89c400585df630cb62449fb4d6cb58434f","96ea64d994d340044e0d57aeb6a5871539d10ca5"],"f1e7da8a91a92330e8f04b171b83e655a4a25c31":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}