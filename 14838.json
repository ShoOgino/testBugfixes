{"path":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#addByPoolOffset(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#addByPoolOffset(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#addByPoolOffset(int).mjava","sourceNew":"  public int addByPoolOffset(int offset) {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    // final position\n    int code = offset;\n    int hashPos = offset & hashMask;\n    int e = ords[hashPos];\n    if (e != -1 && bytesStart[e] != offset) {\n      // Conflict: keep searching different locations in\n      // the hash table.\n      final int inc = ((code >> 8) + code) | 1;\n      do {\n        code += inc;\n        hashPos = code & hashMask;\n        e = ords[hashPos];\n      } while (e != -1 && bytesStart[e] != offset);\n    }\n    if (e == -1) {\n      // new entry\n      if (count >= bytesStart.length) {\n        bytesStart = bytesStartArray.grow();\n        assert count < bytesStart.length + 1 : \"count: \" + count + \" len: \"\n            + bytesStart.length;\n      }\n      e = count++;\n      bytesStart[e] = offset;\n      assert ords[hashPos] == -1;\n      ords[hashPos] = e;\n\n      if (count == hashHalfSize) {\n        rehash(2 * hashSize, false);\n      }\n      return e;\n    }\n    return -(e + 1);\n  }\n\n","sourceOld":"  public int addByPoolOffset(int offset) {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    // final position\n    int code = offset;\n    int hashPos = offset & hashMask;\n    int e = ords[hashPos];\n    if (e != -1 && bytesStart[e] != offset) {\n      // Conflict: keep searching different locations in\n      // the hash table.\n      final int inc = ((code >> 8) + code) | 1;\n      do {\n        code += inc;\n        hashPos = code & hashMask;\n        e = ords[hashPos];\n      } while (e != -1 && bytesStart[e] != offset);\n    }\n    if (e == -1) {\n      // new entry\n      if (count >= bytesStart.length) {\n        bytesStart = bytesStartArray.grow();\n        assert count < bytesStart.length + 1 : \"count: \" + count + \" len: \"\n            + bytesStart.length;\n      }\n      e = count++;\n      bytesStart[e] = offset;\n      assert ords[hashPos] == -1;\n      ords[hashPos] = e;\n\n      if (count == hashHalfSize) {\n        rehash(2 * hashSize, false);\n      }\n      return e;\n    }\n    return -(e + 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbccaf0f052c2a25526a56531803c5ebac7c8f41","date":1363510731,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#addByPoolOffset(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#addByPoolOffset(int).mjava","sourceNew":"  public int addByPoolOffset(int offset) {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    // final position\n    int code = offset;\n    int hashPos = offset & hashMask;\n    int e = ids[hashPos];\n    if (e != -1 && bytesStart[e] != offset) {\n      // Conflict: keep searching different locations in\n      // the hash table.\n      final int inc = ((code >> 8) + code) | 1;\n      do {\n        code += inc;\n        hashPos = code & hashMask;\n        e = ids[hashPos];\n      } while (e != -1 && bytesStart[e] != offset);\n    }\n    if (e == -1) {\n      // new entry\n      if (count >= bytesStart.length) {\n        bytesStart = bytesStartArray.grow();\n        assert count < bytesStart.length + 1 : \"count: \" + count + \" len: \"\n            + bytesStart.length;\n      }\n      e = count++;\n      bytesStart[e] = offset;\n      assert ids[hashPos] == -1;\n      ids[hashPos] = e;\n\n      if (count == hashHalfSize) {\n        rehash(2 * hashSize, false);\n      }\n      return e;\n    }\n    return -(e + 1);\n  }\n\n","sourceOld":"  public int addByPoolOffset(int offset) {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    // final position\n    int code = offset;\n    int hashPos = offset & hashMask;\n    int e = ords[hashPos];\n    if (e != -1 && bytesStart[e] != offset) {\n      // Conflict: keep searching different locations in\n      // the hash table.\n      final int inc = ((code >> 8) + code) | 1;\n      do {\n        code += inc;\n        hashPos = code & hashMask;\n        e = ords[hashPos];\n      } while (e != -1 && bytesStart[e] != offset);\n    }\n    if (e == -1) {\n      // new entry\n      if (count >= bytesStart.length) {\n        bytesStart = bytesStartArray.grow();\n        assert count < bytesStart.length + 1 : \"count: \" + count + \" len: \"\n            + bytesStart.length;\n      }\n      e = count++;\n      bytesStart[e] = offset;\n      assert ords[hashPos] == -1;\n      ords[hashPos] = e;\n\n      if (count == hashHalfSize) {\n        rehash(2 * hashSize, false);\n      }\n      return e;\n    }\n    return -(e + 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98dd700266e1ec003362ed559b2b7c24377760cf","date":1365547426,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#addByPoolOffset(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#addByPoolOffset(int).mjava","sourceNew":"  /** Adds a \"arbitrary\" int offset instead of a BytesRef\n   *  term.  This is used in the indexer to hold the hash for term\n   *  vectors, because they do not redundantly store the byte[] term\n   *  directly and instead reference the byte[] term\n   *  already stored by the postings BytesRefHash.  See\n   *  add(int textStart) in TermsHashPerField. */\n  public int addByPoolOffset(int offset) {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    // final position\n    int code = offset;\n    int hashPos = offset & hashMask;\n    int e = ids[hashPos];\n    if (e != -1 && bytesStart[e] != offset) {\n      // Conflict: keep searching different locations in\n      // the hash table.\n      final int inc = ((code >> 8) + code) | 1;\n      do {\n        code += inc;\n        hashPos = code & hashMask;\n        e = ids[hashPos];\n      } while (e != -1 && bytesStart[e] != offset);\n    }\n    if (e == -1) {\n      // new entry\n      if (count >= bytesStart.length) {\n        bytesStart = bytesStartArray.grow();\n        assert count < bytesStart.length + 1 : \"count: \" + count + \" len: \"\n            + bytesStart.length;\n      }\n      e = count++;\n      bytesStart[e] = offset;\n      assert ids[hashPos] == -1;\n      ids[hashPos] = e;\n\n      if (count == hashHalfSize) {\n        rehash(2 * hashSize, false);\n      }\n      return e;\n    }\n    return -(e + 1);\n  }\n\n","sourceOld":"  public int addByPoolOffset(int offset) {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    // final position\n    int code = offset;\n    int hashPos = offset & hashMask;\n    int e = ids[hashPos];\n    if (e != -1 && bytesStart[e] != offset) {\n      // Conflict: keep searching different locations in\n      // the hash table.\n      final int inc = ((code >> 8) + code) | 1;\n      do {\n        code += inc;\n        hashPos = code & hashMask;\n        e = ids[hashPos];\n      } while (e != -1 && bytesStart[e] != offset);\n    }\n    if (e == -1) {\n      // new entry\n      if (count >= bytesStart.length) {\n        bytesStart = bytesStartArray.grow();\n        assert count < bytesStart.length + 1 : \"count: \" + count + \" len: \"\n            + bytesStart.length;\n      }\n      e = count++;\n      bytesStart[e] = offset;\n      assert ids[hashPos] == -1;\n      ids[hashPos] = e;\n\n      if (count == hashHalfSize) {\n        rehash(2 * hashSize, false);\n      }\n      return e;\n    }\n    return -(e + 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fe9fa09df804ce770f1b667401a7a7647301ed","date":1397554534,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#addByPoolOffset(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#addByPoolOffset(int).mjava","sourceNew":"  /** Adds a \"arbitrary\" int offset instead of a BytesRef\n   *  term.  This is used in the indexer to hold the hash for term\n   *  vectors, because they do not redundantly store the byte[] term\n   *  directly and instead reference the byte[] term\n   *  already stored by the postings BytesRefHash.  See\n   *  add(int textStart) in TermsHashPerField. */\n  public int addByPoolOffset(int offset) {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    // final position\n    int code = offset;\n    int hashPos = offset & hashMask;\n    int e = ids[hashPos];\n    if (e != -1 && bytesStart[e] != offset) {\n      // Conflict; use linear probe to find an open slot\n      // (see LUCENE-5604):\n      do {\n        code++;\n        hashPos = code & hashMask;\n        e = ids[hashPos];\n      } while (e != -1 && bytesStart[e] != offset);\n    }\n    if (e == -1) {\n      // new entry\n      if (count >= bytesStart.length) {\n        bytesStart = bytesStartArray.grow();\n        assert count < bytesStart.length + 1 : \"count: \" + count + \" len: \"\n            + bytesStart.length;\n      }\n      e = count++;\n      bytesStart[e] = offset;\n      assert ids[hashPos] == -1;\n      ids[hashPos] = e;\n\n      if (count == hashHalfSize) {\n        rehash(2 * hashSize, false);\n      }\n      return e;\n    }\n    return -(e + 1);\n  }\n\n","sourceOld":"  /** Adds a \"arbitrary\" int offset instead of a BytesRef\n   *  term.  This is used in the indexer to hold the hash for term\n   *  vectors, because they do not redundantly store the byte[] term\n   *  directly and instead reference the byte[] term\n   *  already stored by the postings BytesRefHash.  See\n   *  add(int textStart) in TermsHashPerField. */\n  public int addByPoolOffset(int offset) {\n    assert bytesStart != null : \"Bytesstart is null - not initialized\";\n    // final position\n    int code = offset;\n    int hashPos = offset & hashMask;\n    int e = ids[hashPos];\n    if (e != -1 && bytesStart[e] != offset) {\n      // Conflict: keep searching different locations in\n      // the hash table.\n      final int inc = ((code >> 8) + code) | 1;\n      do {\n        code += inc;\n        hashPos = code & hashMask;\n        e = ids[hashPos];\n      } while (e != -1 && bytesStart[e] != offset);\n    }\n    if (e == -1) {\n      // new entry\n      if (count >= bytesStart.length) {\n        bytesStart = bytesStartArray.grow();\n        assert count < bytesStart.length + 1 : \"count: \" + count + \" len: \"\n            + bytesStart.length;\n      }\n      e = count++;\n      bytesStart[e] = offset;\n      assert ids[hashPos] == -1;\n      ids[hashPos] = e;\n\n      if (count == hashHalfSize) {\n        rehash(2 * hashSize, false);\n      }\n      return e;\n    }\n    return -(e + 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30fe9fa09df804ce770f1b667401a7a7647301ed":["98dd700266e1ec003362ed559b2b7c24377760cf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98dd700266e1ec003362ed559b2b7c24377760cf":["bbccaf0f052c2a25526a56531803c5ebac7c8f41"],"bbccaf0f052c2a25526a56531803c5ebac7c8f41":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30fe9fa09df804ce770f1b667401a7a7647301ed"]},"commit2Childs":{"30fe9fa09df804ce770f1b667401a7a7647301ed":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["bbccaf0f052c2a25526a56531803c5ebac7c8f41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"98dd700266e1ec003362ed559b2b7c24377760cf":["30fe9fa09df804ce770f1b667401a7a7647301ed"],"bbccaf0f052c2a25526a56531803c5ebac7c8f41":["98dd700266e1ec003362ed559b2b7c24377760cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}