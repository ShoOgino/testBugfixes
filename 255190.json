{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testBKDUtilSubtract().mjava","commits":[{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testBKDUtilSubtract().mjava","pathOld":"/dev/null","sourceNew":"  public void testBKDUtilSubtract() throws Exception {\n    int iters = atLeast(10000);\n    int numBytes = TestUtil.nextInt(random(), 1, 100);\n    for(int iter=0;iter<iters;iter++) {\n      BigInteger v1 = new BigInteger(8*numBytes-1, random());\n      BigInteger v2 = new BigInteger(8*numBytes-1, random());\n      if (v1.compareTo(v2) < 0) {\n        BigInteger tmp = v1;\n        v1 = v2;\n        v2 = tmp;\n      }\n\n      byte[] v1Bytes = new byte[numBytes];\n      byte[] v1RawBytes = v1.toByteArray();\n      assert v1RawBytes.length <= numBytes: \"length=\" + v1RawBytes.length + \" vs numBytes=\" + numBytes;\n      System.arraycopy(v1RawBytes, 0, v1Bytes, v1Bytes.length-v1RawBytes.length, v1RawBytes.length);\n\n      byte[] v2Bytes = new byte[numBytes];\n      byte[] v2RawBytes = v2.toByteArray();\n      assert v2RawBytes.length <= numBytes;\n      assert v2RawBytes.length <= numBytes: \"length=\" + v2RawBytes.length + \" vs numBytes=\" + numBytes;\n      System.arraycopy(v2RawBytes, 0, v2Bytes, v2Bytes.length-v2RawBytes.length, v2RawBytes.length);\n\n      byte[] result = new byte[numBytes];\n      BKDUtil.subtract(numBytes, 0, v1Bytes, v2Bytes, result);\n\n      BigInteger diff = v1.subtract(v2);\n\n      assertTrue(\"diff=\" + diff + \" vs result=\" + new BigInteger(result) + \" v1=\" + v1 + \" v2=\" + v2, diff.equals(new BigInteger(result)));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testNumericUtilsSubtract().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testBKDUtilSubtract().mjava","sourceNew":"  public void testNumericUtilsSubtract() throws Exception {\n    int iters = atLeast(10000);\n    int numBytes = TestUtil.nextInt(random(), 1, 100);\n    for(int iter=0;iter<iters;iter++) {\n      BigInteger v1 = new BigInteger(8*numBytes-1, random());\n      BigInteger v2 = new BigInteger(8*numBytes-1, random());\n      if (v1.compareTo(v2) < 0) {\n        BigInteger tmp = v1;\n        v1 = v2;\n        v2 = tmp;\n      }\n\n      byte[] v1Bytes = new byte[numBytes];\n      byte[] v1RawBytes = v1.toByteArray();\n      assert v1RawBytes.length <= numBytes: \"length=\" + v1RawBytes.length + \" vs numBytes=\" + numBytes;\n      System.arraycopy(v1RawBytes, 0, v1Bytes, v1Bytes.length-v1RawBytes.length, v1RawBytes.length);\n\n      byte[] v2Bytes = new byte[numBytes];\n      byte[] v2RawBytes = v2.toByteArray();\n      assert v2RawBytes.length <= numBytes;\n      assert v2RawBytes.length <= numBytes: \"length=\" + v2RawBytes.length + \" vs numBytes=\" + numBytes;\n      System.arraycopy(v2RawBytes, 0, v2Bytes, v2Bytes.length-v2RawBytes.length, v2RawBytes.length);\n\n      byte[] result = new byte[numBytes];\n      NumericUtils.subtract(numBytes, 0, v1Bytes, v2Bytes, result);\n\n      BigInteger diff = v1.subtract(v2);\n\n      assertTrue(\"diff=\" + diff + \" vs result=\" + new BigInteger(result) + \" v1=\" + v1 + \" v2=\" + v2, diff.equals(new BigInteger(result)));\n    }\n  }\n\n","sourceOld":"  public void testBKDUtilSubtract() throws Exception {\n    int iters = atLeast(10000);\n    int numBytes = TestUtil.nextInt(random(), 1, 100);\n    for(int iter=0;iter<iters;iter++) {\n      BigInteger v1 = new BigInteger(8*numBytes-1, random());\n      BigInteger v2 = new BigInteger(8*numBytes-1, random());\n      if (v1.compareTo(v2) < 0) {\n        BigInteger tmp = v1;\n        v1 = v2;\n        v2 = tmp;\n      }\n\n      byte[] v1Bytes = new byte[numBytes];\n      byte[] v1RawBytes = v1.toByteArray();\n      assert v1RawBytes.length <= numBytes: \"length=\" + v1RawBytes.length + \" vs numBytes=\" + numBytes;\n      System.arraycopy(v1RawBytes, 0, v1Bytes, v1Bytes.length-v1RawBytes.length, v1RawBytes.length);\n\n      byte[] v2Bytes = new byte[numBytes];\n      byte[] v2RawBytes = v2.toByteArray();\n      assert v2RawBytes.length <= numBytes;\n      assert v2RawBytes.length <= numBytes: \"length=\" + v2RawBytes.length + \" vs numBytes=\" + numBytes;\n      System.arraycopy(v2RawBytes, 0, v2Bytes, v2Bytes.length-v2RawBytes.length, v2RawBytes.length);\n\n      byte[] result = new byte[numBytes];\n      BKDUtil.subtract(numBytes, 0, v1Bytes, v2Bytes, result);\n\n      BigInteger diff = v1.subtract(v2);\n\n      assertTrue(\"diff=\" + diff + \" vs result=\" + new BigInteger(result) + \" v1=\" + v1 + \" v2=\" + v2, diff.equals(new BigInteger(result)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"770342641f7b505eaa8dccdc666158bff2419109":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}