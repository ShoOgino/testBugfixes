{"path":"lucene/core/src/java/org/apache/lucene/store/RateLimitedIndexOutput#flushBuffer(byte[],int,int).mjava","commits":[{"id":"e4583d4aac44f313f9af74ab6d81baab3f976232","date":1352409883,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RateLimitedIndexOutput#flushBuffer(byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void flushBuffer(byte[] b, int offset, int len) throws IOException {\n    rateLimiter.pause(len);\n    if (bufferedDelegate != null) {\n      bufferedDelegate.flushBuffer(b, offset, len);\n    } else {\n      delegate.writeBytes(b, offset, len);\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d2b26522f870cd9ff2faccbc2a5e1f9019366c98"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RateLimitedIndexOutput#flushBuffer(byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void flushBuffer(byte[] b, int offset, int len) throws IOException {\n    rateLimiter.pause(len);\n    if (bufferedDelegate != null) {\n      bufferedDelegate.flushBuffer(b, offset, len);\n    } else {\n      delegate.writeBytes(b, offset, len);\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2b26522f870cd9ff2faccbc2a5e1f9019366c98","date":1399316087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RateLimitedIndexOutput#flushBuffer(byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RateLimitedIndexOutput#flushBuffer(byte[],int,int).mjava","sourceNew":"  @Override\n  protected void flushBuffer(byte[] b, int offset, int len) throws IOException {\n    bytesSinceLastPause += len;\n    if (bytesSinceLastPause > rateLimiter.getMinPauseCheckBytes()) {\n      rateLimiter.pause(bytesSinceLastPause);\n      bytesSinceLastPause = 0;\n    }\n    if (bufferedDelegate != null) {\n      bufferedDelegate.flushBuffer(b, offset, len);\n    } else {\n      delegate.writeBytes(b, offset, len);\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  protected void flushBuffer(byte[] b, int offset, int len) throws IOException {\n    rateLimiter.pause(len);\n    if (bufferedDelegate != null) {\n      bufferedDelegate.flushBuffer(b, offset, len);\n    } else {\n      delegate.writeBytes(b, offset, len);\n    }\n    \n  }\n\n","bugFix":["e4583d4aac44f313f9af74ab6d81baab3f976232"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bce1e2aee8b16573bc0d091471e4660d140b5823","date":1400533696,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/RateLimitedIndexOutput#flushBuffer(byte[],int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void flushBuffer(byte[] b, int offset, int len) throws IOException {\n    bytesSinceLastPause += len;\n    if (bytesSinceLastPause > rateLimiter.getMinPauseCheckBytes()) {\n      rateLimiter.pause(bytesSinceLastPause);\n      bytesSinceLastPause = 0;\n    }\n    if (bufferedDelegate != null) {\n      bufferedDelegate.flushBuffer(b, offset, len);\n    } else {\n      delegate.writeBytes(b, offset, len);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/RateLimitedIndexOutput#flushBuffer(byte[],int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void flushBuffer(byte[] b, int offset, int len) throws IOException {\n    bytesSinceLastPause += len;\n    if (bytesSinceLastPause > rateLimiter.getMinPauseCheckBytes()) {\n      rateLimiter.pause(bytesSinceLastPause);\n      bytesSinceLastPause = 0;\n    }\n    if (bufferedDelegate != null) {\n      bufferedDelegate.flushBuffer(b, offset, len);\n    } else {\n      delegate.writeBytes(b, offset, len);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bce1e2aee8b16573bc0d091471e4660d140b5823":["d2b26522f870cd9ff2faccbc2a5e1f9019366c98"],"d2b26522f870cd9ff2faccbc2a5e1f9019366c98":["e4583d4aac44f313f9af74ab6d81baab3f976232"],"e4583d4aac44f313f9af74ab6d81baab3f976232":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4583d4aac44f313f9af74ab6d81baab3f976232"],"b7605579001505896d48b07160075a5c8b8e128e":["d2b26522f870cd9ff2faccbc2a5e1f9019366c98","bce1e2aee8b16573bc0d091471e4660d140b5823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bce1e2aee8b16573bc0d091471e4660d140b5823"]},"commit2Childs":{"bce1e2aee8b16573bc0d091471e4660d140b5823":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2b26522f870cd9ff2faccbc2a5e1f9019366c98":["bce1e2aee8b16573bc0d091471e4660d140b5823","b7605579001505896d48b07160075a5c8b8e128e"],"e4583d4aac44f313f9af74ab6d81baab3f976232":["d2b26522f870cd9ff2faccbc2a5e1f9019366c98","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4583d4aac44f313f9af74ab6d81baab3f976232","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"b7605579001505896d48b07160075a5c8b8e128e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}