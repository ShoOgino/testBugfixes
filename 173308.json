{"path":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testCurrencyFieldType().mjava","commits":[{"id":"4ce5a0276b8637186ae6adfa516e332132d197ad","date":1362165863,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testCurrencyFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testCurrencyFieldType().mjava","sourceNew":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(field());\n    assertNotNull(amount);\n    assertTrue(field() + \" is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    List<StorableField> fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.size(), 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).readerValue() != null\n              || fields.get(i).numericValue() != null\n              || fields.get(i).stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields.get(2)), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assertEquals(5, availableCurrencies.size());\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","sourceOld":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(\"amount\");\n    assertNotNull(amount);\n    assertTrue(\"amount is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    List<StorableField> fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.size(), 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).readerValue() != null\n              || fields.get(i).numericValue() != null\n              || fields.get(i).stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields.get(2)), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assert(availableCurrencies.size() == 4);\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testCurrencyFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testCurrencyFieldType().mjava","sourceNew":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField amount = schema.getField(field());\n    assertNotNull(amount);\n    assertTrue(field() + \" is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    List<StorableField> fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.size(), 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).readerValue() != null\n              || fields.get(i).numericValue() != null\n              || fields.get(i).stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields.get(2)), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assertEquals(5, availableCurrencies.size());\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","sourceOld":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SchemaField amount = schema.getField(field());\n    assertNotNull(amount);\n    assertTrue(field() + \" is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    List<StorableField> fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.size(), 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).readerValue() != null\n              || fields.get(i).numericValue() != null\n              || fields.get(i).stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields.get(2)), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assertEquals(5, availableCurrencies.size());\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testCurrencyFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testCurrencyFieldType().mjava","sourceNew":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField amount = schema.getField(field());\n    assertNotNull(amount);\n    assertTrue(field() + \" is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    List<IndexableField> fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.size(), 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).readerValue() != null\n              || fields.get(i).numericValue() != null\n              || fields.get(i).stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields.get(2)), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assertEquals(5, availableCurrencies.size());\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","sourceOld":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField amount = schema.getField(field());\n    assertNotNull(amount);\n    assertTrue(field() + \" is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    List<StorableField> fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.size(), 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).readerValue() != null\n              || fields.get(i).numericValue() != null\n              || fields.get(i).stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields.get(2)), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assertEquals(5, availableCurrencies.size());\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testCurrencyFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testCurrencyFieldType().mjava","sourceNew":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField amount = schema.getField(field());\n    assertNotNull(amount);\n    assertTrue(field() + \" is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    List<IndexableField> fields = amount.createFields(currencyValue);\n    assertEquals(fields.size(), 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).readerValue() != null\n              || fields.get(i).numericValue() != null\n              || fields.get(i).stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields.get(2)), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assertEquals(5, availableCurrencies.size());\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","sourceOld":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField amount = schema.getField(field());\n    assertNotNull(amount);\n    assertTrue(field() + \" is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    List<IndexableField> fields = amount.createFields(currencyValue, 2);\n    assertEquals(fields.size(), 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).readerValue() != null\n              || fields.get(i).numericValue() != null\n              || fields.get(i).stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields.get(2)), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assertEquals(5, availableCurrencies.size());\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTypeTest#testCurrencyFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testCurrencyFieldType().mjava","sourceNew":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    assumeTrue(\"This test is only applicable to the XML file based exchange rate provider\",\n        expectedProviderClass.equals(FileExchangeRateProvider.class));\n\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField amount = schema.getField(fieldName);\n    assertNotNull(amount);\n    assertTrue(fieldName + \" is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(fieldName + \" is not an instance of CurrencyFieldType\", tmp instanceof CurrencyFieldType);\n    String currencyValue = \"1.50,EUR\";\n    List<IndexableField> fields = amount.createFields(currencyValue);\n    assertEquals(fields.size(), 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).readerValue() != null\n              || fields.get(i).numericValue() != null\n              || fields.get(i).stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields.get(2)), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyFieldType)tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assertEquals(5, availableCurrencies.size());\n    assertTrue(p.reload());\n    assertEquals(2.5, p.getExchangeRate(\"USD\", \"EUR\"), 0.00000000001);\n  }\n\n","sourceOld":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField amount = schema.getField(field());\n    assertNotNull(amount);\n    assertTrue(field() + \" is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    List<IndexableField> fields = amount.createFields(currencyValue);\n    assertEquals(fields.size(), 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).readerValue() != null\n              || fields.get(i).numericValue() != null\n              || fields.get(i).stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields.get(2)), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assertEquals(5, availableCurrencies.size());\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTypeTest#testCurrencyFieldType().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testCurrencyFieldType().mjava","sourceNew":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    assumeTrue(\"This test is only applicable to the XML file based exchange rate provider\",\n        expectedProviderClass.equals(FileExchangeRateProvider.class));\n\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField amount = schema.getField(fieldName);\n    assertNotNull(amount);\n    assertTrue(fieldName + \" is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(fieldName + \" is not an instance of CurrencyFieldType\", tmp instanceof CurrencyFieldType);\n    String currencyValue = \"1.50,EUR\";\n    List<IndexableField> fields = amount.createFields(currencyValue);\n    assertEquals(fields.size(), 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).readerValue() != null\n              || fields.get(i).numericValue() != null\n              || fields.get(i).stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields.get(2)), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyFieldType)tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assertEquals(5, availableCurrencies.size());\n    assertTrue(p.reload());\n    assertEquals(2.5, p.getExchangeRate(\"USD\", \"EUR\"), 0.00000000001);\n  }\n\n","sourceOld":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField amount = schema.getField(field());\n    assertNotNull(amount);\n    assertTrue(field() + \" is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    List<IndexableField> fields = amount.createFields(currencyValue);\n    assertEquals(fields.size(), 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).readerValue() != null\n              || fields.get(i).numericValue() != null\n              || fields.get(i).stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields.get(2)), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assertEquals(5, availableCurrencies.size());\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testCurrencyFieldType().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCurrencyFieldType() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getLatestSchema();\n    SchemaField amount = schema.getField(field());\n    assertNotNull(amount);\n    assertTrue(field() + \" is not a poly field\", amount.isPolyField());\n    FieldType tmp = amount.getType();\n    assertTrue(tmp instanceof CurrencyField);\n    String currencyValue = \"1.50,EUR\";\n    List<IndexableField> fields = amount.createFields(currencyValue);\n    assertEquals(fields.size(), 3);\n\n    // First field is currency code, second is value, third is stored.\n    for (int i = 0; i < 3; i++) {\n      boolean hasValue = fields.get(i).readerValue() != null\n              || fields.get(i).numericValue() != null\n              || fields.get(i).stringValue() != null;\n      assertTrue(\"Doesn't have a value: \" + fields.get(i), hasValue);\n    }\n\n    assertEquals(schema.getFieldTypeByName(\"string\").toExternal(fields.get(2)), \"1.50,EUR\");\n    \n    // A few tests on the provider directly\n    ExchangeRateProvider p = ((CurrencyField) tmp).getProvider();\n    Set<String> availableCurrencies = p.listAvailableCurrencies();\n    assertEquals(5, availableCurrencies.size());\n    assert(p.reload() == true);\n    assert(p.getExchangeRate(\"USD\", \"EUR\") == 2.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ce5a0276b8637186ae6adfa516e332132d197ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["acd9883560fd89e6448b2b447302fe543040cd4f","f107636c2cc82350a2607d774c092da5b73152e5"],"28288370235ed02234a64753cdbf0c6ec096304a":["acd9883560fd89e6448b2b447302fe543040cd4f","f107636c2cc82350a2607d774c092da5b73152e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["4ce5a0276b8637186ae6adfa516e332132d197ad"],"f107636c2cc82350a2607d774c092da5b73152e5":["acd9883560fd89e6448b2b447302fe543040cd4f"]},"commit2Childs":{"4ce5a0276b8637186ae6adfa516e332132d197ad":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ce5a0276b8637186ae6adfa516e332132d197ad"],"acd9883560fd89e6448b2b447302fe543040cd4f":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","f107636c2cc82350a2607d774c092da5b73152e5"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["acd9883560fd89e6448b2b447302fe543040cd4f"],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"08970e5b8411182a29412c177eff67ec1110095b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}