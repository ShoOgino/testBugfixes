{"path":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#startDoc(int,int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#startDoc(int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    assert docID >= 0: \"got docID=\" + docID;\n        \n    if (!pulsed && pendingDocCount == pendingDocs.length) {\n      \n      // OK we just crossed the threshold, this term should\n      // now be written with our wrapped codec:\n      wrappedPostingsWriter.startTerm();\n      \n      // Flush all buffered docs\n      for(int i=0;i<pendingDocCount;i++) {\n        final Document doc = pendingDocs[i];\n\n        wrappedPostingsWriter.startDoc(doc.docID, doc.termDocFreq);\n\n        if (!omitTF) {\n          assert doc.termDocFreq == doc.numPositions;\n          for(int j=0;j<doc.termDocFreq;j++) {\n            final Position pos = doc.positions[j];\n            if (pos.payload != null && pos.payload.length > 0) {\n              assert storePayloads;\n              wrappedPostingsWriter.addPosition(pos.pos, pos.payload);\n            } else {\n              wrappedPostingsWriter.addPosition(pos.pos, null);\n            }\n          }\n          wrappedPostingsWriter.finishDoc();\n        }\n      }\n\n      pendingDocCount = 0;\n\n      pulsed = true;\n    }\n\n    if (pulsed) {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    } else {\n      currentDoc = pendingDocs[pendingDocCount++];\n      currentDoc.docID = docID;\n      // TODO: -- need not store in doc?  only used for alloc & assert\n      currentDoc.termDocFreq = termDocFreq;\n      if (termDocFreq > currentDoc.positions.length) {\n        currentDoc.reallocPositions(termDocFreq);\n      }\n      currentDoc.numPositions = 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d53c3f769ca0f9e7434937b792877770271aecf","date":1294785129,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n    //System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (omitTF) {\n        pendingCount++;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    assert docID >= 0: \"got docID=\" + docID;\n        \n    if (!pulsed && pendingDocCount == pendingDocs.length) {\n      \n      // OK we just crossed the threshold, this term should\n      // now be written with our wrapped codec:\n      wrappedPostingsWriter.startTerm();\n      \n      // Flush all buffered docs\n      for(int i=0;i<pendingDocCount;i++) {\n        final Document doc = pendingDocs[i];\n\n        wrappedPostingsWriter.startDoc(doc.docID, doc.termDocFreq);\n\n        if (!omitTF) {\n          assert doc.termDocFreq == doc.numPositions;\n          for(int j=0;j<doc.termDocFreq;j++) {\n            final Position pos = doc.positions[j];\n            if (pos.payload != null && pos.payload.length > 0) {\n              assert storePayloads;\n              wrappedPostingsWriter.addPosition(pos.pos, pos.payload);\n            } else {\n              wrappedPostingsWriter.addPosition(pos.pos, null);\n            }\n          }\n          wrappedPostingsWriter.finishDoc();\n        }\n      }\n\n      pendingDocCount = 0;\n\n      pulsed = true;\n    }\n\n    if (pulsed) {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    } else {\n      currentDoc = pendingDocs[pendingDocCount++];\n      currentDoc.docID = docID;\n      // TODO: -- need not store in doc?  only used for alloc & assert\n      currentDoc.termDocFreq = termDocFreq;\n      if (termDocFreq > currentDoc.positions.length) {\n        currentDoc.reallocPositions(termDocFreq);\n      }\n      currentDoc.numPositions = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bf28bc020449d67c52e06f23f52829af4934fd","date":1294868209,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n    //System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      //System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (omitTF) {\n        pendingCount++;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n    //System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (omitTF) {\n        pendingCount++;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n    //System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      //System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (omitTF) {\n        pendingCount++;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    assert docID >= 0: \"got docID=\" + docID;\n        \n    if (!pulsed && pendingDocCount == pendingDocs.length) {\n      \n      // OK we just crossed the threshold, this term should\n      // now be written with our wrapped codec:\n      wrappedPostingsWriter.startTerm();\n      \n      // Flush all buffered docs\n      for(int i=0;i<pendingDocCount;i++) {\n        final Document doc = pendingDocs[i];\n\n        wrappedPostingsWriter.startDoc(doc.docID, doc.termDocFreq);\n\n        if (!omitTF) {\n          assert doc.termDocFreq == doc.numPositions;\n          for(int j=0;j<doc.termDocFreq;j++) {\n            final Position pos = doc.positions[j];\n            if (pos.payload != null && pos.payload.length > 0) {\n              assert storePayloads;\n              wrappedPostingsWriter.addPosition(pos.pos, pos.payload);\n            } else {\n              wrappedPostingsWriter.addPosition(pos.pos, null);\n            }\n          }\n          wrappedPostingsWriter.finishDoc();\n        }\n      }\n\n      pendingDocCount = 0;\n\n      pulsed = true;\n    }\n\n    if (pulsed) {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    } else {\n      currentDoc = pendingDocs[pendingDocCount++];\n      currentDoc.docID = docID;\n      // TODO: -- need not store in doc?  only used for alloc & assert\n      currentDoc.termDocFreq = termDocFreq;\n      if (termDocFreq > currentDoc.positions.length) {\n        currentDoc.reallocPositions(termDocFreq);\n      }\n      currentDoc.numPositions = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n    //System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      //System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (omitTF) {\n        pendingCount++;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    assert docID >= 0: \"got docID=\" + docID;\n        \n    if (!pulsed && pendingDocCount == pendingDocs.length) {\n      \n      // OK we just crossed the threshold, this term should\n      // now be written with our wrapped codec:\n      wrappedPostingsWriter.startTerm();\n      \n      // Flush all buffered docs\n      for(int i=0;i<pendingDocCount;i++) {\n        final Document doc = pendingDocs[i];\n\n        wrappedPostingsWriter.startDoc(doc.docID, doc.termDocFreq);\n\n        if (!omitTF) {\n          assert doc.termDocFreq == doc.numPositions;\n          for(int j=0;j<doc.termDocFreq;j++) {\n            final Position pos = doc.positions[j];\n            if (pos.payload != null && pos.payload.length > 0) {\n              assert storePayloads;\n              wrappedPostingsWriter.addPosition(pos.pos, pos.payload);\n            } else {\n              wrappedPostingsWriter.addPosition(pos.pos, null);\n            }\n          }\n          wrappedPostingsWriter.finishDoc();\n        }\n      }\n\n      pendingDocCount = 0;\n\n      pulsed = true;\n    }\n\n    if (pulsed) {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    } else {\n      currentDoc = pendingDocs[pendingDocCount++];\n      currentDoc.docID = docID;\n      // TODO: -- need not store in doc?  only used for alloc & assert\n      currentDoc.termDocFreq = termDocFreq;\n      if (termDocFreq > currentDoc.positions.length) {\n        currentDoc.reallocPositions(termDocFreq);\n      }\n      currentDoc.numPositions = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n    //System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      //System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (indexOptions == IndexOptions.DOCS_ONLY) {\n        pendingCount++;\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) { \n        pendingCount++;\n        currentDoc.termFreq = termDocFreq;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n    //System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      //System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (omitTF) {\n        pendingCount++;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriterImpl#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n\n    /*\n    if (termID != -1) {\n      if (docID == 0) {\n        baseDocID = termID;\n      } else if (baseDocID + docID != termID) {\n        throw new RuntimeException(\"WRITE: baseDocID=\" + baseDocID + \" docID=\" + docID + \" termID=\" + termID);\n      }\n    }\n    */\n\n    if (DEBUG) System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      if (DEBUG) System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (indexOptions == IndexOptions.DOCS_ONLY) {\n        pendingCount++;\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) { \n        pendingCount++;\n        currentDoc.termFreq = termDocFreq;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    assert docID >= 0: \"got docID=\" + docID;\n    //System.out.println(\"PW     doc=\" + docID);\n\n    if (pendingCount == pending.length) {\n      push();\n      //System.out.println(\"PW: wrapped.finishDoc\");\n      wrappedPostingsWriter.finishDoc();\n    }\n\n    if (pendingCount != -1) {\n      assert pendingCount < pending.length;\n      currentDoc = pending[pendingCount];\n      currentDoc.docID = docID;\n      if (indexOptions == IndexOptions.DOCS_ONLY) {\n        pendingCount++;\n      } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) { \n        pendingCount++;\n        currentDoc.termFreq = termDocFreq;\n      } else {\n        currentDoc.termFreq = termDocFreq;\n      }\n    } else {\n      // We've already seen too many docs for this term --\n      // just forward to our fallback writer\n      wrappedPostingsWriter.startDoc(docID, termDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["e7bf28bc020449d67c52e06f23f52829af4934fd"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","e7bf28bc020449d67c52e06f23f52829af4934fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d53c3f769ca0f9e7434937b792877770271aecf":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","e7bf28bc020449d67c52e06f23f52829af4934fd"],"e7bf28bc020449d67c52e06f23f52829af4934fd":["3d53c3f769ca0f9e7434937b792877770271aecf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60ba444201d2570214b6fcf1d15600dc1a01f548"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["29ef99d61cda9641b6250bf9567329a6e65f901d","3d53c3f769ca0f9e7434937b792877770271aecf","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3d53c3f769ca0f9e7434937b792877770271aecf":["e7bf28bc020449d67c52e06f23f52829af4934fd"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"e7bf28bc020449d67c52e06f23f52829af4934fd":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}