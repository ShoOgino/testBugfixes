{"path":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocNotExists(HttpSolrClient,String,String).mjava","commits":[{"id":"120dcb9902dc31423bf7d82c10c5439b88325390","date":1442349554,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocNotExists(HttpSolrClient,String,String).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertDocNotExists(HttpSolrClient solr, String coll, String docId) throws Exception {\n    NamedList rsp = realTimeGetDocId(solr, docId);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" is found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match != null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocNotExists(HttpSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocNotExists(HttpSolrClient,String,String).mjava","sourceNew":"  protected void assertDocNotExists(HttpSolrClient solr, String coll, String docId) throws Exception {\n    NamedList rsp = realTimeGetDocId(solr, docId);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), Integer.valueOf(docId));\n    assertTrue(\"Doc with id=\" + docId + \" is found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match != null);\n  }\n\n","sourceOld":"  protected void assertDocNotExists(HttpSolrClient solr, String coll, String docId) throws Exception {\n    NamedList rsp = realTimeGetDocId(solr, docId);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" is found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocNotExists(HttpSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocNotExists(HttpSolrClient,String,String).mjava","sourceNew":"  protected void assertDocNotExists(HttpSolrClient solr, String coll, String docId) throws Exception {\n    NamedList rsp = realTimeGetDocId(solr, docId);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), Integer.valueOf(docId));\n    assertTrue(\"Doc with id=\" + docId + \" is found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match != null);\n  }\n\n","sourceOld":"  protected void assertDocNotExists(HttpSolrClient solr, String coll, String docId) throws Exception {\n    NamedList rsp = realTimeGetDocId(solr, docId);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" is found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocNotExists(HttpSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocNotExists(HttpSolrClient,String,String).mjava","sourceNew":"  protected void assertDocNotExists(HttpSolrClient solr, String coll, String docId) throws Exception {\n    NamedList rsp = realTimeGetDocId(solr, docId);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), Integer.valueOf(docId));\n    assertTrue(\"Doc with id=\" + docId + \" is found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match != null);\n  }\n\n","sourceOld":"  protected void assertDocNotExists(HttpSolrClient solr, String coll, String docId) throws Exception {\n    NamedList rsp = realTimeGetDocId(solr, docId);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), new Integer(docId));\n    assertTrue(\"Doc with id=\" + docId + \" is found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocNotExists(HttpSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/HttpPartitionTest#assertDocNotExists(HttpSolrClient,String,String).mjava","sourceNew":"  protected void assertDocNotExists(HttpSolrClient solr, String coll, String docId) throws Exception {\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList rsp = realTimeGetDocId(solr, docId);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), Integer.valueOf(docId));\n    assertTrue(\"Doc with id=\" + docId + \" is found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match != null);\n  }\n\n","sourceOld":"  protected void assertDocNotExists(HttpSolrClient solr, String coll, String docId) throws Exception {\n    NamedList rsp = realTimeGetDocId(solr, docId);\n    String match = JSONTestUtil.matchObj(\"/id\", rsp.get(\"doc\"), Integer.valueOf(docId));\n    assertTrue(\"Doc with id=\" + docId + \" is found in \" + solr.getBaseURL()\n        + \" due to: \" + match + \"; rsp=\"+rsp, match != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["120dcb9902dc31423bf7d82c10c5439b88325390"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["120dcb9902dc31423bf7d82c10c5439b88325390","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"120dcb9902dc31423bf7d82c10c5439b88325390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["120dcb9902dc31423bf7d82c10c5439b88325390","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["120dcb9902dc31423bf7d82c10c5439b88325390"],"120dcb9902dc31423bf7d82c10c5439b88325390":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}