{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int,boolean).mjava","sourceNew":"  private AbstractFirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs, boolean canUseIDV) throws IOException {\n    AbstractFirstPassGroupingCollector<?> selected;\n    if (canUseIDV && random().nextBoolean()) {\n      boolean diskResident = random().nextBoolean();\n      selected = DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField, Type.BYTES_VAR_SORTED, diskResident);\n    } else if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs, boolean canUseIDV) throws IOException {\n    AbstractFirstPassGroupingCollector<?> selected;\n    if (canUseIDV && random().nextBoolean()) {\n      boolean diskResident = random().nextBoolean();\n      selected = DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField, Type.BYTES_VAR_SORTED, diskResident);\n    } else if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"854f97cd3613b9579fba83755c80b697e2f3993f","date":1353527621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int,boolean).mjava","sourceNew":"  private AbstractFirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs, boolean canUseIDV) throws IOException {\n    AbstractFirstPassGroupingCollector<?> selected;\n    if (canUseIDV && random().nextBoolean()) {\n      boolean diskResident = random().nextBoolean();\n      selected = DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField + \"_dv\", Type.BYTES_VAR_SORTED, diskResident);\n    } else if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs, boolean canUseIDV) throws IOException {\n    AbstractFirstPassGroupingCollector<?> selected;\n    if (canUseIDV && random().nextBoolean()) {\n      boolean diskResident = random().nextBoolean();\n      selected = DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField, Type.BYTES_VAR_SORTED, diskResident);\n    } else if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int,boolean).mjava","sourceNew":"  private AbstractFirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs, boolean canUseIDV) throws IOException {\n    AbstractFirstPassGroupingCollector<?> selected;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs, boolean canUseIDV) throws IOException {\n    AbstractFirstPassGroupingCollector<?> selected;\n    if (canUseIDV && random().nextBoolean()) {\n      boolean diskResident = random().nextBoolean();\n      selected = DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField + \"_dv\", Type.BYTES_VAR_SORTED, diskResident);\n    } else if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3eb88edd735aec1f42cbe41c478fb4f8d41f0ec","date":1358544193,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int,boolean).mjava","sourceNew":"  private AbstractFirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs) throws IOException {\n    AbstractFirstPassGroupingCollector<?> selected;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs, boolean canUseIDV) throws IOException {\n    AbstractFirstPassGroupingCollector<?> selected;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int,boolean).mjava","sourceNew":null,"sourceOld":"  private AbstractFirstPassGroupingCollector<?> createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs, boolean canUseIDV) throws IOException {\n    AbstractFirstPassGroupingCollector<?> selected;\n    if (canUseIDV && random().nextBoolean()) {\n      boolean diskResident = random().nextBoolean();\n      selected = DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField, Type.BYTES_VAR_SORTED, diskResident);\n    } else if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      selected = new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      selected = new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + selected.getClass().getName());\n    }\n    return selected;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099","e3eb88edd735aec1f42cbe41c478fb4f8d41f0ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["854f97cd3613b9579fba83755c80b697e2f3993f"],"854f97cd3613b9579fba83755c80b697e2f3993f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"e3eb88edd735aec1f42cbe41c478fb4f8d41f0ec":["0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d4d69c535930b5cce125cff868d40f6373dc27d4","854f97cd3613b9579fba83755c80b697e2f3993f"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0837ab0472feecb3a54260729d845f839e1cbd72":["e3eb88edd735aec1f42cbe41c478fb4f8d41f0ec"],"854f97cd3613b9579fba83755c80b697e2f3993f":["0837ab0472feecb3a54260729d845f839e1cbd72"],"e3eb88edd735aec1f42cbe41c478fb4f8d41f0ec":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}