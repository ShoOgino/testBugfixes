{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,GeoPoint,GeoPoint).mjava","commits":[{"id":"535df84251be5af3be84d750beba0021aff9132d","date":1434649368,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,GeoPoint,GeoPoint).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,double).mjava","sourceNew":"    /** Constructor for case (1).\n     * Generate a simple circle cutoff plane.\n     */\n    public SegmentEndpoint(final GeoPoint point, final GeoPoint upperPoint, final GeoPoint lowerPoint) {\n      this.point = point;\n      // Construct normal plane\n      final Plane normalPlane = new Plane(upperPoint, point);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, normalPlane, upperPoint, lowerPoint);\n      this.cutoffPlanes = new Membership[0];\n      this.notablePoints = new GeoPoint[0];\n    }\n\n","sourceOld":"    /** Constructor for case (1).\n     * Generate a simple circle cutoff plane.\n     */\n    public SegmentEndpoint(final GeoPoint point, final double cutoffOffset) {\n      this.point = point;\n      final double magnitude = point.magnitude();\n      // Normalize vector to make D value correct\n      this.circlePlane = new SidedPlane(point, point.normalize(), -Math.sqrt(magnitude * magnitude - cutoffOffset * cutoffOffset));\n      this.cutoffPlanes = new Membership[0];\n      this.notablePoints = new GeoPoint[0];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f3c09e163d39ea7acb6f142f32aed0a6f523c5a","date":1435805572,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,GeoPoint,GeoPoint).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,GeoPoint,GeoPoint).mjava","sourceNew":"    /** Constructor for case (1).\n     * Generate a simple circle cutoff plane.\n     */\n    public SegmentEndpoint(final GeoPoint point, final GeoPoint upperPoint, final GeoPoint lowerPoint) {\n      this.point = point;\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedVerticalPlane(upperPoint, lowerPoint, point);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, normalPlane, upperPoint, lowerPoint);\n      this.cutoffPlanes = new Membership[0];\n      this.notablePoints = new GeoPoint[0];\n    }\n\n","sourceOld":"    /** Constructor for case (1).\n     * Generate a simple circle cutoff plane.\n     */\n    public SegmentEndpoint(final GeoPoint point, final GeoPoint upperPoint, final GeoPoint lowerPoint) {\n      this.point = point;\n      // Construct normal plane\n      final Plane normalPlane = new Plane(upperPoint, point);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, normalPlane, upperPoint, lowerPoint);\n      this.cutoffPlanes = new Membership[0];\n      this.notablePoints = new GeoPoint[0];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,GeoPoint,GeoPoint).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.SegmentEndpoint#SegmentEndpoint(GeoPoint,GeoPoint,GeoPoint).mjava","sourceNew":"    /** Constructor for case (1).\n     * Generate a simple circle cutoff plane.\n     */\n    public SegmentEndpoint(final GeoPoint point, final GeoPoint upperPoint, final GeoPoint lowerPoint) {\n      this.point = point;\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedVerticalPlane(upperPoint, lowerPoint, point);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, normalPlane, upperPoint, lowerPoint);\n      this.cutoffPlanes = new Membership[0];\n      this.notablePoints = new GeoPoint[0];\n    }\n\n","sourceOld":"    /** Constructor for case (1).\n     * Generate a simple circle cutoff plane.\n     */\n    public SegmentEndpoint(final GeoPoint point, final GeoPoint upperPoint, final GeoPoint lowerPoint) {\n      this.point = point;\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedVerticalPlane(upperPoint, lowerPoint, point);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(point, normalPlane, upperPoint, lowerPoint);\n      this.cutoffPlanes = new Membership[0];\n      this.notablePoints = new GeoPoint[0];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f3c09e163d39ea7acb6f142f32aed0a6f523c5a":["535df84251be5af3be84d750beba0021aff9132d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["5f3c09e163d39ea7acb6f142f32aed0a6f523c5a"],"535df84251be5af3be84d750beba0021aff9132d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"5f3c09e163d39ea7acb6f142f32aed0a6f523c5a":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["535df84251be5af3be84d750beba0021aff9132d"],"535df84251be5af3be84d750beba0021aff9132d":["5f3c09e163d39ea7acb6f142f32aed0a6f523c5a"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}