{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","commits":[{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map,SpanQuery).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    spanQuery.extractTerms(nonWeightedTerms);\n\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      for (final Term queryTerm : nonWeightedTerms) {\n        fieldNames.add(queryTerm.field());\n      }\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n\n      IndexReader reader = getReaderForField(field);\n      Spans spans = spanQuery.getSpans(reader);\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map terms, SpanQuery spanQuery) throws IOException {\n    Set nonWeightedTerms = new HashSet();\n    spanQuery.extractTerms(nonWeightedTerms);\n\n    Set fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet();\n      for (Iterator iter = nonWeightedTerms.iterator(); iter.hasNext();) {\n        Term queryTerm = (Term) iter.next();\n        fieldNames.add(queryTerm.field());\n      }\n    } else {\n      fieldNames = new HashSet(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n\n    Iterator it = fieldNames.iterator();\n    List spanPositions = new ArrayList();\n\n    while (it.hasNext()) {\n      String field = (String) it.next();\n\n      IndexReader reader = getReaderForField(field);\n      Spans spans = spanQuery.getSpans(reader);\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (Iterator iter = nonWeightedTerms.iterator(); iter.hasNext();) {\n      Term queryTerm = (Term) iter.next();\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = (WeightedSpanTerm) terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1c5612e47760f10f8355ed2c1b6ee587f2936","date":1256834464,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getReaderForField(field));\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n\n      IndexReader reader = getReaderForField(field);\n      final Spans spans;\n      if (mustRewriteQuery) {\n        spans = queries.get(field).getSpans(reader);\n      } else {\n        spans = spanQuery.getSpans(reader);\n      }\n\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    spanQuery.extractTerms(nonWeightedTerms);\n\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      for (final Term queryTerm : nonWeightedTerms) {\n        fieldNames.add(queryTerm.field());\n      }\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n\n      IndexReader reader = getReaderForField(field);\n      Spans spans = spanQuery.getSpans(reader);\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["ffdf794cee8d43eb612df752c592cef2dc3e75ae","5d934099a6f0a3ae0285025a1e1b61b7b05fed8f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedSpanTerms(Map[String,WeightedSpanTerm],SpanQuery).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getReaderForField(field));\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n\n      IndexReader reader = getReaderForField(field);\n      final Spans spans;\n      if (mustRewriteQuery) {\n        spans = queries.get(field).getSpans(reader);\n      } else {\n        spans = spanQuery.getSpans(reader);\n      }\n\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>SpanQuery</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param spanQuery\n   *          SpanQuery to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedSpanTerms(Map<String,WeightedSpanTerm> terms, SpanQuery spanQuery) throws IOException {\n    Set<String> fieldNames;\n\n    if (fieldName == null) {\n      fieldNames = new HashSet<String>();\n      collectSpanQueryFields(spanQuery, fieldNames);\n    } else {\n      fieldNames = new HashSet<String>(1);\n      fieldNames.add(fieldName);\n    }\n    // To support the use of the default field name\n    if (defaultField != null) {\n      fieldNames.add(defaultField);\n    }\n    \n    Map<String, SpanQuery> queries = new HashMap<String, SpanQuery>();\n \n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    final boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n    if (mustRewriteQuery) {\n      for (final String field : fieldNames) {\n        final SpanQuery rewrittenQuery = (SpanQuery) spanQuery.rewrite(getReaderForField(field));\n        queries.put(field, rewrittenQuery);\n        rewrittenQuery.extractTerms(nonWeightedTerms);\n      }\n    } else {\n      spanQuery.extractTerms(nonWeightedTerms);\n    }\n\n    List<PositionSpan> spanPositions = new ArrayList<PositionSpan>();\n\n    for (final String field : fieldNames) {\n\n      IndexReader reader = getReaderForField(field);\n      final Spans spans;\n      if (mustRewriteQuery) {\n        spans = queries.get(field).getSpans(reader);\n      } else {\n        spans = spanQuery.getSpans(reader);\n      }\n\n\n      // collect span positions\n      while (spans.next()) {\n        spanPositions.add(new PositionSpan(spans.start(), spans.end() - 1));\n      }\n      \n    }\n\n    if (spanPositions.size() == 0) {\n      // no spans found\n      return;\n    }\n\n    for (final Term queryTerm :  nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = terms.get(queryTerm.text());\n\n        if (weightedSpanTerm == null) {\n          weightedSpanTerm = new WeightedSpanTerm(spanQuery.getBoost(), queryTerm.text());\n          weightedSpanTerm.addPositionSpans(spanPositions);\n          weightedSpanTerm.positionSensitive = true;\n          terms.put(queryTerm.text(), weightedSpanTerm);\n        } else {\n          if (spanPositions.size() > 0) {\n            weightedSpanTerm.addPositionSpans(spanPositions);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ba1c5612e47760f10f8355ed2c1b6ee587f2936":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9ba1c5612e47760f10f8355ed2c1b6ee587f2936"]},"commit2Childs":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["9ba1c5612e47760f10f8355ed2c1b6ee587f2936"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"9ba1c5612e47760f10f8355ed2c1b6ee587f2936":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}