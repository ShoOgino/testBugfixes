{"path":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    // TODO: test seeking too\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random);\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    // TODO: test seeking too\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random);\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    // TODO: test seeking too\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    // TODO: test seeking too\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random);\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"741c0c3f0c3403a04cd53ddf802a65a4e7577adf","date":1336132146,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    // TODO: test seeking too\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc","date":1344608180,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0935c850ea562932997b72c69d93e345f21d7f45","date":1344711506,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsEquals(String,IndexReader,Terms,Terms,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTerms(Terms,Terms,boolean).mjava","sourceNew":"  /** \n   * Terms api equivalency \n   */\n  public void assertTermsEquals(String info, IndexReader leftReader, Terms leftTerms, Terms rightTerms, boolean deep) throws IOException {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatisticsEquals(info, leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnumEquals(info, leftReader, leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeekingEquals(info, leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnumEquals(info, leftReader, leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** \n   * Terms api equivalency \n   */\n  public void assertTerms(Terms leftTerms, Terms rightTerms, boolean deep) throws Exception {\n    if (leftTerms == null || rightTerms == null) {\n      assertNull(info, leftTerms);\n      assertNull(info, rightTerms);\n      return;\n    }\n    assertTermsStatistics(leftTerms, rightTerms);\n    assertEquals(leftTerms.hasOffsets(), rightTerms.hasOffsets());\n    assertEquals(leftTerms.hasPositions(), rightTerms.hasPositions());\n    assertEquals(leftTerms.hasPayloads(), rightTerms.hasPayloads());\n\n    TermsEnum leftTermsEnum = leftTerms.iterator(null);\n    TermsEnum rightTermsEnum = rightTerms.iterator(null);\n    assertTermsEnum(leftTermsEnum, rightTermsEnum, true);\n    \n    assertTermsSeeking(leftTerms, rightTerms);\n    \n    if (deep) {\n      int numIntersections = atLeast(3);\n      for (int i = 0; i < numIntersections; i++) {\n        String re = AutomatonTestUtil.randomRegexp(random());\n        CompiledAutomaton automaton = new CompiledAutomaton(new RegExp(re, RegExp.NONE).toAutomaton());\n        if (automaton.type == CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n          // TODO: test start term too\n          TermsEnum leftIntersection = leftTerms.intersect(automaton, null);\n          TermsEnum rightIntersection = rightTerms.intersect(automaton, null);\n          assertTermsEnum(leftIntersection, rightIntersection, rarely());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["741c0c3f0c3403a04cd53ddf802a65a4e7577adf","0935c850ea562932997b72c69d93e345f21d7f45"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc":["741c0c3f0c3403a04cd53ddf802a65a4e7577adf"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0935c850ea562932997b72c69d93e345f21d7f45":["5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc"],"741c0c3f0c3403a04cd53ddf802a65a4e7577adf":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["0935c850ea562932997b72c69d93e345f21d7f45"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["741c0c3f0c3403a04cd53ddf802a65a4e7577adf","0935c850ea562932997b72c69d93e345f21d7f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51c8450b3b616b6777f722ff4083c0bf946381a2"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc":["0935c850ea562932997b72c69d93e345f21d7f45"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["741c0c3f0c3403a04cd53ddf802a65a4e7577adf"],"741c0c3f0c3403a04cd53ddf802a65a4e7577adf":["c7869f64c874ebf7f317d22c00baf2b6857797a6","5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"0935c850ea562932997b72c69d93e345f21d7f45":["c7869f64c874ebf7f317d22c00baf2b6857797a6","51c8450b3b616b6777f722ff4083c0bf946381a2","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}