{"path":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#indexDocs(String,int,Function[Integer,SolrInputDocument]).mjava","commits":[{"id":"dad6a48950aafc9c2f5dc54740f8c6ab81304203","date":1552999379,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#indexDocs(String,int,Function[Integer,SolrInputDocument]).mjava","pathOld":"/dev/null","sourceNew":"  private void indexDocs(String collection, int numDocs, Function<Integer, SolrInputDocument> generator) throws Exception {\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      docs.add(generator.apply(i));\n    }\n    solrClient.add(collection, docs);\n    solrClient.commit(collection);\n    // verify the docs exist\n    QueryResponse rsp = solrClient.query(collection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8885c6d3e0ed79be679e8716e5ee92eadbf74fd","date":1557521764,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#indexDocs(String,int,Function[Integer,SolrInputDocument]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#indexDocs(String,int,Function[Integer,SolrInputDocument]).mjava","sourceNew":"  private void indexDocs(String collection, int numDocs, Function<Integer, SolrInputDocument> generator) throws Exception {\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      docs.add(generator.apply(i));\n    }\n    solrClient.add(collection, docs);\n    solrClient.commit(collection);\n    // verify the docs exist\n    QueryResponse rsp = solrClient.query(collection, params(CommonParams.Q, \"*:*\"));\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, collection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.indexDocs\", true);\n\n    assertEquals(\"num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n\n  }\n\n","sourceOld":"  private void indexDocs(String collection, int numDocs, Function<Integer, SolrInputDocument> generator) throws Exception {\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      docs.add(generator.apply(i));\n    }\n    solrClient.add(collection, docs);\n    solrClient.commit(collection);\n    // verify the docs exist\n    QueryResponse rsp = solrClient.query(collection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":["3821108e77348b1cdb6baf5422727f926ba7af61"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"62facbbf49f5753b766d5d66140d1881c73e352f","date":1557682606,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#indexDocs(String,int,Function[Integer,SolrInputDocument]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#indexDocs(String,int,Function[Integer,SolrInputDocument]).mjava","sourceNew":"  private void indexDocs(String collection, int numDocs, Function<Integer, SolrInputDocument> generator) throws Exception {\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      docs.add(generator.apply(i));\n    }\n    solrClient.add(collection, docs);\n    solrClient.commit(collection);\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, collection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.indexDocs\", true);\n\n    // verify the docs exist\n    QueryResponse rsp = solrClient.query(collection, params(CommonParams.Q, \"*:*\"));\n\n    assertEquals(\"num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n\n  }\n\n","sourceOld":"  private void indexDocs(String collection, int numDocs, Function<Integer, SolrInputDocument> generator) throws Exception {\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      docs.add(generator.apply(i));\n    }\n    solrClient.add(collection, docs);\n    solrClient.commit(collection);\n    // verify the docs exist\n    QueryResponse rsp = solrClient.query(collection, params(CommonParams.Q, \"*:*\"));\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, collection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.indexDocs\", true);\n\n    assertEquals(\"num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b137ac261d96fa4d6176349645cfc0f68b9ba1e1","date":1558626214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#indexDocs(String,int,Function[Integer,SolrInputDocument]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#indexDocs(String,int,Function[Integer,SolrInputDocument]).mjava","sourceNew":"  private void indexDocs(String collection, int numDocs, Function<Integer, SolrInputDocument> generator) throws Exception {\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      docs.add(generator.apply(i));\n    }\n    solrClient.add(collection, docs);\n    solrClient.commit(collection);\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, collection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.indexDocs\", false);\n\n    // verify the docs exist\n    QueryResponse rsp = solrClient.query(collection, params(CommonParams.Q, \"*:*\"));\n\n    assertEquals(\"num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n\n  }\n\n","sourceOld":"  private void indexDocs(String collection, int numDocs, Function<Integer, SolrInputDocument> generator) throws Exception {\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      docs.add(generator.apply(i));\n    }\n    solrClient.add(collection, docs);\n    solrClient.commit(collection);\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, collection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.indexDocs\", true);\n\n    // verify the docs exist\n    QueryResponse rsp = solrClient.query(collection, params(CommonParams.Q, \"*:*\"));\n\n    assertEquals(\"num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":["3821108e77348b1cdb6baf5422727f926ba7af61"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3821108e77348b1cdb6baf5422727f926ba7af61","date":1582300636,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#indexDocs(String,int,Function[Integer,SolrInputDocument]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#indexDocs(String,int,Function[Integer,SolrInputDocument]).mjava","sourceNew":"  private void indexDocs(String collection, int numDocs, Function<Integer, SolrInputDocument> generator) throws Exception {\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      docs.add(generator.apply(i));\n    }\n    solrClient.add(collection, docs);\n    solrClient.commit(collection);\n    // verify the docs exist\n    QueryResponse rsp = solrClient.query(collection, params(CommonParams.Q, \"*:*\"));\n\n    assertEquals(\"num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n\n  }\n\n","sourceOld":"  private void indexDocs(String collection, int numDocs, Function<Integer, SolrInputDocument> generator) throws Exception {\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < numDocs; i++) {\n      docs.add(generator.apply(i));\n    }\n    solrClient.add(collection, docs);\n    solrClient.commit(collection);\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, collection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.indexDocs\", false);\n\n    // verify the docs exist\n    QueryResponse rsp = solrClient.query(collection, params(CommonParams.Q, \"*:*\"));\n\n    assertEquals(\"num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n\n  }\n\n","bugFix":["c8885c6d3e0ed79be679e8716e5ee92eadbf74fd","b137ac261d96fa4d6176349645cfc0f68b9ba1e1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3821108e77348b1cdb6baf5422727f926ba7af61":["b137ac261d96fa4d6176349645cfc0f68b9ba1e1"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b137ac261d96fa4d6176349645cfc0f68b9ba1e1":["62facbbf49f5753b766d5d66140d1881c73e352f"],"c8885c6d3e0ed79be679e8716e5ee92eadbf74fd":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"62facbbf49f5753b766d5d66140d1881c73e352f":["c8885c6d3e0ed79be679e8716e5ee92eadbf74fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3821108e77348b1cdb6baf5422727f926ba7af61"]},"commit2Childs":{"3821108e77348b1cdb6baf5422727f926ba7af61":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["c8885c6d3e0ed79be679e8716e5ee92eadbf74fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"b137ac261d96fa4d6176349645cfc0f68b9ba1e1":["3821108e77348b1cdb6baf5422727f926ba7af61"],"c8885c6d3e0ed79be679e8716e5ee92eadbf74fd":["62facbbf49f5753b766d5d66140d1881c73e352f"],"62facbbf49f5753b766d5d66140d1881c73e352f":["b137ac261d96fa4d6176349645cfc0f68b9ba1e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}