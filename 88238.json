{"path":"solr/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","commits":[{"id":"606b3c3bf20fa12fc44a5bb6a9cba3eca1af28c7","date":1283030744,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c85fa43e6918808743daa7847ba0264373af687f","c85fa43e6918808743daa7847ba0264373af687f","c85fa43e6918808743daa7847ba0264373af687f","c85fa43e6918808743daa7847ba0264373af687f","c85fa43e6918808743daa7847ba0264373af687f","c85fa43e6918808743daa7847ba0264373af687f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestWordDelimiterFilterFactory#testCustomTypes().mjava","sourceNew":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","sourceOld":"  @Test\n  public void testCustomTypes() throws Exception {\n    String testText = \"I borrowed $5,400.00 at 25% interest-rate\";\n    WordDelimiterFilterFactory factoryDefault = new WordDelimiterFilterFactory();\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"generateWordParts\", \"1\");\n    args.put(\"generateNumberParts\", \"1\");\n    args.put(\"catenateWords\", \"1\");\n    args.put(\"catenateNumbers\", \"1\");\n    args.put(\"catenateAll\", \"0\");\n    args.put(\"splitOnCaseChange\", \"1\");\n    \n    /* default behavior */\n    factoryDefault.init(args);\n    factoryDefault.inform(loader);\n    \n    TokenStream ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"5\", \"400\", \"00\", \"540000\", \"at\", \"25\", \"interest\", \"rate\", \"interestrate\" });\n\n    ts = factoryDefault.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\", \"bar\", \"foobar\" });\n\n    \n    /* custom behavior */\n    WordDelimiterFilterFactory factoryCustom = new WordDelimiterFilterFactory();\n    // use a custom type mapping\n    args.put(\"types\", \"wdftypes.txt\");\n    factoryCustom.init(args);\n    factoryCustom.inform(loader);\n    \n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(testText)));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"I\", \"borrowed\", \"$5,400.00\", \"at\", \"25%\", \"interest\", \"rate\", \"interestrate\" });\n    \n    /* test custom behavior with a char > 0x7F, because we had to make a larger byte[] */\n    ts = factoryCustom.create(\n        new WhitespaceTokenizer(BaseTokenTestCase.DEFAULT_VERSION, new StringReader(\"foo\\u200Dbar\")));\n    BaseTokenTestCase.assertTokenStreamContents(ts, \n        new String[] { \"foo\\u200Dbar\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["606b3c3bf20fa12fc44a5bb6a9cba3eca1af28c7"],"c26f00b574427b55127e869b935845554afde1fa":["606b3c3bf20fa12fc44a5bb6a9cba3eca1af28c7","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["606b3c3bf20fa12fc44a5bb6a9cba3eca1af28c7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","606b3c3bf20fa12fc44a5bb6a9cba3eca1af28c7"],"606b3c3bf20fa12fc44a5bb6a9cba3eca1af28c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","606b3c3bf20fa12fc44a5bb6a9cba3eca1af28c7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"606b3c3bf20fa12fc44a5bb6a9cba3eca1af28c7":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}