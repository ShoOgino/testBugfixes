{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getLines(InputStream,Charset).mjava","commits":[{"id":"de6b1e414481e1c25c32f310b02a6d192f7f9faa","date":1343310208,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getLines(InputStream,Charset).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/ResourceAsStreamResourceLoader#getLines(String).mjava","sourceNew":"  /**\n   * Accesses a resource by name and returns the (non comment) lines containing\n   * data using the given character encoding.\n   *\n   * <p>\n   * A comment line is any line that starts with the character \"#\"\n   * </p>\n   *\n   * @return a list of non-blank non-comment lines with whitespace trimmed\n   * @throws IOException\n   */\n  public static List<String> getLines(InputStream stream, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    boolean success = false;\n    try {\n      input = getBufferedReader(IOUtils.getDecodingReader(stream, charset));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n      success = true;\n      return lines;\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public List<String> getLines(String resource) throws IOException {\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    try {\n      input = new BufferedReader(new InputStreamReader(openResource(resource),\n          IOUtils.CHARSET_UTF_8.newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT)));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n    } catch (CharacterCodingException ex) {\n      throw new RuntimeException(\"Error loading resource (wrong encoding?): \" + resource, ex);\n    } finally {\n      if (input != null)\n        input.close();\n    }\n    return lines;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getLines(InputStream,Charset).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Accesses a resource by name and returns the (non comment) lines containing\n   * data using the given character encoding.\n   *\n   * <p>\n   * A comment line is any line that starts with the character \"#\"\n   * </p>\n   *\n   * @return a list of non-blank non-comment lines with whitespace trimmed\n   * @throws IOException\n   */\n  public static List<String> getLines(InputStream stream, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    boolean success = false;\n    try {\n      input = getBufferedReader(IOUtils.getDecodingReader(stream, charset));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n      success = true;\n      return lines;\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getLines(InputStream,Charset).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Accesses a resource by name and returns the (non comment) lines containing\n   * data using the given character encoding.\n   *\n   * <p>\n   * A comment line is any line that starts with the character \"#\"\n   * </p>\n   *\n   * @return a list of non-blank non-comment lines with whitespace trimmed\n   * @throws IOException\n   */\n  public static List<String> getLines(InputStream stream, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    boolean success = false;\n    try {\n      input = getBufferedReader(IOUtils.getDecodingReader(stream, charset));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n      success = true;\n      return lines;\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getLines(InputStream,Charset).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getLines(InputStream,Charset).mjava","sourceNew":"  /**\n   * Accesses a resource by name and returns the (non comment) lines containing\n   * data using the given character encoding.\n   *\n   * <p>\n   * A comment line is any line that starts with the character \"#\"\n   * </p>\n   *\n   * @return a list of non-blank non-comment lines with whitespace trimmed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public static List<String> getLines(InputStream stream, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    boolean success = false;\n    try {\n      input = getBufferedReader(IOUtils.getDecodingReader(stream, charset));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n      success = true;\n      return lines;\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Accesses a resource by name and returns the (non comment) lines containing\n   * data using the given character encoding.\n   *\n   * <p>\n   * A comment line is any line that starts with the character \"#\"\n   * </p>\n   *\n   * @return a list of non-blank non-comment lines with whitespace trimmed\n   * @throws IOException\n   */\n  public static List<String> getLines(InputStream stream, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    boolean success = false;\n    try {\n      input = getBufferedReader(IOUtils.getDecodingReader(stream, charset));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n      success = true;\n      return lines;\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getLines(InputStream,Charset).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getLines(InputStream,Charset).mjava","sourceNew":"  /**\n   * Accesses a resource by name and returns the (non comment) lines containing\n   * data using the given character encoding.\n   *\n   * <p>\n   * A comment line is any line that starts with the character \"#\"\n   * </p>\n   *\n   * @return a list of non-blank non-comment lines with whitespace trimmed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public static List<String> getLines(InputStream stream, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    boolean success = false;\n    try {\n      input = getBufferedReader(IOUtils.getDecodingReader(stream, charset));\n\n      lines = new ArrayList<>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n      success = true;\n      return lines;\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Accesses a resource by name and returns the (non comment) lines containing\n   * data using the given character encoding.\n   *\n   * <p>\n   * A comment line is any line that starts with the character \"#\"\n   * </p>\n   *\n   * @return a list of non-blank non-comment lines with whitespace trimmed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public static List<String> getLines(InputStream stream, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    boolean success = false;\n    try {\n      input = getBufferedReader(IOUtils.getDecodingReader(stream, charset));\n\n      lines = new ArrayList<String>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n      success = true;\n      return lines;\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/WordlistLoader#getLines(InputStream,Charset).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getLines(InputStream,Charset).mjava","sourceNew":"  /**\n   * Accesses a resource by name and returns the (non comment) lines containing\n   * data using the given character encoding.\n   *\n   * <p>\n   * A comment line is any line that starts with the character \"#\"\n   * </p>\n   *\n   * @return a list of non-blank non-comment lines with whitespace trimmed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public static List<String> getLines(InputStream stream, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    boolean success = false;\n    try {\n      input = getBufferedReader(IOUtils.getDecodingReader(stream, charset));\n\n      lines = new ArrayList<>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n      success = true;\n      return lines;\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Accesses a resource by name and returns the (non comment) lines containing\n   * data using the given character encoding.\n   *\n   * <p>\n   * A comment line is any line that starts with the character \"#\"\n   * </p>\n   *\n   * @return a list of non-blank non-comment lines with whitespace trimmed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public static List<String> getLines(InputStream stream, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    boolean success = false;\n    try {\n      input = getBufferedReader(IOUtils.getDecodingReader(stream, charset));\n\n      lines = new ArrayList<>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n      success = true;\n      return lines;\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/WordlistLoader#getLines(InputStream,Charset).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getLines(InputStream,Charset).mjava","sourceNew":"  /**\n   * Accesses a resource by name and returns the (non comment) lines containing\n   * data using the given character encoding.\n   *\n   * <p>\n   * A comment line is any line that starts with the character \"#\"\n   * </p>\n   *\n   * @return a list of non-blank non-comment lines with whitespace trimmed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public static List<String> getLines(InputStream stream, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    boolean success = false;\n    try {\n      input = getBufferedReader(IOUtils.getDecodingReader(stream, charset));\n\n      lines = new ArrayList<>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n      success = true;\n      return lines;\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Accesses a resource by name and returns the (non comment) lines containing\n   * data using the given character encoding.\n   *\n   * <p>\n   * A comment line is any line that starts with the character \"#\"\n   * </p>\n   *\n   * @return a list of non-blank non-comment lines with whitespace trimmed\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public static List<String> getLines(InputStream stream, Charset charset) throws IOException{\n    BufferedReader input = null;\n    ArrayList<String> lines;\n    boolean success = false;\n    try {\n      input = getBufferedReader(IOUtils.getDecodingReader(stream, charset));\n\n      lines = new ArrayList<>();\n      for (String word=null; (word=input.readLine())!=null;) {\n        // skip initial bom marker\n        if (lines.isEmpty() && word.length() > 0 && word.charAt(0) == '\\uFEFF')\n          word = word.substring(1);\n        // skip comments\n        if (word.startsWith(\"#\")) continue;\n        word=word.trim();\n        // skip blank lines\n        if (word.length()==0) continue;\n        lines.add(word);\n      }\n      success = true;\n      return lines;\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["de6b1e414481e1c25c32f310b02a6d192f7f9faa"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de6b1e414481e1c25c32f310b02a6d192f7f9faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de6b1e414481e1c25c32f310b02a6d192f7f9faa"],"de6b1e414481e1c25c32f310b02a6d192f7f9faa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","de6b1e414481e1c25c32f310b02a6d192f7f9faa"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"de6b1e414481e1c25c32f310b02a6d192f7f9faa":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}