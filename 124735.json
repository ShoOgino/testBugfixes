{"path":"src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerExplain().mjava","commits":[{"id":"98bc22650ab0fe51f9c00513397bfa42a64fc663","date":1161986633,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerExplain().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerExplain() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.createWeight(searcher);\n    Scorer s = w.scorer(searcher.getIndexReader());\n    Explanation e = s.explain(1);\n    assertTrue(\"Scorer explanation value for doc#1 isn't positive: \"\n               + e.toString(),\n               0.0f < e.getValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerExplain().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerExplain().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerExplain() throws Exception {\n    SpanNearQuery q = makeQuery();\n    QueryWeight w = q.queryWeight(searcher);\n    Scorer s = w.scorer(searcher.getIndexReader(), true, false);\n    Explanation e = s.explain(1);\n    assertTrue(\"Scorer explanation value for doc#1 isn't positive: \"\n               + e.toString(),\n               0.0f < e.getValue());\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerExplain() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.createWeight(searcher);\n    Scorer s = w.scorer(searcher.getIndexReader());\n    Explanation e = s.explain(1);\n    assertTrue(\"Scorer explanation value for doc#1 isn't positive: \"\n               + e.toString(),\n               0.0f < e.getValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerExplain().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerExplain().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerExplain() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    Scorer s = w.scorer(searcher.getIndexReader(), true, false);\n    Explanation e = s.explain(1);\n    assertTrue(\"Scorer explanation value for doc#1 isn't positive: \"\n               + e.toString(),\n               0.0f < e.getValue());\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerExplain() throws Exception {\n    SpanNearQuery q = makeQuery();\n    QueryWeight w = q.queryWeight(searcher);\n    Scorer s = w.scorer(searcher.getIndexReader(), true, false);\n    Explanation e = s.explain(1);\n    assertTrue(\"Scorer explanation value for doc#1 isn't positive: \"\n               + e.toString(),\n               0.0f < e.getValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerExplain().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerExplain().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerExplain() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Explanation e = q.weight(searcher).explain(searcher.getIndexReader(), 1);\n    assertTrue(\"Scorer explanation value for doc#1 isn't positive: \"\n               + e.toString(),\n               0.0f < e.getValue());\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerExplain() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    Scorer s = w.scorer(searcher.getIndexReader(), true, false);\n    Explanation e = s.explain(1);\n    assertTrue(\"Scorer explanation value for doc#1 isn't positive: \"\n               + e.toString(),\n               0.0f < e.getValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerExplain().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerExplain().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerExplain() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Explanation e = q.weight(searcher).explain(searcher.getIndexReader(), 1);\n    assertTrue(\"Scorer explanation value for doc#1 isn't positive: \"\n               + e.toString(),\n               0.0f < e.getValue());\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerExplain() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Explanation e = q.weight(searcher).explain(searcher.getIndexReader(), 1);\n    assertTrue(\"Scorer explanation value for doc#1 isn't positive: \"\n               + e.toString(),\n               0.0f < e.getValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["fe941135bdfc28c81e20b4d21422f8726af34925"],"98bc22650ab0fe51f9c00513397bfa42a64fc663":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["486cfd5a3f7481938475c113415d896f7a74a4a9"]},"commit2Childs":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"98bc22650ab0fe51f9c00513397bfa42a64fc663":["052fac7830290bd38a04cddee1a121ee07656b56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"fe941135bdfc28c81e20b4d21422f8726af34925":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}