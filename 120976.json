{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitShardWithRule().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitShardWithRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","sourceNew":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitShardWithRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#testSplitShardWithRule().mjava","sourceNew":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20c968c14aace7cf49843bf2c1fafc7fd3845659","date":1533133859,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitShardWithRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitShardWithRule().mjava","sourceNew":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    doSplitShardWithRule(SolrIndexSplitter.SplitMethod.LINK);\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    waitForThingsToLevelOut(15);\n\n    if (usually()) {\n      log.info(\"Using legacyCloud=false for cluster\");\n      CollectionAdminRequest.setClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")\n          .process(cloudClient);\n    }\n\n    log.info(\"Starting testSplitShardWithRule\");\n    String collectionName = \"shardSplitWithRule\";\n    CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(collectionName, \"conf1\", 1, 2)\n        .setRule(\"shard:*,replica:<2,node:*\");\n    CollectionAdminResponse response = createRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n\n    CollectionAdminRequest.SplitShard splitShardRequest = CollectionAdminRequest.splitShard(collectionName)\n        .setShardName(\"shard1\");\n    response = splitShardRequest.process(cloudClient);\n    assertEquals(String.valueOf(response.getErrorMessages()), 0, response.getStatus());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deea3439de4f487ae553317e50d5d641ca386374","date":1537522941,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitShardWithRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitShardWithRule().mjava","sourceNew":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    doSplitShardWithRule(SolrIndexSplitter.SplitMethod.REWRITE);\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    doSplitShardWithRule(SolrIndexSplitter.SplitMethod.LINK);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1fec8b37cbb6884a64d39565e9dd7b4522a0598","date":1537699559,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitShardWithRule().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#testSplitShardWithRule().mjava","sourceNew":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    doSplitShardWithRule(SolrIndexSplitter.SplitMethod.REWRITE);\n  }\n\n","sourceOld":"  @Test\n  public void testSplitShardWithRule() throws Exception {\n    doSplitShardWithRule(SolrIndexSplitter.SplitMethod.LINK);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["20c968c14aace7cf49843bf2c1fafc7fd3845659","deea3439de4f487ae553317e50d5d641ca386374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"deea3439de4f487ae553317e50d5d641ca386374":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"deea3439de4f487ae553317e50d5d641ca386374":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598","deea3439de4f487ae553317e50d5d641ca386374"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}