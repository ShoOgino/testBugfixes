{"path":"src/java/org/apache/solr/search/HashDocSet#union(DocSet).mjava","commits":[{"id":"0e97c9c9ecb6ca9b558635bc9787f15f4cf19040","date":1169358391,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/HashDocSet#union(DocSet).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocSet union(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int[] result = new int[a.size()+b.size()];\n     int resultCount=0;\n     // iterate over the largest table first, adding w/o checking.\n     for (int i=0; i<b.table.length; i++) {\n       int id=b.table[i];\n       if (id>=0) result[resultCount++]=id;\n     }\n\n     // now iterate over smaller set, adding all not already in larger set.\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id>=0 && !b.exists(id)) result[resultCount++]=id;\n     }\n\n     return new HashDocSet(result,0,resultCount);\n   } else {\n     return other.union(this);\n   }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/HashDocSet#union(DocSet).mjava","pathOld":"src/java/org/apache/solr/search/HashDocSet#union(DocSet).mjava","sourceNew":"  @Override\n  public DocSet union(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int[] result = new int[a.size()+b.size()];\n     int resultCount=0;\n     // iterate over the largest table first, adding w/o checking.\n     for (int i=0; i<b.table.length; i++) {\n       int id=b.table[i];\n       if (id>=0) result[resultCount++]=id;\n     }\n\n     // now iterate over smaller set, adding all not already in larger set.\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id>=0 && !b.exists(id)) result[resultCount++]=id;\n     }\n\n     return new HashDocSet(result,0,resultCount);\n   } else {\n     return other.union(this);\n   }\n  }\n\n","sourceOld":"  @Override\n  public DocSet union(DocSet other) {\n   if (other instanceof HashDocSet) {\n     // set \"a\" to the smallest doc set\n     final HashDocSet a = size()<=other.size() ? this : (HashDocSet)other;\n     final HashDocSet b = size()<=other.size() ? (HashDocSet)other : this;\n\n     int[] result = new int[a.size()+b.size()];\n     int resultCount=0;\n     // iterate over the largest table first, adding w/o checking.\n     for (int i=0; i<b.table.length; i++) {\n       int id=b.table[i];\n       if (id>=0) result[resultCount++]=id;\n     }\n\n     // now iterate over smaller set, adding all not already in larger set.\n     for (int i=0; i<a.table.length; i++) {\n       int id=a.table[i];\n       if (id>=0 && !b.exists(id)) result[resultCount++]=id;\n     }\n\n     return new HashDocSet(result,0,resultCount);\n   } else {\n     return other.union(this);\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["0e97c9c9ecb6ca9b558635bc9787f15f4cf19040"],"0e97c9c9ecb6ca9b558635bc9787f15f4cf19040":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0e97c9c9ecb6ca9b558635bc9787f15f4cf19040"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"0e97c9c9ecb6ca9b558635bc9787f15f4cf19040":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}