{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","commits":[{"id":"a851824c09818632c94eba41e60ef5e72e323c8e","date":1337355760,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","pathOld":"/dev/null","sourceNew":"    synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n        boolean storeTermVector,\n        boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normType) {\n      if (globalFieldNumbers == null) {\n        throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n      }\n      FieldInfo fi = fieldInfo(name);\n      if (fi == null) {\n        final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n        fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues, normType);\n      } else {\n        fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n        if (docValues != null) {\n          fi.setDocValuesType(docValues);\n        }\n        if (normType != null) {\n          fi.setNormValueType(normType);\n        }\n      }\n      version++;\n      return fi;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db170c1c8faa054c4e52af9aadc6cd12460af7a9","date":1337357757,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":"    private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n        boolean storeTermVector,\n        boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normType) {\n      FieldInfo fi = fieldInfo(name);\n      if (fi == null) {\n        // get a global number for this field\n        final int fieldNumber = globalFieldNumbers.addOrGet(name, preferredFieldNumber);\n        fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues, normType);\n      } else {\n        fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n        if (docValues != null) {\n          fi.setDocValuesType(docValues);\n        }\n        if (normType != null) {\n          fi.setNormValueType(normType);\n        }\n      }\n      return fi;\n    }\n\n","sourceOld":"    synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n        boolean storeTermVector,\n        boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normType) {\n      if (globalFieldNumbers == null) {\n        throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n      }\n      FieldInfo fi = fieldInfo(name);\n      if (fi == null) {\n        final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n        fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues, normType);\n      } else {\n        fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n        if (docValues != null) {\n          fi.setDocValuesType(docValues);\n        }\n        if (normType != null) {\n          fi.setNormValueType(normType);\n        }\n      }\n      version++;\n      return fi;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19e1fda71fec5a2a0d0fd11eccb5b7cd50cfd059","date":1337694380,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":"    private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n        boolean storeTermVector,\n        boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normType) {\n      FieldInfo fi = fieldInfo(name);\n      if (fi == null) {\n        // get a global number for this field\n        final int fieldNumber = globalFieldNumbers.addOrGet(name, preferredFieldNumber);\n        fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues, normType);\n      } else {\n        fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n        if (docValues != null) {\n          fi.setDocValuesType(docValues);\n        }\n        if (!fi.omitsNorms() && normType != null) {\n          fi.setNormValueType(normType);\n        }\n      }\n      return fi;\n    }\n\n","sourceOld":"    private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n        boolean storeTermVector,\n        boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normType) {\n      FieldInfo fi = fieldInfo(name);\n      if (fi == null) {\n        // get a global number for this field\n        final int fieldNumber = globalFieldNumbers.addOrGet(name, preferredFieldNumber);\n        fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues, normType);\n      } else {\n        fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n        if (docValues != null) {\n          fi.setDocValuesType(docValues);\n        }\n        if (normType != null) {\n          fi.setNormValueType(normType);\n        }\n      }\n      return fi;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","pathOld":"/dev/null","sourceNew":"    private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n        boolean storeTermVector,\n        boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normType) {\n      FieldInfo fi = fieldInfo(name);\n      if (fi == null) {\n        // get a global number for this field\n        final int fieldNumber = globalFieldNumbers.addOrGet(name, preferredFieldNumber);\n        fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues, normType);\n      } else {\n        fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n        if (docValues != null) {\n          fi.setDocValuesType(docValues);\n        }\n        if (!fi.omitsNorms() && normType != null) {\n          fi.setNormValueType(normType);\n        }\n      }\n      return fi;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2893fd5349134af382d33ccc3d84840394c6c1","date":1353682567,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":"    private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n        boolean storeTermVector,\n        boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normType) {\n      FieldInfo fi = fieldInfo(name);\n      if (fi == null) {\n        // get a global number for this field\n        final int fieldNumber = globalFieldNumbers.addOrGet(name, preferredFieldNumber, docValues);\n        fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues, normType);\n      } else {\n        if (docValues != null) {\n          DocValues.Type currentDVType = fi.getDocValuesType();\n          if (currentDVType == null) {\n            fi.setDocValuesType(docValues);\n          } else if (currentDVType != docValues) {\n            throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + docValues + \" for field \\\"\" + name + \"\\\"\");\n          }\n        }\n        fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n        if (docValues != null) {\n          fi.setDocValuesType(docValues);\n        }\n        if (!fi.omitsNorms() && normType != null) {\n          fi.setNormValueType(normType);\n        }\n      }\n      return fi;\n    }\n\n","sourceOld":"    private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n        boolean storeTermVector,\n        boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normType) {\n      FieldInfo fi = fieldInfo(name);\n      if (fi == null) {\n        // get a global number for this field\n        final int fieldNumber = globalFieldNumbers.addOrGet(name, preferredFieldNumber);\n        fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues, normType);\n      } else {\n        fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n        if (docValues != null) {\n          fi.setDocValuesType(docValues);\n        }\n        if (!fi.omitsNorms() && normType != null) {\n          fi.setNormValueType(normType);\n        }\n      }\n      return fi;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30664cb1b9c7d634d5001fa13052e8adb962ea7c","date":1355178731,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":"    private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n        boolean storeTermVector,\n        boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normType) {\n      FieldInfo fi = fieldInfo(name);\n      if (fi == null) {\n        // get a global number for this field\n        final int fieldNumber = globalFieldNumbers.addOrGet(name, preferredFieldNumber, docValues);\n        fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues, normType);\n      } else {\n        fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n\n        if (docValues != null) {\n          DocValues.Type currentDVType = fi.getDocValuesType();\n          if (currentDVType == null) {\n            fi.setDocValuesType(docValues);\n          } else if (currentDVType != docValues) {\n            throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + docValues + \" for field \\\"\" + name + \"\\\"\");\n          }\n          fi.setDocValuesType(docValues);\n        }\n\n        if (!fi.omitsNorms() && normType != null) {\n          DocValues.Type currentDVType = fi.getNormType();\n          if (currentDVType == null) {\n            fi.setNormValueType(docValues);\n          } else if (currentDVType != normType) {\n            throw new IllegalArgumentException(\"cannot change Norm type from \" + currentDVType + \" to \" + normType + \" for field \\\"\" + name + \"\\\"\");\n          }\n          fi.setNormValueType(normType);\n        }\n      }\n      return fi;\n    }\n\n","sourceOld":"    private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n        boolean storeTermVector,\n        boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normType) {\n      FieldInfo fi = fieldInfo(name);\n      if (fi == null) {\n        // get a global number for this field\n        final int fieldNumber = globalFieldNumbers.addOrGet(name, preferredFieldNumber, docValues);\n        fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues, normType);\n      } else {\n        if (docValues != null) {\n          DocValues.Type currentDVType = fi.getDocValuesType();\n          if (currentDVType == null) {\n            fi.setDocValuesType(docValues);\n          } else if (currentDVType != docValues) {\n            throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + docValues + \" for field \\\"\" + name + \"\\\"\");\n          }\n        }\n        fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n        if (docValues != null) {\n          fi.setDocValuesType(docValues);\n        }\n        if (!fi.omitsNorms() && normType != null) {\n          fi.setNormValueType(normType);\n        }\n      }\n      return fi;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":null,"sourceOld":"    private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n        boolean storeTermVector,\n        boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normType) {\n      FieldInfo fi = fieldInfo(name);\n      if (fi == null) {\n        // get a global number for this field\n        final int fieldNumber = globalFieldNumbers.addOrGet(name, preferredFieldNumber, docValues);\n        fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues, normType);\n      } else {\n        fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n\n        if (docValues != null) {\n          DocValues.Type currentDVType = fi.getDocValuesType();\n          if (currentDVType == null) {\n            fi.setDocValuesType(docValues);\n          } else if (currentDVType != docValues) {\n            throw new IllegalArgumentException(\"cannot change DocValues type from \" + currentDVType + \" to \" + docValues + \" for field \\\"\" + name + \"\\\"\");\n          }\n          fi.setDocValuesType(docValues);\n        }\n\n        if (!fi.omitsNorms() && normType != null) {\n          DocValues.Type currentDVType = fi.getNormType();\n          if (currentDVType == null) {\n            fi.setNormValueType(docValues);\n          } else if (currentDVType != normType) {\n            throw new IllegalArgumentException(\"cannot change Norm type from \" + currentDVType + \" to \" + normType + \" for field \\\"\" + name + \"\\\"\");\n          }\n          fi.setNormValueType(normType);\n        }\n      }\n      return fi;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos.Builder#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":null,"sourceOld":"    private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n        boolean storeTermVector,\n        boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normType) {\n      FieldInfo fi = fieldInfo(name);\n      if (fi == null) {\n        // get a global number for this field\n        final int fieldNumber = globalFieldNumbers.addOrGet(name, preferredFieldNumber);\n        fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues, normType);\n      } else {\n        fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n        if (docValues != null) {\n          fi.setDocValuesType(docValues);\n        }\n        if (!fi.omitsNorms() && normType != null) {\n          fi.setNormValueType(normType);\n        }\n      }\n      return fi;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","19e1fda71fec5a2a0d0fd11eccb5b7cd50cfd059"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","0837ab0472feecb3a54260729d845f839e1cbd72"],"db170c1c8faa054c4e52af9aadc6cd12460af7a9":["a851824c09818632c94eba41e60ef5e72e323c8e"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19e1fda71fec5a2a0d0fd11eccb5b7cd50cfd059":["db170c1c8faa054c4e52af9aadc6cd12460af7a9"],"0837ab0472feecb3a54260729d845f839e1cbd72":["30664cb1b9c7d634d5001fa13052e8adb962ea7c"],"a851824c09818632c94eba41e60ef5e72e323c8e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30664cb1b9c7d634d5001fa13052e8adb962ea7c":["6e2893fd5349134af382d33ccc3d84840394c6c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["d4d69c535930b5cce125cff868d40f6373dc27d4","6e2893fd5349134af382d33ccc3d84840394c6c1"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"db170c1c8faa054c4e52af9aadc6cd12460af7a9":["19e1fda71fec5a2a0d0fd11eccb5b7cd50cfd059"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["30664cb1b9c7d634d5001fa13052e8adb962ea7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","a851824c09818632c94eba41e60ef5e72e323c8e"],"19e1fda71fec5a2a0d0fd11eccb5b7cd50cfd059":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a851824c09818632c94eba41e60ef5e72e323c8e":["db170c1c8faa054c4e52af9aadc6cd12460af7a9"],"30664cb1b9c7d634d5001fa13052e8adb962ea7c":["0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}