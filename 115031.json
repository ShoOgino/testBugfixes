{"path":"contrib/miscellaneous/src/test/org/apache/lucene/index/TestFieldNormModifier#testNormKiller().mjava","commits":[{"id":"7ae36bc5dae83f94e7da6e03d7f3b14ea175af4c","date":1166653933,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/miscellaneous/src/test/org/apache/lucene/index/TestFieldNormModifier#testNormKiller().mjava","pathOld":"/dev/null","sourceNew":"  public void testNormKiller() throws IOException {\n\n    IndexReader r = IndexReader.open(store);\n    byte[] oldNorms = r.norms(\"untokfield\");    \n    r.close();\n    \n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"untokfield\");\n\n    r = IndexReader.open(store);\n    byte[] newNorms = r.norms(\"untokfield\");\n    r.close();\n    assertFalse(Arrays.equals(oldNorms, newNorms));    \n\n    \n    // verify that we still get documents in the same order as originally\n    IndexSearcher searcher = new IndexSearcher(store);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should return the same score for all documents for this query\n    searcher.search(new TermQuery(new Term(\"untokfield\", \"20061212\")), new HitCollector() {\n      public final void collect(int doc, float score) {\n        scores[doc] = score;\n      }\n    });\n    searcher.close();\n    \n    lastScore = scores[0];\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" == \" + lastScore;\n      assertTrue(msg, scores[i] == lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/miscellaneous/src/test/org/apache/lucene/index/TestFieldNormModifier#testNormKiller().mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/index/TestFieldNormModifier#testNormKiller().mjava","sourceNew":"  public void testNormKiller() throws IOException {\n\n    IndexReader r = IndexReader.open(store);\n    byte[] oldNorms = r.norms(\"untokfield\");    \n    r.close();\n    \n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"untokfield\");\n\n    r = IndexReader.open(store);\n    byte[] newNorms = r.norms(\"untokfield\");\n    r.close();\n    assertFalse(Arrays.equals(oldNorms, newNorms));    \n\n    \n    // verify that we still get documents in the same order as originally\n    IndexSearcher searcher = new IndexSearcher(store);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should return the same score for all documents for this query\n    searcher.search(new TermQuery(new Term(\"untokfield\", \"20061212\")), new MultiReaderHitCollector() {\n      private int docBase = -1;\n      private int lastMax; \n      public final void collect(int doc, float score) {\n        scores[doc + docBase] = score;\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n    });\n    searcher.close();\n    \n    lastScore = scores[0];\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" == \" + lastScore;\n      assertTrue(msg, scores[i] == lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testNormKiller() throws IOException {\n\n    IndexReader r = IndexReader.open(store);\n    byte[] oldNorms = r.norms(\"untokfield\");    \n    r.close();\n    \n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"untokfield\");\n\n    r = IndexReader.open(store);\n    byte[] newNorms = r.norms(\"untokfield\");\n    r.close();\n    assertFalse(Arrays.equals(oldNorms, newNorms));    \n\n    \n    // verify that we still get documents in the same order as originally\n    IndexSearcher searcher = new IndexSearcher(store);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should return the same score for all documents for this query\n    searcher.search(new TermQuery(new Term(\"untokfield\", \"20061212\")), new HitCollector() {\n      public final void collect(int doc, float score) {\n        scores[doc] = score;\n      }\n    });\n    searcher.close();\n    \n    lastScore = scores[0];\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" == \" + lastScore;\n      assertTrue(msg, scores[i] == lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/miscellaneous/src/test/org/apache/lucene/index/TestFieldNormModifier#testNormKiller().mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/index/TestFieldNormModifier#testNormKiller().mjava","sourceNew":"  public void testNormKiller() throws IOException {\n\n    IndexReader r = IndexReader.open(store);\n    byte[] oldNorms = r.norms(\"untokfield\");    \n    r.close();\n    \n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"untokfield\");\n\n    r = IndexReader.open(store);\n    byte[] newNorms = r.norms(\"untokfield\");\n    r.close();\n    assertFalse(Arrays.equals(oldNorms, newNorms));    \n\n    \n    // verify that we still get documents in the same order as originally\n    IndexSearcher searcher = new IndexSearcher(store);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should return the same score for all documents for this query\n    searcher.search(new TermQuery(new Term(\"untokfield\", \"20061212\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n    });\n    searcher.close();\n    \n    lastScore = scores[0];\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" == \" + lastScore;\n      assertTrue(msg, scores[i] == lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testNormKiller() throws IOException {\n\n    IndexReader r = IndexReader.open(store);\n    byte[] oldNorms = r.norms(\"untokfield\");    \n    r.close();\n    \n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"untokfield\");\n\n    r = IndexReader.open(store);\n    byte[] newNorms = r.norms(\"untokfield\");\n    r.close();\n    assertFalse(Arrays.equals(oldNorms, newNorms));    \n\n    \n    // verify that we still get documents in the same order as originally\n    IndexSearcher searcher = new IndexSearcher(store);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should return the same score for all documents for this query\n    searcher.search(new TermQuery(new Term(\"untokfield\", \"20061212\")), new MultiReaderHitCollector() {\n      private int docBase = -1;\n      private int lastMax; \n      public final void collect(int doc, float score) {\n        scores[doc + docBase] = score;\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n    });\n    searcher.close();\n    \n    lastScore = scores[0];\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" == \" + lastScore;\n      assertTrue(msg, scores[i] == lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/miscellaneous/src/test/org/apache/lucene/index/TestFieldNormModifier#testNormKiller().mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/index/TestFieldNormModifier#testNormKiller().mjava","sourceNew":"  public void testNormKiller() throws IOException {\n\n    IndexReader r = IndexReader.open(store);\n    byte[] oldNorms = r.norms(\"untokfield\");    \n    r.close();\n    \n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"untokfield\");\n\n    r = IndexReader.open(store);\n    byte[] newNorms = r.norms(\"untokfield\");\n    r.close();\n    assertFalse(Arrays.equals(oldNorms, newNorms));    \n\n    \n    // verify that we still get documents in the same order as originally\n    IndexSearcher searcher = new IndexSearcher(store);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should return the same score for all documents for this query\n    searcher.search(new TermQuery(new Term(\"untokfield\", \"20061212\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = scores[0];\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" == \" + lastScore;\n      assertTrue(msg, scores[i] == lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testNormKiller() throws IOException {\n\n    IndexReader r = IndexReader.open(store);\n    byte[] oldNorms = r.norms(\"untokfield\");    \n    r.close();\n    \n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"untokfield\");\n\n    r = IndexReader.open(store);\n    byte[] newNorms = r.norms(\"untokfield\");\n    r.close();\n    assertFalse(Arrays.equals(oldNorms, newNorms));    \n\n    \n    // verify that we still get documents in the same order as originally\n    IndexSearcher searcher = new IndexSearcher(store);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should return the same score for all documents for this query\n    searcher.search(new TermQuery(new Term(\"untokfield\", \"20061212\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n    });\n    searcher.close();\n    \n    lastScore = scores[0];\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" == \" + lastScore;\n      assertTrue(msg, scores[i] == lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/index/TestFieldNormModifier#testNormKiller().mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/index/TestFieldNormModifier#testNormKiller().mjava","sourceNew":"  public void testNormKiller() throws IOException {\n\n    IndexReader r = IndexReader.open(store);\n    byte[] oldNorms = r.norms(\"untokfield\");    \n    r.close();\n    \n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"untokfield\");\n\n    r = IndexReader.open(store);\n    byte[] newNorms = r.norms(\"untokfield\");\n    r.close();\n    assertFalse(Arrays.equals(oldNorms, newNorms));    \n\n    \n    // verify that we still get documents in the same order as originally\n    IndexSearcher searcher = new IndexSearcher(store);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should return the same score for all documents for this query\n    searcher.search(new TermQuery(new Term(\"untokfield\", \"20061212\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = scores[0];\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" == \" + lastScore;\n      assertTrue(msg, scores[i] == lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testNormKiller() throws IOException {\n\n    IndexReader r = IndexReader.open(store);\n    byte[] oldNorms = r.norms(\"untokfield\");    \n    r.close();\n    \n    FieldNormModifier fnm = new FieldNormModifier(store, s);\n    fnm.reSetNorms(\"untokfield\");\n\n    r = IndexReader.open(store);\n    byte[] newNorms = r.norms(\"untokfield\");\n    r.close();\n    assertFalse(Arrays.equals(oldNorms, newNorms));    \n\n    \n    // verify that we still get documents in the same order as originally\n    IndexSearcher searcher = new IndexSearcher(store);\n    final float[] scores = new float[NUM_DOCS];\n    float lastScore = 0.0f;\n    \n    // default similarity should return the same score for all documents for this query\n    searcher.search(new TermQuery(new Term(\"untokfield\", \"20061212\")), new Collector() {\n      private int docBase = 0;\n      private Scorer scorer;\n      public final void collect(int doc) throws IOException {\n        scores[doc + docBase] = scorer.score();\n      }\n      public void setNextReader(IndexReader reader, int docBase) {\n        this.docBase = docBase;\n      }\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    searcher.close();\n    \n    lastScore = scores[0];\n    for (int i = 0; i < NUM_DOCS; i++) {\n      String msg = \"i=\" + i + \", \" + scores[i] + \" == \" + lastScore;\n      assertTrue(msg, scores[i] == lastScore);\n      //System.out.println(msg);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"7ae36bc5dae83f94e7da6e03d7f3b14ea175af4c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["052fac7830290bd38a04cddee1a121ee07656b56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"052fac7830290bd38a04cddee1a121ee07656b56":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"63bc3238545c6012bd44f5d294077997f236bc4e":["7ae36bc5dae83f94e7da6e03d7f3b14ea175af4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["052fac7830290bd38a04cddee1a121ee07656b56"],"7ae36bc5dae83f94e7da6e03d7f3b14ea175af4c":["63bc3238545c6012bd44f5d294077997f236bc4e"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7ae36bc5dae83f94e7da6e03d7f3b14ea175af4c"],"63bc3238545c6012bd44f5d294077997f236bc4e":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"052fac7830290bd38a04cddee1a121ee07656b56":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}