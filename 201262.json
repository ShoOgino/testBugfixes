{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","commits":[{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  private int readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int numFields = 0;\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      numFields++;\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        // trickier to validate more: because we use multiple entries for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumericEntry(info, meta));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(info, meta);\n        binaries.put(info.name, b);\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        readSortedField(info, meta);\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(info.name, ss);\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(info, meta);\n        } else if (ss.format == SORTED_SET_TABLE) {\n          readSortedSetFieldWithTable(info, meta);\n        } else if (ss.format == SORTED_SINGLE_VALUED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene70DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          readSortedField(info, meta);\n        } else {\n          throw new AssertionError();\n        }\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedNumerics.put(info.name, ss);\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene70DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          numerics.put(info.name, readNumericEntry(info, meta));\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene70DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          NumericEntry ordIndex = readNumericEntry(info, meta);\n          ordIndexes.put(info.name, ordIndex);\n        } else if (ss.format == SORTED_SET_TABLE) {\n          if (meta.readVInt() != info.number) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene70DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          NumericEntry n = readNumericEntry(info, meta);\n          ords.put(info.name, n);\n        } else if (ss.format == SORTED_SINGLE_VALUED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene70DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          numerics.put(info.name, readNumericEntry(info, meta));\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n    return numFields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  private int readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int numFields = 0;\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      numFields++;\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        // trickier to validate more: because we use multiple entries for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumericEntry(info, meta));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(info, meta);\n        binaries.put(info.name, b);\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        readSortedField(info, meta);\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(info.name, ss);\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(info, meta);\n        } else if (ss.format == SORTED_SET_TABLE) {\n          readSortedSetFieldWithTable(info, meta);\n        } else if (ss.format == SORTED_SINGLE_VALUED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene70DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          readSortedField(info, meta);\n        } else {\n          throw new AssertionError();\n        }\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedNumerics.put(info.name, ss);\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene70DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          numerics.put(info.name, readNumericEntry(info, meta));\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene70DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          NumericEntry ordIndex = readNumericEntry(info, meta);\n          ordIndexes.put(info.name, ordIndex);\n        } else if (ss.format == SORTED_SET_TABLE) {\n          if (meta.readVInt() != info.number) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene70DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          NumericEntry n = readNumericEntry(info, meta);\n          ords.put(info.name, n);\n        } else if (ss.format == SORTED_SINGLE_VALUED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene70DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          numerics.put(info.name, readNumericEntry(info, meta));\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n    return numFields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":null,"sourceOld":"  private int readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int numFields = 0;\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      numFields++;\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        // trickier to validate more: because we use multiple entries for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      byte type = meta.readByte();\n      if (type == Lucene70DocValuesFormat.NUMERIC) {\n        numerics.put(info.name, readNumericEntry(info, meta));\n      } else if (type == Lucene70DocValuesFormat.BINARY) {\n        BinaryEntry b = readBinaryEntry(info, meta);\n        binaries.put(info.name, b);\n      } else if (type == Lucene70DocValuesFormat.SORTED) {\n        readSortedField(info, meta);\n      } else if (type == Lucene70DocValuesFormat.SORTED_SET) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedSets.put(info.name, ss);\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          readSortedSetFieldWithAddresses(info, meta);\n        } else if (ss.format == SORTED_SET_TABLE) {\n          readSortedSetFieldWithTable(info, meta);\n        } else if (ss.format == SORTED_SINGLE_VALUED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene70DocValuesFormat.SORTED) {\n            throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          readSortedField(info, meta);\n        } else {\n          throw new AssertionError();\n        }\n      } else if (type == Lucene70DocValuesFormat.SORTED_NUMERIC) {\n        SortedSetEntry ss = readSortedSetEntry(meta);\n        sortedNumerics.put(info.name, ss);\n        if (ss.format == SORTED_WITH_ADDRESSES) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene70DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          numerics.put(info.name, readNumericEntry(info, meta));\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene70DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          NumericEntry ordIndex = readNumericEntry(info, meta);\n          ordIndexes.put(info.name, ordIndex);\n        } else if (ss.format == SORTED_SET_TABLE) {\n          if (meta.readVInt() != info.number) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene70DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          NumericEntry n = readNumericEntry(info, meta);\n          ords.put(info.name, n);\n        } else if (ss.format == SORTED_SINGLE_VALUED) {\n          if (meta.readVInt() != fieldNumber) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          if (meta.readByte() != Lucene70DocValuesFormat.NUMERIC) {\n            throw new CorruptIndexException(\"sortednumeric entry for field: \" + info.name + \" is corrupt\", meta);\n          }\n          numerics.put(info.name, readNumericEntry(info, meta));\n        } else {\n          throw new AssertionError();\n        }\n      } else {\n        throw new CorruptIndexException(\"invalid type: \" + type, meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n    return numFields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","084884d4602f4d1c7411eab29e897e349ce62675"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"084884d4602f4d1c7411eab29e897e349ce62675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1967bed916cc89da82a1c2085f27976da6d08cbd","084884d4602f4d1c7411eab29e897e349ce62675"],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}