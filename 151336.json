{"path":"lucene/core/src/java/org/apache/lucene/search/LegacyNumericRangeQuery#newLongRange(String,Long,Long,boolean,boolean).mjava","commits":[{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":2,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LegacyNumericRangeQuery#newLongRange(String,Long,Long,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#newLongRange(String,int,Long,Long,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>LegacyNumericRangeQuery</code>, that queries a <code>long</code>\n   * range using the default <code>precisionStep</code> {@link org.apache.lucene.util.LegacyNumericUtils#PRECISION_STEP_DEFAULT} (16).\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static LegacyNumericRangeQuery<Long> newLongRange(final String field,\n    Long min, Long max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new LegacyNumericRangeQuery<>(field, LegacyNumericUtils.PRECISION_STEP_DEFAULT, FieldType.LegacyNumericType.LONG, min, max, minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>NumericRangeQuery</code>, that queries a <code>long</code>\n   * range using the given <a href=\"#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeQuery<Long> newLongRange(final String field, final int precisionStep,\n    Long min, Long max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeQuery<>(field, precisionStep, NumericType.LONG, min, max, minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericRangeQuery#newLongRange(String,Long,Long,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LegacyNumericRangeQuery#newLongRange(String,Long,Long,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>LegacyNumericRangeQuery</code>, that queries a <code>long</code>\n   * range using the default <code>precisionStep</code> {@link org.apache.lucene.legacy.LegacyNumericUtils#PRECISION_STEP_DEFAULT} (16).\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static LegacyNumericRangeQuery<Long> newLongRange(final String field,\n    Long min, Long max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new LegacyNumericRangeQuery<>(field, LegacyNumericUtils.PRECISION_STEP_DEFAULT, LegacyNumericType.LONG, min, max, minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>LegacyNumericRangeQuery</code>, that queries a <code>long</code>\n   * range using the default <code>precisionStep</code> {@link org.apache.lucene.util.LegacyNumericUtils#PRECISION_STEP_DEFAULT} (16).\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static LegacyNumericRangeQuery<Long> newLongRange(final String field,\n    Long min, Long max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new LegacyNumericRangeQuery<>(field, LegacyNumericUtils.PRECISION_STEP_DEFAULT, FieldType.LegacyNumericType.LONG, min, max, minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericRangeQuery#newLongRange(String,Long,Long,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LegacyNumericRangeQuery#newLongRange(String,Long,Long,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>LegacyNumericRangeQuery</code>, that queries a <code>long</code>\n   * range using the default <code>precisionStep</code> {@link org.apache.lucene.legacy.LegacyNumericUtils#PRECISION_STEP_DEFAULT} (16).\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static LegacyNumericRangeQuery<Long> newLongRange(final String field,\n    Long min, Long max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new LegacyNumericRangeQuery<>(field, LegacyNumericUtils.PRECISION_STEP_DEFAULT, LegacyNumericType.LONG, min, max, minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>LegacyNumericRangeQuery</code>, that queries a <code>long</code>\n   * range using the default <code>precisionStep</code> {@link org.apache.lucene.util.LegacyNumericUtils#PRECISION_STEP_DEFAULT} (16).\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static LegacyNumericRangeQuery<Long> newLongRange(final String field,\n    Long min, Long max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new LegacyNumericRangeQuery<>(field, LegacyNumericUtils.PRECISION_STEP_DEFAULT, FieldType.LegacyNumericType.LONG, min, max, minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericRangeQuery#newLongRange(String,Long,Long,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LegacyNumericRangeQuery#newLongRange(String,Long,Long,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>LegacyNumericRangeQuery</code>, that queries a <code>long</code>\n   * range using the default <code>precisionStep</code> {@link org.apache.lucene.legacy.LegacyNumericUtils#PRECISION_STEP_DEFAULT} (16).\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static LegacyNumericRangeQuery<Long> newLongRange(final String field,\n    Long min, Long max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new LegacyNumericRangeQuery<>(field, LegacyNumericUtils.PRECISION_STEP_DEFAULT, LegacyNumericType.LONG, min, max, minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>LegacyNumericRangeQuery</code>, that queries a <code>long</code>\n   * range using the default <code>precisionStep</code> {@link org.apache.lucene.util.LegacyNumericUtils#PRECISION_STEP_DEFAULT} (16).\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static LegacyNumericRangeQuery<Long> newLongRange(final String field,\n    Long min, Long max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new LegacyNumericRangeQuery<>(field, LegacyNumericUtils.PRECISION_STEP_DEFAULT, FieldType.LegacyNumericType.LONG, min, max, minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/LegacyNumericRangeQuery#newLongRange(String,Long,Long,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Factory that creates a <code>LegacyNumericRangeQuery</code>, that queries a <code>long</code>\n   * range using the default <code>precisionStep</code> {@link org.apache.lucene.util.LegacyNumericUtils#PRECISION_STEP_DEFAULT} (16).\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static LegacyNumericRangeQuery<Long> newLongRange(final String field,\n    Long min, Long max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new LegacyNumericRangeQuery<>(field, LegacyNumericUtils.PRECISION_STEP_DEFAULT, FieldType.LegacyNumericType.LONG, min, max, minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["770342641f7b505eaa8dccdc666158bff2419109","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["770342641f7b505eaa8dccdc666158bff2419109"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["770342641f7b505eaa8dccdc666158bff2419109","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770342641f7b505eaa8dccdc666158bff2419109"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"770342641f7b505eaa8dccdc666158bff2419109":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}