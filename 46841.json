{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageBuffer#getSortedEntries(String).mjava","commits":[{"id":"5d43e216d757e2276d180eba8a192e300c4bfadb","date":1149717385,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageBuffer#getSortedEntries(String).mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * Returns all entries for the given feed id sorted by the update timestamp \n     * desc. \n     *  \n     * @param feedId - \n     *            the feed id \n     * @return a {@link List} of all {@link StorageEntryWrapper} object buffered \n     *         in this buffer or an empty list if not entry has been buffered \n     *         for the given feed \n     */ \n    public List<StorageEntryWrapper> getSortedEntries(String feedId) { \n        this.readLock.lock(); \n        try { \n            if (!this.bufferMap.containsKey(feedId)) \n                return null; \n            Map<String, StorageEntryWrapper> tempMap = this.bufferMap \n                    .get(feedId); \n            if (tempMap == null) \n                return null; \n            Collection<StorageEntryWrapper> col = tempMap.values(); \n            List<StorageEntryWrapper> returnList = new ArrayList<StorageEntryWrapper>( \n                    col); \n            Collections.sort(returnList); \n            return returnList; \n \n        } finally { \n            this.readLock.unlock(); \n        } \n \n    } \n\n","sourceOld":null,"bugFix":null,"bugIntro":["02a7f04a7293ea604e17892ba0bded7341adf3af"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02a7f04a7293ea604e17892ba0bded7341adf3af","date":1151695892,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageBuffer#getSortedEntries(String).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageBuffer#getSortedEntries(String).mjava","sourceNew":"\t/**\n\t * Returns all entries for the given feed id sorted by the update timestamp\n\t * desc.\n\t * \n\t * @param feedId -\n\t *            the feed id\n\t * @return a {@link List} of all {@link StorageEntryWrapper} object buffered\n\t *         in this buffer or an empty list if not entry has been buffered\n\t *         for the given feed\n\t */\n\tpublic List<StorageEntryWrapper> getSortedEntries(String feedId) {\n\t\tthis.readLock.lock();\n\t\ttry {\n\t\t\tif (!this.bufferMap.containsKey(feedId))\n\t\t\t\treturn null;\n\t\t\tMap<String, StorageEntryWrapper> tempMap = this.bufferMap\n\t\t\t\t\t.get(feedId);\n\t\t\tif (tempMap == null)\n\t\t\t\treturn null;\n\t\t\tCollection<StorageEntryWrapper> col = tempMap.values();\n\t\t\tList<StorageEntryWrapper> returnList = new ArrayList<StorageEntryWrapper>(\n\t\t\t\t\tcol);\n\t\t\tCollections.sort(returnList);\n\t\t\treturn returnList;\n\n\t\t} finally {\n\t\t\tthis.readLock.unlock();\n\t\t}\n\n\t}\n\n","sourceOld":"    /** \n     * Returns all entries for the given feed id sorted by the update timestamp \n     * desc. \n     *  \n     * @param feedId - \n     *            the feed id \n     * @return a {@link List} of all {@link StorageEntryWrapper} object buffered \n     *         in this buffer or an empty list if not entry has been buffered \n     *         for the given feed \n     */ \n    public List<StorageEntryWrapper> getSortedEntries(String feedId) { \n        this.readLock.lock(); \n        try { \n            if (!this.bufferMap.containsKey(feedId)) \n                return null; \n            Map<String, StorageEntryWrapper> tempMap = this.bufferMap \n                    .get(feedId); \n            if (tempMap == null) \n                return null; \n            Collection<StorageEntryWrapper> col = tempMap.values(); \n            List<StorageEntryWrapper> returnList = new ArrayList<StorageEntryWrapper>( \n                    col); \n            Collections.sort(returnList); \n            return returnList; \n \n        } finally { \n            this.readLock.unlock(); \n        } \n \n    } \n\n","bugFix":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageBuffer#getSortedEntries(String).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageBuffer#getSortedEntries(String).mjava","sourceNew":"    /**\n     * Returns all entries for the given feed id sorted by the update timestamp\n     * desc.\n     * \n     * @param feedId -\n     *            the feed id\n     * @return a {@link List} of all {@link StorageEntryWrapper} object buffered\n     *         in this buffer or an empty list if not entry has been buffered\n     *         for the given feed\n     */\n    public List<StorageEntryWrapper> getSortedEntries(String feedId) {\n        this.readLock.lock();\n        try {\n            if (!this.bufferMap.containsKey(feedId))\n                return null;\n            Map<String, StorageEntryWrapper> tempMap = this.bufferMap\n                    .get(feedId);\n            if (tempMap == null)\n                return null;\n            Collection<StorageEntryWrapper> col = tempMap.values();\n            List<StorageEntryWrapper> returnList = new ArrayList<StorageEntryWrapper>(\n                    col);\n            Collections.sort(returnList);\n            return returnList;\n\n        } finally {\n            this.readLock.unlock();\n        }\n\n    }\n\n","sourceOld":"\t/**\n\t * Returns all entries for the given feed id sorted by the update timestamp\n\t * desc.\n\t * \n\t * @param feedId -\n\t *            the feed id\n\t * @return a {@link List} of all {@link StorageEntryWrapper} object buffered\n\t *         in this buffer or an empty list if not entry has been buffered\n\t *         for the given feed\n\t */\n\tpublic List<StorageEntryWrapper> getSortedEntries(String feedId) {\n\t\tthis.readLock.lock();\n\t\ttry {\n\t\t\tif (!this.bufferMap.containsKey(feedId))\n\t\t\t\treturn null;\n\t\t\tMap<String, StorageEntryWrapper> tempMap = this.bufferMap\n\t\t\t\t\t.get(feedId);\n\t\t\tif (tempMap == null)\n\t\t\t\treturn null;\n\t\t\tCollection<StorageEntryWrapper> col = tempMap.values();\n\t\t\tList<StorageEntryWrapper> returnList = new ArrayList<StorageEntryWrapper>(\n\t\t\t\t\tcol);\n\t\t\tCollections.sort(returnList);\n\t\t\treturn returnList;\n\n\t\t} finally {\n\t\t\tthis.readLock.unlock();\n\t\t}\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageBuffer#getSortedEntries(String).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageBuffer#getSortedEntries(String).mjava","sourceNew":"    /**\n     * Returns all entries for the given feed id sorted by the update timestamp\n     * desc.\n     * \n     * @param feedId -\n     *            the feed id\n     * @return a {@link List} of all {@link StorageEntryWrapper} object buffered\n     *         in this buffer or an empty list if not entry has been buffered\n     *         for the given feed\n     */\n    public List<StorageEntryWrapper> getSortedEntries(String feedId) {\n        this.readLock.lock();\n        try {\n            if (!this.bufferMap.containsKey(feedId))\n                return null;\n            Map<String, StorageEntryWrapper> tempMap = this.bufferMap\n                    .get(feedId);\n            if (tempMap == null)\n                return null;\n            Collection<StorageEntryWrapper> col = tempMap.values();\n            List<StorageEntryWrapper> returnList = new ArrayList<StorageEntryWrapper>(\n                    col);\n            Collections.sort(returnList);\n            return returnList;\n\n        } finally {\n            this.readLock.unlock();\n        }\n\n    }\n\n","sourceOld":"    /**\n     * Returns all entries for the given feed id sorted by the update timestamp\n     * desc.\n     * \n     * @param feedId -\n     *            the feed id\n     * @return a {@link List} of all {@link StorageEntryWrapper} object buffered\n     *         in this buffer or an empty list if not entry has been buffered\n     *         for the given feed\n     */\n    public List<StorageEntryWrapper> getSortedEntries(String feedId) {\n        this.readLock.lock();\n        try {\n            if (!this.bufferMap.containsKey(feedId))\n                return null;\n            Map<String, StorageEntryWrapper> tempMap = this.bufferMap\n                    .get(feedId);\n            if (tempMap == null)\n                return null;\n            Collection<StorageEntryWrapper> col = tempMap.values();\n            List<StorageEntryWrapper> returnList = new ArrayList<StorageEntryWrapper>(\n                    col);\n            Collections.sort(returnList);\n            return returnList;\n\n        } finally {\n            this.readLock.unlock();\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"02a7f04a7293ea604e17892ba0bded7341adf3af":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["02a7f04a7293ea604e17892ba0bded7341adf3af"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"]},"commit2Childs":{"02a7f04a7293ea604e17892ba0bded7341adf3af":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["02a7f04a7293ea604e17892ba0bded7341adf3af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}