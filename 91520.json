{"path":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#checkCommonSuggestions(IndexReader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#checkCommonSuggestions(IndexReader).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#checkCommonSuggestions(IndexReader).mjava","sourceNew":"  private void checkCommonSuggestions(IndexReader r) throws IOException {\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    if (similar.length > 0) {\n      assertFalse(similar[0].equals(\"five\")); // don't suggest a word for itself\n    }\n    \n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(similar[0], \"five\");\n    \n    //  test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\",\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\",\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n  }\n\n","sourceOld":"  private void checkCommonSuggestions(IndexReader r) throws IOException {\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    if (similar.length > 0) {\n      assertFalse(similar[0].equals(\"five\")); // don't suggest a word for itself\n    }\n    \n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(similar[0], \"five\");\n    \n    //  test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\",\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\",\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#checkCommonSuggestions(IndexReader).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#checkCommonSuggestions(IndexReader).mjava","sourceNew":"  private void checkCommonSuggestions(IndexReader r) throws IOException {\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    if (similar.length > 0) {\n      assertFalse(similar[0].equals(\"five\")); // don't suggest a word for itself\n    }\n    \n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(similar[0], \"five\");\n    \n    //  test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\",\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\",\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n  }\n\n","sourceOld":"  private void checkCommonSuggestions(IndexReader r) throws IOException {\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    if (similar.length > 0) {\n      assertFalse(similar[0].equals(\"five\")); // don't suggest a word for itself\n    }\n    \n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(similar[0], \"five\");\n    \n    //  test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\",\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\",\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#checkCommonSuggestions(IndexReader).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestSpellChecker#checkCommonSuggestions(IndexReader).mjava","sourceNew":"  private void checkCommonSuggestions(IndexReader r) throws IOException {\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    if (similar.length > 0) {\n      assertFalse(similar[0].equals(\"five\")); // don't suggest a word for itself\n    }\n    \n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(similar[0], \"five\");\n    \n    //  test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\",\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\",\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n  }\n\n","sourceOld":"  private void checkCommonSuggestions(IndexReader r) throws IOException {\n    String[] similar = spellChecker.suggestSimilar(\"fvie\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"five\", 2);\n    if (similar.length > 0) {\n      assertFalse(similar[0].equals(\"five\")); // don't suggest a word for itself\n    }\n    \n    similar = spellChecker.suggestSimilar(\"fiv\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    similar = spellChecker.suggestSimilar(\"fives\", 2);\n    assertTrue(similar.length > 0);\n    assertEquals(similar[0], \"five\");\n    \n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(\"fie\", 2);\n    assertEquals(similar[0], \"five\");\n    \n    //  test restraint to a field\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field1\",\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(0, similar.length); // there isn't the term thousand in the field field1\n\n    similar = spellChecker.suggestSimilar(\"tousand\", 10, r, \"field2\",\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(1, similar.length); // there is the term thousand in the field field2\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}