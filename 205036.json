{"path":"lucene/core/src/java/org/apache/lucene/store/DataInput#readLELongs(long[],int,int).mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataInput#readLELongs(long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Read a specified number of longs with the little endian byte order.\n   * <p>This method can be used to read longs whose bytes have been\n   * {@link Long#reverseBytes reversed} at write time:\n   * <pre class=\"prettyprint\">\n   * for (long l : longs) {\n   *   output.writeLong(Long.reverseBytes(l));\n   * }\n   * </pre>\n   * @lucene.experimental\n   */\n  // TODO: LUCENE-9047: Make the entire DataInput/DataOutput API little endian\n  // Then this would just be `readLongs`?\n  public void readLELongs(long[] dst, int offset, int length) throws IOException {\n    Objects.checkFromIndexSize(offset, length, dst.length);\n    for (int i = 0; i < length; ++i) {\n      dst[offset + i] = Long.reverseBytes(readLong());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}