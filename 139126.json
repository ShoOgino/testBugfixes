{"path":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","commits":[{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"    void parseCommitOptions(CommitUpdateCommand cmd ) throws IOException\n    {\n      assertNextEvent( JSONParser.OBJECT_START );\n      final Map<String,Object> map = (Map)ObjectBuilder.getVal(parser);\n  \n      // SolrParams currently expects string values...\n      SolrParams p = new SolrParams() {\n        @Override\n        public String get(String param) {\n          Object o = map.get(param);\n          return o == null ? null : o.toString();\n        }\n  \n        @Override\n        public String[] getParams(String param) {\n          return new String[]{get(param)};\n        }\n  \n        @Override\n        public Iterator<String> getParameterNamesIterator() {\n          return map.keySet().iterator();\n        }\n      };\n  \n      RequestHandlerUtils.validateCommitParams(p);\n      p = SolrParams.wrapDefaults(p, req.getParams());   // default to the normal request params for commit options\n      RequestHandlerUtils.updateCommit(cmd, p);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab10d7c14ce9f8db61956611a57a5a377362a633","date":1413903184,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","sourceNew":"    void parseCommitOptions(CommitUpdateCommand cmd ) throws IOException\n    {\n      assertNextEvent( JSONParser.OBJECT_START );\n      final Map<String,Object> map = (Map)ObjectBuilder.getVal(parser);\n\n      // SolrParams currently expects string values...\n      SolrParams p = new SolrParams() {\n        @Override\n        public String get(String param) {\n          Object o = map.get(param);\n          return o == null ? null : o.toString();\n        }\n\n        @Override\n        public String[] getParams(String param) {\n          return new String[]{get(param)};\n        }\n\n        @Override\n        public Iterator<String> getParameterNamesIterator() {\n          return map.keySet().iterator();\n        }\n      };\n\n      RequestHandlerUtils.validateCommitParams(p);\n      p = SolrParams.wrapDefaults(p, req.getParams());   // default to the normal request params for commit options\n      RequestHandlerUtils.updateCommit(cmd, p);\n    }\n\n","sourceOld":"    void parseCommitOptions(CommitUpdateCommand cmd ) throws IOException\n    {\n      assertNextEvent( JSONParser.OBJECT_START );\n      final Map<String,Object> map = (Map)ObjectBuilder.getVal(parser);\n  \n      // SolrParams currently expects string values...\n      SolrParams p = new SolrParams() {\n        @Override\n        public String get(String param) {\n          Object o = map.get(param);\n          return o == null ? null : o.toString();\n        }\n  \n        @Override\n        public String[] getParams(String param) {\n          return new String[]{get(param)};\n        }\n  \n        @Override\n        public Iterator<String> getParameterNamesIterator() {\n          return map.keySet().iterator();\n        }\n      };\n  \n      RequestHandlerUtils.validateCommitParams(p);\n      p = SolrParams.wrapDefaults(p, req.getParams());   // default to the normal request params for commit options\n      RequestHandlerUtils.updateCommit(cmd, p);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","sourceNew":"    void parseCommitOptions(CommitUpdateCommand cmd ) throws IOException\n    {\n      assertNextEvent( JSONParser.OBJECT_START );\n      final Map<String,Object> map = (Map)ObjectBuilder.getVal(parser);\n\n      // SolrParams currently expects string values...\n      SolrParams p = new SolrParams() {\n        @Override\n        public String get(String param) {\n          Object o = map.get(param);\n          return o == null ? null : o.toString();\n        }\n\n        @Override\n        public String[] getParams(String param) {\n          return new String[]{get(param)};\n        }\n\n        @Override\n        public Iterator<String> getParameterNamesIterator() {\n          return map.keySet().iterator();\n        }\n      };\n\n      RequestHandlerUtils.validateCommitParams(p);\n      p = SolrParams.wrapDefaults(p, req.getParams());   // default to the normal request params for commit options\n      RequestHandlerUtils.updateCommit(cmd, p);\n    }\n\n","sourceOld":"    void parseCommitOptions(CommitUpdateCommand cmd ) throws IOException\n    {\n      assertNextEvent( JSONParser.OBJECT_START );\n      final Map<String,Object> map = (Map)ObjectBuilder.getVal(parser);\n  \n      // SolrParams currently expects string values...\n      SolrParams p = new SolrParams() {\n        @Override\n        public String get(String param) {\n          Object o = map.get(param);\n          return o == null ? null : o.toString();\n        }\n  \n        @Override\n        public String[] getParams(String param) {\n          return new String[]{get(param)};\n        }\n  \n        @Override\n        public Iterator<String> getParameterNamesIterator() {\n          return map.keySet().iterator();\n        }\n      };\n  \n      RequestHandlerUtils.validateCommitParams(p);\n      p = SolrParams.wrapDefaults(p, req.getParams());   // default to the normal request params for commit options\n      RequestHandlerUtils.updateCommit(cmd, p);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f5f8e831e266692b649e39dad7a64f525aa6d21","date":1427506910,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","sourceNew":"    void parseCommitOptions(CommitUpdateCommand cmd) throws IOException {\n      assertNextEvent(JSONParser.OBJECT_START);\n      final Map<String, Object> map = (Map) ObjectBuilder.getVal(parser);\n\n      // SolrParams currently expects string values...\n      SolrParams p = new SolrParams() {\n        @Override\n        public String get(String param) {\n          Object o = map.get(param);\n          return o == null ? null : o.toString();\n        }\n\n        @Override\n        public String[] getParams(String param) {\n          return new String[]{get(param)};\n        }\n\n        @Override\n        public Iterator<String> getParameterNamesIterator() {\n          return map.keySet().iterator();\n        }\n      };\n\n      RequestHandlerUtils.validateCommitParams(p);\n      p = SolrParams.wrapDefaults(p, req.getParams());   // default to the normal request params for commit options\n      RequestHandlerUtils.updateCommit(cmd, p);\n    }\n\n","sourceOld":"    void parseCommitOptions(CommitUpdateCommand cmd ) throws IOException\n    {\n      assertNextEvent( JSONParser.OBJECT_START );\n      final Map<String,Object> map = (Map)ObjectBuilder.getVal(parser);\n\n      // SolrParams currently expects string values...\n      SolrParams p = new SolrParams() {\n        @Override\n        public String get(String param) {\n          Object o = map.get(param);\n          return o == null ? null : o.toString();\n        }\n\n        @Override\n        public String[] getParams(String param) {\n          return new String[]{get(param)};\n        }\n\n        @Override\n        public Iterator<String> getParameterNamesIterator() {\n          return map.keySet().iterator();\n        }\n      };\n\n      RequestHandlerUtils.validateCommitParams(p);\n      p = SolrParams.wrapDefaults(p, req.getParams());   // default to the normal request params for commit options\n      RequestHandlerUtils.updateCommit(cmd, p);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","sourceNew":"    void parseCommitOptions(CommitUpdateCommand cmd) throws IOException {\n      assertNextEvent(JSONParser.OBJECT_START);\n      final Map<String, Object> map = (Map) ObjectBuilder.getVal(parser);\n\n      // SolrParams currently expects string values...\n      SolrParams p = new SolrParams() {\n        @Override\n        public String get(String param) {\n          Object o = map.get(param);\n          return o == null ? null : o.toString();\n        }\n\n        @Override\n        public String[] getParams(String param) {\n          return new String[]{get(param)};\n        }\n\n        @Override\n        public Iterator<String> getParameterNamesIterator() {\n          return map.keySet().iterator();\n        }\n      };\n\n      RequestHandlerUtils.validateCommitParams(p);\n      p = SolrParams.wrapDefaults(p, req.getParams());   // default to the normal request params for commit options\n      RequestHandlerUtils.updateCommit(cmd, p);\n    }\n\n","sourceOld":"    void parseCommitOptions(CommitUpdateCommand cmd ) throws IOException\n    {\n      assertNextEvent( JSONParser.OBJECT_START );\n      final Map<String,Object> map = (Map)ObjectBuilder.getVal(parser);\n\n      // SolrParams currently expects string values...\n      SolrParams p = new SolrParams() {\n        @Override\n        public String get(String param) {\n          Object o = map.get(param);\n          return o == null ? null : o.toString();\n        }\n\n        @Override\n        public String[] getParams(String param) {\n          return new String[]{get(param)};\n        }\n\n        @Override\n        public Iterator<String> getParameterNamesIterator() {\n          return map.keySet().iterator();\n        }\n      };\n\n      RequestHandlerUtils.validateCommitParams(p);\n      p = SolrParams.wrapDefaults(p, req.getParams());   // default to the normal request params for commit options\n      RequestHandlerUtils.updateCommit(cmd, p);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","sourceNew":"    void parseCommitOptions(CommitUpdateCommand cmd) throws IOException {\n      assertNextEvent(JSONParser.OBJECT_START);\n      @SuppressWarnings({\"unchecked\"})\n      final Map<String, Object> map = (Map) ObjectBuilder.getVal(parser);\n\n      // SolrParams currently expects string values...\n      SolrParams p = new SolrParams() {\n        @Override\n        public String get(String param) {\n          Object o = map.get(param);\n          return o == null ? null : o.toString();\n        }\n\n        @Override\n        public String[] getParams(String param) {\n          return new String[]{get(param)};\n        }\n\n        @Override\n        public Iterator<String> getParameterNamesIterator() {\n          return map.keySet().iterator();\n        }\n      };\n\n      RequestHandlerUtils.validateCommitParams(p);\n      p = SolrParams.wrapDefaults(p, req.getParams());   // default to the normal request params for commit options\n      RequestHandlerUtils.updateCommit(cmd, p);\n    }\n\n","sourceOld":"    void parseCommitOptions(CommitUpdateCommand cmd) throws IOException {\n      assertNextEvent(JSONParser.OBJECT_START);\n      final Map<String, Object> map = (Map) ObjectBuilder.getVal(parser);\n\n      // SolrParams currently expects string values...\n      SolrParams p = new SolrParams() {\n        @Override\n        public String get(String param) {\n          Object o = map.get(param);\n          return o == null ? null : o.toString();\n        }\n\n        @Override\n        public String[] getParams(String param) {\n          return new String[]{get(param)};\n        }\n\n        @Override\n        public Iterator<String> getParameterNamesIterator() {\n          return map.keySet().iterator();\n        }\n      };\n\n      RequestHandlerUtils.validateCommitParams(p);\n      p = SolrParams.wrapDefaults(p, req.getParams());   // default to the normal request params for commit options\n      RequestHandlerUtils.updateCommit(cmd, p);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ab10d7c14ce9f8db61956611a57a5a377362a633","6f5f8e831e266692b649e39dad7a64f525aa6d21"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["042e4d934397657ba04c82b46cc5665076bc5c58","ab10d7c14ce9f8db61956611a57a5a377362a633"],"6f5f8e831e266692b649e39dad7a64f525aa6d21":["ab10d7c14ce9f8db61956611a57a5a377362a633"],"ab10d7c14ce9f8db61956611a57a5a377362a633":["042e4d934397657ba04c82b46cc5665076bc5c58"],"042e4d934397657ba04c82b46cc5665076bc5c58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["6f5f8e831e266692b649e39dad7a64f525aa6d21"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"6f5f8e831e266692b649e39dad7a64f525aa6d21":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"ab10d7c14ce9f8db61956611a57a5a377362a633":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0a22eafe3f72a4c2945eaad9547e6c78816978f4","6f5f8e831e266692b649e39dad7a64f525aa6d21"],"042e4d934397657ba04c82b46cc5665076bc5c58":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","ab10d7c14ce9f8db61956611a57a5a377362a633"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["042e4d934397657ba04c82b46cc5665076bc5c58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}