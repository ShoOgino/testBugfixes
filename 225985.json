{"path":"lucene/src/test/org/apache/lucene/index/TestFlexExternalReader#testExternalReader().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlexExternalReader#testExternalReader().mjava","pathOld":"/dev/null","sourceNew":"  public void testExternalReader() throws Exception {\n    Directory d = new MockRAMDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(7);\n    Document doc = new Document();\n    doc.add(new Field(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<DOC_COUNT;i++) {\n      w.addDocument(doc);\n    }\n\n    IndexReader r = new FlexTestUtil.ForcedExternalReader(w.getReader());\n\n    BytesRef field1Term = new BytesRef(\"field1\");\n    BytesRef field2Term = new BytesRef(\"field2\");\n\n    assertEquals(DOC_COUNT, r.maxDoc());\n    assertEquals(DOC_COUNT, r.numDocs());\n    assertEquals(DOC_COUNT, r.docFreq(new Term(\"field1\", \"field1\")));\n    assertEquals(DOC_COUNT, r.docFreq(\"field1\", field1Term));\n\n    Fields fields = r.fields();\n    Terms terms = fields.terms(\"field1\");\n    TermsEnum termsEnum = terms.iterator();\n    assertEquals(TermsEnum.SeekStatus.FOUND, termsEnum.seek(field1Term));\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, termsEnum.seek(field2Term));\n    assertTrue(new BytesRef(\"is\").bytesEquals(termsEnum.term()));\n\n    terms = fields.terms(\"field2\");\n    termsEnum = terms.iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, termsEnum.seek(field1Term));\n    assertTrue(termsEnum.term().bytesEquals(field2Term));\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, termsEnum.seek(field2Term));\n\n    termsEnum = fields.terms(\"field3\").iterator();\n    assertEquals(TermsEnum.SeekStatus.END, termsEnum.seek(new BytesRef(\"bbb\")));\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, termsEnum.seek(new BytesRef(\"aaa\")));\n    assertNull(termsEnum.next());\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlexExternalReader#testExternalReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlexExternalReader#testExternalReader().mjava","sourceNew":"  public void testExternalReader() throws Exception {\n    Directory d = new MockRAMDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(7);\n    Document doc = new Document();\n    doc.add(new Field(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<DOC_COUNT;i++) {\n      w.addDocument(doc);\n    }\n\n    IndexReader r = new FlexTestUtil.ForcedExternalReader(w.getReader());\n\n    BytesRef field1Term = new BytesRef(\"field1\");\n    BytesRef field2Term = new BytesRef(\"field2\");\n\n    assertEquals(DOC_COUNT, r.maxDoc());\n    assertEquals(DOC_COUNT, r.numDocs());\n    assertEquals(DOC_COUNT, r.docFreq(new Term(\"field1\", \"field1\")));\n    assertEquals(DOC_COUNT, r.docFreq(\"field1\", field1Term));\n\n    Fields fields = r.fields();\n    Terms terms = fields.terms(\"field1\");\n    TermsEnum termsEnum = terms.iterator();\n    assertEquals(TermsEnum.SeekStatus.FOUND, termsEnum.seek(field1Term));\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, termsEnum.seek(field2Term));\n    assertTrue(new BytesRef(\"is\").bytesEquals(termsEnum.term()));\n\n    terms = fields.terms(\"field2\");\n    termsEnum = terms.iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, termsEnum.seek(field1Term));\n    assertTrue(termsEnum.term().bytesEquals(field2Term));\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, termsEnum.seek(field2Term));\n\n    termsEnum = fields.terms(\"field3\").iterator();\n    assertEquals(TermsEnum.SeekStatus.END, termsEnum.seek(new BytesRef(\"bbb\")));\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, termsEnum.seek(new BytesRef(\"aaa\")));\n    assertNull(termsEnum.next());\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testExternalReader() throws Exception {\n    Directory d = new MockRAMDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(7);\n    Document doc = new Document();\n    doc.add(new Field(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<DOC_COUNT;i++) {\n      w.addDocument(doc);\n    }\n\n    IndexReader r = new FlexTestUtil.ForcedExternalReader(w.getReader());\n\n    BytesRef field1Term = new BytesRef(\"field1\");\n    BytesRef field2Term = new BytesRef(\"field2\");\n\n    assertEquals(DOC_COUNT, r.maxDoc());\n    assertEquals(DOC_COUNT, r.numDocs());\n    assertEquals(DOC_COUNT, r.docFreq(new Term(\"field1\", \"field1\")));\n    assertEquals(DOC_COUNT, r.docFreq(\"field1\", field1Term));\n\n    Fields fields = r.fields();\n    Terms terms = fields.terms(\"field1\");\n    TermsEnum termsEnum = terms.iterator();\n    assertEquals(TermsEnum.SeekStatus.FOUND, termsEnum.seek(field1Term));\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, termsEnum.seek(field2Term));\n    assertTrue(new BytesRef(\"is\").bytesEquals(termsEnum.term()));\n\n    terms = fields.terms(\"field2\");\n    termsEnum = terms.iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, termsEnum.seek(field1Term));\n    assertTrue(termsEnum.term().bytesEquals(field2Term));\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, termsEnum.seek(field2Term));\n\n    termsEnum = fields.terms(\"field3\").iterator();\n    assertEquals(TermsEnum.SeekStatus.END, termsEnum.seek(new BytesRef(\"bbb\")));\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, termsEnum.seek(new BytesRef(\"aaa\")));\n    assertNull(termsEnum.next());\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20cf910d1892b0a0ff8543ec4551b6df2dc3de40","date":1275769896,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlexExternalReader#testExternalReader().mjava","sourceNew":null,"sourceOld":"  public void testExternalReader() throws Exception {\n    Directory d = new MockRAMDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(7);\n    Document doc = new Document();\n    doc.add(new Field(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n    doc.add(new Field(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int i=0;i<DOC_COUNT;i++) {\n      w.addDocument(doc);\n    }\n\n    IndexReader r = new FlexTestUtil.ForcedExternalReader(w.getReader());\n\n    BytesRef field1Term = new BytesRef(\"field1\");\n    BytesRef field2Term = new BytesRef(\"field2\");\n\n    assertEquals(DOC_COUNT, r.maxDoc());\n    assertEquals(DOC_COUNT, r.numDocs());\n    assertEquals(DOC_COUNT, r.docFreq(new Term(\"field1\", \"field1\")));\n    assertEquals(DOC_COUNT, r.docFreq(\"field1\", field1Term));\n\n    Fields fields = r.fields();\n    Terms terms = fields.terms(\"field1\");\n    TermsEnum termsEnum = terms.iterator();\n    assertEquals(TermsEnum.SeekStatus.FOUND, termsEnum.seek(field1Term));\n\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, termsEnum.seek(field2Term));\n    assertTrue(new BytesRef(\"is\").bytesEquals(termsEnum.term()));\n\n    terms = fields.terms(\"field2\");\n    termsEnum = terms.iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, termsEnum.seek(field1Term));\n    assertTrue(termsEnum.term().bytesEquals(field2Term));\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, termsEnum.seek(field2Term));\n\n    termsEnum = fields.terms(\"field3\").iterator();\n    assertEquals(TermsEnum.SeekStatus.END, termsEnum.seek(new BytesRef(\"bbb\")));\n\n    assertEquals(TermsEnum.SeekStatus.FOUND, termsEnum.seek(new BytesRef(\"aaa\")));\n    assertNull(termsEnum.next());\n\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20cf910d1892b0a0ff8543ec4551b6df2dc3de40":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20cf910d1892b0a0ff8543ec4551b6df2dc3de40"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"d572389229127c297dd1fa5ce4758e1cec41e799":["20cf910d1892b0a0ff8543ec4551b6df2dc3de40"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["d572389229127c297dd1fa5ce4758e1cec41e799"],"20cf910d1892b0a0ff8543ec4551b6df2dc3de40":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}