{"path":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,LeafReaderContext,IndexReader.CacheHelper).mjava","commits":[{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,LeafReaderContext,IndexReader.CacheHelper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,LeafReaderContext).mjava","sourceNew":"  DocIdSet get(Query key, LeafReaderContext context, IndexReader.CacheHelper cacheHelper) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n    final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","sourceOld":"  DocIdSet get(Query key, LeafReaderContext context) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n    final Object readerKey = context.reader().getCoreCacheKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4e703a107dabba92e897b4405f4a69f135565a2","date":1567669029,"type":5,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,IndexReader.CacheHelper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#get(Query,LeafReaderContext,IndexReader.CacheHelper).mjava","sourceNew":"  DocIdSet get(Query key, IndexReader.CacheHelper cacheHelper) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n    final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","sourceOld":"  DocIdSet get(Query key, LeafReaderContext context, IndexReader.CacheHelper cacheHelper) {\n    assert lock.isHeldByCurrentThread();\n    assert key instanceof BoostQuery == false;\n    assert key instanceof ConstantScoreQuery == false;\n    final IndexReader.CacheKey readerKey = cacheHelper.getKey();\n    final LeafCache leafCache = cache.get(readerKey);\n    if (leafCache == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    // this get call moves the query to the most-recently-used position\n    final Query singleton = uniqueQueries.get(key);\n    if (singleton == null) {\n      onMiss(readerKey, key);\n      return null;\n    }\n    final DocIdSet cached = leafCache.get(singleton);\n    if (cached == null) {\n      onMiss(readerKey, singleton);\n    } else {\n      onHit(readerKey, singleton);\n    }\n    return cached;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4e703a107dabba92e897b4405f4a69f135565a2":["d211216c83f01894810543d1c107160a9ae3650b"],"d211216c83f01894810543d1c107160a9ae3650b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4e703a107dabba92e897b4405f4a69f135565a2"]},"commit2Childs":{"d4e703a107dabba92e897b4405f4a69f135565a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d211216c83f01894810543d1c107160a9ae3650b":["d4e703a107dabba92e897b4405f4a69f135565a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d211216c83f01894810543d1c107160a9ae3650b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}