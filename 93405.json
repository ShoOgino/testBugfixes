{"path":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue[Object[]]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue[Object[]]).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue[Object[]]).mjava","sourceNew":"    /**\n     * Create the More like query from a PriorityQueue\n     */\n    private Query createQuery(PriorityQueue<Object[]> q) {\n        BooleanQuery query = new BooleanQuery();\n        Object cur;\n        int qterms = 0;\n        float bestScore = 0;\n\n        while (((cur = q.pop()) != null)) {\n            Object[] ar = (Object[]) cur;\n            TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n            if (boost) {\n                if (qterms == 0) {\n                    bestScore = ((Float) ar[2]).floatValue();\n                }\n                float myScore = ((Float) ar[2]).floatValue();\n\n                tq.setBoost(boostFactor * myScore / bestScore);\n            }\n\n            try {\n                query.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            catch (BooleanQuery.TooManyClauses ignore) {\n                break;\n            }\n\n            qterms++;\n            if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n                break;\n            }\n        }\n\n        return query;\n    }\n\n","sourceOld":"    /**\n     * Create the More like query from a PriorityQueue\n     */\n    private Query createQuery(PriorityQueue<Object[]> q) {\n        BooleanQuery query = new BooleanQuery();\n        Object cur;\n        int qterms = 0;\n        float bestScore = 0;\n\n        while (((cur = q.pop()) != null)) {\n            Object[] ar = (Object[]) cur;\n            TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n            if (boost) {\n                if (qterms == 0) {\n                    bestScore = ((Float) ar[2]).floatValue();\n                }\n                float myScore = ((Float) ar[2]).floatValue();\n\n                tq.setBoost(boostFactor * myScore / bestScore);\n            }\n\n            try {\n                query.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            catch (BooleanQuery.TooManyClauses ignore) {\n                break;\n            }\n\n            qterms++;\n            if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n                break;\n            }\n        }\n\n        return query;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e141595402370bee958745de8b1c9de1fa182581","date":1310547892,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue[Object[]]).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue[Object[]]).mjava","sourceNew":"  /**\n   * Create the More like query from a PriorityQueue\n   */\n  private Query createQuery(PriorityQueue<Object[]> q) {\n    BooleanQuery query = new BooleanQuery();\n    Object cur;\n    int qterms = 0;\n    float bestScore = 0;\n\n    while ((cur = q.pop()) != null) {\n      Object[] ar = (Object[]) cur;\n      TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n      if (boost) {\n        if (qterms == 0) {\n          bestScore = ((Float) ar[2]);\n        }\n        float myScore = ((Float) ar[2]);\n\n        tq.setBoost(boostFactor * myScore / bestScore);\n      }\n\n      try {\n        query.add(tq, BooleanClause.Occur.SHOULD);\n      }\n      catch (BooleanQuery.TooManyClauses ignore) {\n        break;\n      }\n\n      qterms++;\n      if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n        break;\n      }\n    }\n\n    return query;\n  }\n\n","sourceOld":"    /**\n     * Create the More like query from a PriorityQueue\n     */\n    private Query createQuery(PriorityQueue<Object[]> q) {\n        BooleanQuery query = new BooleanQuery();\n        Object cur;\n        int qterms = 0;\n        float bestScore = 0;\n\n        while (((cur = q.pop()) != null)) {\n            Object[] ar = (Object[]) cur;\n            TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n            if (boost) {\n                if (qterms == 0) {\n                    bestScore = ((Float) ar[2]).floatValue();\n                }\n                float myScore = ((Float) ar[2]).floatValue();\n\n                tq.setBoost(boostFactor * myScore / bestScore);\n            }\n\n            try {\n                query.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            catch (BooleanQuery.TooManyClauses ignore) {\n                break;\n            }\n\n            qterms++;\n            if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n                break;\n            }\n        }\n\n        return query;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1","date":1310609231,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#createQuery(PriorityQueue[Object[]]).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#createQuery(PriorityQueue[Object[]]).mjava","sourceNew":"  /**\n   * Create the More like query from a PriorityQueue\n   */\n  private Query createQuery(PriorityQueue<Object[]> q) {\n    BooleanQuery query = new BooleanQuery();\n    Object cur;\n    int qterms = 0;\n    float bestScore = 0;\n\n    while ((cur = q.pop()) != null) {\n      Object[] ar = (Object[]) cur;\n      TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n      if (boost) {\n        if (qterms == 0) {\n          bestScore = ((Float) ar[2]);\n        }\n        float myScore = ((Float) ar[2]);\n\n        tq.setBoost(boostFactor * myScore / bestScore);\n      }\n\n      try {\n        query.add(tq, BooleanClause.Occur.SHOULD);\n      }\n      catch (BooleanQuery.TooManyClauses ignore) {\n        break;\n      }\n\n      qterms++;\n      if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n        break;\n      }\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Create the More like query from a PriorityQueue\n   */\n  private Query createQuery(PriorityQueue<Object[]> q) {\n    BooleanQuery query = new BooleanQuery();\n    Object cur;\n    int qterms = 0;\n    float bestScore = 0;\n\n    while ((cur = q.pop()) != null) {\n      Object[] ar = (Object[]) cur;\n      TermQuery tq = new TermQuery(new Term((String) ar[1], (String) ar[0]));\n\n      if (boost) {\n        if (qterms == 0) {\n          bestScore = ((Float) ar[2]);\n        }\n        float myScore = ((Float) ar[2]);\n\n        tq.setBoost(boostFactor * myScore / bestScore);\n      }\n\n      try {\n        query.add(tq, BooleanClause.Occur.SHOULD);\n      }\n      catch (BooleanQuery.TooManyClauses ignore) {\n        break;\n      }\n\n      qterms++;\n      if (maxQueryTerms > 0 && qterms >= maxQueryTerms) {\n        break;\n      }\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["e141595402370bee958745de8b1c9de1fa182581"],"e141595402370bee958745de8b1c9de1fa182581":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e141595402370bee958745de8b1c9de1fa182581":["b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e141595402370bee958745de8b1c9de1fa182581"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}