{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","sourceNew":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedDeletes prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedDeletes globalDeletes = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice = null;\n    }\n    return globalDeletes;\n  }\n\n","sourceOld":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedDeletes prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedDeletes globalDeletes = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice = null;\n    }\n    return globalDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","sourceNew":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedDeletes prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedDeletes globalDeletes = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice.reset();\n    }\n    return globalDeletes;\n  }\n\n","sourceOld":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedDeletes prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedDeletes globalDeletes = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice = null;\n    }\n    return globalDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","sourceNew":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedDeletes prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedDeletes globalDeletes = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice.reset();\n    }\n    return globalDeletes;\n  }\n\n","sourceOld":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedDeletes prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedDeletes globalDeletes = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice = null;\n    }\n    return globalDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","sourceNew":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedDeletes prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedDeletes globalDeletes = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice.reset();\n    }\n    return globalDeletes;\n  }\n\n","sourceOld":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedDeletes prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedDeletes globalDeletes = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice = null;\n    }\n    return globalDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","sourceNew":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedUpdates prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedUpdates globalUpdates = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice.reset();\n    }\n    return globalUpdates;\n  }\n\n","sourceOld":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedDeletes prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedDeletes globalDeletes = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingDeletes, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice.reset();\n    }\n    return globalDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","sourceNew":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedUpdates prepareFlush() throws IOException {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedUpdates globalUpdates = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice.reset();\n    }\n    return globalUpdates;\n  }\n\n","sourceOld":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedUpdates prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedUpdates globalUpdates = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice.reset();\n    }\n    return globalUpdates;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","sourceNew":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedUpdates prepareFlush() throws IOException {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedUpdates globalUpdates = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice.reset();\n    }\n    return globalUpdates;\n  }\n\n","sourceOld":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedUpdates prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedUpdates globalUpdates = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice.reset();\n    }\n    return globalUpdates;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","sourceNew":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedUpdates prepareFlush() throws IOException {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedUpdates globalUpdates = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice.reset();\n    }\n    return globalUpdates;\n  }\n\n","sourceOld":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedUpdates prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedUpdates globalUpdates = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice.reset();\n    }\n    return globalUpdates;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc1841e9449be30dd7bcb15d6247b4eb5c83a07b","date":1584454718,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#prepareFlush().mjava","sourceNew":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedUpdates prepareFlush() {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedUpdates globalUpdates = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice.reset();\n    }\n    return globalUpdates;\n  }\n\n","sourceOld":"  /**\n   * Prepares this DWPT for flushing. This method will freeze and return the\n   * {@link DocumentsWriterDeleteQueue}s global buffer and apply all pending\n   * deletes to this DWPT.\n   */\n  FrozenBufferedUpdates prepareFlush() throws IOException {\n    assert numDocsInRAM > 0;\n    final FrozenBufferedUpdates globalUpdates = deleteQueue.freezeGlobalBuffer(deleteSlice);\n    /* deleteSlice can possibly be null if we have hit non-aborting exceptions during indexing and never succeeded \n    adding a document. */\n    if (deleteSlice != null) {\n      // apply all deletes before we flush and release the delete slice\n      deleteSlice.apply(pendingUpdates, numDocsInRAM);\n      assert deleteSlice.isEmpty();\n      deleteSlice.reset();\n    }\n    return globalUpdates;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["7af110b00ea8df9429309d83e38e0533d82e144f"],"7af110b00ea8df9429309d83e38e0533d82e144f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bc1841e9449be30dd7bcb15d6247b4eb5c83a07b":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bc1841e9449be30dd7bcb15d6247b4eb5c83a07b"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"7af110b00ea8df9429309d83e38e0533d82e144f":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bc1841e9449be30dd7bcb15d6247b4eb5c83a07b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["bc1841e9449be30dd7bcb15d6247b4eb5c83a07b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}