{"path":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesDetectTruncation#test().mjava","commits":[{"id":"b485ce675d4e8b9dbfafd122ca9b7b33a883be7b","date":1453975275,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesDetectTruncation#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    if (dir instanceof MockDirectoryWrapper) {\n      // otherwise we can have unref'd files left in the index that won't be visited when opening a reader and lead to scary looking false failures:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n\n    // Disable CFS 80% of the time so we can truncate individual files, but the other 20% of the time we test truncation of .cfs/.cfe too:\n    if (random().nextInt(5) != 1) {\n      conf.setUseCompoundFile(false);\n      conf.getMergePolicy().setNoCFSRatio(0.0);\n    }\n\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    // Use LineFileDocs so we (hopefully) get most Lucene features\n    // tested, e.g. IntPoint was recently added to it:\n    LineFileDocs docs = new LineFileDocs(random());\n    for (int i = 0; i < 100; i++) {\n      riw.addDocument(docs.nextDoc());\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      if (random().nextInt(20) == 0) {\n        riw.deleteDocuments(new Term(\"docid\", Integer.toString(i)));\n      }\n      if (random().nextInt(15) == 0) {\n        riw.updateNumericDocValue(new Term(\"docid\", Integer.toString(i)), \"docid_intDV\", Long.valueOf(i));\n      }\n    }\n    if (TEST_NIGHTLY == false) {\n      riw.forceMerge(1);\n    }\n    riw.close();\n    checkTruncation(dir);\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesDetectTruncation#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    if (dir instanceof MockDirectoryWrapper) {\n      // otherwise we can have unref'd files left in the index that won't be visited when opening a reader and lead to scary looking false failures:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n\n    // Disable CFS 80% of the time so we can truncate individual files, but the other 20% of the time we test truncation of .cfs/.cfe too:\n    if (random().nextInt(5) != 1) {\n      conf.setUseCompoundFile(false);\n      conf.getMergePolicy().setNoCFSRatio(0.0);\n    }\n\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    // Use LineFileDocs so we (hopefully) get most Lucene features\n    // tested, e.g. IntPoint was recently added to it:\n    LineFileDocs docs = new LineFileDocs(random());\n    for (int i = 0; i < 100; i++) {\n      riw.addDocument(docs.nextDoc());\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      if (random().nextInt(20) == 0) {\n        riw.deleteDocuments(new Term(\"docid\", Integer.toString(i)));\n      }\n      if (random().nextInt(15) == 0) {\n        riw.updateNumericDocValue(new Term(\"docid\", Integer.toString(i)), \"docid_intDV\", Long.valueOf(i));\n      }\n    }\n    if (TEST_NIGHTLY == false) {\n      riw.forceMerge(1);\n    }\n    riw.close();\n    checkTruncation(dir);\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesDetectTruncation#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesDetectTruncation#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n\n    // Disable CFS 80% of the time so we can truncate individual files, but the other 20% of the time we test truncation of .cfs/.cfe too:\n    if (random().nextInt(5) != 1) {\n      conf.setUseCompoundFile(false);\n      conf.getMergePolicy().setNoCFSRatio(0.0);\n    }\n\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    // Use LineFileDocs so we (hopefully) get most Lucene features\n    // tested, e.g. IntPoint was recently added to it:\n    LineFileDocs docs = new LineFileDocs(random());\n    for (int i = 0; i < 100; i++) {\n      riw.addDocument(docs.nextDoc());\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      if (random().nextInt(20) == 0) {\n        riw.deleteDocuments(new Term(\"docid\", Integer.toString(i)));\n      }\n      if (random().nextInt(15) == 0) {\n        riw.updateNumericDocValue(new Term(\"docid\", Integer.toString(i)), \"docid_intDV\", Long.valueOf(i));\n      }\n    }\n    if (TEST_NIGHTLY == false) {\n      riw.forceMerge(1);\n    }\n    riw.close();\n    checkTruncation(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    if (dir instanceof MockDirectoryWrapper) {\n      // otherwise we can have unref'd files left in the index that won't be visited when opening a reader and lead to scary looking false failures:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n\n    // Disable CFS 80% of the time so we can truncate individual files, but the other 20% of the time we test truncation of .cfs/.cfe too:\n    if (random().nextInt(5) != 1) {\n      conf.setUseCompoundFile(false);\n      conf.getMergePolicy().setNoCFSRatio(0.0);\n    }\n\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    // Use LineFileDocs so we (hopefully) get most Lucene features\n    // tested, e.g. IntPoint was recently added to it:\n    LineFileDocs docs = new LineFileDocs(random());\n    for (int i = 0; i < 100; i++) {\n      riw.addDocument(docs.nextDoc());\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      if (random().nextInt(20) == 0) {\n        riw.deleteDocuments(new Term(\"docid\", Integer.toString(i)));\n      }\n      if (random().nextInt(15) == 0) {\n        riw.updateNumericDocValue(new Term(\"docid\", Integer.toString(i)), \"docid_intDV\", Long.valueOf(i));\n      }\n    }\n    if (TEST_NIGHTLY == false) {\n      riw.forceMerge(1);\n    }\n    riw.close();\n    checkTruncation(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesDetectTruncation#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesDetectTruncation#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n\n    // Disable CFS 80% of the time so we can truncate individual files, but the other 20% of the time we test truncation of .cfs/.cfe too:\n    if (random().nextInt(5) != 1) {\n      conf.setUseCompoundFile(false);\n      conf.getMergePolicy().setNoCFSRatio(0.0);\n    }\n\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    // Use LineFileDocs so we (hopefully) get most Lucene features\n    // tested, e.g. IntPoint was recently added to it:\n    LineFileDocs docs = new LineFileDocs(random());\n    for (int i = 0; i < 100; i++) {\n      riw.addDocument(docs.nextDoc());\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      if (random().nextInt(20) == 0) {\n        riw.deleteDocuments(new Term(\"docid\", Integer.toString(i)));\n      }\n      if (random().nextInt(15) == 0) {\n        riw.updateNumericDocValue(new Term(\"docid\", Integer.toString(i)), \"docid_intDV\", Long.valueOf(i));\n      }\n    }\n    if (TEST_NIGHTLY == false) {\n      riw.forceMerge(1);\n    }\n    riw.close();\n    checkTruncation(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    if (dir instanceof MockDirectoryWrapper) {\n      // otherwise we can have unref'd files left in the index that won't be visited when opening a reader and lead to scary looking false failures:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n\n    // Disable CFS 80% of the time so we can truncate individual files, but the other 20% of the time we test truncation of .cfs/.cfe too:\n    if (random().nextInt(5) != 1) {\n      conf.setUseCompoundFile(false);\n      conf.getMergePolicy().setNoCFSRatio(0.0);\n    }\n\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    // Use LineFileDocs so we (hopefully) get most Lucene features\n    // tested, e.g. IntPoint was recently added to it:\n    LineFileDocs docs = new LineFileDocs(random());\n    for (int i = 0; i < 100; i++) {\n      riw.addDocument(docs.nextDoc());\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      if (random().nextInt(20) == 0) {\n        riw.deleteDocuments(new Term(\"docid\", Integer.toString(i)));\n      }\n      if (random().nextInt(15) == 0) {\n        riw.updateNumericDocValue(new Term(\"docid\", Integer.toString(i)), \"docid_intDV\", Long.valueOf(i));\n      }\n    }\n    if (TEST_NIGHTLY == false) {\n      riw.forceMerge(1);\n    }\n    riw.close();\n    checkTruncation(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesDetectTruncation#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n\n    // Disable CFS 80% of the time so we can truncate individual files, but the other 20% of the time we test truncation of .cfs/.cfe too:\n    if (random().nextInt(5) != 1) {\n      conf.setUseCompoundFile(false);\n      conf.getMergePolicy().setNoCFSRatio(0.0);\n    }\n\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    // Use LineFileDocs so we (hopefully) get most Lucene features\n    // tested, e.g. IntPoint was recently added to it:\n    LineFileDocs docs = new LineFileDocs(random());\n    for (int i = 0; i < 100; i++) {\n      riw.addDocument(docs.nextDoc());\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      if (random().nextInt(20) == 0) {\n        riw.deleteDocuments(new Term(\"docid\", Integer.toString(i)));\n      }\n      if (random().nextInt(15) == 0) {\n        riw.updateNumericDocValue(new Term(\"docid\", Integer.toString(i)), \"docid_intDV\", Long.valueOf(i));\n      }\n    }\n    if (TEST_NIGHTLY == false) {\n      riw.forceMerge(1);\n    }\n    riw.close();\n    checkTruncation(dir);\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesDetectTruncation#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesDetectTruncation#test().mjava","sourceNew":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n\n    // Disable CFS 80% of the time so we can truncate individual files, but the other 20% of the time we test truncation of .cfs/.cfe too:\n    if (random().nextInt(5) != 1) {\n      conf.setUseCompoundFile(false);\n      conf.getMergePolicy().setNoCFSRatio(0.0);\n    }\n\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    // Use LineFileDocs so we (hopefully) get most Lucene features\n    // tested, e.g. IntPoint was recently added to it:\n    LineFileDocs docs = new LineFileDocs(random());\n    for (int i = 0; i < 100; i++) {\n      riw.addDocument(docs.nextDoc());\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      if (random().nextInt(20) == 0) {\n        riw.deleteDocuments(new Term(\"docid\", Integer.toString(i)));\n      }\n      if (random().nextInt(15) == 0) {\n        riw.updateNumericDocValue(new Term(\"docid\", Integer.toString(i)), \"docid_intDV\", Long.valueOf(i));\n      }\n    }\n    if (TEST_NIGHTLY == false) {\n      riw.forceMerge(1);\n    }\n    riw.close();\n    checkTruncation(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Directory dir = newDirectory();\n\n    if (dir instanceof MockDirectoryWrapper) {\n      // otherwise we can have unref'd files left in the index that won't be visited when opening a reader and lead to scary looking false failures:\n      ((MockDirectoryWrapper) dir).setEnableVirusScanner(false);\n    }\n\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setCodec(TestUtil.getDefaultCodec());\n\n    // Disable CFS 80% of the time so we can truncate individual files, but the other 20% of the time we test truncation of .cfs/.cfe too:\n    if (random().nextInt(5) != 1) {\n      conf.setUseCompoundFile(false);\n      conf.getMergePolicy().setNoCFSRatio(0.0);\n    }\n\n    RandomIndexWriter riw = new RandomIndexWriter(random(), dir, conf);\n    // Use LineFileDocs so we (hopefully) get most Lucene features\n    // tested, e.g. IntPoint was recently added to it:\n    LineFileDocs docs = new LineFileDocs(random());\n    for (int i = 0; i < 100; i++) {\n      riw.addDocument(docs.nextDoc());\n      if (random().nextInt(7) == 0) {\n        riw.commit();\n      }\n      if (random().nextInt(20) == 0) {\n        riw.deleteDocuments(new Term(\"docid\", Integer.toString(i)));\n      }\n      if (random().nextInt(15) == 0) {\n        riw.updateNumericDocValue(new Term(\"docid\", Integer.toString(i)), \"docid_intDV\", Long.valueOf(i));\n      }\n    }\n    if (TEST_NIGHTLY == false) {\n      riw.forceMerge(1);\n    }\n    riw.close();\n    checkTruncation(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b485ce675d4e8b9dbfafd122ca9b7b33a883be7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["8d15e34266d75e4e8b95da046cd0afc812367b38","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["8d15e34266d75e4e8b95da046cd0afc812367b38","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b470f36a9372c97283360b1304eacbde22df6c0d"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b485ce675d4e8b9dbfafd122ca9b7b33a883be7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"b485ce675d4e8b9dbfafd122ca9b7b33a883be7b":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b485ce675d4e8b9dbfafd122ca9b7b33a883be7b","1e6acbaae7af722f17204ceccf0f7db5753eccf3","8d15e34266d75e4e8b95da046cd0afc812367b38"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}