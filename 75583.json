{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#HunspellStemFilter(TokenStream,Dictionary,boolean,boolean).mjava","commits":[{"id":"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7","date":1393724838,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#HunspellStemFilter(TokenStream,Dictionary,boolean,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilter#HunspellStemFilter(TokenStream,Dictionary,boolean,int,boolean).mjava","sourceNew":"  /**\n   * Creates a new HunspellStemFilter that will stem tokens from the given TokenStream using affix rules in the provided\n   * Dictionary\n   *\n   * @param input TokenStream whose tokens will be stemmed\n   * @param dictionary HunspellDictionary containing the affix rules and words that will be used to stem the tokens\n   * @param longestOnly true if only the longest term should be output.\n   */\n  public HunspellStemFilter(TokenStream input, Dictionary dictionary, boolean dedup,  boolean longestOnly) {\n    super(input);\n    this.dedup = dedup && longestOnly == false; // don't waste time deduping if longestOnly is set\n    this.stemmer = new Stemmer(dictionary);\n    this.longestOnly = longestOnly;\n  }\n\n","sourceOld":"  /**\n   * Creates a new HunspellStemFilter that will stem tokens from the given TokenStream using affix rules in the provided\n   * Dictionary\n   *\n   * @param input TokenStream whose tokens will be stemmed\n   * @param dictionary HunspellDictionary containing the affix rules and words that will be used to stem the tokens\n   * @param dedup true if only unique terms should be output.\n   * @param recursionCap maximum level of recursion stemmer can go into, defaults to <code>2</code>\n   * @param longestOnly true if only the longest term should be output.\n   */\n  public HunspellStemFilter(TokenStream input, Dictionary dictionary, boolean dedup, int recursionCap, boolean longestOnly) {\n    super(input);\n    this.dedup = dedup && longestOnly == false; // don't waste time deduping if longestOnly is set\n    this.stemmer = new Stemmer(dictionary, recursionCap);\n    this.longestOnly = longestOnly;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7"]},"commit2Childs":{"1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}