{"path":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","sourceNew":"  /**\n   * Load the datafile into this BigramDictionary\n   * \n   * @param dctFilePath path to the Bigramdictionary (bigramdict.dct)\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  public void loadFromFile(String dctFilePath) throws FileNotFoundException,\n      IOException, UnsupportedEncodingException {\n\n    int i, cnt, length, total = 0;\n    // The file only counted 6763 Chinese characters plus 5 reserved slots 3756~3760.  \n    // The 3756th is used (as a header) to store information.\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","sourceOld":"  /**\n   * Load the datafile into this BigramDictionary\n   * \n   * @param dctFilePath path to the Bigramdictionary (bigramdict.dct)\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  public void loadFromFile(String dctFilePath) throws FileNotFoundException,\n      IOException, UnsupportedEncodingException {\n\n    int i, cnt, length, total = 0;\n    // The file only counted 6763 Chinese characters plus 5 reserved slots 3756~3760.  \n    // The 3756th is used (as a header) to store information.\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","pathOld":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","sourceNew":"  /**\n   * Load the datafile into this BigramDictionary\n   * \n   * @param dctFilePath path to the Bigramdictionary (bigramdict.dct)\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  public void loadFromFile(String dctFilePath) throws IOException {\n\n    int i, cnt, length, total = 0;\n    // The file only counted 6763 Chinese characters plus 5 reserved slots 3756~3760.  \n    // The 3756th is used (as a header) to store information.\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","sourceOld":"  /**\n   * Load the datafile into this BigramDictionary\n   * \n   * @param dctFilePath path to the Bigramdictionary (bigramdict.dct)\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  public void loadFromFile(String dctFilePath) throws FileNotFoundException,\n      IOException, UnsupportedEncodingException {\n\n    int i, cnt, length, total = 0;\n    // The file only counted 6763 Chinese characters plus 5 reserved slots 3756~3760.  \n    // The 3756th is used (as a header) to store information.\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","bugFix":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","pathOld":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","sourceNew":"  /**\n   * Load the datafile into this BigramDictionary\n   * \n   * @param dctFilePath path to the Bigramdictionary (bigramdict.dct)\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  public void loadFromFile(String dctFilePath) throws IOException {\n\n    int i, cnt, length, total = 0;\n    // The file only counted 6763 Chinese characters plus 5 reserved slots 3756~3760.  \n    // The 3756th is used (as a header) to store information.\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","sourceOld":"  /**\n   * Load the datafile into this BigramDictionary\n   * \n   * @param dctFilePath path to the Bigramdictionary (bigramdict.dct)\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  public void loadFromFile(String dctFilePath) throws FileNotFoundException,\n      IOException, UnsupportedEncodingException {\n\n    int i, cnt, length, total = 0;\n    // The file only counted 6763 Chinese characters plus 5 reserved slots 3756~3760.  \n    // The 3756th is used (as a header) to store information.\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","pathOld":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","sourceNew":"  /**\n   * Load the datafile into this BigramDictionary\n   * \n   * @param dctFilePath path to the Bigramdictionary (bigramdict.dct)\n   * @throws IOException If there is a low-level I/O error\n   */\n  public void loadFromFile(String dctFilePath) throws IOException {\n\n    int i, cnt, length, total = 0;\n    // The file only counted 6763 Chinese characters plus 5 reserved slots 3756~3760.  \n    // The 3756th is used (as a header) to store information.\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","sourceOld":"  /**\n   * Load the datafile into this BigramDictionary\n   * \n   * @param dctFilePath path to the Bigramdictionary (bigramdict.dct)\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  public void loadFromFile(String dctFilePath) throws IOException {\n\n    int i, cnt, length, total = 0;\n    // The file only counted 6763 Chinese characters plus 5 reserved slots 3756~3760.  \n    // The 3756th is used (as a header) to store information.\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","pathOld":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","sourceNew":"  /**\n   * Load the datafile into this BigramDictionary\n   * \n   * @param dctFilePath path to the Bigramdictionary (bigramdict.dct)\n   * @throws IOException If there is a low-level I/O error\n   */\n  public void loadFromFile(String dctFilePath) throws IOException {\n\n    int i, cnt, length, total = 0;\n    // The file only counted 6763 Chinese characters plus 5 reserved slots 3756~3760.  \n    // The 3756th is used (as a header) to store information.\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    DataInputStream dctFile = new DataInputStream(Files.newInputStream(Paths.get(dctFilePath)));\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","sourceOld":"  /**\n   * Load the datafile into this BigramDictionary\n   * \n   * @param dctFilePath path to the Bigramdictionary (bigramdict.dct)\n   * @throws IOException If there is a low-level I/O error\n   */\n  public void loadFromFile(String dctFilePath) throws IOException {\n\n    int i, cnt, length, total = 0;\n    // The file only counted 6763 Chinese characters plus 5 reserved slots 3756~3760.  \n    // The 3756th is used (as a header) to store information.\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f4abec28b874149a7223e32cc7a01704c27790de":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["f4abec28b874149a7223e32cc7a01704c27790de"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}