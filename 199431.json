{"path":"lucene/backwards/src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","pathOld":"backwards/src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/demo/org/apache/lucene/demo/SearchFiles#main(String[]).mjava","sourceNew":null,"sourceOld":"  /** Simple command-line based search demo. */\n  public static void main(String[] args) throws Exception {\n    String usage =\n      \"Usage:\\tjava org.apache.lucene.demo.SearchFiles [-index dir] [-field f] [-repeat n] [-queries file] [-raw] [-norms field] [-paging hitsPerPage]\";\n    usage += \"\\n\\tSpecify 'false' for hitsPerPage to use streaming instead of paging search.\";\n    if (args.length > 0 && (\"-h\".equals(args[0]) || \"-help\".equals(args[0]))) {\n      System.out.println(usage);\n      System.exit(0);\n    }\n\n    String index = \"index\";\n    String field = \"contents\";\n    String queries = null;\n    int repeat = 0;\n    boolean raw = false;\n    String normsField = null;\n    boolean paging = true;\n    int hitsPerPage = 10;\n    \n    for (int i = 0; i < args.length; i++) {\n      if (\"-index\".equals(args[i])) {\n        index = args[i+1];\n        i++;\n      } else if (\"-field\".equals(args[i])) {\n        field = args[i+1];\n        i++;\n      } else if (\"-queries\".equals(args[i])) {\n        queries = args[i+1];\n        i++;\n      } else if (\"-repeat\".equals(args[i])) {\n        repeat = Integer.parseInt(args[i+1]);\n        i++;\n      } else if (\"-raw\".equals(args[i])) {\n        raw = true;\n      } else if (\"-norms\".equals(args[i])) {\n        normsField = args[i+1];\n        i++;\n      } else if (\"-paging\".equals(args[i])) {\n        if (args[i+1].equals(\"false\")) {\n          paging = false;\n        } else {\n          hitsPerPage = Integer.parseInt(args[i+1]);\n          if (hitsPerPage == 0) {\n            paging = false;\n          }\n        }\n        i++;\n      }\n    }\n    \n    IndexReader reader = IndexReader.open(FSDirectory.open(new File(index)), true); // only searching, so read-only=true\n\n    if (normsField != null)\n      reader = new OneNormsReader(reader, normsField);\n\n    Searcher searcher = new IndexSearcher(reader);\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    BufferedReader in = null;\n    if (queries != null) {\n      in = new BufferedReader(new FileReader(queries));\n    } else {\n      in = new BufferedReader(new InputStreamReader(System.in, \"UTF-8\"));\n    }\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, field, analyzer);\n    while (true) {\n      if (queries == null)                        // prompt the user\n        System.out.println(\"Enter query: \");\n\n      String line = in.readLine();\n\n      if (line == null || line.length() == -1)\n        break;\n\n      line = line.trim();\n      if (line.length() == 0)\n        break;\n      \n      Query query = parser.parse(line);\n      System.out.println(\"Searching for: \" + query.toString(field));\n\n            \n      if (repeat > 0) {                           // repeat & time as benchmark\n        Date start = new Date();\n        for (int i = 0; i < repeat; i++) {\n          searcher.search(query, null, 100);\n        }\n        Date end = new Date();\n        System.out.println(\"Time: \"+(end.getTime()-start.getTime())+\"ms\");\n      }\n\n      if (paging) {\n        doPagingSearch(in, searcher, query, hitsPerPage, raw, queries == null);\n      } else {\n        doStreamingSearch(searcher, query);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}