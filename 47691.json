{"path":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#testParallelReloadAndStats().mjava","commits":[{"id":"462165462a7ae6ca998de69e7d2953022762c932","date":1474606099,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#testParallelReloadAndStats().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testParallelReloadAndStats() throws Exception {\n\n    for (int i = 0; i < atLeast(2); i++) {\n\n      int asyncId = taskNum.incrementAndGet();\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n          CommonParams.QT, \"/admin/cores\",\n          CoreAdminParams.ACTION,\n          CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n          CoreAdminParams.CORE, DEFAULT_TEST_CORENAME,\n          \"async\", \"\" + asyncId), new SolrQueryResponse());\n\n      boolean isCompleted;\n      do {\n        String stats = h.query(req(\n            CommonParams.QT, \"/admin/mbeans\",\n            \"stats\", \"true\"));\n\n        NamedList<NamedList<Object>> actualStats = SolrInfoMBeanHandler.fromXML(stats).get(\"CORE\");\n        \n        for (Map.Entry<String, NamedList<Object>> tuple : actualStats) {\n          if (tuple.getKey().contains(\"earcher\")) { // catches \"searcher\" and \"Searcher@345345 blah\"\n            NamedList<Object> searcherStats = tuple.getValue();\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> statsList = (NamedList<Object>)searcherStats.get(\"stats\");\n            assertEquals(\"expect to have exactly one indexVersion at \"+statsList, 1, statsList.getAll(\"indexVersion\").size());\n            assertTrue(statsList.get(\"indexVersion\") instanceof Long); \n          }\n        }\n\n        h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n            CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.REQUESTSTATUS.toString(),\n            CoreAdminParams.REQUESTID, \"\" + asyncId), rsp);\n        \n        @SuppressWarnings(\"unchecked\")\n        List<Object> statusLog = rsp.getValues().getAll(CoreAdminAction.STATUS.name());\n\n        assertFalse(\"expect status check w/o error, got:\" + statusLog,\n                                  statusLog.contains(CoreAdminHandler.FAILED));\n\n        isCompleted = statusLog.contains(CoreAdminHandler.COMPLETED);\n      } while (!isCompleted);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4855785495f66ec5566394edd10f25ec5489869c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#testParallelReloadAndStats().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testParallelReloadAndStats() throws Exception {\n\n    for (int i = 0; i < atLeast(2); i++) {\n\n      int asyncId = taskNum.incrementAndGet();\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n          CommonParams.QT, \"/admin/cores\",\n          CoreAdminParams.ACTION,\n          CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n          CoreAdminParams.CORE, DEFAULT_TEST_CORENAME,\n          \"async\", \"\" + asyncId), new SolrQueryResponse());\n\n      boolean isCompleted;\n      do {\n        String stats = h.query(req(\n            CommonParams.QT, \"/admin/mbeans\",\n            \"stats\", \"true\"));\n\n        NamedList<NamedList<Object>> actualStats = SolrInfoMBeanHandler.fromXML(stats).get(\"CORE\");\n        \n        for (Map.Entry<String, NamedList<Object>> tuple : actualStats) {\n          if (tuple.getKey().contains(\"earcher\")) { // catches \"searcher\" and \"Searcher@345345 blah\"\n            NamedList<Object> searcherStats = tuple.getValue();\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> statsList = (NamedList<Object>)searcherStats.get(\"stats\");\n            assertEquals(\"expect to have exactly one indexVersion at \"+statsList, 1, statsList.getAll(\"indexVersion\").size());\n            assertTrue(statsList.get(\"indexVersion\") instanceof Long); \n          }\n        }\n\n        h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n            CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.REQUESTSTATUS.toString(),\n            CoreAdminParams.REQUESTID, \"\" + asyncId), rsp);\n        \n        @SuppressWarnings(\"unchecked\")\n        List<Object> statusLog = rsp.getValues().getAll(CoreAdminAction.STATUS.name());\n\n        assertFalse(\"expect status check w/o error, got:\" + statusLog,\n                                  statusLog.contains(CoreAdminHandler.FAILED));\n\n        isCompleted = statusLog.contains(CoreAdminHandler.COMPLETED);\n      } while (!isCompleted);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#testParallelReloadAndStats().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testParallelReloadAndStats() throws Exception {\n\n    for (int i = 0; i < atLeast(2); i++) {\n\n      int asyncId = taskNum.incrementAndGet();\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n          CommonParams.QT, \"/admin/cores\",\n          CoreAdminParams.ACTION,\n          CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n          CoreAdminParams.CORE, DEFAULT_TEST_CORENAME,\n          \"async\", \"\" + asyncId), new SolrQueryResponse());\n\n      boolean isCompleted;\n      do {\n        String stats = h.query(req(\n            CommonParams.QT, \"/admin/mbeans\",\n            \"stats\", \"true\"));\n\n        NamedList<NamedList<Object>> actualStats = SolrInfoMBeanHandler.fromXML(stats).get(\"CORE\");\n        \n        for (Map.Entry<String, NamedList<Object>> tuple : actualStats) {\n          if (tuple.getKey().contains(\"earcher\")) { // catches \"searcher\" and \"Searcher@345345 blah\"\n            NamedList<Object> searcherStats = tuple.getValue();\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> statsList = (NamedList<Object>)searcherStats.get(\"stats\");\n            assertEquals(\"expect to have exactly one indexVersion at \"+statsList, 1, statsList.getAll(\"indexVersion\").size());\n            assertTrue(statsList.get(\"indexVersion\") instanceof Long); \n          }\n        }\n\n        h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n            CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.REQUESTSTATUS.toString(),\n            CoreAdminParams.REQUESTID, \"\" + asyncId), rsp);\n        \n        @SuppressWarnings(\"unchecked\")\n        List<Object> statusLog = rsp.getValues().getAll(CoreAdminAction.STATUS.name());\n\n        assertFalse(\"expect status check w/o error, got:\" + statusLog,\n                                  statusLog.contains(CoreAdminHandler.FAILED));\n\n        isCompleted = statusLog.contains(CoreAdminHandler.COMPLETED);\n      } while (!isCompleted);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4855785495f66ec5566394edd10f25ec5489869c","date":1482383918,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#testParallelReloadAndStats().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#testParallelReloadAndStats().mjava","sourceNew":"  @Test\n  public void testParallelReloadAndStats() throws Exception {\n\n    Random random = random();\n    \n    for (int i = 0; i < atLeast(random, 2); i++) {\n\n      int asyncId = taskNum.incrementAndGet();\n\n     \n      h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n          CommonParams.QT, \"/admin/cores\",\n          CoreAdminParams.ACTION,\n          CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n          CoreAdminParams.CORE, DEFAULT_TEST_CORENAME,\n          \"async\", \"\" + asyncId), new SolrQueryResponse());\n\n      boolean isCompleted;\n      do {\n        if (random.nextBoolean()) {\n          requestMbeans();\n        } else {\n          requestCoreStatus();\n        }\n\n        isCompleted = checkReloadComlpetion(asyncId);\n      } while (!isCompleted);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelReloadAndStats() throws Exception {\n\n    for (int i = 0; i < atLeast(2); i++) {\n\n      int asyncId = taskNum.incrementAndGet();\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n          CommonParams.QT, \"/admin/cores\",\n          CoreAdminParams.ACTION,\n          CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n          CoreAdminParams.CORE, DEFAULT_TEST_CORENAME,\n          \"async\", \"\" + asyncId), new SolrQueryResponse());\n\n      boolean isCompleted;\n      do {\n        String stats = h.query(req(\n            CommonParams.QT, \"/admin/mbeans\",\n            \"stats\", \"true\"));\n\n        NamedList<NamedList<Object>> actualStats = SolrInfoMBeanHandler.fromXML(stats).get(\"CORE\");\n        \n        for (Map.Entry<String, NamedList<Object>> tuple : actualStats) {\n          if (tuple.getKey().contains(\"earcher\")) { // catches \"searcher\" and \"Searcher@345345 blah\"\n            NamedList<Object> searcherStats = tuple.getValue();\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> statsList = (NamedList<Object>)searcherStats.get(\"stats\");\n            assertEquals(\"expect to have exactly one indexVersion at \"+statsList, 1, statsList.getAll(\"indexVersion\").size());\n            assertTrue(statsList.get(\"indexVersion\") instanceof Long); \n          }\n        }\n\n        h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n            CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.REQUESTSTATUS.toString(),\n            CoreAdminParams.REQUESTID, \"\" + asyncId), rsp);\n        \n        @SuppressWarnings(\"unchecked\")\n        List<Object> statusLog = rsp.getValues().getAll(CoreAdminAction.STATUS.name());\n\n        assertFalse(\"expect status check w/o error, got:\" + statusLog,\n                                  statusLog.contains(CoreAdminHandler.FAILED));\n\n        isCompleted = statusLog.contains(CoreAdminHandler.COMPLETED);\n      } while (!isCompleted);\n    }\n  }\n\n","bugFix":["462165462a7ae6ca998de69e7d2953022762c932"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#testParallelReloadAndStats().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#testParallelReloadAndStats().mjava","sourceNew":"  @Test\n  public void testParallelReloadAndStats() throws Exception {\n\n    Random random = random();\n    \n    for (int i = 0; i < atLeast(random, 2); i++) {\n\n      int asyncId = taskNum.incrementAndGet();\n\n     \n      h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n          CommonParams.QT, \"/admin/cores\",\n          CoreAdminParams.ACTION,\n          CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n          CoreAdminParams.CORE, DEFAULT_TEST_CORENAME,\n          \"async\", \"\" + asyncId), new SolrQueryResponse());\n\n      boolean isCompleted;\n      do {\n        if (random.nextBoolean()) {\n          requestMbeans();\n        } else {\n          requestCoreStatus();\n        }\n\n        isCompleted = checkReloadComlpetion(asyncId);\n      } while (!isCompleted);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelReloadAndStats() throws Exception {\n\n    for (int i = 0; i < atLeast(2); i++) {\n\n      int asyncId = taskNum.incrementAndGet();\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n          CommonParams.QT, \"/admin/cores\",\n          CoreAdminParams.ACTION,\n          CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n          CoreAdminParams.CORE, DEFAULT_TEST_CORENAME,\n          \"async\", \"\" + asyncId), new SolrQueryResponse());\n\n      boolean isCompleted;\n      do {\n        String stats = h.query(req(\n            CommonParams.QT, \"/admin/mbeans\",\n            \"stats\", \"true\"));\n\n        NamedList<NamedList<Object>> actualStats = SolrInfoMBeanHandler.fromXML(stats).get(\"CORE\");\n        \n        for (Map.Entry<String, NamedList<Object>> tuple : actualStats) {\n          if (tuple.getKey().contains(\"earcher\")) { // catches \"searcher\" and \"Searcher@345345 blah\"\n            NamedList<Object> searcherStats = tuple.getValue();\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> statsList = (NamedList<Object>)searcherStats.get(\"stats\");\n            assertEquals(\"expect to have exactly one indexVersion at \"+statsList, 1, statsList.getAll(\"indexVersion\").size());\n            assertTrue(statsList.get(\"indexVersion\") instanceof Long); \n          }\n        }\n\n        h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n            CoreAdminParams.ACTION,\n            CoreAdminParams.CoreAdminAction.REQUESTSTATUS.toString(),\n            CoreAdminParams.REQUESTID, \"\" + asyncId), rsp);\n        \n        @SuppressWarnings(\"unchecked\")\n        List<Object> statusLog = rsp.getValues().getAll(CoreAdminAction.STATUS.name());\n\n        assertFalse(\"expect status check w/o error, got:\" + statusLog,\n                                  statusLog.contains(CoreAdminHandler.FAILED));\n\n        isCompleted = statusLog.contains(CoreAdminHandler.COMPLETED);\n      } while (!isCompleted);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#testParallelReloadAndStats().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#testParallelReloadAndStats().mjava","sourceNew":"  @Test\n  public void testParallelReloadAndStats() throws Exception {\n\n    Random random = random();\n    \n    for (int i = 0; i < atLeast(random, 2); i++) {\n\n      int asyncId = taskNum.incrementAndGet();\n\n     \n      h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n          CommonParams.QT, \"/admin/cores\",\n          CoreAdminParams.ACTION,\n          CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n          CoreAdminParams.CORE, DEFAULT_TEST_CORENAME,\n          \"async\", \"\" + asyncId), new SolrQueryResponse());\n\n      boolean isCompleted;\n      do {\n        if (random.nextBoolean()) {\n          requestMetrics();\n        } else {\n          requestCoreStatus();\n        }\n\n        isCompleted = checkReloadComlpetion(asyncId);\n      } while (!isCompleted);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelReloadAndStats() throws Exception {\n\n    Random random = random();\n    \n    for (int i = 0; i < atLeast(random, 2); i++) {\n\n      int asyncId = taskNum.incrementAndGet();\n\n     \n      h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n          CommonParams.QT, \"/admin/cores\",\n          CoreAdminParams.ACTION,\n          CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n          CoreAdminParams.CORE, DEFAULT_TEST_CORENAME,\n          \"async\", \"\" + asyncId), new SolrQueryResponse());\n\n      boolean isCompleted;\n      do {\n        if (random.nextBoolean()) {\n          requestMbeans();\n        } else {\n          requestCoreStatus();\n        }\n\n        isCompleted = checkReloadComlpetion(asyncId);\n      } while (!isCompleted);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#testParallelReloadAndStats().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#testParallelReloadAndStats().mjava","sourceNew":"  @Test\n  public void testParallelReloadAndStats() throws Exception {\n\n    Random random = random();\n    \n    for (int i = 0; i < atLeast(random, 2); i++) {\n\n      int asyncId = taskNum.incrementAndGet();\n\n     \n      h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n          CommonParams.QT, \"/admin/cores\",\n          CoreAdminParams.ACTION,\n          CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n          CoreAdminParams.CORE, DEFAULT_TEST_CORENAME,\n          \"async\", \"\" + asyncId), new SolrQueryResponse());\n\n      boolean isCompleted;\n      do {\n        if (random.nextBoolean()) {\n          requestMetrics();\n        } else {\n          requestCoreStatus();\n        }\n\n        isCompleted = checkReloadComlpetion(asyncId);\n      } while (!isCompleted);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelReloadAndStats() throws Exception {\n\n    Random random = random();\n    \n    for (int i = 0; i < atLeast(random, 2); i++) {\n\n      int asyncId = taskNum.incrementAndGet();\n\n     \n      h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n          CommonParams.QT, \"/admin/cores\",\n          CoreAdminParams.ACTION,\n          CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n          CoreAdminParams.CORE, DEFAULT_TEST_CORENAME,\n          \"async\", \"\" + asyncId), new SolrQueryResponse());\n\n      boolean isCompleted;\n      do {\n        if (random.nextBoolean()) {\n          requestMbeans();\n        } else {\n          requestCoreStatus();\n        }\n\n        isCompleted = checkReloadComlpetion(asyncId);\n      } while (!isCompleted);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b92ded2659c9795a606f40ec031e6d09c801275","date":1493043122,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#testParallelReloadAndStats().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#testParallelReloadAndStats().mjava","sourceNew":"  @Test\n  public void testParallelReloadAndStats() throws Exception {\n\n    Random random = random();\n    \n    for (int i = 0; i < atLeast(random, 2); i++) {\n\n      int asyncId = taskNum.incrementAndGet();\n\n     \n      h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n          CommonParams.QT, \"/admin/cores\",\n          CoreAdminParams.ACTION,\n          CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n          CoreAdminParams.CORE, DEFAULT_TEST_CORENAME,\n          \"async\", \"\" + asyncId), new SolrQueryResponse());\n\n      boolean isCompleted;\n      do {\n        if (random.nextBoolean()) {\n          requestMetrics(true);\n        } else {\n          requestCoreStatus();\n        }\n\n        isCompleted = checkReloadComlpetion(asyncId);\n      } while (!isCompleted);\n      requestMetrics(false);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelReloadAndStats() throws Exception {\n\n    Random random = random();\n    \n    for (int i = 0; i < atLeast(random, 2); i++) {\n\n      int asyncId = taskNum.incrementAndGet();\n\n     \n      h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n          CommonParams.QT, \"/admin/cores\",\n          CoreAdminParams.ACTION,\n          CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n          CoreAdminParams.CORE, DEFAULT_TEST_CORENAME,\n          \"async\", \"\" + asyncId), new SolrQueryResponse());\n\n      boolean isCompleted;\n      do {\n        if (random.nextBoolean()) {\n          requestMetrics();\n        } else {\n          requestCoreStatus();\n        }\n\n        isCompleted = checkReloadComlpetion(asyncId);\n      } while (!isCompleted);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#testParallelReloadAndStats().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#testParallelReloadAndStats().mjava","sourceNew":"  @Test\n  public void testParallelReloadAndStats() throws Exception {\n\n    Random random = random();\n    \n    for (int i = 0; i < atLeast(random, 2); i++) {\n\n      int asyncId = taskNum.incrementAndGet();\n\n     \n      h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n          CommonParams.QT, \"/admin/cores\",\n          CoreAdminParams.ACTION,\n          CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n          CoreAdminParams.CORE, DEFAULT_TEST_CORENAME,\n          \"async\", \"\" + asyncId), new SolrQueryResponse());\n\n      boolean isCompleted;\n      do {\n        if (random.nextBoolean()) {\n          requestMetrics(true);\n        } else {\n          requestCoreStatus();\n        }\n\n        isCompleted = checkReloadComlpetion(asyncId);\n      } while (!isCompleted);\n      requestMetrics(false);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelReloadAndStats() throws Exception {\n\n    Random random = random();\n    \n    for (int i = 0; i < atLeast(random, 2); i++) {\n\n      int asyncId = taskNum.incrementAndGet();\n\n     \n      h.getCoreContainer().getMultiCoreHandler().handleRequest(req(\n          CommonParams.QT, \"/admin/cores\",\n          CoreAdminParams.ACTION,\n          CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n          CoreAdminParams.CORE, DEFAULT_TEST_CORENAME,\n          \"async\", \"\" + asyncId), new SolrQueryResponse());\n\n      boolean isCompleted;\n      do {\n        if (random.nextBoolean()) {\n          requestMetrics();\n        } else {\n          requestCoreStatus();\n        }\n\n        isCompleted = checkReloadComlpetion(asyncId);\n      } while (!isCompleted);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["4855785495f66ec5566394edd10f25ec5489869c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7b92ded2659c9795a606f40ec031e6d09c801275"],"4855785495f66ec5566394edd10f25ec5489869c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","462165462a7ae6ca998de69e7d2953022762c932"],"7b92ded2659c9795a606f40ec031e6d09c801275":["816521ebaad5add9cb96bb88c577394e2938c40b"],"462165462a7ae6ca998de69e7d2953022762c932":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"816521ebaad5add9cb96bb88c577394e2938c40b":["4855785495f66ec5566394edd10f25ec5489869c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b92ded2659c9795a606f40ec031e6d09c801275"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","4855785495f66ec5566394edd10f25ec5489869c"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"4855785495f66ec5566394edd10f25ec5489869c":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4855785495f66ec5566394edd10f25ec5489869c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","462165462a7ae6ca998de69e7d2953022762c932","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7b92ded2659c9795a606f40ec031e6d09c801275":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"462165462a7ae6ca998de69e7d2953022762c932":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"816521ebaad5add9cb96bb88c577394e2938c40b":["7b92ded2659c9795a606f40ec031e6d09c801275"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}