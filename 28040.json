{"path":"lucene/src/java/org/apache/lucene/codecs/sep/SepSkipListWriter#SepSkipListWriter(int,int,int,IntIndexOutput,IntIndexOutput,IntIndexOutput,IndexOutput).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/sep/SepSkipListWriter#SepSkipListWriter(int,int,int,IntIndexOutput,IntIndexOutput,IntIndexOutput,IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListWriter#SepSkipListWriter(int,int,int,IntIndexOutput,IntIndexOutput,IntIndexOutput,IndexOutput).mjava","sourceNew":"  SepSkipListWriter(int skipInterval, int numberOfSkipLevels, int docCount,\n                    IntIndexOutput freqOutput,\n                    IntIndexOutput docOutput,\n                    IntIndexOutput posOutput,\n                    IndexOutput payloadOutput)\n    throws IOException {\n    super(skipInterval, numberOfSkipLevels, docCount);\n\n    this.freqOutput = freqOutput;\n    this.posOutput = posOutput;\n    this.payloadOutput = payloadOutput;\n    \n    lastSkipDoc = new int[numberOfSkipLevels];\n    lastSkipPayloadLength = new int[numberOfSkipLevels];\n    // TODO: -- also cutover normal IndexOutput to use getIndex()?\n    lastSkipPayloadPointer = new long[numberOfSkipLevels];\n\n    freqIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n    docIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n    posIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n\n    for(int i=0;i<numberOfSkipLevels;i++) {\n      if (freqOutput != null) {\n        freqIndex[i] = freqOutput.index();\n      }\n      docIndex[i] = docOutput.index();\n      if (posOutput != null) {\n        posIndex[i] = posOutput.index();\n      }\n    }\n  }\n\n","sourceOld":"  SepSkipListWriter(int skipInterval, int numberOfSkipLevels, int docCount,\n                    IntIndexOutput freqOutput,\n                    IntIndexOutput docOutput,\n                    IntIndexOutput posOutput,\n                    IndexOutput payloadOutput)\n    throws IOException {\n    super(skipInterval, numberOfSkipLevels, docCount);\n\n    this.freqOutput = freqOutput;\n    this.posOutput = posOutput;\n    this.payloadOutput = payloadOutput;\n    \n    lastSkipDoc = new int[numberOfSkipLevels];\n    lastSkipPayloadLength = new int[numberOfSkipLevels];\n    // TODO: -- also cutover normal IndexOutput to use getIndex()?\n    lastSkipPayloadPointer = new long[numberOfSkipLevels];\n\n    freqIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n    docIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n    posIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n\n    for(int i=0;i<numberOfSkipLevels;i++) {\n      if (freqOutput != null) {\n        freqIndex[i] = freqOutput.index();\n      }\n      docIndex[i] = docOutput.index();\n      if (posOutput != null) {\n        posIndex[i] = posOutput.index();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepSkipListWriter#SepSkipListWriter(int,int,int,IntIndexOutput,IntIndexOutput,IntIndexOutput,IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/sep/SepSkipListWriter#SepSkipListWriter(int,int,int,IntIndexOutput,IntIndexOutput,IntIndexOutput,IndexOutput).mjava","sourceNew":"  SepSkipListWriter(int skipInterval, int numberOfSkipLevels, int docCount,\n                    IntIndexOutput freqOutput,\n                    IntIndexOutput docOutput,\n                    IntIndexOutput posOutput,\n                    IndexOutput payloadOutput)\n    throws IOException {\n    super(skipInterval, numberOfSkipLevels, docCount);\n\n    this.freqOutput = freqOutput;\n    this.posOutput = posOutput;\n    this.payloadOutput = payloadOutput;\n    \n    lastSkipDoc = new int[numberOfSkipLevels];\n    lastSkipPayloadLength = new int[numberOfSkipLevels];\n    // TODO: -- also cutover normal IndexOutput to use getIndex()?\n    lastSkipPayloadPointer = new long[numberOfSkipLevels];\n\n    freqIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n    docIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n    posIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n\n    for(int i=0;i<numberOfSkipLevels;i++) {\n      if (freqOutput != null) {\n        freqIndex[i] = freqOutput.index();\n      }\n      docIndex[i] = docOutput.index();\n      if (posOutput != null) {\n        posIndex[i] = posOutput.index();\n      }\n    }\n  }\n\n","sourceOld":"  SepSkipListWriter(int skipInterval, int numberOfSkipLevels, int docCount,\n                    IntIndexOutput freqOutput,\n                    IntIndexOutput docOutput,\n                    IntIndexOutput posOutput,\n                    IndexOutput payloadOutput)\n    throws IOException {\n    super(skipInterval, numberOfSkipLevels, docCount);\n\n    this.freqOutput = freqOutput;\n    this.posOutput = posOutput;\n    this.payloadOutput = payloadOutput;\n    \n    lastSkipDoc = new int[numberOfSkipLevels];\n    lastSkipPayloadLength = new int[numberOfSkipLevels];\n    // TODO: -- also cutover normal IndexOutput to use getIndex()?\n    lastSkipPayloadPointer = new long[numberOfSkipLevels];\n\n    freqIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n    docIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n    posIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n\n    for(int i=0;i<numberOfSkipLevels;i++) {\n      if (freqOutput != null) {\n        freqIndex[i] = freqOutput.index();\n      }\n      docIndex[i] = docOutput.index();\n      if (posOutput != null) {\n        posIndex[i] = posOutput.index();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}