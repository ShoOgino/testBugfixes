{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int,boolean).mjava","commits":[{"id":"47777586dd4c026834be0b2cc454d527cf8884b3","date":1330348390,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * utility method for blasting tokenstreams with data to make sure they don't do anything crazy \n   * @param simple true if only ascii strings will be used (try to avoid)\n   */\n  public static void checkRandomData(Random random, Analyzer a, int iterations, boolean simple) throws IOException {\n    checkRandomData(random, a, iterations, 20, simple);\n    // now test with multiple threads\n    int numThreads = _TestUtil.nextInt(random, 4, 8);\n    Thread threads[] = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new AnalysisThread(new Random(random.nextLong()), a, iterations, simple);\n    }\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i = 0; i < threads.length; i++) {\n      try {\n        threads[i].join();\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * utility method for blasting tokenstreams with data to make sure they don't do anything crazy \n   * @param simple true if only ascii strings will be used (try to avoid)\n   */\n  public static void checkRandomData(Random random, Analyzer a, int iterations, boolean simple) throws IOException {\n    checkRandomData(random, a, iterations, 20, simple);\n    // now test with multiple threads\n    int numThreads = _TestUtil.nextInt(random, 4, 8);\n    Thread threads[] = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new AnalysisThread(new Random(random.nextLong()), a, iterations, simple);\n    }\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i = 0; i < threads.length; i++) {\n      try {\n        threads[i].join();\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26bd77fc30a420a3e33c85e6fa6b0887eac4b029","date":1332293004,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int,boolean).mjava","sourceNew":"  /** \n   * utility method for blasting tokenstreams with data to make sure they don't do anything crazy \n   * @param simple true if only ascii strings will be used (try to avoid)\n   */\n  public static void checkRandomData(Random random, Analyzer a, int iterations, boolean simple) throws IOException {\n    checkRandomData(random, a, iterations, 20, simple);\n  }\n\n","sourceOld":"  /** \n   * utility method for blasting tokenstreams with data to make sure they don't do anything crazy \n   * @param simple true if only ascii strings will be used (try to avoid)\n   */\n  public static void checkRandomData(Random random, Analyzer a, int iterations, boolean simple) throws IOException {\n    checkRandomData(random, a, iterations, 20, simple);\n    // now test with multiple threads\n    int numThreads = _TestUtil.nextInt(random, 4, 8);\n    Thread threads[] = new Thread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new AnalysisThread(new Random(random.nextLong()), a, iterations, simple);\n    }\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].start();\n    }\n    for (int i = 0; i < threads.length; i++) {\n      try {\n        threads[i].join();\n      } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"888c2d6bca1edd8d9293631d6e1d188b036e0f05","date":1334076894,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int,boolean).mjava","sourceNew":"  /** \n   * utility method for blasting tokenstreams with data to make sure they don't do anything crazy \n   * @param simple true if only ascii strings will be used (try to avoid)\n   */\n  public static void checkRandomData(Random random, Analyzer a, int iterations, boolean simple) throws IOException {\n    checkRandomData(random, a, iterations, 20, simple, true);\n  }\n\n","sourceOld":"  /** \n   * utility method for blasting tokenstreams with data to make sure they don't do anything crazy \n   * @param simple true if only ascii strings will be used (try to avoid)\n   */\n  public static void checkRandomData(Random random, Analyzer a, int iterations, boolean simple) throws IOException {\n    checkRandomData(random, a, iterations, 20, simple);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase#checkRandomData(Random,Analyzer,int,boolean).mjava","sourceNew":"  /** \n   * utility method for blasting tokenstreams with data to make sure they don't do anything crazy \n   * @param simple true if only ascii strings will be used (try to avoid)\n   */\n  public static void checkRandomData(Random random, Analyzer a, int iterations, boolean simple) throws IOException {\n    checkRandomData(random, a, iterations, 20, simple, true);\n  }\n\n","sourceOld":"  /** \n   * utility method for blasting tokenstreams with data to make sure they don't do anything crazy \n   * @param simple true if only ascii strings will be used (try to avoid)\n   */\n  public static void checkRandomData(Random random, Analyzer a, int iterations, boolean simple) throws IOException {\n    checkRandomData(random, a, iterations, 20, simple);\n  }\n\n","bugFix":["47777586dd4c026834be0b2cc454d527cf8884b3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"888c2d6bca1edd8d9293631d6e1d188b036e0f05":["26bd77fc30a420a3e33c85e6fa6b0887eac4b029"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","47777586dd4c026834be0b2cc454d527cf8884b3"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["26bd77fc30a420a3e33c85e6fa6b0887eac4b029","888c2d6bca1edd8d9293631d6e1d188b036e0f05"],"47777586dd4c026834be0b2cc454d527cf8884b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"26bd77fc30a420a3e33c85e6fa6b0887eac4b029":["47777586dd4c026834be0b2cc454d527cf8884b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"]},"commit2Childs":{"888c2d6bca1edd8d9293631d6e1d188b036e0f05":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","47777586dd4c026834be0b2cc454d527cf8884b3"],"47777586dd4c026834be0b2cc454d527cf8884b3":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","26bd77fc30a420a3e33c85e6fa6b0887eac4b029"],"26bd77fc30a420a3e33c85e6fa6b0887eac4b029":["888c2d6bca1edd8d9293631d6e1d188b036e0f05","ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}