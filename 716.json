{"path":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = slave != null && (null == slave.get(\"enable\") || \"true\".equals(slave.get(\"enable\")));\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = master != null && (null == master.get(\"enable\") || \"true\".equals(master.get(\"enable\")));\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize && !replicateOnCommit) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(!replicateOnCommit && replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = slave != null && (null == slave.get(\"enable\") || \"true\".equals(slave.get(\"enable\")));\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = master != null && (null == master.get(\"enable\") || \"true\".equals(master.get(\"enable\")));\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize && !replicateOnCommit) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(!replicateOnCommit && replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = slave != null && (null == slave.get(\"enable\") || \"true\".equals(slave.get(\"enable\")));\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = master != null && (null == master.get(\"enable\") || \"true\".equals(master.get(\"enable\")));\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize && !replicateOnCommit) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(!replicateOnCommit && replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = slave != null && (null == slave.get(\"enable\") || \"true\".equals(slave.get(\"enable\")));\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = master != null && (null == master.get(\"enable\") || \"true\".equals(master.get(\"enable\")));\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize && !replicateOnCommit) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(!replicateOnCommit && replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = slave != null && (null == slave.get(\"enable\") || \"true\".equals(slave.get(\"enable\")));\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = master != null && (null == master.get(\"enable\") || \"true\".equals(master.get(\"enable\")));\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize && !replicateOnCommit) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(!replicateOnCommit && replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd1ac819970b9a31e0ba8db9105e7f40f3120b4e","date":1281878343,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize && !replicateOnCommit) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(!replicateOnCommit && replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = slave != null && (null == slave.get(\"enable\") || \"true\".equals(slave.get(\"enable\")));\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = master != null && (null == master.get(\"enable\") || \"true\".equals(master.get(\"enable\")));\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize && !replicateOnCommit) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(!replicateOnCommit && replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":["3d8a2f376efa71aa3586481085547daf29dc5c6c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"064fca6c24f8c0608a9c2ba2688c31d244c9f262","date":1283790365,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize && !replicateOnCommit) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(!replicateOnCommit && replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":["1d6028dbe4a16095efe9f1651fe1a8e88d683e92","3861b8bad01629233ed55f79b2525724ef8eb3bc","7cdac6591b64f43f87663e70518d79dd137454b4","b5b99d924e3bae842d6e1e1af92474d9247784a5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = slave != null && (null == slave.get(\"enable\") || \"true\".equals(slave.get(\"enable\")));\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = master != null && (null == master.get(\"enable\") || \"true\".equals(master.get(\"enable\")));\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize && !replicateOnCommit) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(!replicateOnCommit && replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eeff6b8391d7b5e70e37193643d76c05a3abf75","date":1302902022,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              // We don't need to save commit points for replication, the SolrDeletionPolicy\n              // always saves the last commit point (and the last optimized commit point, if needed)\n              /***\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n              ***/\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              // We don't need to save commit points for replication, the SolrDeletionPolicy\n              // always saves the last commit point (and the last optimized commit point, if needed)\n              /***\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n              ***/\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              // We don't need to save commit points for replication, the SolrDeletionPolicy\n              // always saves the last commit point (and the last optimized commit point, if needed)\n              /***\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n              ***/\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              // We don't need to save commit points for replication, the SolrDeletionPolicy\n              // always saves the last commit point (and the last optimized commit point, if needed)\n              /***\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n              ***/\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              // We don't need to save commit points for replication, the SolrDeletionPolicy\n              // always saves the last commit point (and the last optimized commit point, if needed)\n              /***\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n              ***/\n            }\n          }\n\n          // reboot the writer on the new index\n          core.getUpdateHandler().newIndexWriter();\n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              // We don't need to save commit points for replication, the SolrDeletionPolicy\n              // always saves the last commit point (and the last optimized commit point, if needed)\n              /***\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n              ***/\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              // We don't need to save commit points for replication, the SolrDeletionPolicy\n              // always saves the last commit point (and the last optimized commit point, if needed)\n              /***\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n              ***/\n            }\n          }\n\n          // reboot the writer on the new index\n          core.getUpdateHandler().newIndexWriter();\n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              // We don't need to save commit points for replication, the SolrDeletionPolicy\n              // always saves the last commit point (and the last optimized commit point, if needed)\n              /***\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n              ***/\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              // We don't need to save commit points for replication, the SolrDeletionPolicy\n              // always saves the last commit point (and the last optimized commit point, if needed)\n              /***\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n              ***/\n            }\n          }\n\n          // reboot the writer on the new index\n          core.getUpdateHandler().newIndexWriter();\n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              // We don't need to save commit points for replication, the SolrDeletionPolicy\n              // always saves the last commit point (and the last optimized commit point, if needed)\n              /***\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n              ***/\n            }\n          }\n          if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n            ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n          } else {\n            LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                    \"Replicate on Startup cannot work.\");\n          } \n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              // We don't need to save commit points for replication, the SolrDeletionPolicy\n              // always saves the last commit point (and the last optimized commit point, if needed)\n              /***\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n              ***/\n            }\n          }\n\n          // reboot the writer on the new index\n          core.getUpdateHandler().newIndexWriter();\n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              // We don't need to save commit points for replication, the SolrDeletionPolicy\n              // always saves the last commit point (and the last optimized commit point, if needed)\n              /***\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n              ***/\n            }\n          }\n\n          // reboot the writer on the new index\n          core.getUpdateHandler().newIndexWriter();\n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              // We don't need to save commit points for replication, the SolrDeletionPolicy\n              // always saves the last commit point (and the last optimized commit point, if needed)\n              /***\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n              ***/\n            }\n          }\n\n          // reboot the writer on the new index\n          core.getUpdateHandler().newIndexWriter();\n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              // We don't need to save commit points for replication, the SolrDeletionPolicy\n              // always saves the last commit point (and the last optimized commit point, if needed)\n              /***\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n              ***/\n            }\n          }\n\n          // reboot the writer on the new index\n          core.getUpdateHandler().newIndexWriter();\n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              // We don't need to save commit points for replication, the SolrDeletionPolicy\n              // always saves the last commit point (and the last optimized commit point, if needed)\n              /***\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n              ***/\n            }\n          }\n\n          // reboot the writer on the new index\n          core.getUpdateHandler().newIndexWriter();\n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core) {\n    this.core = core;\n    registerFileStreamResponseWriter();\n    registerCloseHook();\n    NamedList slave = (NamedList) initArgs.get(\"slave\");\n    boolean enableSlave = isEnabled( slave );\n    if (enableSlave) {\n      tempSnapPuller = snapPuller = new SnapPuller(slave, this, core);\n      isSlave = true;\n    }\n    NamedList master = (NamedList) initArgs.get(\"master\");\n    boolean enableMaster = isEnabled( master );\n    if (enableMaster) {\n      includeConfFiles = (String) master.get(CONF_FILES);\n      if (includeConfFiles != null && includeConfFiles.trim().length() > 0) {\n        List<String> files = Arrays.asList(includeConfFiles.split(\",\"));\n        for (String file : files) {\n          if (file.trim().length() == 0) continue;\n          String[] strs = file.split(\":\");\n          // if there is an alias add it or it is null\n          confFileNameAlias.add(strs[0], strs.length > 1 ? strs[1] : null);\n        }\n        LOG.info(\"Replication enabled for following config files: \" + includeConfFiles);\n      }\n      List backup = master.getAll(\"backupAfter\");\n      boolean backupOnCommit = backup.contains(\"commit\");\n      boolean backupOnOptimize = !backupOnCommit && backup.contains(\"optimize\");\n      List replicateAfter = master.getAll(REPLICATE_AFTER);\n      replicateOnCommit = replicateAfter.contains(\"commit\");\n      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains(\"optimize\");\n\n      // if we only want to replicate on optimize, we need the deletion policy to\n      // save the last optimized commit point.\n      if (replicateOnOptimize) {\n        IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();\n        IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();\n        if (policy instanceof SolrDeletionPolicy) {\n          SolrDeletionPolicy solrPolicy = (SolrDeletionPolicy)policy;\n          if (solrPolicy.getMaxOptimizedCommitsToKeep() < 1) {\n            solrPolicy.setMaxOptimizedCommitsToKeep(1);\n          }\n        } else {\n          LOG.warn(\"Replication can't call setMaxOptimizedCommitsToKeep on \" + policy);\n        }\n      }\n\n      if (replicateOnOptimize || backupOnOptimize) {\n        core.getUpdateHandler().registerOptimizeCallback(getEventListener(backupOnOptimize, replicateOnOptimize));\n      }\n      if (replicateOnCommit || backupOnCommit) {\n        replicateOnCommit = true;\n        core.getUpdateHandler().registerCommitCallback(getEventListener(backupOnCommit, replicateOnCommit));\n      }\n      if (replicateAfter.contains(\"startup\")) {\n        replicateOnStart = true;\n        RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n        try {\n          IndexReader reader = s==null ? null : s.get().getIndexReader();\n          if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n            try {\n              if(replicateOnOptimize){\n                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                for (IndexCommit ic : commits) {\n                  if(ic.isOptimized()){\n                    if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                  }\n                }\n              } else{\n                indexCommitPoint = reader.getIndexCommit();\n              }\n            } finally {\n              // We don't need to save commit points for replication, the SolrDeletionPolicy\n              // always saves the last commit point (and the last optimized commit point, if needed)\n              /***\n              if(indexCommitPoint != null){\n                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n              }\n              ***/\n            }\n          }\n\n          // reboot the writer on the new index\n          core.getUpdateHandler().newIndexWriter();\n\n        } catch (IOException e) {\n          LOG.warn(\"Unable to get IndexCommit on startup\", e);\n        } finally {\n          if (s!=null) s.decref();\n        }\n      }\n      String reserve = (String) master.get(RESERVE);\n      if (reserve != null && !reserve.trim().equals(\"\")) {\n        reserveCommitDuration = SnapPuller.readInterval(reserve);\n      }\n      LOG.info(\"Commits will be reserved for  \" + reserveCommitDuration);\n      isMaster = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["7a71a0b2d4be2299a163f60626729852d81a8e02","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","064fca6c24f8c0608a9c2ba2688c31d244c9f262"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["868da859b43505d9d2a023bfeae6dd0c795f5295","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["5eeff6b8391d7b5e70e37193643d76c05a3abf75","7a71a0b2d4be2299a163f60626729852d81a8e02"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","7a71a0b2d4be2299a163f60626729852d81a8e02"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"5eeff6b8391d7b5e70e37193643d76c05a3abf75":["c220849f876de24a79f756f65b3eb045db59f63f"],"c220849f876de24a79f756f65b3eb045db59f63f":["064fca6c24f8c0608a9c2ba2688c31d244c9f262"],"dd1ac819970b9a31e0ba8db9105e7f40f3120b4e":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c220849f876de24a79f756f65b3eb045db59f63f","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["064fca6c24f8c0608a9c2ba2688c31d244c9f262","c220849f876de24a79f756f65b3eb045db59f63f"],"064fca6c24f8c0608a9c2ba2688c31d244c9f262":["dd1ac819970b9a31e0ba8db9105e7f40f3120b4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1da8d55113b689b06716246649de6f62430f15c0":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","dd1ac819970b9a31e0ba8db9105e7f40f3120b4e"],"5eeff6b8391d7b5e70e37193643d76c05a3abf75":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","d083e83f225b11e5fdd900e83d26ddb385b6955c","7a71a0b2d4be2299a163f60626729852d81a8e02","a3776dccca01c11e7046323cfad46a3b4a471233"],"c220849f876de24a79f756f65b3eb045db59f63f":["5eeff6b8391d7b5e70e37193643d76c05a3abf75","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"dd1ac819970b9a31e0ba8db9105e7f40f3120b4e":["064fca6c24f8c0608a9c2ba2688c31d244c9f262"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"064fca6c24f8c0608a9c2ba2688c31d244c9f262":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}