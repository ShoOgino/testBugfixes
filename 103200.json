{"path":"lucene/core/src/java/org/apache/lucene/store/RateLimitedDirectoryWrapper#setRateLimiter(RateLimiter,Context).mjava","commits":[{"id":"e4583d4aac44f313f9af74ab6d81baab3f976232","date":1352409883,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RateLimitedDirectoryWrapper#setRateLimiter(RateLimiter,Context).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the rate limiter to be used to limit (approx) MB/sec allowed by all IO\n   * performed with the given {@link Context context}. Pass <code>null</code> to\n   * have no limit.\n   * \n   * <p>\n   * Passing an instance of rate limiter compared to setting it using\n   * {@link #setMaxWriteMBPerSec(Double, org.apache.lucene.store.IOContext.Context)}\n   * allows to use the same limiter instance across several directories globally\n   * limiting IO across them.\n   * \n   * @throws IllegalArgumentException\n   *           if context is <code>null</code>\n   * @throws AlreadyClosedException if the {@link Directory} is already closed           \n   * @lucene.experimental\n   */\n  public void setRateLimiter(RateLimiter mergeWriteRateLimiter,\n      Context context) {\n    ensureOpen();\n    if (context == null) {\n      throw new IllegalArgumentException(\"Context must not be null\");\n    }\n    contextRateLimiters[context.ordinal()] = mergeWriteRateLimiter;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5500ab53960bba8c27e8c3d129658595e9626f78","date":1352413226,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RateLimitedDirectoryWrapper#setRateLimiter(RateLimiter,Context).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RateLimitedDirectoryWrapper#setRateLimiter(RateLimiter,Context).mjava","sourceNew":"  /**\n   * Sets the rate limiter to be used to limit (approx) MB/sec allowed by all IO\n   * performed with the given {@link IOContext.Context context}. Pass <code>null</code> to\n   * have no limit.\n   * \n   * <p>\n   * Passing an instance of rate limiter compared to setting it using\n   * {@link #setMaxWriteMBPerSec(Double, IOContext.Context)}\n   * allows to use the same limiter instance across several directories globally\n   * limiting IO across them.\n   * \n   * @throws IllegalArgumentException\n   *           if context is <code>null</code>\n   * @throws AlreadyClosedException if the {@link Directory} is already closed           \n   * @lucene.experimental\n   */\n  public void setRateLimiter(RateLimiter mergeWriteRateLimiter,\n      Context context) {\n    ensureOpen();\n    if (context == null) {\n      throw new IllegalArgumentException(\"Context must not be null\");\n    }\n    contextRateLimiters[context.ordinal()] = mergeWriteRateLimiter;\n  }\n\n","sourceOld":"  /**\n   * Sets the rate limiter to be used to limit (approx) MB/sec allowed by all IO\n   * performed with the given {@link Context context}. Pass <code>null</code> to\n   * have no limit.\n   * \n   * <p>\n   * Passing an instance of rate limiter compared to setting it using\n   * {@link #setMaxWriteMBPerSec(Double, org.apache.lucene.store.IOContext.Context)}\n   * allows to use the same limiter instance across several directories globally\n   * limiting IO across them.\n   * \n   * @throws IllegalArgumentException\n   *           if context is <code>null</code>\n   * @throws AlreadyClosedException if the {@link Directory} is already closed           \n   * @lucene.experimental\n   */\n  public void setRateLimiter(RateLimiter mergeWriteRateLimiter,\n      Context context) {\n    ensureOpen();\n    if (context == null) {\n      throw new IllegalArgumentException(\"Context must not be null\");\n    }\n    contextRateLimiters[context.ordinal()] = mergeWriteRateLimiter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RateLimitedDirectoryWrapper#setRateLimiter(RateLimiter,Context).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the rate limiter to be used to limit (approx) MB/sec allowed by all IO\n   * performed with the given {@link IOContext.Context context}. Pass <code>null</code> to\n   * have no limit.\n   * \n   * <p>\n   * Passing an instance of rate limiter compared to setting it using\n   * {@link #setMaxWriteMBPerSec(Double, IOContext.Context)}\n   * allows to use the same limiter instance across several directories globally\n   * limiting IO across them.\n   * \n   * @throws IllegalArgumentException\n   *           if context is <code>null</code>\n   * @throws AlreadyClosedException if the {@link Directory} is already closed           \n   * @lucene.experimental\n   */\n  public void setRateLimiter(RateLimiter mergeWriteRateLimiter,\n      Context context) {\n    ensureOpen();\n    if (context == null) {\n      throw new IllegalArgumentException(\"Context must not be null\");\n    }\n    contextRateLimiters[context.ordinal()] = mergeWriteRateLimiter;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/RateLimitedDirectoryWrapper#setRateLimiter(RateLimiter,Context).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the rate limiter to be used to limit (approx) MB/sec allowed by all IO\n   * performed with the given {@link IOContext.Context context}. Pass <code>null</code> to\n   * have no limit.\n   * \n   * <p>\n   * Passing an instance of rate limiter compared to setting it using\n   * {@link #setMaxWriteMBPerSec(Double, IOContext.Context)}\n   * allows to use the same limiter instance across several directories globally\n   * limiting IO across them.\n   * \n   * @throws IllegalArgumentException\n   *           if context is <code>null</code>\n   * @throws AlreadyClosedException if the {@link Directory} is already closed           \n   * @lucene.experimental\n   */\n  public void setRateLimiter(RateLimiter mergeWriteRateLimiter,\n      Context context) {\n    ensureOpen();\n    if (context == null) {\n      throw new IllegalArgumentException(\"Context must not be null\");\n    }\n    contextRateLimiters[context.ordinal()] = mergeWriteRateLimiter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e4583d4aac44f313f9af74ab6d81baab3f976232":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5500ab53960bba8c27e8c3d129658595e9626f78"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["5500ab53960bba8c27e8c3d129658595e9626f78"],"5500ab53960bba8c27e8c3d129658595e9626f78":["e4583d4aac44f313f9af74ab6d81baab3f976232"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5faf65b6692f15cca0f87bf8666c87899afc619f"]},"commit2Childs":{"e4583d4aac44f313f9af74ab6d81baab3f976232":["5500ab53960bba8c27e8c3d129658595e9626f78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4583d4aac44f313f9af74ab6d81baab3f976232","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"5faf65b6692f15cca0f87bf8666c87899afc619f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5500ab53960bba8c27e8c3d129658595e9626f78":["407687e67faf6e1f02a211ca078d8e3eed631027","5faf65b6692f15cca0f87bf8666c87899afc619f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}