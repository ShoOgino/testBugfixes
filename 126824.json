{"path":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTest(File,boolean,String).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTest(File,boolean,String).mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTest(File,boolean,String).mjava","sourceNew":"  private void doIndexAndSearchTest(File file, boolean setBZCompress,\n      String bz2CompressVal) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (setBZCompress) {\n      props.setProperty(\"bzip.compression\", bz2CompressVal);\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(1, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    searcher.close();\n  }\n\n","sourceOld":"  private void doIndexAndSearchTest(File file, boolean setBZCompress,\n      String bz2CompressVal) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (setBZCompress) {\n      props.setProperty(\"bzip.compression\", bz2CompressVal);\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(1, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTest(File,boolean,String).mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTest(File,boolean,String).mjava","sourceNew":"  private void doIndexAndSearchTest(File file, boolean setBZCompress,\n      String bz2CompressVal) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (setBZCompress) {\n      props.setProperty(\"bzip.compression\", bz2CompressVal);\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(1, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    searcher.close();\n  }\n\n","sourceOld":"  private void doIndexAndSearchTest(File file, boolean setBZCompress,\n      String bz2CompressVal) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (setBZCompress) {\n      props.setProperty(\"bzip.compression\", bz2CompressVal);\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(1, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTest(File,boolean,String).mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTest(File,boolean,String).mjava","sourceNew":"  private void doIndexAndSearchTest(File file, boolean setBZCompress,\n      String bz2CompressVal) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (setBZCompress) {\n      props.setProperty(\"bzip.compression\", bz2CompressVal);\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(1, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    searcher.close();\n  }\n\n","sourceOld":"  private void doIndexAndSearchTest(File file, boolean setBZCompress,\n      String bz2CompressVal) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (setBZCompress) {\n      props.setProperty(\"bzip.compression\", bz2CompressVal);\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(1, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d8d7a81c29a594c8d28e66f3a9029ed7458af42","date":1300719582,"type":5,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTestWithRepeats(File,boolean,String,Class[#-extends-LineParser],int,String).mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTest(File,boolean,String).mjava","sourceNew":"  private void doIndexAndSearchTestWithRepeats(File file, boolean setBZCompress,\n      String bz2CompressVal, Class<? extends LineParser> lineParserClass, int numAdds, String storedField) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (setBZCompress) {\n      props.setProperty(\"bzip.compression\", bz2CompressVal);\n    }\n    if (lineParserClass != null) {\n      props.setProperty(\"line.parser\", lineParserClass.getName());\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    props.setProperty(\"doc.stored\", \"true\");\n    props.setProperty(\"doc.index.props\", \"true\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    for (int i=0; i<numAdds; i++) {\n      tasks.addTask(new AddDocTask(runData));\n    }\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(numAdds, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    \n    if (storedField==null) {\n      storedField = DocMaker.BODY_FIELD; // added to all docs and satisfies field-name == value\n    }\n    assertEquals(\"Wrong field value\", storedField, searcher.doc(0).get(storedField));\n\n    searcher.close();\n  }\n\n","sourceOld":"  private void doIndexAndSearchTest(File file, boolean setBZCompress,\n      String bz2CompressVal) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (setBZCompress) {\n      props.setProperty(\"bzip.compression\", bz2CompressVal);\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(1, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":["11d282c3fddbb2c824673a792a8b72f6340cb300"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTest(File,boolean,String).mjava","sourceNew":null,"sourceOld":"  private void doIndexAndSearchTest(File file, boolean setBZCompress,\n      String bz2CompressVal) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (setBZCompress) {\n      props.setProperty(\"bzip.compression\", bz2CompressVal);\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(1, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTest(File,boolean,String).mjava","sourceNew":null,"sourceOld":"  private void doIndexAndSearchTest(File file, boolean setBZCompress,\n      String bz2CompressVal) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (setBZCompress) {\n      props.setProperty(\"bzip.compression\", bz2CompressVal);\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", MockAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(1, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["868da859b43505d9d2a023bfeae6dd0c795f5295","7d8d7a81c29a594c8d28e66f3a9029ed7458af42"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","7d8d7a81c29a594c8d28e66f3a9029ed7458af42"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d8d7a81c29a594c8d28e66f3a9029ed7458af42":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d8d7a81c29a594c8d28e66f3a9029ed7458af42"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","7d8d7a81c29a594c8d28e66f3a9029ed7458af42","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"7d8d7a81c29a594c8d28e66f3a9029ed7458af42":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}