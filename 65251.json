{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","commits":[{"id":"746e3645169db50c8f53252b30d6bc9ac21dea7c","date":1357597773,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,boolean,int).mjava","sourceNew":"    @Override\n    public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n      assert fieldSeen(field.name);\n      assert DocValues.isBytes(field.getDocValuesType());\n      assert !isNorms;\n      int maxLength = 0;\n      for(BytesRef value : values) {\n        maxLength = Math.max(maxLength, value.length);\n      }\n      writeFieldEntry(field);\n\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      int numDocsWritten = 0;\n      for(BytesRef value : values) {\n        // write length\n        SimpleTextUtil.write(data, LENGTH);\n        SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n        SimpleTextUtil.writeNewline(data);\n          \n        // write bytes -- don't use SimpleText.write\n        // because it escapes:\n        data.writeBytes(value.bytes, value.offset, value.length);\n\n        // pad to fit\n        for (int i = value.length; i < maxLength; i++) {\n          data.writeByte((byte)' ');\n        }\n        SimpleTextUtil.writeNewline(data);\n        numDocsWritten++;\n      }\n\n      assert numDocs == numDocsWritten;\n    }\n\n","sourceOld":"    @Override\n    public BinaryDocValuesConsumer addBinaryField(FieldInfo field, boolean fixedLength, final int maxLength) throws IOException {\n      assert fieldSeen(field.name);\n      assert DocValues.isBytes(field.getDocValuesType());\n      assert !isNorms;\n      writeFieldEntry(field);\n      // write fixedlength\n      SimpleTextUtil.write(data, FIXEDLENGTH);\n      SimpleTextUtil.write(data, Boolean.toString(fixedLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n      \n      return new BinaryDocValuesConsumer() {\n        int numDocsWritten = 0;\n        \n        @Override\n        public void add(BytesRef value) throws IOException {\n          // write length\n          SimpleTextUtil.write(data, LENGTH);\n          SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n          SimpleTextUtil.writeNewline(data);\n          \n          // write bytes -- don't use SimpleText.write\n          // because it escapes:\n          data.writeBytes(value.bytes, value.offset, value.length);\n\n          // pad to fit\n          for (int i = value.length; i < maxLength; i++) {\n            data.writeByte((byte)' ');\n          }\n          SimpleTextUtil.writeNewline(data);\n          numDocsWritten++;\n        }\n\n        @Override\n        public void finish() throws IOException {\n          assert numDocs == numDocsWritten;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"    @Override\n    public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n      assert fieldSeen(field.name);\n      assert field.getDocValuesType() == DocValuesType.BINARY;\n      assert !isNorms;\n      int maxLength = 0;\n      for(BytesRef value : values) {\n        maxLength = Math.max(maxLength, value.length);\n      }\n      writeFieldEntry(field);\n\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      int numDocsWritten = 0;\n      for(BytesRef value : values) {\n        // write length\n        SimpleTextUtil.write(data, LENGTH);\n        SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n        SimpleTextUtil.writeNewline(data);\n          \n        // write bytes -- don't use SimpleText.write\n        // because it escapes:\n        data.writeBytes(value.bytes, value.offset, value.length);\n\n        // pad to fit\n        for (int i = value.length; i < maxLength; i++) {\n          data.writeByte((byte)' ');\n        }\n        SimpleTextUtil.writeNewline(data);\n        numDocsWritten++;\n      }\n\n      assert numDocs == numDocsWritten;\n    }\n\n","sourceOld":"    @Override\n    public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n      assert fieldSeen(field.name);\n      assert DocValues.isBytes(field.getDocValuesType());\n      assert !isNorms;\n      int maxLength = 0;\n      for(BytesRef value : values) {\n        maxLength = Math.max(maxLength, value.length);\n      }\n      writeFieldEntry(field);\n\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      int numDocsWritten = 0;\n      for(BytesRef value : values) {\n        // write length\n        SimpleTextUtil.write(data, LENGTH);\n        SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n        SimpleTextUtil.writeNewline(data);\n          \n        // write bytes -- don't use SimpleText.write\n        // because it escapes:\n        data.writeBytes(value.bytes, value.offset, value.length);\n\n        // pad to fit\n        for (int i = value.length; i < maxLength; i++) {\n          data.writeByte((byte)' ');\n        }\n        SimpleTextUtil.writeNewline(data);\n        numDocsWritten++;\n      }\n\n      assert numDocs == numDocsWritten;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesWriter#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"    @Override\n    public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n      assert fieldSeen(field.name);\n      assert field.getDocValuesType() == DocValuesType.BINARY;\n      assert !isNorms;\n      int maxLength = 0;\n      for(BytesRef value : values) {\n        maxLength = Math.max(maxLength, value.length);\n      }\n      writeFieldEntry(field);\n\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      int numDocsWritten = 0;\n      for(BytesRef value : values) {\n        // write length\n        SimpleTextUtil.write(data, LENGTH);\n        SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n        SimpleTextUtil.writeNewline(data);\n          \n        // write bytes -- don't use SimpleText.write\n        // because it escapes:\n        data.writeBytes(value.bytes, value.offset, value.length);\n\n        // pad to fit\n        for (int i = value.length; i < maxLength; i++) {\n          data.writeByte((byte)' ');\n        }\n        SimpleTextUtil.writeNewline(data);\n        numDocsWritten++;\n      }\n\n      assert numDocs == numDocsWritten;\n    }\n\n","sourceOld":"    @Override\n    public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n      assert fieldSeen(field.name);\n      assert field.getDocValuesType() == DocValuesType.BINARY;\n      assert !isNorms;\n      int maxLength = 0;\n      for(BytesRef value : values) {\n        maxLength = Math.max(maxLength, value.length);\n      }\n      writeFieldEntry(field);\n\n      // write maxLength\n      SimpleTextUtil.write(data, MAXLENGTH);\n      SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n      SimpleTextUtil.writeNewline(data);\n      \n      int maxBytesLength = Long.toString(maxLength).length();\n      StringBuilder sb = new StringBuilder();\n      for (int i = 0; i < maxBytesLength; i++) {\n        sb.append('0');\n      }\n      // write our pattern for encoding lengths\n      SimpleTextUtil.write(data, PATTERN);\n      SimpleTextUtil.write(data, sb.toString(), scratch);\n      SimpleTextUtil.writeNewline(data);\n      final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n      int numDocsWritten = 0;\n      for(BytesRef value : values) {\n        // write length\n        SimpleTextUtil.write(data, LENGTH);\n        SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n        SimpleTextUtil.writeNewline(data);\n          \n        // write bytes -- don't use SimpleText.write\n        // because it escapes:\n        data.writeBytes(value.bytes, value.offset, value.length);\n\n        // pad to fit\n        for (int i = value.length; i < maxLength; i++) {\n          data.writeByte((byte)' ');\n        }\n        SimpleTextUtil.writeNewline(data);\n        numDocsWritten++;\n      }\n\n      assert numDocs == numDocsWritten;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["0837ab0472feecb3a54260729d845f839e1cbd72"],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":[],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["746e3645169db50c8f53252b30d6bc9ac21dea7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0837ab0472feecb3a54260729d845f839e1cbd72":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}