{"path":"backwards/src/java/org/apache/lucene/store/BufferedIndexInput#readBytes(byte[],int,int,boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/store/BufferedIndexInput#readBytes(byte[],int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void readBytes(byte[] b, int offset, int len, boolean useBuffer) throws IOException {\n\n    if(len <= (bufferLength-bufferPosition)){\n      // the buffer contains enough data to satisfy this request\n      if(len>0) // to allow b to be null if len is 0...\n        System.arraycopy(buffer, bufferPosition, b, offset, len);\n      bufferPosition+=len;\n    } else {\n      // the buffer does not have enough data. First serve all we've got.\n      int available = bufferLength - bufferPosition;\n      if(available > 0){\n        System.arraycopy(buffer, bufferPosition, b, offset, available);\n        offset += available;\n        len -= available;\n        bufferPosition += available;\n      }\n      // and now, read the remaining 'len' bytes:\n      if (useBuffer && len<bufferSize){\n        // If the amount left to read is small enough, and\n        // we are allowed to use our buffer, do it in the usual\n        // buffered way: fill the buffer and copy from it:\n        refill();\n        if(bufferLength<len){\n          // Throw an exception when refill() could not read len bytes:\n          System.arraycopy(buffer, 0, b, offset, bufferLength);\n          throw new IOException(\"read past EOF\");\n        } else {\n          System.arraycopy(buffer, 0, b, offset, len);\n          bufferPosition=len;\n        }\n      } else {\n        // The amount left to read is larger than the buffer\n        // or we've been asked to not use our buffer -\n        // there's no performance reason not to read it all\n        // at once. Note that unlike the previous code of\n        // this function, there is no need to do a seek\n        // here, because there's no need to reread what we\n        // had in the buffer.\n        long after = bufferStart+bufferPosition+len;\n        if(after > length())\n          throw new IOException(\"read past EOF\");\n        readInternal(b, offset, len);\n        bufferStart = after;\n        bufferPosition = 0;\n        bufferLength = 0;                    // trigger refill() on read\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/store/BufferedIndexInput#readBytes(byte[],int,int,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/store/BufferedIndexInput#readBytes(byte[],int,int,boolean).mjava","sourceNew":"  @Override\n  public void readBytes(byte[] b, int offset, int len, boolean useBuffer) throws IOException {\n\n    if(len <= (bufferLength-bufferPosition)){\n      // the buffer contains enough data to satisfy this request\n      if(len>0) // to allow b to be null if len is 0...\n        System.arraycopy(buffer, bufferPosition, b, offset, len);\n      bufferPosition+=len;\n    } else {\n      // the buffer does not have enough data. First serve all we've got.\n      int available = bufferLength - bufferPosition;\n      if(available > 0){\n        System.arraycopy(buffer, bufferPosition, b, offset, available);\n        offset += available;\n        len -= available;\n        bufferPosition += available;\n      }\n      // and now, read the remaining 'len' bytes:\n      if (useBuffer && len<bufferSize){\n        // If the amount left to read is small enough, and\n        // we are allowed to use our buffer, do it in the usual\n        // buffered way: fill the buffer and copy from it:\n        refill();\n        if(bufferLength<len){\n          // Throw an exception when refill() could not read len bytes:\n          System.arraycopy(buffer, 0, b, offset, bufferLength);\n          throw new IOException(\"read past EOF\");\n        } else {\n          System.arraycopy(buffer, 0, b, offset, len);\n          bufferPosition=len;\n        }\n      } else {\n        // The amount left to read is larger than the buffer\n        // or we've been asked to not use our buffer -\n        // there's no performance reason not to read it all\n        // at once. Note that unlike the previous code of\n        // this function, there is no need to do a seek\n        // here, because there's no need to reread what we\n        // had in the buffer.\n        long after = bufferStart+bufferPosition+len;\n        if(after > length())\n          throw new IOException(\"read past EOF\");\n        readInternal(b, offset, len);\n        bufferStart = after;\n        bufferPosition = 0;\n        bufferLength = 0;                    // trigger refill() on read\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readBytes(byte[] b, int offset, int len, boolean useBuffer) throws IOException {\n\n    if(len <= (bufferLength-bufferPosition)){\n      // the buffer contains enough data to satisfy this request\n      if(len>0) // to allow b to be null if len is 0...\n        System.arraycopy(buffer, bufferPosition, b, offset, len);\n      bufferPosition+=len;\n    } else {\n      // the buffer does not have enough data. First serve all we've got.\n      int available = bufferLength - bufferPosition;\n      if(available > 0){\n        System.arraycopy(buffer, bufferPosition, b, offset, available);\n        offset += available;\n        len -= available;\n        bufferPosition += available;\n      }\n      // and now, read the remaining 'len' bytes:\n      if (useBuffer && len<bufferSize){\n        // If the amount left to read is small enough, and\n        // we are allowed to use our buffer, do it in the usual\n        // buffered way: fill the buffer and copy from it:\n        refill();\n        if(bufferLength<len){\n          // Throw an exception when refill() could not read len bytes:\n          System.arraycopy(buffer, 0, b, offset, bufferLength);\n          throw new IOException(\"read past EOF\");\n        } else {\n          System.arraycopy(buffer, 0, b, offset, len);\n          bufferPosition=len;\n        }\n      } else {\n        // The amount left to read is larger than the buffer\n        // or we've been asked to not use our buffer -\n        // there's no performance reason not to read it all\n        // at once. Note that unlike the previous code of\n        // this function, there is no need to do a seek\n        // here, because there's no need to reread what we\n        // had in the buffer.\n        long after = bufferStart+bufferPosition+len;\n        if(after > length())\n          throw new IOException(\"read past EOF\");\n        readInternal(b, offset, len);\n        bufferStart = after;\n        bufferPosition = 0;\n        bufferLength = 0;                    // trigger refill() on read\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}