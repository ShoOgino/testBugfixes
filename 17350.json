{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#fillTaxonomyCheckPaths(TaxonomyWriter).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#fillTaxonomyCheckPaths(TaxonomyWriter).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#fillTaxonomyCheckPaths(TaxonomyWriter).mjava","sourceNew":"  /**\n   * fillTaxonomyCheckPaths adds the categories in the categories[] array,\n   * and asserts that the additions return exactly paths specified in\n   * expectedPaths[]. This is the same add fillTaxonomy() but also checks\n   * the correctness of getParent(), not just addCategory().\n   * Note that this assumes that fillTaxonomyCheckPaths() is called on an empty\n   * taxonomy index. Calling it after something else was already added to the\n   * taxonomy index will surely have this method fail.\n   */\n  public static void fillTaxonomyCheckPaths(TaxonomyWriter tw) throws IOException {\n    for (int i = 0; i < categories.length; i++) {\n      int ordinal = tw.addCategory(new CategoryPath(categories[i]));\n      int expectedOrdinal = expectedPaths[i][expectedPaths[i].length-1];\n      if (ordinal!=expectedOrdinal) {\n        fail(\"For category \"+showcat(categories[i])+\" expected ordinal \"+\n            expectedOrdinal+\", but got \"+ordinal);\n      }\n      for (int j=expectedPaths[i].length-2; j>=0; j--) {\n        ordinal = tw.getParent(ordinal);\n        expectedOrdinal = expectedPaths[i][j];\n        if (ordinal!=expectedOrdinal) {\n          fail(\"For category \"+showcat(categories[i])+\" expected ancestor level \"+\n              (expectedPaths[i].length-1-j)+\" was \"+expectedOrdinal+\n              \", but got \"+ordinal);\n        }\n      }    \n    }\n  }\n\n","sourceOld":"  /**\n   * fillTaxonomyCheckPaths adds the categories in the categories[] array,\n   * and asserts that the additions return exactly paths specified in\n   * expectedPaths[]. This is the same add fillTaxonomy() but also checks\n   * the correctness of getParent(), not just addCategory().\n   * Note that this assumes that fillTaxonomyCheckPaths() is called on an empty\n   * taxonomy index. Calling it after something else was already added to the\n   * taxonomy index will surely have this method fail.\n   */\n  public static void fillTaxonomyCheckPaths(TaxonomyWriter tw) throws IOException {\n    for (int i = 0; i < categories.length; i++) {\n      int ordinal = tw.addCategory(new CategoryPath(categories[i]));\n      int expectedOrdinal = expectedPaths[i][expectedPaths[i].length-1];\n      if (ordinal!=expectedOrdinal) {\n        fail(\"For category \"+showcat(categories[i])+\" expected ordinal \"+\n            expectedOrdinal+\", but got \"+ordinal);\n      }\n      for (int j=expectedPaths[i].length-2; j>=0; j--) {\n        ordinal = tw.getParent(ordinal);\n        expectedOrdinal = expectedPaths[i][j];\n        if (ordinal!=expectedOrdinal) {\n          fail(\"For category \"+showcat(categories[i])+\" expected ancestor level \"+\n              (expectedPaths[i].length-1-j)+\" was \"+expectedOrdinal+\n              \", but got \"+ordinal);\n        }\n      }    \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#fillTaxonomyCheckPaths(TaxonomyWriter).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#fillTaxonomyCheckPaths(TaxonomyWriter).mjava","sourceNew":"  /**\n   * fillTaxonomyCheckPaths adds the categories in the categories[] array,\n   * and asserts that the additions return exactly paths specified in\n   * expectedPaths[]. This is the same add fillTaxonomy() but also checks\n   * the correctness of getParent(), not just addCategory().\n   * Note that this assumes that fillTaxonomyCheckPaths() is called on an empty\n   * taxonomy index. Calling it after something else was already added to the\n   * taxonomy index will surely have this method fail.\n   */\n  public static void fillTaxonomyCheckPaths(TaxonomyWriter tw) throws IOException {\n    for (int i = 0; i < categories.length; i++) {\n      int ordinal = tw.addCategory(new FacetLabel(categories[i]));\n      int expectedOrdinal = expectedPaths[i][expectedPaths[i].length-1];\n      if (ordinal!=expectedOrdinal) {\n        fail(\"For category \"+showcat(categories[i])+\" expected ordinal \"+\n            expectedOrdinal+\", but got \"+ordinal);\n      }\n      for (int j=expectedPaths[i].length-2; j>=0; j--) {\n        ordinal = tw.getParent(ordinal);\n        expectedOrdinal = expectedPaths[i][j];\n        if (ordinal!=expectedOrdinal) {\n          fail(\"For category \"+showcat(categories[i])+\" expected ancestor level \"+\n              (expectedPaths[i].length-1-j)+\" was \"+expectedOrdinal+\n              \", but got \"+ordinal);\n        }\n      }    \n    }\n  }\n\n","sourceOld":"  /**\n   * fillTaxonomyCheckPaths adds the categories in the categories[] array,\n   * and asserts that the additions return exactly paths specified in\n   * expectedPaths[]. This is the same add fillTaxonomy() but also checks\n   * the correctness of getParent(), not just addCategory().\n   * Note that this assumes that fillTaxonomyCheckPaths() is called on an empty\n   * taxonomy index. Calling it after something else was already added to the\n   * taxonomy index will surely have this method fail.\n   */\n  public static void fillTaxonomyCheckPaths(TaxonomyWriter tw) throws IOException {\n    for (int i = 0; i < categories.length; i++) {\n      int ordinal = tw.addCategory(new CategoryPath(categories[i]));\n      int expectedOrdinal = expectedPaths[i][expectedPaths[i].length-1];\n      if (ordinal!=expectedOrdinal) {\n        fail(\"For category \"+showcat(categories[i])+\" expected ordinal \"+\n            expectedOrdinal+\", but got \"+ordinal);\n      }\n      for (int j=expectedPaths[i].length-2; j>=0; j--) {\n        ordinal = tw.getParent(ordinal);\n        expectedOrdinal = expectedPaths[i][j];\n        if (ordinal!=expectedOrdinal) {\n          fail(\"For category \"+showcat(categories[i])+\" expected ancestor level \"+\n              (expectedPaths[i].length-1-j)+\" was \"+expectedOrdinal+\n              \", but got \"+ordinal);\n        }\n      }    \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#fillTaxonomyCheckPaths(TaxonomyWriter).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#fillTaxonomyCheckPaths(TaxonomyWriter).mjava","sourceNew":"  /**\n   * fillTaxonomyCheckPaths adds the categories in the categories[] array,\n   * and asserts that the additions return exactly paths specified in\n   * expectedPaths[]. This is the same add fillTaxonomy() but also checks\n   * the correctness of getParent(), not just addCategory().\n   * Note that this assumes that fillTaxonomyCheckPaths() is called on an empty\n   * taxonomy index. Calling it after something else was already added to the\n   * taxonomy index will surely have this method fail.\n   */\n  public static void fillTaxonomyCheckPaths(TaxonomyWriter tw) throws IOException {\n    for (int i = 0; i < categories.length; i++) {\n      int ordinal = tw.addCategory(new FacetLabel(categories[i]));\n      int expectedOrdinal = expectedPaths[i][expectedPaths[i].length-1];\n      if (ordinal!=expectedOrdinal) {\n        fail(\"For category \"+showcat(categories[i])+\" expected ordinal \"+\n            expectedOrdinal+\", but got \"+ordinal);\n      }\n      for (int j=expectedPaths[i].length-2; j>=0; j--) {\n        ordinal = tw.getParent(ordinal);\n        expectedOrdinal = expectedPaths[i][j];\n        if (ordinal!=expectedOrdinal) {\n          fail(\"For category \"+showcat(categories[i])+\" expected ancestor level \"+\n              (expectedPaths[i].length-1-j)+\" was \"+expectedOrdinal+\n              \", but got \"+ordinal);\n        }\n      }    \n    }\n  }\n\n","sourceOld":"  /**\n   * fillTaxonomyCheckPaths adds the categories in the categories[] array,\n   * and asserts that the additions return exactly paths specified in\n   * expectedPaths[]. This is the same add fillTaxonomy() but also checks\n   * the correctness of getParent(), not just addCategory().\n   * Note that this assumes that fillTaxonomyCheckPaths() is called on an empty\n   * taxonomy index. Calling it after something else was already added to the\n   * taxonomy index will surely have this method fail.\n   */\n  public static void fillTaxonomyCheckPaths(TaxonomyWriter tw) throws IOException {\n    for (int i = 0; i < categories.length; i++) {\n      int ordinal = tw.addCategory(new CategoryPath(categories[i]));\n      int expectedOrdinal = expectedPaths[i][expectedPaths[i].length-1];\n      if (ordinal!=expectedOrdinal) {\n        fail(\"For category \"+showcat(categories[i])+\" expected ordinal \"+\n            expectedOrdinal+\", but got \"+ordinal);\n      }\n      for (int j=expectedPaths[i].length-2; j>=0; j--) {\n        ordinal = tw.getParent(ordinal);\n        expectedOrdinal = expectedPaths[i][j];\n        if (ordinal!=expectedOrdinal) {\n          fail(\"For category \"+showcat(categories[i])+\" expected ancestor level \"+\n              (expectedPaths[i].length-1-j)+\" was \"+expectedOrdinal+\n              \", but got \"+ordinal);\n        }\n      }    \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}