{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoModelTest#testBasicCircle().mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoModelTest#testBasicCircle().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoModelTest#testBasicCircle().mjava","sourceNew":"  @Test\n  public void testBasicCircle() {\n    // The point of this test is just to make sure nothing blows up doing normal things with a quite non-spherical model\n    // Make sure that the north pole is in the circle, and south pole isn't\n    final GeoPoint northPole = new GeoPoint(scaledModel, Math.PI * 0.5, 0.0);\n    final GeoPoint southPole = new GeoPoint(scaledModel, -Math.PI * 0.5, 0.0);\n    final GeoPoint point1 = new GeoPoint(scaledModel, Math.PI * 0.25, 0.0);\n    final GeoPoint point2 = new GeoPoint(scaledModel, Math.PI * 0.125, 0.0);\n    \n    GeoCircle circle = new GeoStandardCircle(scaledModel, Math.PI * 0.5, 0.0, 0.01);\n    assertTrue(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    assertFalse(circle.isWithin(point1));\n    LatLonBounds bounds;\n    bounds = new LatLonBounds();\n    circle.getBounds(bounds);\n    assertTrue(bounds.checkNoLongitudeBound());\n    assertTrue(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.01, bounds.getMinLatitude(), 0.01);\n\n    circle = new GeoStandardCircle(scaledModel, Math.PI * 0.25, 0.0, 0.01);\n    assertTrue(circle.isWithin(point1));\n    assertFalse(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    bounds = new LatLonBounds();\n    circle.getBounds(bounds);\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.25 + 0.01, bounds.getMaxLatitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 - 0.01, bounds.getMinLatitude(), 0.00001);\n    assertEquals(-0.0125, bounds.getLeftLongitude(), 0.0001);\n    assertEquals(0.0125, bounds.getRightLongitude(), 0.0001);\n\n    circle = new GeoStandardCircle(scaledModel, Math.PI * 0.125, 0.0, 0.01);\n    assertTrue(circle.isWithin(point2));\n    assertFalse(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    bounds = new LatLonBounds();\n    circle.getBounds(bounds);\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    // Symmetric, as expected\n    assertEquals(Math.PI * 0.125 - 0.01, bounds.getMinLatitude(), 0.00001);\n    assertEquals(Math.PI * 0.125 + 0.01, bounds.getMaxLatitude(), 0.00001);\n    assertEquals(-0.0089, bounds.getLeftLongitude(), 0.0001);\n    assertEquals(0.0089, bounds.getRightLongitude(), 0.0001);\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasicCircle() {\n    // The point of this test is just to make sure nothing blows up doing normal things with a quite non-spherical model\n    // Make sure that the north pole is in the circle, and south pole isn't\n    final GeoPoint northPole = new GeoPoint(scaledModel, Math.PI * 0.5, 0.0);\n    final GeoPoint southPole = new GeoPoint(scaledModel, -Math.PI * 0.5, 0.0);\n    final GeoPoint point1 = new GeoPoint(scaledModel, Math.PI * 0.25, 0.0);\n    final GeoPoint point2 = new GeoPoint(scaledModel, Math.PI * 0.125, 0.0);\n    \n    GeoCircle circle = new GeoStandardCircle(scaledModel, Math.PI * 0.5, 0.0, 0.01);\n    assertTrue(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    assertFalse(circle.isWithin(point1));\n    LatLonBounds bounds;\n    bounds = new LatLonBounds();\n    circle.getBounds(bounds);\n    assertTrue(bounds.checkNoLongitudeBound());\n    assertTrue(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.5 - 0.01, bounds.getMinLatitude(), 0.01);\n\n    circle = new GeoStandardCircle(scaledModel, Math.PI * 0.25, 0.0, 0.01);\n    assertTrue(circle.isWithin(point1));\n    assertFalse(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    bounds = new LatLonBounds();\n    circle.getBounds(bounds);\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(Math.PI * 0.25 + 0.01, bounds.getMaxLatitude(), 0.00001);\n    assertEquals(Math.PI * 0.25 - 0.01, bounds.getMinLatitude(), 0.00001);\n    assertEquals(-0.0125, bounds.getLeftLongitude(), 0.0001);\n    assertEquals(0.0125, bounds.getRightLongitude(), 0.0001);\n\n    circle = new GeoStandardCircle(scaledModel, Math.PI * 0.125, 0.0, 0.01);\n    assertTrue(circle.isWithin(point2));\n    assertFalse(circle.isWithin(northPole));\n    assertFalse(circle.isWithin(southPole));\n    bounds = new LatLonBounds();\n    circle.getBounds(bounds);\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    // Symmetric, as expected\n    assertEquals(Math.PI * 0.125 - 0.01, bounds.getMinLatitude(), 0.00001);\n    assertEquals(Math.PI * 0.125 + 0.01, bounds.getMaxLatitude(), 0.00001);\n    assertEquals(-0.0089, bounds.getLeftLongitude(), 0.0001);\n    assertEquals(0.0089, bounds.getRightLongitude(), 0.0001);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}