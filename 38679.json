{"path":"solr/core/src/java/org/apache/solr/cloud/ExclusiveSliceProperty#balanceUnassignedReplicas().mjava","commits":[{"id":"5886c3d78997b0c3f9151247c967e32a8529c59e","date":1473837274,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ExclusiveSliceProperty#balanceUnassignedReplicas().mjava","pathOld":"/dev/null","sourceNew":"  private void balanceUnassignedReplicas() {\n    tmpMaxPropPerNode = origMaxPropPerNode; // A bit clumsy, but don't want to duplicate code.\n    tmpModulo = origModulo;\n\n    // Get the nodeName and shardName for the node that has the least room for this\n\n    while (shardsNeedingHosts.size() > 0) {\n      String nodeName = \"\";\n      int minSize = Integer.MAX_VALUE;\n      SliceReplica srToChange = null;\n      for (String slice : shardsNeedingHosts) {\n        for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingReplicas.entrySet()) {\n          // A little tricky. If we don't set this to something below, then it means all possible places to\n          // put this property are full up, so just put it somewhere.\n          if (srToChange == null && ent.getValue().size() > 0) {\n            srToChange = ent.getValue().get(0);\n          }\n          ListIterator<SliceReplica> iter = ent.getValue().listIterator();\n          while (iter.hasNext()) {\n            SliceReplica sr = iter.next();\n            if (StringUtils.equals(slice, sr.slice.getName()) == false) {\n              continue;\n            }\n            if (nodesHostingProp.containsKey(ent.getKey()) == false) {\n              nodesHostingProp.put(ent.getKey(), new ArrayList<SliceReplica>());\n            }\n            if (minSize > nodesHostingReplicas.get(ent.getKey()).size() && nodesHostingProp.get(ent.getKey()).size() < tmpMaxPropPerNode) {\n              minSize = nodesHostingReplicas.get(ent.getKey()).size();\n              srToChange = sr;\n              nodeName = ent.getKey();\n            }\n          }\n        }\n      }\n      // Now, you have a slice and node to put it on\n      shardsNeedingHosts.remove(srToChange.slice.getName());\n      if (nodesHostingProp.containsKey(nodeName) == false) {\n        nodesHostingProp.put(nodeName, new ArrayList<SliceReplica>());\n      }\n      nodesHostingProp.get(nodeName).add(srToChange);\n      adjustLimits(nodesHostingProp.get(nodeName));\n      removeSliceAlreadyHostedFromPossibles(srToChange.slice.getName());\n      addProp(srToChange.slice, srToChange.replica.getName());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ExclusiveSliceProperty#balanceUnassignedReplicas().mjava","pathOld":"/dev/null","sourceNew":"  private void balanceUnassignedReplicas() {\n    tmpMaxPropPerNode = origMaxPropPerNode; // A bit clumsy, but don't want to duplicate code.\n    tmpModulo = origModulo;\n\n    // Get the nodeName and shardName for the node that has the least room for this\n\n    while (shardsNeedingHosts.size() > 0) {\n      String nodeName = \"\";\n      int minSize = Integer.MAX_VALUE;\n      SliceReplica srToChange = null;\n      for (String slice : shardsNeedingHosts) {\n        for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingReplicas.entrySet()) {\n          // A little tricky. If we don't set this to something below, then it means all possible places to\n          // put this property are full up, so just put it somewhere.\n          if (srToChange == null && ent.getValue().size() > 0) {\n            srToChange = ent.getValue().get(0);\n          }\n          ListIterator<SliceReplica> iter = ent.getValue().listIterator();\n          while (iter.hasNext()) {\n            SliceReplica sr = iter.next();\n            if (StringUtils.equals(slice, sr.slice.getName()) == false) {\n              continue;\n            }\n            if (nodesHostingProp.containsKey(ent.getKey()) == false) {\n              nodesHostingProp.put(ent.getKey(), new ArrayList<SliceReplica>());\n            }\n            if (minSize > nodesHostingReplicas.get(ent.getKey()).size() && nodesHostingProp.get(ent.getKey()).size() < tmpMaxPropPerNode) {\n              minSize = nodesHostingReplicas.get(ent.getKey()).size();\n              srToChange = sr;\n              nodeName = ent.getKey();\n            }\n          }\n        }\n      }\n      // Now, you have a slice and node to put it on\n      shardsNeedingHosts.remove(srToChange.slice.getName());\n      if (nodesHostingProp.containsKey(nodeName) == false) {\n        nodesHostingProp.put(nodeName, new ArrayList<SliceReplica>());\n      }\n      nodesHostingProp.get(nodeName).add(srToChange);\n      adjustLimits(nodesHostingProp.get(nodeName));\n      removeSliceAlreadyHostedFromPossibles(srToChange.slice.getName());\n      addProp(srToChange.slice, srToChange.replica.getName());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ExclusiveSliceProperty#balanceUnassignedReplicas().mjava","pathOld":"/dev/null","sourceNew":"  private void balanceUnassignedReplicas() {\n    tmpMaxPropPerNode = origMaxPropPerNode; // A bit clumsy, but don't want to duplicate code.\n    tmpModulo = origModulo;\n\n    // Get the nodeName and shardName for the node that has the least room for this\n\n    while (shardsNeedingHosts.size() > 0) {\n      String nodeName = \"\";\n      int minSize = Integer.MAX_VALUE;\n      SliceReplica srToChange = null;\n      for (String slice : shardsNeedingHosts) {\n        for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingReplicas.entrySet()) {\n          // A little tricky. If we don't set this to something below, then it means all possible places to\n          // put this property are full up, so just put it somewhere.\n          if (srToChange == null && ent.getValue().size() > 0) {\n            srToChange = ent.getValue().get(0);\n          }\n          ListIterator<SliceReplica> iter = ent.getValue().listIterator();\n          while (iter.hasNext()) {\n            SliceReplica sr = iter.next();\n            if (StringUtils.equals(slice, sr.slice.getName()) == false) {\n              continue;\n            }\n            if (nodesHostingProp.containsKey(ent.getKey()) == false) {\n              nodesHostingProp.put(ent.getKey(), new ArrayList<SliceReplica>());\n            }\n            if (minSize > nodesHostingReplicas.get(ent.getKey()).size() && nodesHostingProp.get(ent.getKey()).size() < tmpMaxPropPerNode) {\n              minSize = nodesHostingReplicas.get(ent.getKey()).size();\n              srToChange = sr;\n              nodeName = ent.getKey();\n            }\n          }\n        }\n      }\n      // Now, you have a slice and node to put it on\n      shardsNeedingHosts.remove(srToChange.slice.getName());\n      if (nodesHostingProp.containsKey(nodeName) == false) {\n        nodesHostingProp.put(nodeName, new ArrayList<SliceReplica>());\n      }\n      nodesHostingProp.get(nodeName).add(srToChange);\n      adjustLimits(nodesHostingProp.get(nodeName));\n      removeSliceAlreadyHostedFromPossibles(srToChange.slice.getName());\n      addProp(srToChange.slice, srToChange.replica.getName());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ExclusiveSliceProperty#balanceUnassignedReplicas().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ExclusiveSliceProperty#balanceUnassignedReplicas().mjava","sourceNew":"  private void balanceUnassignedReplicas() {\n    tmpMaxPropPerNode = origMaxPropPerNode; // A bit clumsy, but don't want to duplicate code.\n    tmpModulo = origModulo;\n\n    // Get the nodeName and shardName for the node that has the least room for this\n\n    while (shardsNeedingHosts.size() > 0) {\n      String nodeName = \"\";\n      int minSize = Integer.MAX_VALUE;\n      SliceReplica srToChange = null;\n      for (String slice : shardsNeedingHosts) {\n        for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingReplicas.entrySet()) {\n          // A little tricky. If we don't set this to something below, then it means all possible places to\n          // put this property are full up, so just put it somewhere.\n          if (srToChange == null && ent.getValue().size() > 0) {\n            srToChange = ent.getValue().get(0);\n          }\n          ListIterator<SliceReplica> iter = ent.getValue().listIterator();\n          while (iter.hasNext()) {\n            SliceReplica sr = iter.next();\n            if (StringUtils.equals(slice, sr.slice.getName()) == false) {\n              continue;\n            }\n            if (nodesHostingProp.containsKey(ent.getKey()) == false) {\n              nodesHostingProp.put(ent.getKey(), new ArrayList<SliceReplica>());\n            }\n            if (minSize > nodesHostingReplicas.get(ent.getKey()).size() && nodesHostingProp.get(ent.getKey()).size() < tmpMaxPropPerNode) {\n              minSize = nodesHostingReplicas.get(ent.getKey()).size();\n              srToChange = sr;\n              nodeName = ent.getKey();\n            }\n          }\n        }\n      }\n      // Now, you have a slice and node to put it on\n      shardsNeedingHosts.remove(srToChange.slice.getName());\n      if (nodesHostingProp.containsKey(nodeName) == false) {\n        nodesHostingProp.put(nodeName, new ArrayList<SliceReplica>());\n      }\n      nodesHostingProp.get(nodeName).add(srToChange);\n      adjustLimits(nodesHostingProp.get(nodeName));\n      removeSliceAlreadyHostedFromPossibles(srToChange.slice.getName());\n      addProp(srToChange.slice, srToChange.replica.getName());\n      // When you set the property, you must insure that it is _removed_ from any other replicas.\n      for (Replica rep : srToChange.slice.getReplicas()) {\n        if (rep.getName().equals(srToChange.replica.getName())) {\n          continue;\n        }\n        if (rep.getProperty(property) != null) {\n          removeProp(srToChange.slice, srToChange.replica.getName());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void balanceUnassignedReplicas() {\n    tmpMaxPropPerNode = origMaxPropPerNode; // A bit clumsy, but don't want to duplicate code.\n    tmpModulo = origModulo;\n\n    // Get the nodeName and shardName for the node that has the least room for this\n\n    while (shardsNeedingHosts.size() > 0) {\n      String nodeName = \"\";\n      int minSize = Integer.MAX_VALUE;\n      SliceReplica srToChange = null;\n      for (String slice : shardsNeedingHosts) {\n        for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingReplicas.entrySet()) {\n          // A little tricky. If we don't set this to something below, then it means all possible places to\n          // put this property are full up, so just put it somewhere.\n          if (srToChange == null && ent.getValue().size() > 0) {\n            srToChange = ent.getValue().get(0);\n          }\n          ListIterator<SliceReplica> iter = ent.getValue().listIterator();\n          while (iter.hasNext()) {\n            SliceReplica sr = iter.next();\n            if (StringUtils.equals(slice, sr.slice.getName()) == false) {\n              continue;\n            }\n            if (nodesHostingProp.containsKey(ent.getKey()) == false) {\n              nodesHostingProp.put(ent.getKey(), new ArrayList<SliceReplica>());\n            }\n            if (minSize > nodesHostingReplicas.get(ent.getKey()).size() && nodesHostingProp.get(ent.getKey()).size() < tmpMaxPropPerNode) {\n              minSize = nodesHostingReplicas.get(ent.getKey()).size();\n              srToChange = sr;\n              nodeName = ent.getKey();\n            }\n          }\n        }\n      }\n      // Now, you have a slice and node to put it on\n      shardsNeedingHosts.remove(srToChange.slice.getName());\n      if (nodesHostingProp.containsKey(nodeName) == false) {\n        nodesHostingProp.put(nodeName, new ArrayList<SliceReplica>());\n      }\n      nodesHostingProp.get(nodeName).add(srToChange);\n      adjustLimits(nodesHostingProp.get(nodeName));\n      removeSliceAlreadyHostedFromPossibles(srToChange.slice.getName());\n      addProp(srToChange.slice, srToChange.replica.getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":3,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ExclusiveSliceProperty#balanceUnassignedReplicas().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ExclusiveSliceProperty#balanceUnassignedReplicas().mjava","sourceNew":"  private void balanceUnassignedReplicas() {\n    tmpMaxPropPerNode = origMaxPropPerNode; // A bit clumsy, but don't want to duplicate code.\n    tmpModulo = origModulo;\n\n    // Get the nodeName and shardName for the node that has the least room for this\n\n    while (shardsNeedingHosts.size() > 0) {\n      String nodeName = \"\";\n      int minSize = Integer.MAX_VALUE;\n      SliceReplica srToChange = null;\n      for (String slice : shardsNeedingHosts) {\n        for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingReplicas.entrySet()) {\n          // A little tricky. If we don't set this to something below, then it means all possible places to\n          // put this property are full up, so just put it somewhere.\n          if (srToChange == null && ent.getValue().size() > 0) {\n            srToChange = ent.getValue().get(0);\n          }\n          ListIterator<SliceReplica> iter = ent.getValue().listIterator();\n          while (iter.hasNext()) {\n            SliceReplica sr = iter.next();\n            if (StringUtils.equals(slice, sr.slice.getName()) == false) {\n              continue;\n            }\n            if (nodesHostingProp.containsKey(ent.getKey()) == false) {\n              nodesHostingProp.put(ent.getKey(), new ArrayList<SliceReplica>());\n            }\n            if (minSize > nodesHostingReplicas.get(ent.getKey()).size() && nodesHostingProp.get(ent.getKey()).size() < tmpMaxPropPerNode) {\n              minSize = nodesHostingReplicas.get(ent.getKey()).size();\n              srToChange = sr;\n              nodeName = ent.getKey();\n            }\n          }\n        }\n      }\n      // Now, you have a slice and node to put it on\n      shardsNeedingHosts.remove(srToChange.slice.getName());\n      if (nodesHostingProp.containsKey(nodeName) == false) {\n        nodesHostingProp.put(nodeName, new ArrayList<SliceReplica>());\n      }\n      nodesHostingProp.get(nodeName).add(srToChange);\n      adjustLimits(nodesHostingProp.get(nodeName));\n      removeSliceAlreadyHostedFromPossibles(srToChange.slice.getName());\n      addProp(srToChange.slice, srToChange.replica.getName());\n      // When you set the property, you must insure that it is _removed_ from any other replicas.\n      for (Replica rep : srToChange.slice.getReplicas()) {\n        if (rep.getName().equals(srToChange.replica.getName())) {\n          continue;\n        }\n        if (rep.getProperty(property) != null) {\n          removeProp(srToChange.slice, srToChange.replica.getName());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void balanceUnassignedReplicas() {\n    tmpMaxPropPerNode = origMaxPropPerNode; // A bit clumsy, but don't want to duplicate code.\n    tmpModulo = origModulo;\n\n    // Get the nodeName and shardName for the node that has the least room for this\n\n    while (shardsNeedingHosts.size() > 0) {\n      String nodeName = \"\";\n      int minSize = Integer.MAX_VALUE;\n      SliceReplica srToChange = null;\n      for (String slice : shardsNeedingHosts) {\n        for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingReplicas.entrySet()) {\n          // A little tricky. If we don't set this to something below, then it means all possible places to\n          // put this property are full up, so just put it somewhere.\n          if (srToChange == null && ent.getValue().size() > 0) {\n            srToChange = ent.getValue().get(0);\n          }\n          ListIterator<SliceReplica> iter = ent.getValue().listIterator();\n          while (iter.hasNext()) {\n            SliceReplica sr = iter.next();\n            if (StringUtils.equals(slice, sr.slice.getName()) == false) {\n              continue;\n            }\n            if (nodesHostingProp.containsKey(ent.getKey()) == false) {\n              nodesHostingProp.put(ent.getKey(), new ArrayList<SliceReplica>());\n            }\n            if (minSize > nodesHostingReplicas.get(ent.getKey()).size() && nodesHostingProp.get(ent.getKey()).size() < tmpMaxPropPerNode) {\n              minSize = nodesHostingReplicas.get(ent.getKey()).size();\n              srToChange = sr;\n              nodeName = ent.getKey();\n            }\n          }\n        }\n      }\n      // Now, you have a slice and node to put it on\n      shardsNeedingHosts.remove(srToChange.slice.getName());\n      if (nodesHostingProp.containsKey(nodeName) == false) {\n        nodesHostingProp.put(nodeName, new ArrayList<SliceReplica>());\n      }\n      nodesHostingProp.get(nodeName).add(srToChange);\n      adjustLimits(nodesHostingProp.get(nodeName));\n      removeSliceAlreadyHostedFromPossibles(srToChange.slice.getName());\n      addProp(srToChange.slice, srToChange.replica.getName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5886c3d78997b0c3f9151247c967e32a8529c59e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5886c3d78997b0c3f9151247c967e32a8529c59e"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"5886c3d78997b0c3f9151247c967e32a8529c59e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5886c3d78997b0c3f9151247c967e32a8529c59e","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}