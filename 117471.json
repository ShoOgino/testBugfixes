{"path":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeDocValuesProducer#getSortedNumeric(FieldInfo).mjava","commits":[{"id":"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96","date":1433340999,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    BKDTreeReader treeReader = treeReaders.get(field.name);\n    if (treeReader == null) {\n      // Lazy load\n      Long fp = fieldToIndexFPs.get(field.number);\n      if (fp == null) {\n        throw new IllegalArgumentException(\"this field was not indexed as a BKDPointField\");\n      }\n      datIn.seek(fp);\n      treeReader = new BKDTreeReader(datIn, maxDoc);\n\n      // Only hang onto the reader when we are not merging:\n      if (merging == false) {\n        treeReaders.put(field.name, treeReader);\n        ramBytesUsed.addAndGet(treeReader.ramBytesUsed());\n      }\n    }\n\n    return new BKDTreeSortedNumericDocValues(treeReader, delegate.getSortedNumeric(field));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b28c8c24efe925d64d643c57b569d4fdf8616e9","date":1440170643,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeDocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeDocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public synchronized SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    BKDTreeReader treeReader = treeReaders.get(field.name);\n    if (treeReader == null) {\n      // Lazy load\n      Long fp = fieldToIndexFPs.get(field.number);\n      if (fp == null) {\n        throw new IllegalArgumentException(\"this field was not indexed as a BKDPointField\");\n      }\n\n      // LUCENE-6697: never do real IOPs with the original IndexInput because search\n      // threads can be concurrently cloning it:\n      IndexInput clone = datIn.clone();\n\n      clone.seek(fp);\n      treeReader = new BKDTreeReader(clone, maxDoc);\n\n      // Only hang onto the reader when we are not merging:\n      if (merging == false) {\n        treeReaders.put(field.name, treeReader);\n        ramBytesUsed.addAndGet(treeReader.ramBytesUsed());\n      }\n    }\n\n    return new BKDTreeSortedNumericDocValues(treeReader, delegate.getSortedNumeric(field));\n  }\n\n","sourceOld":"  @Override\n  public synchronized SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    BKDTreeReader treeReader = treeReaders.get(field.name);\n    if (treeReader == null) {\n      // Lazy load\n      Long fp = fieldToIndexFPs.get(field.number);\n      if (fp == null) {\n        throw new IllegalArgumentException(\"this field was not indexed as a BKDPointField\");\n      }\n      datIn.seek(fp);\n      treeReader = new BKDTreeReader(datIn, maxDoc);\n\n      // Only hang onto the reader when we are not merging:\n      if (merging == false) {\n        treeReaders.put(field.name, treeReader);\n        ramBytesUsed.addAndGet(treeReader.ramBytesUsed());\n      }\n    }\n\n    return new BKDTreeSortedNumericDocValues(treeReader, delegate.getSortedNumeric(field));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeDocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    BKDTreeReader treeReader = treeReaders.get(field.name);\n    if (treeReader == null) {\n      // Lazy load\n      Long fp = fieldToIndexFPs.get(field.number);\n      if (fp == null) {\n        throw new IllegalArgumentException(\"this field was not indexed as a BKDPointField\");\n      }\n\n      // LUCENE-6697: never do real IOPs with the original IndexInput because search\n      // threads can be concurrently cloning it:\n      IndexInput clone = datIn.clone();\n\n      clone.seek(fp);\n      treeReader = new BKDTreeReader(clone, maxDoc);\n\n      // Only hang onto the reader when we are not merging:\n      if (merging == false) {\n        treeReaders.put(field.name, treeReader);\n        ramBytesUsed.addAndGet(treeReader.ramBytesUsed());\n      }\n    }\n\n    return new BKDTreeSortedNumericDocValues(treeReader, delegate.getSortedNumeric(field));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0b28c8c24efe925d64d643c57b569d4fdf8616e9":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["0b28c8c24efe925d64d643c57b569d4fdf8616e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0b28c8c24efe925d64d643c57b569d4fdf8616e9":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["0b28c8c24efe925d64d643c57b569d4fdf8616e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}