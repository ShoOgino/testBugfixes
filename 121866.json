{"path":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","commits":[{"id":"abd5d0ae26eed0e7cbbbbed19f6480fe16055e9b","date":1184336627,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","pathOld":"/dev/null","sourceNew":"  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            failed = true;\n            throw new IOException(\"fail after applyDeletes\");\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      Directory ramDir = new RAMDirectory();\n      MockRAMDirectory dir = new MockRAMDirectory(ramDir);\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        modifier.addDocument(doc);\n      }\n      // flush (and commit if ac)\n\n      modifier.optimize();\n\n      // commit if !ac\n\n      if (!autoCommit) {\n        modifier.close();\n      }\n      // one of the two files hits\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n\n      // open the writer again (closed above)\n\n      if (!autoCommit) {\n        modifier = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer());\n        modifier.setUseCompoundFile(true);\n      }\n\n      // delete the doc\n      // max buf del terms is two, so this is buffered\n\n      modifier.deleteDocuments(term);\n\n      // add a doc (needed for the !ac case; see below)\n      // doc remains buffered\n\n      Document doc = new Document();\n      modifier.addDocument(doc);\n\n      // flush the changes, the buffered deletes, and the new doc\n\n      // The failure object will fail on the first write after the del\n      // file gets created when processing the buffered delete\n\n      // in the ac case, this will be when writing the new segments\n      // files so we really don't need the new doc, but it's harmless\n\n      // in the !ac case, a new segments file won't be created but in\n      // this case, creation of the cfs file happens next so we need\n      // the doc (to test that it's okay that we don't lose deletes if\n      // failing while creating the cfs file\n\n      boolean failed = false;\n      try {\n        modifier.flush();\n      } catch (IOException ioe) {\n        failed = true;\n      }\n\n      assertTrue(failed);\n\n      // The flush above failed, so we need to retry it (which will\n      // succeed, because the failure is a one-shot)\n\n      if (!autoCommit) {\n        modifier.close();\n      } else {\n        modifier.flush();\n      }\n\n      hitCount = getHitCount(dir, term);\n\n      // If we haven't lost the delete the hit count will be zero\n\n      assertEquals(0, hitCount);\n\n      if (autoCommit) {\n        modifier.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["83bbb041887bbef07b8a98d08a0e1713ce137039","fde68de507dbf344495d7b5e8052866fe5f254ab","5d01393ee15c09415a2d4d8610aef0ec780a5e5f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d01393ee15c09415a2d4d8610aef0ec780a5e5f","date":1184714576,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","sourceNew":"  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            failed = true;\n            throw new IOException(\"fail after applyDeletes\");\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        modifier.addDocument(doc);\n      }\n      // flush (and commit if ac)\n\n      modifier.optimize();\n\n      // commit if !ac\n\n      if (!autoCommit) {\n        modifier.close();\n      }\n      // one of the two files hits\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n\n      // open the writer again (closed above)\n\n      if (!autoCommit) {\n        modifier = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer());\n        modifier.setUseCompoundFile(true);\n      }\n\n      // delete the doc\n      // max buf del terms is two, so this is buffered\n\n      modifier.deleteDocuments(term);\n\n      // add a doc (needed for the !ac case; see below)\n      // doc remains buffered\n\n      Document doc = new Document();\n      modifier.addDocument(doc);\n\n      // flush the changes, the buffered deletes, and the new doc\n\n      // The failure object will fail on the first write after the del\n      // file gets created when processing the buffered delete\n\n      // in the ac case, this will be when writing the new segments\n      // files so we really don't need the new doc, but it's harmless\n\n      // in the !ac case, a new segments file won't be created but in\n      // this case, creation of the cfs file happens next so we need\n      // the doc (to test that it's okay that we don't lose deletes if\n      // failing while creating the cfs file\n\n      boolean failed = false;\n      try {\n        modifier.flush();\n      } catch (IOException ioe) {\n        failed = true;\n      }\n\n      assertTrue(failed);\n\n      // The flush above failed, so we need to retry it (which will\n      // succeed, because the failure is a one-shot)\n\n      if (!autoCommit) {\n        modifier.close();\n      } else {\n        modifier.flush();\n      }\n\n      hitCount = getHitCount(dir, term);\n\n      // If we haven't lost the delete the hit count will be zero\n\n      assertEquals(0, hitCount);\n\n      if (autoCommit) {\n        modifier.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            failed = true;\n            throw new IOException(\"fail after applyDeletes\");\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      Directory ramDir = new RAMDirectory();\n      MockRAMDirectory dir = new MockRAMDirectory(ramDir);\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        modifier.addDocument(doc);\n      }\n      // flush (and commit if ac)\n\n      modifier.optimize();\n\n      // commit if !ac\n\n      if (!autoCommit) {\n        modifier.close();\n      }\n      // one of the two files hits\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n\n      // open the writer again (closed above)\n\n      if (!autoCommit) {\n        modifier = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer());\n        modifier.setUseCompoundFile(true);\n      }\n\n      // delete the doc\n      // max buf del terms is two, so this is buffered\n\n      modifier.deleteDocuments(term);\n\n      // add a doc (needed for the !ac case; see below)\n      // doc remains buffered\n\n      Document doc = new Document();\n      modifier.addDocument(doc);\n\n      // flush the changes, the buffered deletes, and the new doc\n\n      // The failure object will fail on the first write after the del\n      // file gets created when processing the buffered delete\n\n      // in the ac case, this will be when writing the new segments\n      // files so we really don't need the new doc, but it's harmless\n\n      // in the !ac case, a new segments file won't be created but in\n      // this case, creation of the cfs file happens next so we need\n      // the doc (to test that it's okay that we don't lose deletes if\n      // failing while creating the cfs file\n\n      boolean failed = false;\n      try {\n        modifier.flush();\n      } catch (IOException ioe) {\n        failed = true;\n      }\n\n      assertTrue(failed);\n\n      // The flush above failed, so we need to retry it (which will\n      // succeed, because the failure is a one-shot)\n\n      if (!autoCommit) {\n        modifier.close();\n      } else {\n        modifier.flush();\n      }\n\n      hitCount = getHitCount(dir, term);\n\n      // If we haven't lost the delete the hit count will be zero\n\n      assertEquals(0, hitCount);\n\n      if (autoCommit) {\n        modifier.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":["abd5d0ae26eed0e7cbbbbed19f6480fe16055e9b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fde68de507dbf344495d7b5e8052866fe5f254ab","date":1189434831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","sourceNew":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            failed = true;\n            throw new IOException(\"fail after applyDeletes\");\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        modifier.addDocument(doc);\n      }\n      // flush (and commit if ac)\n\n      modifier.optimize();\n\n      // commit if !ac\n\n      if (!autoCommit) {\n        modifier.close();\n      }\n      // one of the two files hits\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n\n      // open the writer again (closed above)\n\n      if (!autoCommit) {\n        modifier = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer());\n        modifier.setUseCompoundFile(true);\n      }\n\n      // delete the doc\n      // max buf del terms is two, so this is buffered\n\n      modifier.deleteDocuments(term);\n\n      // add a doc (needed for the !ac case; see below)\n      // doc remains buffered\n\n      Document doc = new Document();\n      modifier.addDocument(doc);\n\n      // flush the changes, the buffered deletes, and the new doc\n\n      // The failure object will fail on the first write after the del\n      // file gets created when processing the buffered delete\n\n      // in the ac case, this will be when writing the new segments\n      // files so we really don't need the new doc, but it's harmless\n\n      // in the !ac case, a new segments file won't be created but in\n      // this case, creation of the cfs file happens next so we need\n      // the doc (to test that it's okay that we don't lose deletes if\n      // failing while creating the cfs file\n\n      boolean failed = false;\n      try {\n        modifier.flush();\n      } catch (IOException ioe) {\n        failed = true;\n      }\n\n      assertTrue(failed);\n\n      // The flush above failed, so we need to retry it (which will\n      // succeed, because the failure is a one-shot)\n\n      if (!autoCommit) {\n        modifier.close();\n      } else {\n        modifier.flush();\n      }\n\n      hitCount = getHitCount(dir, term);\n\n      // If the delete was not cleared then hit count will\n      // be 0.  With autoCommit=false, we hit the exception\n      // on creating the compound file, so the delete was\n      // flushed successfully.\n      assertEquals(autoCommit ? 1:0, hitCount);\n\n      if (autoCommit) {\n        modifier.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            failed = true;\n            throw new IOException(\"fail after applyDeletes\");\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        modifier.addDocument(doc);\n      }\n      // flush (and commit if ac)\n\n      modifier.optimize();\n\n      // commit if !ac\n\n      if (!autoCommit) {\n        modifier.close();\n      }\n      // one of the two files hits\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n\n      // open the writer again (closed above)\n\n      if (!autoCommit) {\n        modifier = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer());\n        modifier.setUseCompoundFile(true);\n      }\n\n      // delete the doc\n      // max buf del terms is two, so this is buffered\n\n      modifier.deleteDocuments(term);\n\n      // add a doc (needed for the !ac case; see below)\n      // doc remains buffered\n\n      Document doc = new Document();\n      modifier.addDocument(doc);\n\n      // flush the changes, the buffered deletes, and the new doc\n\n      // The failure object will fail on the first write after the del\n      // file gets created when processing the buffered delete\n\n      // in the ac case, this will be when writing the new segments\n      // files so we really don't need the new doc, but it's harmless\n\n      // in the !ac case, a new segments file won't be created but in\n      // this case, creation of the cfs file happens next so we need\n      // the doc (to test that it's okay that we don't lose deletes if\n      // failing while creating the cfs file\n\n      boolean failed = false;\n      try {\n        modifier.flush();\n      } catch (IOException ioe) {\n        failed = true;\n      }\n\n      assertTrue(failed);\n\n      // The flush above failed, so we need to retry it (which will\n      // succeed, because the failure is a one-shot)\n\n      if (!autoCommit) {\n        modifier.close();\n      } else {\n        modifier.flush();\n      }\n\n      hitCount = getHitCount(dir, term);\n\n      // If we haven't lost the delete the hit count will be zero\n\n      assertEquals(0, hitCount);\n\n      if (autoCommit) {\n        modifier.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":["abd5d0ae26eed0e7cbbbbed19f6480fe16055e9b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83bbb041887bbef07b8a98d08a0e1713ce137039","date":1200330381,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","sourceNew":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        modifier.addDocument(doc);\n      }\n      // flush (and commit if ac)\n\n      modifier.optimize();\n\n      // commit if !ac\n\n      if (!autoCommit) {\n        modifier.close();\n      }\n      // one of the two files hits\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n\n      // open the writer again (closed above)\n\n      if (!autoCommit) {\n        modifier = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer());\n        modifier.setUseCompoundFile(true);\n      }\n\n      // delete the doc\n      // max buf del terms is two, so this is buffered\n\n      modifier.deleteDocuments(term);\n\n      // add a doc (needed for the !ac case; see below)\n      // doc remains buffered\n\n      Document doc = new Document();\n      modifier.addDocument(doc);\n\n      // flush the changes, the buffered deletes, and the new doc\n\n      // The failure object will fail on the first write after the del\n      // file gets created when processing the buffered delete\n\n      // in the ac case, this will be when writing the new segments\n      // files so we really don't need the new doc, but it's harmless\n\n      // in the !ac case, a new segments file won't be created but in\n      // this case, creation of the cfs file happens next so we need\n      // the doc (to test that it's okay that we don't lose deletes if\n      // failing while creating the cfs file\n\n      boolean failed = false;\n      try {\n        modifier.flush();\n      } catch (IOException ioe) {\n        failed = true;\n      }\n\n      assertTrue(failed);\n\n      // The flush above failed, so we need to retry it (which will\n      // succeed, because the failure is a one-shot)\n\n      if (!autoCommit) {\n        modifier.close();\n      } else {\n        modifier.flush();\n      }\n\n      hitCount = getHitCount(dir, term);\n\n      // If the delete was not cleared then hit count will\n      // be 0.  With autoCommit=false, we hit the exception\n      // on creating the compound file, so the delete was\n      // flushed successfully.\n      assertEquals(autoCommit ? 1:0, hitCount);\n\n      if (autoCommit) {\n        modifier.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            failed = true;\n            throw new IOException(\"fail after applyDeletes\");\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        modifier.addDocument(doc);\n      }\n      // flush (and commit if ac)\n\n      modifier.optimize();\n\n      // commit if !ac\n\n      if (!autoCommit) {\n        modifier.close();\n      }\n      // one of the two files hits\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n\n      // open the writer again (closed above)\n\n      if (!autoCommit) {\n        modifier = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer());\n        modifier.setUseCompoundFile(true);\n      }\n\n      // delete the doc\n      // max buf del terms is two, so this is buffered\n\n      modifier.deleteDocuments(term);\n\n      // add a doc (needed for the !ac case; see below)\n      // doc remains buffered\n\n      Document doc = new Document();\n      modifier.addDocument(doc);\n\n      // flush the changes, the buffered deletes, and the new doc\n\n      // The failure object will fail on the first write after the del\n      // file gets created when processing the buffered delete\n\n      // in the ac case, this will be when writing the new segments\n      // files so we really don't need the new doc, but it's harmless\n\n      // in the !ac case, a new segments file won't be created but in\n      // this case, creation of the cfs file happens next so we need\n      // the doc (to test that it's okay that we don't lose deletes if\n      // failing while creating the cfs file\n\n      boolean failed = false;\n      try {\n        modifier.flush();\n      } catch (IOException ioe) {\n        failed = true;\n      }\n\n      assertTrue(failed);\n\n      // The flush above failed, so we need to retry it (which will\n      // succeed, because the failure is a one-shot)\n\n      if (!autoCommit) {\n        modifier.close();\n      } else {\n        modifier.flush();\n      }\n\n      hitCount = getHitCount(dir, term);\n\n      // If the delete was not cleared then hit count will\n      // be 0.  With autoCommit=false, we hit the exception\n      // on creating the compound file, so the delete was\n      // flushed successfully.\n      assertEquals(autoCommit ? 1:0, hitCount);\n\n      if (autoCommit) {\n        modifier.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":["abd5d0ae26eed0e7cbbbbed19f6480fe16055e9b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","sourceNew":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        modifier.addDocument(doc);\n      }\n      // flush (and commit if ac)\n\n      modifier.optimize();\n\n      // commit if !ac\n\n      if (!autoCommit) {\n        modifier.close();\n      }\n      // one of the two files hits\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n\n      // open the writer again (closed above)\n\n      if (!autoCommit) {\n        modifier = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        modifier.setUseCompoundFile(true);\n      }\n\n      // delete the doc\n      // max buf del terms is two, so this is buffered\n\n      modifier.deleteDocuments(term);\n\n      // add a doc (needed for the !ac case; see below)\n      // doc remains buffered\n\n      Document doc = new Document();\n      modifier.addDocument(doc);\n\n      // flush the changes, the buffered deletes, and the new doc\n\n      // The failure object will fail on the first write after the del\n      // file gets created when processing the buffered delete\n\n      // in the ac case, this will be when writing the new segments\n      // files so we really don't need the new doc, but it's harmless\n\n      // in the !ac case, a new segments file won't be created but in\n      // this case, creation of the cfs file happens next so we need\n      // the doc (to test that it's okay that we don't lose deletes if\n      // failing while creating the cfs file\n\n      boolean failed = false;\n      try {\n        modifier.flush();\n      } catch (IOException ioe) {\n        failed = true;\n      }\n\n      assertTrue(failed);\n\n      // The flush above failed, so we need to retry it (which will\n      // succeed, because the failure is a one-shot)\n\n      if (!autoCommit) {\n        modifier.close();\n      } else {\n        modifier.flush();\n      }\n\n      hitCount = getHitCount(dir, term);\n\n      // If the delete was not cleared then hit count will\n      // be 0.  With autoCommit=false, we hit the exception\n      // on creating the compound file, so the delete was\n      // flushed successfully.\n      assertEquals(autoCommit ? 1:0, hitCount);\n\n      if (autoCommit) {\n        modifier.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        modifier.addDocument(doc);\n      }\n      // flush (and commit if ac)\n\n      modifier.optimize();\n\n      // commit if !ac\n\n      if (!autoCommit) {\n        modifier.close();\n      }\n      // one of the two files hits\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n\n      // open the writer again (closed above)\n\n      if (!autoCommit) {\n        modifier = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer());\n        modifier.setUseCompoundFile(true);\n      }\n\n      // delete the doc\n      // max buf del terms is two, so this is buffered\n\n      modifier.deleteDocuments(term);\n\n      // add a doc (needed for the !ac case; see below)\n      // doc remains buffered\n\n      Document doc = new Document();\n      modifier.addDocument(doc);\n\n      // flush the changes, the buffered deletes, and the new doc\n\n      // The failure object will fail on the first write after the del\n      // file gets created when processing the buffered delete\n\n      // in the ac case, this will be when writing the new segments\n      // files so we really don't need the new doc, but it's harmless\n\n      // in the !ac case, a new segments file won't be created but in\n      // this case, creation of the cfs file happens next so we need\n      // the doc (to test that it's okay that we don't lose deletes if\n      // failing while creating the cfs file\n\n      boolean failed = false;\n      try {\n        modifier.flush();\n      } catch (IOException ioe) {\n        failed = true;\n      }\n\n      assertTrue(failed);\n\n      // The flush above failed, so we need to retry it (which will\n      // succeed, because the failure is a one-shot)\n\n      if (!autoCommit) {\n        modifier.close();\n      } else {\n        modifier.flush();\n      }\n\n      hitCount = getHitCount(dir, term);\n\n      // If the delete was not cleared then hit count will\n      // be 0.  With autoCommit=false, we hit the exception\n      // on creating the compound file, so the delete was\n      // flushed successfully.\n      assertEquals(autoCommit ? 1:0, hitCount);\n\n      if (autoCommit) {\n        modifier.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","sourceNew":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        modifier.addDocument(doc);\n      }\n      // flush (and commit if ac)\n\n      modifier.optimize();\n      modifier.commit();\n\n      // one of the two files hits\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n\n      // open the writer again (closed above)\n\n      // delete the doc\n      // max buf del terms is two, so this is buffered\n\n      modifier.deleteDocuments(term);\n\n      // add a doc (needed for the !ac case; see below)\n      // doc remains buffered\n\n      Document doc = new Document();\n      modifier.addDocument(doc);\n\n      // commit the changes, the buffered deletes, and the new doc\n\n      // The failure object will fail on the first write after the del\n      // file gets created when processing the buffered delete\n\n      // in the ac case, this will be when writing the new segments\n      // files so we really don't need the new doc, but it's harmless\n\n      // in the !ac case, a new segments file won't be created but in\n      // this case, creation of the cfs file happens next so we need\n      // the doc (to test that it's okay that we don't lose deletes if\n      // failing while creating the cfs file)\n\n      boolean failed = false;\n      try {\n        modifier.commit();\n      } catch (IOException ioe) {\n        failed = true;\n      }\n\n      assertTrue(failed);\n\n      // The commit above failed, so we need to retry it (which will\n      // succeed, because the failure is a one-shot)\n\n      modifier.commit();\n\n      hitCount = getHitCount(dir, term);\n\n      // Make sure the delete was successfully flushed:\n      assertEquals(0, hitCount);\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        modifier.addDocument(doc);\n      }\n      // flush (and commit if ac)\n\n      modifier.optimize();\n\n      // commit if !ac\n\n      if (!autoCommit) {\n        modifier.close();\n      }\n      // one of the two files hits\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n\n      // open the writer again (closed above)\n\n      if (!autoCommit) {\n        modifier = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        modifier.setUseCompoundFile(true);\n      }\n\n      // delete the doc\n      // max buf del terms is two, so this is buffered\n\n      modifier.deleteDocuments(term);\n\n      // add a doc (needed for the !ac case; see below)\n      // doc remains buffered\n\n      Document doc = new Document();\n      modifier.addDocument(doc);\n\n      // flush the changes, the buffered deletes, and the new doc\n\n      // The failure object will fail on the first write after the del\n      // file gets created when processing the buffered delete\n\n      // in the ac case, this will be when writing the new segments\n      // files so we really don't need the new doc, but it's harmless\n\n      // in the !ac case, a new segments file won't be created but in\n      // this case, creation of the cfs file happens next so we need\n      // the doc (to test that it's okay that we don't lose deletes if\n      // failing while creating the cfs file\n\n      boolean failed = false;\n      try {\n        modifier.flush();\n      } catch (IOException ioe) {\n        failed = true;\n      }\n\n      assertTrue(failed);\n\n      // The flush above failed, so we need to retry it (which will\n      // succeed, because the failure is a one-shot)\n\n      if (!autoCommit) {\n        modifier.close();\n      } else {\n        modifier.flush();\n      }\n\n      hitCount = getHitCount(dir, term);\n\n      // If the delete was not cleared then hit count will\n      // be 0.  With autoCommit=false, we hit the exception\n      // on creating the compound file, so the delete was\n      // flushed successfully.\n      assertEquals(autoCommit ? 1:0, hitCount);\n\n      if (autoCommit) {\n        modifier.close();\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","sourceNew":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.ANALYZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.ANALYZED));\n        modifier.addDocument(doc);\n      }\n      // flush (and commit if ac)\n\n      modifier.optimize();\n      modifier.commit();\n\n      // one of the two files hits\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n\n      // open the writer again (closed above)\n\n      // delete the doc\n      // max buf del terms is two, so this is buffered\n\n      modifier.deleteDocuments(term);\n\n      // add a doc (needed for the !ac case; see below)\n      // doc remains buffered\n\n      Document doc = new Document();\n      modifier.addDocument(doc);\n\n      // commit the changes, the buffered deletes, and the new doc\n\n      // The failure object will fail on the first write after the del\n      // file gets created when processing the buffered delete\n\n      // in the ac case, this will be when writing the new segments\n      // files so we really don't need the new doc, but it's harmless\n\n      // in the !ac case, a new segments file won't be created but in\n      // this case, creation of the cfs file happens next so we need\n      // the doc (to test that it's okay that we don't lose deletes if\n      // failing while creating the cfs file)\n\n      boolean failed = false;\n      try {\n        modifier.commit();\n      } catch (IOException ioe) {\n        failed = true;\n      }\n\n      assertTrue(failed);\n\n      // The commit above failed, so we need to retry it (which will\n      // succeed, because the failure is a one-shot)\n\n      modifier.commit();\n\n      hitCount = getHitCount(dir, term);\n\n      // Make sure the delete was successfully flushed:\n      assertEquals(0, hitCount);\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.UN_TOKENIZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.TOKENIZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.TOKENIZED));\n        modifier.addDocument(doc);\n      }\n      // flush (and commit if ac)\n\n      modifier.optimize();\n      modifier.commit();\n\n      // one of the two files hits\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n\n      // open the writer again (closed above)\n\n      // delete the doc\n      // max buf del terms is two, so this is buffered\n\n      modifier.deleteDocuments(term);\n\n      // add a doc (needed for the !ac case; see below)\n      // doc remains buffered\n\n      Document doc = new Document();\n      modifier.addDocument(doc);\n\n      // commit the changes, the buffered deletes, and the new doc\n\n      // The failure object will fail on the first write after the del\n      // file gets created when processing the buffered delete\n\n      // in the ac case, this will be when writing the new segments\n      // files so we really don't need the new doc, but it's harmless\n\n      // in the !ac case, a new segments file won't be created but in\n      // this case, creation of the cfs file happens next so we need\n      // the doc (to test that it's okay that we don't lose deletes if\n      // failing while creating the cfs file)\n\n      boolean failed = false;\n      try {\n        modifier.commit();\n      } catch (IOException ioe) {\n        failed = true;\n      }\n\n      assertTrue(failed);\n\n      // The commit above failed, so we need to retry it (which will\n      // succeed, because the failure is a one-shot)\n\n      modifier.commit();\n\n      hitCount = getHitCount(dir, term);\n\n      // Make sure the delete was successfully flushed:\n      assertEquals(0, hitCount);\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","sourceNew":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.ANALYZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.ANALYZED));\n        modifier.addDocument(doc);\n      }\n      // flush (and commit if ac)\n\n      modifier.optimize();\n      modifier.commit();\n\n      // one of the two files hits\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n\n      // open the writer again (closed above)\n\n      // delete the doc\n      // max buf del terms is two, so this is buffered\n\n      modifier.deleteDocuments(term);\n\n      // add a doc (needed for the !ac case; see below)\n      // doc remains buffered\n\n      Document doc = new Document();\n      modifier.addDocument(doc);\n\n      // commit the changes, the buffered deletes, and the new doc\n\n      // The failure object will fail on the first write after the del\n      // file gets created when processing the buffered delete\n\n      // in the ac case, this will be when writing the new segments\n      // files so we really don't need the new doc, but it's harmless\n\n      // in the !ac case, a new segments file won't be created but in\n      // this case, creation of the cfs file happens next so we need\n      // the doc (to test that it's okay that we don't lose deletes if\n      // failing while creating the cfs file)\n\n      boolean failed = false;\n      try {\n        modifier.commit();\n      } catch (IOException ioe) {\n        failed = true;\n      }\n\n      assertTrue(failed);\n\n      // The commit above failed, so we need to retry it (which will\n      // succeed, because the failure is a one-shot)\n\n      modifier.commit();\n\n      hitCount = getHitCount(dir, term);\n\n      // Make sure the delete was successfully flushed:\n      assertEquals(0, hitCount);\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.ANALYZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.ANALYZED));\n        modifier.addDocument(doc);\n      }\n      // flush (and commit if ac)\n\n      modifier.optimize();\n      modifier.commit();\n\n      // one of the two files hits\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n\n      // open the writer again (closed above)\n\n      // delete the doc\n      // max buf del terms is two, so this is buffered\n\n      modifier.deleteDocuments(term);\n\n      // add a doc (needed for the !ac case; see below)\n      // doc remains buffered\n\n      Document doc = new Document();\n      modifier.addDocument(doc);\n\n      // commit the changes, the buffered deletes, and the new doc\n\n      // The failure object will fail on the first write after the del\n      // file gets created when processing the buffered delete\n\n      // in the ac case, this will be when writing the new segments\n      // files so we really don't need the new doc, but it's harmless\n\n      // in the !ac case, a new segments file won't be created but in\n      // this case, creation of the cfs file happens next so we need\n      // the doc (to test that it's okay that we don't lose deletes if\n      // failing while creating the cfs file)\n\n      boolean failed = false;\n      try {\n        modifier.commit();\n      } catch (IOException ioe) {\n        failed = true;\n      }\n\n      assertTrue(failed);\n\n      // The commit above failed, so we need to retry it (which will\n      // succeed, because the failure is a one-shot)\n\n      modifier.commit();\n\n      hitCount = getHitCount(dir, term);\n\n      // Make sure the delete was successfully flushed:\n      assertEquals(0, hitCount);\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","sourceNew":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    // flush (and commit if ac)\n\n    modifier.optimize();\n    modifier.commit();\n\n    // one of the two files hits\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n\n    // open the writer again (closed above)\n\n    // delete the doc\n    // max buf del terms is two, so this is buffered\n\n    modifier.deleteDocuments(term);\n\n    // add a doc (needed for the !ac case; see below)\n    // doc remains buffered\n\n    Document doc = new Document();\n    modifier.addDocument(doc);\n\n    // commit the changes, the buffered deletes, and the new doc\n\n    // The failure object will fail on the first write after the del\n    // file gets created when processing the buffered delete\n\n    // in the ac case, this will be when writing the new segments\n    // files so we really don't need the new doc, but it's harmless\n\n    // in the !ac case, a new segments file won't be created but in\n    // this case, creation of the cfs file happens next so we need\n    // the doc (to test that it's okay that we don't lose deletes if\n    // failing while creating the cfs file)\n\n    boolean failed = false;\n    try {\n      modifier.commit();\n    } catch (IOException ioe) {\n      failed = true;\n    }\n\n    assertTrue(failed);\n\n    // The commit above failed, so we need to retry it (which will\n    // succeed, because the failure is a one-shot)\n\n    modifier.commit();\n\n    hitCount = getHitCount(dir, term);\n\n    // Make sure the delete was successfully flushed:\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    for(int pass=0;pass<2;pass++) {\n      boolean autoCommit = (0==pass);\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter modifier = new IndexWriter(dir, autoCommit,\n                                             new WhitespaceAnalyzer(), true);\n      modifier.setUseCompoundFile(true);\n      modifier.setMaxBufferedDeleteTerms(2);\n\n      dir.failOn(failure.reset());\n\n      for (int i = 0; i < keywords.length; i++) {\n        Document doc = new Document();\n        doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                          Field.Index.NOT_ANALYZED));\n        doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                          Field.Index.NO));\n        doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                          Field.Index.ANALYZED));\n        doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                          Field.Index.ANALYZED));\n        modifier.addDocument(doc);\n      }\n      // flush (and commit if ac)\n\n      modifier.optimize();\n      modifier.commit();\n\n      // one of the two files hits\n\n      Term term = new Term(\"city\", \"Amsterdam\");\n      int hitCount = getHitCount(dir, term);\n      assertEquals(1, hitCount);\n\n      // open the writer again (closed above)\n\n      // delete the doc\n      // max buf del terms is two, so this is buffered\n\n      modifier.deleteDocuments(term);\n\n      // add a doc (needed for the !ac case; see below)\n      // doc remains buffered\n\n      Document doc = new Document();\n      modifier.addDocument(doc);\n\n      // commit the changes, the buffered deletes, and the new doc\n\n      // The failure object will fail on the first write after the del\n      // file gets created when processing the buffered delete\n\n      // in the ac case, this will be when writing the new segments\n      // files so we really don't need the new doc, but it's harmless\n\n      // in the !ac case, a new segments file won't be created but in\n      // this case, creation of the cfs file happens next so we need\n      // the doc (to test that it's okay that we don't lose deletes if\n      // failing while creating the cfs file)\n\n      boolean failed = false;\n      try {\n        modifier.commit();\n      } catch (IOException ioe) {\n        failed = true;\n      }\n\n      assertTrue(failed);\n\n      // The commit above failed, so we need to retry it (which will\n      // succeed, because the failure is a one-shot)\n\n      modifier.commit();\n\n      hitCount = getHitCount(dir, term);\n\n      // Make sure the delete was successfully flushed:\n      assertEquals(0, hitCount);\n\n      modifier.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","05fe562aa248790944d43cdd478f512572835ba0","7e4c214a1f904dde76f5611b56d4081533055b3b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","sourceNew":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    // flush (and commit if ac)\n\n    modifier.optimize();\n    modifier.commit();\n\n    // one of the two files hits\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n\n    // open the writer again (closed above)\n\n    // delete the doc\n    // max buf del terms is two, so this is buffered\n\n    modifier.deleteDocuments(term);\n\n    // add a doc (needed for the !ac case; see below)\n    // doc remains buffered\n\n    Document doc = new Document();\n    modifier.addDocument(doc);\n\n    // commit the changes, the buffered deletes, and the new doc\n\n    // The failure object will fail on the first write after the del\n    // file gets created when processing the buffered delete\n\n    // in the ac case, this will be when writing the new segments\n    // files so we really don't need the new doc, but it's harmless\n\n    // in the !ac case, a new segments file won't be created but in\n    // this case, creation of the cfs file happens next so we need\n    // the doc (to test that it's okay that we don't lose deletes if\n    // failing while creating the cfs file)\n\n    boolean failed = false;\n    try {\n      modifier.commit();\n    } catch (IOException ioe) {\n      failed = true;\n    }\n\n    assertTrue(failed);\n\n    // The commit above failed, so we need to retry it (which will\n    // succeed, because the failure is a one-shot)\n\n    modifier.commit();\n\n    hitCount = getHitCount(dir, term);\n\n    // Make sure the delete was successfully flushed:\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    // flush (and commit if ac)\n\n    modifier.optimize();\n    modifier.commit();\n\n    // one of the two files hits\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n\n    // open the writer again (closed above)\n\n    // delete the doc\n    // max buf del terms is two, so this is buffered\n\n    modifier.deleteDocuments(term);\n\n    // add a doc (needed for the !ac case; see below)\n    // doc remains buffered\n\n    Document doc = new Document();\n    modifier.addDocument(doc);\n\n    // commit the changes, the buffered deletes, and the new doc\n\n    // The failure object will fail on the first write after the del\n    // file gets created when processing the buffered delete\n\n    // in the ac case, this will be when writing the new segments\n    // files so we really don't need the new doc, but it's harmless\n\n    // in the !ac case, a new segments file won't be created but in\n    // this case, creation of the cfs file happens next so we need\n    // the doc (to test that it's okay that we don't lose deletes if\n    // failing while creating the cfs file)\n\n    boolean failed = false;\n    try {\n      modifier.commit();\n    } catch (IOException ioe) {\n      failed = true;\n    }\n\n    assertTrue(failed);\n\n    // The commit above failed, so we need to retry it (which will\n    // succeed, because the failure is a one-shot)\n\n    modifier.commit();\n\n    hitCount = getHitCount(dir, term);\n\n    // Make sure the delete was successfully flushed:\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","sourceNew":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    // flush (and commit if ac)\n\n    modifier.optimize();\n    modifier.commit();\n\n    // one of the two files hits\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n\n    // open the writer again (closed above)\n\n    // delete the doc\n    // max buf del terms is two, so this is buffered\n\n    modifier.deleteDocuments(term);\n\n    // add a doc (needed for the !ac case; see below)\n    // doc remains buffered\n\n    Document doc = new Document();\n    modifier.addDocument(doc);\n\n    // commit the changes, the buffered deletes, and the new doc\n\n    // The failure object will fail on the first write after the del\n    // file gets created when processing the buffered delete\n\n    // in the ac case, this will be when writing the new segments\n    // files so we really don't need the new doc, but it's harmless\n\n    // in the !ac case, a new segments file won't be created but in\n    // this case, creation of the cfs file happens next so we need\n    // the doc (to test that it's okay that we don't lose deletes if\n    // failing while creating the cfs file)\n\n    boolean failed = false;\n    try {\n      modifier.commit();\n    } catch (IOException ioe) {\n      failed = true;\n    }\n\n    assertTrue(failed);\n\n    // The commit above failed, so we need to retry it (which will\n    // succeed, because the failure is a one-shot)\n\n    modifier.commit();\n\n    hitCount = getHitCount(dir, term);\n\n    // Make sure the delete was successfully flushed:\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    // flush (and commit if ac)\n\n    modifier.optimize();\n    modifier.commit();\n\n    // one of the two files hits\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n\n    // open the writer again (closed above)\n\n    // delete the doc\n    // max buf del terms is two, so this is buffered\n\n    modifier.deleteDocuments(term);\n\n    // add a doc (needed for the !ac case; see below)\n    // doc remains buffered\n\n    Document doc = new Document();\n    modifier.addDocument(doc);\n\n    // commit the changes, the buffered deletes, and the new doc\n\n    // The failure object will fail on the first write after the del\n    // file gets created when processing the buffered delete\n\n    // in the ac case, this will be when writing the new segments\n    // files so we really don't need the new doc, but it's harmless\n\n    // in the !ac case, a new segments file won't be created but in\n    // this case, creation of the cfs file happens next so we need\n    // the doc (to test that it's okay that we don't lose deletes if\n    // failing while creating the cfs file)\n\n    boolean failed = false;\n    try {\n      modifier.commit();\n    } catch (IOException ioe) {\n      failed = true;\n    }\n\n    assertTrue(failed);\n\n    // The commit above failed, so we need to retry it (which will\n    // succeed, because the failure is a one-shot)\n\n    modifier.commit();\n\n    hitCount = getHitCount(dir, term);\n\n    // Make sure the delete was successfully flushed:\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","sourceNew":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    // flush (and commit if ac)\n\n    modifier.optimize();\n    modifier.commit();\n\n    // one of the two files hits\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n\n    // open the writer again (closed above)\n\n    // delete the doc\n    // max buf del terms is two, so this is buffered\n\n    modifier.deleteDocuments(term);\n\n    // add a doc (needed for the !ac case; see below)\n    // doc remains buffered\n\n    Document doc = new Document();\n    modifier.addDocument(doc);\n\n    // commit the changes, the buffered deletes, and the new doc\n\n    // The failure object will fail on the first write after the del\n    // file gets created when processing the buffered delete\n\n    // in the ac case, this will be when writing the new segments\n    // files so we really don't need the new doc, but it's harmless\n\n    // in the !ac case, a new segments file won't be created but in\n    // this case, creation of the cfs file happens next so we need\n    // the doc (to test that it's okay that we don't lose deletes if\n    // failing while creating the cfs file)\n\n    boolean failed = false;\n    try {\n      modifier.commit();\n    } catch (IOException ioe) {\n      failed = true;\n    }\n\n    assertTrue(failed);\n\n    // The commit above failed, so we need to retry it (which will\n    // succeed, because the failure is a one-shot)\n\n    modifier.commit();\n\n    hitCount = getHitCount(dir, term);\n\n    // Make sure the delete was successfully flushed:\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    // flush (and commit if ac)\n\n    modifier.optimize();\n    modifier.commit();\n\n    // one of the two files hits\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n\n    // open the writer again (closed above)\n\n    // delete the doc\n    // max buf del terms is two, so this is buffered\n\n    modifier.deleteDocuments(term);\n\n    // add a doc (needed for the !ac case; see below)\n    // doc remains buffered\n\n    Document doc = new Document();\n    modifier.addDocument(doc);\n\n    // commit the changes, the buffered deletes, and the new doc\n\n    // The failure object will fail on the first write after the del\n    // file gets created when processing the buffered delete\n\n    // in the ac case, this will be when writing the new segments\n    // files so we really don't need the new doc, but it's harmless\n\n    // in the !ac case, a new segments file won't be created but in\n    // this case, creation of the cfs file happens next so we need\n    // the doc (to test that it's okay that we don't lose deletes if\n    // failing while creating the cfs file)\n\n    boolean failed = false;\n    try {\n      modifier.commit();\n    } catch (IOException ioe) {\n      failed = true;\n    }\n\n    assertTrue(failed);\n\n    // The commit above failed, so we need to retry it (which will\n    // succeed, because the failure is a one-shot)\n\n    modifier.commit();\n\n    hitCount = getHitCount(dir, term);\n\n    // Make sure the delete was successfully flushed:\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","sourceNew":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setMaxBufferedDeleteTerms(2));\n    LogMergePolicy lmp = (LogMergePolicy) modifier.getMergePolicy();\n    lmp.setUseCompoundFile(true);\n    lmp.setUseCompoundDocStore(true);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    // flush (and commit if ac)\n\n    modifier.optimize();\n    modifier.commit();\n\n    // one of the two files hits\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n\n    // open the writer again (closed above)\n\n    // delete the doc\n    // max buf del terms is two, so this is buffered\n\n    modifier.deleteDocuments(term);\n\n    // add a doc (needed for the !ac case; see below)\n    // doc remains buffered\n\n    Document doc = new Document();\n    modifier.addDocument(doc);\n\n    // commit the changes, the buffered deletes, and the new doc\n\n    // The failure object will fail on the first write after the del\n    // file gets created when processing the buffered delete\n\n    // in the ac case, this will be when writing the new segments\n    // files so we really don't need the new doc, but it's harmless\n\n    // in the !ac case, a new segments file won't be created but in\n    // this case, creation of the cfs file happens next so we need\n    // the doc (to test that it's okay that we don't lose deletes if\n    // failing while creating the cfs file)\n\n    boolean failed = false;\n    try {\n      modifier.commit();\n    } catch (IOException ioe) {\n      failed = true;\n    }\n\n    assertTrue(failed);\n\n    // The commit above failed, so we need to retry it (which will\n    // succeed, because the failure is a one-shot)\n\n    modifier.commit();\n\n    hitCount = getHitCount(dir, term);\n\n    // Make sure the delete was successfully flushed:\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    // flush (and commit if ac)\n\n    modifier.optimize();\n    modifier.commit();\n\n    // one of the two files hits\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n\n    // open the writer again (closed above)\n\n    // delete the doc\n    // max buf del terms is two, so this is buffered\n\n    modifier.deleteDocuments(term);\n\n    // add a doc (needed for the !ac case; see below)\n    // doc remains buffered\n\n    Document doc = new Document();\n    modifier.addDocument(doc);\n\n    // commit the changes, the buffered deletes, and the new doc\n\n    // The failure object will fail on the first write after the del\n    // file gets created when processing the buffered delete\n\n    // in the ac case, this will be when writing the new segments\n    // files so we really don't need the new doc, but it's harmless\n\n    // in the !ac case, a new segments file won't be created but in\n    // this case, creation of the cfs file happens next so we need\n    // the doc (to test that it's okay that we don't lose deletes if\n    // failing while creating the cfs file)\n\n    boolean failed = false;\n    try {\n      modifier.commit();\n    } catch (IOException ioe) {\n      failed = true;\n    }\n\n    assertTrue(failed);\n\n    // The commit above failed, so we need to retry it (which will\n    // succeed, because the failure is a one-shot)\n\n    modifier.commit();\n\n    hitCount = getHitCount(dir, term);\n\n    // Make sure the delete was successfully flushed:\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","sourceNew":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    // flush (and commit if ac)\n\n    modifier.optimize();\n    modifier.commit();\n\n    // one of the two files hits\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n\n    // open the writer again (closed above)\n\n    // delete the doc\n    // max buf del terms is two, so this is buffered\n\n    modifier.deleteDocuments(term);\n\n    // add a doc (needed for the !ac case; see below)\n    // doc remains buffered\n\n    Document doc = new Document();\n    modifier.addDocument(doc);\n\n    // commit the changes, the buffered deletes, and the new doc\n\n    // The failure object will fail on the first write after the del\n    // file gets created when processing the buffered delete\n\n    // in the ac case, this will be when writing the new segments\n    // files so we really don't need the new doc, but it's harmless\n\n    // in the !ac case, a new segments file won't be created but in\n    // this case, creation of the cfs file happens next so we need\n    // the doc (to test that it's okay that we don't lose deletes if\n    // failing while creating the cfs file)\n\n    boolean failed = false;\n    try {\n      modifier.commit();\n    } catch (IOException ioe) {\n      failed = true;\n    }\n\n    assertTrue(failed);\n\n    // The commit above failed, so we need to retry it (which will\n    // succeed, because the failure is a one-shot)\n\n    modifier.commit();\n\n    hitCount = getHitCount(dir, term);\n\n    // Make sure the delete was successfully flushed:\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setMaxBufferedDeleteTerms(2));\n    LogMergePolicy lmp = (LogMergePolicy) modifier.getMergePolicy();\n    lmp.setUseCompoundFile(true);\n    lmp.setUseCompoundDocStore(true);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    // flush (and commit if ac)\n\n    modifier.optimize();\n    modifier.commit();\n\n    // one of the two files hits\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n\n    // open the writer again (closed above)\n\n    // delete the doc\n    // max buf del terms is two, so this is buffered\n\n    modifier.deleteDocuments(term);\n\n    // add a doc (needed for the !ac case; see below)\n    // doc remains buffered\n\n    Document doc = new Document();\n    modifier.addDocument(doc);\n\n    // commit the changes, the buffered deletes, and the new doc\n\n    // The failure object will fail on the first write after the del\n    // file gets created when processing the buffered delete\n\n    // in the ac case, this will be when writing the new segments\n    // files so we really don't need the new doc, but it's harmless\n\n    // in the !ac case, a new segments file won't be created but in\n    // this case, creation of the cfs file happens next so we need\n    // the doc (to test that it's okay that we don't lose deletes if\n    // failing while creating the cfs file)\n\n    boolean failed = false;\n    try {\n      modifier.commit();\n    } catch (IOException ioe) {\n      failed = true;\n    }\n\n    assertTrue(failed);\n\n    // The commit above failed, so we need to retry it (which will\n    // succeed, because the failure is a one-shot)\n\n    modifier.commit();\n\n    hitCount = getHitCount(dir, term);\n\n    // Make sure the delete was successfully flushed:\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","sourceNew":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDeleteTerms(2));\n    LogMergePolicy lmp = (LogMergePolicy) modifier.getMergePolicy();\n    lmp.setUseCompoundFile(true);\n    lmp.setUseCompoundDocStore(true);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    // flush (and commit if ac)\n\n    modifier.optimize();\n    modifier.commit();\n\n    // one of the two files hits\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n\n    // open the writer again (closed above)\n\n    // delete the doc\n    // max buf del terms is two, so this is buffered\n\n    modifier.deleteDocuments(term);\n\n    // add a doc (needed for the !ac case; see below)\n    // doc remains buffered\n\n    Document doc = new Document();\n    modifier.addDocument(doc);\n\n    // commit the changes, the buffered deletes, and the new doc\n\n    // The failure object will fail on the first write after the del\n    // file gets created when processing the buffered delete\n\n    // in the ac case, this will be when writing the new segments\n    // files so we really don't need the new doc, but it's harmless\n\n    // in the !ac case, a new segments file won't be created but in\n    // this case, creation of the cfs file happens next so we need\n    // the doc (to test that it's okay that we don't lose deletes if\n    // failing while creating the cfs file)\n\n    boolean failed = false;\n    try {\n      modifier.commit();\n    } catch (IOException ioe) {\n      failed = true;\n    }\n\n    assertTrue(failed);\n\n    // The commit above failed, so we need to retry it (which will\n    // succeed, because the failure is a one-shot)\n\n    modifier.commit();\n\n    hitCount = getHitCount(dir, term);\n\n    // Make sure the delete was successfully flushed:\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    // flush (and commit if ac)\n\n    modifier.optimize();\n    modifier.commit();\n\n    // one of the two files hits\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n\n    // open the writer again (closed above)\n\n    // delete the doc\n    // max buf del terms is two, so this is buffered\n\n    modifier.deleteDocuments(term);\n\n    // add a doc (needed for the !ac case; see below)\n    // doc remains buffered\n\n    Document doc = new Document();\n    modifier.addDocument(doc);\n\n    // commit the changes, the buffered deletes, and the new doc\n\n    // The failure object will fail on the first write after the del\n    // file gets created when processing the buffered delete\n\n    // in the ac case, this will be when writing the new segments\n    // files so we really don't need the new doc, but it's harmless\n\n    // in the !ac case, a new segments file won't be created but in\n    // this case, creation of the cfs file happens next so we need\n    // the doc (to test that it's okay that we don't lose deletes if\n    // failing while creating the cfs file)\n\n    boolean failed = false;\n    try {\n      modifier.commit();\n    } catch (IOException ioe) {\n      failed = true;\n    }\n\n    assertTrue(failed);\n\n    // The commit above failed, so we need to retry it (which will\n    // succeed, because the failure is a one-shot)\n\n    modifier.commit();\n\n    hitCount = getHitCount(dir, term);\n\n    // Make sure the delete was successfully flushed:\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","sourceNew":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDeleteTerms(2));\n    LogMergePolicy lmp = (LogMergePolicy) modifier.getMergePolicy();\n    lmp.setUseCompoundFile(true);\n    lmp.setUseCompoundDocStore(true);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    // flush (and commit if ac)\n\n    modifier.optimize();\n    modifier.commit();\n\n    // one of the two files hits\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n\n    // open the writer again (closed above)\n\n    // delete the doc\n    // max buf del terms is two, so this is buffered\n\n    modifier.deleteDocuments(term);\n\n    // add a doc (needed for the !ac case; see below)\n    // doc remains buffered\n\n    Document doc = new Document();\n    modifier.addDocument(doc);\n\n    // commit the changes, the buffered deletes, and the new doc\n\n    // The failure object will fail on the first write after the del\n    // file gets created when processing the buffered delete\n\n    // in the ac case, this will be when writing the new segments\n    // files so we really don't need the new doc, but it's harmless\n\n    // in the !ac case, a new segments file won't be created but in\n    // this case, creation of the cfs file happens next so we need\n    // the doc (to test that it's okay that we don't lose deletes if\n    // failing while creating the cfs file)\n\n    boolean failed = false;\n    try {\n      modifier.commit();\n    } catch (IOException ioe) {\n      failed = true;\n    }\n\n    assertTrue(failed);\n\n    // The commit above failed, so we need to retry it (which will\n    // succeed, because the failure is a one-shot)\n\n    modifier.commit();\n\n    hitCount = getHitCount(dir, term);\n\n    // Make sure the delete was successfully flushed:\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDeleteTerms(2));\n    LogMergePolicy lmp = (LogMergePolicy) modifier.getMergePolicy();\n    lmp.setUseCompoundFile(true);\n    lmp.setUseCompoundDocStore(true);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    // flush (and commit if ac)\n\n    modifier.optimize();\n    modifier.commit();\n\n    // one of the two files hits\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n\n    // open the writer again (closed above)\n\n    // delete the doc\n    // max buf del terms is two, so this is buffered\n\n    modifier.deleteDocuments(term);\n\n    // add a doc (needed for the !ac case; see below)\n    // doc remains buffered\n\n    Document doc = new Document();\n    modifier.addDocument(doc);\n\n    // commit the changes, the buffered deletes, and the new doc\n\n    // The failure object will fail on the first write after the del\n    // file gets created when processing the buffered delete\n\n    // in the ac case, this will be when writing the new segments\n    // files so we really don't need the new doc, but it's harmless\n\n    // in the !ac case, a new segments file won't be created but in\n    // this case, creation of the cfs file happens next so we need\n    // the doc (to test that it's okay that we don't lose deletes if\n    // failing while creating the cfs file)\n\n    boolean failed = false;\n    try {\n      modifier.commit();\n    } catch (IOException ioe) {\n      failed = true;\n    }\n\n    assertTrue(failed);\n\n    // The commit above failed, so we need to retry it (which will\n    // succeed, because the failure is a one-shot)\n\n    modifier.commit();\n\n    hitCount = getHitCount(dir, term);\n\n    // Make sure the delete was successfully flushed:\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["fde68de507dbf344495d7b5e8052866fe5f254ab"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"fde68de507dbf344495d7b5e8052866fe5f254ab":["5d01393ee15c09415a2d4d8610aef0ec780a5e5f"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["e82780afe6097066eb5befb86e9432f077667e3d"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"5d01393ee15c09415a2d4d8610aef0ec780a5e5f":["abd5d0ae26eed0e7cbbbbed19f6480fe16055e9b"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["87c966e9308847938a7c905c2e46a56d8df788b8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"abd5d0ae26eed0e7cbbbbed19f6480fe16055e9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e82780afe6097066eb5befb86e9432f077667e3d":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"87c966e9308847938a7c905c2e46a56d8df788b8":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["87c966e9308847938a7c905c2e46a56d8df788b8"],"fde68de507dbf344495d7b5e8052866fe5f254ab":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["e82780afe6097066eb5befb86e9432f077667e3d"],"5d01393ee15c09415a2d4d8610aef0ec780a5e5f":["fde68de507dbf344495d7b5e8052866fe5f254ab"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abd5d0ae26eed0e7cbbbbed19f6480fe16055e9b"],"abd5d0ae26eed0e7cbbbbed19f6480fe16055e9b":["5d01393ee15c09415a2d4d8610aef0ec780a5e5f"],"e82780afe6097066eb5befb86e9432f077667e3d":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"87c966e9308847938a7c905c2e46a56d8df788b8":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}