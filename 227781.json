{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","commits":[{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","pathOld":"/dev/null","sourceNew":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = blockSize - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= blockSize) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          skipBlock(posIn);\n          toSkip -= blockSize;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","sourceNew":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          ForUtil.skipBlock(posIn);\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n    }\n\n","sourceOld":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = blockSize - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= blockSize) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          skipBlock(posIn);\n          toSkip -= blockSize;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf88b0fdab72e7a3389fdd9a68ae252142c41511","date":1344435322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","sourceNew":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n    }\n\n","sourceOld":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          ForUtil.skipBlock(posIn);\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsReader.BlockDocsAndPositionsEnum#skipPositions().mjava","sourceNew":null,"sourceOld":"    // nocommit in theory we could avoid loading frq block\n    // when not needed, ie, use skip data to load how far to\n    // seek the pos pointe ... instead of having to load frq\n    // blocks only to sum up how many positions to skip\n    private void skipPositions() throws IOException {\n      // Skip positions now:\n      int toSkip = posPendingCount - freq;\n      if (DEBUG) {\n        System.out.println(\"      FPR.skipPositions: toSkip=\" + toSkip);\n      }\n\n      final int leftInBlock = BLOCK_SIZE - posBufferUpto;\n      if (toSkip < leftInBlock) {\n        posBufferUpto += toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      } else {\n        toSkip -= leftInBlock;\n        while(toSkip >= BLOCK_SIZE) {\n          if (DEBUG) {\n            System.out.println(\"        skip whole block @ fp=\" + posIn.getFilePointer());\n          }\n          assert posIn.getFilePointer() != lastPosBlockFP;\n          forUtil.skipBlock(posIn);\n          toSkip -= BLOCK_SIZE;\n        }\n        refillPositions();\n        posBufferUpto = toSkip;\n        if (DEBUG) {\n          System.out.println(\"        skip w/in block to posBufferUpto=\" + posBufferUpto);\n        }\n      }\n\n      position = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["cf88b0fdab72e7a3389fdd9a68ae252142c41511"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["cf88b0fdab72e7a3389fdd9a68ae252142c41511"],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}