{"path":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      if (scoreMode.needsScores() == false) {\n        return query.createWeight(searcher, scoreMode, boost);\n      }\n      Weight inner = query.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost);\n      return new Weight(this) {\n        \n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return true;\n        }\n        \n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Scorer innerScorer = inner.scorer(context);\n          NumericDocValues scoreFactors = DocValues.getNumeric(context.reader(), scoreField);\n          return new Scorer(this) {\n            \n            @Override\n            public float score() throws IOException {\n              if (scoreFactors.advanceExact(docID())) {\n                return Float.intBitsToFloat((int) scoreFactors.longValue());\n              }\n              return 0;\n            }\n            \n            @Override\n            public float maxScore() {\n              return Float.POSITIVE_INFINITY;\n            }\n            \n            @Override\n            public DocIdSetIterator iterator() {\n              return innerScorer.iterator();\n            }\n            \n            @Override\n            public int docID() {\n              return innerScorer.docID();\n            }\n          };\n        }\n        \n        @Override\n        public void extractTerms(Set<Term> terms) {\n          inner.extractTerms(terms);\n        }\n        \n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          Scorer s = scorer(context);\n          if (s != null) {\n            int advanced = s.iterator().advance(doc);\n            if (doc != advanced) {\n              return Explanation.match(s.score(), \"match\");\n            }\n          }\n          return Explanation.noMatch(\"no match\");\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      if (scoreMode.needsScores() == false) {\n        return query.createWeight(searcher, scoreMode, boost);\n      }\n      Weight inner = query.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost);\n      return new Weight(this) {\n        \n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return true;\n        }\n        \n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Scorer innerScorer = inner.scorer(context);\n          NumericDocValues scoreFactors = DocValues.getNumeric(context.reader(), scoreField);\n          return new Scorer(this) {\n            \n            @Override\n            public float score() throws IOException {\n              if (scoreFactors.advanceExact(docID())) {\n                return Float.intBitsToFloat((int) scoreFactors.longValue());\n              }\n              return 0;\n            }\n            \n            @Override\n            public float maxScore() {\n              return Float.POSITIVE_INFINITY;\n            }\n            \n            @Override\n            public DocIdSetIterator iterator() {\n              return innerScorer.iterator();\n            }\n            \n            @Override\n            public int docID() {\n              return innerScorer.docID();\n            }\n          };\n        }\n        \n        @Override\n        public void extractTerms(Set<Term> terms) {\n          inner.extractTerms(terms);\n        }\n        \n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          Scorer s = scorer(context);\n          if (s != null) {\n            int advanced = s.iterator().advance(doc);\n            if (doc != advanced) {\n              return Explanation.match(s.score(), \"match\");\n            }\n          }\n          return Explanation.noMatch(\"no match\");\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      if (scoreMode.needsScores() == false) {\n        return query.createWeight(searcher, scoreMode, boost);\n      }\n      Weight inner = query.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost);\n      return new Weight(this) {\n        \n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return true;\n        }\n        \n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Scorer innerScorer = inner.scorer(context);\n          NumericDocValues scoreFactors = DocValues.getNumeric(context.reader(), scoreField);\n          return new Scorer(this) {\n            \n            @Override\n            public float score() throws IOException {\n              if (scoreFactors.advanceExact(docID())) {\n                return Float.intBitsToFloat((int) scoreFactors.longValue());\n              }\n              return 0;\n            }\n            \n            @Override\n            public float getMaxScore(int upTo) throws IOException {\n              return Float.POSITIVE_INFINITY;\n            }\n            \n            @Override\n            public DocIdSetIterator iterator() {\n              return innerScorer.iterator();\n            }\n            \n            @Override\n            public int docID() {\n              return innerScorer.docID();\n            }\n          };\n        }\n        \n        @Override\n        public void extractTerms(Set<Term> terms) {\n          inner.extractTerms(terms);\n        }\n        \n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          Scorer s = scorer(context);\n          if (s != null) {\n            int advanced = s.iterator().advance(doc);\n            if (doc != advanced) {\n              return Explanation.match(s.score(), \"match\");\n            }\n          }\n          return Explanation.noMatch(\"no match\");\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      if (scoreMode.needsScores() == false) {\n        return query.createWeight(searcher, scoreMode, boost);\n      }\n      Weight inner = query.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost);\n      return new Weight(this) {\n        \n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return true;\n        }\n        \n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Scorer innerScorer = inner.scorer(context);\n          NumericDocValues scoreFactors = DocValues.getNumeric(context.reader(), scoreField);\n          return new Scorer(this) {\n            \n            @Override\n            public float score() throws IOException {\n              if (scoreFactors.advanceExact(docID())) {\n                return Float.intBitsToFloat((int) scoreFactors.longValue());\n              }\n              return 0;\n            }\n            \n            @Override\n            public float maxScore() {\n              return Float.POSITIVE_INFINITY;\n            }\n            \n            @Override\n            public DocIdSetIterator iterator() {\n              return innerScorer.iterator();\n            }\n            \n            @Override\n            public int docID() {\n              return innerScorer.docID();\n            }\n          };\n        }\n        \n        @Override\n        public void extractTerms(Set<Term> terms) {\n          inner.extractTerms(terms);\n        }\n        \n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          Scorer s = scorer(context);\n          if (s != null) {\n            int advanced = s.iterator().advance(doc);\n            if (doc != advanced) {\n              return Explanation.match(s.score(), \"match\");\n            }\n          }\n          return Explanation.noMatch(\"no match\");\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.DocValueScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      if (scoreMode.needsScores() == false) {\n        return query.createWeight(searcher, scoreMode, boost);\n      }\n      Weight inner = query.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost);\n      return new Weight(this) {\n        \n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return true;\n        }\n        \n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Scorer innerScorer = inner.scorer(context);\n          NumericDocValues scoreFactors = DocValues.getNumeric(context.reader(), scoreField);\n          return new Scorer(this) {\n            \n            @Override\n            public float score() throws IOException {\n              if (scoreFactors.advanceExact(docID())) {\n                return Float.intBitsToFloat((int) scoreFactors.longValue());\n              }\n              return 0;\n            }\n            \n            @Override\n            public float getMaxScore(int upTo) throws IOException {\n              return Float.POSITIVE_INFINITY;\n            }\n            \n            @Override\n            public DocIdSetIterator iterator() {\n              return innerScorer.iterator();\n            }\n            \n            @Override\n            public int docID() {\n              return innerScorer.docID();\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          Scorer s = scorer(context);\n          if (s != null) {\n            int advanced = s.iterator().advance(doc);\n            if (doc != advanced) {\n              return Explanation.match(s.score(), \"match\");\n            }\n          }\n          return Explanation.noMatch(\"no match\");\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n      if (scoreMode.needsScores() == false) {\n        return query.createWeight(searcher, scoreMode, boost);\n      }\n      Weight inner = query.createWeight(searcher, ScoreMode.COMPLETE_NO_SCORES, boost);\n      return new Weight(this) {\n        \n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return true;\n        }\n        \n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          Scorer innerScorer = inner.scorer(context);\n          NumericDocValues scoreFactors = DocValues.getNumeric(context.reader(), scoreField);\n          return new Scorer(this) {\n            \n            @Override\n            public float score() throws IOException {\n              if (scoreFactors.advanceExact(docID())) {\n                return Float.intBitsToFloat((int) scoreFactors.longValue());\n              }\n              return 0;\n            }\n            \n            @Override\n            public float getMaxScore(int upTo) throws IOException {\n              return Float.POSITIVE_INFINITY;\n            }\n            \n            @Override\n            public DocIdSetIterator iterator() {\n              return innerScorer.iterator();\n            }\n            \n            @Override\n            public int docID() {\n              return innerScorer.docID();\n            }\n          };\n        }\n        \n        @Override\n        public void extractTerms(Set<Term> terms) {\n          inner.extractTerms(terms);\n        }\n        \n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          Scorer s = scorer(context);\n          if (s != null) {\n            int advanced = s.iterator().advance(doc);\n            if (doc != advanced) {\n              return Explanation.match(s.score(), \"match\");\n            }\n          }\n          return Explanation.noMatch(\"no match\");\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"523cc6563c99a55527ef7993efc5413c6648852d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["523cc6563c99a55527ef7993efc5413c6648852d"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["523cc6563c99a55527ef7993efc5413c6648852d"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"523cc6563c99a55527ef7993efc5413c6648852d":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}