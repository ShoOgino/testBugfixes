{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#verifyShardsParam(String).mjava","commits":[{"id":"cbd8af67010775ee4b53c58597a30bbe480707ee","date":1455837524,"type":0,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#verifyShardsParam(String).mjava","pathOld":"/dev/null","sourceNew":"  private static void verifyShardsParam(String shardsParam) {\n    for (String shard : shardsParam.split(\",\")) {\n      if (!SolrIdentifierValidator.validateShardName(shard))\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid shard: \" + shard\n            + \". Shard names must consist entirely of periods, underscores and alphanumerics\");;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06043fcf612d2cd93636c22cd062e0641406b417","date":1455841699,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#verifyShardsParam(String).mjava","pathOld":"/dev/null","sourceNew":"  private static void verifyShardsParam(String shardsParam) {\n    for (String shard : shardsParam.split(\",\")) {\n      if (!SolrIdentifierValidator.validateShardName(shard))\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid shard: \" + shard\n            + \". Shard names must consist entirely of periods, underscores and alphanumerics\");;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c68b625b6d40ea28c8d7927c14d1453867cd2a4a","date":1455847572,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#verifyShardsParam(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#verifyShardsParam(String).mjava","sourceNew":"  private static void verifyShardsParam(String shardsParam) {\n    for (String shard : shardsParam.split(\",\")) {\n      if (!SolrIdentifierValidator.validateShardName(shard))\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid shard: \" + shard\n            + \". Shard names must consist entirely of periods, underscores, and alphanumerics\");;\n    }\n  }\n\n","sourceOld":"  private static void verifyShardsParam(String shardsParam) {\n    for (String shard : shardsParam.split(\",\")) {\n      if (!SolrIdentifierValidator.validateShardName(shard))\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid shard: \" + shard\n            + \". Shard names must consist entirely of periods, underscores and alphanumerics\");;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a839eb6696740aa302262e32e6f45b5e70b47bff","date":1457028247,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#verifyShardsParam(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#verifyShardsParam(String).mjava","sourceNew":"  private static void verifyShardsParam(String shardsParam) {\n    for (String shard : shardsParam.split(\",\")) {\n      if (!SolrIdentifierValidator.validateShardName(shard))\n        throw new SolrException(ErrorCode.BAD_REQUEST, SolrIdentifierValidator.getIdentifierMessage(SolrIdentifierValidator.IdentifierType.SHARD,\n            shard));\n    }\n  }\n\n","sourceOld":"  private static void verifyShardsParam(String shardsParam) {\n    for (String shard : shardsParam.split(\",\")) {\n      if (!SolrIdentifierValidator.validateShardName(shard))\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid shard: \" + shard\n            + \". Shard names must consist entirely of periods, underscores, and alphanumerics\");;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#verifyShardsParam(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#verifyShardsParam(String).mjava","sourceNew":"  private static void verifyShardsParam(String shardsParam) {\n    for (String shard : shardsParam.split(\",\")) {\n      if (!SolrIdentifierValidator.validateShardName(shard))\n        throw new SolrException(ErrorCode.BAD_REQUEST, SolrIdentifierValidator.getIdentifierMessage(SolrIdentifierValidator.IdentifierType.SHARD,\n            shard));\n    }\n  }\n\n","sourceOld":"  private static void verifyShardsParam(String shardsParam) {\n    for (String shard : shardsParam.split(\",\")) {\n      if (!SolrIdentifierValidator.validateShardName(shard))\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid shard: \" + shard\n            + \". Shard names must consist entirely of periods, underscores, and alphanumerics\");;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daed6b66edd950a7f2af9857df64b09acf3deacc","date":1457527865,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#verifyShardsParam(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#verifyShardsParam(String).mjava","sourceNew":"  private static void verifyShardsParam(String shardsParam) {\n    for (String shard : shardsParam.split(\",\")) {\n      SolrIdentifierValidator.validateShardName(shard);\n    }\n  }\n\n","sourceOld":"  private static void verifyShardsParam(String shardsParam) {\n    for (String shard : shardsParam.split(\",\")) {\n      if (!SolrIdentifierValidator.validateShardName(shard))\n        throw new SolrException(ErrorCode.BAD_REQUEST, SolrIdentifierValidator.getIdentifierMessage(SolrIdentifierValidator.IdentifierType.SHARD,\n            shard));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a839eb6696740aa302262e32e6f45b5e70b47bff":["c68b625b6d40ea28c8d7927c14d1453867cd2a4a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c68b625b6d40ea28c8d7927c14d1453867cd2a4a":["06043fcf612d2cd93636c22cd062e0641406b417"],"daed6b66edd950a7f2af9857df64b09acf3deacc":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["c68b625b6d40ea28c8d7927c14d1453867cd2a4a","a839eb6696740aa302262e32e6f45b5e70b47bff"],"06043fcf612d2cd93636c22cd062e0641406b417":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cbd8af67010775ee4b53c58597a30bbe480707ee"],"cbd8af67010775ee4b53c58597a30bbe480707ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["daed6b66edd950a7f2af9857df64b09acf3deacc"]},"commit2Childs":{"a839eb6696740aa302262e32e6f45b5e70b47bff":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06043fcf612d2cd93636c22cd062e0641406b417","cbd8af67010775ee4b53c58597a30bbe480707ee"],"c68b625b6d40ea28c8d7927c14d1453867cd2a4a":["a839eb6696740aa302262e32e6f45b5e70b47bff","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"daed6b66edd950a7f2af9857df64b09acf3deacc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["daed6b66edd950a7f2af9857df64b09acf3deacc"],"06043fcf612d2cd93636c22cd062e0641406b417":["c68b625b6d40ea28c8d7927c14d1453867cd2a4a"],"cbd8af67010775ee4b53c58597a30bbe480707ee":["06043fcf612d2cd93636c22cd062e0641406b417"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}