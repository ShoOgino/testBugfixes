{"path":"src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","commits":[{"id":"50de217601652b8d4bff9f8ac567455920c85891","date":1243497655,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  protected void addMainQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","pathOld":"src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","sourceNew":"  protected void addMainQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n  }\n\n","sourceOld":"  protected void addMainQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["50de217601652b8d4bff9f8ac567455920c85891"],"50de217601652b8d4bff9f8ac567455920c85891":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["50de217601652b8d4bff9f8ac567455920c85891"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"50de217601652b8d4bff9f8ac567455920c85891":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}