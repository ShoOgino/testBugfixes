{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#createSchemaAndFields().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#createSchemaAndFields().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void createSchemaAndFields() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n\n    singleInts = new HashMap<>(); \n    multiInts = new HashMap<>();\n    singleLongs = new HashMap<>(); \n    multiLongs = new HashMap<>();\n    singleFloats = new HashMap<>(); \n    multiFloats = new HashMap<>();\n    singleDoubles = new HashMap<>(); \n    multiDoubles = new HashMap<>();\n    singleDates = new HashMap<>(); \n    multiDates = new HashMap<>();\n    singleStrings = new HashMap<>(); \n    multiStrings = new HashMap<>();\n    singleBooleans = new HashMap<>(); \n    multiBooleans = new HashMap<>();\n    \n    missingDocuments = new ArrayList<>();\n    \n    assertU(adoc(\"id\", \"-1\"));\n    missingDocuments.add(\"-1\");\n    assertU(adoc(\"id\", \"5\"));\n    missingDocuments.add(\"5\");\n    for (int i = 0; i < 5; ++i) {\n      assertU(adoc(\n          \"id\", \"\" + i, \n          \n          \"int_i_t\", \"\" + i,\n          \"int_im_t\", \"\" + i,\n          \"int_im_t\", \"\" + (i + 10),\n          \"int_im_t\", \"\" + (i + 10),\n          \"int_im_t\", \"\" + (i + 20),\n          \n          \"int_i_p\", \"\" + i,\n          \"int_im_p\", \"\" + i,\n          \"int_im_p\", \"\" + (i + 10),\n          \"int_im_p\", \"\" + (i + 10),\n          \"int_im_p\", \"\" + (i + 20),\n          \n          \"long_l_t\", \"\" + i,\n          \"long_lm_t\", \"\" + i,\n          \"long_lm_t\", \"\" + (i + 10),\n          \"long_lm_t\", \"\" + (i + 10),\n          \"long_lm_t\", \"\" + (i + 20),\n          \n          \"long_l_p\", \"\" + i,\n          \"long_lm_p\", \"\" + i,\n          \"long_lm_p\", \"\" + (i + 10),\n          \"long_lm_p\", \"\" + (i + 10),\n          \"long_lm_p\", \"\" + (i + 20),\n          \n          \"float_f_t\", \"\" + (i + .75F),\n          \"float_fm_t\", \"\" + (i + .75F),\n          \"float_fm_t\", \"\" + (i + 10.75F),\n          \"float_fm_t\", \"\" + (i + 10.75F),\n          \"float_fm_t\", \"\" + (i + 20.75F),\n          \n          \"float_f_p\", \"\" + (i + .75F),\n          \"float_fm_p\", \"\" + (i + .75F),\n          \"float_fm_p\", \"\" + (i + 10.75F),\n          \"float_fm_p\", \"\" + (i + 10.75F),\n          \"float_fm_p\", \"\" + (i + 20.75F),\n          \n          \"double_d_t\", \"\" + (i + .5),\n          \"double_dm_t\", \"\" + (i + .5),\n          \"double_dm_t\", \"\" + (i + 10.5),\n          \"double_dm_t\", \"\" + (i + 10.5),\n          \"double_dm_t\", \"\" + (i + 20.5),\n          \n          \"double_d_p\", \"\" + (i + .5),\n          \"double_dm_p\", \"\" + (i + .5),\n          \"double_dm_p\", \"\" + (i + 10.5),\n          \"double_dm_p\", \"\" + (i + 10.5),\n          \"double_dm_p\", \"\" + (i + 20.5),\n          \n          \"date_dt_t\", \"180\" + i + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", \"180\" + i + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", \"18\" + (i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", \"18\" + (i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", \"18\" + (i + 20) + \"-12-31T23:59:59Z\",\n          \n          \"date_dt_p\", \"180\" + i + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", \"180\" + i + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", \"18\" + (i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", \"18\" + (i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", \"18\" + (i + 20) + \"-12-31T23:59:59Z\",\n          \n          \"string_s\", \"abc\" + i,\n          \"string_sm\", \"abc\" + i,\n          \"string_sm\", \"def\" + i,\n          \"string_sm\", \"def\" + i,\n          \"string_sm\", \"ghi\" + i,\n          \n          \"boolean_b\", Boolean.toString(i % 3 == 0),\n          \"boolean_bm\", \"false\",\n          \"boolean_bm\", \"true\",\n          \"boolean_bm\", \"false\"\n      ));\n      \n      singleInts.put(\"\"+i, i);\n      Map<Integer, Integer> ints = new HashMap<>();\n      ints.put(i, 1);\n      ints.put(i + 10, 2);\n      ints.put(i + 20, 1);\n      multiInts.put(\"\"+i, ints);\n      \n      singleLongs.put(\"\"+i, (long) i);\n      Map<Long, Integer> longs = new HashMap<>();\n      longs.put((long) i, 1);\n      longs.put(i + 10L, 2);\n      longs.put(i + 20L, 1);\n      multiLongs.put(\"\"+i, longs);\n      \n      singleFloats.put(\"\"+i, i + .75F);\n      Map<Float, Integer> floats = new HashMap<>();\n      floats.put(i + .75F, 1);\n      floats.put(i + 10.75F, 2);\n      floats.put(i + 20.75F, 1);\n      multiFloats.put(\"\"+i, floats);\n      \n      singleDoubles.put(\"\"+i, i + .5);\n      Map<Double, Integer> doubles = new HashMap<>();\n      doubles.put(i + .5, 1);\n      doubles.put(i + 10.5, 2);\n      doubles.put(i + 20.5, 1);\n      multiDoubles.put(\"\"+i, doubles);\n      \n      singleDates.put(\"\"+i, Instant.parse(\"180\" + i + \"-12-31T23:59:59Z\").toEpochMilli());\n      Map<Long, Integer> dates = new HashMap<>();\n      dates.put(Instant.parse(\"180\" + i + \"-12-31T23:59:59Z\").toEpochMilli(), 1);\n      dates.put(Instant.parse(\"18\" + ( i + 10 ) + \"-12-31T23:59:59Z\").toEpochMilli(), 2);\n      dates.put(Instant.parse(\"18\" + ( i + 20 ) + \"-12-31T23:59:59Z\").toEpochMilli(), 1);\n      multiDates.put(\"\"+i, dates);\n      \n      singleStrings.put(\"\"+i, \"abc\" + i);\n      Map<String, Integer> strings = new HashMap<>();\n      strings.put(\"abc\" + i, 1);\n      strings.put(\"def\" + i, 2);\n      strings.put(\"ghi\" + i, 1);\n      multiStrings.put(\"\"+i, strings);\n      \n      singleBooleans.put(\"\"+i, i % 3 == 0);\n      Map<Boolean, Integer> booleans = new HashMap<>();\n      booleans.put(true, 1);\n      booleans.put(false, 2);\n      multiBooleans.put(\"\"+i, booleans);\n    }\n    assertU(commit());\n    \n    ref = h.getCore().getSearcher();\n    searcher = ref.get();\n    \n    indexSchema = h.getCore().getLatestSchema();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56de5ac5fdfeff30c4982b3753bcc902bccf56fb","date":1527695101,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#createSchemaAndFields().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#createSchemaAndFields().mjava","sourceNew":"  @BeforeClass\n  public static void createSchemaAndFields() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n\n    singleInts = new HashMap<>(); \n    multiInts = new HashMap<>();\n    singleLongs = new HashMap<>(); \n    multiLongs = new HashMap<>();\n    singleFloats = new HashMap<>(); \n    multiFloats = new HashMap<>();\n    singleDoubles = new HashMap<>(); \n    multiDoubles = new HashMap<>();\n    singleDates = new HashMap<>(); \n    multiDates = new HashMap<>();\n    singleStrings = new HashMap<>(); \n    multiStrings = new HashMap<>();\n    singleBooleans = new HashMap<>(); \n    multiBooleans = new HashMap<>();\n    \n    missingDocuments = new ArrayList<>();\n    \n    assertU(adoc(\"id\", \"-2\"));\n    missingDocuments.add(\"-2\");\n    assertU(adoc(\"id\", \"5\"));\n    missingDocuments.add(\"5\");\n    for (int i = -1; i < 5; ++i) {\n      assertU(adoc(\n          \"id\", \"\" + i, \n          \n          \"int_i_t\", \"\" + i,\n          \"int_im_t\", \"\" + i,\n          \"int_im_t\", \"\" + (i + 10),\n          \"int_im_t\", \"\" + (i + 10),\n          \"int_im_t\", \"\" + (i + 20),\n          \n          \"int_i_p\", \"\" + i,\n          \"int_im_p\", \"\" + i,\n          \"int_im_p\", \"\" + (i + 10),\n          \"int_im_p\", \"\" + (i + 10),\n          \"int_im_p\", \"\" + (i + 20),\n          \n          \"long_l_t\", \"\" + i,\n          \"long_lm_t\", \"\" + i,\n          \"long_lm_t\", \"\" + (i + 10),\n          \"long_lm_t\", \"\" + (i + 10),\n          \"long_lm_t\", \"\" + (i + 20),\n          \n          \"long_l_p\", \"\" + i,\n          \"long_lm_p\", \"\" + i,\n          \"long_lm_p\", \"\" + (i + 10),\n          \"long_lm_p\", \"\" + (i + 10),\n          \"long_lm_p\", \"\" + (i + 20),\n          \n          \"float_f_t\", \"\" + (i + .75F),\n          \"float_fm_t\", \"\" + (i + .75F),\n          \"float_fm_t\", \"\" + (i + 10.75F),\n          \"float_fm_t\", \"\" + (i + 10.75F),\n          \"float_fm_t\", \"\" + (i + 20.75F),\n          \n          \"float_f_p\", \"\" + (i + .75F),\n          \"float_fm_p\", \"\" + (i + .75F),\n          \"float_fm_p\", \"\" + (i + 10.75F),\n          \"float_fm_p\", \"\" + (i + 10.75F),\n          \"float_fm_p\", \"\" + (i + 20.75F),\n          \n          \"double_d_t\", \"\" + (i + .5),\n          \"double_dm_t\", \"\" + (i + .5),\n          \"double_dm_t\", \"\" + (i + 10.5),\n          \"double_dm_t\", \"\" + (i + 10.5),\n          \"double_dm_t\", \"\" + (i + 20.5),\n          \n          \"double_d_p\", \"\" + (i + .5),\n          \"double_dm_p\", \"\" + (i + .5),\n          \"double_dm_p\", \"\" + (i + 10.5),\n          \"double_dm_p\", \"\" + (i + 10.5),\n          \"double_dm_p\", \"\" + (i + 20.5),\n          \n          \"date_dt_t\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i + 20) + \"-12-31T23:59:59Z\",\n          \n          \"date_dt_p\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i + 20) + \"-12-31T23:59:59Z\",\n          \n          \"string_s\", \"abc\" + i,\n          \"string_sm\", \"abc\" + i,\n          \"string_sm\", \"def\" + i,\n          \"string_sm\", \"def\" + i,\n          \"string_sm\", \"ghi\" + i,\n          \n          \"boolean_b\", Boolean.toString(i % 3 == 0),\n          \"boolean_bm\", \"false\",\n          \"boolean_bm\", \"true\",\n          \"boolean_bm\", \"false\"\n      ));\n      \n      singleInts.put(\"\"+i, i);\n      Map<Integer, Integer> ints = new HashMap<>();\n      ints.put(i, 1);\n      ints.put(i + 10, 2);\n      ints.put(i + 20, 1);\n      multiInts.put(\"\"+i, ints);\n      \n      singleLongs.put(\"\"+i, (long) i);\n      Map<Long, Integer> longs = new HashMap<>();\n      longs.put((long) i, 1);\n      longs.put(i + 10L, 2);\n      longs.put(i + 20L, 1);\n      multiLongs.put(\"\"+i, longs);\n      \n      singleFloats.put(\"\"+i, i + .75F);\n      Map<Float, Integer> floats = new HashMap<>();\n      floats.put(i + .75F, 1);\n      floats.put(i + 10.75F, 2);\n      floats.put(i + 20.75F, 1);\n      multiFloats.put(\"\"+i, floats);\n      \n      singleDoubles.put(\"\"+i, i + .5);\n      Map<Double, Integer> doubles = new HashMap<>();\n      doubles.put(i + .5, 1);\n      doubles.put(i + 10.5, 2);\n      doubles.put(i + 20.5, 1);\n      multiDoubles.put(\"\"+i, doubles);\n      \n      singleDates.put(\"\"+i, Instant.parse((1800 + i) + \"-12-31T23:59:59Z\").toEpochMilli());\n      Map<Long, Integer> dates = new HashMap<>();\n      dates.put(Instant.parse((1800 + i) + \"-12-31T23:59:59Z\").toEpochMilli(), 1);\n      dates.put(Instant.parse((1800 + i + 10) + \"-12-31T23:59:59Z\").toEpochMilli(), 2);\n      dates.put(Instant.parse((1800 + i + 20) + \"-12-31T23:59:59Z\").toEpochMilli(), 1);\n      multiDates.put(\"\"+i, dates);\n      \n      singleStrings.put(\"\"+i, \"abc\" + i);\n      Map<String, Integer> strings = new HashMap<>();\n      strings.put(\"abc\" + i, 1);\n      strings.put(\"def\" + i, 2);\n      strings.put(\"ghi\" + i, 1);\n      multiStrings.put(\"\"+i, strings);\n      \n      singleBooleans.put(\"\"+i, i % 3 == 0);\n      Map<Boolean, Integer> booleans = new HashMap<>();\n      booleans.put(true, 1);\n      booleans.put(false, 2);\n      multiBooleans.put(\"\"+i, booleans);\n    }\n    assertU(commit());\n    \n    ref = h.getCore().getSearcher();\n    searcher = ref.get();\n    \n    indexSchema = h.getCore().getLatestSchema();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createSchemaAndFields() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n\n    singleInts = new HashMap<>(); \n    multiInts = new HashMap<>();\n    singleLongs = new HashMap<>(); \n    multiLongs = new HashMap<>();\n    singleFloats = new HashMap<>(); \n    multiFloats = new HashMap<>();\n    singleDoubles = new HashMap<>(); \n    multiDoubles = new HashMap<>();\n    singleDates = new HashMap<>(); \n    multiDates = new HashMap<>();\n    singleStrings = new HashMap<>(); \n    multiStrings = new HashMap<>();\n    singleBooleans = new HashMap<>(); \n    multiBooleans = new HashMap<>();\n    \n    missingDocuments = new ArrayList<>();\n    \n    assertU(adoc(\"id\", \"-1\"));\n    missingDocuments.add(\"-1\");\n    assertU(adoc(\"id\", \"5\"));\n    missingDocuments.add(\"5\");\n    for (int i = 0; i < 5; ++i) {\n      assertU(adoc(\n          \"id\", \"\" + i, \n          \n          \"int_i_t\", \"\" + i,\n          \"int_im_t\", \"\" + i,\n          \"int_im_t\", \"\" + (i + 10),\n          \"int_im_t\", \"\" + (i + 10),\n          \"int_im_t\", \"\" + (i + 20),\n          \n          \"int_i_p\", \"\" + i,\n          \"int_im_p\", \"\" + i,\n          \"int_im_p\", \"\" + (i + 10),\n          \"int_im_p\", \"\" + (i + 10),\n          \"int_im_p\", \"\" + (i + 20),\n          \n          \"long_l_t\", \"\" + i,\n          \"long_lm_t\", \"\" + i,\n          \"long_lm_t\", \"\" + (i + 10),\n          \"long_lm_t\", \"\" + (i + 10),\n          \"long_lm_t\", \"\" + (i + 20),\n          \n          \"long_l_p\", \"\" + i,\n          \"long_lm_p\", \"\" + i,\n          \"long_lm_p\", \"\" + (i + 10),\n          \"long_lm_p\", \"\" + (i + 10),\n          \"long_lm_p\", \"\" + (i + 20),\n          \n          \"float_f_t\", \"\" + (i + .75F),\n          \"float_fm_t\", \"\" + (i + .75F),\n          \"float_fm_t\", \"\" + (i + 10.75F),\n          \"float_fm_t\", \"\" + (i + 10.75F),\n          \"float_fm_t\", \"\" + (i + 20.75F),\n          \n          \"float_f_p\", \"\" + (i + .75F),\n          \"float_fm_p\", \"\" + (i + .75F),\n          \"float_fm_p\", \"\" + (i + 10.75F),\n          \"float_fm_p\", \"\" + (i + 10.75F),\n          \"float_fm_p\", \"\" + (i + 20.75F),\n          \n          \"double_d_t\", \"\" + (i + .5),\n          \"double_dm_t\", \"\" + (i + .5),\n          \"double_dm_t\", \"\" + (i + 10.5),\n          \"double_dm_t\", \"\" + (i + 10.5),\n          \"double_dm_t\", \"\" + (i + 20.5),\n          \n          \"double_d_p\", \"\" + (i + .5),\n          \"double_dm_p\", \"\" + (i + .5),\n          \"double_dm_p\", \"\" + (i + 10.5),\n          \"double_dm_p\", \"\" + (i + 10.5),\n          \"double_dm_p\", \"\" + (i + 20.5),\n          \n          \"date_dt_t\", \"180\" + i + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", \"180\" + i + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", \"18\" + (i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", \"18\" + (i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", \"18\" + (i + 20) + \"-12-31T23:59:59Z\",\n          \n          \"date_dt_p\", \"180\" + i + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", \"180\" + i + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", \"18\" + (i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", \"18\" + (i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", \"18\" + (i + 20) + \"-12-31T23:59:59Z\",\n          \n          \"string_s\", \"abc\" + i,\n          \"string_sm\", \"abc\" + i,\n          \"string_sm\", \"def\" + i,\n          \"string_sm\", \"def\" + i,\n          \"string_sm\", \"ghi\" + i,\n          \n          \"boolean_b\", Boolean.toString(i % 3 == 0),\n          \"boolean_bm\", \"false\",\n          \"boolean_bm\", \"true\",\n          \"boolean_bm\", \"false\"\n      ));\n      \n      singleInts.put(\"\"+i, i);\n      Map<Integer, Integer> ints = new HashMap<>();\n      ints.put(i, 1);\n      ints.put(i + 10, 2);\n      ints.put(i + 20, 1);\n      multiInts.put(\"\"+i, ints);\n      \n      singleLongs.put(\"\"+i, (long) i);\n      Map<Long, Integer> longs = new HashMap<>();\n      longs.put((long) i, 1);\n      longs.put(i + 10L, 2);\n      longs.put(i + 20L, 1);\n      multiLongs.put(\"\"+i, longs);\n      \n      singleFloats.put(\"\"+i, i + .75F);\n      Map<Float, Integer> floats = new HashMap<>();\n      floats.put(i + .75F, 1);\n      floats.put(i + 10.75F, 2);\n      floats.put(i + 20.75F, 1);\n      multiFloats.put(\"\"+i, floats);\n      \n      singleDoubles.put(\"\"+i, i + .5);\n      Map<Double, Integer> doubles = new HashMap<>();\n      doubles.put(i + .5, 1);\n      doubles.put(i + 10.5, 2);\n      doubles.put(i + 20.5, 1);\n      multiDoubles.put(\"\"+i, doubles);\n      \n      singleDates.put(\"\"+i, Instant.parse(\"180\" + i + \"-12-31T23:59:59Z\").toEpochMilli());\n      Map<Long, Integer> dates = new HashMap<>();\n      dates.put(Instant.parse(\"180\" + i + \"-12-31T23:59:59Z\").toEpochMilli(), 1);\n      dates.put(Instant.parse(\"18\" + ( i + 10 ) + \"-12-31T23:59:59Z\").toEpochMilli(), 2);\n      dates.put(Instant.parse(\"18\" + ( i + 20 ) + \"-12-31T23:59:59Z\").toEpochMilli(), 1);\n      multiDates.put(\"\"+i, dates);\n      \n      singleStrings.put(\"\"+i, \"abc\" + i);\n      Map<String, Integer> strings = new HashMap<>();\n      strings.put(\"abc\" + i, 1);\n      strings.put(\"def\" + i, 2);\n      strings.put(\"ghi\" + i, 1);\n      multiStrings.put(\"\"+i, strings);\n      \n      singleBooleans.put(\"\"+i, i % 3 == 0);\n      Map<Boolean, Integer> booleans = new HashMap<>();\n      booleans.put(true, 1);\n      booleans.put(false, 2);\n      multiBooleans.put(\"\"+i, booleans);\n    }\n    assertU(commit());\n    \n    ref = h.getCore().getSearcher();\n    searcher = ref.get();\n    \n    indexSchema = h.getCore().getLatestSchema();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#createSchemaAndFields().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#createSchemaAndFields().mjava","sourceNew":"  @BeforeClass\n  public static void createSchemaAndFields() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n\n    singleInts = new HashMap<>();\n    multiInts = new HashMap<>();\n    singleLongs = new HashMap<>();\n    multiLongs = new HashMap<>();\n    singleFloats = new HashMap<>();\n    multiFloats = new HashMap<>();\n    singleDoubles = new HashMap<>();\n    multiDoubles = new HashMap<>();\n    singleDates = new HashMap<>();\n    multiDates = new HashMap<>();\n    singleStrings = new HashMap<>();\n    multiStrings = new HashMap<>();\n    singleBooleans = new HashMap<>();\n    multiBooleans = new HashMap<>();\n\n    missingDocuments = new ArrayList<>();\n\n    assertU(adoc(\"id\", \"-2\"));\n    missingDocuments.add(\"-2\");\n    assertU(adoc(\"id\", \"5\"));\n    missingDocuments.add(\"5\");\n    for (int i = -1; i < 5; ++i) {\n      assertU(adoc(\n          \"id\", \"\" + i,\n\n          \"int_i_t\", \"\" + i,\n          \"int_im_t\", \"\" + i,\n          \"int_im_t\", \"\" + (i + 10),\n          \"int_im_t\", \"\" + (i + 10),\n          \"int_im_t\", \"\" + (i + 20),\n\n          \"int_i_p\", \"\" + i,\n          \"int_im_p\", \"\" + i,\n          \"int_im_p\", \"\" + (i + 10),\n          \"int_im_p\", \"\" + (i + 10),\n          \"int_im_p\", \"\" + (i + 20),\n\n          \"long_l_t\", \"\" + i,\n          \"long_lm_t\", \"\" + i,\n          \"long_lm_t\", \"\" + (i + 10),\n          \"long_lm_t\", \"\" + (i + 10),\n          \"long_lm_t\", \"\" + (i + 20),\n\n          \"long_l_p\", \"\" + i,\n          \"long_lm_p\", \"\" + i,\n          \"long_lm_p\", \"\" + (i + 10),\n          \"long_lm_p\", \"\" + (i + 10),\n          \"long_lm_p\", \"\" + (i + 20),\n\n          \"float_f_t\", \"\" + (i + .75F),\n          \"float_fm_t\", \"\" + (i + .75F),\n          \"float_fm_t\", \"\" + (i + 10.75F),\n          \"float_fm_t\", \"\" + (i + 10.75F),\n          \"float_fm_t\", \"\" + (i + 20.75F),\n\n          \"float_f_p\", \"\" + (i + .75F),\n          \"float_fm_p\", \"\" + (i + .75F),\n          \"float_fm_p\", \"\" + (i + 10.75F),\n          \"float_fm_p\", \"\" + (i + 10.75F),\n          \"float_fm_p\", \"\" + (i + 20.75F),\n\n          \"double_d_t\", \"\" + (i + .5),\n          \"double_dm_t\", \"\" + (i + .5),\n          \"double_dm_t\", \"\" + (i + 10.5),\n          \"double_dm_t\", \"\" + (i + 10.5),\n          \"double_dm_t\", \"\" + (i + 20.5),\n\n          \"double_d_p\", \"\" + (i + .5),\n          \"double_dm_p\", \"\" + (i + .5),\n          \"double_dm_p\", \"\" + (i + 10.5),\n          \"double_dm_p\", \"\" + (i + 10.5),\n          \"double_dm_p\", \"\" + (i + 20.5),\n\n          \"date_dt_t\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i + 20) + \"-12-31T23:59:59Z\",\n\n          \"date_dt_p\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i + 20) + \"-12-31T23:59:59Z\",\n\n          \"string_s\", \"abc\" + i,\n          \"string_sm\", \"abc\" + i,\n          \"string_sm\", \"def\" + i,\n          \"string_sm\", \"def\" + i,\n          \"string_sm\", \"ghi\" + i,\n\n          \"boolean_b\", Boolean.toString(i % 3 == 0),\n          \"boolean_bm\", \"false\",\n          \"boolean_bm\", \"true\",\n          \"boolean_bm\", \"false\"\n      ));\n\n      singleInts.put(\"\"+i, i);\n      Map<Integer, Integer> ints = new HashMap<>();\n      ints.put(i, 1);\n      ints.put(i + 10, 2);\n      ints.put(i + 20, 1);\n      multiInts.put(\"\"+i, ints);\n\n      singleLongs.put(\"\"+i, (long) i);\n      Map<Long, Integer> longs = new HashMap<>();\n      longs.put((long) i, 1);\n      longs.put(i + 10L, 2);\n      longs.put(i + 20L, 1);\n      multiLongs.put(\"\"+i, longs);\n\n      singleFloats.put(\"\"+i, i + .75F);\n      Map<Float, Integer> floats = new HashMap<>();\n      floats.put(i + .75F, 1);\n      floats.put(i + 10.75F, 2);\n      floats.put(i + 20.75F, 1);\n      multiFloats.put(\"\"+i, floats);\n\n      singleDoubles.put(\"\"+i, i + .5);\n      Map<Double, Integer> doubles = new HashMap<>();\n      doubles.put(i + .5, 1);\n      doubles.put(i + 10.5, 2);\n      doubles.put(i + 20.5, 1);\n      multiDoubles.put(\"\"+i, doubles);\n\n      singleDates.put(\"\"+i, Instant.parse((1800 + i) + \"-12-31T23:59:59Z\").toEpochMilli());\n      Map<Long, Integer> dates = new HashMap<>();\n      dates.put(Instant.parse((1800 + i) + \"-12-31T23:59:59Z\").toEpochMilli(), 1);\n      dates.put(Instant.parse((1800 + i + 10) + \"-12-31T23:59:59Z\").toEpochMilli(), 2);\n      dates.put(Instant.parse((1800 + i + 20) + \"-12-31T23:59:59Z\").toEpochMilli(), 1);\n      multiDates.put(\"\"+i, dates);\n\n      singleStrings.put(\"\"+i, \"abc\" + i);\n      Map<String, Integer> strings = new HashMap<>();\n      strings.put(\"abc\" + i, 1);\n      strings.put(\"def\" + i, 2);\n      strings.put(\"ghi\" + i, 1);\n      multiStrings.put(\"\"+i, strings);\n\n      singleBooleans.put(\"\"+i, i % 3 == 0);\n      Map<Boolean, Integer> booleans = new HashMap<>();\n      booleans.put(true, 1);\n      booleans.put(false, 2);\n      multiBooleans.put(\"\"+i, booleans);\n    }\n    assertU(commit());\n\n    ref = h.getCore().getSearcher();\n    searcher = ref.get();\n\n    indexSchema = h.getCore().getLatestSchema();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createSchemaAndFields() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n\n    singleInts = new HashMap<>(); \n    multiInts = new HashMap<>();\n    singleLongs = new HashMap<>(); \n    multiLongs = new HashMap<>();\n    singleFloats = new HashMap<>(); \n    multiFloats = new HashMap<>();\n    singleDoubles = new HashMap<>(); \n    multiDoubles = new HashMap<>();\n    singleDates = new HashMap<>(); \n    multiDates = new HashMap<>();\n    singleStrings = new HashMap<>(); \n    multiStrings = new HashMap<>();\n    singleBooleans = new HashMap<>(); \n    multiBooleans = new HashMap<>();\n    \n    missingDocuments = new ArrayList<>();\n    \n    assertU(adoc(\"id\", \"-2\"));\n    missingDocuments.add(\"-2\");\n    assertU(adoc(\"id\", \"5\"));\n    missingDocuments.add(\"5\");\n    for (int i = -1; i < 5; ++i) {\n      assertU(adoc(\n          \"id\", \"\" + i, \n          \n          \"int_i_t\", \"\" + i,\n          \"int_im_t\", \"\" + i,\n          \"int_im_t\", \"\" + (i + 10),\n          \"int_im_t\", \"\" + (i + 10),\n          \"int_im_t\", \"\" + (i + 20),\n          \n          \"int_i_p\", \"\" + i,\n          \"int_im_p\", \"\" + i,\n          \"int_im_p\", \"\" + (i + 10),\n          \"int_im_p\", \"\" + (i + 10),\n          \"int_im_p\", \"\" + (i + 20),\n          \n          \"long_l_t\", \"\" + i,\n          \"long_lm_t\", \"\" + i,\n          \"long_lm_t\", \"\" + (i + 10),\n          \"long_lm_t\", \"\" + (i + 10),\n          \"long_lm_t\", \"\" + (i + 20),\n          \n          \"long_l_p\", \"\" + i,\n          \"long_lm_p\", \"\" + i,\n          \"long_lm_p\", \"\" + (i + 10),\n          \"long_lm_p\", \"\" + (i + 10),\n          \"long_lm_p\", \"\" + (i + 20),\n          \n          \"float_f_t\", \"\" + (i + .75F),\n          \"float_fm_t\", \"\" + (i + .75F),\n          \"float_fm_t\", \"\" + (i + 10.75F),\n          \"float_fm_t\", \"\" + (i + 10.75F),\n          \"float_fm_t\", \"\" + (i + 20.75F),\n          \n          \"float_f_p\", \"\" + (i + .75F),\n          \"float_fm_p\", \"\" + (i + .75F),\n          \"float_fm_p\", \"\" + (i + 10.75F),\n          \"float_fm_p\", \"\" + (i + 10.75F),\n          \"float_fm_p\", \"\" + (i + 20.75F),\n          \n          \"double_d_t\", \"\" + (i + .5),\n          \"double_dm_t\", \"\" + (i + .5),\n          \"double_dm_t\", \"\" + (i + 10.5),\n          \"double_dm_t\", \"\" + (i + 10.5),\n          \"double_dm_t\", \"\" + (i + 20.5),\n          \n          \"double_d_p\", \"\" + (i + .5),\n          \"double_dm_p\", \"\" + (i + .5),\n          \"double_dm_p\", \"\" + (i + 10.5),\n          \"double_dm_p\", \"\" + (i + 10.5),\n          \"double_dm_p\", \"\" + (i + 20.5),\n          \n          \"date_dt_t\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i + 20) + \"-12-31T23:59:59Z\",\n          \n          \"date_dt_p\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i + 20) + \"-12-31T23:59:59Z\",\n          \n          \"string_s\", \"abc\" + i,\n          \"string_sm\", \"abc\" + i,\n          \"string_sm\", \"def\" + i,\n          \"string_sm\", \"def\" + i,\n          \"string_sm\", \"ghi\" + i,\n          \n          \"boolean_b\", Boolean.toString(i % 3 == 0),\n          \"boolean_bm\", \"false\",\n          \"boolean_bm\", \"true\",\n          \"boolean_bm\", \"false\"\n      ));\n      \n      singleInts.put(\"\"+i, i);\n      Map<Integer, Integer> ints = new HashMap<>();\n      ints.put(i, 1);\n      ints.put(i + 10, 2);\n      ints.put(i + 20, 1);\n      multiInts.put(\"\"+i, ints);\n      \n      singleLongs.put(\"\"+i, (long) i);\n      Map<Long, Integer> longs = new HashMap<>();\n      longs.put((long) i, 1);\n      longs.put(i + 10L, 2);\n      longs.put(i + 20L, 1);\n      multiLongs.put(\"\"+i, longs);\n      \n      singleFloats.put(\"\"+i, i + .75F);\n      Map<Float, Integer> floats = new HashMap<>();\n      floats.put(i + .75F, 1);\n      floats.put(i + 10.75F, 2);\n      floats.put(i + 20.75F, 1);\n      multiFloats.put(\"\"+i, floats);\n      \n      singleDoubles.put(\"\"+i, i + .5);\n      Map<Double, Integer> doubles = new HashMap<>();\n      doubles.put(i + .5, 1);\n      doubles.put(i + 10.5, 2);\n      doubles.put(i + 20.5, 1);\n      multiDoubles.put(\"\"+i, doubles);\n      \n      singleDates.put(\"\"+i, Instant.parse((1800 + i) + \"-12-31T23:59:59Z\").toEpochMilli());\n      Map<Long, Integer> dates = new HashMap<>();\n      dates.put(Instant.parse((1800 + i) + \"-12-31T23:59:59Z\").toEpochMilli(), 1);\n      dates.put(Instant.parse((1800 + i + 10) + \"-12-31T23:59:59Z\").toEpochMilli(), 2);\n      dates.put(Instant.parse((1800 + i + 20) + \"-12-31T23:59:59Z\").toEpochMilli(), 1);\n      multiDates.put(\"\"+i, dates);\n      \n      singleStrings.put(\"\"+i, \"abc\" + i);\n      Map<String, Integer> strings = new HashMap<>();\n      strings.put(\"abc\" + i, 1);\n      strings.put(\"def\" + i, 2);\n      strings.put(\"ghi\" + i, 1);\n      multiStrings.put(\"\"+i, strings);\n      \n      singleBooleans.put(\"\"+i, i % 3 == 0);\n      Map<Boolean, Integer> booleans = new HashMap<>();\n      booleans.put(true, 1);\n      booleans.put(false, 2);\n      multiBooleans.put(\"\"+i, booleans);\n    }\n    assertU(commit());\n    \n    ref = h.getCore().getSearcher();\n    searcher = ref.get();\n    \n    indexSchema = h.getCore().getLatestSchema();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#createSchemaAndFields().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/field/AbstractAnalyticsFieldTest#createSchemaAndFields().mjava","sourceNew":"  @BeforeClass\n  public static void createSchemaAndFields() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n\n    singleInts = new HashMap<>();\n    multiInts = new HashMap<>();\n    singleLongs = new HashMap<>();\n    multiLongs = new HashMap<>();\n    singleFloats = new HashMap<>();\n    multiFloats = new HashMap<>();\n    singleDoubles = new HashMap<>();\n    multiDoubles = new HashMap<>();\n    singleDates = new HashMap<>();\n    multiDates = new HashMap<>();\n    singleStrings = new HashMap<>();\n    multiStrings = new HashMap<>();\n    singleBooleans = new HashMap<>();\n    multiBooleans = new HashMap<>();\n\n    missingDocuments = new ArrayList<>();\n\n    assertU(adoc(\"id\", \"-2\"));\n    missingDocuments.add(\"-2\");\n    assertU(adoc(\"id\", \"5\"));\n    missingDocuments.add(\"5\");\n    for (int i = -1; i < 5; ++i) {\n      assertU(adoc(\n          \"id\", \"\" + i,\n\n          \"int_i_t\", \"\" + i,\n          \"int_im_t\", \"\" + i,\n          \"int_im_t\", \"\" + (i + 10),\n          \"int_im_t\", \"\" + (i + 10),\n          \"int_im_t\", \"\" + (i + 20),\n\n          \"int_i_p\", \"\" + i,\n          \"int_im_p\", \"\" + i,\n          \"int_im_p\", \"\" + (i + 10),\n          \"int_im_p\", \"\" + (i + 10),\n          \"int_im_p\", \"\" + (i + 20),\n\n          \"long_l_t\", \"\" + i,\n          \"long_lm_t\", \"\" + i,\n          \"long_lm_t\", \"\" + (i + 10),\n          \"long_lm_t\", \"\" + (i + 10),\n          \"long_lm_t\", \"\" + (i + 20),\n\n          \"long_l_p\", \"\" + i,\n          \"long_lm_p\", \"\" + i,\n          \"long_lm_p\", \"\" + (i + 10),\n          \"long_lm_p\", \"\" + (i + 10),\n          \"long_lm_p\", \"\" + (i + 20),\n\n          \"float_f_t\", \"\" + (i + .75F),\n          \"float_fm_t\", \"\" + (i + .75F),\n          \"float_fm_t\", \"\" + (i + 10.75F),\n          \"float_fm_t\", \"\" + (i + 10.75F),\n          \"float_fm_t\", \"\" + (i + 20.75F),\n\n          \"float_f_p\", \"\" + (i + .75F),\n          \"float_fm_p\", \"\" + (i + .75F),\n          \"float_fm_p\", \"\" + (i + 10.75F),\n          \"float_fm_p\", \"\" + (i + 10.75F),\n          \"float_fm_p\", \"\" + (i + 20.75F),\n\n          \"double_d_t\", \"\" + (i + .5),\n          \"double_dm_t\", \"\" + (i + .5),\n          \"double_dm_t\", \"\" + (i + 10.5),\n          \"double_dm_t\", \"\" + (i + 10.5),\n          \"double_dm_t\", \"\" + (i + 20.5),\n\n          \"double_d_p\", \"\" + (i + .5),\n          \"double_dm_p\", \"\" + (i + .5),\n          \"double_dm_p\", \"\" + (i + 10.5),\n          \"double_dm_p\", \"\" + (i + 10.5),\n          \"double_dm_p\", \"\" + (i + 20.5),\n\n          \"date_dt_t\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i + 20) + \"-12-31T23:59:59Z\",\n\n          \"date_dt_p\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i + 20) + \"-12-31T23:59:59Z\",\n\n          \"string_s\", \"abc\" + i,\n          \"string_sm\", \"abc\" + i,\n          \"string_sm\", \"def\" + i,\n          \"string_sm\", \"def\" + i,\n          \"string_sm\", \"ghi\" + i,\n\n          \"boolean_b\", Boolean.toString(i % 3 == 0),\n          \"boolean_bm\", \"false\",\n          \"boolean_bm\", \"true\",\n          \"boolean_bm\", \"false\"\n      ));\n\n      singleInts.put(\"\"+i, i);\n      Map<Integer, Integer> ints = new HashMap<>();\n      ints.put(i, 1);\n      ints.put(i + 10, 2);\n      ints.put(i + 20, 1);\n      multiInts.put(\"\"+i, ints);\n\n      singleLongs.put(\"\"+i, (long) i);\n      Map<Long, Integer> longs = new HashMap<>();\n      longs.put((long) i, 1);\n      longs.put(i + 10L, 2);\n      longs.put(i + 20L, 1);\n      multiLongs.put(\"\"+i, longs);\n\n      singleFloats.put(\"\"+i, i + .75F);\n      Map<Float, Integer> floats = new HashMap<>();\n      floats.put(i + .75F, 1);\n      floats.put(i + 10.75F, 2);\n      floats.put(i + 20.75F, 1);\n      multiFloats.put(\"\"+i, floats);\n\n      singleDoubles.put(\"\"+i, i + .5);\n      Map<Double, Integer> doubles = new HashMap<>();\n      doubles.put(i + .5, 1);\n      doubles.put(i + 10.5, 2);\n      doubles.put(i + 20.5, 1);\n      multiDoubles.put(\"\"+i, doubles);\n\n      singleDates.put(\"\"+i, Instant.parse((1800 + i) + \"-12-31T23:59:59Z\").toEpochMilli());\n      Map<Long, Integer> dates = new HashMap<>();\n      dates.put(Instant.parse((1800 + i) + \"-12-31T23:59:59Z\").toEpochMilli(), 1);\n      dates.put(Instant.parse((1800 + i + 10) + \"-12-31T23:59:59Z\").toEpochMilli(), 2);\n      dates.put(Instant.parse((1800 + i + 20) + \"-12-31T23:59:59Z\").toEpochMilli(), 1);\n      multiDates.put(\"\"+i, dates);\n\n      singleStrings.put(\"\"+i, \"abc\" + i);\n      Map<String, Integer> strings = new HashMap<>();\n      strings.put(\"abc\" + i, 1);\n      strings.put(\"def\" + i, 2);\n      strings.put(\"ghi\" + i, 1);\n      multiStrings.put(\"\"+i, strings);\n\n      singleBooleans.put(\"\"+i, i % 3 == 0);\n      Map<Boolean, Integer> booleans = new HashMap<>();\n      booleans.put(true, 1);\n      booleans.put(false, 2);\n      multiBooleans.put(\"\"+i, booleans);\n    }\n    assertU(commit());\n\n    ref = h.getCore().getSearcher();\n    searcher = ref.get();\n\n    indexSchema = h.getCore().getLatestSchema();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createSchemaAndFields() throws Exception {\n    initCore(\"solrconfig-analytics.xml\",\"schema-analytics.xml\");\n\n    singleInts = new HashMap<>(); \n    multiInts = new HashMap<>();\n    singleLongs = new HashMap<>(); \n    multiLongs = new HashMap<>();\n    singleFloats = new HashMap<>(); \n    multiFloats = new HashMap<>();\n    singleDoubles = new HashMap<>(); \n    multiDoubles = new HashMap<>();\n    singleDates = new HashMap<>(); \n    multiDates = new HashMap<>();\n    singleStrings = new HashMap<>(); \n    multiStrings = new HashMap<>();\n    singleBooleans = new HashMap<>(); \n    multiBooleans = new HashMap<>();\n    \n    missingDocuments = new ArrayList<>();\n    \n    assertU(adoc(\"id\", \"-2\"));\n    missingDocuments.add(\"-2\");\n    assertU(adoc(\"id\", \"5\"));\n    missingDocuments.add(\"5\");\n    for (int i = -1; i < 5; ++i) {\n      assertU(adoc(\n          \"id\", \"\" + i, \n          \n          \"int_i_t\", \"\" + i,\n          \"int_im_t\", \"\" + i,\n          \"int_im_t\", \"\" + (i + 10),\n          \"int_im_t\", \"\" + (i + 10),\n          \"int_im_t\", \"\" + (i + 20),\n          \n          \"int_i_p\", \"\" + i,\n          \"int_im_p\", \"\" + i,\n          \"int_im_p\", \"\" + (i + 10),\n          \"int_im_p\", \"\" + (i + 10),\n          \"int_im_p\", \"\" + (i + 20),\n          \n          \"long_l_t\", \"\" + i,\n          \"long_lm_t\", \"\" + i,\n          \"long_lm_t\", \"\" + (i + 10),\n          \"long_lm_t\", \"\" + (i + 10),\n          \"long_lm_t\", \"\" + (i + 20),\n          \n          \"long_l_p\", \"\" + i,\n          \"long_lm_p\", \"\" + i,\n          \"long_lm_p\", \"\" + (i + 10),\n          \"long_lm_p\", \"\" + (i + 10),\n          \"long_lm_p\", \"\" + (i + 20),\n          \n          \"float_f_t\", \"\" + (i + .75F),\n          \"float_fm_t\", \"\" + (i + .75F),\n          \"float_fm_t\", \"\" + (i + 10.75F),\n          \"float_fm_t\", \"\" + (i + 10.75F),\n          \"float_fm_t\", \"\" + (i + 20.75F),\n          \n          \"float_f_p\", \"\" + (i + .75F),\n          \"float_fm_p\", \"\" + (i + .75F),\n          \"float_fm_p\", \"\" + (i + 10.75F),\n          \"float_fm_p\", \"\" + (i + 10.75F),\n          \"float_fm_p\", \"\" + (i + 20.75F),\n          \n          \"double_d_t\", \"\" + (i + .5),\n          \"double_dm_t\", \"\" + (i + .5),\n          \"double_dm_t\", \"\" + (i + 10.5),\n          \"double_dm_t\", \"\" + (i + 10.5),\n          \"double_dm_t\", \"\" + (i + 20.5),\n          \n          \"double_d_p\", \"\" + (i + .5),\n          \"double_dm_p\", \"\" + (i + .5),\n          \"double_dm_p\", \"\" + (i + 10.5),\n          \"double_dm_p\", \"\" + (i + 10.5),\n          \"double_dm_p\", \"\" + (i + 20.5),\n          \n          \"date_dt_t\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_t\", (1800 + i + 20) + \"-12-31T23:59:59Z\",\n          \n          \"date_dt_p\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i + 10) + \"-12-31T23:59:59Z\",\n          \"date_dtm_p\", (1800 + i + 20) + \"-12-31T23:59:59Z\",\n          \n          \"string_s\", \"abc\" + i,\n          \"string_sm\", \"abc\" + i,\n          \"string_sm\", \"def\" + i,\n          \"string_sm\", \"def\" + i,\n          \"string_sm\", \"ghi\" + i,\n          \n          \"boolean_b\", Boolean.toString(i % 3 == 0),\n          \"boolean_bm\", \"false\",\n          \"boolean_bm\", \"true\",\n          \"boolean_bm\", \"false\"\n      ));\n      \n      singleInts.put(\"\"+i, i);\n      Map<Integer, Integer> ints = new HashMap<>();\n      ints.put(i, 1);\n      ints.put(i + 10, 2);\n      ints.put(i + 20, 1);\n      multiInts.put(\"\"+i, ints);\n      \n      singleLongs.put(\"\"+i, (long) i);\n      Map<Long, Integer> longs = new HashMap<>();\n      longs.put((long) i, 1);\n      longs.put(i + 10L, 2);\n      longs.put(i + 20L, 1);\n      multiLongs.put(\"\"+i, longs);\n      \n      singleFloats.put(\"\"+i, i + .75F);\n      Map<Float, Integer> floats = new HashMap<>();\n      floats.put(i + .75F, 1);\n      floats.put(i + 10.75F, 2);\n      floats.put(i + 20.75F, 1);\n      multiFloats.put(\"\"+i, floats);\n      \n      singleDoubles.put(\"\"+i, i + .5);\n      Map<Double, Integer> doubles = new HashMap<>();\n      doubles.put(i + .5, 1);\n      doubles.put(i + 10.5, 2);\n      doubles.put(i + 20.5, 1);\n      multiDoubles.put(\"\"+i, doubles);\n      \n      singleDates.put(\"\"+i, Instant.parse((1800 + i) + \"-12-31T23:59:59Z\").toEpochMilli());\n      Map<Long, Integer> dates = new HashMap<>();\n      dates.put(Instant.parse((1800 + i) + \"-12-31T23:59:59Z\").toEpochMilli(), 1);\n      dates.put(Instant.parse((1800 + i + 10) + \"-12-31T23:59:59Z\").toEpochMilli(), 2);\n      dates.put(Instant.parse((1800 + i + 20) + \"-12-31T23:59:59Z\").toEpochMilli(), 1);\n      multiDates.put(\"\"+i, dates);\n      \n      singleStrings.put(\"\"+i, \"abc\" + i);\n      Map<String, Integer> strings = new HashMap<>();\n      strings.put(\"abc\" + i, 1);\n      strings.put(\"def\" + i, 2);\n      strings.put(\"ghi\" + i, 1);\n      multiStrings.put(\"\"+i, strings);\n      \n      singleBooleans.put(\"\"+i, i % 3 == 0);\n      Map<Boolean, Integer> booleans = new HashMap<>();\n      booleans.put(true, 1);\n      booleans.put(false, 2);\n      multiBooleans.put(\"\"+i, booleans);\n    }\n    assertU(commit());\n    \n    ref = h.getCore().getSearcher();\n    searcher = ref.get();\n    \n    indexSchema = h.getCore().getLatestSchema();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["56de5ac5fdfeff30c4982b3753bcc902bccf56fb"],"56de5ac5fdfeff30c4982b3753bcc902bccf56fb":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["56de5ac5fdfeff30c4982b3753bcc902bccf56fb","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56de5ac5fdfeff30c4982b3753bcc902bccf56fb":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["56de5ac5fdfeff30c4982b3753bcc902bccf56fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}