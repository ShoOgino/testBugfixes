{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction#allExists(int,FunctionValues,FunctionValues).mjava","commits":[{"id":"1c8b9dc858d8c3ca3907a4968cfe0b4af03de8fa","date":1434410774,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction#allExists(int,FunctionValues,FunctionValues).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Equivilent the the {@code FunctionValues[]} method with the same name, but optimized for \n   * dealing with exactly 2 arguments.\n   *\n   * @return true if <em>both</em> of the specified <code>values</code>\n   *         {@link FunctionValues#exists} for the specified doc, else false.\n   * @see #anyExists(int,FunctionValues[])\n   */\n  public static boolean allExists(int doc, FunctionValues values1, FunctionValues values2) {\n    return values1.exists(doc) && values2.exists(doc);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction#allExists(int,FunctionValues,FunctionValues).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction#allExists(int,FunctionValues,FunctionValues).mjava","sourceNew":"  /**\n   * Equivilent the the {@code FunctionValues[]} method with the same name, but optimized for \n   * dealing with exactly 2 arguments.\n   *\n   * @return true if <em>both</em> of the specified <code>values</code>\n   *         {@link FunctionValues#exists} for the specified doc, else false.\n   * @see #anyExists(int,FunctionValues[])\n   */\n  public static boolean allExists(int doc, FunctionValues values1, FunctionValues values2) throws IOException {\n    return values1.exists(doc) && values2.exists(doc);\n  }\n\n","sourceOld":"  /**\n   * Equivilent the the {@code FunctionValues[]} method with the same name, but optimized for \n   * dealing with exactly 2 arguments.\n   *\n   * @return true if <em>both</em> of the specified <code>values</code>\n   *         {@link FunctionValues#exists} for the specified doc, else false.\n   * @see #anyExists(int,FunctionValues[])\n   */\n  public static boolean allExists(int doc, FunctionValues values1, FunctionValues values2) {\n    return values1.exists(doc) && values2.exists(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction#allExists(int,FunctionValues,FunctionValues).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction#allExists(int,FunctionValues,FunctionValues).mjava","sourceNew":"  /**\n   * Equivilent the the {@code FunctionValues[]} method with the same name, but optimized for \n   * dealing with exactly 2 arguments.\n   *\n   * @return true if <em>both</em> of the specified <code>values</code>\n   *         {@link FunctionValues#exists} for the specified doc, else false.\n   * @see #anyExists(int,FunctionValues[])\n   */\n  public static boolean allExists(int doc, FunctionValues values1, FunctionValues values2) throws IOException {\n    return values1.exists(doc) && values2.exists(doc);\n  }\n\n","sourceOld":"  /**\n   * Equivilent the the {@code FunctionValues[]} method with the same name, but optimized for \n   * dealing with exactly 2 arguments.\n   *\n   * @return true if <em>both</em> of the specified <code>values</code>\n   *         {@link FunctionValues#exists} for the specified doc, else false.\n   * @see #anyExists(int,FunctionValues[])\n   */\n  public static boolean allExists(int doc, FunctionValues values1, FunctionValues values2) {\n    return values1.exists(doc) && values2.exists(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction#allExists(int,FunctionValues,FunctionValues).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction#allExists(int,FunctionValues,FunctionValues).mjava","sourceNew":"  /**\n   * Equivilent the the {@code FunctionValues[]} method with the same name, but optimized for \n   * dealing with exactly 2 arguments.\n   *\n   * @return true if <em>both</em> of the specified <code>values</code>\n   *         {@link FunctionValues#exists} for the specified doc, else false.\n   * @see #anyExists(int,FunctionValues[])\n   */\n  public static boolean allExists(int doc, FunctionValues values1, FunctionValues values2) throws IOException {\n    return values1.exists(doc) && values2.exists(doc);\n  }\n\n","sourceOld":"  /**\n   * Equivilent the the {@code FunctionValues[]} method with the same name, but optimized for \n   * dealing with exactly 2 arguments.\n   *\n   * @return true if <em>both</em> of the specified <code>values</code>\n   *         {@link FunctionValues#exists} for the specified doc, else false.\n   * @see #anyExists(int,FunctionValues[])\n   */\n  public static boolean allExists(int doc, FunctionValues values1, FunctionValues values2) {\n    return values1.exists(doc) && values2.exists(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f4251f14d2db68330fc1e6f0495c053a905d560","date":1537116380,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction#allExists(int,FunctionValues,FunctionValues).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction#allExists(int,FunctionValues,FunctionValues).mjava","sourceNew":"  /**\n   * Equivalent to the {@code FunctionValues[]} method with the same name, but optimized for\n   * dealing with exactly 2 arguments.\n   *\n   * @return true if <em>both</em> of the specified <code>values</code>\n   *         {@link FunctionValues#exists} for the specified doc, else false.\n   * @see #anyExists(int,FunctionValues[])\n   */\n  public static boolean allExists(int doc, FunctionValues values1, FunctionValues values2) throws IOException {\n    return values1.exists(doc) && values2.exists(doc);\n  }\n\n","sourceOld":"  /**\n   * Equivilent the the {@code FunctionValues[]} method with the same name, but optimized for \n   * dealing with exactly 2 arguments.\n   *\n   * @return true if <em>both</em> of the specified <code>values</code>\n   *         {@link FunctionValues#exists} for the specified doc, else false.\n   * @see #anyExists(int,FunctionValues[])\n   */\n  public static boolean allExists(int doc, FunctionValues values1, FunctionValues values2) throws IOException {\n    return values1.exists(doc) && values2.exists(doc);\n  }\n\n","bugFix":["1c8b9dc858d8c3ca3907a4968cfe0b4af03de8fa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f4251f14d2db68330fc1e6f0495c053a905d560":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["1c8b9dc858d8c3ca3907a4968cfe0b4af03de8fa","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["1c8b9dc858d8c3ca3907a4968cfe0b4af03de8fa"],"1c8b9dc858d8c3ca3907a4968cfe0b4af03de8fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["1c8b9dc858d8c3ca3907a4968cfe0b4af03de8fa","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9f4251f14d2db68330fc1e6f0495c053a905d560"]},"commit2Childs":{"9f4251f14d2db68330fc1e6f0495c053a905d560":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9f4251f14d2db68330fc1e6f0495c053a905d560","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1c8b9dc858d8c3ca3907a4968cfe0b4af03de8fa"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"1c8b9dc858d8c3ca3907a4968cfe0b4af03de8fa":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}