{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectory().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectory().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newDirectory().mjava","sourceNew":"  /**\n   * Returns a new Directory instance. Use this when the test does not\n   * care about the specific Directory implementation (most tests).\n   * <p>\n   * The Directory is wrapped with {@link MockDirectoryWrapper}.\n   * By default this means it will be picky, such as ensuring that you\n   * properly close it and all open files in your test. It will emulate\n   * some features of Windows, such as not allowing open files to be\n   * overwritten.\n   */\n  public static MockDirectoryWrapper newDirectory() throws IOException {\n    return newDirectory(random);\n  }\n\n","sourceOld":"  /**\n   * Returns a new Directory instance. Use this when the test does not\n   * care about the specific Directory implementation (most tests).\n   * <p>\n   * The Directory is wrapped with {@link MockDirectoryWrapper}.\n   * By default this means it will be picky, such as ensuring that you\n   * properly close it and all open files in your test. It will emulate\n   * some features of Windows, such as not allowing open files to be\n   * overwritten.\n   */\n  public static MockDirectoryWrapper newDirectory() throws IOException {\n    return newDirectory(random);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectory().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectory().mjava","sourceNew":"  /**\n   * Returns a new Directory instance. Use this when the test does not\n   * care about the specific Directory implementation (most tests).\n   * <p>\n   * The Directory is wrapped with {@link MockDirectoryWrapper}.\n   * By default this means it will be picky, such as ensuring that you\n   * properly close it and all open files in your test. It will emulate\n   * some features of Windows, such as not allowing open files to be\n   * overwritten.\n   */\n  public static MockDirectoryWrapper newDirectory() throws IOException {\n    return newDirectory(random());\n  }\n\n","sourceOld":"  /**\n   * Returns a new Directory instance. Use this when the test does not\n   * care about the specific Directory implementation (most tests).\n   * <p>\n   * The Directory is wrapped with {@link MockDirectoryWrapper}.\n   * By default this means it will be picky, such as ensuring that you\n   * properly close it and all open files in your test. It will emulate\n   * some features of Windows, such as not allowing open files to be\n   * overwritten.\n   */\n  public static MockDirectoryWrapper newDirectory() throws IOException {\n    return newDirectory(random);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectory().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectory().mjava","sourceNew":"  /**\n   * Returns a new Directory instance. Use this when the test does not\n   * care about the specific Directory implementation (most tests).\n   * <p>\n   * The Directory is wrapped with {@link MockDirectoryWrapper}.\n   * By default this means it will be picky, such as ensuring that you\n   * properly close it and all open files in your test. It will emulate\n   * some features of Windows, such as not allowing open files to be\n   * overwritten.\n   */\n  public static MockDirectoryWrapper newDirectory() {\n    return newDirectory(random());\n  }\n\n","sourceOld":"  /**\n   * Returns a new Directory instance. Use this when the test does not\n   * care about the specific Directory implementation (most tests).\n   * <p>\n   * The Directory is wrapped with {@link MockDirectoryWrapper}.\n   * By default this means it will be picky, such as ensuring that you\n   * properly close it and all open files in your test. It will emulate\n   * some features of Windows, such as not allowing open files to be\n   * overwritten.\n   */\n  public static MockDirectoryWrapper newDirectory() throws IOException {\n    return newDirectory(random());\n  }\n\n","bugFix":["5f9dba8ffba48fba97d7a90fd45f6da87ba55736"],"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectory().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectory().mjava","sourceNew":"  /**\n   * Returns a new Directory instance. Use this when the test does not\n   * care about the specific Directory implementation (most tests).\n   * <p>\n   * The Directory is wrapped with {@link MockDirectoryWrapper}.\n   * By default this means it will be picky, such as ensuring that you\n   * properly close it and all open files in your test. It will emulate\n   * some features of Windows, such as not allowing open files to be\n   * overwritten.\n   */\n  public static MockDirectoryWrapper newDirectory() {\n    return newDirectory(random());\n  }\n\n","sourceOld":"  /**\n   * Returns a new Directory instance. Use this when the test does not\n   * care about the specific Directory implementation (most tests).\n   * <p>\n   * The Directory is wrapped with {@link MockDirectoryWrapper}.\n   * By default this means it will be picky, such as ensuring that you\n   * properly close it and all open files in your test. It will emulate\n   * some features of Windows, such as not allowing open files to be\n   * overwritten.\n   */\n  public static MockDirectoryWrapper newDirectory() throws IOException {\n    return newDirectory(random());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectory().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectory().mjava","sourceNew":"  /**\n   * Returns a new Directory instance. Use this when the test does not\n   * care about the specific Directory implementation (most tests).\n   * <p>\n   * The Directory is wrapped with {@link BaseDirectoryWrapper}.\n   * this means usually it will be picky, such as ensuring that you\n   * properly close it and all open files in your test. It will emulate\n   * some features of Windows, such as not allowing open files to be\n   * overwritten.\n   */\n  public static BaseDirectoryWrapper newDirectory() {\n    return newDirectory(random());\n  }\n\n","sourceOld":"  /**\n   * Returns a new Directory instance. Use this when the test does not\n   * care about the specific Directory implementation (most tests).\n   * <p>\n   * The Directory is wrapped with {@link MockDirectoryWrapper}.\n   * By default this means it will be picky, such as ensuring that you\n   * properly close it and all open files in your test. It will emulate\n   * some features of Windows, such as not allowing open files to be\n   * overwritten.\n   */\n  public static MockDirectoryWrapper newDirectory() {\n    return newDirectory(random());\n  }\n\n","bugFix":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","5c822aea0eb83535d40afe098470b47aff8d07fe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectory().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectory().mjava","sourceNew":"  /**\n   * Returns a new Directory instance. Use this when the test does not\n   * care about the specific Directory implementation (most tests).\n   * <p>\n   * The Directory is wrapped with {@link BaseDirectoryWrapper}.\n   * this means usually it will be picky, such as ensuring that you\n   * properly close it and all open files in your test. It will emulate\n   * some features of Windows, such as not allowing open files to be\n   * overwritten.\n   */\n  public static BaseDirectoryWrapper newDirectory() {\n    return newDirectory(random());\n  }\n\n","sourceOld":"  /**\n   * Returns a new Directory instance. Use this when the test does not\n   * care about the specific Directory implementation (most tests).\n   * <p>\n   * The Directory is wrapped with {@link MockDirectoryWrapper}.\n   * By default this means it will be picky, such as ensuring that you\n   * properly close it and all open files in your test. It will emulate\n   * some features of Windows, such as not allowing open files to be\n   * overwritten.\n   */\n  public static MockDirectoryWrapper newDirectory() {\n    return newDirectory(random());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectory().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newDirectory().mjava","sourceNew":"  /**\n   * Returns a new Directory instance. Use this when the test does not\n   * care about the specific Directory implementation (most tests).\n   * <p>\n   * The Directory is wrapped with {@link BaseDirectoryWrapper}.\n   * this means usually it will be picky, such as ensuring that you\n   * properly close it and all open files in your test. It will emulate\n   * some features of Windows, such as not allowing open files to be\n   * overwritten.\n   */\n  public static BaseDirectoryWrapper newDirectory() {\n    return newDirectory(random());\n  }\n\n","sourceOld":"  /**\n   * Returns a new Directory instance. Use this when the test does not\n   * care about the specific Directory implementation (most tests).\n   * <p>\n   * The Directory is wrapped with {@link MockDirectoryWrapper}.\n   * By default this means it will be picky, such as ensuring that you\n   * properly close it and all open files in your test. It will emulate\n   * some features of Windows, such as not allowing open files to be\n   * overwritten.\n   */\n  public static MockDirectoryWrapper newDirectory() {\n    return newDirectory(random());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","d19974432be9aed28ee7dca73bdf01d139e763a9"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d19974432be9aed28ee7dca73bdf01d139e763a9"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d19974432be9aed28ee7dca73bdf01d139e763a9"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}