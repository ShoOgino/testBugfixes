{"path":"solr/core/src/test/org/apache/solr/search/TestDocSet#doTestIteratorEqual(DocIdSet,DocIdSet).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doTestIteratorEqual(DocIdSet,DocIdSet).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doTestIteratorEqual(DocIdSet,DocIdSet).mjava","sourceNew":"  public void doTestIteratorEqual(DocIdSet a, DocIdSet b) throws IOException {\n    DocIdSetIterator ia = a.iterator();\n    DocIdSetIterator ib = b.iterator();\n\n    // test for next() equivalence\n    for(;;) {\n      int da = ia.nextDoc();\n      int db = ib.nextDoc();\n      assertEquals(da, db);\n      assertEquals(ia.docID(), ib.docID());\n      if (da==DocIdSetIterator.NO_MORE_DOCS) break;\n    }\n\n    for (int i=0; i<10; i++) {\n      // test random skipTo() and next()\n      ia = a.iterator();\n      ib = b.iterator();\n      int doc = -1;\n      for (;;) {\n        int da,db;\n        if (rand.nextBoolean()) {\n          da = ia.nextDoc();\n          db = ib.nextDoc();\n        } else {\n          int target = doc + rand.nextInt(10) + 1;  // keep in mind future edge cases like probing (increase if necessary)\n          da = ia.advance(target);\n          db = ib.advance(target);\n        }\n\n        assertEquals(da, db);\n        assertEquals(ia.docID(), ib.docID());\n        if (da==DocIdSetIterator.NO_MORE_DOCS) break;\n        doc = da;\n      }\n    }\n  }\n\n","sourceOld":"  public void doTestIteratorEqual(DocIdSet a, DocIdSet b) throws IOException {\n    DocIdSetIterator ia = a.iterator();\n    DocIdSetIterator ib = b.iterator();\n\n    // test for next() equivalence\n    for(;;) {\n      int da = ia.nextDoc();\n      int db = ib.nextDoc();\n      assertEquals(da, db);\n      assertEquals(ia.docID(), ib.docID());\n      if (da==DocIdSetIterator.NO_MORE_DOCS) break;\n    }\n\n    for (int i=0; i<10; i++) {\n      // test random skipTo() and next()\n      ia = a.iterator();\n      ib = b.iterator();\n      int doc = -1;\n      for (;;) {\n        int da,db;\n        if (rand.nextBoolean()) {\n          da = ia.nextDoc();\n          db = ib.nextDoc();\n        } else {\n          int target = doc + rand.nextInt(10) + 1;  // keep in mind future edge cases like probing (increase if necessary)\n          da = ia.advance(target);\n          db = ib.advance(target);\n        }\n\n        assertEquals(da, db);\n        assertEquals(ia.docID(), ib.docID());\n        if (da==DocIdSetIterator.NO_MORE_DOCS) break;\n        doc = da;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doTestIteratorEqual(DocIdSet,DocIdSet).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doTestIteratorEqual(DocIdSet,DocIdSet).mjava","sourceNew":"  public void doTestIteratorEqual(DocIdSet a, DocIdSet b) throws IOException {\n    DocIdSetIterator ia = a.iterator();\n    DocIdSetIterator ib = b.iterator();\n\n    // test for next() equivalence\n    for(;;) {\n      int da = ia.nextDoc();\n      int db = ib.nextDoc();\n      assertEquals(da, db);\n      assertEquals(ia.docID(), ib.docID());\n      if (da==DocIdSetIterator.NO_MORE_DOCS) break;\n    }\n\n    for (int i=0; i<10; i++) {\n      // test random skipTo() and next()\n      ia = a.iterator();\n      ib = b.iterator();\n      int doc = -1;\n      for (;;) {\n        int da,db;\n        if (rand.nextBoolean()) {\n          da = ia.nextDoc();\n          db = ib.nextDoc();\n        } else {\n          int target = doc + rand.nextInt(10) + 1;  // keep in mind future edge cases like probing (increase if necessary)\n          da = ia.advance(target);\n          db = ib.advance(target);\n        }\n\n        assertEquals(da, db);\n        assertEquals(ia.docID(), ib.docID());\n        if (da==DocIdSetIterator.NO_MORE_DOCS) break;\n        doc = da;\n      }\n    }\n  }\n\n","sourceOld":"  public void doTestIteratorEqual(DocIdSet a, DocIdSet b) throws IOException {\n    DocIdSetIterator ia = a.iterator();\n    DocIdSetIterator ib = b.iterator();\n\n    // test for next() equivalence\n    for(;;) {\n      int da = ia.nextDoc();\n      int db = ib.nextDoc();\n      assertEquals(da, db);\n      assertEquals(ia.docID(), ib.docID());\n      if (da==DocIdSetIterator.NO_MORE_DOCS) break;\n    }\n\n    for (int i=0; i<10; i++) {\n      // test random skipTo() and next()\n      ia = a.iterator();\n      ib = b.iterator();\n      int doc = -1;\n      for (;;) {\n        int da,db;\n        if (rand.nextBoolean()) {\n          da = ia.nextDoc();\n          db = ib.nextDoc();\n        } else {\n          int target = doc + rand.nextInt(10) + 1;  // keep in mind future edge cases like probing (increase if necessary)\n          da = ia.advance(target);\n          db = ib.advance(target);\n        }\n\n        assertEquals(da, db);\n        assertEquals(ia.docID(), ib.docID());\n        if (da==DocIdSetIterator.NO_MORE_DOCS) break;\n        doc = da;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestDocSet#doTestIteratorEqual(DocIdSet,DocIdSet).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestDocSet#doTestIteratorEqual(DocIdSet,DocIdSet).mjava","sourceNew":"  public void doTestIteratorEqual(DocIdSet a, DocIdSet b) throws IOException {\n    DocIdSetIterator ia = a.iterator();\n    DocIdSetIterator ib = b.iterator();\n\n    // test for next() equivalence\n    for(;;) {\n      int da = ia.nextDoc();\n      int db = ib.nextDoc();\n      assertEquals(da, db);\n      assertEquals(ia.docID(), ib.docID());\n      if (da==DocIdSetIterator.NO_MORE_DOCS) break;\n    }\n\n    for (int i=0; i<10; i++) {\n      // test random skipTo() and next()\n      ia = a.iterator();\n      ib = b.iterator();\n      int doc = -1;\n      for (;;) {\n        int da,db;\n        if (rand.nextBoolean()) {\n          da = ia.nextDoc();\n          db = ib.nextDoc();\n        } else {\n          int target = doc + rand.nextInt(10) + 1;  // keep in mind future edge cases like probing (increase if necessary)\n          da = ia.advance(target);\n          db = ib.advance(target);\n        }\n\n        assertEquals(da, db);\n        assertEquals(ia.docID(), ib.docID());\n        if (da==DocIdSetIterator.NO_MORE_DOCS) break;\n        doc = da;\n      }\n    }\n  }\n\n","sourceOld":"  public void doTestIteratorEqual(DocIdSet a, DocIdSet b) throws IOException {\n    DocIdSetIterator ia = a.iterator();\n    DocIdSetIterator ib = b.iterator();\n\n    // test for next() equivalence\n    for(;;) {\n      int da = ia.nextDoc();\n      int db = ib.nextDoc();\n      assertEquals(da, db);\n      assertEquals(ia.docID(), ib.docID());\n      if (da==DocIdSetIterator.NO_MORE_DOCS) break;\n    }\n\n    for (int i=0; i<10; i++) {\n      // test random skipTo() and next()\n      ia = a.iterator();\n      ib = b.iterator();\n      int doc = -1;\n      for (;;) {\n        int da,db;\n        if (rand.nextBoolean()) {\n          da = ia.nextDoc();\n          db = ib.nextDoc();\n        } else {\n          int target = doc + rand.nextInt(10) + 1;  // keep in mind future edge cases like probing (increase if necessary)\n          da = ia.advance(target);\n          db = ib.advance(target);\n        }\n\n        assertEquals(da, db);\n        assertEquals(ia.docID(), ib.docID());\n        if (da==DocIdSetIterator.NO_MORE_DOCS) break;\n        doc = da;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}