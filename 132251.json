{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testOutOfOrderCollectionScoringDisabled().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testOutOfOrderCollectionScoringDisabled().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testOutOfOrderCollectionScoringDisabled().mjava","sourceNew":"  @Test\n  public void testOutOfOrderCollectionScoringDisabled() throws Exception {\n    // This used to fail, because ScoredDocIdCollector.acceptDocsOutOfOrder\n    // returned true, even when scoring was enabled.\n    final int[] docs = new int[] { 1, 0, 2 }; // out of order on purpose\n\n    ScoredDocIdCollector sdic = ScoredDocIdCollector.create(docs.length, false);\n    assertTrue(\n        \"when scoring disabled, out-of-order collection should be supported\",\n        sdic.acceptsDocsOutOfOrder());\n    for (int i = 0; i < docs.length; i++) {\n      sdic.collect(docs[i]);\n    }\n\n    assertEquals(\"expected 3 documents but got \" + sdic.getScoredDocIDs().size(), 3, sdic.getScoredDocIDs().size());\n    ScoredDocIDsIterator iter = sdic.getScoredDocIDs().iterator();\n    Arrays.sort(docs);\n    for (int i = 0; iter.next(); i++) {\n      assertEquals(\"expected doc \" + docs[i], docs[i], iter.getDocID());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOutOfOrderCollectionScoringDisabled() throws Exception {\n    // This used to fail, because ScoredDocIdCollector.acceptDocsOutOfOrder\n    // returned true, even when scoring was enabled.\n    final int[] docs = new int[] { 1, 0, 2 }; // out of order on purpose\n\n    ScoredDocIdCollector sdic = ScoredDocIdCollector.create(docs.length, false);\n    assertTrue(\n        \"when scoring disabled, out-of-order collection should be supported\",\n        sdic.acceptsDocsOutOfOrder());\n    for (int i = 0; i < docs.length; i++) {\n      sdic.collect(docs[i]);\n    }\n\n    assertEquals(\"expected 3 documents but got \" + sdic.getScoredDocIDs().size(), 3, sdic.getScoredDocIDs().size());\n    ScoredDocIDsIterator iter = sdic.getScoredDocIDs().iterator();\n    Arrays.sort(docs);\n    for (int i = 0; iter.next(); i++) {\n      assertEquals(\"expected doc \" + docs[i], docs[i], iter.getDocID());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testOutOfOrderCollectionScoringDisabled().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testOutOfOrderCollectionScoringDisabled() throws Exception {\n    // This used to fail, because ScoredDocIdCollector.acceptDocsOutOfOrder\n    // returned true, even when scoring was enabled.\n    final int[] docs = new int[] { 1, 0, 2 }; // out of order on purpose\n\n    ScoredDocIdCollector sdic = ScoredDocIdCollector.create(docs.length, false);\n    assertTrue(\n        \"when scoring disabled, out-of-order collection should be supported\",\n        sdic.acceptsDocsOutOfOrder());\n    for (int i = 0; i < docs.length; i++) {\n      sdic.collect(docs[i]);\n    }\n\n    assertEquals(\"expected 3 documents but got \" + sdic.getScoredDocIDs().size(), 3, sdic.getScoredDocIDs().size());\n    ScoredDocIDsIterator iter = sdic.getScoredDocIDs().iterator();\n    Arrays.sort(docs);\n    for (int i = 0; iter.next(); i++) {\n      assertEquals(\"expected doc \" + docs[i], docs[i], iter.getDocID());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["571abba77e55fea386a38c0024f72ffa5b37a9ad"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}