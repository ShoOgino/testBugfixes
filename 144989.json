{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemFilterTest#testKeywordAttribute().mjava","commits":[{"id":"aac15d6a5f334a67381f51748c721e5788d7f009","date":1326198809,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemFilterTest#testKeywordAttribute().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Simple test for KeywordAttribute\n   */\n  public void testKeywordAttribute() throws IOException {\n    MockTokenizer tokenizer = new MockTokenizer(new StringReader(\"lucene is awesome\"), MockTokenizer.WHITESPACE, true);\n    tokenizer.setEnableChecks(true);\n    HunspellStemFilter filter = new HunspellStemFilter(tokenizer, DICTIONARY);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"lucen\", \"is\", \"awesome\"}, new int[] {1, 0, 1, 1});\n    \n    // assert with keywork marker\n    tokenizer = new MockTokenizer(new StringReader(\"lucene is awesome\"), MockTokenizer.WHITESPACE, true);\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(\"Lucene\"), true);\n    filter = new HunspellStemFilter(new KeywordMarkerFilter(tokenizer, set), DICTIONARY);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"is\", \"awesome\"}, new int[] {1, 1, 1});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemFilterTest#testKeywordAttribute().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellStemFilterTest#testKeywordAttribute().mjava","sourceNew":"  /**\n   * Simple test for KeywordAttribute\n   */\n  public void testKeywordAttribute() throws IOException {\n    MockTokenizer tokenizer = new MockTokenizer(new StringReader(\"lucene is awesome\"), MockTokenizer.WHITESPACE, true);\n    tokenizer.setEnableChecks(true);\n    HunspellStemFilter filter = new HunspellStemFilter(tokenizer, DICTIONARY);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"lucen\", \"is\", \"awesome\"}, new int[] {1, 0, 1, 1});\n    \n    // assert with keywork marker\n    tokenizer = new MockTokenizer(new StringReader(\"lucene is awesome\"), MockTokenizer.WHITESPACE, true);\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(\"Lucene\"), true);\n    filter = new HunspellStemFilter(new KeywordMarkerFilter(tokenizer, set), DICTIONARY);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"is\", \"awesome\"}, new int[] {1, 1, 1});\n  }\n\n","sourceOld":"  /**\n   * Simple test for KeywordAttribute\n   */\n  public void testKeywordAttribute() throws IOException {\n    MockTokenizer tokenizer = new MockTokenizer(new StringReader(\"lucene is awesome\"), MockTokenizer.WHITESPACE, true);\n    tokenizer.setEnableChecks(true);\n    HunspellStemFilter filter = new HunspellStemFilter(tokenizer, DICTIONARY);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"lucen\", \"is\", \"awesome\"}, new int[] {1, 0, 1, 1});\n    \n    // assert with keywork marker\n    tokenizer = new MockTokenizer(new StringReader(\"lucene is awesome\"), MockTokenizer.WHITESPACE, true);\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, Arrays.asList(\"Lucene\"), true);\n    filter = new HunspellStemFilter(new KeywordMarkerFilter(tokenizer, set), DICTIONARY);\n    assertTokenStreamContents(filter, new String[]{\"lucene\", \"is\", \"awesome\"}, new int[] {1, 1, 1});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["aac15d6a5f334a67381f51748c721e5788d7f009"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aac15d6a5f334a67381f51748c721e5788d7f009":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aac15d6a5f334a67381f51748c721e5788d7f009"],"aac15d6a5f334a67381f51748c721e5788d7f009":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}