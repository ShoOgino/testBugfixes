{"path":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestHandleTrackingFS#testOnCloseThrowsException().mjava","commits":[{"id":"bf6a608c6613a6d2494e39a733504682d5a5fa7c","date":1431951748,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestHandleTrackingFS#testOnCloseThrowsException().mjava","pathOld":"/dev/null","sourceNew":"  /** Test that the delegate gets closed on exception in HandleTrackingFS#onClose */\n  public void testOnCloseThrowsException() throws IOException {\n    Path path = wrap(createTempDir()); // we are using LeakFS under the hood if we don't get closed the test fails\n    FileSystem fs = new HandleTrackingFS(\"test://\", path.getFileSystem()) {\n      @Override\n      protected void onClose(Path path, Object stream) throws IOException {\n        throw new IOException(\"boom\");\n      }\n\n      @Override\n      protected void onOpen(Path path, Object stream) throws IOException {\n        //\n      }\n    }.getFileSystem(URI.create(\"file:///\"));\n    Path dir = new FilterPath(path, fs);\n\n    OutputStream file = Files.newOutputStream(dir.resolve(\"somefile\"));\n    file.write(5);\n    try {\n      file.close();\n      fail(\"expected IOException\");\n    } catch (IOException ex) {\n      // expected\n    }\n\n    SeekableByteChannel channel = Files.newByteChannel(dir.resolve(\"somefile\"));\n    try {\n      channel.close();\n      fail(\"expected IOException\");\n    } catch (IOException ex) {\n      // expected\n    }\n\n    InputStream stream = Files.newInputStream(dir.resolve(\"somefile\"));\n    try {\n      stream.close();\n      fail(\"expected IOException\");\n    } catch (IOException ex) {\n      // expected\n    }\n    fs.close();\n\n    DirectoryStream<Path> dirStream = Files.newDirectoryStream(dir);\n    try {\n      dirStream.close();\n      fail(\"expected IOException\");\n    } catch (IOException ex) {\n      // expected\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd8a7e622c1138188be79e193b1dc52f3f0889a5","date":1564419078,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestHandleTrackingFS#testOnCloseThrowsException().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestHandleTrackingFS#testOnCloseThrowsException().mjava","sourceNew":"  /** Test that the delegate gets closed on exception in HandleTrackingFS#onClose */\n  public void testOnCloseThrowsException() throws IOException {\n    Path path = wrap(createTempDir()); // we are using LeakFS under the hood if we don't get closed the test fails\n    FileSystem fs = new HandleTrackingFS(\"test://\", path.getFileSystem()) {\n      @Override\n      protected void onClose(Path path, Object stream) throws IOException {\n        throw new IOException(\"boom\");\n      }\n\n      @Override\n      protected void onOpen(Path path, Object stream) throws IOException {\n        //\n      }\n    }.getFileSystem(URI.create(\"file:///\"));\n    Path dir = new FilterPath(path, fs);\n\n    OutputStream file = Files.newOutputStream(dir.resolve(\"somefile\"));\n    file.write(5);\n    expectThrows(IOException.class, file::close);\n\n    SeekableByteChannel channel = Files.newByteChannel(dir.resolve(\"somefile\"));\n    expectThrows(IOException.class, channel::close);\n\n    InputStream stream = Files.newInputStream(dir.resolve(\"somefile\"));\n    expectThrows(IOException.class, stream::close);\n    fs.close();\n\n    DirectoryStream<Path> dirStream = Files.newDirectoryStream(dir);\n    expectThrows(IOException.class, dirStream::close);\n  }\n\n","sourceOld":"  /** Test that the delegate gets closed on exception in HandleTrackingFS#onClose */\n  public void testOnCloseThrowsException() throws IOException {\n    Path path = wrap(createTempDir()); // we are using LeakFS under the hood if we don't get closed the test fails\n    FileSystem fs = new HandleTrackingFS(\"test://\", path.getFileSystem()) {\n      @Override\n      protected void onClose(Path path, Object stream) throws IOException {\n        throw new IOException(\"boom\");\n      }\n\n      @Override\n      protected void onOpen(Path path, Object stream) throws IOException {\n        //\n      }\n    }.getFileSystem(URI.create(\"file:///\"));\n    Path dir = new FilterPath(path, fs);\n\n    OutputStream file = Files.newOutputStream(dir.resolve(\"somefile\"));\n    file.write(5);\n    try {\n      file.close();\n      fail(\"expected IOException\");\n    } catch (IOException ex) {\n      // expected\n    }\n\n    SeekableByteChannel channel = Files.newByteChannel(dir.resolve(\"somefile\"));\n    try {\n      channel.close();\n      fail(\"expected IOException\");\n    } catch (IOException ex) {\n      // expected\n    }\n\n    InputStream stream = Files.newInputStream(dir.resolve(\"somefile\"));\n    try {\n      stream.close();\n      fail(\"expected IOException\");\n    } catch (IOException ex) {\n      // expected\n    }\n    fs.close();\n\n    DirectoryStream<Path> dirStream = Files.newDirectoryStream(dir);\n    try {\n      dirStream.close();\n      fail(\"expected IOException\");\n    } catch (IOException ex) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestHandleTrackingFS#testOnCloseThrowsException().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestHandleTrackingFS#testOnCloseThrowsException().mjava","sourceNew":"  /** Test that the delegate gets closed on exception in HandleTrackingFS#onClose */\n  public void testOnCloseThrowsException() throws IOException {\n    Path path = wrap(createTempDir()); // we are using LeakFS under the hood if we don't get closed the test fails\n    FileSystem fs = new HandleTrackingFS(\"test://\", path.getFileSystem()) {\n      @Override\n      protected void onClose(Path path, Object stream) throws IOException {\n        throw new IOException(\"boom\");\n      }\n\n      @Override\n      protected void onOpen(Path path, Object stream) throws IOException {\n        //\n      }\n    }.getFileSystem(URI.create(\"file:///\"));\n    Path dir = new FilterPath(path, fs);\n\n    OutputStream file = Files.newOutputStream(dir.resolve(\"somefile\"));\n    file.write(5);\n    expectThrows(IOException.class, file::close);\n\n    SeekableByteChannel channel = Files.newByteChannel(dir.resolve(\"somefile\"));\n    expectThrows(IOException.class, channel::close);\n\n    InputStream stream = Files.newInputStream(dir.resolve(\"somefile\"));\n    expectThrows(IOException.class, stream::close);\n    fs.close();\n\n    DirectoryStream<Path> dirStream = Files.newDirectoryStream(dir);\n    expectThrows(IOException.class, dirStream::close);\n  }\n\n","sourceOld":"  /** Test that the delegate gets closed on exception in HandleTrackingFS#onClose */\n  public void testOnCloseThrowsException() throws IOException {\n    Path path = wrap(createTempDir()); // we are using LeakFS under the hood if we don't get closed the test fails\n    FileSystem fs = new HandleTrackingFS(\"test://\", path.getFileSystem()) {\n      @Override\n      protected void onClose(Path path, Object stream) throws IOException {\n        throw new IOException(\"boom\");\n      }\n\n      @Override\n      protected void onOpen(Path path, Object stream) throws IOException {\n        //\n      }\n    }.getFileSystem(URI.create(\"file:///\"));\n    Path dir = new FilterPath(path, fs);\n\n    OutputStream file = Files.newOutputStream(dir.resolve(\"somefile\"));\n    file.write(5);\n    try {\n      file.close();\n      fail(\"expected IOException\");\n    } catch (IOException ex) {\n      // expected\n    }\n\n    SeekableByteChannel channel = Files.newByteChannel(dir.resolve(\"somefile\"));\n    try {\n      channel.close();\n      fail(\"expected IOException\");\n    } catch (IOException ex) {\n      // expected\n    }\n\n    InputStream stream = Files.newInputStream(dir.resolve(\"somefile\"));\n    try {\n      stream.close();\n      fail(\"expected IOException\");\n    } catch (IOException ex) {\n      // expected\n    }\n    fs.close();\n\n    DirectoryStream<Path> dirStream = Files.newDirectoryStream(dir);\n    try {\n      dirStream.close();\n      fail(\"expected IOException\");\n    } catch (IOException ex) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["bf6a608c6613a6d2494e39a733504682d5a5fa7c"],"bf6a608c6613a6d2494e39a733504682d5a5fa7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["bf6a608c6613a6d2494e39a733504682d5a5fa7c","cd8a7e622c1138188be79e193b1dc52f3f0889a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd8a7e622c1138188be79e193b1dc52f3f0889a5"]},"commit2Childs":{"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bf6a608c6613a6d2494e39a733504682d5a5fa7c":["cd8a7e622c1138188be79e193b1dc52f3f0889a5","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bf6a608c6613a6d2494e39a733504682d5a5fa7c"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}