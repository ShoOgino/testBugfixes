{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","commits":[{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link ThaiWordFilter}, and\n   *         {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    final Tokenizer source = new StandardTokenizer(matchVersion);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new ThaiWordFilter(matchVersion, result);\n    return new TokenStreamComponents(source, new StopFilter(matchVersion,\n        result, stopwords));\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link ThaiWordFilter}, and\n   *         {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new ThaiWordFilter(matchVersion, result);\n    return new TokenStreamComponents(source, new StopFilter(matchVersion,\n        result, stopwords));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca700981d999d4025d8f401b1fc3f9b6f4e25ccf","date":1395362033,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link ThaiWordFilter}, and\n   *         {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    if (matchVersion.onOrAfter(Version.LUCENE_48)) {\n      final Tokenizer source = new ThaiTokenizer();\n      TokenStream result = new LowerCaseFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new ThaiWordFilter(matchVersion, result);\n      return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link ThaiWordFilter}, and\n   *         {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    final Tokenizer source = new StandardTokenizer(matchVersion);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new ThaiWordFilter(matchVersion, result);\n    return new TokenStreamComponents(source, new StopFilter(matchVersion,\n        result, stopwords));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd330c9d05eacbd6e952fe0dea852e7ae037eb50","date":1398873035,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link ThaiWordFilter}, and\n   *         {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    if (matchVersion.onOrAfter(Version.LUCENE_4_8)) {\n      final Tokenizer source = new ThaiTokenizer();\n      TokenStream result = new LowerCaseFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new ThaiWordFilter(matchVersion, result);\n      return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link ThaiWordFilter}, and\n   *         {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    if (matchVersion.onOrAfter(Version.LUCENE_48)) {\n      final Tokenizer source = new ThaiTokenizer();\n      TokenStream result = new LowerCaseFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new ThaiWordFilter(matchVersion, result);\n      return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link ThaiWordFilter}, and\n   *         {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    if (matchVersion.onOrAfter(Version.LUCENE_4_8)) {\n      final Tokenizer source = new ThaiTokenizer();\n      TokenStream result = new LowerCaseFilter(source);\n      result = new StopFilter(result, stopwords);\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer();\n      TokenStream result = new StandardFilter(source);\n      result = new LowerCaseFilter(result);\n      result = new ThaiWordFilter(result);\n      return new TokenStreamComponents(source, new StopFilter(result, stopwords));\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link ThaiWordFilter}, and\n   *         {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    if (matchVersion.onOrAfter(Version.LUCENE_4_8)) {\n      final Tokenizer source = new ThaiTokenizer();\n      TokenStream result = new LowerCaseFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new ThaiWordFilter(matchVersion, result);\n      return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link ThaiWordFilter}, and\n   *         {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    if (matchVersion.onOrAfter(Version.LUCENE_4_8)) {\n      final Tokenizer source = new ThaiTokenizer();\n      TokenStream result = new LowerCaseFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new ThaiWordFilter(matchVersion, result);\n      return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link ThaiWordFilter}, and\n   *         {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    if (matchVersion.onOrAfter(Version.LUCENE_4_8)) {\n      final Tokenizer source = new ThaiTokenizer();\n      TokenStream result = new LowerCaseFilter(source);\n      result = new StopFilter(result, stopwords);\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer();\n      TokenStream result = new StandardFilter(source);\n      result = new LowerCaseFilter(result);\n      result = new ThaiWordFilter(result);\n      return new TokenStreamComponents(source, new StopFilter(result, stopwords));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link ThaiWordFilter}, and\n   *         {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    if (getVersion().onOrAfter(Version.LUCENE_4_8)) {\n      final Tokenizer source = new ThaiTokenizer();\n      TokenStream result = new LowerCaseFilter(source);\n      result = new StopFilter(result, stopwords);\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer();\n      TokenStream result = new StandardFilter(source);\n      result = new LowerCaseFilter(result);\n      result = new ThaiWordFilter(result);\n      return new TokenStreamComponents(source, new StopFilter(result, stopwords));\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link ThaiWordFilter}, and\n   *         {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    if (matchVersion.onOrAfter(Version.LUCENE_4_8)) {\n      final Tokenizer source = new ThaiTokenizer();\n      TokenStream result = new LowerCaseFilter(matchVersion, source);\n      result = new StopFilter(matchVersion, result, stopwords);\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer(matchVersion);\n      TokenStream result = new StandardFilter(matchVersion, source);\n      result = new LowerCaseFilter(matchVersion, result);\n      result = new ThaiWordFilter(matchVersion, result);\n      return new TokenStreamComponents(source, new StopFilter(matchVersion, result, stopwords));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link ThaiWordFilter}, and\n   *         {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    if (getVersion().onOrAfter(Version.LUCENE_4_8_0)) {\n      final Tokenizer source = new ThaiTokenizer();\n      TokenStream result = new LowerCaseFilter(source);\n      result = new StopFilter(result, stopwords);\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer();\n      TokenStream result = new StandardFilter(source);\n      result = new LowerCaseFilter(result);\n      result = new ThaiWordFilter(result);\n      return new TokenStreamComponents(source, new StopFilter(result, stopwords));\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link ThaiWordFilter}, and\n   *         {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    if (getVersion().onOrAfter(Version.LUCENE_4_8)) {\n      final Tokenizer source = new ThaiTokenizer();\n      TokenStream result = new LowerCaseFilter(source);\n      result = new StopFilter(result, stopwords);\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer();\n      TokenStream result = new StandardFilter(source);\n      result = new LowerCaseFilter(result);\n      result = new ThaiWordFilter(result);\n      return new TokenStreamComponents(source, new StopFilter(result, stopwords));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link ThaiTokenizer} filtered with\n   *         {@link LowerCaseFilter} and {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    final Tokenizer source = new ThaiTokenizer();\n    TokenStream result = new LowerCaseFilter(source);\n    result = new StopFilter(result, stopwords);\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link ThaiWordFilter}, and\n   *         {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    if (getVersion().onOrAfter(Version.LUCENE_4_8_0)) {\n      final Tokenizer source = new ThaiTokenizer();\n      TokenStream result = new LowerCaseFilter(source);\n      result = new StopFilter(result, stopwords);\n      return new TokenStreamComponents(source, result);\n    } else {\n      final Tokenizer source = new StandardTokenizer();\n      TokenStream result = new StandardFilter(source);\n      result = new LowerCaseFilter(result);\n      result = new ThaiWordFilter(result);\n      return new TokenStreamComponents(source, new StopFilter(result, stopwords));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fe8aa71069c95e278b630015ea5d34aad0ed2dd","date":1439557976,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link ThaiTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link DecimalDigitFilter} and {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    final Tokenizer source = new ThaiTokenizer();\n    TokenStream result = new LowerCaseFilter(source);\n    if (getVersion().onOrAfter(Version.LUCENE_5_4_0)) {\n      result = new DecimalDigitFilter(result);\n    }\n    result = new StopFilter(result, stopwords);\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link ThaiTokenizer} filtered with\n   *         {@link LowerCaseFilter} and {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    final Tokenizer source = new ThaiTokenizer();\n    TokenStream result = new LowerCaseFilter(source);\n    result = new StopFilter(result, stopwords);\n    return new TokenStreamComponents(source, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6392c263ac1e0e2a22a7f2d50f499e76971801d","date":1456927541,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link ThaiTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link DecimalDigitFilter} and {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    final Tokenizer source = new ThaiTokenizer();\n    TokenStream result = new LowerCaseFilter(source);\n    result = new DecimalDigitFilter(result);\n\n    result = new StopFilter(result, stopwords);\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link ThaiTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link DecimalDigitFilter} and {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    final Tokenizer source = new ThaiTokenizer();\n    TokenStream result = new LowerCaseFilter(source);\n    if (getVersion().onOrAfter(Version.LUCENE_5_4_0)) {\n      result = new DecimalDigitFilter(result);\n    }\n    result = new StopFilter(result, stopwords);\n    return new TokenStreamComponents(source, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer#createComponents(String).mjava","sourceNew":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link ThaiTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link DecimalDigitFilter} and {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    final Tokenizer source = new ThaiTokenizer();\n    TokenStream result = new LowerCaseFilter(source);\n    result = new DecimalDigitFilter(result);\n\n    result = new StopFilter(result, stopwords);\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Creates\n   * {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   * used to tokenize all the text in the provided {@link Reader}.\n   * \n   * @return {@link org.apache.lucene.analysis.Analyzer.TokenStreamComponents}\n   *         built from a {@link ThaiTokenizer} filtered with\n   *         {@link LowerCaseFilter}, {@link DecimalDigitFilter} and {@link StopFilter}\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName) {\n    final Tokenizer source = new ThaiTokenizer();\n    TokenStream result = new LowerCaseFilter(source);\n    if (getVersion().onOrAfter(Version.LUCENE_5_4_0)) {\n      result = new DecimalDigitFilter(result);\n    }\n    result = new StopFilter(result, stopwords);\n    return new TokenStreamComponents(source, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6fe8aa71069c95e278b630015ea5d34aad0ed2dd":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"057a1793765d068ea9302f1a29e21734ee58d41e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["057a1793765d068ea9302f1a29e21734ee58d41e"],"ca700981d999d4025d8f401b1fc3f9b6f4e25ccf":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"d6392c263ac1e0e2a22a7f2d50f499e76971801d":["6fe8aa71069c95e278b630015ea5d34aad0ed2dd"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["ca700981d999d4025d8f401b1fc3f9b6f4e25ccf"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["6fe8aa71069c95e278b630015ea5d34aad0ed2dd","d6392c263ac1e0e2a22a7f2d50f499e76971801d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["ca700981d999d4025d8f401b1fc3f9b6f4e25ccf"],"6fe8aa71069c95e278b630015ea5d34aad0ed2dd":["d6392c263ac1e0e2a22a7f2d50f499e76971801d","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"057a1793765d068ea9302f1a29e21734ee58d41e":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["6fe8aa71069c95e278b630015ea5d34aad0ed2dd"],"ca700981d999d4025d8f401b1fc3f9b6f4e25ccf":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"d6392c263ac1e0e2a22a7f2d50f499e76971801d":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["057a1793765d068ea9302f1a29e21734ee58d41e"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}