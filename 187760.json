{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flushNextBuffer().mjava","commits":[{"id":"ad4be95c403f45330d2a078afc9b6fab4515c8ce","date":1512064647,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flushNextBuffer().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>Expert: Flushes the next pending writer per thread buffer if available or the largest active\n   * non-pending writer per thread buffer in the calling thread.\n   * This can be used to flush documents to disk outside of an indexing thread. In contrast to {@link #flush()}\n   * this won't mark all currently active indexing buffers as flush-pending.\n   *\n   * Note: this method is best-effort and might not flush any segments to disk. If there is a full flush happening\n   * concurrently multiple segments might have been flushed.\n   * Users of this API can access the IndexWriters current memory consumption via {@link #ramBytesUsed()}\n   * </p>\n   * @return <code>true</code> iff this method flushed at least on segment to disk.\n   * @lucene.experimental\n   */\n  public final boolean flushNextBuffer() throws IOException {\n    try {\n      if (docWriter.flushOneDWPT()) {\n        processEvents(true, false);\n        return true; // we wrote a segment\n      }\n    } catch (AbortingException | VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"flushNextBuffer\");\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flushNextBuffer().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>Expert: Flushes the next pending writer per thread buffer if available or the largest active\n   * non-pending writer per thread buffer in the calling thread.\n   * This can be used to flush documents to disk outside of an indexing thread. In contrast to {@link #flush()}\n   * this won't mark all currently active indexing buffers as flush-pending.\n   *\n   * Note: this method is best-effort and might not flush any segments to disk. If there is a full flush happening\n   * concurrently multiple segments might have been flushed.\n   * Users of this API can access the IndexWriters current memory consumption via {@link #ramBytesUsed()}\n   * </p>\n   * @return <code>true</code> iff this method flushed at least on segment to disk.\n   * @lucene.experimental\n   */\n  public final boolean flushNextBuffer() throws IOException {\n    try {\n      if (docWriter.flushOneDWPT()) {\n        processEvents(true, false);\n        return true; // we wrote a segment\n      }\n    } catch (AbortingException | VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"flushNextBuffer\");\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"845b760a99e5f369fcd0a5d723a87b8def6a3f56","date":1521117993,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flushNextBuffer().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#flushNextBuffer().mjava","sourceNew":"  /**\n   * <p>Expert: Flushes the next pending writer per thread buffer if available or the largest active\n   * non-pending writer per thread buffer in the calling thread.\n   * This can be used to flush documents to disk outside of an indexing thread. In contrast to {@link #flush()}\n   * this won't mark all currently active indexing buffers as flush-pending.\n   *\n   * Note: this method is best-effort and might not flush any segments to disk. If there is a full flush happening\n   * concurrently multiple segments might have been flushed.\n   * Users of this API can access the IndexWriters current memory consumption via {@link #ramBytesUsed()}\n   * </p>\n   * @return <code>true</code> iff this method flushed at least on segment to disk.\n   * @lucene.experimental\n   */\n  public final boolean flushNextBuffer() throws IOException {\n    try {\n      if (docWriter.flushOneDWPT()) {\n        processEvents(true);\n        return true; // we wrote a segment\n      }\n      return false;\n    } catch (VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"flushNextBuffer\");\n      throw tragedy;\n    } finally {\n      maybeCloseOnTragicEvent();\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Expert: Flushes the next pending writer per thread buffer if available or the largest active\n   * non-pending writer per thread buffer in the calling thread.\n   * This can be used to flush documents to disk outside of an indexing thread. In contrast to {@link #flush()}\n   * this won't mark all currently active indexing buffers as flush-pending.\n   *\n   * Note: this method is best-effort and might not flush any segments to disk. If there is a full flush happening\n   * concurrently multiple segments might have been flushed.\n   * Users of this API can access the IndexWriters current memory consumption via {@link #ramBytesUsed()}\n   * </p>\n   * @return <code>true</code> iff this method flushed at least on segment to disk.\n   * @lucene.experimental\n   */\n  public final boolean flushNextBuffer() throws IOException {\n    try {\n      if (docWriter.flushOneDWPT()) {\n        processEvents(true, false);\n        return true; // we wrote a segment\n      }\n    } catch (AbortingException | VirtualMachineError tragedy) {\n      tragicEvent(tragedy, \"flushNextBuffer\");\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad4be95c403f45330d2a078afc9b6fab4515c8ce"],"845b760a99e5f369fcd0a5d723a87b8def6a3f56":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad4be95c403f45330d2a078afc9b6fab4515c8ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["845b760a99e5f369fcd0a5d723a87b8def6a3f56"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["845b760a99e5f369fcd0a5d723a87b8def6a3f56"],"845b760a99e5f369fcd0a5d723a87b8def6a3f56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1aad05eeff7818b0833c02ac6b743aa72054963b","ad4be95c403f45330d2a078afc9b6fab4515c8ce"],"ad4be95c403f45330d2a078afc9b6fab4515c8ce":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}