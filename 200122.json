{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#copyFieldsNoDeletions(MergeState,MergeState.IndexReaderAndLiveDocs,Lucene40StoredFieldsReader,int[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#copyFieldsNoDeletions(MergeState,MergeState.IndexReaderAndLiveDocs,Lucene40StoredFieldsReader,int[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#copyFieldsNoDeletions(MergeState,MergeState.IndexReaderAndLiveDocs,Lucene40StoredFieldsReader,int[]).mjava","sourceNew":"  private int copyFieldsNoDeletions(MergeState mergeState, final MergeState.IndexReaderAndLiveDocs reader,\n                                    final Lucene40StoredFieldsReader matchingFieldsReader, int rawDocLengths[])\n    throws IOException, MergeAbortedException, CorruptIndexException {\n    final int maxDoc = reader.reader.maxDoc();\n    int docCount = 0;\n    if (matchingFieldsReader != null) {\n      // We can bulk-copy because the fieldInfos are \"congruent\"\n      while (docCount < maxDoc) {\n        int len = Math.min(MAX_RAW_MERGE_DOCS, maxDoc - docCount);\n        IndexInput stream = matchingFieldsReader.rawDocs(rawDocLengths, docCount, len);\n        addRawDocuments(stream, rawDocLengths, len);\n        docCount += len;\n        mergeState.checkAbort.work(300 * len);\n      }\n    } else {\n      for (; docCount < maxDoc; docCount++) {\n        // NOTE: it's very important to first assign to doc then pass it to\n        // fieldsWriter.addDocument; see LUCENE-1282\n        Document doc = reader.reader.document(docCount);\n        addDocument(doc, mergeState.fieldInfos);\n        mergeState.checkAbort.work(300);\n      }\n    }\n    return docCount;\n  }\n\n","sourceOld":"  private int copyFieldsNoDeletions(MergeState mergeState, final MergeState.IndexReaderAndLiveDocs reader,\n                                    final Lucene40StoredFieldsReader matchingFieldsReader, int rawDocLengths[])\n    throws IOException, MergeAbortedException, CorruptIndexException {\n    final int maxDoc = reader.reader.maxDoc();\n    int docCount = 0;\n    if (matchingFieldsReader != null) {\n      // We can bulk-copy because the fieldInfos are \"congruent\"\n      while (docCount < maxDoc) {\n        int len = Math.min(MAX_RAW_MERGE_DOCS, maxDoc - docCount);\n        IndexInput stream = matchingFieldsReader.rawDocs(rawDocLengths, docCount, len);\n        addRawDocuments(stream, rawDocLengths, len);\n        docCount += len;\n        mergeState.checkAbort.work(300 * len);\n      }\n    } else {\n      for (; docCount < maxDoc; docCount++) {\n        // NOTE: it's very important to first assign to doc then pass it to\n        // fieldsWriter.addDocument; see LUCENE-1282\n        Document doc = reader.reader.document(docCount);\n        addDocument(doc, mergeState.fieldInfos);\n        mergeState.checkAbort.work(300);\n      }\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#copyFieldsNoDeletions(MergeState,MergeState.IndexReaderAndLiveDocs,Lucene40StoredFieldsReader,int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#copyFieldsNoDeletions(MergeState,MergeState.IndexReaderAndLiveDocs,Lucene40StoredFieldsReader,int[]).mjava","sourceNew":"  private int copyFieldsNoDeletions(MergeState mergeState, final MergeState.IndexReaderAndLiveDocs reader,\n                                    final Lucene40StoredFieldsReader matchingFieldsReader, int rawDocLengths[])\n    throws IOException {\n    final int maxDoc = reader.reader.maxDoc();\n    int docCount = 0;\n    if (matchingFieldsReader != null) {\n      // We can bulk-copy because the fieldInfos are \"congruent\"\n      while (docCount < maxDoc) {\n        int len = Math.min(MAX_RAW_MERGE_DOCS, maxDoc - docCount);\n        IndexInput stream = matchingFieldsReader.rawDocs(rawDocLengths, docCount, len);\n        addRawDocuments(stream, rawDocLengths, len);\n        docCount += len;\n        mergeState.checkAbort.work(300 * len);\n      }\n    } else {\n      for (; docCount < maxDoc; docCount++) {\n        // NOTE: it's very important to first assign to doc then pass it to\n        // fieldsWriter.addDocument; see LUCENE-1282\n        Document doc = reader.reader.document(docCount);\n        addDocument(doc, mergeState.fieldInfos);\n        mergeState.checkAbort.work(300);\n      }\n    }\n    return docCount;\n  }\n\n","sourceOld":"  private int copyFieldsNoDeletions(MergeState mergeState, final MergeState.IndexReaderAndLiveDocs reader,\n                                    final Lucene40StoredFieldsReader matchingFieldsReader, int rawDocLengths[])\n    throws IOException, MergeAbortedException, CorruptIndexException {\n    final int maxDoc = reader.reader.maxDoc();\n    int docCount = 0;\n    if (matchingFieldsReader != null) {\n      // We can bulk-copy because the fieldInfos are \"congruent\"\n      while (docCount < maxDoc) {\n        int len = Math.min(MAX_RAW_MERGE_DOCS, maxDoc - docCount);\n        IndexInput stream = matchingFieldsReader.rawDocs(rawDocLengths, docCount, len);\n        addRawDocuments(stream, rawDocLengths, len);\n        docCount += len;\n        mergeState.checkAbort.work(300 * len);\n      }\n    } else {\n      for (; docCount < maxDoc; docCount++) {\n        // NOTE: it's very important to first assign to doc then pass it to\n        // fieldsWriter.addDocument; see LUCENE-1282\n        Document doc = reader.reader.document(docCount);\n        addDocument(doc, mergeState.fieldInfos);\n        mergeState.checkAbort.work(300);\n      }\n    }\n    return docCount;\n  }\n\n","bugFix":["06584e6e98d592b34e1329b384182f368d2025e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c95a819869502635864dac0a788f874787e3395b","date":1341394787,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#copyFieldsNoDeletions(MergeState,AtomicReader,Lucene40StoredFieldsReader,int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#copyFieldsNoDeletions(MergeState,MergeState.IndexReaderAndLiveDocs,Lucene40StoredFieldsReader,int[]).mjava","sourceNew":"  private int copyFieldsNoDeletions(MergeState mergeState, final AtomicReader reader,\n                                    final Lucene40StoredFieldsReader matchingFieldsReader, int rawDocLengths[])\n    throws IOException {\n    final int maxDoc = reader.maxDoc();\n    int docCount = 0;\n    if (matchingFieldsReader != null) {\n      // We can bulk-copy because the fieldInfos are \"congruent\"\n      while (docCount < maxDoc) {\n        int len = Math.min(MAX_RAW_MERGE_DOCS, maxDoc - docCount);\n        IndexInput stream = matchingFieldsReader.rawDocs(rawDocLengths, docCount, len);\n        addRawDocuments(stream, rawDocLengths, len);\n        docCount += len;\n        mergeState.checkAbort.work(300 * len);\n      }\n    } else {\n      for (; docCount < maxDoc; docCount++) {\n        // NOTE: it's very important to first assign to doc then pass it to\n        // fieldsWriter.addDocument; see LUCENE-1282\n        Document doc = reader.document(docCount);\n        addDocument(doc, mergeState.fieldInfos);\n        mergeState.checkAbort.work(300);\n      }\n    }\n    return docCount;\n  }\n\n","sourceOld":"  private int copyFieldsNoDeletions(MergeState mergeState, final MergeState.IndexReaderAndLiveDocs reader,\n                                    final Lucene40StoredFieldsReader matchingFieldsReader, int rawDocLengths[])\n    throws IOException {\n    final int maxDoc = reader.reader.maxDoc();\n    int docCount = 0;\n    if (matchingFieldsReader != null) {\n      // We can bulk-copy because the fieldInfos are \"congruent\"\n      while (docCount < maxDoc) {\n        int len = Math.min(MAX_RAW_MERGE_DOCS, maxDoc - docCount);\n        IndexInput stream = matchingFieldsReader.rawDocs(rawDocLengths, docCount, len);\n        addRawDocuments(stream, rawDocLengths, len);\n        docCount += len;\n        mergeState.checkAbort.work(300 * len);\n      }\n    } else {\n      for (; docCount < maxDoc; docCount++) {\n        // NOTE: it's very important to first assign to doc then pass it to\n        // fieldsWriter.addDocument; see LUCENE-1282\n        Document doc = reader.reader.document(docCount);\n        addDocument(doc, mergeState.fieldInfos);\n        mergeState.checkAbort.work(300);\n      }\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter#copyFieldsNoDeletions(MergeState,MergeState.IndexReaderAndLiveDocs,Lucene40StoredFieldsReader,int[]).mjava","sourceNew":null,"sourceOld":"  private int copyFieldsNoDeletions(MergeState mergeState, final MergeState.IndexReaderAndLiveDocs reader,\n                                    final Lucene40StoredFieldsReader matchingFieldsReader, int rawDocLengths[])\n    throws IOException, MergeAbortedException, CorruptIndexException {\n    final int maxDoc = reader.reader.maxDoc();\n    int docCount = 0;\n    if (matchingFieldsReader != null) {\n      // We can bulk-copy because the fieldInfos are \"congruent\"\n      while (docCount < maxDoc) {\n        int len = Math.min(MAX_RAW_MERGE_DOCS, maxDoc - docCount);\n        IndexInput stream = matchingFieldsReader.rawDocs(rawDocLengths, docCount, len);\n        addRawDocuments(stream, rawDocLengths, len);\n        docCount += len;\n        mergeState.checkAbort.work(300 * len);\n      }\n    } else {\n      for (; docCount < maxDoc; docCount++) {\n        // NOTE: it's very important to first assign to doc then pass it to\n        // fieldsWriter.addDocument; see LUCENE-1282\n        Document doc = reader.reader.document(docCount);\n        addDocument(doc, mergeState.fieldInfos);\n        mergeState.checkAbort.work(300);\n      }\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c95a819869502635864dac0a788f874787e3395b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","c95a819869502635864dac0a788f874787e3395b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c95a819869502635864dac0a788f874787e3395b"]},"commit2Childs":{"c95a819869502635864dac0a788f874787e3395b":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c95a819869502635864dac0a788f874787e3395b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}