{"path":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testBoundingBoxEdgeCases().mjava","commits":[{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testBoundingBoxEdgeCases().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testBoundingBoxEdgeCases().mjava","sourceNew":"  // targets the bounding box directly\n  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      for (int j = 0; j < 100; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        // if the point is within poly, then it should be in our bounding box\n        if (impl.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // targets the bounding box directly\n  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        // if the point is within poly, then it should be in our bounding box\n        if (polygon.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testBoundingBoxEdgeCases().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testBoundingBoxEdgeCases().mjava","sourceNew":"  // targets the bounding box directly\n  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      for (int j = 0; j < 100; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        // if the point is within poly, then it should be in our bounding box\n        if (impl.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // targets the bounding box directly\n  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        // if the point is within poly, then it should be in our bounding box\n        if (polygon.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testBoundingBoxEdgeCases().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testBoundingBoxEdgeCases().mjava","sourceNew":"  // targets the bounding box directly\n  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      Component2D impl = Polygon2D.create(polygon);\n      \n      for (int j = 0; j < 100; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        // if the point is within poly, then it should be in our bounding box\n        if (impl.contains(longitude, latitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // targets the bounding box directly\n  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      for (int j = 0; j < 100; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        // if the point is within poly, then it should be in our bounding box\n        if (impl.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testBoundingBoxEdgeCases().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon2D#testBoundingBoxEdgeCases().mjava","sourceNew":"  // targets the bounding box directly\n  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      Component2D impl = Polygon2D.create(polygon);\n      \n      for (int j = 0; j < 100; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        // if the point is within poly, then it should be in our bounding box\n        if (impl.contains(longitude, latitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // targets the bounding box directly\n  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      Polygon2D impl = Polygon2D.create(polygon);\n      \n      for (int j = 0; j < 100; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        double latitude = point[0];\n        double longitude = point[1];\n        // if the point is within poly, then it should be in our bounding box\n        if (impl.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","925fce43f3bac029d912b9b7de03c789e258a333"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"925fce43f3bac029d912b9b7de03c789e258a333":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0b597c65628ca9e73913a07e81691f8229bae35":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}