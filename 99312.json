{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","commits":[{"id":"286db2cd7d8d9e3b02a5b51a58c2b18ce404f9aa","date":1386082542,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","pathOld":"/dev/null","sourceNew":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<String,List<Integer>>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 3) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = _TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = _TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrServer()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrServer client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n            \n            // remove collection\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(\"action\", CollectionAction.DELETE.toString());\n            params.set(\"name\", collectionName);\n            QueryRequest request = new QueryRequest(params);\n            request.setPath(\"/admin/collections\");\n            \n            if (client == null) {\n              client = createCloudClient(null);\n            }\n            \n            client.request(request);\n            \n          } catch (SolrServerException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<Thread>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","pathOld":"/dev/null","sourceNew":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<String,List<Integer>>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 3) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = _TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = _TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrServer()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrServer client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n            \n            // remove collection\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(\"action\", CollectionAction.DELETE.toString());\n            params.set(\"name\", collectionName);\n            QueryRequest request = new QueryRequest(params);\n            request.setPath(\"/admin/collections\");\n            \n            if (client == null) {\n              client = createCloudClient(null);\n            }\n            \n            client.request(request);\n            \n          } catch (SolrServerException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<Thread>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","sourceNew":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<String,List<Integer>>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 3) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrServer()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrServer client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n            \n            // remove collection\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(\"action\", CollectionAction.DELETE.toString());\n            params.set(\"name\", collectionName);\n            QueryRequest request = new QueryRequest(params);\n            request.setPath(\"/admin/collections\");\n            \n            if (client == null) {\n              client = createCloudClient(null);\n            }\n            \n            client.request(request);\n            \n          } catch (SolrServerException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<Thread>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","sourceOld":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<String,List<Integer>>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 3) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = _TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = _TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrServer()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrServer client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n            \n            // remove collection\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(\"action\", CollectionAction.DELETE.toString());\n            params.set(\"name\", collectionName);\n            QueryRequest request = new QueryRequest(params);\n            request.setPath(\"/admin/collections\");\n            \n            if (client == null) {\n              client = createCloudClient(null);\n            }\n            \n            client.request(request);\n            \n          } catch (SolrServerException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<Thread>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","sourceNew":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 3) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrServer()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrServer client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n            \n            // remove collection\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(\"action\", CollectionAction.DELETE.toString());\n            params.set(\"name\", collectionName);\n            QueryRequest request = new QueryRequest(params);\n            request.setPath(\"/admin/collections\");\n            \n            if (client == null) {\n              client = createCloudClient(null);\n            }\n            \n            client.request(request);\n            \n          } catch (SolrServerException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","sourceOld":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<String,List<Integer>>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 3) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrServer()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrServer client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n            \n            // remove collection\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(\"action\", CollectionAction.DELETE.toString());\n            params.set(\"name\", collectionName);\n            QueryRequest request = new QueryRequest(params);\n            request.setPath(\"/admin/collections\");\n            \n            if (client == null) {\n              client = createCloudClient(null);\n            }\n            \n            client.request(request);\n            \n          } catch (SolrServerException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<Thread>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3a46663789411cdf016145a96a40cf861798ae3","date":1395119088,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","sourceNew":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 2) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrServer()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrServer client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n            \n            // remove collection\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(\"action\", CollectionAction.DELETE.toString());\n            params.set(\"name\", collectionName);\n            QueryRequest request = new QueryRequest(params);\n            request.setPath(\"/admin/collections\");\n            \n            if (client == null) {\n              client = createCloudClient(null);\n            }\n            \n            client.request(request);\n            \n          } catch (SolrServerException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","sourceOld":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 3) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrServer()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrServer client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n            \n            // remove collection\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(\"action\", CollectionAction.DELETE.toString());\n            params.set(\"name\", collectionName);\n            QueryRequest request = new QueryRequest(params);\n            request.setPath(\"/admin/collections\");\n            \n            if (client == null) {\n              client = createCloudClient(null);\n            }\n            \n            client.request(request);\n            \n          } catch (SolrServerException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"963b0a9b072593721af39e1d9b815fba17e88e7f","date":1395120846,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","sourceNew":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 3) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrServer()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrServer client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n            \n            // remove collection\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(\"action\", CollectionAction.DELETE.toString());\n            params.set(\"name\", collectionName);\n            QueryRequest request = new QueryRequest(params);\n            request.setPath(\"/admin/collections\");\n            \n            if (client == null) {\n              client = createCloudClient(null);\n            }\n            \n            client.request(request);\n            \n          } catch (SolrServerException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","sourceOld":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 2) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrServer()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrServer client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n            \n            // remove collection\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(\"action\", CollectionAction.DELETE.toString());\n            params.set(\"name\", collectionName);\n            QueryRequest request = new QueryRequest(params);\n            request.setPath(\"/admin/collections\");\n            \n            if (client == null) {\n              client = createCloudClient(null);\n            }\n            \n            client.request(request);\n            \n          } catch (SolrServerException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70425c0eec3ca096a4265143bd0ea238b9fc66cc","date":1395639584,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","sourceNew":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrServer()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrServer client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n            \n            // remove collection\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(\"action\", CollectionAction.DELETE.toString());\n            params.set(\"name\", collectionName);\n            QueryRequest request = new QueryRequest(params);\n            request.setPath(\"/admin/collections\");\n            \n            if (client == null) {\n              client = createCloudClient(null);\n            }\n            \n            client.request(request);\n            \n          } catch (SolrServerException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","sourceOld":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 3) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrServer()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrServer client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n            \n            // remove collection\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(\"action\", CollectionAction.DELETE.toString());\n            params.set(\"name\", collectionName);\n            QueryRequest request = new QueryRequest(params);\n            request.setPath(\"/admin/collections\");\n            \n            if (client == null) {\n              client = createCloudClient(null);\n            }\n            \n            client.request(request);\n            \n          } catch (SolrServerException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ba6726f047e3cb4c07099505450fa11c486c071","date":1414264828,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","sourceNew":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrServer()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrServer client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n            \n            // remove collection\n            CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n            delete.setCollectionName(collectionName);\n            client.request(delete);\n          } catch (SolrServerException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","sourceOld":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrServer()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrServer client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n            \n            // remove collection\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(\"action\", CollectionAction.DELETE.toString());\n            params.set(\"name\", collectionName);\n            QueryRequest request = new QueryRequest(params);\n            request.setPath(\"/admin/collections\");\n            \n            if (client == null) {\n              client = createCloudClient(null);\n            }\n            \n            client.request(request);\n            \n          } catch (SolrServerException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f41a1db2f1c9a613007a08dd9ab2bfb1c19cfef4","date":1414571838,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","sourceNew":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrServer()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrServer client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            } else  {\n              client = createCloudClient(null);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n\n            // remove collection\n            CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n            delete.setCollectionName(collectionName);\n            client.request(delete);\n          } catch (SolrServerException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","sourceOld":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrServer()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrServer client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n            \n            // remove collection\n            CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n            delete.setCollectionName(collectionName);\n            client.request(delete);\n          } catch (SolrServerException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","sourceNew":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrClient()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrClient client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            } else  {\n              client = createCloudClient(null);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n\n            // remove collection\n            CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n            delete.setCollectionName(collectionName);\n            client.request(delete);\n          } catch (SolrServerException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","sourceOld":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrServer()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrServer client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            } else  {\n              client = createCloudClient(null);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n\n            // remove collection\n            CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n            delete.setCollectionName(collectionName);\n            client.request(delete);\n          } catch (SolrServerException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","sourceNew":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrClient()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrClient client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            } else  {\n              client = createCloudClient(null);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n\n            // remove collection\n            CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n            delete.setCollectionName(collectionName);\n            client.request(delete);\n          } catch (SolrServerException | IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","sourceOld":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrClient()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrClient client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            } else  {\n              client = createCloudClient(null);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n\n            // remove collection\n            CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n            delete.setCollectionName(collectionName);\n            client.request(delete);\n          } catch (SolrServerException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } catch (IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","sourceNew":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, getShardCount() * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrClient()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrClient client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            } else  {\n              client = createCloudClient(null);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n\n            // remove collection\n            CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n            delete.setCollectionName(collectionName);\n            client.request(delete);\n          } catch (SolrServerException | IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","sourceOld":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, shardCount * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrClient()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrClient client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            } else  {\n              client = createCloudClient(null);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n\n            // remove collection\n            CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n            delete.setCollectionName(collectionName);\n            client.request(delete);\n          } catch (SolrServerException | IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8d6fe6065f656ebce13f20c1cbf6049888beae","date":1422033945,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","sourceNew":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      public CollectionThread(String name) {\n        super(name);\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + getName() + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, getShardCount() * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrClient()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrClient client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            } else  {\n              client = createCloudClient(null);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n\n            // remove collection\n            CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n            delete.setCollectionName(collectionName);\n            client.request(delete);\n          } catch (SolrServerException | IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","sourceOld":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      private String name;\n\n      public CollectionThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + name + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, getShardCount() * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrClient()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrClient client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            } else  {\n              client = createCloudClient(null);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n\n            // remove collection\n            CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n            delete.setCollectionName(collectionName);\n            client.request(delete);\n          } catch (SolrServerException | IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","sourceNew":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      public CollectionThread(String name) {\n        super(name);\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + getName() + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, getShardCount() * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrClient()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n          try (CloudSolrClient client = createCloudClient(i == 1 ? collectionName : null)) {\n\n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n\n            // remove collection\n            CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n            delete.setCollectionName(collectionName);\n            client.request(delete);\n          } catch (SolrServerException | IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","sourceOld":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      public CollectionThread(String name) {\n        super(name);\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + getName() + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, getShardCount() * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrClient()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n          \n          CloudSolrClient client = null;\n          try {\n            if (i == 0) {\n              client = createCloudClient(null);\n            } else if (i == 1) {\n              client = createCloudClient(collectionName);\n            } else  {\n              client = createCloudClient(null);\n            }\n            \n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n\n            // remove collection\n            CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n            delete.setCollectionName(collectionName);\n            client.request(delete);\n          } catch (SolrServerException | IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          } finally {\n            if (client != null) client.shutdown();\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182acd29cf4cb1644a02b8517f3a5b867c0d7cce","date":1432665213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","sourceNew":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      public CollectionThread(String name) {\n        super(name);\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + getName() + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, getShardCount() * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrClient()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n          try (CloudSolrClient client = createCloudClient(i == 1 ? collectionName : null)) {\n\n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n\n            // remove collection\n            CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete()\n                    .setCollectionName(collectionName);\n            client.request(delete);\n          } catch (SolrServerException | IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","sourceOld":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      public CollectionThread(String name) {\n        super(name);\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + getName() + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, getShardCount() * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrClient()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n          try (CloudSolrClient client = createCloudClient(i == 1 ? collectionName : null)) {\n\n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n\n            // remove collection\n            CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete();\n            delete.setCollectionName(collectionName);\n            client.request(delete);\n          } catch (SolrServerException | IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","sourceNew":null,"sourceOld":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      public CollectionThread(String name) {\n        super(name);\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + getName() + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, getShardCount() * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrClient()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n          try (CloudSolrClient client = createCloudClient(i == 1 ? collectionName : null)) {\n\n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n\n            // remove collection\n            CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete()\n                    .setCollectionName(collectionName);\n            client.request(delete);\n          } catch (SolrServerException | IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionsAPIAddRemoveStress().mjava","sourceNew":null,"sourceOld":"  private void testCollectionsAPIAddRemoveStress() throws Exception {\n    \n    class CollectionThread extends Thread {\n      \n      public CollectionThread(String name) {\n        super(name);\n      }\n      \n      public void run() {\n        // create new collections rapid fire\n        Map<String,List<Integer>> collectionInfos = new HashMap<>();\n        int cnt = random().nextInt(TEST_NIGHTLY ? 13 : 1) + 1;\n        \n        for (int i = 0; i < cnt; i++) {\n          String collectionName = \"awholynewstresscollection_\" + getName() + \"_\" + i;\n          int numShards = TestUtil.nextInt(random(), 0, getShardCount() * 2) + 1;\n          int replicationFactor = TestUtil.nextInt(random(), 0, 3) + 1;\n          int maxShardsPerNode = (((numShards * 2 * replicationFactor) / getCommonCloudSolrClient()\n              .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n          try (CloudSolrClient client = createCloudClient(i == 1 ? collectionName : null)) {\n\n            createCollection(collectionInfos, collectionName,\n                numShards, replicationFactor, maxShardsPerNode, client, null,\n                \"conf1\");\n\n            // remove collection\n            CollectionAdminRequest.Delete delete = new CollectionAdminRequest.Delete()\n                    .setCollectionName(collectionName);\n            client.request(delete);\n          } catch (SolrServerException | IOException e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    }\n    List<Thread> threads = new ArrayList<>();\n    int numThreads = TEST_NIGHTLY ? 6 : 2;\n    for (int i = 0; i < numThreads; i++) {\n      CollectionThread thread = new CollectionThread(\"collection\" + i);\n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    for (Thread thread : threads) {\n      thread.join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["bafca15d8e408346a67f4282ad1143b88023893b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"d3a46663789411cdf016145a96a40cf861798ae3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"abb23fcc2461782ab204e61213240feb77d355aa":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"6613659748fe4411a7dcf85266e55db1f95f7315":["286db2cd7d8d9e3b02a5b51a58c2b18ce404f9aa"],"bafca15d8e408346a67f4282ad1143b88023893b":["f41a1db2f1c9a613007a08dd9ab2bfb1c19cfef4"],"f41a1db2f1c9a613007a08dd9ab2bfb1c19cfef4":["2ba6726f047e3cb4c07099505450fa11c486c071"],"963b0a9b072593721af39e1d9b815fba17e88e7f":["d3a46663789411cdf016145a96a40cf861798ae3"],"7e8d6fe6065f656ebce13f20c1cbf6049888beae":["abb23fcc2461782ab204e61213240feb77d355aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","286db2cd7d8d9e3b02a5b51a58c2b18ce404f9aa"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["7e8d6fe6065f656ebce13f20c1cbf6049888beae"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"2ba6726f047e3cb4c07099505450fa11c486c071":["70425c0eec3ca096a4265143bd0ea238b9fc66cc"],"286db2cd7d8d9e3b02a5b51a58c2b18ce404f9aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"70425c0eec3ca096a4265143bd0ea238b9fc66cc":["963b0a9b072593721af39e1d9b815fba17e88e7f"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["abb23fcc2461782ab204e61213240feb77d355aa"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d3a46663789411cdf016145a96a40cf861798ae3"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"d3a46663789411cdf016145a96a40cf861798ae3":["963b0a9b072593721af39e1d9b815fba17e88e7f"],"abb23fcc2461782ab204e61213240feb77d355aa":["7e8d6fe6065f656ebce13f20c1cbf6049888beae"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bafca15d8e408346a67f4282ad1143b88023893b":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"f41a1db2f1c9a613007a08dd9ab2bfb1c19cfef4":["bafca15d8e408346a67f4282ad1143b88023893b"],"963b0a9b072593721af39e1d9b815fba17e88e7f":["70425c0eec3ca096a4265143bd0ea238b9fc66cc"],"7e8d6fe6065f656ebce13f20c1cbf6049888beae":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","286db2cd7d8d9e3b02a5b51a58c2b18ce404f9aa"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"2ba6726f047e3cb4c07099505450fa11c486c071":["f41a1db2f1c9a613007a08dd9ab2bfb1c19cfef4"],"286db2cd7d8d9e3b02a5b51a58c2b18ce404f9aa":["6613659748fe4411a7dcf85266e55db1f95f7315","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"70425c0eec3ca096a4265143bd0ea238b9fc66cc":["2ba6726f047e3cb4c07099505450fa11c486c071"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}