{"path":"lucene/core/src/java/org/apache/lucene/index/Term#toString(BytesRef).mjava","commits":[{"id":"a22ad352a73aa6ab982b6377e1714950edaf62f0","date":1366051636,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Term#toString(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns human-readable form of the term text. If the term is not unicode,\n   * the raw bytes will be printed instead. */\n  public static final String toString(BytesRef termText) {\n    // the term might not be text, but usually is. so we make a best effort\n    CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    try {\n      return decoder.decode(ByteBuffer.wrap(termText.bytes, termText.offset, termText.length)).toString();\n    } catch (CharacterCodingException e) {\n      return termText.toString();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Term#toString(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Term#toString(BytesRef).mjava","sourceNew":"  /** Returns human-readable form of the term text. If the term is not unicode,\n   * the raw bytes will be printed instead. */\n  public static final String toString(BytesRef termText) {\n    // the term might not be text, but usually is. so we make a best effort\n    CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    try {\n      return decoder.decode(ByteBuffer.wrap(termText.bytes, termText.offset, termText.length)).toString();\n    } catch (CharacterCodingException e) {\n      return termText.toString();\n    }\n  }\n\n","sourceOld":"  /** Returns human-readable form of the term text. If the term is not unicode,\n   * the raw bytes will be printed instead. */\n  public static final String toString(BytesRef termText) {\n    // the term might not be text, but usually is. so we make a best effort\n    CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    try {\n      return decoder.decode(ByteBuffer.wrap(termText.bytes, termText.offset, termText.length)).toString();\n    } catch (CharacterCodingException e) {\n      return termText.toString();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Term#toString(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Term#toString(BytesRef).mjava","sourceNew":"  /** Returns human-readable form of the term text. If the term is not unicode,\n   * the raw bytes will be printed instead. */\n  public static final String toString(BytesRef termText) {\n    // the term might not be text, but usually is. so we make a best effort\n    CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    try {\n      return decoder.decode(ByteBuffer.wrap(termText.bytes, termText.offset, termText.length)).toString();\n    } catch (CharacterCodingException e) {\n      return termText.toString();\n    }\n  }\n\n","sourceOld":"  /** Returns human-readable form of the term text. If the term is not unicode,\n   * the raw bytes will be printed instead. */\n  public static final String toString(BytesRef termText) {\n    // the term might not be text, but usually is. so we make a best effort\n    CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n    try {\n      return decoder.decode(ByteBuffer.wrap(termText.bytes, termText.offset, termText.length)).toString();\n    } catch (CharacterCodingException e) {\n      return termText.toString();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a22ad352a73aa6ab982b6377e1714950edaf62f0","7d89d7e4e5101347833eea558851bf4209218619"],"a22ad352a73aa6ab982b6377e1714950edaf62f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d89d7e4e5101347833eea558851bf4209218619":["a22ad352a73aa6ab982b6377e1714950edaf62f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d89d7e4e5101347833eea558851bf4209218619"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"a22ad352a73aa6ab982b6377e1714950edaf62f0":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a22ad352a73aa6ab982b6377e1714950edaf62f0"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}