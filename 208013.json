{"path":"lucene/facet/src/java/org/apache/lucene/util/collections/LRUHashMap#LRUHashMap(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/collections/LRUHashMap#LRUHashMap(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/util/collections/LRUHashMap#LRUHashMap(int).mjava","sourceNew":"  /**\n   * Create a new hash map with a bounded size and with least recently\n   * used entries removed.\n   * @param maxSize\n   *     the maximum size (in number of entries) to which the map can grow\n   *     before the least recently used entries start being removed.<BR>\n   *      Setting maxSize to a very large value, like\n   *      {@link Integer#MAX_VALUE} is allowed, but is less efficient than\n   *      using {@link java.util.HashMap} because our class needs\n   *      to keep track of the use order (via an additional doubly-linked\n   *      list) which is not used when the map's size is always below the\n   *      maximum size. \n   */\n  public LRUHashMap(int maxSize) {\n    super(16, 0.75f, true);\n    this.maxSize = maxSize;\n  }\n\n","sourceOld":"  /**\n   * Create a new hash map with a bounded size and with least recently\n   * used entries removed.\n   * @param maxSize\n   *     the maximum size (in number of entries) to which the map can grow\n   *     before the least recently used entries start being removed.<BR>\n   *      Setting maxSize to a very large value, like\n   *      {@link Integer#MAX_VALUE} is allowed, but is less efficient than\n   *      using {@link java.util.HashMap} because our class needs\n   *      to keep track of the use order (via an additional doubly-linked\n   *      list) which is not used when the map's size is always below the\n   *      maximum size. \n   */\n  public LRUHashMap(int maxSize) {\n    super(16, 0.75f, true);\n    this.maxSize = maxSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/collections/LRUHashMap#LRUHashMap(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/collections/LRUHashMap#LRUHashMap(int).mjava","sourceNew":"  /**\n   * Create a new hash map with a bounded size and with least recently\n   * used entries removed.\n   * @param maxSize\n   *     the maximum size (in number of entries) to which the map can grow\n   *     before the least recently used entries start being removed.<BR>\n   *      Setting maxSize to a very large value, like\n   *      {@link Integer#MAX_VALUE} is allowed, but is less efficient than\n   *      using {@link java.util.HashMap} because our class needs\n   *      to keep track of the use order (via an additional doubly-linked\n   *      list) which is not used when the map's size is always below the\n   *      maximum size. \n   */\n  public LRUHashMap(int maxSize) {\n    super(16, 0.75f, true);\n    this.maxSize = maxSize;\n  }\n\n","sourceOld":"  /**\n   * Create a new hash map with a bounded size and with least recently\n   * used entries removed.\n   * @param maxSize\n   *     the maximum size (in number of entries) to which the map can grow\n   *     before the least recently used entries start being removed.<BR>\n   *      Setting maxSize to a very large value, like\n   *      {@link Integer#MAX_VALUE} is allowed, but is less efficient than\n   *      using {@link java.util.HashMap} because our class needs\n   *      to keep track of the use order (via an additional doubly-linked\n   *      list) which is not used when the map's size is always below the\n   *      maximum size. \n   */\n  public LRUHashMap(int maxSize) {\n    super(16, 0.75f, true);\n    this.maxSize = maxSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}