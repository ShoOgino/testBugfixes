{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false; \n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n    }\n    if ( ! inputWindow.isEmpty()) {\n      restoreState(inputWindow.getFirst());\n      if (1 == gramSize.getValue()) {\n        posIncrAtt.setPositionIncrement(1);\n        gramSize.advance();\n        tokenAvailable = true;\n      } else if (inputWindow.size() >= gramSize.getValue()) {\n        getNextShingle();\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false; \n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n    }\n    if ( ! inputWindow.isEmpty()) {\n      restoreState(inputWindow.getFirst());\n      if (1 == gramSize.getValue()) {\n        posIncrAtt.setPositionIncrement(1);\n        gramSize.advance();\n        tokenAvailable = true;\n      } else if (inputWindow.size() >= gramSize.getValue()) {\n        getNextShingle();\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f79c103683b18eae3b9f62a8c61e675d8984b092","date":1272893294,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false; \n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n    }\n    if ( ! inputWindow.isEmpty()) {\n      restoreState(inputWindow.getFirst());\n      if (1 == gramSize.getValue()) {\n        posIncrAtt.setPositionIncrement(1);\n        gramSize.advance();\n        tokenAvailable = true;\n      } else if (inputWindow.size() >= gramSize.getValue()) {\n        getNextShingle();\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false;\n    int builtGramSize = 0;\n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n      gramBuilder.setLength(0);\n    } else {\n      builtGramSize = gramSize.getPreviousValue();\n    }\n    if (inputWindow.size() >= gramSize.getValue()) {\n      boolean isAllFiller = true;\n      InputWindowToken nextToken = null;\n      Iterator<InputWindowToken> iter = inputWindow.iterator();\n      for (int gramNum = 1 ;\n           iter.hasNext() && builtGramSize < gramSize.getValue() ;\n           ++gramNum) {\n        nextToken = iter.next();\n        if (builtGramSize < gramNum) {\n          if (builtGramSize > 0) {\n            gramBuilder.append(tokenSeparator);\n          }\n          gramBuilder.append(nextToken.termAtt.buffer(), 0, \n                             nextToken.termAtt.length());\n          ++builtGramSize;\n        }\n        if (isAllFiller && nextToken.isFiller) {\n          if (gramNum == gramSize.getValue()) {\n            gramSize.advance();\n          }\n        } else { \n          isAllFiller = false;\n        }\n      }\n      if ( ! isAllFiller && builtGramSize == gramSize.getValue()) {\n        inputWindow.getFirst().attSource.copyTo(this);\n        posIncrAtt.setPositionIncrement(isOutputHere ? 0 : 1);\n        termAtt.setEmpty().append(gramBuilder);\n        if (gramSize.getValue() > 1) {\n          typeAtt.setType(tokenType);\n        }\n        offsetAtt.setOffset(offsetAtt.startOffset(), nextToken.offsetAtt.endOffset());\n        isOutputHere = true;\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["f79c103683b18eae3b9f62a8c61e675d8984b092"],"f79c103683b18eae3b9f62a8c61e675d8984b092":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f79c103683b18eae3b9f62a8c61e675d8984b092":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f79c103683b18eae3b9f62a8c61e675d8984b092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}