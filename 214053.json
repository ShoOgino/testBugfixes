{"path":"src/test/org/apache/solr/update/AutoCommitTest#testMaxPending().mjava","commits":[{"id":"a16a21ce0db3df902bcea143bbf027dcbdd44437","date":1188947139,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxPending().mjava","pathOld":"/dev/null","sourceNew":"  public void testMaxPending() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    updater.maxPendingDeletes = 14;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    assertEquals(updater.numDocsPending.get(), 14);\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertEquals(updater.numDocsPending.get(), 0);\n    assertEquals(updater.commitCommands.get(), 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"978a45c0ae33fbcb8e6e9a632cacf0e030fd9aae","date":1210454197,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/update/AutoCommitTest#testMaxPending().mjava","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxPending().mjava","sourceNew":"  public void testMaxPending() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    updater.maxPendingDeletes = 14;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    assertEquals(updater.numDocsPending.get(), 14);\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Lucene now manages it's own deletes.\n    // assertEquals(updater.numDocsPending.get(), 0);\n    // assertEquals(updater.commitCommands.get(), 0);\n  }\n\n","sourceOld":"  public void testMaxPending() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    updater.maxPendingDeletes = 14;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    assertEquals(updater.numDocsPending.get(), 14);\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    assertEquals(updater.numDocsPending.get(), 0);\n    assertEquals(updater.commitCommands.get(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"825bac9a3260c4126495f142ce7d3d8d9cf8109f","date":1210883953,"type":4,"author":"Mike Klaas","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/solr/update/AutoCommitTest#testMaxPending().mjava","sourceNew":null,"sourceOld":"  public void testMaxPending() throws Exception {\n    \n    DirectUpdateHandler2 updater = (DirectUpdateHandler2)SolrCore.getSolrCore().getUpdateHandler();\n    updater.maxPendingDeletes = 14;\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    SolrCore core = SolrCore.getSolrCore();\n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    \n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    for( int i=0; i<14; i++ ) {\n      req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A\"+i, \"subject\", \"info\" ), null ) );\n      handler.handleRequest( req, rsp );\n    }\n    assertEquals(updater.numDocsPending.get(), 14);\n\n    req.setContentStreams( toContentStreams(\n        adoc(\"id\", \"A14\", \"subject\", \"info\" ), null ) );\n    handler.handleRequest( req, rsp );\n\n    // Lucene now manages it's own deletes.\n    // assertEquals(updater.numDocsPending.get(), 0);\n    // assertEquals(updater.commitCommands.get(), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a16a21ce0db3df902bcea143bbf027dcbdd44437":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"825bac9a3260c4126495f142ce7d3d8d9cf8109f":["978a45c0ae33fbcb8e6e9a632cacf0e030fd9aae"],"978a45c0ae33fbcb8e6e9a632cacf0e030fd9aae":["a16a21ce0db3df902bcea143bbf027dcbdd44437"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a16a21ce0db3df902bcea143bbf027dcbdd44437":["978a45c0ae33fbcb8e6e9a632cacf0e030fd9aae"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["a16a21ce0db3df902bcea143bbf027dcbdd44437"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"825bac9a3260c4126495f142ce7d3d8d9cf8109f":[],"978a45c0ae33fbcb8e6e9a632cacf0e030fd9aae":["825bac9a3260c4126495f142ce7d3d8d9cf8109f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["825bac9a3260c4126495f142ce7d3d8d9cf8109f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}