{"path":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ParallelReaderClosed#onClose(IndexReader.CacheKey).mjava","commits":[{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ParallelReaderClosed#onClose(IndexReader.CacheKey).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader.ReindexingReader.ParallelReaderClosed#onClose(IndexReader).mjava","sourceNew":"      @Override\n      public void onClose(IndexReader.CacheKey ignored) {\n        try {\n          // TODO: make this sync finer, i.e. just the segment + schemaGen\n          synchronized(ReindexingReader.this) {\n            if (DEBUG) System.out.println(Thread.currentThread().getName() + \": TEST: now close parallel parLeafReader dir=\" + dir + \" segIDGen=\" + segIDGen);\n            parallelReaders.remove(segIDGen);\n            dir.close();\n            closedSegments.add(segIDGen);\n          }\n        } catch (IOException ioe) {\n          System.out.println(\"TEST: hit IOExc closing dir=\" + dir);\n          ioe.printStackTrace(System.out);\n          throw new RuntimeException(ioe);\n        }\n      }\n\n","sourceOld":"      @Override\n      public void onClose(IndexReader ignored) {\n        try {\n          // TODO: make this sync finer, i.e. just the segment + schemaGen\n          synchronized(ReindexingReader.this) {\n            if (DEBUG) System.out.println(Thread.currentThread().getName() + \": TEST: now close parallel parLeafReader dir=\" + dir + \" segIDGen=\" + segIDGen);\n            parallelReaders.remove(segIDGen);\n            dir.close();\n            closedSegments.add(segIDGen);\n          }\n        } catch (IOException ioe) {\n          System.out.println(\"TEST: hit IOExc closing dir=\" + dir);\n          ioe.printStackTrace(System.out);\n          throw new RuntimeException(ioe);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d211216c83f01894810543d1c107160a9ae3650b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d211216c83f01894810543d1c107160a9ae3650b"]},"commit2Childs":{"d211216c83f01894810543d1c107160a9ae3650b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d211216c83f01894810543d1c107160a9ae3650b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}