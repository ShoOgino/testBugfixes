{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfo segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \": publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","sourceOld":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfo segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \": publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfoPerCommit segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \": publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","sourceOld":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfo segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \": publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129c6e8ac0c0d9a110ba29e4b5f1889374f30076","date":1337725510,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    assert newSegment.segmentInfo != null;\n    final SegmentInfoPerCommit segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \": publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","sourceOld":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfoPerCommit segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \": publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    assert newSegment.segmentInfo != null;\n    final SegmentInfoPerCommit segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \": publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","sourceOld":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    final SegmentInfo segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \": publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f24f21e70a092329fc6f920115592dc9529d379","date":1349391034,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    assert newSegment.segmentInfo != null;\n    //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n    final SegmentInfoPerCommit segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \": publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","sourceOld":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    assert newSegment.segmentInfo != null;\n    final SegmentInfoPerCommit segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \": publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9773480aa9e800d0a232ab6ccac265e874b0c51","date":1349461188,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    assert newSegment.segmentInfo != null;\n    //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n    final SegmentInfoPerCommit segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","sourceOld":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    assert newSegment.segmentInfo != null;\n    //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n    final SegmentInfoPerCommit segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", Thread.currentThread().getName() + \": publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6bb01d819ee2a06924d25bb5683fe4dcf8cf1a7","date":1349855720,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    assert newSegment.segmentInfo != null;\n    final FrozenBufferedDeletes segmentDeletes = newSegment.segmentDeletes;\n    //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"publishFlushedSegment seg-private deletes=\" + segmentDeletes);  \n    }\n    \n    if (segmentDeletes != null && infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + segmentDeletes);\n    }\n    // now publish!\n    indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentDeletes, globalPacket);\n  }\n\n","sourceOld":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    assert newSegment.segmentInfo != null;\n    //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n    final SegmentInfoPerCommit segInfo = indexWriter.prepareFlushedSegment(newSegment);\n    final BufferedDeletes deletes = newSegment.segmentDeletes;\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"publishFlushedSegment seg-private deletes=\" + deletes);  \n    }\n    FrozenBufferedDeletes packet = null;\n    if (deletes != null && deletes.any()) {\n      // Segment private delete\n      packet = new FrozenBufferedDeletes(deletes, true);\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + packet);\n      }\n    }\n\n    // now publish!\n    indexWriter.publishFlushedSegment(segInfo, packet, globalPacket);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":null,"sourceOld":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    assert newSegment.segmentInfo != null;\n    final FrozenBufferedDeletes segmentDeletes = newSegment.segmentDeletes;\n    //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"publishFlushedSegment seg-private deletes=\" + segmentDeletes);  \n    }\n    \n    if (segmentDeletes != null && infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + segmentDeletes);\n    }\n    // now publish!\n    indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentDeletes, globalPacket);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":null,"sourceOld":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    assert newSegment.segmentInfo != null;\n    final FrozenBufferedDeletes segmentDeletes = newSegment.segmentDeletes;\n    //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"publishFlushedSegment seg-private deletes=\" + segmentDeletes);  \n    }\n    \n    if (segmentDeletes != null && infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + segmentDeletes);\n    }\n    // now publish!\n    indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentDeletes, globalPacket);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#publishFlushedSegment(FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":null,"sourceOld":"  /**\n   * Publishes the flushed segment, segment private deletes (if any) and its\n   * associated global delete (if present) to IndexWriter.  The actual\n   * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n   * delete generation is always GlobalPacket_deleteGeneration + 1\n   */\n  private void publishFlushedSegment(FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n      throws IOException {\n    assert newSegment != null;\n    assert newSegment.segmentInfo != null;\n    final FrozenBufferedDeletes segmentDeletes = newSegment.segmentDeletes;\n    //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"publishFlushedSegment seg-private deletes=\" + segmentDeletes);  \n    }\n    \n    if (segmentDeletes != null && infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + segmentDeletes);\n    }\n    // now publish!\n    indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentDeletes, globalPacket);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9773480aa9e800d0a232ab6ccac265e874b0c51":["5f24f21e70a092329fc6f920115592dc9529d379"],"7af110b00ea8df9429309d83e38e0533d82e144f":["c6bb01d819ee2a06924d25bb5683fe4dcf8cf1a7"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["c6bb01d819ee2a06924d25bb5683fe4dcf8cf1a7","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["c6bb01d819ee2a06924d25bb5683fe4dcf8cf1a7","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c6bb01d819ee2a06924d25bb5683fe4dcf8cf1a7":["d9773480aa9e800d0a232ab6ccac265e874b0c51"],"5f24f21e70a092329fc6f920115592dc9529d379":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7af110b00ea8df9429309d83e38e0533d82e144f"]},"commit2Childs":{"d9773480aa9e800d0a232ab6ccac265e874b0c51":["c6bb01d819ee2a06924d25bb5683fe4dcf8cf1a7"],"7af110b00ea8df9429309d83e38e0533d82e144f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["5f24f21e70a092329fc6f920115592dc9529d379"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c6bb01d819ee2a06924d25bb5683fe4dcf8cf1a7":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"5f24f21e70a092329fc6f920115592dc9529d379":["d9773480aa9e800d0a232ab6ccac265e874b0c51"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}