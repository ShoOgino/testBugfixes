{"path":"lucene/src/test-framework/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#add(CharsRef).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#add(CharsRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add another character sequence to this automaton. The sequence must be\n   * lexicographically larger or equal compared to any previous sequences added\n   * to this automaton (the input must be sorted).\n   */\n  public void add(CharsRef current) {\n    assert register != null : \"Automaton already built.\";\n    assert previous == null\n        || comparator.compare(previous, current) <= 0 : \"Input must be sorted: \"\n        + previous + \" >= \" + current;\n    assert setPrevious(current);\n    \n    // Descend in the automaton (find matching prefix).\n    int pos = 0, max = current.length();\n    State next, state = root;\n    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {\n      state = next;\n      // todo, optimize me\n      pos += Character.charCount(Character.codePointAt(current, pos));\n    }\n    \n    if (state.hasChildren()) replaceOrRegister(state);\n    \n    addSuffix(state, current, pos);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#add(CharsRef).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder#add(CharsRef).mjava","sourceNew":"  /**\n   * Add another character sequence to this automaton. The sequence must be\n   * lexicographically larger or equal compared to any previous sequences added\n   * to this automaton (the input must be sorted).\n   */\n  public void add(CharsRef current) {\n    assert register != null : \"Automaton already built.\";\n    assert previous == null\n        || comparator.compare(previous, current) <= 0 : \"Input must be sorted: \"\n        + previous + \" >= \" + current;\n    assert setPrevious(current);\n    \n    // Descend in the automaton (find matching prefix).\n    int pos = 0, max = current.length();\n    State next, state = root;\n    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {\n      state = next;\n      // todo, optimize me\n      pos += Character.charCount(Character.codePointAt(current, pos));\n    }\n    \n    if (state.hasChildren()) replaceOrRegister(state);\n    \n    addSuffix(state, current, pos);\n  }\n\n","sourceOld":"  /**\n   * Add another character sequence to this automaton. The sequence must be\n   * lexicographically larger or equal compared to any previous sequences added\n   * to this automaton (the input must be sorted).\n   */\n  public void add(CharsRef current) {\n    assert register != null : \"Automaton already built.\";\n    assert previous == null\n        || comparator.compare(previous, current) <= 0 : \"Input must be sorted: \"\n        + previous + \" >= \" + current;\n    assert setPrevious(current);\n    \n    // Descend in the automaton (find matching prefix).\n    int pos = 0, max = current.length();\n    State next, state = root;\n    while (pos < max && (next = state.lastChild(Character.codePointAt(current, pos))) != null) {\n      state = next;\n      // todo, optimize me\n      pos += Character.charCount(Character.codePointAt(current, pos));\n    }\n    \n    if (state.hasChildren()) replaceOrRegister(state);\n    \n    addSuffix(state, current, pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b91922b55d15444d554721b352861d028eb8278":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}