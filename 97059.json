{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader,String).mjava","commits":[{"id":"a43b8655231010bd8d9a1bea43acc6001df4b0dd","date":1327331998,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader,String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,String).mjava","sourceNew":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            reader (e.g. charfilter) of the original text. can be null.\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStreamComponents createComponents(String fieldName, Reader reader, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    if (pattern == NON_WORD_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(reader, text, true, toLowerCase, stopWords));\n    } else if (pattern == WHITESPACE_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(reader, text, false, toLowerCase, stopWords));\n    }\n\n    Tokenizer tokenizer = new PatternTokenizer(reader, text, pattern, toLowerCase);\n    TokenStream result = (stopWords != null) ? new StopFilter(matchVersion, tokenizer, stopWords) : tokenizer;\n    return new TokenStreamComponents(tokenizer, result);\n  }\n\n","sourceOld":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStreamComponents createComponents(String fieldName, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    if (pattern == NON_WORD_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(text, true, toLowerCase, stopWords));\n    } else if (pattern == WHITESPACE_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(text, false, toLowerCase, stopWords));\n    }\n\n    Tokenizer tokenizer = new PatternTokenizer(text, pattern, toLowerCase);\n    TokenStream result = (stopWords != null) ? new StopFilter(matchVersion, tokenizer, stopWords) : tokenizer;\n    return new TokenStreamComponents(tokenizer, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader,String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,String).mjava","sourceNew":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            reader (e.g. charfilter) of the original text. can be null.\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStreamComponents createComponents(String fieldName, Reader reader, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    if (pattern == NON_WORD_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(reader, text, true, toLowerCase, stopWords));\n    } else if (pattern == WHITESPACE_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(reader, text, false, toLowerCase, stopWords));\n    }\n\n    Tokenizer tokenizer = new PatternTokenizer(reader, text, pattern, toLowerCase);\n    TokenStream result = (stopWords != null) ? new StopFilter(matchVersion, tokenizer, stopWords) : tokenizer;\n    return new TokenStreamComponents(tokenizer, result);\n  }\n\n","sourceOld":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStreamComponents createComponents(String fieldName, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    if (pattern == NON_WORD_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(text, true, toLowerCase, stopWords));\n    } else if (pattern == WHITESPACE_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(text, false, toLowerCase, stopWords));\n    }\n\n    Tokenizer tokenizer = new PatternTokenizer(text, pattern, toLowerCase);\n    TokenStream result = (stopWords != null) ? new StopFilter(matchVersion, tokenizer, stopWords) : tokenizer;\n    return new TokenStreamComponents(tokenizer, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            reader (e.g. charfilter) of the original text. can be null.\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStreamComponents createComponents(String fieldName, Reader reader, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    if (pattern == NON_WORD_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(reader, text, true, toLowerCase, stopWords));\n    } else if (pattern == WHITESPACE_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(reader, text, false, toLowerCase, stopWords));\n    }\n\n    Tokenizer tokenizer = new PatternTokenizer(reader, text, pattern, toLowerCase);\n    TokenStream result = (stopWords != null) ? new StopFilter(matchVersion, tokenizer, stopWords) : tokenizer;\n    return new TokenStreamComponents(tokenizer, result);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader,String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer#createComponents(String,Reader,String).mjava","sourceNew":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            reader (e.g. charfilter) of the original text. can be null.\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStreamComponents createComponents(String fieldName, Reader reader, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    if (pattern == NON_WORD_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(reader, text, true, toLowerCase, stopWords));\n    } else if (pattern == WHITESPACE_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(reader, text, false, toLowerCase, stopWords));\n    }\n\n    Tokenizer tokenizer = new PatternTokenizer(reader, text, pattern, toLowerCase);\n    TokenStream result = (stopWords != null) ? new StopFilter(matchVersion, tokenizer, stopWords) : tokenizer;\n    return new TokenStreamComponents(tokenizer, result);\n  }\n\n","sourceOld":"  /**\n   * Creates a token stream that tokenizes the given string into token terms\n   * (aka words).\n   * \n   * @param fieldName\n   *            the name of the field to tokenize (currently ignored).\n   * @param reader\n   *            reader (e.g. charfilter) of the original text. can be null.\n   * @param text\n   *            the string to tokenize\n   * @return a new token stream\n   */\n  public TokenStreamComponents createComponents(String fieldName, Reader reader, String text) {\n    // Ideally the Analyzer superclass should have a method with the same signature, \n    // with a default impl that simply delegates to the StringReader flavour. \n    if (text == null) \n      throw new IllegalArgumentException(\"text must not be null\");\n    \n    if (pattern == NON_WORD_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(reader, text, true, toLowerCase, stopWords));\n    } else if (pattern == WHITESPACE_PATTERN) { // fast path\n      return new TokenStreamComponents(new FastStringTokenizer(reader, text, false, toLowerCase, stopWords));\n    }\n\n    Tokenizer tokenizer = new PatternTokenizer(reader, text, pattern, toLowerCase);\n    TokenStream result = (stopWords != null) ? new StopFilter(matchVersion, tokenizer, stopWords) : tokenizer;\n    return new TokenStreamComponents(tokenizer, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"a43b8655231010bd8d9a1bea43acc6001df4b0dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"a43b8655231010bd8d9a1bea43acc6001df4b0dd":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","b89678825b68eccaf09e6ab71675fc0b0af1e099","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}