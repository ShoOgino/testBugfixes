{"path":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","sourceNew":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n    }\n\n","sourceOld":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0606ecc8bf23ad8dcc0954ba5ec9ef5ecdc3b844","date":1344271018,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","sourceNew":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n        searcher.getIndexReader().close();\n    }\n\n","sourceOld":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","sourceNew":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n        searcher.getIndexReader().close();\n    }\n\n","sourceOld":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","sourceNew":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n        searcher.getIndexReader().close();\n    }\n\n","sourceOld":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","sourceNew":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n        searcher.getIndexReader().close();\n    }\n\n","sourceOld":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n        searcher.getIndexReader().close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#performTest(int).mjava","sourceNew":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n        searcher.getIndexReader().close();\n    }\n\n","sourceOld":"    private void performTest(int numHits) throws IOException {\n        createIndex(numHits);\n        this.seeksCounter = 0;\n        ScoreDoc[] hits = search();\n        // verify that the right number of docs was found\n        assertEquals(numHits, hits.length);\n        \n        // check if the number of calls of seek() does not exceed the number of hits\n        assertTrue(this.seeksCounter > 0);\n        assertTrue(\"seeksCounter=\" + this.seeksCounter + \" numHits=\" + numHits, this.seeksCounter <= numHits + 1);\n        searcher.getIndexReader().close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0606ecc8bf23ad8dcc0954ba5ec9ef5ecdc3b844"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0606ecc8bf23ad8dcc0954ba5ec9ef5ecdc3b844":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["0606ecc8bf23ad8dcc0954ba5ec9ef5ecdc3b844"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0606ecc8bf23ad8dcc0954ba5ec9ef5ecdc3b844"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["0606ecc8bf23ad8dcc0954ba5ec9ef5ecdc3b844"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7869f64c874ebf7f317d22c00baf2b6857797a6","0606ecc8bf23ad8dcc0954ba5ec9ef5ecdc3b844","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0606ecc8bf23ad8dcc0954ba5ec9ef5ecdc3b844":["c7869f64c874ebf7f317d22c00baf2b6857797a6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","19275ba31e621f6da1b83bf13af75233876fd3d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}