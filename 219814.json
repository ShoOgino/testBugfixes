{"path":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testAllLatEqual().mjava","commits":[{"id":"3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a","date":1445465230,"type":0,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testAllLatEqual().mjava","pathOld":"/dev/null","sourceNew":"  @Nightly\n  public void testAllLatEqual() throws Exception {\n    int numPoints = atLeast(10000);\n    // TODO: GeoUtils are potentially slow if we use small=false with heavy testing\n    // boolean small = random().nextBoolean();\n    boolean small = true;\n    double lat = randomLat(small);\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    for(int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 14 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        // Fully identical point:\n        lons[docID] = lons[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lat + \" lon=\" + lons[docID] + \" (same lat/lon as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        lons[docID] = randomLon(small);\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lat + \" lon=\" + lons[docID]);\n        }\n      }\n      lats[docID] = lat;\n    }\n\n    verify(small, lats, lons);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testAllLatEqual().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testAllLatEqual().mjava","sourceNew":"  public void testAllLatEqual() throws Exception {\n\n    // For GeoPointQuery, only run this test nightly:\n    assumeTrue(\"GeoPoint*Query is too slow otherwise\", TEST_NIGHTLY || forceSmall() == false);\n\n    int numPoints = atLeast(10000);\n    boolean small = forceSmall() || random().nextBoolean();\n    double lat = randomLat(small);\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    for(int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 14 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        // Fully identical point:\n        lons[docID] = lons[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lat + \" lon=\" + lons[docID] + \" (same lat/lon as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        lons[docID] = randomLon(small);\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lat + \" lon=\" + lons[docID]);\n        }\n      }\n      lats[docID] = lat;\n    }\n\n    verify(small, lats, lons);\n  }\n\n","sourceOld":"  @Nightly\n  public void testAllLatEqual() throws Exception {\n    int numPoints = atLeast(10000);\n    // TODO: GeoUtils are potentially slow if we use small=false with heavy testing\n    // boolean small = random().nextBoolean();\n    boolean small = true;\n    double lat = randomLat(small);\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    for(int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 14 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        // Fully identical point:\n        lons[docID] = lons[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lat + \" lon=\" + lons[docID] + \" (same lat/lon as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        lons[docID] = randomLon(small);\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lat + \" lon=\" + lons[docID]);\n        }\n      }\n      lats[docID] = lat;\n    }\n\n    verify(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testAllLatEqual().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testAllLatEqual().mjava","sourceNew":"  public void testAllLatEqual() throws Exception {\n\n    // For GeoPointQuery, only run this test nightly:\n    assumeTrue(\"GeoPoint*Query is too slow otherwise\", TEST_NIGHTLY || forceSmall() == false);\n\n    int numPoints = atLeast(10000);\n    boolean small = forceSmall() || random().nextBoolean();\n    double lat = randomLat(small);\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    for(int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 14 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        // Fully identical point:\n        lons[docID] = lons[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lat + \" lon=\" + lons[docID] + \" (same lat/lon as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        lons[docID] = randomLon(small);\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lat + \" lon=\" + lons[docID]);\n        }\n      }\n      lats[docID] = lat;\n    }\n\n    verify(small, lats, lons);\n  }\n\n","sourceOld":"  public void testAllLatEqual() throws Exception {\n\n    // For GeoPointQuery, only run this test nightly:\n    assumeTrue(\"GeoPoint*Query is too slow otherwise\", TEST_NIGHTLY || forceSmall() == false);\n\n    int numPoints = atLeast(10000);\n    boolean small = forceSmall() || random().nextBoolean();\n    double lat = randomLat(small);\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    for(int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 14 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        // Fully identical point:\n        lons[docID] = lons[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lat + \" lon=\" + lons[docID] + \" (same lat/lon as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        lons[docID] = randomLon(small);\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lat + \" lon=\" + lons[docID]);\n        }\n      }\n      lats[docID] = lat;\n    }\n\n    verify(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testAllLatEqual().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testAllLatEqual().mjava","sourceNew":"  public void testAllLatEqual() throws Exception {\n\n    // For GeoPointQuery, only run this test nightly:\n    assumeTrue(\"GeoPoint*Query is too slow otherwise\", TEST_NIGHTLY || forceSmall() == false);\n\n    int numPoints = atLeast(10000);\n    boolean small = forceSmall() || random().nextBoolean();\n    double lat = randomLat(small);\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    for(int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 14 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        // Fully identical point:\n        lons[docID] = lons[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lat + \" lon=\" + lons[docID] + \" (same lat/lon as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        lons[docID] = randomLon(small);\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lat + \" lon=\" + lons[docID]);\n        }\n      }\n      lats[docID] = lat;\n    }\n\n    verify(small, lats, lons);\n  }\n\n","sourceOld":"  public void testAllLatEqual() throws Exception {\n\n    // For GeoPointQuery, only run this test nightly:\n    assumeTrue(\"GeoPoint*Query is too slow otherwise\", TEST_NIGHTLY || forceSmall() == false);\n\n    int numPoints = atLeast(10000);\n    boolean small = forceSmall() || random().nextBoolean();\n    double lat = randomLat(small);\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    for(int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x == 14 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        // Fully identical point:\n        lons[docID] = lons[oldDocID];\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lat + \" lon=\" + lons[docID] + \" (same lat/lon as doc=\" + oldDocID + \")\");\n        }\n      } else {\n        lons[docID] = randomLon(small);\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.out.println(\"  doc=\" + docID + \" lat=\" + lat + \" lon=\" + lons[docID]);\n        }\n      }\n      lats[docID] = lat;\n    }\n\n    verify(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["1904709ea0185dc04e3d77ea01c79e909caf2796","937923083e4d137932336fc80f3d78758ff698a6"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a"],"937923083e4d137932336fc80f3d78758ff698a6":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"]},"commit2Childs":{"3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}