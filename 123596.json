{"path":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredBulkScorer(AtomicReaderContext,Weight,boolean,DocIdSet).mjava","commits":[{"id":"a5794e5c995c57444b154b01a9f3c837cd530a77","date":1394190201,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredBulkScorer(AtomicReaderContext,Weight,boolean,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredTopScorer(AtomicReaderContext,Weight,boolean,DocIdSet).mjava","sourceNew":"    /**\n     * Returns a filtered {@link BulkScorer} based on this\n     * strategy.  This is an optional method: the default\n     * implementation just calls {@link #filteredScorer} and\n     * wraps that into a BulkScorer.\n     *\n     * @param context\n     *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered top scorer\n     */\n    public BulkScorer filteredBulkScorer(AtomicReaderContext context,\n        Weight weight, boolean scoreDocsInOrder, DocIdSet docIdSet) throws IOException {\n      Scorer scorer = filteredScorer(context, weight, docIdSet);\n      if (scorer == null) {\n        return null;\n      }\n      // This impl always scores docs in order, so we can\n      // ignore scoreDocsInOrder:\n      return new Weight.DefaultBulkScorer(scorer);\n    }\n\n","sourceOld":"    /**\n     * Returns a filtered {@link TopScorer} based on this\n     * strategy.  This is an optional method: the default\n     * implementation just calls {@link #filteredScorer} and\n     * wraps that into a TopScorer.\n     *\n     * @param context\n     *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered top scorer\n     */\n    public TopScorer filteredTopScorer(AtomicReaderContext context,\n        Weight weight, boolean scoreDocsInOrder, DocIdSet docIdSet) throws IOException {\n      Scorer scorer = filteredScorer(context, weight, docIdSet);\n      if (scorer == null) {\n        return null;\n      }\n      // This impl always scores docs in order, so we can\n      // ignore scoreDocsInOrder:\n      return new Weight.DefaultTopScorer(scorer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredBulkScorer(AtomicReaderContext,Weight,boolean,DocIdSet).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns a filtered {@link BulkScorer} based on this\n     * strategy.  This is an optional method: the default\n     * implementation just calls {@link #filteredScorer} and\n     * wraps that into a BulkScorer.\n     *\n     * @param context\n     *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered top scorer\n     */\n    public BulkScorer filteredBulkScorer(AtomicReaderContext context,\n        Weight weight, boolean scoreDocsInOrder, DocIdSet docIdSet) throws IOException {\n      Scorer scorer = filteredScorer(context, weight, docIdSet);\n      if (scorer == null) {\n        return null;\n      }\n      // This impl always scores docs in order, so we can\n      // ignore scoreDocsInOrder:\n      return new Weight.DefaultBulkScorer(scorer);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredBulkScorer(AtomicReaderContext,Weight,boolean,DocIdSet).mjava","sourceNew":null,"sourceOld":"    /**\n     * Returns a filtered {@link BulkScorer} based on this\n     * strategy.  This is an optional method: the default\n     * implementation just calls {@link #filteredScorer} and\n     * wraps that into a BulkScorer.\n     *\n     * @param context\n     *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered top scorer\n     */\n    public BulkScorer filteredBulkScorer(AtomicReaderContext context,\n        Weight weight, boolean scoreDocsInOrder, DocIdSet docIdSet) throws IOException {\n      Scorer scorer = filteredScorer(context, weight, docIdSet);\n      if (scorer == null) {\n        return null;\n      }\n      // This impl always scores docs in order, so we can\n      // ignore scoreDocsInOrder:\n      return new Weight.DefaultBulkScorer(scorer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5794e5c995c57444b154b01a9f3c837cd530a77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5794e5c995c57444b154b01a9f3c837cd530a77"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5794e5c995c57444b154b01a9f3c837cd530a77","acf00221f44c5f08ccea014f2492b53af15ecd66"],"a5794e5c995c57444b154b01a9f3c837cd530a77":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}