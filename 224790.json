{"path":"src/test/org/apache/lucene/search/TestExtendedFieldCache#test().mjava","commits":[{"id":"8408bef84cc9eadfe3d6bf05cac61d5cb5a71f04","date":1193794105,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestExtendedFieldCache#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws IOException {\n    ExtendedFieldCache cache = new ExtendedFieldCacheImpl();\n    double [] doubles = cache.getDoubles(reader, \"theDouble\");\n    assertTrue(\"doubles Size: \" + doubles.length + \" is not: \" + NUM_DOCS, doubles.length == NUM_DOCS);\n    for (int i = 0; i < doubles.length; i++) {\n      assertTrue(doubles[i] + \" does not equal: \" + (Double.MAX_VALUE - i), doubles[i] == (Double.MAX_VALUE - i));\n\n    }\n    long [] longs = cache.getLongs(reader, \"theLong\");\n    assertTrue(\"longs Size: \" + longs.length + \" is not: \" + NUM_DOCS, longs.length == NUM_DOCS);\n    for (int i = 0; i < longs.length; i++) {\n      assertTrue(longs[i] + \" does not equal: \" + (Long.MAX_VALUE - i), longs[i] == (Long.MAX_VALUE - i));\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65eb076d345a794256daba691a2b366657c807e8","date":1245771732,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestExtendedFieldCache#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws IOException {\n    ExtendedFieldCache cache = new ExtendedFieldCacheImpl();\n    double [] doubles = cache.getDoubles(reader, \"theDouble\");\n    assertTrue(\"doubles Size: \" + doubles.length + \" is not: \" + NUM_DOCS, doubles.length == NUM_DOCS);\n    for (int i = 0; i < doubles.length; i++) {\n      assertTrue(doubles[i] + \" does not equal: \" + (Double.MAX_VALUE - i), doubles[i] == (Double.MAX_VALUE - i));\n\n    }\n    long [] longs = cache.getLongs(reader, \"theLong\");\n    assertTrue(\"longs Size: \" + longs.length + \" is not: \" + NUM_DOCS, longs.length == NUM_DOCS);\n    for (int i = 0; i < longs.length; i++) {\n      assertTrue(longs[i] + \" does not equal: \" + (Long.MAX_VALUE - i), longs[i] == (Long.MAX_VALUE - i));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65eb076d345a794256daba691a2b366657c807e8":["8408bef84cc9eadfe3d6bf05cac61d5cb5a71f04"],"8408bef84cc9eadfe3d6bf05cac61d5cb5a71f04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65eb076d345a794256daba691a2b366657c807e8"]},"commit2Childs":{"65eb076d345a794256daba691a2b366657c807e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8408bef84cc9eadfe3d6bf05cac61d5cb5a71f04":["65eb076d345a794256daba691a2b366657c807e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8408bef84cc9eadfe3d6bf05cac61d5cb5a71f04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}