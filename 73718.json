{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","commits":[{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      String checksum = Long.toString(out.getChecksum());\n      SimpleTextUtil.write(out, CHECKSUM);\n      SimpleTextUtil.write(out, checksum, scratch);\n      SimpleTextUtil.writeNewline(out);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["caf65fa364fcf8ea8ef1032c1247622933af3b04"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      String checksum = Long.toString(out.getChecksum());\n      SimpleTextUtil.write(out, CHECKSUM);\n      SimpleTextUtil.write(out, checksum, scratch);\n      SimpleTextUtil.writeNewline(out);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caf65fa364fcf8ea8ef1032c1247622933af3b04","date":1397057745,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      String checksum = Long.toString(out.getChecksum());\n      SimpleTextUtil.write(out, CHECKSUM);\n      SimpleTextUtil.write(out, checksum, scratch);\n      SimpleTextUtil.writeNewline(out);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":["3cc749c053615f5871f3b95715fe292f34e70a53"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb","date":1411653326,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["8435160e9702b19398118ddf76b61c846612b6a4","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["8435160e9702b19398118ddf76b61c846612b6a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"8435160e9702b19398118ddf76b61c846612b6a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["caf65fa364fcf8ea8ef1032c1247622933af3b04"],"caf65fa364fcf8ea8ef1032c1247622933af3b04":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","caf65fa364fcf8ea8ef1032c1247622933af3b04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8435160e9702b19398118ddf76b61c846612b6a4"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8435160e9702b19398118ddf76b61c846612b6a4":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["5f6bd27530a2846413fe2d00030493c0e2d3a072","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"caf65fa364fcf8ea8ef1032c1247622933af3b04":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}