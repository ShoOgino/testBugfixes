{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader)\n      throws IOException {\n    /* map of SavedStreams for each field */\n    Map<String,SavedStreams> streamMap = (Map<String,SavedStreams>) getPreviousTokenStream();\n    if (streamMap == null) {\n      streamMap = new HashMap<String, SavedStreams>();\n      setPreviousTokenStream(streamMap);\n    }\n\n    SavedStreams streams = streamMap.get(fieldName);\n    if (streams == null) {\n      /* an entry for this field does not exist, create one */\n      streams = new SavedStreams();\n      streamMap.put(fieldName, streams);\n      streams.wrapped = delegate.reusableTokenStream(fieldName, reader);\n\n      /* if there are any stopwords for the field, save the stopfilter */\n      HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n      if (stopWords != null)\n        streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n      else\n        streams.withStopFilter = streams.wrapped;\n\n    } else {\n      /*\n       * an entry for this field exists, verify the wrapped stream has not\n       * changed. if it has not, reuse it, otherwise wrap the new stream.\n       */\n      TokenStream result = delegate.reusableTokenStream(fieldName, reader);\n      if (result == streams.wrapped) {\n        /* the wrapped analyzer reused the stream */\n        streams.withStopFilter.reset();\n      } else {\n        /*\n         * the wrapped analyzer did not. if there are any stopwords for the\n         * field, create a new StopFilter around the new stream\n         */\n        streams.wrapped = result;\n        HashSet<String> stopWords = stopWordsPerField.get(fieldName);\n        if (stopWords != null)\n          streams.withStopFilter = new StopFilter(matchVersion, streams.wrapped, stopWords);\n        else\n          streams.withStopFilter = streams.wrapped;\n      }\n    }\n\n    return streams.withStopFilter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}