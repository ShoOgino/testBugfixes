{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#getDateFormatEvaluator().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#getDateFormatEvaluator().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getDateFormatEvaluator().mjava","sourceNew":"  /**\n   * <p/> Returns an <code>Evaluator</code> instance capable of formatting values using a given date format. </p> <p/>\n   * The value to be formatted can be a entity.field or a date expression parsed with <code>DateMathParser</code> class.\n   * If the value is in a String, then it is assumed to be a datemath expression, otherwise it resolved using a\n   * <code>VariableResolver</code> instance </p>\n   *\n   * @return an Evaluator instance capable of formatting values to a given date format\n   *\n   * @see DateMathParser\n   */\n  public static Evaluator getDateFormatEvaluator() {\n    return new Evaluator() {\n      @Override\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 2) {\n          throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two parameters \");\n        }\n        Object o = l.get(0);\n        Object format = l.get(1);\n        if (format instanceof VariableWrapper) {\n          VariableWrapper wrapper = (VariableWrapper) format;\n          o = wrapper.resolve();\n          if (o == null)  {\n            format = wrapper.varName;\n            LOG.warn(\"Deprecated syntax used. The syntax of formatDate has been changed to formatDate(<var>, '<date_format_string>'). \" +\n                    \"The old syntax will stop working in Solr 1.5\");\n          } else  {\n            format = o.toString();\n          }\n        }\n        String dateFmt = format.toString();\n        SimpleDateFormat fmt = new SimpleDateFormat(dateFmt);\n        Date date = null;\n        if (o instanceof VariableWrapper) {\n          VariableWrapper variableWrapper = (VariableWrapper) o;\n          Object variableval = variableWrapper.resolve();\n          if (variableval instanceof Date) {\n            date = (Date) variableval;\n          } else {\n            String s = variableval.toString();\n            try {\n              date = DataImporter.DATE_TIME_FORMAT.get().parse(s);\n            } catch (ParseException exp) {\n              wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n            }\n          }\n        } else {\n          String datemathfmt = o.toString();\n          datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n          try {\n            date = dateMathParser.parseMath(datemathfmt);\n          } catch (ParseException e) {\n            wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n          }\n        }\n        return fmt.format(date);\n      }\n\n    };\n  }\n\n","sourceOld":"  /**\n   * <p/> Returns an <code>Evaluator</code> instance capable of formatting values using a given date format. </p> <p/>\n   * The value to be formatted can be a entity.field or a date expression parsed with <code>DateMathParser</code> class.\n   * If the value is in a String, then it is assumed to be a datemath expression, otherwise it resolved using a\n   * <code>VariableResolver</code> instance </p>\n   *\n   * @return an Evaluator instance capable of formatting values to a given date format\n   *\n   * @see DateMathParser\n   */\n  public static Evaluator getDateFormatEvaluator() {\n    return new Evaluator() {\n      @Override\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 2) {\n          throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two parameters \");\n        }\n        Object o = l.get(0);\n        Object format = l.get(1);\n        if (format instanceof VariableWrapper) {\n          VariableWrapper wrapper = (VariableWrapper) format;\n          o = wrapper.resolve();\n          if (o == null)  {\n            format = wrapper.varName;\n            LOG.warn(\"Deprecated syntax used. The syntax of formatDate has been changed to formatDate(<var>, '<date_format_string>'). \" +\n                    \"The old syntax will stop working in Solr 1.5\");\n          } else  {\n            format = o.toString();\n          }\n        }\n        String dateFmt = format.toString();\n        SimpleDateFormat fmt = new SimpleDateFormat(dateFmt);\n        Date date = null;\n        if (o instanceof VariableWrapper) {\n          VariableWrapper variableWrapper = (VariableWrapper) o;\n          Object variableval = variableWrapper.resolve();\n          if (variableval instanceof Date) {\n            date = (Date) variableval;\n          } else {\n            String s = variableval.toString();\n            try {\n              date = DataImporter.DATE_TIME_FORMAT.get().parse(s);\n            } catch (ParseException exp) {\n              wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n            }\n          }\n        } else {\n          String datemathfmt = o.toString();\n          datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n          try {\n            date = dateMathParser.parseMath(datemathfmt);\n          } catch (ParseException e) {\n            wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n          }\n        }\n        return fmt.format(date);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#getDateFormatEvaluator().mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getDateFormatEvaluator().mjava","sourceNew":"  /**\n   * <p/> Returns an <code>Evaluator</code> instance capable of formatting values using a given date format. </p> <p/>\n   * The value to be formatted can be a entity.field or a date expression parsed with <code>DateMathParser</code> class.\n   * If the value is in a String, then it is assumed to be a datemath expression, otherwise it resolved using a\n   * <code>VariableResolver</code> instance </p>\n   *\n   * @return an Evaluator instance capable of formatting values to a given date format\n   *\n   * @see DateMathParser\n   */\n  public static Evaluator getDateFormatEvaluator() {\n    return new Evaluator() {\n      @Override\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 2) {\n          throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two parameters \");\n        }\n        Object o = l.get(0);\n        Object format = l.get(1);\n        if (format instanceof VariableWrapper) {\n          VariableWrapper wrapper = (VariableWrapper) format;\n          o = wrapper.resolve();\n          if (o == null)  {\n            format = wrapper.varName;\n            LOG.warn(\"Deprecated syntax used. The syntax of formatDate has been changed to formatDate(<var>, '<date_format_string>'). \" +\n                    \"The old syntax will stop working in Solr 1.5\");\n          } else  {\n            format = o.toString();\n          }\n        }\n        String dateFmt = format.toString();\n        SimpleDateFormat fmt = new SimpleDateFormat(dateFmt);\n        Date date = null;\n        if (o instanceof VariableWrapper) {\n          VariableWrapper variableWrapper = (VariableWrapper) o;\n          Object variableval = variableWrapper.resolve();\n          if (variableval instanceof Date) {\n            date = (Date) variableval;\n          } else {\n            String s = variableval.toString();\n            try {\n              date = DataImporter.DATE_TIME_FORMAT.get().parse(s);\n            } catch (ParseException exp) {\n              wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n            }\n          }\n        } else {\n          String datemathfmt = o.toString();\n          datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n          try {\n            date = dateMathParser.parseMath(datemathfmt);\n          } catch (ParseException e) {\n            wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n          }\n        }\n        return fmt.format(date);\n      }\n\n    };\n  }\n\n","sourceOld":"  /**\n   * <p/> Returns an <code>Evaluator</code> instance capable of formatting values using a given date format. </p> <p/>\n   * The value to be formatted can be a entity.field or a date expression parsed with <code>DateMathParser</code> class.\n   * If the value is in a String, then it is assumed to be a datemath expression, otherwise it resolved using a\n   * <code>VariableResolver</code> instance </p>\n   *\n   * @return an Evaluator instance capable of formatting values to a given date format\n   *\n   * @see DateMathParser\n   */\n  public static Evaluator getDateFormatEvaluator() {\n    return new Evaluator() {\n      @Override\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 2) {\n          throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two parameters \");\n        }\n        Object o = l.get(0);\n        Object format = l.get(1);\n        if (format instanceof VariableWrapper) {\n          VariableWrapper wrapper = (VariableWrapper) format;\n          o = wrapper.resolve();\n          if (o == null)  {\n            format = wrapper.varName;\n            LOG.warn(\"Deprecated syntax used. The syntax of formatDate has been changed to formatDate(<var>, '<date_format_string>'). \" +\n                    \"The old syntax will stop working in Solr 1.5\");\n          } else  {\n            format = o.toString();\n          }\n        }\n        String dateFmt = format.toString();\n        SimpleDateFormat fmt = new SimpleDateFormat(dateFmt);\n        Date date = null;\n        if (o instanceof VariableWrapper) {\n          VariableWrapper variableWrapper = (VariableWrapper) o;\n          Object variableval = variableWrapper.resolve();\n          if (variableval instanceof Date) {\n            date = (Date) variableval;\n          } else {\n            String s = variableval.toString();\n            try {\n              date = DataImporter.DATE_TIME_FORMAT.get().parse(s);\n            } catch (ParseException exp) {\n              wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n            }\n          }\n        } else {\n          String datemathfmt = o.toString();\n          datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n          try {\n            date = dateMathParser.parseMath(datemathfmt);\n          } catch (ParseException e) {\n            wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n          }\n        }\n        return fmt.format(date);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":4,"author":"James Dyer","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#getDateFormatEvaluator().mjava","sourceNew":null,"sourceOld":"  /**\n   * <p/> Returns an <code>Evaluator</code> instance capable of formatting values using a given date format. </p> <p/>\n   * The value to be formatted can be a entity.field or a date expression parsed with <code>DateMathParser</code> class.\n   * If the value is in a String, then it is assumed to be a datemath expression, otherwise it resolved using a\n   * <code>VariableResolver</code> instance </p>\n   *\n   * @return an Evaluator instance capable of formatting values to a given date format\n   *\n   * @see DateMathParser\n   */\n  public static Evaluator getDateFormatEvaluator() {\n    return new Evaluator() {\n      @Override\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 2) {\n          throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two parameters \");\n        }\n        Object o = l.get(0);\n        Object format = l.get(1);\n        if (format instanceof VariableWrapper) {\n          VariableWrapper wrapper = (VariableWrapper) format;\n          o = wrapper.resolve();\n          if (o == null)  {\n            format = wrapper.varName;\n            LOG.warn(\"Deprecated syntax used. The syntax of formatDate has been changed to formatDate(<var>, '<date_format_string>'). \" +\n                    \"The old syntax will stop working in Solr 1.5\");\n          } else  {\n            format = o.toString();\n          }\n        }\n        String dateFmt = format.toString();\n        SimpleDateFormat fmt = new SimpleDateFormat(dateFmt);\n        Date date = null;\n        if (o instanceof VariableWrapper) {\n          VariableWrapper variableWrapper = (VariableWrapper) o;\n          Object variableval = variableWrapper.resolve();\n          if (variableval instanceof Date) {\n            date = (Date) variableval;\n          } else {\n            String s = variableval.toString();\n            try {\n              date = DataImporter.DATE_TIME_FORMAT.get().parse(s);\n            } catch (ParseException exp) {\n              wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n            }\n          }\n        } else {\n          String datemathfmt = o.toString();\n          datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n          try {\n            date = dateMathParser.parseMath(datemathfmt);\n          } catch (ParseException e) {\n            wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n          }\n        }\n        return fmt.format(date);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#getDateFormatEvaluator().mjava","sourceNew":null,"sourceOld":"  /**\n   * <p/> Returns an <code>Evaluator</code> instance capable of formatting values using a given date format. </p> <p/>\n   * The value to be formatted can be a entity.field or a date expression parsed with <code>DateMathParser</code> class.\n   * If the value is in a String, then it is assumed to be a datemath expression, otherwise it resolved using a\n   * <code>VariableResolver</code> instance </p>\n   *\n   * @return an Evaluator instance capable of formatting values to a given date format\n   *\n   * @see DateMathParser\n   */\n  public static Evaluator getDateFormatEvaluator() {\n    return new Evaluator() {\n      @Override\n      public String evaluate(String expression, Context context) {\n        List l = parseParams(expression, context.getVariableResolver());\n        if (l.size() != 2) {\n          throw new DataImportHandlerException(SEVERE, \"'formatDate()' must have two parameters \");\n        }\n        Object o = l.get(0);\n        Object format = l.get(1);\n        if (format instanceof VariableWrapper) {\n          VariableWrapper wrapper = (VariableWrapper) format;\n          o = wrapper.resolve();\n          if (o == null)  {\n            format = wrapper.varName;\n            LOG.warn(\"Deprecated syntax used. The syntax of formatDate has been changed to formatDate(<var>, '<date_format_string>'). \" +\n                    \"The old syntax will stop working in Solr 1.5\");\n          } else  {\n            format = o.toString();\n          }\n        }\n        String dateFmt = format.toString();\n        SimpleDateFormat fmt = new SimpleDateFormat(dateFmt);\n        Date date = null;\n        if (o instanceof VariableWrapper) {\n          VariableWrapper variableWrapper = (VariableWrapper) o;\n          Object variableval = variableWrapper.resolve();\n          if (variableval instanceof Date) {\n            date = (Date) variableval;\n          } else {\n            String s = variableval.toString();\n            try {\n              date = DataImporter.DATE_TIME_FORMAT.get().parse(s);\n            } catch (ParseException exp) {\n              wrapAndThrow(SEVERE, exp, \"Invalid expression for date\");\n            }\n          }\n        } else {\n          String datemathfmt = o.toString();\n          datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n          try {\n            date = dateMathParser.parseMath(datemathfmt);\n          } catch (ParseException e) {\n            wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n          }\n        }\n        return fmt.format(date);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c7b0ae5716b6c2044195a818e9ae58205175659":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","7c7b0ae5716b6c2044195a818e9ae58205175659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c7b0ae5716b6c2044195a818e9ae58205175659"]},"commit2Childs":{"7c7b0ae5716b6c2044195a818e9ae58205175659":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}