{"path":"lucene/src/java/org/apache/lucene/codecs/FixedGapTermsIndexWriter#close().mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/FixedGapTermsIndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#close().mjava","sourceNew":"  public void close() throws IOException {\n    boolean success = false;\n    try {\n      final long dirStart = out.getFilePointer();\n      final int fieldCount = fields.size();\n      \n      int nonNullFieldCount = 0;\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          nonNullFieldCount++;\n        }\n      }\n      \n      out.writeVInt(nonNullFieldCount);\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVInt(field.numIndexTerms);\n          out.writeVLong(field.termsStart);\n          out.writeVLong(field.indexStart);\n          out.writeVLong(field.packedIndexStart);\n          out.writeVLong(field.packedOffsetsStart);\n        }\n      }\n      writeTrailer(dirStart);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public void close() throws IOException {\n    boolean success = false;\n    try {\n      final long dirStart = out.getFilePointer();\n      final int fieldCount = fields.size();\n      \n      int nonNullFieldCount = 0;\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          nonNullFieldCount++;\n        }\n      }\n      \n      out.writeVInt(nonNullFieldCount);\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVInt(field.numIndexTerms);\n          out.writeVLong(field.termsStart);\n          out.writeVLong(field.indexStart);\n          out.writeVLong(field.packedIndexStart);\n          out.writeVLong(field.packedOffsetsStart);\n        }\n      }\n      writeTrailer(dirStart);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/FixedGapTermsIndexWriter#close().mjava","sourceNew":"  public void close() throws IOException {\n    boolean success = false;\n    try {\n      final long dirStart = out.getFilePointer();\n      final int fieldCount = fields.size();\n      \n      int nonNullFieldCount = 0;\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          nonNullFieldCount++;\n        }\n      }\n      \n      out.writeVInt(nonNullFieldCount);\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVInt(field.numIndexTerms);\n          out.writeVLong(field.termsStart);\n          out.writeVLong(field.indexStart);\n          out.writeVLong(field.packedIndexStart);\n          out.writeVLong(field.packedOffsetsStart);\n        }\n      }\n      writeTrailer(dirStart);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public void close() throws IOException {\n    boolean success = false;\n    try {\n      final long dirStart = out.getFilePointer();\n      final int fieldCount = fields.size();\n      \n      int nonNullFieldCount = 0;\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          nonNullFieldCount++;\n        }\n      }\n      \n      out.writeVInt(nonNullFieldCount);\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVInt(field.numIndexTerms);\n          out.writeVLong(field.termsStart);\n          out.writeVLong(field.indexStart);\n          out.writeVLong(field.packedIndexStart);\n          out.writeVLong(field.packedOffsetsStart);\n        }\n      }\n      writeTrailer(dirStart);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}