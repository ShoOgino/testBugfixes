{"path":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","sourceNew":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","sourceNew":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = IndexReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","sourceNew":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","sourceNew":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","sourceNew":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    iw.shutdown();\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","sourceNew":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","sourceOld":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    iw.shutdown();\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"141e140cd2260284f58cb5cf2b17da4027e82094","date":1475848631,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","sourceNew":null,"sourceOld":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testHighlighting().mjava","sourceNew":null,"sourceOld":"  public void testHighlighting() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"doc.stored=true\",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"query.maker=\" + ReutersQueryMaker.class.getName(),\n        \"ResetSystemErase\",\n        \"CreateIndex\",\n        \"{ AddDoc } : 100\",\n        \"ForceMerge(1)\",\n        \"CloseIndex\",\n        \"OpenReader\",\n        \"{ CountingHighlighterTest(size[1],highlight[1],mergeContiguous[true],maxFrags[1],fields[body]) } : 200\",\n        \"CloseReader\",\n    };\n\n    // 2. we test this value later\n    CountingHighlighterTestTask.numHighlightedResults = 0;\n    CountingHighlighterTestTask.numDocsRetrieved = 0;\n    // 3. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n\n    // 4. test specific checks after the benchmark run completed.\n    assertEquals(\"TestSearchTask was supposed to be called!\",92,CountingHighlighterTestTask.numDocsRetrieved);\n    //pretty hard to figure out a priori how many docs are going to have highlighted fragments returned, but we can never have more than the number of docs\n    //we probably should use a different doc/query maker, but...\n    assertTrue(\"TestSearchTask was supposed to be called!\", CountingHighlighterTestTask.numDocsRetrieved >= CountingHighlighterTestTask.numHighlightedResults && CountingHighlighterTestTask.numHighlightedResults > 0);\n\n    assertTrue(\"Index does not exist?...!\", DirectoryReader.indexExists(benchmark.getRunData().getDirectory()));\n    // now we should be able to open the index for write.\n    IndexWriter iw = new IndexWriter(benchmark.getRunData().getDirectory(), new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n    iw.close();\n    IndexReader ir = DirectoryReader.open(benchmark.getRunData().getDirectory());\n    assertEquals(\"100 docs were added to the index, this is what we expect to find!\",100,ir.numDocs());\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"141e140cd2260284f58cb5cf2b17da4027e82094":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d0ef034a4f10871667ae75181537775ddcf8ade4","141e140cd2260284f58cb5cf2b17da4027e82094"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["141e140cd2260284f58cb5cf2b17da4027e82094"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["141e140cd2260284f58cb5cf2b17da4027e82094","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"141e140cd2260284f58cb5cf2b17da4027e82094":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}