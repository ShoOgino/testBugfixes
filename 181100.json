{"path":"lucene/core/src/java/org/apache/lucene/search/TopScorer#score(Collector,int).mjava","commits":[{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScorer#score(Collector,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Scorer#score(Collector,int,int).mjava","sourceNew":"  /**\n   * Expert: Collects matching documents in a range. Hook for optimization.\n   * Note, <code>firstDocID</code> is added to ensure that {@link #nextDoc()}\n   * was called before this method.\n   * \n   * @param collector\n   *          The collector to which all matching documents are passed.\n   * @param max\n   *          Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  public abstract boolean score(Collector collector, int max) throws IOException;\n\n","sourceOld":"  /**\n   * Expert: Collects matching documents in a range. Hook for optimization.\n   * Note, <code>firstDocID</code> is added to ensure that {@link #nextDoc()}\n   * was called before this method.\n   * \n   * @param collector\n   *          The collector to which all matching documents are passed.\n   * @param max\n   *          Do not score documents past this.\n   * @param firstDocID\n   *          The first document ID (ensures {@link #nextDoc()} is called before\n   *          this method.\n   * @return true if more matching documents may remain.\n   */\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    assert docID() == firstDocID;\n    collector.setScorer(this);\n    int doc;\n    for (doc = firstDocID; doc < max; doc = nextDoc()) {\n      collector.collect(doc);\n    }\n    return doc != NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a7a379c47cb10a09ea1ff0b2460819a73c5988","date":1394142503,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScorer#score(Collector,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopScorer#score(Collector,int).mjava","sourceNew":"  /**\n   * Expert: Collects matching documents in a range. Hook for optimization.\n   * Note, <code>firstDocID</code> is added to ensure that {@link #nextDoc()}\n   * was called before this method.\n   * \n   * @param collector\n   *          The collector to which all matching documents are passed.\n   * @param max\n   *          Score up to, but not including, this doc\n   * @return true if more matching documents may remain.\n   */\n  public abstract boolean score(Collector collector, int max) throws IOException;\n\n","sourceOld":"  /**\n   * Expert: Collects matching documents in a range. Hook for optimization.\n   * Note, <code>firstDocID</code> is added to ensure that {@link #nextDoc()}\n   * was called before this method.\n   * \n   * @param collector\n   *          The collector to which all matching documents are passed.\n   * @param max\n   *          Do not score documents past this.\n   * @return true if more matching documents may remain.\n   */\n  public abstract boolean score(Collector collector, int max) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5794e5c995c57444b154b01a9f3c837cd530a77","date":1394190201,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BulkScorer#score(Collector,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopScorer#score(Collector,int).mjava","sourceNew":"  /**\n   * Collects matching documents in a range.\n   * \n   * @param collector The collector to which all matching documents are passed.\n   * @param max Score up to, but not including, this doc\n   * @return true if more matching documents may remain.\n   */\n  public abstract boolean score(Collector collector, int max) throws IOException;\n\n","sourceOld":"  /**\n   * Expert: Collects matching documents in a range. Hook for optimization.\n   * Note, <code>firstDocID</code> is added to ensure that {@link #nextDoc()}\n   * was called before this method.\n   * \n   * @param collector\n   *          The collector to which all matching documents are passed.\n   * @param max\n   *          Score up to, but not including, this doc\n   * @return true if more matching documents may remain.\n   */\n  public abstract boolean score(Collector collector, int max) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f5a7a379c47cb10a09ea1ff0b2460819a73c5988":["2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5794e5c995c57444b154b01a9f3c837cd530a77":["f5a7a379c47cb10a09ea1ff0b2460819a73c5988"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["f5a7a379c47cb10a09ea1ff0b2460819a73c5988"],"f5a7a379c47cb10a09ea1ff0b2460819a73c5988":["a5794e5c995c57444b154b01a9f3c837cd530a77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5794e5c995c57444b154b01a9f3c837cd530a77":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a5794e5c995c57444b154b01a9f3c837cd530a77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}