{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseTaskSequenceRepetition().mjava","commits":[{"id":"975cb787e66d548dba4f63c22c08d692c7235f73","date":1174605228,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseTaskSequenceRepetition().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test the repetiotion parsing for sequential  tasks\n   */\n  public void testParseTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"{ \"+taskStr+\" } : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (Iterator iter = algTasks.iterator(); iter.hasNext();) {\n       PerfTask task = (PerfTask) iter.next();\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertFalse(\"sequence for \"+parsedTasks+\" should be sequential!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4bea909b475e3f9d726f4fee3c27d3c870b9027","date":1239875190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseTaskSequenceRepetition().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseTaskSequenceRepetition().mjava","sourceNew":"  /** Test the repetiotion parsing for sequential  tasks */\n  public void testParseTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"{ \"+taskStr+\" } : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (Iterator iter = algTasks.iterator(); iter.hasNext();) {\n       PerfTask task = (PerfTask) iter.next();\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertFalse(\"sequence for \"+parsedTasks+\" should be sequential!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test the repetiotion parsing for sequential  tasks\n   */\n  public void testParseTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"{ \"+taskStr+\" } : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (Iterator iter = algTasks.iterator(); iter.hasNext();) {\n       PerfTask task = (PerfTask) iter.next();\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertFalse(\"sequence for \"+parsedTasks+\" should be sequential!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7848880b3c06f09f0f3ac50d0854b16efb0b815e","date":1260006234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseTaskSequenceRepetition().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseTaskSequenceRepetition().mjava","sourceNew":"  /** Test the repetiotion parsing for sequential  tasks */\n  public void testParseTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"{ \"+taskStr+\" } : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList<PerfTask> algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (final PerfTask task : algTasks) {\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertFalse(\"sequence for \"+parsedTasks+\" should be sequential!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","sourceOld":"  /** Test the repetiotion parsing for sequential  tasks */\n  public void testParseTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"{ \"+taskStr+\" } : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (Iterator iter = algTasks.iterator(); iter.hasNext();) {\n       PerfTask task = (PerfTask) iter.next();\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertFalse(\"sequence for \"+parsedTasks+\" should be sequential!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseTaskSequenceRepetition().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksParse#testParseTaskSequenceRepetition().mjava","sourceNew":"  /** Test the repetiotion parsing for sequential  tasks */\n  public void testParseTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"{ \"+taskStr+\" } : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList<PerfTask> algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (final PerfTask task : algTasks) {\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertFalse(\"sequence for \"+parsedTasks+\" should be sequential!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","sourceOld":"  /** Test the repetiotion parsing for sequential  tasks */\n  public void testParseTaskSequenceRepetition() throws Exception {\n    String taskStr = \"AddDoc\";\n    String parsedTasks = \"{ \"+taskStr+\" } : 1000\";\n    Benchmark benchmark = new Benchmark(new StringReader(propPart+parsedTasks));\n    Algorithm alg = benchmark.getAlgorithm();\n    ArrayList<PerfTask> algTasks = alg.extractTasks();\n    boolean foundAdd = false;\n    for (final PerfTask task : algTasks) {\n       if (task.toString().indexOf(taskStr)>=0) {\n          foundAdd = true;\n       }\n       if (task instanceof TaskSequence) {\n         assertEquals(\"repetions should be 1000 for \"+parsedTasks, 1000, ((TaskSequence) task).getRepetitions());\n         assertFalse(\"sequence for \"+parsedTasks+\" should be sequential!\", ((TaskSequence) task).isParallel());\n       }\n       assertTrue(\"Task \"+taskStr+\" was not found in \"+alg.toString(),foundAdd);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"975cb787e66d548dba4f63c22c08d692c7235f73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4bea909b475e3f9d726f4fee3c27d3c870b9027":["975cb787e66d548dba4f63c22c08d692c7235f73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["c4bea909b475e3f9d726f4fee3c27d3c870b9027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"]},"commit2Childs":{"975cb787e66d548dba4f63c22c08d692c7235f73":["c4bea909b475e3f9d726f4fee3c27d3c870b9027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["975cb787e66d548dba4f63c22c08d692c7235f73"],"c4bea909b475e3f9d726f4fee3c27d3c870b9027":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}