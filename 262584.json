{"path":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#mortonIsEar(Node).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#mortonIsEar(Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#mortonIsEar(Node).mjava","sourceNew":"  /** Uses morton code for speed to determine whether or a polygon node forms a valid ear w/ adjacent nodes */\n  private static final boolean mortonIsEar(final Node ear) {\n    // triangle bbox (flip the bits so negative encoded values are < positive encoded values)\n    int minTX = StrictMath.min(StrictMath.min(ear.previous.x, ear.x), ear.next.x) ^ 0x80000000;\n    int minTY = StrictMath.min(StrictMath.min(ear.previous.y, ear.y), ear.next.y) ^ 0x80000000;\n    int maxTX = StrictMath.max(StrictMath.max(ear.previous.x, ear.x), ear.next.x) ^ 0x80000000;\n    int maxTY = StrictMath.max(StrictMath.max(ear.previous.y, ear.y), ear.next.y) ^ 0x80000000;\n\n    // z-order range for the current triangle bbox;\n    long minZ = BitUtil.interleave(minTX, minTY);\n    long maxZ = BitUtil.interleave(maxTX, maxTY);\n\n    // now make sure we don't have other points inside the potential ear;\n\n    // look for points inside the triangle in both directions\n    Node p = ear.previousZ;\n    Node n = ear.nextZ;\n    while (p != null && Long.compareUnsigned(p.morton, minZ) >= 0\n        && n != null && Long.compareUnsigned(n.morton, maxZ) <= 0) {\n      if (p.idx != ear.previous.idx && p.idx != ear.next.idx &&\n          pointInEar(p.getX(), p.getY(), ear.previous.getX(), ear.previous.getY(), ear.getX(), ear.getY(), ear.next.getX(), ear.next.getY()) &&\n          area(p.previous.getX(), p.previous.getY(), p.getX(), p.getY(), p.next.getX(), p.next.getY()) >= 0) return false;\n      p = p.previousZ;\n\n      if (n.idx != ear.previous.idx && n.idx != ear.next.idx &&\n          pointInEar(n.getX(), n.getY(), ear.previous.getX(), ear.previous.getY(), ear.getX(), ear.getY(), ear.next.getX(), ear.next.getY()) &&\n          area(n.previous.getX(), n.previous.getY(), n.getX(), n.getY(), n.next.getX(), n.next.getY()) >= 0) return false;\n      n = n.nextZ;\n    }\n\n    // first look for points inside the triangle in decreasing z-order\n    while (p != null && Long.compareUnsigned(p.morton, minZ) >= 0) {\n      if (p.idx != ear.previous.idx && p.idx != ear.next.idx\n            && pointInEar(p.getX(), p.getY(), ear.previous.getX(), ear.previous.getY(), ear.getX(), ear.getY(), ear.next.getX(), ear.next.getY())\n            && area(p.previous.getX(), p.previous.getY(), p.getX(), p.getY(), p.next.getX(), p.next.getY()) >= 0) {\n          return false;\n        }\n      p = p.previousZ;\n    }\n    // then look for points in increasing z-order\n    while (n != null &&\n        Long.compareUnsigned(n.morton, maxZ) <= 0) {\n        if (n.idx != ear.previous.idx && n.idx != ear.next.idx\n            && pointInEar(n.getX(), n.getY(), ear.previous.getX(), ear.previous.getY(), ear.getX(), ear.getY(), ear.next.getX(), ear.next.getY())\n            && area(n.previous.getX(), n.previous.getY(), n.getX(), n.getY(), n.next.getX(), n.next.getY()) >= 0) {\n          return false;\n        }\n      n = n.nextZ;\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Uses morton code for speed to determine whether or a polygon node forms a valid ear w/ adjacent nodes */\n  private static final boolean mortonIsEar(final Node ear) {\n    // triangle bbox (flip the bits so negative encoded values are < positive encoded values)\n    int minTX = StrictMath.min(StrictMath.min(ear.previous.x, ear.x), ear.next.x) ^ 0x80000000;\n    int minTY = StrictMath.min(StrictMath.min(ear.previous.y, ear.y), ear.next.y) ^ 0x80000000;\n    int maxTX = StrictMath.max(StrictMath.max(ear.previous.x, ear.x), ear.next.x) ^ 0x80000000;\n    int maxTY = StrictMath.max(StrictMath.max(ear.previous.y, ear.y), ear.next.y) ^ 0x80000000;\n\n    // z-order range for the current triangle bbox;\n    long minZ = BitUtil.interleave(minTX, minTY);\n    long maxZ = BitUtil.interleave(maxTX, maxTY);\n\n    // now make sure we don't have other points inside the potential ear;\n\n    // look for points inside the triangle in both directions\n    Node p = ear.previousZ;\n    Node n = ear.nextZ;\n    while (p != null && Long.compareUnsigned(p.morton, minZ) >= 0\n        && n != null && Long.compareUnsigned(n.morton, maxZ) <= 0) {\n      if (p.idx != ear.previous.idx && p.idx != ear.next.idx &&\n          pointInEar(p.getX(), p.getY(), ear.previous.getX(), ear.previous.getY(), ear.getX(), ear.getY(), ear.next.getX(), ear.next.getY()) &&\n          area(p.previous.getX(), p.previous.getY(), p.getX(), p.getY(), p.next.getX(), p.next.getY()) >= 0) return false;\n      p = p.previousZ;\n\n      if (n.idx != ear.previous.idx && n.idx != ear.next.idx &&\n          pointInEar(n.getX(), n.getY(), ear.previous.getX(), ear.previous.getY(), ear.getX(), ear.getY(), ear.next.getX(), ear.next.getY()) &&\n          area(n.previous.getX(), n.previous.getY(), n.getX(), n.getY(), n.next.getX(), n.next.getY()) >= 0) return false;\n      n = n.nextZ;\n    }\n\n    // first look for points inside the triangle in decreasing z-order\n    while (p != null && Long.compareUnsigned(p.morton, minZ) >= 0) {\n      if (p.idx != ear.previous.idx && p.idx != ear.next.idx\n            && pointInEar(p.getX(), p.getY(), ear.previous.getX(), ear.previous.getY(), ear.getX(), ear.getY(), ear.next.getX(), ear.next.getY())\n            && area(p.previous.getX(), p.previous.getY(), p.getX(), p.getY(), p.next.getX(), p.next.getY()) >= 0) {\n          return false;\n        }\n      p = p.previousZ;\n    }\n    // then look for points in increasing z-order\n    while (n != null &&\n        Long.compareUnsigned(n.morton, maxZ) <= 0) {\n        if (n.idx != ear.previous.idx && n.idx != ear.next.idx\n            && pointInEar(n.getX(), n.getY(), ear.previous.getX(), ear.previous.getY(), ear.getX(), ear.getY(), ear.next.getX(), ear.next.getY())\n            && area(n.previous.getX(), n.previous.getY(), n.getX(), n.getY(), n.next.getX(), n.next.getY()) >= 0) {\n          return false;\n        }\n      n = n.nextZ;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}