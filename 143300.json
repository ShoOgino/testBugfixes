{"path":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testBasicGroupingFacets().mjava","commits":[{"id":"22191e72f6c40dec88c9b94f9bb55c7527772a47","date":1553715407,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","sourceNew":"  @Test\n  public void testBasicGroupingFacets() throws Exception {\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n        .add(\"id\", \"9\", \"text_t\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_i\", \"70\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"avg(field_i) from collection1 where text_t='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 10); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 14); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text_t='XXXX' AND NOT (text_t='XXXY')) \"\n            + \"group by str_s order by str_s desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 180); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text_t='XXXX' AND NOT (text_t='XXXY')) \"\n            + \"group by str_s order by myString desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 180);\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 27);\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s having sum(field_i) = 19\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 0);\n\n  }\n\n","sourceOld":"  private void testBasicGroupingFacets() throws Exception {\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\");\n    indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\");\n    indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n    indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\");\n    indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n    indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\");\n    indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n    indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n    indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_i\", \"70\");\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    List<Tuple> tuples = getTuples(sParams);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"avg(field_i) from collection1 where text='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    tuples = getTuples(sParams);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 10); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 14); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n            + \"group by str_s order by str_s desc\");\n\n    tuples = getTuples(sParams);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 180); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) \"\n            + \"group by str_s order by myString desc\");\n\n    tuples = getTuples(sParams);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 180);\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 27);\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94e31112925a65b1d36f9064772080e25b5ef373","date":1553715407,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFacets().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testBasicGroupingFacets().mjava","sourceNew":"  @Test\n  public void testBasicGroupingFacets() throws Exception {\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n        .add(\"id\", \"9\", \"text_t\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_i\", \"70\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"avg(field_i) from collection1 where text_t='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 10); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 14); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text_t='XXXX' AND NOT (text_t='XXXY')) \"\n            + \"group by str_s order by str_s desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 180); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text_t='XXXX' AND NOT (text_t='XXXY')) \"\n            + \"group by str_s order by myString desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 180);\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 27);\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s having sum(field_i) = 19\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasicGroupingFacets() throws Exception {\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n        .add(\"id\", \"9\", \"text_t\", \"XXXX XXXY\", \"str_s\", \"d\", \"field_i\", \"70\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"avg(field_i) from collection1 where text_t='XXXX' group by str_s \" +\n            \"order by sum(field_i) asc limit 2\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 10); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 14); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text_t='XXXX' AND NOT (text_t='XXXY')) \"\n            + \"group by str_s order by str_s desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 180); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 27); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \"\n            + \"cast(avg(1.0 * field_i) as float) from collection1 where (text_t='XXXX' AND NOT (text_t='XXXY')) \"\n            + \"group by str_s order by myString desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    // The sort by and order by match and no limit is applied. All the Tuples should be returned in\n    // this scenario.\n\n    assert (tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 4); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 180);\n    assert (tuple.getDouble(\"EXPR$3\") == 30); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 60); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 45); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 27);\n    assert (tuple.getDouble(\"EXPR$3\") == 7); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 20); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 13.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s having sum(field_i) = 19\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"EXPR$2\") == 19); // sum(field_i)\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 8))\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getDouble(\"EXPR$1\") == 2); // count(*)\n    assert (tuple.getDouble(\"mySum\") == 19);\n    assert (tuple.getDouble(\"EXPR$3\") == 8); // min(field_i)\n    assert (tuple.getDouble(\"EXPR$4\") == 11); // max(field_i)\n    assert (tuple.getDouble(\"EXPR$5\") == 9.5D); // avg(field_i)\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"facet\",\n        \"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), \" +\n            \"cast(avg(1.0 * field_i) as float) from collection1 where text_t='XXXX' group by str_s \" +\n            \"having ((sum(field_i) = 19) AND (min(field_i) = 100))\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["94e31112925a65b1d36f9064772080e25b5ef373"],"94e31112925a65b1d36f9064772080e25b5ef373":["22191e72f6c40dec88c9b94f9bb55c7527772a47"]},"commit2Childs":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["94e31112925a65b1d36f9064772080e25b5ef373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22191e72f6c40dec88c9b94f9bb55c7527772a47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"94e31112925a65b1d36f9064772080e25b5ef373":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}