{"path":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d302ba328993a5b449c2e0b3b5e15ae53e45879","date":1281609097,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(SlowMultiReaderWrapper.wrap(reader));\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(SlowMultiReaderWrapper.wrap(reader));\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(SlowMultiReaderWrapper.wrap(reader));\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(SlowMultiReaderWrapper.wrap(reader));\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(SlowMultiReaderWrapper.wrap(reader));\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(SlowMultiReaderWrapper.wrap(reader));\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(SlowMultiReaderWrapper.wrap(reader));\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c34a3639838887e7997850b6be80f838a4d6f7","date":1290278815,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(new SlowMultiReaderWrapper(reader));\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(SlowMultiReaderWrapper.wrap(reader));\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(new SlowMultiReaderWrapper(reader));\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(SlowMultiReaderWrapper.wrap(reader));\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(new SlowMultiReaderWrapper(reader));\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(new Field(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(reader);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(new SlowMultiReaderWrapper(reader));\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(new SlowMultiReaderWrapper(reader));\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(10).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(new SlowMultiReaderWrapper(reader));\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, 10);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1814d4fe86ee624cd14d1c1fd6baa2dbe5066e2","date":1310120099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number - leaves[subIndex].docBase);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number - leaves[subIndex].docBase);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    \n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              TextField.TYPE_UNSTORED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number - leaves[subIndex].docBase);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number - leaves[subIndex].docBase);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              TextField.TYPE_UNSTORED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex], leaves[subIndex].reader.getLiveDocs());\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number - leaves[subIndex].docBase);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              TextField.TYPE_UNSTORED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex]);\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number - leaves[subIndex].docBase);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015474a0e3185be4c42ed156c0f1e88b90b1ace","date":1321290150,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestSpanQueryFilter#testFilterWorks().mjava","sourceNew":null,"sourceOld":"  public void testFilterWorks() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < 500; i++) {\n      Document document = new Document();\n      document.add(newField(\"field\", English.intToEnglish(i) + \" equals \" + English.intToEnglish(i),\n              TextField.TYPE_UNSTORED));\n      writer.addDocument(document);\n    }\n    final int number = 10;\n    IndexReader reader = writer.getReader(); \n    writer.close();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(reader.getTopReaderContext());\n    int subIndex = ReaderUtil.subIndex(number, leaves); // find the reader with this document in it\n    SpanTermQuery query = new SpanTermQuery(new Term(\"field\", English.intToEnglish(number).trim()));\n    SpanQueryFilter filter = new SpanQueryFilter(query);\n    SpanFilterResult result = filter.bitSpans(leaves[subIndex], leaves[subIndex].reader.getLiveDocs());\n    DocIdSet docIdSet = result.getDocIdSet();\n    assertTrue(\"docIdSet is null and it shouldn't be\", docIdSet != null);\n    assertContainsDocId(\"docIdSet doesn't contain docId 10\", docIdSet, number - leaves[subIndex].docBase);\n    List<SpanFilterResult.PositionInfo> spans = result.getPositions();\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    int size = getDocIdSetSize(docIdSet);\n    assertTrue(\"spans Size: \" + spans.size() + \" is not: \" + size, spans.size() == size);\n    for (final SpanFilterResult.PositionInfo info: spans) {\n      assertTrue(\"info is null and it shouldn't be\", info != null);\n      //The doc should indicate the bit is on\n      assertContainsDocId(\"docIdSet doesn't contain docId \" + info.getDoc(), docIdSet, info.getDoc());\n      //There should be two positions in each\n      assertTrue(\"info.getPositions() Size: \" + info.getPositions().size() + \" is not: \" + 2, info.getPositions().size() == 2);\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"c8323d210478d76a02372693d254b69aac614689":["51c34a3639838887e7997850b6be80f838a4d6f7"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","51c34a3639838887e7997850b6be80f838a4d6f7"],"c19f985e36a65cc969e8e564fe337a0d41512075":["c8323d210478d76a02372693d254b69aac614689"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c8323d210478d76a02372693d254b69aac614689"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["c19f985e36a65cc969e8e564fe337a0d41512075"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","c19f985e36a65cc969e8e564fe337a0d41512075"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a3776dccca01c11e7046323cfad46a3b4a471233","c1814d4fe86ee624cd14d1c1fd6baa2dbe5066e2"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c1814d4fe86ee624cd14d1c1fd6baa2dbe5066e2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","c19f985e36a65cc969e8e564fe337a0d41512075"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"51c34a3639838887e7997850b6be80f838a4d6f7":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"c1814d4fe86ee624cd14d1c1fd6baa2dbe5066e2":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["6620df8541b174097b1133a4fc370adb2e570524"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","51c34a3639838887e7997850b6be80f838a4d6f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"c8323d210478d76a02372693d254b69aac614689":["c19f985e36a65cc969e8e564fe337a0d41512075","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["51c34a3639838887e7997850b6be80f838a4d6f7","3bb13258feba31ab676502787ab2e1779f129b7a"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"c19f985e36a65cc969e8e564fe337a0d41512075":["01e5948db9a07144112d2f08f28ca2e3cd880348","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","c1814d4fe86ee624cd14d1c1fd6baa2dbe5066e2","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6620df8541b174097b1133a4fc370adb2e570524"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","3242a09f703274d3b9283f2064a1a33064b53a1b"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"51c34a3639838887e7997850b6be80f838a4d6f7":["c8323d210478d76a02372693d254b69aac614689","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"962d04139994fce5193143ef35615499a9a96d78":[],"c1814d4fe86ee624cd14d1c1fd6baa2dbe5066e2":["5d004d0e0b3f65bb40da76d476d659d7888270e8","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}