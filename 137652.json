{"path":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","commits":[{"id":"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","date":1291128345,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException, ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      ValuesField valuesField = new ValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n   \n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, null, true, 1, provider);\n    assertTrue(reader.isOptimized());\n   \n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\", new MockAnalyzer());\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiFields.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","date":1291778725,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      ValuesField valuesField = new ValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1, provider);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer());\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiFields.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException, ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      ValuesField valuesField = new ValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n   \n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, null, true, 1, provider);\n    assertTrue(reader.isOptimized());\n   \n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\", new MockAnalyzer());\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiFields.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      ValuesField valuesField = new ValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1, provider);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer());\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiFields.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      ValuesField valuesField = new ValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1, provider);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer());\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiFields.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a465ec8e22527bb8add54f75551ee9557a56de25","date":1295309224,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1, provider);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer());\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiFields.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      ValuesField valuesField = new ValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1, provider);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer());\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiFields.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory2();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1, provider);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer());\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiFields.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1, provider);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer());\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiFields.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory2();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId1\");\n      valuesField.setFloat(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId1\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1, provider);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer(random));\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory2();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1, provider);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer());\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiFields.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9235b9d4454a46c066cda47fed7ca0a34e614529","date":1304414372,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1, provider);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer(random));\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory2();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId1\");\n      valuesField.setFloat(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId1\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1, provider);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer(random));\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d47326e0c6ce589b6962777df409aad0550940fa","date":1304584540,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer(random));\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1, provider);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer(random));\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"41e5bbad683f7546e96f08ffe8bc50cf447f2586","date":1307113213,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer(random));\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer(random));\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"605b061fadf71aa6458c0005eaae83a98350c403","date":1307117658,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer(random));\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer(random));\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer(random));\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer(random));\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112629f1dfd1451722c6047bcf593e6efc96f5f4","date":1309910887,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer(random));\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer(random));\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException,\n      ParseException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"docId\",\n        new MockAnalyzer(random));\n    TopDocs search = searcher.search(parser.parse(\"0 OR 1 OR 2 OR 3 OR 4\"), 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new Field(\"docId\", \"\" + i, Store.NO, Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.optimize(true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertTrue(reader.isOptimized());\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cac4d5fa6c305b94f6232a70bda07f096ad0348c","date":1323538980,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      IndexDocValuesField valuesField = new IndexDocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    IndexDocValues docValues = MultiPerDocValues.getPerDocs(reader).docValues(\"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#testDocValuesSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#testDocValuesSimple().mjava","sourceNew":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Simple test case to show how to use the API\n   */\n  public void testDocValuesSimple() throws CorruptIndexException, IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, writerConfig(false));\n    for (int i = 0; i < 5; i++) {\n      Document doc = new Document();\n      DocValuesField valuesField = new DocValuesField(\"docId\");\n      valuesField.setInt(i);\n      doc.add(valuesField);\n      doc.add(new TextField(\"docId\", \"\" + i));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    writer.forceMerge(1, true);\n\n    writer.close(true);\n\n    IndexReader reader = IndexReader.open(dir, 1);\n    assertEquals(1, reader.getSequentialSubReaders().length);\n\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(\"docId\", \"0\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"1\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"2\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"3\")), BooleanClause.Occur.SHOULD);\n    query.add(new TermQuery(new Term(\"docId\", \"4\")), BooleanClause.Occur.SHOULD);\n\n    TopDocs search = searcher.search(query, 10);\n    assertEquals(5, search.totalHits);\n    ScoreDoc[] scoreDocs = search.scoreDocs;\n    DocValues docValues = MultiDocValues.getDocValues(reader, \"docId\");\n    Source source = docValues.getSource();\n    for (int i = 0; i < scoreDocs.length; i++) {\n      assertEquals(i, scoreDocs[i].doc);\n      assertEquals(i, source.getInt(scoreDocs[i].doc));\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a465ec8e22527bb8add54f75551ee9557a56de25":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["3615ce4a1f785ae1b779244de52c6a7d99227e60","cac4d5fa6c305b94f6232a70bda07f096ad0348c"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","605b061fadf71aa6458c0005eaae83a98350c403"],"cac4d5fa6c305b94f6232a70bda07f096ad0348c":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a465ec8e22527bb8add54f75551ee9557a56de25","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["112629f1dfd1451722c6047bcf593e6efc96f5f4"],"41e5bbad683f7546e96f08ffe8bc50cf447f2586":["d47326e0c6ce589b6962777df409aad0550940fa"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d47326e0c6ce589b6962777df409aad0550940fa":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"605b061fadf71aa6458c0005eaae83a98350c403":["41e5bbad683f7546e96f08ffe8bc50cf447f2586"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a465ec8e22527bb8add54f75551ee9557a56de25":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["d47326e0c6ce589b6962777df409aad0550940fa"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d083e83f225b11e5fdd900e83d26ddb385b6955c","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"cac4d5fa6c305b94f6232a70bda07f096ad0348c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","2e8d7ba2175f47e280231533f7d3016249cea88b","29ef99d61cda9641b6250bf9567329a6e65f901d","a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","135621f3a0670a9394eb563224a3b76cc4dddc0f","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"41e5bbad683f7546e96f08ffe8bc50cf447f2586":["605b061fadf71aa6458c0005eaae83a98350c403"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d47326e0c6ce589b6962777df409aad0550940fa":["41e5bbad683f7546e96f08ffe8bc50cf447f2586"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a465ec8e22527bb8add54f75551ee9557a56de25"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"605b061fadf71aa6458c0005eaae83a98350c403":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["cac4d5fa6c305b94f6232a70bda07f096ad0348c"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["1509f151d7692d84fae414b2b799ac06ba60fcb4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}