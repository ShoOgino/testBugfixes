{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","commits":[{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1735d662b62f98976dc6cccfe9d327c5e7b22dff","date":1498984143,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3,0,0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)) );\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3,0,0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)) );\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3,0,0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new DelegatingClusterDataProvider(null) {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getLiveNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3,0,0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)) );\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3,0,0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3,0,0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)) );\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new DelegatingClusterDataProvider(null) {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getLiveNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3,0,0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3955a9511098c96b652734b2f2d4160d07cc2d63","date":1504780677,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n\n      @Override\n      public ClusterState getClusterState() {\n        throw new UnsupportedOperationException(\"getClusterState\");\n      }\n\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3,0,0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)) );\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3,0,0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6","date":1505752009,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3,0,0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)) );\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n\n      @Override\n      public ClusterState getClusterState() {\n        throw new UnsupportedOperationException(\"getClusterState\");\n      }\n\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3,0,0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00aca69329b84bc12b5a402a8745f8e4db7b7d40","date":1506911750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer},\" +\n        \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  policies: {\" +\n        \"    policy1: [\" +\n        \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n        \"      { replica: '<2', shard: '#EACH', sysprop.rack: rack1}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3,0,0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)) );\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3,0,0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer},\" +\n        \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  policies: {\" +\n        \"    policy1: [\" +\n        \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n        \"      { replica: '<2', shard: '#EACH', sysprop.rack: rack1}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3,0,0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)) );\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer},\" +\n        \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  policies: {\" +\n        \"    policy1: [\" +\n        \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n        \"      { replica: '<2', shard: '#EACH', sysprop.rack: rack1}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3,0,0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)) );\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer},\" +\n        \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  policies: {\" +\n        \"    policy1: [\" +\n        \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n        \"      { replica: '<2', shard: '#EACH', sysprop.rack: rack1}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterState);\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3,0,0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)) );\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer},\" +\n        \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  policies: {\" +\n        \"    policy1: [\" +\n        \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n        \"      { replica: '<2', shard: '#EACH', sysprop.rack: rack1}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3,0,0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer},\" +\n        \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  policies: {\" +\n        \"    policy1: [\" +\n        \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n        \"      { replica: '<2', shard: '#EACH', sysprop.rack: rack1}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterState);\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)));\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer},\" +\n        \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  policies: {\" +\n        \"    policy1: [\" +\n        \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n        \"      { replica: '<2', shard: '#EACH', sysprop.rack: rack1}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterState);\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3,0,0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"536bafb7a33a91ae703a78de9f6bd5c7e32471d9","date":1538395209,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer},\" +\n        \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  policies: {\" +\n        \"    policy1: [\" +\n        \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n        \"      { replica: '<2', shard: '#EACH', sysprop.rack: rack1}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, (Map)Utils.fromJSONString(clusterState));\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)));\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer},\" +\n        \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  policies: {\" +\n        \"    policy1: [\" +\n        \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n        \"      { replica: '<2', shard: '#EACH', sysprop.rack: rack1}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterState);\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer},\" +\n        \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  policies: {\" +\n        \"    policy1: [\" +\n        \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n        \"      { replica: '<2', shard: '#EACH', sysprop.rack: rack1}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    if(useNodeset){\n      autoScaleJson = \"{\" +\n          \"  cluster-preferences: [\" +\n          \"    { maximize : freedisk , precision: 50},\" +\n          \"    { minimize : cores, precision: 2}\" +\n          \"  ],\" +\n          \"  cluster-policy: [\" +\n          \"    { replica : '0' , nodeset: {nodeRole: overseer}},\" +\n          \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n          \"    }\" +\n          \"  ],\" +\n          \"  policies: {\" +\n          \"    policy1: [\" +\n          \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n          \"      { replica: '<2', shard: '#EACH', nodeset:{ sysprop.rack: rack1}}\" +\n          \"    ]\" +\n          \"  }\" +\n          \"}\";\n\n    }\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, (Map)Utils.fromJSONString(clusterState));\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)));\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer},\" +\n        \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  policies: {\" +\n        \"    policy1: [\" +\n        \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n        \"      { replica: '<2', shard: '#EACH', sysprop.rack: rack1}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, (Map)Utils.fromJSONString(clusterState));\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer},\" +\n        \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  policies: {\" +\n        \"    policy1: [\" +\n        \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n        \"      { replica: '<2', shard: '#EACH', sysprop.rack: rack1}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    if(useNodeset){\n      autoScaleJson = \"{\" +\n          \"  cluster-preferences: [\" +\n          \"    { maximize : freedisk , precision: 50},\" +\n          \"    { minimize : cores, precision: 2}\" +\n          \"  ],\" +\n          \"  cluster-policy: [\" +\n          \"    { replica : '0' , nodeset: {nodeRole: overseer}},\" +\n          \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n          \"    }\" +\n          \"  ],\" +\n          \"  policies: {\" +\n          \"    policy1: [\" +\n          \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n          \"      { replica: '<2', shard: '#EACH', nodeset:{ sysprop.rack: rack1}}\" +\n          \"    ]\" +\n          \"  }\" +\n          \"}\";\n\n    }\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, (Map)Utils.fromJSONString(clusterState));\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)));\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer},\" +\n        \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  policies: {\" +\n        \"    policy1: [\" +\n        \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n        \"      { replica: '<2', shard: '#EACH', sysprop.rack: rack1}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, (Map)Utils.fromJSONString(clusterState));\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer},\" +\n        \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  policies: {\" +\n        \"    policy1: [\" +\n        \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n        \"      { replica: '<2', shard: '#EACH', sysprop.rack: rack1}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    if(useNodeset){\n      autoScaleJson = \"{\" +\n          \"  cluster-preferences: [\" +\n          \"    { maximize : freedisk , precision: 50},\" +\n          \"    { minimize : cores, precision: 2}\" +\n          \"  ],\" +\n          \"  cluster-policy: [\" +\n          \"    { replica : '0' , nodeset: {nodeRole: overseer}},\" +\n          \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n          \"    }\" +\n          \"  ],\" +\n          \"  policies: {\" +\n          \"    policy1: [\" +\n          \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n          \"      { replica: '<2', shard: '#EACH', nodeset:{ sysprop.rack: rack1}}\" +\n          \"    ]\" +\n          \"  }\" +\n          \"}\";\n\n    }\n\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, (Map)Utils.fromJSONString(clusterState));\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n        };\n      }\n    };\n    @SuppressWarnings({\"unchecked\"})\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)));\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer},\" +\n        \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  policies: {\" +\n        \"    policy1: [\" +\n        \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n        \"      { replica: '<2', shard: '#EACH', sysprop.rack: rack1}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    if(useNodeset){\n      autoScaleJson = \"{\" +\n          \"  cluster-preferences: [\" +\n          \"    { maximize : freedisk , precision: 50},\" +\n          \"    { minimize : cores, precision: 2}\" +\n          \"  ],\" +\n          \"  cluster-policy: [\" +\n          \"    { replica : '0' , nodeset: {nodeRole: overseer}},\" +\n          \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n          \"    }\" +\n          \"  ],\" +\n          \"  policies: {\" +\n          \"    policy1: [\" +\n          \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n          \"      { replica: '<2', shard: '#EACH', nodeset:{ sysprop.rack: rack1}}\" +\n          \"    ]\" +\n          \"  }\" +\n          \"}\";\n\n    }\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, (Map)Utils.fromJSONString(clusterState));\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer},\" +\n        \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  policies: {\" +\n        \"    policy1: [\" +\n        \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n        \"      { replica: '<2', shard: '#EACH', sysprop.rack: rack1}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    if(useNodeset){\n      autoScaleJson = \"{\" +\n          \"  cluster-preferences: [\" +\n          \"    { maximize : freedisk , precision: 50},\" +\n          \"    { minimize : cores, precision: 2}\" +\n          \"  ],\" +\n          \"  cluster-policy: [\" +\n          \"    { replica : '0' , nodeset: {nodeRole: overseer}},\" +\n          \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n          \"    }\" +\n          \"  ],\" +\n          \"  policies: {\" +\n          \"    policy1: [\" +\n          \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n          \"      { replica: '<2', shard: '#EACH', nodeset:{ sysprop.rack: rack1}}\" +\n          \"    ]\" +\n          \"  }\" +\n          \"}\";\n\n    }\n\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, (Map)Utils.fromJSONString(clusterState));\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n        };\n      }\n    };\n    @SuppressWarnings({\"unchecked\"})\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)));\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer},\" +\n        \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  policies: {\" +\n        \"    policy1: [\" +\n        \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n        \"      { replica: '<2', shard: '#EACH', sysprop.rack: rack1}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    if(useNodeset){\n      autoScaleJson = \"{\" +\n          \"  cluster-preferences: [\" +\n          \"    { maximize : freedisk , precision: 50},\" +\n          \"    { minimize : cores, precision: 2}\" +\n          \"  ],\" +\n          \"  cluster-policy: [\" +\n          \"    { replica : '0' , nodeset: {nodeRole: overseer}},\" +\n          \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n          \"    }\" +\n          \"  ],\" +\n          \"  policies: {\" +\n          \"    policy1: [\" +\n          \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n          \"      { replica: '<2', shard: '#EACH', nodeset:{ sysprop.rack: rack1}}\" +\n          \"    ]\" +\n          \"  }\" +\n          \"}\";\n\n    }\n\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, (Map)Utils.fromJSONString(clusterState));\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n        };\n      }\n    };\n    @SuppressWarnings({\"unchecked\"})\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":null,"sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer},\" +\n        \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  policies: {\" +\n        \"    policy1: [\" +\n        \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n        \"      { replica: '<2', shard: '#EACH', sysprop.rack: rack1}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n    if(useNodeset){\n      autoScaleJson = \"{\" +\n          \"  cluster-preferences: [\" +\n          \"    { maximize : freedisk , precision: 50},\" +\n          \"    { minimize : cores, precision: 2}\" +\n          \"  ],\" +\n          \"  cluster-policy: [\" +\n          \"    { replica : '0' , nodeset: {nodeRole: overseer}},\" +\n          \"    { replica: '<2', shard: '#ANY', node: '#ANY'\" +\n          \"    }\" +\n          \"  ],\" +\n          \"  policies: {\" +\n          \"    policy1: [\" +\n          \"      { replica: '<2', shard: '#EACH', node: '#ANY'},\" +\n          \"      { replica: '<2', shard: '#EACH', nodeset:{ sysprop.rack: rack1}}\" +\n          \"    ]\" +\n          \"  }\" +\n          \"}\";\n\n    }\n\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, (Map)Utils.fromJSONString(clusterState));\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n        };\n      }\n    };\n    @SuppressWarnings({\"unchecked\"})\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> ImmutableList.of(\"node2\", \"node1\", \"node3\").contains(it.node)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","00aca69329b84bc12b5a402a8745f8e4db7b7d40"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"00aca69329b84bc12b5a402a8745f8e4db7b7d40":["b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["1735d662b62f98976dc6cccfe9d327c5e7b22dff"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"e4848fb683db0790f2847173af06e2ad2d03328e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1735d662b62f98976dc6cccfe9d327c5e7b22dff":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["1735d662b62f98976dc6cccfe9d327c5e7b22dff"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"00aca69329b84bc12b5a402a8745f8e4db7b7d40":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a"],"1735d662b62f98976dc6cccfe9d327c5e7b22dff":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a","e4848fb683db0790f2847173af06e2ad2d03328e"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["9ba1b632c041956c93c41aa1143d16a567014891","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["00aca69329b84bc12b5a402a8745f8e4db7b7d40"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}