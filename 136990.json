{"path":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#termPositionsCost(TermsEnum).mjava","commits":[{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#termPositionsCost(TermsEnum).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns an expected cost in simple operations\n   *  of processing the occurrences of a term\n   *  in a document that contains the term.\n   *  This is for use by {@link TwoPhaseIterator#matchCost} implementations.\n   *  <br>This may be inaccurate when {@link TermsEnum#totalTermFreq()} is not available.\n   *  @param termsEnum The term is the term at which this TermsEnum is positioned.\n   */\n  static float termPositionsCost(TermsEnum termsEnum) throws IOException {\n    int docFreq = termsEnum.docFreq();\n    assert docFreq > 0;\n    long totalTermFreq = termsEnum.totalTermFreq(); // -1 when not available\n    float expOccurrencesInMatchingDoc = (totalTermFreq < docFreq) ? 1 : (totalTermFreq / (float) docFreq);\n    return TERM_POSNS_SEEK_OPS_PER_DOC + expOccurrencesInMatchingDoc * TERM_OPS_PER_POS;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#termPositionsCost(TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#termPositionsCost(TermsEnum).mjava","sourceNew":"  /** Returns an expected cost in simple operations\n   *  of processing the occurrences of a term\n   *  in a document that contains the term.\n   *  This is for use by {@link TwoPhaseIterator#matchCost} implementations.\n   *  @param termsEnum The term is the term at which this TermsEnum is positioned.\n   */\n  static float termPositionsCost(TermsEnum termsEnum) throws IOException {\n    int docFreq = termsEnum.docFreq();\n    assert docFreq > 0;\n    long totalTermFreq = termsEnum.totalTermFreq();\n    float expOccurrencesInMatchingDoc = totalTermFreq / (float) docFreq;\n    return TERM_POSNS_SEEK_OPS_PER_DOC + expOccurrencesInMatchingDoc * TERM_OPS_PER_POS;\n  }\n\n","sourceOld":"  /** Returns an expected cost in simple operations\n   *  of processing the occurrences of a term\n   *  in a document that contains the term.\n   *  This is for use by {@link TwoPhaseIterator#matchCost} implementations.\n   *  <br>This may be inaccurate when {@link TermsEnum#totalTermFreq()} is not available.\n   *  @param termsEnum The term is the term at which this TermsEnum is positioned.\n   */\n  static float termPositionsCost(TermsEnum termsEnum) throws IOException {\n    int docFreq = termsEnum.docFreq();\n    assert docFreq > 0;\n    long totalTermFreq = termsEnum.totalTermFreq(); // -1 when not available\n    float expOccurrencesInMatchingDoc = (totalTermFreq < docFreq) ? 1 : (totalTermFreq / (float) docFreq);\n    return TERM_POSNS_SEEK_OPS_PER_DOC + expOccurrencesInMatchingDoc * TERM_OPS_PER_POS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#termPositionsCost(TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#termPositionsCost(TermsEnum).mjava","sourceNew":"  /** Returns an expected cost in simple operations\n   *  of processing the occurrences of a term\n   *  in a document that contains the term.\n   *  This is for use by {@link TwoPhaseIterator#matchCost} implementations.\n   *  @param termsEnum The term is the term at which this TermsEnum is positioned.\n   */\n  static float termPositionsCost(TermsEnum termsEnum) throws IOException {\n    int docFreq = termsEnum.docFreq();\n    assert docFreq > 0;\n    long totalTermFreq = termsEnum.totalTermFreq();\n    float expOccurrencesInMatchingDoc = totalTermFreq / (float) docFreq;\n    return TERM_POSNS_SEEK_OPS_PER_DOC + expOccurrencesInMatchingDoc * TERM_OPS_PER_POS;\n  }\n\n","sourceOld":"  /** Returns an expected cost in simple operations\n   *  of processing the occurrences of a term\n   *  in a document that contains the term.\n   *  This is for use by {@link TwoPhaseIterator#matchCost} implementations.\n   *  <br>This may be inaccurate when {@link TermsEnum#totalTermFreq()} is not available.\n   *  @param termsEnum The term is the term at which this TermsEnum is positioned.\n   */\n  static float termPositionsCost(TermsEnum termsEnum) throws IOException {\n    int docFreq = termsEnum.docFreq();\n    assert docFreq > 0;\n    long totalTermFreq = termsEnum.totalTermFreq(); // -1 when not available\n    float expOccurrencesInMatchingDoc = (totalTermFreq < docFreq) ? 1 : (totalTermFreq / (float) docFreq);\n    return TERM_POSNS_SEEK_OPS_PER_DOC + expOccurrencesInMatchingDoc * TERM_OPS_PER_POS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"086ffe31d8fba0110227db122974163709ecc1b4":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["d277693481ea6007c1d83cd503d0859bb3b64d20","086ffe31d8fba0110227db122974163709ecc1b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}