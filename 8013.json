{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanOrVersusBoolean().mjava","commits":[{"id":"c32d7e56f0a6befb6ce6c68dfc4030873585d4cf","date":1331559369,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanOrVersusBoolean().mjava","pathOld":"/dev/null","sourceNew":"  /** SpanOrQuery(A, B) = (A B) */\n  public void testSpanOrVersusBoolean() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(t1), Occur.SHOULD);\n    q1.add(new TermQuery(t2), Occur.SHOULD);\n    SpanOrQuery q2 = new SpanOrQuery(new SpanTermQuery(t1), new SpanTermQuery(t2));\n    assertSameSet(q1, q2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["28b61f1c9cf357a13efbb645d116d056feb80cf6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanOrVersusBoolean().mjava","pathOld":"/dev/null","sourceNew":"  /** SpanOrQuery(A, B) = (A B) */\n  public void testSpanOrVersusBoolean() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(t1), Occur.SHOULD);\n    q1.add(new TermQuery(t2), Occur.SHOULD);\n    SpanOrQuery q2 = new SpanOrQuery(new SpanTermQuery(t1), new SpanTermQuery(t2));\n    assertSameSet(q1, q2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28b61f1c9cf357a13efbb645d116d056feb80cf6","date":1428863054,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanOrVersusBoolean().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanOrVersusBoolean().mjava","sourceNew":"  /** SpanOrQuery(A, B) = (A B) */\n  public void testSpanOrVersusBoolean() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(t1), Occur.SHOULD);\n    q1.add(new TermQuery(t2), Occur.SHOULD);\n    SpanQuery q2 = span(new SpanOrQuery(span(new SpanTermQuery(t1)), span(new SpanTermQuery(t2))));\n    assertSameSet(q1, q2);\n  }\n\n","sourceOld":"  /** SpanOrQuery(A, B) = (A B) */\n  public void testSpanOrVersusBoolean() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(t1), Occur.SHOULD);\n    q1.add(new TermQuery(t2), Occur.SHOULD);\n    SpanOrQuery q2 = new SpanOrQuery(new SpanTermQuery(t1), new SpanTermQuery(t2));\n    assertSameSet(q1, q2);\n  }\n\n","bugFix":["c32d7e56f0a6befb6ce6c68dfc4030873585d4cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanOrVersusBoolean().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanOrVersusBoolean().mjava","sourceNew":"  /** SpanOrQuery(A, B) = (A B) */\n  public void testSpanOrVersusBoolean() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(t1), Occur.SHOULD);\n    q1.add(new TermQuery(t2), Occur.SHOULD);\n    SpanQuery q2 = spanQuery(new SpanOrQuery(spanQuery(new SpanTermQuery(t1)), spanQuery(new SpanTermQuery(t2))));\n    assertSameSet(q1, q2);\n  }\n\n","sourceOld":"  /** SpanOrQuery(A, B) = (A B) */\n  public void testSpanOrVersusBoolean() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(t1), Occur.SHOULD);\n    q1.add(new TermQuery(t2), Occur.SHOULD);\n    SpanQuery q2 = span(new SpanOrQuery(span(new SpanTermQuery(t1)), span(new SpanTermQuery(t2))));\n    assertSameSet(q1, q2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e5699abc6d0854ab3a692587156cb84f189de","date":1428897312,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanOrVersusBooleanTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanOrVersusBoolean().mjava","sourceNew":"  /** SpanOrQuery(A, B) = (A B) */\n  public void testSpanOrVersusBooleanTerm() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(t1), Occur.SHOULD);\n    q1.add(new TermQuery(t2), Occur.SHOULD);\n    SpanQuery q2 = spanQuery(new SpanOrQuery(spanQuery(new SpanTermQuery(t1)), spanQuery(new SpanTermQuery(t2))));\n    assertSameSet(q1, q2);\n  }\n\n","sourceOld":"  /** SpanOrQuery(A, B) = (A B) */\n  public void testSpanOrVersusBoolean() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(t1), Occur.SHOULD);\n    q1.add(new TermQuery(t2), Occur.SHOULD);\n    SpanQuery q2 = spanQuery(new SpanOrQuery(spanQuery(new SpanTermQuery(t1)), spanQuery(new SpanTermQuery(t2))));\n    assertSameSet(q1, q2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c32d7e56f0a6befb6ce6c68dfc4030873585d4cf"],"c32d7e56f0a6befb6ce6c68dfc4030873585d4cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["28b61f1c9cf357a13efbb645d116d056feb80cf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28b61f1c9cf357a13efbb645d116d056feb80cf6":["c32d7e56f0a6befb6ce6c68dfc4030873585d4cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e5699abc6d0854ab3a692587156cb84f189de"],"d14e5699abc6d0854ab3a692587156cb84f189de":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"c32d7e56f0a6befb6ce6c68dfc4030873585d4cf":["38e3b736c7ca086d61b7dbb841c905ee115490da","28b61f1c9cf357a13efbb645d116d056feb80cf6"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["d14e5699abc6d0854ab3a692587156cb84f189de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","c32d7e56f0a6befb6ce6c68dfc4030873585d4cf"],"28b61f1c9cf357a13efbb645d116d056feb80cf6":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d14e5699abc6d0854ab3a692587156cb84f189de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}