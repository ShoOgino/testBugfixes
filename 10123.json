{"path":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","commits":[{"id":"cc3d73ce4049cb1520abaaae57fe8267639bda1d","date":1470181330,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void startup() throws Exception {\n    System.setProperty(\"authenticationPlugin\", HttpParamDelegationTokenPlugin.class.getName());\n    System.setProperty(KerberosPlugin.DELEGATION_TOKEN_ENABLED, \"true\");\n\n    System.setProperty(\"solr.kerberos.cookie.domain\", \"127.0.0.1\");\n    Map<String, String> impSettings = getImpersonatorSettings();\n    for (Map.Entry<String, String> entry : impSettings.entrySet()) {\n      System.setProperty(entry.getKey(), entry.getValue());\n    }\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    String solrXml = MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML.replace(\"</solr>\",\n        \" <str name=\\\"collectionsHandler\\\">\" + ImpersonatorCollectionsHandler.class.getName() + \"</str>\\n\" +\n            \"</solr>\");\n\n    miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), solrXml, buildJettyConfig(\"/solr\"));\n    JettySolrRunner runner = miniCluster.getJettySolrRunners().get(0);\n    solrClient = new HttpSolrClient.Builder(runner.getBaseUrl().toString()).build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void startup() throws Exception {\n    System.setProperty(\"authenticationPlugin\", HttpParamDelegationTokenPlugin.class.getName());\n    System.setProperty(KerberosPlugin.DELEGATION_TOKEN_ENABLED, \"true\");\n\n    System.setProperty(\"solr.kerberos.cookie.domain\", \"127.0.0.1\");\n    Map<String, String> impSettings = getImpersonatorSettings();\n    for (Map.Entry<String, String> entry : impSettings.entrySet()) {\n      System.setProperty(entry.getKey(), entry.getValue());\n    }\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    String solrXml = MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML.replace(\"</solr>\",\n        \" <str name=\\\"collectionsHandler\\\">\" + ImpersonatorCollectionsHandler.class.getName() + \"</str>\\n\" +\n            \"</solr>\");\n\n    miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), solrXml, buildJettyConfig(\"/solr\"));\n    JettySolrRunner runner = miniCluster.getJettySolrRunners().get(0);\n    solrClient = new HttpSolrClient.Builder(runner.getBaseUrl().toString()).build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b4691d1a4146c5faf9bef847d39ff0bf5f036a","date":1472892481,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","sourceNew":"  @BeforeClass\n  public static void startup() throws Exception {\n    assumeFalse(\"Hadoop does not work on Windows\", Constants.WINDOWS);\n    \n    System.setProperty(\"authenticationPlugin\", HttpParamDelegationTokenPlugin.class.getName());\n    System.setProperty(KerberosPlugin.DELEGATION_TOKEN_ENABLED, \"true\");\n\n    System.setProperty(\"solr.kerberos.cookie.domain\", \"127.0.0.1\");\n    Map<String, String> impSettings = getImpersonatorSettings();\n    for (Map.Entry<String, String> entry : impSettings.entrySet()) {\n      System.setProperty(entry.getKey(), entry.getValue());\n    }\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    String solrXml = MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML.replace(\"</solr>\",\n        \" <str name=\\\"collectionsHandler\\\">\" + ImpersonatorCollectionsHandler.class.getName() + \"</str>\\n\" +\n            \"</solr>\");\n\n    miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), solrXml, buildJettyConfig(\"/solr\"));\n    JettySolrRunner runner = miniCluster.getJettySolrRunners().get(0);\n    solrClient = new HttpSolrClient.Builder(runner.getBaseUrl().toString()).build();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void startup() throws Exception {\n    System.setProperty(\"authenticationPlugin\", HttpParamDelegationTokenPlugin.class.getName());\n    System.setProperty(KerberosPlugin.DELEGATION_TOKEN_ENABLED, \"true\");\n\n    System.setProperty(\"solr.kerberos.cookie.domain\", \"127.0.0.1\");\n    Map<String, String> impSettings = getImpersonatorSettings();\n    for (Map.Entry<String, String> entry : impSettings.entrySet()) {\n      System.setProperty(entry.getKey(), entry.getValue());\n    }\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    String solrXml = MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML.replace(\"</solr>\",\n        \" <str name=\\\"collectionsHandler\\\">\" + ImpersonatorCollectionsHandler.class.getName() + \"</str>\\n\" +\n            \"</solr>\");\n\n    miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), solrXml, buildJettyConfig(\"/solr\"));\n    JettySolrRunner runner = miniCluster.getJettySolrRunners().get(0);\n    solrClient = new HttpSolrClient.Builder(runner.getBaseUrl().toString()).build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","sourceNew":"  @BeforeClass\n  public static void startup() throws Exception {\n    assumeFalse(\"Hadoop does not work on Windows\", Constants.WINDOWS);\n    \n    System.setProperty(\"authenticationPlugin\", HttpParamDelegationTokenPlugin.class.getName());\n    System.setProperty(KerberosPlugin.DELEGATION_TOKEN_ENABLED, \"true\");\n\n    System.setProperty(\"solr.kerberos.cookie.domain\", \"127.0.0.1\");\n    Map<String, String> impSettings = getImpersonatorSettings();\n    for (Map.Entry<String, String> entry : impSettings.entrySet()) {\n      System.setProperty(entry.getKey(), entry.getValue());\n    }\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    String solrXml = MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML.replace(\"</solr>\",\n        \" <str name=\\\"collectionsHandler\\\">\" + ImpersonatorCollectionsHandler.class.getName() + \"</str>\\n\" +\n            \"</solr>\");\n\n    miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), solrXml, buildJettyConfig(\"/solr\"));\n    JettySolrRunner runner = miniCluster.getJettySolrRunners().get(0);\n    solrClient = new HttpSolrClient.Builder(runner.getBaseUrl().toString()).build();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void startup() throws Exception {\n    System.setProperty(\"authenticationPlugin\", HttpParamDelegationTokenPlugin.class.getName());\n    System.setProperty(KerberosPlugin.DELEGATION_TOKEN_ENABLED, \"true\");\n\n    System.setProperty(\"solr.kerberos.cookie.domain\", \"127.0.0.1\");\n    Map<String, String> impSettings = getImpersonatorSettings();\n    for (Map.Entry<String, String> entry : impSettings.entrySet()) {\n      System.setProperty(entry.getKey(), entry.getValue());\n    }\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    String solrXml = MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML.replace(\"</solr>\",\n        \" <str name=\\\"collectionsHandler\\\">\" + ImpersonatorCollectionsHandler.class.getName() + \"</str>\\n\" +\n            \"</solr>\");\n\n    miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), solrXml, buildJettyConfig(\"/solr\"));\n    JettySolrRunner runner = miniCluster.getJettySolrRunners().get(0);\n    solrClient = new HttpSolrClient.Builder(runner.getBaseUrl().toString()).build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","sourceNew":"  @BeforeClass\n  public static void startup() throws Exception {\n    assumeFalse(\"Hadoop does not work on Windows\", Constants.WINDOWS);\n    \n    System.setProperty(\"authenticationPlugin\", HttpParamDelegationTokenPlugin.class.getName());\n    System.setProperty(KerberosPlugin.DELEGATION_TOKEN_ENABLED, \"true\");\n\n    System.setProperty(\"solr.kerberos.cookie.domain\", \"127.0.0.1\");\n    Map<String, String> impSettings = getImpersonatorSettings();\n    for (Map.Entry<String, String> entry : impSettings.entrySet()) {\n      System.setProperty(entry.getKey(), entry.getValue());\n    }\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    String solrXml = MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML.replace(\"</solr>\",\n        \" <str name=\\\"collectionsHandler\\\">\" + ImpersonatorCollectionsHandler.class.getName() + \"</str>\\n\" +\n            \"</solr>\");\n\n    miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), solrXml, buildJettyConfig(\"/solr\"));\n    JettySolrRunner runner = miniCluster.getJettySolrRunners().get(0);\n    solrClient = new HttpSolrClient.Builder(runner.getBaseUrl().toString()).build();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void startup() throws Exception {\n    System.setProperty(\"authenticationPlugin\", HttpParamDelegationTokenPlugin.class.getName());\n    System.setProperty(KerberosPlugin.DELEGATION_TOKEN_ENABLED, \"true\");\n\n    System.setProperty(\"solr.kerberos.cookie.domain\", \"127.0.0.1\");\n    Map<String, String> impSettings = getImpersonatorSettings();\n    for (Map.Entry<String, String> entry : impSettings.entrySet()) {\n      System.setProperty(entry.getKey(), entry.getValue());\n    }\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    String solrXml = MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML.replace(\"</solr>\",\n        \" <str name=\\\"collectionsHandler\\\">\" + ImpersonatorCollectionsHandler.class.getName() + \"</str>\\n\" +\n            \"</solr>\");\n\n    miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), solrXml, buildJettyConfig(\"/solr\"));\n    JettySolrRunner runner = miniCluster.getJettySolrRunners().get(0);\n    solrClient = new HttpSolrClient.Builder(runner.getBaseUrl().toString()).build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","sourceNew":"  @BeforeClass\n  public static void startup() throws Exception {\n    assumeFalse(\"Hadoop does not work on Windows\", Constants.WINDOWS);\n    \n    System.setProperty(\"authenticationPlugin\", HttpParamDelegationTokenPlugin.class.getName());\n    System.setProperty(KerberosPlugin.DELEGATION_TOKEN_ENABLED, \"true\");\n\n    System.setProperty(\"solr.kerberos.cookie.domain\", \"127.0.0.1\");\n    Map<String, String> impSettings = getImpersonatorSettings();\n    for (Map.Entry<String, String> entry : impSettings.entrySet()) {\n      System.setProperty(entry.getKey(), entry.getValue());\n    }\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    String solrXml = MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML.replace(\"</solr>\",\n        \" <str name=\\\"collectionsHandler\\\">\" + ImpersonatorCollectionsHandler.class.getName() + \"</str>\\n\" +\n            \"</solr>\");\n\n    miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), solrXml, buildJettyConfig(\"/solr\"));\n    JettySolrRunner runner = miniCluster.getJettySolrRunners().get(0);\n    solrClient = new HttpSolrClient.Builder(runner.getBaseUrl().toString()).build();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void startup() throws Exception {\n    System.setProperty(\"authenticationPlugin\", HttpParamDelegationTokenPlugin.class.getName());\n    System.setProperty(KerberosPlugin.DELEGATION_TOKEN_ENABLED, \"true\");\n\n    System.setProperty(\"solr.kerberos.cookie.domain\", \"127.0.0.1\");\n    Map<String, String> impSettings = getImpersonatorSettings();\n    for (Map.Entry<String, String> entry : impSettings.entrySet()) {\n      System.setProperty(entry.getKey(), entry.getValue());\n    }\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    String solrXml = MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML.replace(\"</solr>\",\n        \" <str name=\\\"collectionsHandler\\\">\" + ImpersonatorCollectionsHandler.class.getName() + \"</str>\\n\" +\n            \"</solr>\");\n\n    miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), solrXml, buildJettyConfig(\"/solr\"));\n    JettySolrRunner runner = miniCluster.getJettySolrRunners().get(0);\n    solrClient = new HttpSolrClient.Builder(runner.getBaseUrl().toString()).build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void startup() throws Exception {\n    assumeFalse(\"Hadoop does not work on Windows\", Constants.WINDOWS);\n    \n    System.setProperty(\"authenticationPlugin\", HttpParamDelegationTokenPlugin.class.getName());\n    System.setProperty(KerberosPlugin.DELEGATION_TOKEN_ENABLED, \"true\");\n\n    System.setProperty(\"solr.kerberos.cookie.domain\", \"127.0.0.1\");\n    Map<String, String> impSettings = getImpersonatorSettings();\n    for (Map.Entry<String, String> entry : impSettings.entrySet()) {\n      System.setProperty(entry.getKey(), entry.getValue());\n    }\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    String solrXml = MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML.replace(\"</solr>\",\n        \" <str name=\\\"collectionsHandler\\\">\" + ImpersonatorCollectionsHandler.class.getName() + \"</str>\\n\" +\n            \"</solr>\");\n\n    miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), solrXml, buildJettyConfig(\"/solr\"));\n    JettySolrRunner runner = miniCluster.getJettySolrRunners().get(0);\n    solrClient = new HttpSolrClient.Builder(runner.getBaseUrl().toString()).build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29887daf839649150d96855b142b76f5c45d60d2","date":1482160504,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","sourceNew":"  @BeforeClass\n  public static void startup() throws Exception {\n    assumeFalse(\"Hadoop does not work on Windows\", Constants.WINDOWS);\n    \n    System.setProperty(\"authenticationPlugin\", HttpParamDelegationTokenPlugin.class.getName());\n    System.setProperty(KerberosPlugin.DELEGATION_TOKEN_ENABLED, \"true\");\n\n    System.setProperty(\"solr.kerberos.cookie.domain\", \"127.0.0.1\");\n    Map<String, String> impSettings = getImpersonatorSettings();\n    for (Map.Entry<String, String> entry : impSettings.entrySet()) {\n      System.setProperty(entry.getKey(), entry.getValue());\n    }\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    System.setProperty(\"collectionsHandler\", ImpersonatorCollectionsHandler.class.getName());\n\n    miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), buildJettyConfig(\"/solr\"));\n    JettySolrRunner runner = miniCluster.getJettySolrRunners().get(0);\n    solrClient = new HttpSolrClient.Builder(runner.getBaseUrl().toString()).build();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void startup() throws Exception {\n    assumeFalse(\"Hadoop does not work on Windows\", Constants.WINDOWS);\n    \n    System.setProperty(\"authenticationPlugin\", HttpParamDelegationTokenPlugin.class.getName());\n    System.setProperty(KerberosPlugin.DELEGATION_TOKEN_ENABLED, \"true\");\n\n    System.setProperty(\"solr.kerberos.cookie.domain\", \"127.0.0.1\");\n    Map<String, String> impSettings = getImpersonatorSettings();\n    for (Map.Entry<String, String> entry : impSettings.entrySet()) {\n      System.setProperty(entry.getKey(), entry.getValue());\n    }\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    String solrXml = MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML.replace(\"</solr>\",\n        \" <str name=\\\"collectionsHandler\\\">\" + ImpersonatorCollectionsHandler.class.getName() + \"</str>\\n\" +\n            \"</solr>\");\n\n    miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), solrXml, buildJettyConfig(\"/solr\"));\n    JettySolrRunner runner = miniCluster.getJettySolrRunners().get(0);\n    solrClient = new HttpSolrClient.Builder(runner.getBaseUrl().toString()).build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","sourceNew":"  @BeforeClass\n  public static void startup() throws Exception {\n    assumeFalse(\"Hadoop does not work on Windows\", Constants.WINDOWS);\n    \n    System.setProperty(\"authenticationPlugin\", HttpParamDelegationTokenPlugin.class.getName());\n    System.setProperty(KerberosPlugin.DELEGATION_TOKEN_ENABLED, \"true\");\n\n    System.setProperty(\"solr.kerberos.cookie.domain\", \"127.0.0.1\");\n    Map<String, String> impSettings = getImpersonatorSettings();\n    for (Map.Entry<String, String> entry : impSettings.entrySet()) {\n      System.setProperty(entry.getKey(), entry.getValue());\n    }\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    System.setProperty(\"collectionsHandler\", ImpersonatorCollectionsHandler.class.getName());\n\n    miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), buildJettyConfig(\"/solr\"));\n    JettySolrRunner runner = miniCluster.getJettySolrRunners().get(0);\n    solrClient = new HttpSolrClient.Builder(runner.getBaseUrl().toString()).build();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void startup() throws Exception {\n    assumeFalse(\"Hadoop does not work on Windows\", Constants.WINDOWS);\n    \n    System.setProperty(\"authenticationPlugin\", HttpParamDelegationTokenPlugin.class.getName());\n    System.setProperty(KerberosPlugin.DELEGATION_TOKEN_ENABLED, \"true\");\n\n    System.setProperty(\"solr.kerberos.cookie.domain\", \"127.0.0.1\");\n    Map<String, String> impSettings = getImpersonatorSettings();\n    for (Map.Entry<String, String> entry : impSettings.entrySet()) {\n      System.setProperty(entry.getKey(), entry.getValue());\n    }\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    String solrXml = MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML.replace(\"</solr>\",\n        \" <str name=\\\"collectionsHandler\\\">\" + ImpersonatorCollectionsHandler.class.getName() + \"</str>\\n\" +\n            \"</solr>\");\n\n    miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), solrXml, buildJettyConfig(\"/solr\"));\n    JettySolrRunner runner = miniCluster.getJettySolrRunners().get(0);\n    solrClient = new HttpSolrClient.Builder(runner.getBaseUrl().toString()).build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e614eceb81b081076e753ed62268c93c8a2a28e","date":1576119727,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","sourceNew":"  @BeforeClass\n  public static void startup() throws Exception {\n    HdfsTestUtil.checkAssumptions();\n    \n    System.setProperty(\"authenticationPlugin\", HttpParamDelegationTokenPlugin.class.getName());\n    System.setProperty(KerberosPlugin.DELEGATION_TOKEN_ENABLED, \"true\");\n\n    System.setProperty(\"solr.kerberos.cookie.domain\", \"127.0.0.1\");\n    Map<String, String> impSettings = getImpersonatorSettings();\n    for (Map.Entry<String, String> entry : impSettings.entrySet()) {\n      System.setProperty(entry.getKey(), entry.getValue());\n    }\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    System.setProperty(\"collectionsHandler\", ImpersonatorCollectionsHandler.class.getName());\n\n    miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), buildJettyConfig(\"/solr\"));\n    JettySolrRunner runner = miniCluster.getJettySolrRunners().get(0);\n    solrClient = new HttpSolrClient.Builder(runner.getBaseUrl().toString()).build();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void startup() throws Exception {\n    assumeFalse(\"Hadoop does not work on Windows\", Constants.WINDOWS);\n    \n    System.setProperty(\"authenticationPlugin\", HttpParamDelegationTokenPlugin.class.getName());\n    System.setProperty(KerberosPlugin.DELEGATION_TOKEN_ENABLED, \"true\");\n\n    System.setProperty(\"solr.kerberos.cookie.domain\", \"127.0.0.1\");\n    Map<String, String> impSettings = getImpersonatorSettings();\n    for (Map.Entry<String, String> entry : impSettings.entrySet()) {\n      System.setProperty(entry.getKey(), entry.getValue());\n    }\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    System.setProperty(\"collectionsHandler\", ImpersonatorCollectionsHandler.class.getName());\n\n    miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), buildJettyConfig(\"/solr\"));\n    JettySolrRunner runner = miniCluster.getJettySolrRunners().get(0);\n    solrClient = new HttpSolrClient.Builder(runner.getBaseUrl().toString()).build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#startup().mjava","sourceNew":"  @BeforeClass\n  public static void startup() throws Exception {\n    HdfsTestUtil.checkAssumptions();\n    \n    System.setProperty(\"authenticationPlugin\", HttpParamDelegationTokenPlugin.class.getName());\n    System.setProperty(KerberosPlugin.DELEGATION_TOKEN_ENABLED, \"true\");\n\n    System.setProperty(\"solr.kerberos.cookie.domain\", \"127.0.0.1\");\n    Map<String, String> impSettings = getImpersonatorSettings();\n    for (Map.Entry<String, String> entry : impSettings.entrySet()) {\n      System.setProperty(entry.getKey(), entry.getValue());\n    }\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    System.setProperty(\"collectionsHandler\", ImpersonatorCollectionsHandler.class.getName());\n\n    miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), buildJettyConfig(\"/solr\"));\n    JettySolrRunner runner = miniCluster.getJettySolrRunners().get(0);\n    solrClient = new HttpSolrClient.Builder(runner.getBaseUrl().toString()).build();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void startup() throws Exception {\n    assumeFalse(\"Hadoop does not work on Windows\", Constants.WINDOWS);\n    \n    System.setProperty(\"authenticationPlugin\", HttpParamDelegationTokenPlugin.class.getName());\n    System.setProperty(KerberosPlugin.DELEGATION_TOKEN_ENABLED, \"true\");\n\n    System.setProperty(\"solr.kerberos.cookie.domain\", \"127.0.0.1\");\n    Map<String, String> impSettings = getImpersonatorSettings();\n    for (Map.Entry<String, String> entry : impSettings.entrySet()) {\n      System.setProperty(entry.getKey(), entry.getValue());\n    }\n    System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n    System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);\n    System.setProperty(\"collectionsHandler\", ImpersonatorCollectionsHandler.class.getName());\n\n    miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), buildJettyConfig(\"/solr\"));\n    JettySolrRunner runner = miniCluster.getJettySolrRunners().get(0);\n    solrClient = new HttpSolrClient.Builder(runner.getBaseUrl().toString()).build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e614eceb81b081076e753ed62268c93c8a2a28e":["29887daf839649150d96855b142b76f5c45d60d2"],"29887daf839649150d96855b142b76f5c45d60d2":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bc8f206328a706450934717bec7ccc22ad166fc0":["cc3d73ce4049cb1520abaaae57fe8267639bda1d","23b4691d1a4146c5faf9bef847d39ff0bf5f036a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["cc3d73ce4049cb1520abaaae57fe8267639bda1d","bc8f206328a706450934717bec7ccc22ad166fc0"],"df724d84dab24a0cc54bec95a8680867adc7f171":["29887daf839649150d96855b142b76f5c45d60d2","7e614eceb81b081076e753ed62268c93c8a2a28e"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","29887daf839649150d96855b142b76f5c45d60d2"],"cc3d73ce4049cb1520abaaae57fe8267639bda1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"23b4691d1a4146c5faf9bef847d39ff0bf5f036a":["cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["cc3d73ce4049cb1520abaaae57fe8267639bda1d","89424def13674ea17829b41c5883c54ecc31a132"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e614eceb81b081076e753ed62268c93c8a2a28e"]},"commit2Childs":{"7e614eceb81b081076e753ed62268c93c8a2a28e":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29887daf839649150d96855b142b76f5c45d60d2":["7e614eceb81b081076e753ed62268c93c8a2a28e","df724d84dab24a0cc54bec95a8680867adc7f171","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"bc8f206328a706450934717bec7ccc22ad166fc0":["89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"df724d84dab24a0cc54bec95a8680867adc7f171":[],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"cc3d73ce4049cb1520abaaae57fe8267639bda1d":["bc8f206328a706450934717bec7ccc22ad166fc0","89424def13674ea17829b41c5883c54ecc31a132","23b4691d1a4146c5faf9bef847d39ff0bf5f036a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"23b4691d1a4146c5faf9bef847d39ff0bf5f036a":["bc8f206328a706450934717bec7ccc22ad166fc0"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["29887daf839649150d96855b142b76f5c45d60d2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cc3d73ce4049cb1520abaaae57fe8267639bda1d","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}