{"path":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","commits":[{"id":"b1777912fb613f51063554d81f71c1b70d6bcd77","date":1470897768,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","pathOld":"/dev/null","sourceNew":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                CoreAdminParams.NODE, source);\n            log.info(\"src_core : {}\", Utils.toJSONString(props));\n            sourceReplicas.add(props\n            );\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fac11578d87e86ac41841e07ba8db185cedf92c","date":1471085468,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","sourceNew":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props\n            );\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","sourceOld":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                CoreAdminParams.NODE, source);\n            log.info(\"src_core : {}\", Utils.toJSONString(props));\n            sourceReplicas.add(props\n            );\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","sourceNew":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props\n            );\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","sourceOld":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                CoreAdminParams.NODE, source);\n            log.info(\"src_core : {}\", Utils.toJSONString(props));\n            sourceReplicas.add(props\n            );\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","pathOld":"/dev/null","sourceNew":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props\n            );\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","pathOld":"/dev/null","sourceNew":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props\n            );\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","sourceNew":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                ZkStateReader.REPLICA_TYPE, replica.getType().name(),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props);\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","sourceOld":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props\n            );\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","sourceNew":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                ZkStateReader.REPLICA_TYPE, replica.getType().name(),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props);\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","sourceOld":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props\n            );\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e8270c911ac3f2780a5d8660bd53be1aa142ad8","date":1497368366,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","sourceNew":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                ZkStateReader.REPLICA_TYPE, replica.getType().name(),\n                ZkStateReader.LEADER_PROP, String.valueOf(replica.equals(slice.getLeader())),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props);\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","sourceOld":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                ZkStateReader.REPLICA_TYPE, replica.getType().name(),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props);\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","sourceNew":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                ZkStateReader.REPLICA_TYPE, replica.getType().name(),\n                ZkStateReader.LEADER_PROP, String.valueOf(replica.equals(slice.getLeader())),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props);\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","sourceOld":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                ZkStateReader.REPLICA_TYPE, replica.getType().name(),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props);\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","sourceNew":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                ZkStateReader.REPLICA_TYPE, replica.getType().name(),\n                ZkStateReader.LEADER_PROP, String.valueOf(replica.equals(slice.getLeader())),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props);\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","sourceOld":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                ZkStateReader.REPLICA_TYPE, replica.getType().name(),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props);\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","sourceNew":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                ZkStateReader.REPLICA_TYPE, replica.getType().name(),\n                ZkStateReader.LEADER_PROP, String.valueOf(replica.equals(slice.getLeader())),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props);\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","sourceOld":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                ZkStateReader.REPLICA_TYPE, replica.getType().name(),\n                ZkStateReader.LEADER_PROP, String.valueOf(replica.equals(slice.getLeader())),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props);\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ReplaceNodeCmd#getReplicasOfNode(String,ClusterState).mjava","sourceNew":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                ZkStateReader.REPLICA_TYPE, replica.getType().name(),\n                ZkStateReader.LEADER_PROP, String.valueOf(replica.equals(slice.getLeader())),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props);\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","sourceOld":"  static List<ZkNodeProps> getReplicasOfNode(String source, ClusterState state) {\n    List<ZkNodeProps> sourceReplicas = new ArrayList<>();\n    for (Map.Entry<String, DocCollection> e : state.getCollectionsMap().entrySet()) {\n      for (Slice slice : e.getValue().getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          if (source.equals(replica.getNodeName())) {\n            ZkNodeProps props = new ZkNodeProps(\n                COLLECTION_PROP, e.getKey(),\n                SHARD_ID_PROP, slice.getName(),\n                ZkStateReader.CORE_NAME_PROP, replica.getCoreName(),\n                ZkStateReader.REPLICA_PROP, replica.getName(),\n                ZkStateReader.REPLICA_TYPE, replica.getType().name(),\n                ZkStateReader.LEADER_PROP, String.valueOf(replica.equals(slice.getLeader())),\n                CoreAdminParams.NODE, source);\n            sourceReplicas.add(props);\n          }\n        }\n      }\n    }\n    return sourceReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"61c45e99cf6676da48f19d7511c73712ad39402b":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"0e8270c911ac3f2780a5d8660bd53be1aa142ad8":["61c45e99cf6676da48f19d7511c73712ad39402b"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["28288370235ed02234a64753cdbf0c6ec096304a"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["b1777912fb613f51063554d81f71c1b70d6bcd77","9fac11578d87e86ac41841e07ba8db185cedf92c"],"b1777912fb613f51063554d81f71c1b70d6bcd77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fac11578d87e86ac41841e07ba8db185cedf92c":["b1777912fb613f51063554d81f71c1b70d6bcd77"],"28288370235ed02234a64753cdbf0c6ec096304a":["61c45e99cf6676da48f19d7511c73712ad39402b","0e8270c911ac3f2780a5d8660bd53be1aa142ad8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["403d05f7f8d69b65659157eff1bc1d2717f04c66","61c45e99cf6676da48f19d7511c73712ad39402b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","0e8270c911ac3f2780a5d8660bd53be1aa142ad8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["61c45e99cf6676da48f19d7511c73712ad39402b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1"],"61c45e99cf6676da48f19d7511c73712ad39402b":["0e8270c911ac3f2780a5d8660bd53be1aa142ad8","28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"0e8270c911ac3f2780a5d8660bd53be1aa142ad8":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"b1777912fb613f51063554d81f71c1b70d6bcd77":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","9fac11578d87e86ac41841e07ba8db185cedf92c"],"9fac11578d87e86ac41841e07ba8db185cedf92c":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","b1777912fb613f51063554d81f71c1b70d6bcd77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}