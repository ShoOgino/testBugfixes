{"path":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Collection<String> initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    numErrors = manager.meter(registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(registryName, \"requests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(registryName, \"requestTimes\", getCategory().toString(), scope);\n    return Arrays.asList(\"errors\", \"serverErrors\", \"clientErrors\", \"timeouts\", \"requestTimes\", \"requests\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Collection<String> initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    numErrors = manager.meter(registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(registryName, \"requests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(registryName, \"requestTimes\", getCategory().toString(), scope);\n    return Arrays.asList(\"errors\", \"serverErrors\", \"clientErrors\", \"timeouts\", \"requestTimes\", \"requests\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d646b44d1d17a867bcd0e7a07b11c4837b169366","date":1483540291,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    numErrors = manager.meter(registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(registryName, \"requests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(registryName, \"requestTimes\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public Collection<String> initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    numErrors = manager.meter(registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(registryName, \"requests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(registryName, \"requestTimes\", getCategory().toString(), scope);\n    return Arrays.asList(\"errors\", \"serverErrors\", \"clientErrors\", \"timeouts\", \"requestTimes\", \"requests\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    numErrors = manager.meter(registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(registryName, \"requests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(registryName, \"requestTimes\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public Collection<String> initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    numErrors = manager.meter(registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(registryName, \"requests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(registryName, \"requestTimes\", getCategory().toString(), scope);\n    return Arrays.asList(\"errors\", \"serverErrors\", \"clientErrors\", \"timeouts\", \"requestTimes\", \"requests\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6240595e63bdff41c5919fa476b159e649ea967","date":1488906598,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    numErrors = manager.meter(registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(registryName, \"requests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(registryName, \"totalTime\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    numErrors = manager.meter(registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(registryName, \"requests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(registryName, \"requestTimes\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(this, registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(this, registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(this, registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(this, registryName, \"requests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> handlerStart, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    numErrors = manager.meter(registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(registryName, \"requests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(registryName, \"totalTime\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(this, registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(this, registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(this, registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(this, registryName, \"requests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> handlerStart, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    numErrors = manager.meter(registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(registryName, \"requests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(registryName, \"totalTime\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7be718ed0d23db119a3afd0d9f30a4fbf582a7f","date":1517572963,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, final String scope) {\n    registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(this, registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(this, registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(this, registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(this, registryName, \"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n      shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    manager.register(this, registryName, metricsMap, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> handlerStart, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(this, registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(this, registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(this, registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(this, registryName, \"requests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> handlerStart, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, final String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    this.registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(this, registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(this, registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(this, registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(this, registryName, \"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n      shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    manager.registerGauge(this, registryName, metricsMap, tag, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> handlerStart, tag, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, final String scope) {\n    registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(this, registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(this, registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(this, registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(this, registryName, \"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n      shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    manager.register(this, registryName, metricsMap, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> handlerStart, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, final String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    this.registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(this, registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(this, registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(this, registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(this, registryName, \"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n      shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    manager.registerGauge(this, registryName, metricsMap, tag, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> handlerStart, tag, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, final String scope) {\n    registry = manager.registry(registryName);\n    numErrors = manager.meter(this, registryName, \"errors\", getCategory().toString(), scope);\n    numServerErrors = manager.meter(this, registryName, \"serverErrors\", getCategory().toString(), scope);\n    numClientErrors = manager.meter(this, registryName, \"clientErrors\", getCategory().toString(), scope);\n    numTimeouts = manager.meter(this, registryName, \"timeouts\", getCategory().toString(), scope);\n    requests = manager.counter(this, registryName, \"requests\", getCategory().toString(), scope);\n    MetricsMap metricsMap = new MetricsMap((detail, map) ->\n      shardPurposes.forEach((k, v) -> map.put(k, v.getCount())));\n    manager.register(this, registryName, metricsMap, true, \"shardRequests\", getCategory().toString(), scope);\n    requestTimes = manager.timer(this, registryName, \"requestTimes\", getCategory().toString(), scope);\n    totalTime = manager.counter(this, registryName, \"totalTime\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> handlerStart, true, \"handlerStart\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["f6240595e63bdff41c5919fa476b159e649ea967"],"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bfc52860e6d13d034226a760813c59d984c6817a":["f7be718ed0d23db119a3afd0d9f30a4fbf582a7f"],"43564cbb30b064675027cfb569564e8531096e97":["f7be718ed0d23db119a3afd0d9f30a4fbf582a7f","bfc52860e6d13d034226a760813c59d984c6817a"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"f7be718ed0d23db119a3afd0d9f30a4fbf582a7f":["816521ebaad5add9cb96bb88c577394e2938c40b"],"d646b44d1d17a867bcd0e7a07b11c4837b169366":["0265144286422ad99682a00904cc2536b79c8535"],"f6240595e63bdff41c5919fa476b159e649ea967":["d646b44d1d17a867bcd0e7a07b11c4837b169366"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["f6240595e63bdff41c5919fa476b159e649ea967"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43564cbb30b064675027cfb569564e8531096e97"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","d646b44d1d17a867bcd0e7a07b11c4837b169366"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","d646b44d1d17a867bcd0e7a07b11c4837b169366"],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["491c9672ec42582fe43960452dbd37f1c80fe0f0"],"f7be718ed0d23db119a3afd0d9f30a4fbf582a7f":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"d646b44d1d17a867bcd0e7a07b11c4837b169366":["f6240595e63bdff41c5919fa476b159e649ea967","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"f6240595e63bdff41c5919fa476b159e649ea967":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"816521ebaad5add9cb96bb88c577394e2938c40b":["f7be718ed0d23db119a3afd0d9f30a4fbf582a7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"491c9672ec42582fe43960452dbd37f1c80fe0f0":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}