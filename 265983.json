{"path":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.PulsingDocsEnum#nextDoc().mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.PulsingDocsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReader.PulsingDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"PR nextDoc this= \"+ this);\n      while(true) {\n        if (postings.eof()) {\n          //System.out.println(\"PR   END\");\n          return docID = NO_MORE_DOCS;\n        }\n\n        final int code = postings.readVInt();\n        //System.out.println(\"  read code=\" + code);\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          accum += code;\n        } else {\n          accum += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = postings.readVInt();     // else read freq\n          }\n\n          if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n            // Skip positions\n            if (storePayloads) {\n              for(int pos=0;pos<freq;pos++) {\n                final int posCode = postings.readVInt();\n                if ((posCode & 1) != 0) {\n                  payloadLength = postings.readVInt();\n                }\n                if (payloadLength != 0) {\n                  postings.skipBytes(payloadLength);\n                }\n              }\n            } else {\n              for(int pos=0;pos<freq;pos++) {\n                // TODO: skipVInt\n                postings.readVInt();\n              }\n            }\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          return (docID = accum);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"PR nextDoc this= \"+ this);\n      while(true) {\n        if (postings.eof()) {\n          //System.out.println(\"PR   END\");\n          return docID = NO_MORE_DOCS;\n        }\n\n        final int code = postings.readVInt();\n        //System.out.println(\"  read code=\" + code);\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          accum += code;\n        } else {\n          accum += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = postings.readVInt();     // else read freq\n          }\n\n          if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n            // Skip positions\n            if (storePayloads) {\n              for(int pos=0;pos<freq;pos++) {\n                final int posCode = postings.readVInt();\n                if ((posCode & 1) != 0) {\n                  payloadLength = postings.readVInt();\n                }\n                if (payloadLength != 0) {\n                  postings.skipBytes(payloadLength);\n                }\n              }\n            } else {\n              for(int pos=0;pos<freq;pos++) {\n                // TODO: skipVInt\n                postings.readVInt();\n              }\n            }\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          return (docID = accum);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.PulsingDocsEnum#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader.PulsingDocsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"PR nextDoc this= \"+ this);\n      while(true) {\n        if (postings.eof()) {\n          //System.out.println(\"PR   END\");\n          return docID = NO_MORE_DOCS;\n        }\n\n        final int code = postings.readVInt();\n        //System.out.println(\"  read code=\" + code);\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          accum += code;\n        } else {\n          accum += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = postings.readVInt();     // else read freq\n          }\n\n          if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n            // Skip positions\n            if (storePayloads) {\n              for(int pos=0;pos<freq;pos++) {\n                final int posCode = postings.readVInt();\n                if ((posCode & 1) != 0) {\n                  payloadLength = postings.readVInt();\n                }\n                if (payloadLength != 0) {\n                  postings.skipBytes(payloadLength);\n                }\n              }\n            } else {\n              for(int pos=0;pos<freq;pos++) {\n                // TODO: skipVInt\n                postings.readVInt();\n              }\n            }\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          return (docID = accum);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      //System.out.println(\"PR nextDoc this= \"+ this);\n      while(true) {\n        if (postings.eof()) {\n          //System.out.println(\"PR   END\");\n          return docID = NO_MORE_DOCS;\n        }\n\n        final int code = postings.readVInt();\n        //System.out.println(\"  read code=\" + code);\n        if (indexOptions == IndexOptions.DOCS_ONLY) {\n          accum += code;\n        } else {\n          accum += code >>> 1;              // shift off low bit\n          if ((code & 1) != 0) {          // if low bit is set\n            freq = 1;                     // freq is one\n          } else {\n            freq = postings.readVInt();     // else read freq\n          }\n\n          if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n            // Skip positions\n            if (storePayloads) {\n              for(int pos=0;pos<freq;pos++) {\n                final int posCode = postings.readVInt();\n                if ((posCode & 1) != 0) {\n                  payloadLength = postings.readVInt();\n                }\n                if (payloadLength != 0) {\n                  postings.skipBytes(payloadLength);\n                }\n              }\n            } else {\n              for(int pos=0;pos<freq;pos++) {\n                // TODO: skipVInt\n                postings.readVInt();\n              }\n            }\n          }\n        }\n\n        if (liveDocs == null || liveDocs.get(accum)) {\n          return (docID = accum);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}