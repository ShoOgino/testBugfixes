{"path":"src/java/org/apache/lucene/index/IndexWriter#rollbackInternal().mjava","commits":[{"id":"c619aff1490fbcbfb8aee81049da5e5120a986d6","date":1217432296,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#rollbackInternal().mjava","pathOld":"/dev/null","sourceNew":"  private void rollbackInternal() throws IOException {\n\n    boolean success = false;\n\n    try {\n      finishMerges(false);\n\n      // Must pre-close these two, in case they increment\n      // changeCount so that we can then set it to false\n      // before calling closeInternal\n      mergePolicy.close();\n      mergeScheduler.close();\n\n      synchronized(this) {\n\n        if (pendingCommit != null) {\n          pendingCommit.rollbackCommit(directory);\n          deleter.decRef(pendingCommit);\n          pendingCommit = null;\n          notifyAll();\n        }\n\n        // Keep the same segmentInfos instance but replace all\n        // of its SegmentInfo instances.  This is so the next\n        // attempt to commit using this instance of IndexWriter\n        // will always write to a new generation (\"write\n        // once\").\n        segmentInfos.clear();\n        segmentInfos.addAll(rollbackSegmentInfos);\n        \n        docWriter.abort();\n\n        assert testPoint(\"rollback before checkpoint\");\n\n        // Ask deleter to locate unreferenced files & remove\n        // them:\n        deleter.checkpoint(segmentInfos, false);\n        deleter.refresh();\n      }\n\n      lastCommitChangeCount = changeCount;\n\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        if (!success) {\n          closing = false;\n          notifyAll();\n          if (infoStream != null)\n            message(\"hit exception during rollback\");\n        }\n      }\n    }\n\n    closeInternal(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cd488f50316362b01a7f67b11a96796b9652e3e5","3c8ae37f624b6dd2e224b74ec2632c0810de8d18","322c7e6294f703248e9b818ca5b393b090ac05ad","cefe924a3b76c22b7df9a075329750871699af6b","f241b963c5bcd6c2293a928059dd2d64988a6042","ae695f21c50b03702b5d0fa2543d5af844bb7cd3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2586f96f60332eb97ecd2934b0763791462568b2","date":1220116589,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#rollbackInternal().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#rollbackInternal().mjava","sourceNew":"  private void rollbackInternal() throws IOException {\n\n    boolean success = false;\n\n    docWriter.pauseAllThreads();\n\n    try {\n      finishMerges(false);\n\n      // Must pre-close these two, in case they increment\n      // changeCount so that we can then set it to false\n      // before calling closeInternal\n      mergePolicy.close();\n      mergeScheduler.close();\n\n      synchronized(this) {\n\n        if (pendingCommit != null) {\n          pendingCommit.rollbackCommit(directory);\n          deleter.decRef(pendingCommit);\n          pendingCommit = null;\n          notifyAll();\n        }\n\n        // Keep the same segmentInfos instance but replace all\n        // of its SegmentInfo instances.  This is so the next\n        // attempt to commit using this instance of IndexWriter\n        // will always write to a new generation (\"write\n        // once\").\n        segmentInfos.clear();\n        segmentInfos.addAll(rollbackSegmentInfos);\n\n        assert !hasExternalSegments();\n        \n        docWriter.abort();\n\n        assert testPoint(\"rollback before checkpoint\");\n\n        // Ask deleter to locate unreferenced files & remove\n        // them:\n        deleter.checkpoint(segmentInfos, false);\n        deleter.refresh();\n      }\n\n      lastCommitChangeCount = changeCount;\n\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        if (!success) {\n          docWriter.resumeAllThreads();\n          closing = false;\n          notifyAll();\n          if (infoStream != null)\n            message(\"hit exception during rollback\");\n        }\n      }\n    }\n\n    closeInternal(false);\n  }\n\n","sourceOld":"  private void rollbackInternal() throws IOException {\n\n    boolean success = false;\n\n    try {\n      finishMerges(false);\n\n      // Must pre-close these two, in case they increment\n      // changeCount so that we can then set it to false\n      // before calling closeInternal\n      mergePolicy.close();\n      mergeScheduler.close();\n\n      synchronized(this) {\n\n        if (pendingCommit != null) {\n          pendingCommit.rollbackCommit(directory);\n          deleter.decRef(pendingCommit);\n          pendingCommit = null;\n          notifyAll();\n        }\n\n        // Keep the same segmentInfos instance but replace all\n        // of its SegmentInfo instances.  This is so the next\n        // attempt to commit using this instance of IndexWriter\n        // will always write to a new generation (\"write\n        // once\").\n        segmentInfos.clear();\n        segmentInfos.addAll(rollbackSegmentInfos);\n        \n        docWriter.abort();\n\n        assert testPoint(\"rollback before checkpoint\");\n\n        // Ask deleter to locate unreferenced files & remove\n        // them:\n        deleter.checkpoint(segmentInfos, false);\n        deleter.refresh();\n      }\n\n      lastCommitChangeCount = changeCount;\n\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        if (!success) {\n          closing = false;\n          notifyAll();\n          if (infoStream != null)\n            message(\"hit exception during rollback\");\n        }\n      }\n    }\n\n    closeInternal(false);\n  }\n\n","bugFix":null,"bugIntro":["f241b963c5bcd6c2293a928059dd2d64988a6042"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#rollbackInternal().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#rollbackInternal().mjava","sourceNew":"  private void rollbackInternal() throws IOException {\n\n    boolean success = false;\n\n    docWriter.pauseAllThreads();\n\n    try {\n      finishMerges(false);\n\n      // Must pre-close these two, in case they increment\n      // changeCount so that we can then set it to false\n      // before calling closeInternal\n      mergePolicy.close();\n      mergeScheduler.close();\n\n      synchronized(this) {\n\n        if (pendingCommit != null) {\n          pendingCommit.rollbackCommit(directory);\n          deleter.decRef(pendingCommit);\n          pendingCommit = null;\n          notifyAll();\n        }\n\n        // Keep the same segmentInfos instance but replace all\n        // of its SegmentInfo instances.  This is so the next\n        // attempt to commit using this instance of IndexWriter\n        // will always write to a new generation (\"write\n        // once\").\n        segmentInfos.clear();\n        segmentInfos.addAll(rollbackSegmentInfos);\n\n        assert !hasExternalSegments();\n        \n        docWriter.abort();\n\n        assert testPoint(\"rollback before checkpoint\");\n\n        // Ask deleter to locate unreferenced files & remove\n        // them:\n        deleter.checkpoint(segmentInfos, false);\n        deleter.refresh();\n      }\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);\n\n      lastCommitChangeCount = changeCount;\n\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        if (!success) {\n          docWriter.resumeAllThreads();\n          closing = false;\n          notifyAll();\n          if (infoStream != null)\n            message(\"hit exception during rollback\");\n        }\n      }\n    }\n\n    closeInternal(false);\n  }\n\n","sourceOld":"  private void rollbackInternal() throws IOException {\n\n    boolean success = false;\n\n    docWriter.pauseAllThreads();\n\n    try {\n      finishMerges(false);\n\n      // Must pre-close these two, in case they increment\n      // changeCount so that we can then set it to false\n      // before calling closeInternal\n      mergePolicy.close();\n      mergeScheduler.close();\n\n      synchronized(this) {\n\n        if (pendingCommit != null) {\n          pendingCommit.rollbackCommit(directory);\n          deleter.decRef(pendingCommit);\n          pendingCommit = null;\n          notifyAll();\n        }\n\n        // Keep the same segmentInfos instance but replace all\n        // of its SegmentInfo instances.  This is so the next\n        // attempt to commit using this instance of IndexWriter\n        // will always write to a new generation (\"write\n        // once\").\n        segmentInfos.clear();\n        segmentInfos.addAll(rollbackSegmentInfos);\n\n        assert !hasExternalSegments();\n        \n        docWriter.abort();\n\n        assert testPoint(\"rollback before checkpoint\");\n\n        // Ask deleter to locate unreferenced files & remove\n        // them:\n        deleter.checkpoint(segmentInfos, false);\n        deleter.refresh();\n      }\n\n      lastCommitChangeCount = changeCount;\n\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        if (!success) {\n          docWriter.resumeAllThreads();\n          closing = false;\n          notifyAll();\n          if (infoStream != null)\n            message(\"hit exception during rollback\");\n        }\n      }\n    }\n\n    closeInternal(false);\n  }\n\n","bugFix":null,"bugIntro":["322c7e6294f703248e9b818ca5b393b090ac05ad"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd488f50316362b01a7f67b11a96796b9652e3e5","date":1241121034,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#rollbackInternal().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#rollbackInternal().mjava","sourceNew":"  private void rollbackInternal() throws IOException {\n\n    boolean success = false;\n\n    docWriter.pauseAllThreads();\n\n    try {\n      finishMerges(false);\n\n      // Must pre-close these two, in case they increment\n      // changeCount so that we can then set it to false\n      // before calling closeInternal\n      mergePolicy.close();\n      mergeScheduler.close();\n\n      synchronized(this) {\n\n        if (pendingCommit != null) {\n          pendingCommit.rollbackCommit(directory);\n          deleter.decRef(pendingCommit);\n          pendingCommit = null;\n          notifyAll();\n        }\n\n        // Keep the same segmentInfos instance but replace all\n        // of its SegmentInfo instances.  This is so the next\n        // attempt to commit using this instance of IndexWriter\n        // will always write to a new generation (\"write\n        // once\").\n        segmentInfos.clear();\n        segmentInfos.addAll(rollbackSegmentInfos);\n\n        assert !hasExternalSegments();\n        \n        docWriter.abort();\n\n        assert testPoint(\"rollback before checkpoint\");\n\n        // Ask deleter to locate unreferenced files & remove\n        // them:\n        deleter.checkpoint(segmentInfos, false);\n        deleter.refresh();\n      }\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);\n\n      lastCommitChangeCount = changeCount;\n\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"rollbackInternal\");\n    } finally {\n      synchronized(this) {\n        if (!success) {\n          docWriter.resumeAllThreads();\n          closing = false;\n          notifyAll();\n          if (infoStream != null)\n            message(\"hit exception during rollback\");\n        }\n      }\n    }\n\n    closeInternal(false);\n  }\n\n","sourceOld":"  private void rollbackInternal() throws IOException {\n\n    boolean success = false;\n\n    docWriter.pauseAllThreads();\n\n    try {\n      finishMerges(false);\n\n      // Must pre-close these two, in case they increment\n      // changeCount so that we can then set it to false\n      // before calling closeInternal\n      mergePolicy.close();\n      mergeScheduler.close();\n\n      synchronized(this) {\n\n        if (pendingCommit != null) {\n          pendingCommit.rollbackCommit(directory);\n          deleter.decRef(pendingCommit);\n          pendingCommit = null;\n          notifyAll();\n        }\n\n        // Keep the same segmentInfos instance but replace all\n        // of its SegmentInfo instances.  This is so the next\n        // attempt to commit using this instance of IndexWriter\n        // will always write to a new generation (\"write\n        // once\").\n        segmentInfos.clear();\n        segmentInfos.addAll(rollbackSegmentInfos);\n\n        assert !hasExternalSegments();\n        \n        docWriter.abort();\n\n        assert testPoint(\"rollback before checkpoint\");\n\n        // Ask deleter to locate unreferenced files & remove\n        // them:\n        deleter.checkpoint(segmentInfos, false);\n        deleter.refresh();\n      }\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);\n\n      lastCommitChangeCount = changeCount;\n\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        if (!success) {\n          docWriter.resumeAllThreads();\n          closing = false;\n          notifyAll();\n          if (infoStream != null)\n            message(\"hit exception during rollback\");\n        }\n      }\n    }\n\n    closeInternal(false);\n  }\n\n","bugFix":["c619aff1490fbcbfb8aee81049da5e5120a986d6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#rollbackInternal().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#rollbackInternal().mjava","sourceNew":"  private void rollbackInternal() throws IOException {\n\n    boolean success = false;\n\n    docWriter.pauseAllThreads();\n\n    try {\n      finishMerges(false);\n\n      // Must pre-close these two, in case they increment\n      // changeCount so that we can then set it to false\n      // before calling closeInternal\n      mergePolicy.close();\n      mergeScheduler.close();\n\n      synchronized(this) {\n\n        if (pendingCommit != null) {\n          pendingCommit.rollbackCommit(directory);\n          deleter.decRef(pendingCommit);\n          pendingCommit = null;\n          notifyAll();\n        }\n\n        // Keep the same segmentInfos instance but replace all\n        // of its SegmentInfo instances.  This is so the next\n        // attempt to commit using this instance of IndexWriter\n        // will always write to a new generation (\"write\n        // once\").\n        segmentInfos.clear();\n        segmentInfos.addAll(rollbackSegmentInfos);\n\n        assert !hasExternalSegments();\n        \n        docWriter.abort();\n\n        assert testPoint(\"rollback before checkpoint\");\n\n        // Ask deleter to locate unreferenced files & remove\n        // them:\n        deleter.checkpoint(segmentInfos, false);\n        deleter.refresh();\n      }\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);\n\n      lastCommitChangeCount = changeCount;\n\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"rollbackInternal\");\n    } finally {\n      synchronized(this) {\n        if (!success) {\n          docWriter.resumeAllThreads();\n          closing = false;\n          notifyAll();\n          if (infoStream != null)\n            message(\"hit exception during rollback\");\n        }\n      }\n    }\n\n    closeInternal(false);\n  }\n\n","sourceOld":"  private void rollbackInternal() throws IOException {\n\n    boolean success = false;\n\n    docWriter.pauseAllThreads();\n\n    try {\n      finishMerges(false);\n\n      // Must pre-close these two, in case they increment\n      // changeCount so that we can then set it to false\n      // before calling closeInternal\n      mergePolicy.close();\n      mergeScheduler.close();\n\n      synchronized(this) {\n\n        if (pendingCommit != null) {\n          pendingCommit.rollbackCommit(directory);\n          deleter.decRef(pendingCommit);\n          pendingCommit = null;\n          notifyAll();\n        }\n\n        // Keep the same segmentInfos instance but replace all\n        // of its SegmentInfo instances.  This is so the next\n        // attempt to commit using this instance of IndexWriter\n        // will always write to a new generation (\"write\n        // once\").\n        segmentInfos.clear();\n        segmentInfos.addAll(rollbackSegmentInfos);\n\n        assert !hasExternalSegments();\n        \n        docWriter.abort();\n\n        assert testPoint(\"rollback before checkpoint\");\n\n        // Ask deleter to locate unreferenced files & remove\n        // them:\n        deleter.checkpoint(segmentInfos, false);\n        deleter.refresh();\n      }\n\n      // Don't bother saving any changes in our segmentInfos\n      readerPool.clear(null);\n\n      lastCommitChangeCount = changeCount;\n\n      success = true;\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"rollbackInternal\");\n    } finally {\n      synchronized(this) {\n        if (!success) {\n          docWriter.resumeAllThreads();\n          closing = false;\n          notifyAll();\n          if (infoStream != null)\n            message(\"hit exception during rollback\");\n        }\n      }\n    }\n\n    closeInternal(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cd488f50316362b01a7f67b11a96796b9652e3e5":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"c619aff1490fbcbfb8aee81049da5e5120a986d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4ff8864209d2e972cb4393600c26082f9a6533d":["2586f96f60332eb97ecd2934b0763791462568b2"],"2586f96f60332eb97ecd2934b0763791462568b2":["c619aff1490fbcbfb8aee81049da5e5120a986d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd488f50316362b01a7f67b11a96796b9652e3e5"]},"commit2Childs":{"cd488f50316362b01a7f67b11a96796b9652e3e5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c619aff1490fbcbfb8aee81049da5e5120a986d6":["2586f96f60332eb97ecd2934b0763791462568b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c619aff1490fbcbfb8aee81049da5e5120a986d6"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"2586f96f60332eb97ecd2934b0763791462568b2":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}