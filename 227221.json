{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,CompiledAutomaton,BytesRef).mjava","commits":[{"id":"7266c313bb3b4fbcde3dcc82556182e1fae90080","date":1400183760,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectEnum#IntersectEnum(FieldReader,CompiledAutomaton,BytesRef).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new Frame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new Frame(idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final Frame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectEnum(FieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new Frame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new Frame(idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final Frame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5c96ee46366b5feece8b0b328368c6237fc087a","date":1400184255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,CompiledAutomaton,BytesRef).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new Frame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new Frame(idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final Frame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,CompiledAutomaton,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6d238816bcdf9bbe4ec886226d89bd93834eb7e","date":1413925889,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,CompiledAutomaton,BytesRef).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,CompiledAutomaton,BytesRef).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.in.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,CompiledAutomaton,BytesRef).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm, int sinkState) throws IOException {\n    //if (DEBUG) System.out.println(\"\\nintEnum.init seg=\" + fr.parent.segment + \" commonSuffix=\" + commonSuffix);\n    this.fr = fr;\n    this.sinkState = sinkState;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    //if (DEBUG) System.out.println(\"sinkState=\" + sinkState + \" AUTOMATON:\\n\" + automaton.toDot());\n    this.runAutomaton = runAutomaton;\n    this.allowAutoPrefixTerms = sinkState != -1;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,Automaton,RunAutomaton,BytesRef,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum#IntersectTermsEnum(FieldReader,CompiledAutomaton,BytesRef).mjava","sourceNew":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, Automaton automaton, RunAutomaton runAutomaton, BytesRef commonSuffix, BytesRef startTerm, int sinkState) throws IOException {\n    //if (DEBUG) System.out.println(\"\\nintEnum.init seg=\" + fr.parent.segment + \" commonSuffix=\" + commonSuffix);\n    this.fr = fr;\n    this.sinkState = sinkState;\n\n    assert automaton != null;\n    assert runAutomaton != null;\n\n    //if (DEBUG) System.out.println(\"sinkState=\" + sinkState + \" AUTOMATON:\\n\" + automaton.toDot());\n    this.runAutomaton = runAutomaton;\n    this.allowAutoPrefixTerms = sinkState != -1;\n    this.automaton = automaton;\n    this.commonSuffix = commonSuffix;\n\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","sourceOld":"  // TODO: in some cases we can filter by length?  eg\n  // regexp foo*bar must be at least length 6 bytes\n  public IntersectTermsEnum(FieldReader fr, CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n    // if (DEBUG) {\n    //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n    // }\n    this.fr = fr;\n    runAutomaton = compiled.runAutomaton;\n    compiledAutomaton = compiled;\n    in = fr.parent.termsIn.clone();\n    stack = new IntersectTermsEnumFrame[5];\n    for(int idx=0;idx<stack.length;idx++) {\n      stack[idx] = new IntersectTermsEnumFrame(this, idx);\n    }\n    for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n      arcs[arcIdx] = new FST.Arc<>();\n    }\n\n    if (fr.index == null) {\n      fstReader = null;\n    } else {\n      fstReader = fr.index.getBytesReader();\n    }\n\n    // TODO: if the automaton is \"smallish\" we really\n    // should use the terms index to seek at least to\n    // the initial term and likely to subsequent terms\n    // (or, maybe just fallback to ATE for such cases).\n    // Else the seek cost of loading the frames will be\n    // too costly.\n\n    final FST.Arc<BytesRef> arc = fr.index.getFirstArc(arcs[0]);\n    // Empty string prefix must have an output in the index!\n    assert arc.isFinal();\n\n    // Special pushFrame since it's the first one:\n    final IntersectTermsEnumFrame f = stack[0];\n    f.fp = f.fpOrig = fr.rootBlockFP;\n    f.prefix = 0;\n    f.setState(runAutomaton.getInitialState());\n    f.arc = arc;\n    f.outputPrefix = arc.output;\n    f.load(fr.rootCode);\n\n    // for assert:\n    assert setSavedStartTerm(startTerm);\n\n    currentFrame = f;\n    if (startTerm != null) {\n      seekToStartTerm(startTerm);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5c96ee46366b5feece8b0b328368c6237fc087a"],"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"7266c313bb3b4fbcde3dcc82556182e1fae90080":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","3e8715d826e588419327562287d5d6a8040d63d6"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["4d637064d608752565d4f9f41b2497dfdfdde50e","c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"3e8715d826e588419327562287d5d6a8040d63d6":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"f5c96ee46366b5feece8b0b328368c6237fc087a":["7266c313bb3b4fbcde3dcc82556182e1fae90080"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e8715d826e588419327562287d5d6a8040d63d6"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["c6d238816bcdf9bbe4ec886226d89bd93834eb7e","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"7266c313bb3b4fbcde3dcc82556182e1fae90080":["f5c96ee46366b5feece8b0b328368c6237fc087a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","7266c313bb3b4fbcde3dcc82556182e1fae90080"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"f5c96ee46366b5feece8b0b328368c6237fc087a":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}