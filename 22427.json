{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCachedOrdinalsReader#testWithThreads().mjava","commits":[{"id":"9905adab7913dc4e059260c31a65cdfbd94afea9","date":1388944941,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCachedOrdinalsReader#testWithThreads().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestCachedOrdinalsReader#testWithThreads().mjava","sourceNew":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer, true);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n    \n    IOUtils.close(writer, taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer, true);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n    \n    IOUtils.close(writer, taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCachedOrdinalsReader#testWithThreads().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCachedOrdinalsReader#testWithThreads().mjava","sourceNew":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer, true);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n\n    writer.shutdown();\n    IOUtils.close(taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer, true);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n    \n    IOUtils.close(writer, taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCachedOrdinalsReader#testWithThreads().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCachedOrdinalsReader#testWithThreads().mjava","sourceNew":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer, true);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n\n    writer.shutdown();\n    IOUtils.close(taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer, true);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n\n    writer.shutdown();\n    IOUtils.close(taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCachedOrdinalsReader#testWithThreads().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCachedOrdinalsReader#testWithThreads().mjava","sourceNew":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer, true);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n\n    writer.close();\n    IOUtils.close(taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer, true);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n\n    writer.shutdown();\n    IOUtils.close(taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCachedOrdinalsReader#testWithThreads().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCachedOrdinalsReader#testWithThreads().mjava","sourceNew":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer, true);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (LeafReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n\n    writer.close();\n    IOUtils.close(taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer, true);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (AtomicReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n\n    writer.close();\n    IOUtils.close(taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCachedOrdinalsReader#testWithThreads().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCachedOrdinalsReader#testWithThreads().mjava","sourceNew":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (LeafReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n\n    writer.close();\n    IOUtils.close(taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","sourceOld":"  @Test\n  public void testWithThreads() throws Exception {\n    // LUCENE-5303: OrdinalsCache used the ThreadLocal BinaryDV instead of reader.getCoreCacheKey().\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(indexDir, conf);\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    \n    Document doc = new Document();\n    doc.add(new FacetField(\"A\", \"1\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    doc = new Document();\n    doc.add(new FacetField(\"A\", \"2\"));\n    writer.addDocument(config.build(taxoWriter, doc));\n    \n    final DirectoryReader reader = DirectoryReader.open(writer, true);\n    final CachedOrdinalsReader ordsReader = new CachedOrdinalsReader(new DocValuesOrdinalsReader(FacetsConfig.DEFAULT_INDEX_FIELD_NAME));\n    Thread[] threads = new Thread[3];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"CachedOrdsThread-\" + i) {\n        @Override\n        public void run() {\n          for (LeafReaderContext context : reader.leaves()) {\n            try {\n              ordsReader.getReader(context);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n      };\n    }\n\n    long ramBytesUsed = 0;\n    for (Thread t : threads) {\n      t.start();\n      t.join();\n      if (ramBytesUsed == 0) {\n        ramBytesUsed = ordsReader.ramBytesUsed();\n      } else {\n        assertEquals(ramBytesUsed, ordsReader.ramBytesUsed());\n      }\n    }\n\n    writer.close();\n    IOUtils.close(taxoWriter, reader, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9905adab7913dc4e059260c31a65cdfbd94afea9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a1862266772deb28cdcb7d996b64d2177022687":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["9905adab7913dc4e059260c31a65cdfbd94afea9"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a1862266772deb28cdcb7d996b64d2177022687"]},"commit2Childs":{"9905adab7913dc4e059260c31a65cdfbd94afea9":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"2a1862266772deb28cdcb7d996b64d2177022687":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9905adab7913dc4e059260c31a65cdfbd94afea9"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["2a1862266772deb28cdcb7d996b64d2177022687"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}