{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readSortedSetFieldWithAddresses(FieldInfo,IndexInput).mjava","commits":[{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readSortedSetFieldWithAddresses(FieldInfo,IndexInput).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readSortedSetFieldWithAddresses(int,IndexInput,FieldInfos).mjava","sourceNew":"  private void readSortedSetFieldWithAddresses(FieldInfo info, IndexInput meta) throws IOException {\n    // sortedset = binary + numeric (addresses) + ordIndex\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(info.name, b);\n\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n1 = readNumericEntry(meta);\n    ords.put(info.name, n1);\n\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n2 = readNumericEntry(meta);\n    ordIndexes.put(info.name, n2);\n  }\n\n","sourceOld":"  private void readSortedSetFieldWithAddresses(int fieldNumber, IndexInput meta, FieldInfos infos) throws IOException {\n    // sortedset = binary + numeric (addresses) + ordIndex\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(fieldNumber, b);\n\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n1 = readNumericEntry(meta);\n    ords.put(fieldNumber, n1);\n\n    if (meta.readVInt() != fieldNumber) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + fieldNumber + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n2 = readNumericEntry(meta);\n    ordIndexes.put(fieldNumber, n2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readSortedSetFieldWithAddresses(FieldInfo,IndexInput).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readSortedSetFieldWithAddresses(FieldInfo,IndexInput).mjava","sourceNew":"  private void readSortedSetFieldWithAddresses(FieldInfo info, IndexInput meta) throws IOException {\n    // sortedset = binary + numeric (addresses) + ordIndex\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(info.name, b);\n\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    NumericEntry n1 = readNumericEntry(meta);\n    ords.put(info.name, n1);\n\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    NumericEntry n2 = readNumericEntry(meta);\n    ordIndexes.put(info.name, n2);\n  }\n\n","sourceOld":"  private void readSortedSetFieldWithAddresses(FieldInfo info, IndexInput meta) throws IOException {\n    // sortedset = binary + numeric (addresses) + ordIndex\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(info.name, b);\n\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n1 = readNumericEntry(meta);\n    ords.put(info.name, n1);\n\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt (resource=\" + meta + \")\");\n    }\n    NumericEntry n2 = readNumericEntry(meta);\n    ordIndexes.put(info.name, n2);\n  }\n\n","bugFix":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene49/Lucene49DocValuesProducer#readSortedSetFieldWithAddresses(FieldInfo,IndexInput).mjava","sourceNew":null,"sourceOld":"  private void readSortedSetFieldWithAddresses(FieldInfo info, IndexInput meta) throws IOException {\n    // sortedset = binary + numeric (addresses) + ordIndex\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.BINARY) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    BinaryEntry b = readBinaryEntry(meta);\n    binaries.put(info.name, b);\n\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    NumericEntry n1 = readNumericEntry(meta);\n    ords.put(info.name, n1);\n\n    if (meta.readVInt() != info.number) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    if (meta.readByte() != Lucene49DocValuesFormat.NUMERIC) {\n      throw new CorruptIndexException(\"sortedset entry for field: \" + info.name + \" is corrupt\", meta);\n    }\n    NumericEntry n2 = readNumericEntry(meta);\n    ordIndexes.put(info.name, n2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}