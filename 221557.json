{"path":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,int).mjava","commits":[{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, int postingsFlags) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int nextPosition() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int startOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int endOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public BytesRef getPayload() throws IOException {\n              return null;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int nextPosition() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int startOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int endOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public BytesRef getPayload() throws IOException {\n              return null;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,int).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int nextPosition() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int startOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int endOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public BytesRef getPayload() throws IOException {\n              return null;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, int postingsFlags) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int nextPosition() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int startOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int endOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public BytesRef getPayload() throws IOException {\n              return null;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"954e59be3da8dc1b046646ad7af4b466852009d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a47d642ab24da1a811adce4bda9cc52c520ca13"]},"commit2Childs":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["954e59be3da8dc1b046646ad7af4b466852009d3"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}