{"path":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"484e80062d7ab2729bc82f0311d6a97dd913961a","date":1424450206,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      private float queryNorm;\n      private float queryWeight;\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        queryWeight = getBoost();\n        return queryWeight * queryWeight;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        queryNorm = norm * topLevelBoost;\n        queryWeight *= queryNorm;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer s = scorer(context, context.reader().getLiveDocs());\n        final boolean exists = (s != null && s.advance(doc) == doc);\n\n        final ComplexExplanation result = new ComplexExplanation();\n        if (exists) {\n          result.setDescription(FieldValueQuery.this.toString() + \", product of:\");\n          result.setValue(queryWeight);\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(new Explanation(getBoost(), \"boost\"));\n          result.addDetail(new Explanation(queryNorm, \"queryNorm\"));\n        } else {\n          result.setDescription(FieldValueQuery.this.toString() + \" doesn't match id \" + doc);\n          result.setValue(0);\n          result.setMatch(Boolean.FALSE);\n        }\n        return result;\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final Bits docsWithField = context.reader().getDocsWithField(field);\n        if (docsWithField == null || docsWithField instanceof MatchNoBits) {\n          return null;\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseDocIdSetIterator twoPhaseIterator = new TwoPhaseDocIdSetIterator() {\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            if (docsWithField.get(doc) == false) {\n              return false;\n            }\n            return true;\n          }\n\n          @Override\n          public DocIdSetIterator approximation() {\n            return approximation;\n          }\n        };\n        final DocIdSetIterator disi = TwoPhaseDocIdSetIterator.asDocIdSetIterator(twoPhaseIterator);\n\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public int startOffset() throws IOException {\n            return -1;\n          }\n\n          @Override\n          public int nextPosition() throws IOException {\n            return -1;\n          }\n\n          @Override\n          public BytesRef getPayload() throws IOException {\n            return null;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int endOffset() throws IOException {\n            return -1;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return queryWeight;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"449f2318aa7f06ce3bce9031e402201231cb781e","date":1424530966,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      private float queryNorm;\n      private float queryWeight;\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        queryWeight = getBoost();\n        return queryWeight * queryWeight;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        queryNorm = norm * topLevelBoost;\n        queryWeight *= queryNorm;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer s = scorer(context, context.reader().getLiveDocs());\n        final boolean exists = (s != null && s.advance(doc) == doc);\n\n        final ComplexExplanation result = new ComplexExplanation();\n        if (exists) {\n          result.setDescription(FieldValueQuery.this.toString() + \", product of:\");\n          result.setValue(queryWeight);\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(new Explanation(getBoost(), \"boost\"));\n          result.addDetail(new Explanation(queryNorm, \"queryNorm\"));\n        } else {\n          result.setDescription(FieldValueQuery.this.toString() + \" doesn't match id \" + doc);\n          result.setValue(0);\n          result.setMatch(Boolean.FALSE);\n        }\n        return result;\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final Bits docsWithField = context.reader().getDocsWithField(field);\n        if (docsWithField == null || docsWithField instanceof MatchNoBits) {\n          return null;\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseDocIdSetIterator twoPhaseIterator = new TwoPhaseDocIdSetIterator() {\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            if (docsWithField.get(doc) == false) {\n              return false;\n            }\n            return true;\n          }\n\n          @Override\n          public DocIdSetIterator approximation() {\n            return approximation;\n          }\n        };\n        final DocIdSetIterator disi = TwoPhaseDocIdSetIterator.asDocIdSetIterator(twoPhaseIterator);\n\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return queryWeight;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      private float queryNorm;\n      private float queryWeight;\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        queryWeight = getBoost();\n        return queryWeight * queryWeight;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        queryNorm = norm * topLevelBoost;\n        queryWeight *= queryNorm;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer s = scorer(context, context.reader().getLiveDocs());\n        final boolean exists = (s != null && s.advance(doc) == doc);\n\n        final ComplexExplanation result = new ComplexExplanation();\n        if (exists) {\n          result.setDescription(FieldValueQuery.this.toString() + \", product of:\");\n          result.setValue(queryWeight);\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(new Explanation(getBoost(), \"boost\"));\n          result.addDetail(new Explanation(queryNorm, \"queryNorm\"));\n        } else {\n          result.setDescription(FieldValueQuery.this.toString() + \" doesn't match id \" + doc);\n          result.setValue(0);\n          result.setMatch(Boolean.FALSE);\n        }\n        return result;\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final Bits docsWithField = context.reader().getDocsWithField(field);\n        if (docsWithField == null || docsWithField instanceof MatchNoBits) {\n          return null;\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseDocIdSetIterator twoPhaseIterator = new TwoPhaseDocIdSetIterator() {\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            if (docsWithField.get(doc) == false) {\n              return false;\n            }\n            return true;\n          }\n\n          @Override\n          public DocIdSetIterator approximation() {\n            return approximation;\n          }\n        };\n        final DocIdSetIterator disi = TwoPhaseDocIdSetIterator.asDocIdSetIterator(twoPhaseIterator);\n\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public int startOffset() throws IOException {\n            return -1;\n          }\n\n          @Override\n          public int nextPosition() throws IOException {\n            return -1;\n          }\n\n          @Override\n          public BytesRef getPayload() throws IOException {\n            return null;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int endOffset() throws IOException {\n            return -1;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return queryWeight;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87fab14adebb5b490363c9bc05f747938bd15e6a","date":1424877964,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n        final Bits docsWithField = context.reader().getDocsWithField(field);\n        if (docsWithField == null || docsWithField instanceof MatchNoBits) {\n          return null;\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseDocIdSetIterator twoPhaseIterator = new TwoPhaseDocIdSetIterator() {\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            if (docsWithField.get(doc) == false) {\n              return false;\n            }\n            return true;\n          }\n\n          @Override\n          public DocIdSetIterator approximation() {\n            return approximation;\n          }\n        };\n        final DocIdSetIterator disi = TwoPhaseDocIdSetIterator.asDocIdSetIterator(twoPhaseIterator);\n\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return score;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      private float queryNorm;\n      private float queryWeight;\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        queryWeight = getBoost();\n        return queryWeight * queryWeight;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        queryNorm = norm * topLevelBoost;\n        queryWeight *= queryNorm;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer s = scorer(context, context.reader().getLiveDocs());\n        final boolean exists = (s != null && s.advance(doc) == doc);\n\n        final ComplexExplanation result = new ComplexExplanation();\n        if (exists) {\n          result.setDescription(FieldValueQuery.this.toString() + \", product of:\");\n          result.setValue(queryWeight);\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(new Explanation(getBoost(), \"boost\"));\n          result.addDetail(new Explanation(queryNorm, \"queryNorm\"));\n        } else {\n          result.setDescription(FieldValueQuery.this.toString() + \" doesn't match id \" + doc);\n          result.setValue(0);\n          result.setMatch(Boolean.FALSE);\n        }\n        return result;\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final Bits docsWithField = context.reader().getDocsWithField(field);\n        if (docsWithField == null || docsWithField instanceof MatchNoBits) {\n          return null;\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseDocIdSetIterator twoPhaseIterator = new TwoPhaseDocIdSetIterator() {\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            if (docsWithField.get(doc) == false) {\n              return false;\n            }\n            return true;\n          }\n\n          @Override\n          public DocIdSetIterator approximation() {\n            return approximation;\n          }\n        };\n        final DocIdSetIterator disi = TwoPhaseDocIdSetIterator.asDocIdSetIterator(twoPhaseIterator);\n\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return queryWeight;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d6eb0072094d94624002318ba2d4c840946833","date":1424947971,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n        final Bits docsWithField = context.reader().getDocsWithField(field);\n        if (docsWithField == null || docsWithField instanceof MatchNoBits) {\n          return null;\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator() {\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            if (docsWithField.get(doc) == false) {\n              return false;\n            }\n            return true;\n          }\n\n          @Override\n          public DocIdSetIterator approximation() {\n            return approximation;\n          }\n        };\n        final DocIdSetIterator disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return score;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n        final Bits docsWithField = context.reader().getDocsWithField(field);\n        if (docsWithField == null || docsWithField instanceof MatchNoBits) {\n          return null;\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseDocIdSetIterator twoPhaseIterator = new TwoPhaseDocIdSetIterator() {\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            if (docsWithField.get(doc) == false) {\n              return false;\n            }\n            return true;\n          }\n\n          @Override\n          public DocIdSetIterator approximation() {\n            return approximation;\n          }\n        };\n        final DocIdSetIterator disi = TwoPhaseDocIdSetIterator.asDocIdSetIterator(twoPhaseIterator);\n\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return score;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6b1be5d2b36d6a30913778ef61374103d55e33","date":1427303640,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n        final Bits docsWithField = context.reader().getDocsWithField(field);\n        if (docsWithField == null || docsWithField instanceof MatchNoBits) {\n          return null;\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approximation) {\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            if (docsWithField.get(doc) == false) {\n              return false;\n            }\n            return true;\n          }\n\n        };\n        final DocIdSetIterator disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return score;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n        final Bits docsWithField = context.reader().getDocsWithField(field);\n        if (docsWithField == null || docsWithField instanceof MatchNoBits) {\n          return null;\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator() {\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            if (docsWithField.get(doc) == false) {\n              return false;\n            }\n            return true;\n          }\n\n          @Override\n          public DocIdSetIterator approximation() {\n            return approximation;\n          }\n        };\n        final DocIdSetIterator disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return score;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n        final Bits docsWithField = context.reader().getDocsWithField(field);\n        if (docsWithField == null || docsWithField instanceof MatchNoBits) {\n          return null;\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approximation) {\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            if (docsWithField.get(doc) == false) {\n              return false;\n            }\n            return true;\n          }\n\n        };\n        final DocIdSetIterator disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return score;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new Weight(this) {\n\n      private float queryNorm;\n      private float queryWeight;\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        queryWeight = getBoost();\n        return queryWeight * queryWeight;\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        queryNorm = norm * topLevelBoost;\n        queryWeight *= queryNorm;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        final Scorer s = scorer(context, context.reader().getLiveDocs());\n        final boolean exists = (s != null && s.advance(doc) == doc);\n\n        final ComplexExplanation result = new ComplexExplanation();\n        if (exists) {\n          result.setDescription(FieldValueQuery.this.toString() + \", product of:\");\n          result.setValue(queryWeight);\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(new Explanation(getBoost(), \"boost\"));\n          result.addDetail(new Explanation(queryNorm, \"queryNorm\"));\n        } else {\n          result.setDescription(FieldValueQuery.this.toString() + \" doesn't match id \" + doc);\n          result.setValue(0);\n          result.setMatch(Boolean.FALSE);\n        }\n        return result;\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        final Bits docsWithField = context.reader().getDocsWithField(field);\n        if (docsWithField == null || docsWithField instanceof MatchNoBits) {\n          return null;\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseDocIdSetIterator twoPhaseIterator = new TwoPhaseDocIdSetIterator() {\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            if (docsWithField.get(doc) == false) {\n              return false;\n            }\n            return true;\n          }\n\n          @Override\n          public DocIdSetIterator approximation() {\n            return approximation;\n          }\n        };\n        final DocIdSetIterator disi = TwoPhaseDocIdSetIterator.asDocIdSetIterator(twoPhaseIterator);\n\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return queryWeight;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7f94ff172f40ff68a926d112e25b96bc38e5a27","date":1431002360,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new RandomAccessWeight(this) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        return context.reader().getDocsWithField(field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n        final Bits docsWithField = context.reader().getDocsWithField(field);\n        if (docsWithField == null || docsWithField instanceof MatchNoBits) {\n          return null;\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approximation) {\n\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            if (docsWithField.get(doc) == false) {\n              return false;\n            }\n            return true;\n          }\n\n        };\n        final DocIdSetIterator disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return score;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new RandomAccessWeight(this, boost) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        return context.reader().getDocsWithField(field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new RandomAccessWeight(this) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        return context.reader().getDocsWithField(field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new RandomAccessWeight(this) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        return context.reader().getDocsWithField(field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a6b1be5d2b36d6a30913778ef61374103d55e33":["a3d6eb0072094d94624002318ba2d4c840946833"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["449f2318aa7f06ce3bce9031e402201231cb781e","7a6b1be5d2b36d6a30913778ef61374103d55e33"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["7a6b1be5d2b36d6a30913778ef61374103d55e33"],"449f2318aa7f06ce3bce9031e402201231cb781e":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"a3d6eb0072094d94624002318ba2d4c840946833":["87fab14adebb5b490363c9bc05f747938bd15e6a"],"87fab14adebb5b490363c9bc05f747938bd15e6a":["449f2318aa7f06ce3bce9031e402201231cb781e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a7f94ff172f40ff68a926d112e25b96bc38e5a27","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"7a6b1be5d2b36d6a30913778ef61374103d55e33":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"449f2318aa7f06ce3bce9031e402201231cb781e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","87fab14adebb5b490363c9bc05f747938bd15e6a"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"484e80062d7ab2729bc82f0311d6a97dd913961a":["449f2318aa7f06ce3bce9031e402201231cb781e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3d6eb0072094d94624002318ba2d4c840946833":["7a6b1be5d2b36d6a30913778ef61374103d55e33"],"87fab14adebb5b490363c9bc05f747938bd15e6a":["a3d6eb0072094d94624002318ba2d4c840946833"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}