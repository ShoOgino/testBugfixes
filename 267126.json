{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testMultipleDocs().mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testMultipleDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleDocs() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      String content = \"the answer is \" + i;\n      if ((i & 1) == 0) {\n        content += \" some more terms\";\n      }\n      doc.add(new Field(\"body\", content, fieldType));\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      iw.addDocument(doc);\n\n      if (random().nextInt(10) == 2) {\n        iw.commit();\n      }\n    }\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    highlighter.setCacheFieldValCharsThreshold(random().nextInt(10) * 10);// 0 thru 90 intervals of 10\n    Query query = new TermQuery(new Term(\"body\", \"answer\"));\n    TopDocs hits = searcher.search(query, numDocs);\n    assertEquals(numDocs, hits.totalHits);\n\n    String snippets[] = highlighter.highlight(\"body\", query, hits);\n    assertEquals(numDocs, snippets.length);\n    for (int hit = 0; hit < numDocs; hit++) {\n      Document doc = searcher.doc(hits.scoreDocs[hit].doc);\n      int id = Integer.parseInt(doc.get(\"id\"));\n      String expected = \"the <b>answer</b> is \" + id;\n      if ((id & 1) == 0) {\n        expected += \" some more terms\";\n      }\n      assertEquals(expected, snippets[hit]);\n    }\n\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testMultipleDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleDocs() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      String content = \"the answer is \" + i;\n      if ((i & 1) == 0) {\n        content += \" some more terms\";\n      }\n      doc.add(new Field(\"body\", content, fieldType));\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      iw.addDocument(doc);\n\n      if (random().nextInt(10) == 2) {\n        iw.commit();\n      }\n    }\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    highlighter.setCacheFieldValCharsThreshold(random().nextInt(10) * 10);// 0 thru 90 intervals of 10\n    Query query = new TermQuery(new Term(\"body\", \"answer\"));\n    TopDocs hits = searcher.search(query, numDocs);\n    assertEquals(numDocs, hits.totalHits);\n\n    String snippets[] = highlighter.highlight(\"body\", query, hits);\n    assertEquals(numDocs, snippets.length);\n    for (int hit = 0; hit < numDocs; hit++) {\n      Document doc = searcher.doc(hits.scoreDocs[hit].doc);\n      int id = Integer.parseInt(doc.get(\"id\"));\n      String expected = \"the <b>answer</b> is \" + id;\n      if ((id & 1) == 0) {\n        expected += \" some more terms\";\n      }\n      assertEquals(expected, snippets[hit]);\n    }\n\n    ir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571","date":1515642580,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testMultipleDocs().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testMultipleDocs().mjava","sourceNew":"  public void testMultipleDocs() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      String content = \"the answer is \" + i;\n      if ((i & 1) == 0) {\n        content += \" some more terms\";\n      }\n      doc.add(new Field(\"body\", content, fieldType));\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      iw.addDocument(doc);\n\n      if (random().nextInt(10) == 2) {\n        iw.commit();\n      }\n    }\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, indexAnalyzer);\n    highlighter.setCacheFieldValCharsThreshold(random().nextInt(10) * 10);// 0 thru 90 intervals of 10\n    Query query = new TermQuery(new Term(\"body\", \"answer\"));\n    TopDocs hits = searcher.search(query, numDocs);\n    assertEquals(numDocs, hits.totalHits);\n\n    String snippets[] = highlighter.highlight(\"body\", query, hits);\n    assertEquals(numDocs, snippets.length);\n    for (int hit = 0; hit < numDocs; hit++) {\n      Document doc = searcher.doc(hits.scoreDocs[hit].doc);\n      int id = Integer.parseInt(doc.get(\"id\"));\n      String expected = \"the <b>answer</b> is \" + id;\n      if ((id & 1) == 0) {\n        expected += \" some more terms\";\n      }\n      assertEquals(expected, snippets[hit]);\n    }\n\n    ir.close();\n  }\n\n","sourceOld":"  public void testMultipleDocs() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      String content = \"the answer is \" + i;\n      if ((i & 1) == 0) {\n        content += \" some more terms\";\n      }\n      doc.add(new Field(\"body\", content, fieldType));\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      iw.addDocument(doc);\n\n      if (random().nextInt(10) == 2) {\n        iw.commit();\n      }\n    }\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    highlighter.setCacheFieldValCharsThreshold(random().nextInt(10) * 10);// 0 thru 90 intervals of 10\n    Query query = new TermQuery(new Term(\"body\", \"answer\"));\n    TopDocs hits = searcher.search(query, numDocs);\n    assertEquals(numDocs, hits.totalHits);\n\n    String snippets[] = highlighter.highlight(\"body\", query, hits);\n    assertEquals(numDocs, snippets.length);\n    for (int hit = 0; hit < numDocs; hit++) {\n      Document doc = searcher.doc(hits.scoreDocs[hit].doc);\n      int id = Integer.parseInt(doc.get(\"id\"));\n      String expected = \"the <b>answer</b> is \" + id;\n      if ((id & 1) == 0) {\n        expected += \" some more terms\";\n      }\n      assertEquals(expected, snippets[hit]);\n    }\n\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testMultipleDocs().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testMultipleDocs().mjava","sourceNew":"  public void testMultipleDocs() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      String content = \"the answer is \" + i;\n      if ((i & 1) == 0) {\n        content += \" some more terms\";\n      }\n      doc.add(new Field(\"body\", content, fieldType));\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      iw.addDocument(doc);\n\n      if (random().nextInt(10) == 2) {\n        iw.commit();\n      }\n    }\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, indexAnalyzer);\n    highlighter.setCacheFieldValCharsThreshold(random().nextInt(10) * 10);// 0 thru 90 intervals of 10\n    Query query = new TermQuery(new Term(\"body\", \"answer\"));\n    TopDocs hits = searcher.search(query, numDocs);\n    assertEquals(numDocs, hits.totalHits);\n\n    String snippets[] = highlighter.highlight(\"body\", query, hits);\n    assertEquals(numDocs, snippets.length);\n    for (int hit = 0; hit < numDocs; hit++) {\n      Document doc = searcher.doc(hits.scoreDocs[hit].doc);\n      int id = Integer.parseInt(doc.get(\"id\"));\n      String expected = \"the <b>answer</b> is \" + id;\n      if ((id & 1) == 0) {\n        expected += \" some more terms\";\n      }\n      assertEquals(expected, snippets[hit]);\n    }\n\n    ir.close();\n  }\n\n","sourceOld":"  public void testMultipleDocs() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      String content = \"the answer is \" + i;\n      if ((i & 1) == 0) {\n        content += \" some more terms\";\n      }\n      doc.add(new Field(\"body\", content, fieldType));\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      iw.addDocument(doc);\n\n      if (random().nextInt(10) == 2) {\n        iw.commit();\n      }\n    }\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = new UnifiedHighlighter(searcher, indexAnalyzer);\n    highlighter.setCacheFieldValCharsThreshold(random().nextInt(10) * 10);// 0 thru 90 intervals of 10\n    Query query = new TermQuery(new Term(\"body\", \"answer\"));\n    TopDocs hits = searcher.search(query, numDocs);\n    assertEquals(numDocs, hits.totalHits);\n\n    String snippets[] = highlighter.highlight(\"body\", query, hits);\n    assertEquals(numDocs, snippets.length);\n    for (int hit = 0; hit < numDocs; hit++) {\n      Document doc = searcher.doc(hits.scoreDocs[hit].doc);\n      int id = Integer.parseInt(doc.get(\"id\"));\n      String expected = \"the <b>answer</b> is \" + id;\n      if ((id & 1) == 0) {\n        expected += \" some more terms\";\n      }\n      assertEquals(expected, snippets[hit]);\n    }\n\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testMultipleDocs().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighter#testMultipleDocs().mjava","sourceNew":"  public void testMultipleDocs() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      String content = \"the answer is \" + i;\n      if ((i & 1) == 0) {\n        content += \" some more terms\";\n      }\n      doc.add(new Field(\"body\", content, fieldType));\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      iw.addDocument(doc);\n\n      if (random().nextInt(10) == 2) {\n        iw.commit();\n      }\n    }\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, indexAnalyzer);\n    highlighter.setCacheFieldValCharsThreshold(random().nextInt(10) * 10);// 0 thru 90 intervals of 10\n    Query query = new TermQuery(new Term(\"body\", \"answer\"));\n    TopDocs hits = searcher.search(query, numDocs);\n    assertEquals(numDocs, hits.totalHits.value);\n\n    String snippets[] = highlighter.highlight(\"body\", query, hits);\n    assertEquals(numDocs, snippets.length);\n    for (int hit = 0; hit < numDocs; hit++) {\n      Document doc = searcher.doc(hits.scoreDocs[hit].doc);\n      int id = Integer.parseInt(doc.get(\"id\"));\n      String expected = \"the <b>answer</b> is \" + id;\n      if ((id & 1) == 0) {\n        expected += \" some more terms\";\n      }\n      assertEquals(expected, snippets[hit]);\n    }\n\n    ir.close();\n  }\n\n","sourceOld":"  public void testMultipleDocs() throws Exception {\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, indexAnalyzer);\n\n    int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      String content = \"the answer is \" + i;\n      if ((i & 1) == 0) {\n        content += \" some more terms\";\n      }\n      doc.add(new Field(\"body\", content, fieldType));\n      doc.add(newStringField(\"id\", \"\" + i, Field.Store.YES));\n      iw.addDocument(doc);\n\n      if (random().nextInt(10) == 2) {\n        iw.commit();\n      }\n    }\n\n    IndexReader ir = iw.getReader();\n    iw.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    UnifiedHighlighter highlighter = randomUnifiedHighlighter(searcher, indexAnalyzer);\n    highlighter.setCacheFieldValCharsThreshold(random().nextInt(10) * 10);// 0 thru 90 intervals of 10\n    Query query = new TermQuery(new Term(\"body\", \"answer\"));\n    TopDocs hits = searcher.search(query, numDocs);\n    assertEquals(numDocs, hits.totalHits);\n\n    String snippets[] = highlighter.highlight(\"body\", query, hits);\n    assertEquals(numDocs, snippets.length);\n    for (int hit = 0; hit < numDocs; hit++) {\n      Document doc = searcher.doc(hits.scoreDocs[hit].doc);\n      int id = Integer.parseInt(doc.get(\"id\"));\n      String expected = \"the <b>answer</b> is \" + id;\n      if ((id & 1) == 0) {\n        expected += \" some more terms\";\n      }\n      assertEquals(expected, snippets[hit]);\n    }\n\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["b94236357aaa22b76c10629851fe4e376e0cea82","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["b94236357aaa22b76c10629851fe4e376e0cea82"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}