{"path":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkClusters(List,int,int,int).mjava","commits":[{"id":"0a2a4e39332de25d2866f373dbf3991a7125b31d","date":1246542679,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkClusters(List,int,int,int).mjava","pathOld":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkClusters(NamedList,int,int,int).mjava","sourceNew":"\tprivate void checkClusters(List results, int expectedDocCount,\n\t\t\tint expectedLabelCount, int expectedSubclusterCount) {\n\t\tfor (int i = 0; i < results.size(); i++) {\n\t\t\t\tNamedList cluster = (NamedList) results.get(i);\n\t\t\t\tcheckCluster(cluster, expectedDocCount, expectedLabelCount,\n\t\t\t\t\t\texpectedSubclusterCount);\n\t\t}\n\t}\n\n","sourceOld":"\tprivate void checkClusters(NamedList results, int expectedDocCount,\n\t\t\tint expectedLabelCount, int expectedSubclusterCount) {\n\t\tfor (int i = 0; i < results.size(); i++) {\n\t\t\tif (results.getName(i).equals(\"cluster\")) {\n\t\t\t\tNamedList cluster = (NamedList) results.getVal(i);\n\t\t\t\tcheckCluster(cluster, expectedDocCount, expectedLabelCount,\n\t\t\t\t\t\texpectedSubclusterCount);\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8","date":1246543717,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkClusters(List,int,int,int).mjava","pathOld":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkClusters(List,int,int,int).mjava","sourceNew":"  private void checkClusters(List results, int expectedDocCount,\n                             int expectedLabelCount, int expectedSubclusterCount) {\n    for (int i = 0; i < results.size(); i++) {\n      NamedList cluster = (NamedList) results.get(i);\n      checkCluster(cluster, expectedDocCount, expectedLabelCount,\n              expectedSubclusterCount);\n    }\n  }\n\n","sourceOld":"\tprivate void checkClusters(List results, int expectedDocCount,\n\t\t\tint expectedLabelCount, int expectedSubclusterCount) {\n\t\tfor (int i = 0; i < results.size(); i++) {\n\t\t\t\tNamedList cluster = (NamedList) results.get(i);\n\t\t\t\tcheckCluster(cluster, expectedDocCount, expectedLabelCount,\n\t\t\t\t\t\texpectedSubclusterCount);\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkClusters(List,int,int,int).mjava","pathOld":"contrib/clustering/src/test/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#checkClusters(List,int,int,int).mjava","sourceNew":"  private void checkClusters(List results, int expectedDocCount,\n                             int expectedLabelCount, int expectedSubclusterCount) {\n    for (int i = 0; i < results.size(); i++) {\n      NamedList cluster = (NamedList) results.get(i);\n      checkCluster(cluster, expectedDocCount, expectedLabelCount,\n              expectedSubclusterCount);\n    }\n  }\n\n","sourceOld":"  private void checkClusters(List results, int expectedDocCount,\n                             int expectedLabelCount, int expectedSubclusterCount) {\n    for (int i = 0; i < results.size(); i++) {\n      NamedList cluster = (NamedList) results.get(i);\n      checkCluster(cluster, expectedDocCount, expectedLabelCount,\n              expectedSubclusterCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2a4e39332de25d2866f373dbf3991a7125b31d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8":["0a2a4e39332de25d2866f373dbf3991a7125b31d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["d2771e5f68dda632a1044fdfecbc7bffae0a4ea8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a2a4e39332de25d2866f373dbf3991a7125b31d":["d2771e5f68dda632a1044fdfecbc7bffae0a4ea8"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0a2a4e39332de25d2866f373dbf3991a7125b31d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}