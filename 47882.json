{"path":"src/test/org/apache/solr/analysis/TestStopFilterFactory#testInform().mjava","commits":[{"id":"fb04b610ed800cee9bf5697f6462cf645d4f4866","date":1238616464,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestStopFilterFactory#testInform().mjava","pathOld":"/dev/null","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = solrConfig.getResourceLoader();\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = new StopFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.init(args);\n    factory.inform(loader);\n    Set words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d32aa039d84ab454629ee28b64c63d777b5c9ce3","date":1268237977,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestStopFilterFactory#testInform().mjava","pathOld":"src/test/org/apache/solr/analysis/TestStopFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = new StopFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.init(args);\n    factory.inform(loader);\n    Set words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = solrConfig.getResourceLoader();\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = new StopFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.init(args);\n    factory.inform(loader);\n    Set words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestStopFilterFactory#testInform().mjava","pathOld":"src/test/org/apache/solr/analysis/TestStopFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = new StopFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.init(args);\n    factory.inform(loader);\n    Set words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(null, null);\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    StopFilterFactory factory = new StopFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"words\", \"stop-1.txt\");\n    args.put(\"ignoreCase\", \"true\");\n    factory.init(args);\n    factory.inform(loader);\n    Set words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = new StopFilterFactory();\n    args.put(\"words\", \"stop-1.txt, stop-2.txt\");\n    factory.init(args);\n    factory.inform(loader);\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d32aa039d84ab454629ee28b64c63d777b5c9ce3":["fb04b610ed800cee9bf5697f6462cf645d4f4866"],"fb04b610ed800cee9bf5697f6462cf645d4f4866":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["d32aa039d84ab454629ee28b64c63d777b5c9ce3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d32aa039d84ab454629ee28b64c63d777b5c9ce3":["ad94625fb8d088209f46650c8097196fec67f00c"],"fb04b610ed800cee9bf5697f6462cf645d4f4866":["d32aa039d84ab454629ee28b64c63d777b5c9ce3"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fb04b610ed800cee9bf5697f6462cf645d4f4866"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}