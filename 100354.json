{"path":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,IndexReader).mjava","commits":[{"id":"16654870c57d61d467833c7409f0102361ef758b","date":1282600576,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public DocValues getValues(Map context, final IndexReader reader) throws IOException \r\n  {\r\n    final DocTerms terms = cache.getTerms(reader, field, true );\r\n    \r\n    return new DocValues() {\r\n\r\n      public int intVal(int doc) \r\n      {\r\n        try {\r\n          BytesRef ref = new BytesRef();\r\n          terms.getTerm(doc, ref);\r\n          int v = reader.docFreq( qfield, ref ); \r\n          //System.out.println( NAME+\"[\"+ref.utf8ToString()+\"=\"+v+\"]\" );\r\n          return v;\r\n        } \r\n        catch (IOException e) {\r\n          e.printStackTrace();\r\n        }\r\n        return 0;\r\n      }\r\n\r\n      public float floatVal(int doc) {\r\n        return (float)intVal(doc);\r\n      }\r\n\r\n      public long longVal(int doc) {\r\n        return (long)intVal(doc);\r\n      }\r\n\r\n      public double doubleVal(int doc) {\r\n        return (double)intVal(doc);\r\n      }\r\n\r\n      public String strVal(int doc) {\r\n        return intVal(doc) + \"\";\r\n      }\r\n\r\n      public String toString(int doc) {\r\n        return description() + '=' + intVal(doc);\r\n      }\r\n    };\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef653241ed918f0ca585ee4694696c124e6fa383","date":1282968943,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, final IndexReader reader) throws IOException \r\n  {\r\n    final DocTerms terms = cache.getTerms(reader, field, true );\r\n    \r\n    return new DocValues() {\r\n\r\n      public int intVal(int doc) \r\n      {\r\n        try {\r\n          BytesRef ref = new BytesRef();\r\n          terms.getTerm(doc, ref);\r\n          int v = reader.docFreq( qfield, ref ); \r\n          //System.out.println( NAME+\"[\"+ref.utf8ToString()+\"=\"+v+\"]\" );\r\n          return v;\r\n        } \r\n        catch (IOException e) {\r\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\r\n        }\r\n      }\r\n\r\n      public float floatVal(int doc) {\r\n        return (float)intVal(doc);\r\n      }\r\n\r\n      public long longVal(int doc) {\r\n        return (long)intVal(doc);\r\n      }\r\n\r\n      public double doubleVal(int doc) {\r\n        return (double)intVal(doc);\r\n      }\r\n\r\n      public String strVal(int doc) {\r\n        return intVal(doc) + \"\";\r\n      }\r\n\r\n      public String toString(int doc) {\r\n        return description() + '=' + intVal(doc);\r\n      }\r\n    };\r\n  }\r\n\n","sourceOld":"  public DocValues getValues(Map context, final IndexReader reader) throws IOException \r\n  {\r\n    final DocTerms terms = cache.getTerms(reader, field, true );\r\n    \r\n    return new DocValues() {\r\n\r\n      public int intVal(int doc) \r\n      {\r\n        try {\r\n          BytesRef ref = new BytesRef();\r\n          terms.getTerm(doc, ref);\r\n          int v = reader.docFreq( qfield, ref ); \r\n          //System.out.println( NAME+\"[\"+ref.utf8ToString()+\"=\"+v+\"]\" );\r\n          return v;\r\n        } \r\n        catch (IOException e) {\r\n          e.printStackTrace();\r\n        }\r\n        return 0;\r\n      }\r\n\r\n      public float floatVal(int doc) {\r\n        return (float)intVal(doc);\r\n      }\r\n\r\n      public long longVal(int doc) {\r\n        return (long)intVal(doc);\r\n      }\r\n\r\n      public double doubleVal(int doc) {\r\n        return (double)intVal(doc);\r\n      }\r\n\r\n      public String strVal(int doc) {\r\n        return intVal(doc) + \"\";\r\n      }\r\n\r\n      public String toString(int doc) {\r\n        return description() + '=' + intVal(doc);\r\n      }\r\n    };\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","date":1286051536,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, final IndexReader reader) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(reader, field, true );\n    \n    return new DocValues() {\n\n      public int intVal(int doc) \n      {\n        try {\n          BytesRef ref = new BytesRef();\n          terms.getTerm(doc, ref);\n          int v = reader.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+ref.utf8ToString()+\"=\"+v+\"]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, final IndexReader reader) throws IOException \r\n  {\r\n    final DocTerms terms = cache.getTerms(reader, field, true );\r\n    \r\n    return new DocValues() {\r\n\r\n      public int intVal(int doc) \r\n      {\r\n        try {\r\n          BytesRef ref = new BytesRef();\r\n          terms.getTerm(doc, ref);\r\n          int v = reader.docFreq( qfield, ref ); \r\n          //System.out.println( NAME+\"[\"+ref.utf8ToString()+\"=\"+v+\"]\" );\r\n          return v;\r\n        } \r\n        catch (IOException e) {\r\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\r\n        }\r\n      }\r\n\r\n      public float floatVal(int doc) {\r\n        return (float)intVal(doc);\r\n      }\r\n\r\n      public long longVal(int doc) {\r\n        return (long)intVal(doc);\r\n      }\r\n\r\n      public double doubleVal(int doc) {\r\n        return (double)intVal(doc);\r\n      }\r\n\r\n      public String strVal(int doc) {\r\n        return intVal(doc) + \"\";\r\n      }\r\n\r\n      public String toString(int doc) {\r\n        return description() + '=' + intVal(doc);\r\n      }\r\n    };\r\n  }\r\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","eab6257f88c57d52d7b938de0c10b5144cf1a9c5","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eab6257f88c57d52d7b938de0c10b5144cf1a9c5","date":1288030987,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(reader, field, true );\n    \n    int offset = 0;\n    IndexReader topReader = reader;\n    if (topReader instanceof SolrIndexReader) {\n      SolrIndexReader r = (SolrIndexReader)topReader;\n      while (r.getParent() != null) {\n        offset += r.getBase();\n        r = r.getParent();\n      }\n      topReader = r;\n    }\n    final IndexReader top = topReader;\n    \n    return new DocValues() {\n      BytesRef ref = new BytesRef();\n\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, final IndexReader reader) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(reader, field, true );\n    \n    return new DocValues() {\n\n      public int intVal(int doc) \n      {\n        try {\n          BytesRef ref = new BytesRef();\n          terms.getTerm(doc, ref);\n          int v = reader.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+ref.utf8ToString()+\"=\"+v+\"]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","bugFix":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(reader, field, true );\n    \n    int offset = 0;\n    IndexReader topReader = reader;\n    if (topReader instanceof SolrIndexReader) {\n      SolrIndexReader r = (SolrIndexReader)topReader;\n      while (r.getParent() != null) {\n        offset += r.getBase();\n        r = r.getParent();\n      }\n      topReader = r;\n    }\n    final IndexReader top = topReader;\n    \n    return new DocValues() {\n      BytesRef ref = new BytesRef();\n\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, final IndexReader reader) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(reader, field, true );\n    \n    return new DocValues() {\n\n      public int intVal(int doc) \n      {\n        try {\n          BytesRef ref = new BytesRef();\n          terms.getTerm(doc, ref);\n          int v = reader.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+ref.utf8ToString()+\"=\"+v+\"]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(reader, field, true );\n    \n    int offset = 0;\n    IndexReader topReader = reader;\n    if (topReader instanceof SolrIndexReader) {\n      SolrIndexReader r = (SolrIndexReader)topReader;\n      while (r.getParent() != null) {\n        offset += r.getBase();\n        r = r.getParent();\n      }\n      topReader = r;\n    }\n    final IndexReader top = topReader;\n    \n    return new DocValues() {\n      BytesRef ref = new BytesRef();\n\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(readerContext.reader, field, true );\n    final IndexReader top = ReaderUtil.getTopLevelContext(readerContext).reader;\n    \n    return new DocValues() {\n      BytesRef ref = new BytesRef();\n\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(reader, field, true );\n    \n    int offset = 0;\n    IndexReader topReader = reader;\n    if (topReader instanceof SolrIndexReader) {\n      SolrIndexReader r = (SolrIndexReader)topReader;\n      while (r.getParent() != null) {\n        offset += r.getBase();\n        r = r.getParent();\n      }\n      topReader = r;\n    }\n    final IndexReader top = topReader;\n    \n    return new DocValues() {\n      BytesRef ref = new BytesRef();\n\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(reader, field, true );\n    \n    int offset = 0;\n    IndexReader topReader = reader;\n    if (topReader instanceof SolrIndexReader) {\n      SolrIndexReader r = (SolrIndexReader)topReader;\n      while (r.getParent() != null) {\n        offset += r.getBase();\n        r = r.getParent();\n      }\n      topReader = r;\n    }\n    final IndexReader top = topReader;\n    \n    return new DocValues() {\n      BytesRef ref = new BytesRef();\n\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/JoinDocFreqValueSource#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException \n  {\n    final DocTerms terms = cache.getTerms(reader, field, true );\n    \n    int offset = 0;\n    IndexReader topReader = reader;\n    if (topReader instanceof SolrIndexReader) {\n      SolrIndexReader r = (SolrIndexReader)topReader;\n      while (r.getParent() != null) {\n        offset += r.getBase();\n        r = r.getParent();\n      }\n      topReader = r;\n    }\n    final IndexReader top = topReader;\n    \n    return new DocValues() {\n      BytesRef ref = new BytesRef();\n\n      public int intVal(int doc) \n      {\n        try {\n          terms.getTerm(doc, ref);\n          int v = top.docFreq( qfield, ref ); \n          //System.out.println( NAME+\"[\"+field+\"=\"+ref.utf8ToString()+\"=(\"+qfield+\":\"+v+\")]\" );\n          return v;\n        } \n        catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n\n      public float floatVal(int doc) {\n        return (float)intVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long)intVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        return (double)intVal(doc);\n      }\n\n      public String strVal(int doc) {\n        return intVal(doc) + \"\";\n      }\n\n      public String toString(int doc) {\n        return description() + '=' + intVal(doc);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["ef653241ed918f0ca585ee4694696c124e6fa383"],"c220849f876de24a79f756f65b3eb045db59f63f":["eab6257f88c57d52d7b938de0c10b5144cf1a9c5"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["b12d3e81e0f95a4527b5703953c503f71120ffcc","c220849f876de24a79f756f65b3eb045db59f63f"],"16654870c57d61d467833c7409f0102361ef758b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eab6257f88c57d52d7b938de0c10b5144cf1a9c5":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","eab6257f88c57d52d7b938de0c10b5144cf1a9c5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eab6257f88c57d52d7b938de0c10b5144cf1a9c5"],"ef653241ed918f0ca585ee4694696c124e6fa383":["16654870c57d61d467833c7409f0102361ef758b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c220849f876de24a79f756f65b3eb045db59f63f"]},"commit2Childs":{"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["eab6257f88c57d52d7b938de0c10b5144cf1a9c5","b12d3e81e0f95a4527b5703953c503f71120ffcc"],"c220849f876de24a79f756f65b3eb045db59f63f":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"16654870c57d61d467833c7409f0102361ef758b":["ef653241ed918f0ca585ee4694696c124e6fa383"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16654870c57d61d467833c7409f0102361ef758b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"eab6257f88c57d52d7b938de0c10b5144cf1a9c5":["c220849f876de24a79f756f65b3eb045db59f63f","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"ef653241ed918f0ca585ee4694696c124e6fa383":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}