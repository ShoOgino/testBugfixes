{"path":"solr/core/src/java/org/apache/solr/handler/admin/SegmentsInfoRequestHandler#getMergeCandidatesNames(SolrQueryRequest,SegmentInfos).mjava","commits":[{"id":"26db0fd7da61a97dcbf4558f4fd1ebed330bbd45","date":1425862488,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SegmentsInfoRequestHandler#getMergeCandidatesNames(SolrQueryRequest,SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  private List<String> getMergeCandidatesNames(SolrQueryRequest req, SegmentInfos infos) throws IOException {\n    List<String> result = new ArrayList<String>();\n    IndexWriter indexWriter = getIndexWriter(req);\n    //get chosen merge policy\n    MergePolicy mp = indexWriter.getConfig().getMergePolicy();\n    //Find merges\n    MergeSpecification findMerges = mp.findMerges(MergeTrigger.EXPLICIT, infos, indexWriter);\n    if (findMerges != null && findMerges.merges != null && findMerges.merges.size() > 0) {\n      for (OneMerge merge : findMerges.merges) {\n        //TODO: add merge grouping\n        for (SegmentCommitInfo mergeSegmentInfo : merge.segments) {\n          result.add(mergeSegmentInfo.info.name);\n        }\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e926e4cc756bb6454b38853383081275d450a63a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SegmentsInfoRequestHandler#getMergeCandidatesNames(SolrQueryRequest,SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  private List<String> getMergeCandidatesNames(SolrQueryRequest req, SegmentInfos infos) throws IOException {\n    List<String> result = new ArrayList<String>();\n    IndexWriter indexWriter = getIndexWriter(req);\n    //get chosen merge policy\n    MergePolicy mp = indexWriter.getConfig().getMergePolicy();\n    //Find merges\n    MergeSpecification findMerges = mp.findMerges(MergeTrigger.EXPLICIT, infos, indexWriter);\n    if (findMerges != null && findMerges.merges != null && findMerges.merges.size() > 0) {\n      for (OneMerge merge : findMerges.merges) {\n        //TODO: add merge grouping\n        for (SegmentCommitInfo mergeSegmentInfo : merge.segments) {\n          result.add(mergeSegmentInfo.info.name);\n        }\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e926e4cc756bb6454b38853383081275d450a63a","date":1439214705,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SegmentsInfoRequestHandler#getMergeCandidatesNames(SolrQueryRequest,SegmentInfos).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SegmentsInfoRequestHandler#getMergeCandidatesNames(SolrQueryRequest,SegmentInfos).mjava","sourceNew":"  private List<String> getMergeCandidatesNames(SolrQueryRequest req, SegmentInfos infos) throws IOException {\n    List<String> result = new ArrayList<String>();\n    RefCounted<IndexWriter> refCounted = req.getCore().getSolrCoreState().getIndexWriter(req.getCore());\n    try {\n      IndexWriter indexWriter = refCounted.get();\n      //get chosen merge policy\n      MergePolicy mp = indexWriter.getConfig().getMergePolicy();\n      //Find merges\n      MergeSpecification findMerges = mp.findMerges(MergeTrigger.EXPLICIT, infos, indexWriter);\n      if (findMerges != null && findMerges.merges != null && findMerges.merges.size() > 0) {\n        for (OneMerge merge : findMerges.merges) {\n          //TODO: add merge grouping\n          for (SegmentCommitInfo mergeSegmentInfo : merge.segments) {\n            result.add(mergeSegmentInfo.info.name);\n          }\n        }\n      }\n\n      return result;\n    } finally {\n      refCounted.decref();\n    }\n  }\n\n","sourceOld":"  private List<String> getMergeCandidatesNames(SolrQueryRequest req, SegmentInfos infos) throws IOException {\n    List<String> result = new ArrayList<String>();\n    IndexWriter indexWriter = getIndexWriter(req);\n    //get chosen merge policy\n    MergePolicy mp = indexWriter.getConfig().getMergePolicy();\n    //Find merges\n    MergeSpecification findMerges = mp.findMerges(MergeTrigger.EXPLICIT, infos, indexWriter);\n    if (findMerges != null && findMerges.merges != null && findMerges.merges.size() > 0) {\n      for (OneMerge merge : findMerges.merges) {\n        //TODO: add merge grouping\n        for (SegmentCommitInfo mergeSegmentInfo : merge.segments) {\n          result.add(mergeSegmentInfo.info.name);\n        }\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":["26db0fd7da61a97dcbf4558f4fd1ebed330bbd45"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3470ed04f0378c1ceb02e540e3296dd27c0ae3d5","date":1552136881,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SegmentsInfoRequestHandler#getMergeInformation(SolrQueryRequest,SegmentInfos,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SegmentsInfoRequestHandler#getMergeCandidatesNames(SolrQueryRequest,SegmentInfos).mjava","sourceNew":"  // returns a map of currently running merges, and populates a list of candidate segments for merge\n  private SimpleOrderedMap<Object> getMergeInformation(SolrQueryRequest req, SegmentInfos infos, List<String> mergeCandidates) throws IOException {\n    SimpleOrderedMap<Object> result = new SimpleOrderedMap<>();\n    RefCounted<IndexWriter> refCounted = req.getCore().getSolrCoreState().getIndexWriter(req.getCore());\n    try {\n      IndexWriter indexWriter = refCounted.get();\n      if (indexWriter instanceof SolrIndexWriter) {\n        result.addAll(((SolrIndexWriter)indexWriter).getRunningMerges());\n      }\n      //get chosen merge policy\n      MergePolicy mp = indexWriter.getConfig().getMergePolicy();\n      //Find merges\n      MergeSpecification findMerges = mp.findMerges(MergeTrigger.EXPLICIT, infos, indexWriter);\n      if (findMerges != null && findMerges.merges != null && findMerges.merges.size() > 0) {\n        for (OneMerge merge : findMerges.merges) {\n          //TODO: add merge grouping\n          for (SegmentCommitInfo mergeSegmentInfo : merge.segments) {\n            mergeCandidates.add(mergeSegmentInfo.info.name);\n          }\n        }\n      }\n\n      return result;\n    } finally {\n      refCounted.decref();\n    }\n  }\n\n","sourceOld":"  private List<String> getMergeCandidatesNames(SolrQueryRequest req, SegmentInfos infos) throws IOException {\n    List<String> result = new ArrayList<String>();\n    RefCounted<IndexWriter> refCounted = req.getCore().getSolrCoreState().getIndexWriter(req.getCore());\n    try {\n      IndexWriter indexWriter = refCounted.get();\n      //get chosen merge policy\n      MergePolicy mp = indexWriter.getConfig().getMergePolicy();\n      //Find merges\n      MergeSpecification findMerges = mp.findMerges(MergeTrigger.EXPLICIT, infos, indexWriter);\n      if (findMerges != null && findMerges.merges != null && findMerges.merges.size() > 0) {\n        for (OneMerge merge : findMerges.merges) {\n          //TODO: add merge grouping\n          for (SegmentCommitInfo mergeSegmentInfo : merge.segments) {\n            result.add(mergeSegmentInfo.info.name);\n          }\n        }\n      }\n\n      return result;\n    } finally {\n      refCounted.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e926e4cc756bb6454b38853383081275d450a63a":["26db0fd7da61a97dcbf4558f4fd1ebed330bbd45"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","26db0fd7da61a97dcbf4558f4fd1ebed330bbd45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3470ed04f0378c1ceb02e540e3296dd27c0ae3d5":["e926e4cc756bb6454b38853383081275d450a63a"],"26db0fd7da61a97dcbf4558f4fd1ebed330bbd45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3470ed04f0378c1ceb02e540e3296dd27c0ae3d5"]},"commit2Childs":{"e926e4cc756bb6454b38853383081275d450a63a":["3470ed04f0378c1ceb02e540e3296dd27c0ae3d5"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","26db0fd7da61a97dcbf4558f4fd1ebed330bbd45"],"3470ed04f0378c1ceb02e540e3296dd27c0ae3d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"26db0fd7da61a97dcbf4558f4fd1ebed330bbd45":["e926e4cc756bb6454b38853383081275d450a63a","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}