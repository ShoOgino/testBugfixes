{"path":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Pick the action\n    SolrParams params = req.getParams();\n    CdcrParams.CdcrAction action = null;\n    String a = params.get(CommonParams.ACTION);\n    if (a != null) {\n      action = CdcrParams.CdcrAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case START: {\n        this.handleStartAction(req, rsp);\n        break;\n      }\n      case STOP: {\n        this.handleStopAction(req, rsp);\n        break;\n      }\n      case STATUS: {\n        this.handleStatusAction(req, rsp);\n        break;\n      }\n      case COLLECTIONCHECKPOINT: {\n        this.handleCollectionCheckpointAction(req, rsp);\n        break;\n      }\n      case SHARDCHECKPOINT: {\n        this.handleShardCheckpointAction(req, rsp);\n        break;\n      }\n      case ENABLEBUFFER: {\n        this.handleEnableBufferAction(req, rsp);\n        break;\n      }\n      case DISABLEBUFFER: {\n        this.handleDisableBufferAction(req, rsp);\n        break;\n      }\n      case LASTPROCESSEDVERSION: {\n        this.handleLastProcessedVersionAction(req, rsp);\n        break;\n      }\n      case QUEUES: {\n        this.handleQueuesAction(req, rsp);\n        break;\n      }\n      case OPS: {\n        this.handleOpsAction(req, rsp);\n        break;\n      }\n      case ERRORS: {\n        this.handleErrorsAction(req, rsp);\n        break;\n      }\n      default: {\n        throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06e38ae84477e7a7eacea808dc3de9950fce5ccf","date":1470634560,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Pick the action\n    SolrParams params = req.getParams();\n    CdcrParams.CdcrAction action = null;\n    String a = params.get(CommonParams.ACTION);\n    if (a != null) {\n      action = CdcrParams.CdcrAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case START: {\n        this.handleStartAction(req, rsp);\n        break;\n      }\n      case STOP: {\n        this.handleStopAction(req, rsp);\n        break;\n      }\n      case STATUS: {\n        this.handleStatusAction(req, rsp);\n        break;\n      }\n      case COLLECTIONCHECKPOINT: {\n        this.handleCollectionCheckpointAction(req, rsp);\n        break;\n      }\n      case SHARDCHECKPOINT: {\n        this.handleShardCheckpointAction(req, rsp);\n        break;\n      }\n      case ENABLEBUFFER: {\n        this.handleEnableBufferAction(req, rsp);\n        break;\n      }\n      case DISABLEBUFFER: {\n        this.handleDisableBufferAction(req, rsp);\n        break;\n      }\n      case LASTPROCESSEDVERSION: {\n        this.handleLastProcessedVersionAction(req, rsp);\n        break;\n      }\n      case QUEUES: {\n        this.handleQueuesAction(req, rsp);\n        break;\n      }\n      case OPS: {\n        this.handleOpsAction(req, rsp);\n        break;\n      }\n      case ERRORS: {\n        this.handleErrorsAction(req, rsp);\n        break;\n      }\n      case BOOTSTRAP: {\n        this.handleBootstrapAction(req, rsp);\n        break;\n      }\n      case BOOTSTRAP_STATUS:  {\n        this.handleBootstrapStatus(req, rsp);\n        break;\n      }\n      case CANCEL_BOOTSTRAP:  {\n        this.handleCancelBootstrap(req, rsp);\n        break;\n      }\n      default: {\n        throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Pick the action\n    SolrParams params = req.getParams();\n    CdcrParams.CdcrAction action = null;\n    String a = params.get(CommonParams.ACTION);\n    if (a != null) {\n      action = CdcrParams.CdcrAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case START: {\n        this.handleStartAction(req, rsp);\n        break;\n      }\n      case STOP: {\n        this.handleStopAction(req, rsp);\n        break;\n      }\n      case STATUS: {\n        this.handleStatusAction(req, rsp);\n        break;\n      }\n      case COLLECTIONCHECKPOINT: {\n        this.handleCollectionCheckpointAction(req, rsp);\n        break;\n      }\n      case SHARDCHECKPOINT: {\n        this.handleShardCheckpointAction(req, rsp);\n        break;\n      }\n      case ENABLEBUFFER: {\n        this.handleEnableBufferAction(req, rsp);\n        break;\n      }\n      case DISABLEBUFFER: {\n        this.handleDisableBufferAction(req, rsp);\n        break;\n      }\n      case LASTPROCESSEDVERSION: {\n        this.handleLastProcessedVersionAction(req, rsp);\n        break;\n      }\n      case QUEUES: {\n        this.handleQueuesAction(req, rsp);\n        break;\n      }\n      case OPS: {\n        this.handleOpsAction(req, rsp);\n        break;\n      }\n      case ERRORS: {\n        this.handleErrorsAction(req, rsp);\n        break;\n      }\n      default: {\n        throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Pick the action\n    SolrParams params = req.getParams();\n    CdcrParams.CdcrAction action = null;\n    String a = params.get(CommonParams.ACTION);\n    if (a != null) {\n      action = CdcrParams.CdcrAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case START: {\n        this.handleStartAction(req, rsp);\n        break;\n      }\n      case STOP: {\n        this.handleStopAction(req, rsp);\n        break;\n      }\n      case STATUS: {\n        this.handleStatusAction(req, rsp);\n        break;\n      }\n      case COLLECTIONCHECKPOINT: {\n        this.handleCollectionCheckpointAction(req, rsp);\n        break;\n      }\n      case SHARDCHECKPOINT: {\n        this.handleShardCheckpointAction(req, rsp);\n        break;\n      }\n      case ENABLEBUFFER: {\n        this.handleEnableBufferAction(req, rsp);\n        break;\n      }\n      case DISABLEBUFFER: {\n        this.handleDisableBufferAction(req, rsp);\n        break;\n      }\n      case LASTPROCESSEDVERSION: {\n        this.handleLastProcessedVersionAction(req, rsp);\n        break;\n      }\n      case QUEUES: {\n        this.handleQueuesAction(req, rsp);\n        break;\n      }\n      case OPS: {\n        this.handleOpsAction(req, rsp);\n        break;\n      }\n      case ERRORS: {\n        this.handleErrorsAction(req, rsp);\n        break;\n      }\n      case BOOTSTRAP: {\n        this.handleBootstrapAction(req, rsp);\n        break;\n      }\n      case BOOTSTRAP_STATUS:  {\n        this.handleBootstrapStatus(req, rsp);\n        break;\n      }\n      case CANCEL_BOOTSTRAP:  {\n        this.handleCancelBootstrap(req, rsp);\n        break;\n      }\n      default: {\n        throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Pick the action\n    SolrParams params = req.getParams();\n    CdcrParams.CdcrAction action = null;\n    String a = params.get(CommonParams.ACTION);\n    if (a != null) {\n      action = CdcrParams.CdcrAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case START: {\n        this.handleStartAction(req, rsp);\n        break;\n      }\n      case STOP: {\n        this.handleStopAction(req, rsp);\n        break;\n      }\n      case STATUS: {\n        this.handleStatusAction(req, rsp);\n        break;\n      }\n      case COLLECTIONCHECKPOINT: {\n        this.handleCollectionCheckpointAction(req, rsp);\n        break;\n      }\n      case SHARDCHECKPOINT: {\n        this.handleShardCheckpointAction(req, rsp);\n        break;\n      }\n      case ENABLEBUFFER: {\n        this.handleEnableBufferAction(req, rsp);\n        break;\n      }\n      case DISABLEBUFFER: {\n        this.handleDisableBufferAction(req, rsp);\n        break;\n      }\n      case LASTPROCESSEDVERSION: {\n        this.handleLastProcessedVersionAction(req, rsp);\n        break;\n      }\n      case QUEUES: {\n        this.handleQueuesAction(req, rsp);\n        break;\n      }\n      case OPS: {\n        this.handleOpsAction(req, rsp);\n        break;\n      }\n      case ERRORS: {\n        this.handleErrorsAction(req, rsp);\n        break;\n      }\n      default: {\n        throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Pick the action\n    SolrParams params = req.getParams();\n    CdcrParams.CdcrAction action = null;\n    String a = params.get(CommonParams.ACTION);\n    if (a != null) {\n      action = CdcrParams.CdcrAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case START: {\n        this.handleStartAction(req, rsp);\n        break;\n      }\n      case STOP: {\n        this.handleStopAction(req, rsp);\n        break;\n      }\n      case STATUS: {\n        this.handleStatusAction(req, rsp);\n        break;\n      }\n      case COLLECTIONCHECKPOINT: {\n        this.handleCollectionCheckpointAction(req, rsp);\n        break;\n      }\n      case SHARDCHECKPOINT: {\n        this.handleShardCheckpointAction(req, rsp);\n        break;\n      }\n      case ENABLEBUFFER: {\n        this.handleEnableBufferAction(req, rsp);\n        break;\n      }\n      case DISABLEBUFFER: {\n        this.handleDisableBufferAction(req, rsp);\n        break;\n      }\n      case LASTPROCESSEDVERSION: {\n        this.handleLastProcessedVersionAction(req, rsp);\n        break;\n      }\n      case QUEUES: {\n        this.handleQueuesAction(req, rsp);\n        break;\n      }\n      case OPS: {\n        this.handleOpsAction(req, rsp);\n        break;\n      }\n      case ERRORS: {\n        this.handleErrorsAction(req, rsp);\n        break;\n      }\n      case BOOTSTRAP: {\n        this.handleBootstrapAction(req, rsp);\n        break;\n      }\n      case BOOTSTRAP_STATUS:  {\n        this.handleBootstrapStatus(req, rsp);\n        break;\n      }\n      case CANCEL_BOOTSTRAP:  {\n        this.handleCancelBootstrap(req, rsp);\n        break;\n      }\n      default: {\n        throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Pick the action\n    SolrParams params = req.getParams();\n    CdcrParams.CdcrAction action = null;\n    String a = params.get(CommonParams.ACTION);\n    if (a != null) {\n      action = CdcrParams.CdcrAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case START: {\n        this.handleStartAction(req, rsp);\n        break;\n      }\n      case STOP: {\n        this.handleStopAction(req, rsp);\n        break;\n      }\n      case STATUS: {\n        this.handleStatusAction(req, rsp);\n        break;\n      }\n      case COLLECTIONCHECKPOINT: {\n        this.handleCollectionCheckpointAction(req, rsp);\n        break;\n      }\n      case SHARDCHECKPOINT: {\n        this.handleShardCheckpointAction(req, rsp);\n        break;\n      }\n      case ENABLEBUFFER: {\n        this.handleEnableBufferAction(req, rsp);\n        break;\n      }\n      case DISABLEBUFFER: {\n        this.handleDisableBufferAction(req, rsp);\n        break;\n      }\n      case LASTPROCESSEDVERSION: {\n        this.handleLastProcessedVersionAction(req, rsp);\n        break;\n      }\n      case QUEUES: {\n        this.handleQueuesAction(req, rsp);\n        break;\n      }\n      case OPS: {\n        this.handleOpsAction(req, rsp);\n        break;\n      }\n      case ERRORS: {\n        this.handleErrorsAction(req, rsp);\n        break;\n      }\n      default: {\n        throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Pick the action\n    SolrParams params = req.getParams();\n    CdcrParams.CdcrAction action = null;\n    String a = params.get(CommonParams.ACTION);\n    if (a != null) {\n      action = CdcrParams.CdcrAction.get(a);\n    }\n    if (action == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown action: \" + a);\n    }\n\n    switch (action) {\n      case START: {\n        this.handleStartAction(req, rsp);\n        break;\n      }\n      case STOP: {\n        this.handleStopAction(req, rsp);\n        break;\n      }\n      case STATUS: {\n        this.handleStatusAction(req, rsp);\n        break;\n      }\n      case COLLECTIONCHECKPOINT: {\n        this.handleCollectionCheckpointAction(req, rsp);\n        break;\n      }\n      case SHARDCHECKPOINT: {\n        this.handleShardCheckpointAction(req, rsp);\n        break;\n      }\n      case ENABLEBUFFER: {\n        this.handleEnableBufferAction(req, rsp);\n        break;\n      }\n      case DISABLEBUFFER: {\n        this.handleDisableBufferAction(req, rsp);\n        break;\n      }\n      case LASTPROCESSEDVERSION: {\n        this.handleLastProcessedVersionAction(req, rsp);\n        break;\n      }\n      case QUEUES: {\n        this.handleQueuesAction(req, rsp);\n        break;\n      }\n      case OPS: {\n        this.handleOpsAction(req, rsp);\n        break;\n      }\n      case ERRORS: {\n        this.handleErrorsAction(req, rsp);\n        break;\n      }\n      case BOOTSTRAP: {\n        this.handleBootstrapAction(req, rsp);\n        break;\n      }\n      case BOOTSTRAP_STATUS:  {\n        this.handleBootstrapStatus(req, rsp);\n        break;\n      }\n      case CANCEL_BOOTSTRAP:  {\n        this.handleCancelBootstrap(req, rsp);\n        break;\n      }\n      default: {\n        throw new RuntimeException(\"Unknown action: \" + action);\n      }\n    }\n\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["86290366cefc1b9d4eced13b430858c4a4c0421d","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["86290366cefc1b9d4eced13b430858c4a4c0421d","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}