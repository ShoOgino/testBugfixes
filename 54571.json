{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/MetricStream#read().mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/MetricStream#read().mjava","pathOld":"/dev/null","sourceNew":"  public Tuple read() throws IOException {\n\n    Tuple tuple = tupleStream.read();\n    if(tuple.EOF) {\n      Iterator<Map.Entry<HashKey,Metric[]>> it = bucketMap.entrySet().iterator();\n\n      if(comp == null) {\n        //Handle No bucket constructor\n        Map.Entry<HashKey, Metric[]> noBucket = it.next();\n        BucketMetrics bms = new BucketMetrics(noBucket.getKey(), noBucket.getValue());\n        this.bucketMetrics = new BucketMetrics[1];\n        this.bucketMetrics[0] = bms;\n        List<Map<String, Double>> outMetrics = new ArrayList();\n        List<String> outKeys = new ArrayList();\n        for(Metric metric : bms.getMetrics()) {\n          Map<String, Double> outMetricValues = metric.metricValues();\n          String outKey = metric.getName();\n          outMetrics.add(outMetricValues);\n          outKeys.add(outKey);\n        }\n        Map outMap = new HashMap();\n        outMap.put(\"buckets\",outKeys);\n        outMap.put(\"metrics\",outMetrics);\n        tuple.set(this.outKey, outMap);\n        return tuple;\n      }\n\n      PriorityQueue<BucketMetrics> priorityQueue = new PriorityQueue(topN, rcomp);\n\n      while(it.hasNext()) {\n        Map.Entry<HashKey, Metric[]> entry = it.next();\n        BucketMetrics bms = new BucketMetrics(entry.getKey(), entry.getValue());\n        if(priorityQueue.size() < topN) {\n          priorityQueue.add(bms);\n        } else {\n          BucketMetrics peek = priorityQueue.peek();\n\n          if(comp.compare(bms, peek) < 0) {\n            priorityQueue.poll();\n            priorityQueue.add(bms);\n          }\n\n        }\n      }\n\n      int s = priorityQueue.size();\n      this.bucketMetrics = new BucketMetrics[s];\n\n      for(int i=bucketMetrics.length-1; i>=0; i--) {\n        BucketMetrics b = priorityQueue.poll();\n        this.bucketMetrics[i]= b;\n      }\n\n      List<List<Map<String, Double>>> outMetrics = new ArrayList();\n      List<String> outBuckets = new ArrayList();\n\n      for(BucketMetrics bms : this.bucketMetrics) {\n        List outBucketMetrics = new ArrayList();\n        for(Metric metric : bms.getMetrics()) {\n          Map<String, Double> outMetricValues = metric.metricValues();\n          outBucketMetrics.add(outMetricValues);\n        }\n        outBuckets.add(bms.getKey().toString());\n        outMetrics.add(outBucketMetrics);\n      }\n\n      Map outMap = new HashMap();\n      outMap.put(\"buckets\",outBuckets);\n      outMap.put(\"metrics\",outMetrics);\n      tuple.set(this.outKey, outMap);\n      return tuple;\n    }\n\n    HashKey hashKey = null;\n    if(buckets != null) {\n      String[] bucketValues = new String[buckets.length];\n      for(int i=0; i<buckets.length; i++) {\n        bucketValues[i] = buckets[i].getBucketValue(tuple);\n      }\n      hashKey = new HashKey(bucketValues);\n    } else {\n      hashKey = metricsKey;\n    }\n\n    Metric[] bucketMetrics = bucketMap.get(hashKey);\n    if(bucketMetrics != null) {\n      for(Metric bucketMetric : bucketMetrics) {\n        bucketMetric.update(tuple);\n      }\n    } else {\n      bucketMetrics = new Metric[metrics.length];\n\n      for(int i=0; i<metrics.length; i++) {\n        Metric bucketMetric = metrics[i].newInstance();\n        bucketMetric.update(tuple);\n        bucketMetrics[i]  = bucketMetric;\n      }\n      bucketMap.put(hashKey, bucketMetrics);\n    }\n    return tuple;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f03b407cd85abd6edd2a1fe7cab9990164aa4b","date":1427303865,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/MetricStream#read().mjava","sourceNew":null,"sourceOld":"  public Tuple read() throws IOException {\n\n    Tuple tuple = tupleStream.read();\n    if(tuple.EOF) {\n      Iterator<Map.Entry<HashKey,Metric[]>> it = bucketMap.entrySet().iterator();\n\n      if(comp == null) {\n        //Handle No bucket constructor\n        Map.Entry<HashKey, Metric[]> noBucket = it.next();\n        BucketMetrics bms = new BucketMetrics(noBucket.getKey(), noBucket.getValue());\n        this.bucketMetrics = new BucketMetrics[1];\n        this.bucketMetrics[0] = bms;\n        List<Map<String, Double>> outMetrics = new ArrayList();\n        List<String> outKeys = new ArrayList();\n        for(Metric metric : bms.getMetrics()) {\n          Map<String, Double> outMetricValues = metric.metricValues();\n          String outKey = metric.getName();\n          outMetrics.add(outMetricValues);\n          outKeys.add(outKey);\n        }\n        Map outMap = new HashMap();\n        outMap.put(\"buckets\",outKeys);\n        outMap.put(\"metrics\",outMetrics);\n        tuple.set(this.outKey, outMap);\n        return tuple;\n      }\n\n      PriorityQueue<BucketMetrics> priorityQueue = new PriorityQueue(topN, rcomp);\n\n      while(it.hasNext()) {\n        Map.Entry<HashKey, Metric[]> entry = it.next();\n        BucketMetrics bms = new BucketMetrics(entry.getKey(), entry.getValue());\n        if(priorityQueue.size() < topN) {\n          priorityQueue.add(bms);\n        } else {\n          BucketMetrics peek = priorityQueue.peek();\n\n          if(comp.compare(bms, peek) < 0) {\n            priorityQueue.poll();\n            priorityQueue.add(bms);\n          }\n\n        }\n      }\n\n      int s = priorityQueue.size();\n      this.bucketMetrics = new BucketMetrics[s];\n\n      for(int i=bucketMetrics.length-1; i>=0; i--) {\n        BucketMetrics b = priorityQueue.poll();\n        this.bucketMetrics[i]= b;\n      }\n\n      List<List<Map<String, Double>>> outMetrics = new ArrayList();\n      List<String> outBuckets = new ArrayList();\n\n      for(BucketMetrics bms : this.bucketMetrics) {\n        List outBucketMetrics = new ArrayList();\n        for(Metric metric : bms.getMetrics()) {\n          Map<String, Double> outMetricValues = metric.metricValues();\n          outBucketMetrics.add(outMetricValues);\n        }\n        outBuckets.add(bms.getKey().toString());\n        outMetrics.add(outBucketMetrics);\n      }\n\n      Map outMap = new HashMap();\n      outMap.put(\"buckets\",outBuckets);\n      outMap.put(\"metrics\",outMetrics);\n      tuple.set(this.outKey, outMap);\n      return tuple;\n    }\n\n    HashKey hashKey = null;\n    if(buckets != null) {\n      String[] bucketValues = new String[buckets.length];\n      for(int i=0; i<buckets.length; i++) {\n        bucketValues[i] = buckets[i].getBucketValue(tuple);\n      }\n      hashKey = new HashKey(bucketValues);\n    } else {\n      hashKey = metricsKey;\n    }\n\n    Metric[] bucketMetrics = bucketMap.get(hashKey);\n    if(bucketMetrics != null) {\n      for(Metric bucketMetric : bucketMetrics) {\n        bucketMetric.update(tuple);\n      }\n    } else {\n      bucketMetrics = new Metric[metrics.length];\n\n      for(int i=0; i<metrics.length; i++) {\n        Metric bucketMetric = metrics[i].newInstance();\n        bucketMetric.update(tuple);\n        bucketMetrics[i]  = bucketMetric;\n      }\n      bucketMap.put(hashKey, bucketMetrics);\n    }\n    return tuple;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["91814ce09be68efd0626969632e79ae47d8876d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"]},"commit2Childs":{"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91814ce09be68efd0626969632e79ae47d8876d4"],"91814ce09be68efd0626969632e79ae47d8876d4":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}