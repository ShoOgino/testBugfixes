{"path":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractDocCollection(String,String).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractDocCollection(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public DocCollection extractDocCollection(String zkHost, String collection) {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    SolrZkClient zkClient = getZkClient(zkHost);\n    \n    try {\n      ZkStateReader zkStateReader = new ZkStateReader(zkClient);\n      try {\n        // first check for alias\n        collection = checkForAlias(zkClient, collection);\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Cannot find expected information for SolrCloud in ZooKeeper: \" + zkHost, e);\n      }\n      \n      try {\n        return zkStateReader.getClusterState().getCollection(collection);\n      } catch (SolrException e) {\n        throw new IllegalArgumentException(\"Cannot find collection '\" + collection + \"' in ZooKeeper: \" + zkHost, e);\n      }\n    } finally {\n      zkClient.close();\n    }    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a7ac6407286ebd80d6754a6586316e11c06f37b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractDocCollection(String,String).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/ZooKeeperInspector#extractDocCollection(String,String).mjava","sourceNew":"  public DocCollection extractDocCollection(String zkHost, String collection) {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    SolrZkClient zkClient = getZkClient(zkHost);\n    \n    try {\n      ZkStateReader zkStateReader = new ZkStateReader(zkClient);\n      try {\n        // first check for alias\n        collection = checkForAlias(zkClient, collection);\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Cannot find expected information for SolrCloud in ZooKeeper: \" + zkHost, e);\n      }\n      \n      try {\n        return zkStateReader.getClusterState().getCollection(collection);\n      } catch (SolrException e) {\n        throw new IllegalArgumentException(\"Cannot find collection '\" + collection + \"' in ZooKeeper: \" + zkHost, e);\n      }\n    } finally {\n      zkClient.close();\n    }    \n  }\n\n","sourceOld":"  public DocCollection extractDocCollection(String zkHost, String collection) {\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }\n    SolrZkClient zkClient = getZkClient(zkHost);\n    \n    try {\n      ZkStateReader zkStateReader = new ZkStateReader(zkClient);\n      try {\n        // first check for alias\n        collection = checkForAlias(zkClient, collection);\n        zkStateReader.createClusterStateWatchersAndUpdate();\n      } catch (Exception e) {\n        throw new IllegalArgumentException(\"Cannot find expected information for SolrCloud in ZooKeeper: \" + zkHost, e);\n      }\n      \n      try {\n        return zkStateReader.getClusterState().getCollection(collection);\n      } catch (SolrException e) {\n        throw new IllegalArgumentException(\"Cannot find collection '\" + collection + \"' in ZooKeeper: \" + zkHost, e);\n      }\n    } finally {\n      zkClient.close();\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}