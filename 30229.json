{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","sourceNew":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\n        QueryNode first, c;\n        Vector clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\n     if (clauses == null) {\n         clauses = new Vector();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\n    if (clauses != null) {\n            {if (true) return new AndQueryNode(clauses);}\n    } else {\n        {if (true) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\n        QueryNode first, c;\n        Vector clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\n     if (clauses == null) {\n         clauses = new Vector();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\n    if (clauses != null) {\n            {if (true) return new AndQueryNode(clauses);}\n    } else {\n        {if (true) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f03d60547476e008d3d993cd26872c1157f19cf","date":1270899773,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","sourceNew":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\r\n        QueryNode first, c;\r\n        Vector clauses = null;\r\n    first = ModClause(field);\r\n    label_3:\r\n    while (true) {\r\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r\n      case AND:\r\n        ;\r\n        break;\r\n      default:\r\n        jj_la1[6] = jj_gen;\r\n        break label_3;\r\n      }\r\n      jj_consume_token(AND);\r\n      c = ModClause(field);\r\n     if (clauses == null) {\r\n         clauses = new Vector();\r\n         clauses.addElement(first);\r\n     }\r\n     clauses.addElement(c);\r\n    }\r\n    if (clauses != null) {\r\n            {if (true) return new AndQueryNode(clauses);}\r\n    } else {\r\n        {if (true) return first;}\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n  }\r\n\n","sourceOld":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\n        QueryNode first, c;\n        Vector clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\n     if (clauses == null) {\n         clauses = new Vector();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\n    if (clauses != null) {\n            {if (true) return new AndQueryNode(clauses);}\n    } else {\n        {if (true) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b","date":1270900166,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","sourceNew":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\n        QueryNode first, c;\n        Vector clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\n     if (clauses == null) {\n         clauses = new Vector();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\n    if (clauses != null) {\n            {if (true) return new AndQueryNode(clauses);}\n    } else {\n        {if (true) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\r\n        QueryNode first, c;\r\n        Vector clauses = null;\r\n    first = ModClause(field);\r\n    label_3:\r\n    while (true) {\r\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r\n      case AND:\r\n        ;\r\n        break;\r\n      default:\r\n        jj_la1[6] = jj_gen;\r\n        break label_3;\r\n      }\r\n      jj_consume_token(AND);\r\n      c = ModClause(field);\r\n     if (clauses == null) {\r\n         clauses = new Vector();\r\n         clauses.addElement(first);\r\n     }\r\n     clauses.addElement(c);\r\n    }\r\n    if (clauses != null) {\r\n            {if (true) return new AndQueryNode(clauses);}\r\n    } else {\r\n        {if (true) return first;}\r\n    }\r\n    throw new Error(\"Missing return statement in function\");\r\n  }\r\n\n","bugFix":null,"bugIntro":["383e6510a01a27ea3d860472f33049ed2c766e15"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4881303d8a0667d9865d91f1d7b7a91e001cd5f5","date":1286123254,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","sourceNew":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\n        QueryNode first, c;\n        Vector<QueryNode> clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\n     if (clauses == null) {\n         clauses = new Vector<QueryNode>();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\n    if (clauses != null) {\n            {if (true) return new AndQueryNode(clauses);}\n    } else {\n        {if (true) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\n        QueryNode first, c;\n        Vector clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\n     if (clauses == null) {\n         clauses = new Vector();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\n    if (clauses != null) {\n            {if (true) return new AndQueryNode(clauses);}\n    } else {\n        {if (true) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","sourceNew":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\n        QueryNode first, c;\n        Vector<QueryNode> clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\n     if (clauses == null) {\n         clauses = new Vector<QueryNode>();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\n    if (clauses != null) {\n            {if (true) return new AndQueryNode(clauses);}\n    } else {\n        {if (true) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\n        QueryNode first, c;\n        Vector clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\n     if (clauses == null) {\n         clauses = new Vector();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\n    if (clauses != null) {\n            {if (true) return new AndQueryNode(clauses);}\n    } else {\n        {if (true) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#ConjQuery(CharSequence).mjava","sourceNew":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\n        QueryNode first, c;\n        Vector<QueryNode> clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\n     if (clauses == null) {\n         clauses = new Vector<QueryNode>();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\n    if (clauses != null) {\n            {if (true) return new AndQueryNode(clauses);}\n    } else {\n        {if (true) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode ConjQuery(CharSequence field) throws ParseException {\n        QueryNode first, c;\n        Vector<QueryNode> clauses = null;\n    first = ModClause(field);\n    label_3:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n        ;\n        break;\n      default:\n        jj_la1[6] = jj_gen;\n        break label_3;\n      }\n      jj_consume_token(AND);\n      c = ModClause(field);\n     if (clauses == null) {\n         clauses = new Vector<QueryNode>();\n         clauses.addElement(first);\n     }\n     clauses.addElement(c);\n    }\n    if (clauses != null) {\n            {if (true) return new AndQueryNode(clauses);}\n    } else {\n        {if (true) return first;}\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["4881303d8a0667d9865d91f1d7b7a91e001cd5f5"],"4881303d8a0667d9865d91f1d7b7a91e001cd5f5":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b","4881303d8a0667d9865d91f1d7b7a91e001cd5f5"],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["1f03d60547476e008d3d993cd26872c1157f19cf"],"1f03d60547476e008d3d993cd26872c1157f19cf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4881303d8a0667d9865d91f1d7b7a91e001cd5f5":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["4881303d8a0667d9865d91f1d7b7a91e001cd5f5","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1f03d60547476e008d3d993cd26872c1157f19cf":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f03d60547476e008d3d993cd26872c1157f19cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}