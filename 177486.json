{"path":"lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","sourceNew":"  // This tests that attempts to readBytes() past an EOF will fail, while\n  // reads up to the EOF will succeed. The EOF is determined by the\n  // BufferedIndexInput's arbitrary length() value.\n  public void testEOF() throws Exception {\n     MyBufferedIndexInput input = new MyBufferedIndexInput(1024);\n     // see that we can read all the bytes at one go:\n     checkReadBytes(input, (int)input.length(), 0);  \n     // go back and see that we can't read more than that, for small and\n     // large overflows:\n     int pos = (int)input.length()-10;\n     input.seek(pos);\n     checkReadBytes(input, 10, pos);  \n     input.seek(pos);\n     try {\n       checkReadBytes(input, 11, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 50, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 100000, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n  }\n\n","sourceOld":"  // This tests that attempts to readBytes() past an EOF will fail, while\n  // reads up to the EOF will succeed. The EOF is determined by the\n  // BufferedIndexInput's arbitrary length() value.\n  public void testEOF() throws Exception {\n     MyBufferedIndexInput input = new MyBufferedIndexInput(1024);\n     // see that we can read all the bytes at one go:\n     checkReadBytes(input, (int)input.length(), 0);  \n     // go back and see that we can't read more than that, for small and\n     // large overflows:\n     int pos = (int)input.length()-10;\n     input.seek(pos);\n     checkReadBytes(input, 10, pos);  \n     input.seek(pos);\n     try {\n       checkReadBytes(input, 11, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 50, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 100000, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","sourceNew":"  // This tests that attempts to readBytes() past an EOF will fail, while\n  // reads up to the EOF will succeed. The EOF is determined by the\n  // BufferedIndexInput's arbitrary length() value.\n  public void testEOF() throws Exception {\n     MyBufferedIndexInput input = new MyBufferedIndexInput(1024);\n     // see that we can read all the bytes at one go:\n     checkReadBytes(input, (int)input.length(), 0);  \n     // go back and see that we can't read more than that, for small and\n     // large overflows:\n     int pos = (int)input.length()-10;\n     input.seek(pos);\n     checkReadBytes(input, 10, pos);  \n     input.seek(pos);\n     try {\n       checkReadBytes(input, 11, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 50, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 100000, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n  }\n\n","sourceOld":"  // This tests that attempts to readBytes() past an EOF will fail, while\n  // reads up to the EOF will succeed. The EOF is determined by the\n  // BufferedIndexInput's arbitrary length() value.\n  public void testEOF() throws Exception {\n     MyBufferedIndexInput input = new MyBufferedIndexInput(1024);\n     // see that we can read all the bytes at one go:\n     checkReadBytes(input, (int)input.length(), 0);  \n     // go back and see that we can't read more than that, for small and\n     // large overflows:\n     int pos = (int)input.length()-10;\n     input.seek(pos);\n     checkReadBytes(input, 10, pos);  \n     input.seek(pos);\n     try {\n       checkReadBytes(input, 11, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 50, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 100000, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","sourceNew":"  // This tests that attempts to readBytes() past an EOF will fail, while\n  // reads up to the EOF will succeed. The EOF is determined by the\n  // BufferedIndexInput's arbitrary length() value.\n  public void testEOF() throws Exception {\n     MyBufferedIndexInput input = new MyBufferedIndexInput(1024);\n     // see that we can read all the bytes at one go:\n     checkReadBytes(input, (int)input.length(), 0);  \n     // go back and see that we can't read more than that, for small and\n     // large overflows:\n     int pos = (int)input.length()-10;\n     input.seek(pos);\n     checkReadBytes(input, 10, pos);  \n     input.seek(pos);\n     try {\n       checkReadBytes(input, 11, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 50, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 100000, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n  }\n\n","sourceOld":"  // This tests that attempts to readBytes() past an EOF will fail, while\n  // reads up to the EOF will succeed. The EOF is determined by the\n  // BufferedIndexInput's arbitrary length() value.\n  public void testEOF() throws Exception {\n     MyBufferedIndexInput input = new MyBufferedIndexInput(1024);\n     // see that we can read all the bytes at one go:\n     checkReadBytes(input, (int)input.length(), 0);  \n     // go back and see that we can't read more than that, for small and\n     // large overflows:\n     int pos = (int)input.length()-10;\n     input.seek(pos);\n     checkReadBytes(input, 10, pos);  \n     input.seek(pos);\n     try {\n       checkReadBytes(input, 11, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 50, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 100000, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","sourceNew":"  // This tests that attempts to readBytes() past an EOF will fail, while\n  // reads up to the EOF will succeed. The EOF is determined by the\n  // BufferedIndexInput's arbitrary length() value.\n  public void testEOF() throws Exception {\n     MyBufferedIndexInput input = new MyBufferedIndexInput(1024);\n     // see that we can read all the bytes at one go:\n     checkReadBytes(input, (int)input.length(), 0);  \n     // go back and see that we can't read more than that, for small and\n     // large overflows:\n     int pos = (int)input.length()-10;\n     input.seek(pos);\n     checkReadBytes(input, 10, pos);  \n     input.seek(pos);\n     // block read past end of file\n     expectThrows(IOException.class, () -> {\n       checkReadBytes(input, 11, pos);\n     });\n\n     input.seek(pos);\n\n     // block read past end of file\n     expectThrows(IOException.class, () -> {\n       checkReadBytes(input, 50, pos);\n     });\n\n     input.seek(pos);\n\n     // block read past end of file\n     expectThrows(IOException.class, () -> {\n       checkReadBytes(input, 100000, pos);\n     });\n  }\n\n","sourceOld":"  // This tests that attempts to readBytes() past an EOF will fail, while\n  // reads up to the EOF will succeed. The EOF is determined by the\n  // BufferedIndexInput's arbitrary length() value.\n  public void testEOF() throws Exception {\n     MyBufferedIndexInput input = new MyBufferedIndexInput(1024);\n     // see that we can read all the bytes at one go:\n     checkReadBytes(input, (int)input.length(), 0);  \n     // go back and see that we can't read more than that, for small and\n     // large overflows:\n     int pos = (int)input.length()-10;\n     input.seek(pos);\n     checkReadBytes(input, 10, pos);  \n     input.seek(pos);\n     try {\n       checkReadBytes(input, 11, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 50, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 100000, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n  }\n\n","bugFix":["1326054a8d3aa66382d49decc7f330955c9c6f71","e05018fda5a2dd9ffd4f4f1813bd64b20bb4c6c3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}