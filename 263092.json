{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#generateNamedParameterExpression(String).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#generateNamedParameterExpression(String).mjava","pathOld":"/dev/null","sourceNew":"  private static StreamExpressionNamedParameter generateNamedParameterExpression(String clause){    \n    String working = clause.trim();\n    \n    // might be overkill as the only place this is called from does this check already\n    if(!isNamedParameterClause(working)){\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n    }\n    \n    // Get name\n    int firstOpenEquals = findNextClear(working, 0, '=');\n    StreamExpressionNamedParameter namedParameter = new StreamExpressionNamedParameter(working.substring(0, firstOpenEquals).trim());\n\n    // we know this is ok because of the check in isNamedParameter\n    String parameter = working.substring(firstOpenEquals + 1, working.length());\n    if(isExpressionClause(parameter)){\n      namedParameter.setParameter(generateStreamExpression(parameter));\n    }\n    else{\n      // if wrapped in quotes, remove them\n      if(parameter.startsWith(\"\\\"\") && parameter.endsWith(\"\\\"\")){\n        parameter = parameter.substring(1, parameter.length() - 1).trim();\n        if(0 == parameter.length()){\n          throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n        }\n      }\n      namedParameter.setParameter(new StreamExpressionValue(parameter));\n    }\n    \n    return namedParameter;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a0370d6fb5289875090a50a9d0887ee584fed440"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0","date":1454550168,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#generateNamedParameterExpression(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#generateNamedParameterExpression(String).mjava","sourceNew":"  private static StreamExpressionNamedParameter generateNamedParameterExpression(String clause){    \n    String working = clause.trim();\n    \n    // might be overkill as the only place this is called from does this check already\n    if(!isNamedParameterClause(working)){\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n    }\n    \n    // Get name\n    int firstOpenEquals = findNextClear(working, 0, '=');\n    StreamExpressionNamedParameter namedParameter = new StreamExpressionNamedParameter(working.substring(0, firstOpenEquals).trim());\n\n    // we know this is ok because of the check in isNamedParameter\n    String parameter = working.substring(firstOpenEquals + 1, working.length());\n    if(isExpressionClause(parameter)){\n      namedParameter.setParameter(generateStreamExpression(parameter));\n    }\n    else{\n      // if wrapped in quotes, remove them\n      if(parameter.startsWith(\"\\\"\") && parameter.endsWith(\"\\\"\")){\n        parameter = parameter.substring(1, parameter.length() - 1).trim();\n        if(0 == parameter.length()){\n          throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n        }\n      }\n      \n      // if contain \\\" replace with \"\n      if(parameter.contains(\"\\\\\\\"\")){\n        parameter = parameter.replace(\"\\\\\\\"\", \"\\\"\");\n        if(0 == parameter.length()){\n          throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n        }\n      }\n      \n      namedParameter.setParameter(new StreamExpressionValue(parameter));\n    }\n    \n    return namedParameter;\n  }\n\n","sourceOld":"  private static StreamExpressionNamedParameter generateNamedParameterExpression(String clause){    \n    String working = clause.trim();\n    \n    // might be overkill as the only place this is called from does this check already\n    if(!isNamedParameterClause(working)){\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n    }\n    \n    // Get name\n    int firstOpenEquals = findNextClear(working, 0, '=');\n    StreamExpressionNamedParameter namedParameter = new StreamExpressionNamedParameter(working.substring(0, firstOpenEquals).trim());\n\n    // we know this is ok because of the check in isNamedParameter\n    String parameter = working.substring(firstOpenEquals + 1, working.length());\n    if(isExpressionClause(parameter)){\n      namedParameter.setParameter(generateStreamExpression(parameter));\n    }\n    else{\n      // if wrapped in quotes, remove them\n      if(parameter.startsWith(\"\\\"\") && parameter.endsWith(\"\\\"\")){\n        parameter = parameter.substring(1, parameter.length() - 1).trim();\n        if(0 == parameter.length()){\n          throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n        }\n      }\n      namedParameter.setParameter(new StreamExpressionValue(parameter));\n    }\n    \n    return namedParameter;\n  }\n\n","bugFix":null,"bugIntro":["a0370d6fb5289875090a50a9d0887ee584fed440"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1704c078ec59838c9d95d5bf5738b393b537494","date":1454693901,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#generateNamedParameterExpression(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#generateNamedParameterExpression(String).mjava","sourceNew":"  private static StreamExpressionNamedParameter generateNamedParameterExpression(String clause){    \n    String working = clause.trim();\n    \n    // might be overkill as the only place this is called from does this check already\n    if(!isNamedParameterClause(working)){\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n    }\n    \n    // Get name\n    int firstOpenEquals = findNextClear(working, 0, '=');\n    StreamExpressionNamedParameter namedParameter = new StreamExpressionNamedParameter(working.substring(0, firstOpenEquals).trim());\n\n    // we know this is ok because of the check in isNamedParameter\n    String parameter = working.substring(firstOpenEquals + 1, working.length());\n    if(isExpressionClause(parameter)){\n      namedParameter.setParameter(generateStreamExpression(parameter));\n    }\n    else{\n      // if wrapped in quotes, remove them\n      if(parameter.startsWith(\"\\\"\") && parameter.endsWith(\"\\\"\")){\n        parameter = parameter.substring(1, parameter.length() - 1).trim();\n        if(0 == parameter.length()){\n          throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n        }\n      }\n      \n      // if contain \\\" replace with \"\n      if(parameter.contains(\"\\\\\\\"\")){\n        parameter = parameter.replace(\"\\\\\\\"\", \"\\\"\");\n        if(0 == parameter.length()){\n          throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n        }\n      }\n      \n      namedParameter.setParameter(new StreamExpressionValue(parameter));\n    }\n    \n    return namedParameter;\n  }\n\n","sourceOld":"  private static StreamExpressionNamedParameter generateNamedParameterExpression(String clause){    \n    String working = clause.trim();\n    \n    // might be overkill as the only place this is called from does this check already\n    if(!isNamedParameterClause(working)){\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n    }\n    \n    // Get name\n    int firstOpenEquals = findNextClear(working, 0, '=');\n    StreamExpressionNamedParameter namedParameter = new StreamExpressionNamedParameter(working.substring(0, firstOpenEquals).trim());\n\n    // we know this is ok because of the check in isNamedParameter\n    String parameter = working.substring(firstOpenEquals + 1, working.length());\n    if(isExpressionClause(parameter)){\n      namedParameter.setParameter(generateStreamExpression(parameter));\n    }\n    else{\n      // if wrapped in quotes, remove them\n      if(parameter.startsWith(\"\\\"\") && parameter.endsWith(\"\\\"\")){\n        parameter = parameter.substring(1, parameter.length() - 1).trim();\n        if(0 == parameter.length()){\n          throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n        }\n      }\n      namedParameter.setParameter(new StreamExpressionValue(parameter));\n    }\n    \n    return namedParameter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#generateNamedParameterExpression(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#generateNamedParameterExpression(String).mjava","sourceNew":"  private static StreamExpressionNamedParameter generateNamedParameterExpression(String clause){    \n    String working = clause.trim();\n    \n    // might be overkill as the only place this is called from does this check already\n    if(!isNamedParameterClause(working)){\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n    }\n    \n    // Get name\n    int firstOpenEquals = findNextClear(working, 0, '=');\n    StreamExpressionNamedParameter namedParameter = new StreamExpressionNamedParameter(working.substring(0, firstOpenEquals).trim());\n\n    // we know this is ok because of the check in isNamedParameter\n    String parameter = working.substring(firstOpenEquals + 1, working.length());\n    if(isExpressionClause(parameter)){\n      namedParameter.setParameter(generateStreamExpression(parameter));\n    }\n    else{\n      // if wrapped in quotes, remove them\n      if(parameter.startsWith(\"\\\"\") && parameter.endsWith(\"\\\"\")){\n        parameter = parameter.substring(1, parameter.length() - 1).trim();\n        if(0 == parameter.length()){\n          throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n        }\n      }\n      \n      // if contain \\\" replace with \"\n      if(parameter.contains(\"\\\\\\\"\")){\n        parameter = parameter.replace(\"\\\\\\\"\", \"\\\"\");\n        if(0 == parameter.length()){\n          throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n        }\n      }\n      \n      namedParameter.setParameter(new StreamExpressionValue(parameter));\n    }\n    \n    return namedParameter;\n  }\n\n","sourceOld":"  private static StreamExpressionNamedParameter generateNamedParameterExpression(String clause){    \n    String working = clause.trim();\n    \n    // might be overkill as the only place this is called from does this check already\n    if(!isNamedParameterClause(working)){\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n    }\n    \n    // Get name\n    int firstOpenEquals = findNextClear(working, 0, '=');\n    StreamExpressionNamedParameter namedParameter = new StreamExpressionNamedParameter(working.substring(0, firstOpenEquals).trim());\n\n    // we know this is ok because of the check in isNamedParameter\n    String parameter = working.substring(firstOpenEquals + 1, working.length());\n    if(isExpressionClause(parameter)){\n      namedParameter.setParameter(generateStreamExpression(parameter));\n    }\n    else{\n      // if wrapped in quotes, remove them\n      if(parameter.startsWith(\"\\\"\") && parameter.endsWith(\"\\\"\")){\n        parameter = parameter.substring(1, parameter.length() - 1).trim();\n        if(0 == parameter.length()){\n          throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n        }\n      }\n      namedParameter.setParameter(new StreamExpressionValue(parameter));\n    }\n    \n    return namedParameter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0370d6fb5289875090a50a9d0887ee584fed440","date":1552401990,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#generateNamedParameterExpression(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#generateNamedParameterExpression(String).mjava","sourceNew":"  private static StreamExpressionNamedParameter generateNamedParameterExpression(String clause){\n    String working = clause.trim();\n\n    // might be overkill as the only place this is called from does this check already\n    if(!isNamedParameterClause(working)){\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n    }\n\n    // Get name\n    int firstOpenEquals = findNextClear(working, 0, '=');\n    StreamExpressionNamedParameter namedParameter = new StreamExpressionNamedParameter(working.substring(0, firstOpenEquals).trim());\n\n    // we know this is ok because of the check in isNamedParameter\n    String parameter = working.substring(firstOpenEquals + 1, working.length());\n    if(isExpressionClause(parameter)){\n      namedParameter.setParameter(generateStreamExpression(parameter));\n    }\n    else{\n      // if wrapped in quotes, remove them\n      if(parameter.startsWith(\"\\\"\") && parameter.endsWith(\"\\\"\")){\n        parameter = parameter.substring(1, parameter.length() - 1).trim();\n        if(0 == parameter.length()){\n          throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n        }\n      }\n\n      // if contain \\\" replace with \"\n      if(parameter.contains(\"\\\\\\\"\")){\n        parameter = parameter.replace(\"\\\\\\\"\", \"\\\"\");\n        if(0 == parameter.length()){\n          throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n        }\n      }\n\n      namedParameter.setParameter(new StreamExpressionValue(parameter));\n    }\n\n    return namedParameter;\n  }\n\n","sourceOld":"  private static StreamExpressionNamedParameter generateNamedParameterExpression(String clause){    \n    String working = clause.trim();\n    \n    // might be overkill as the only place this is called from does this check already\n    if(!isNamedParameterClause(working)){\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n    }\n    \n    // Get name\n    int firstOpenEquals = findNextClear(working, 0, '=');\n    StreamExpressionNamedParameter namedParameter = new StreamExpressionNamedParameter(working.substring(0, firstOpenEquals).trim());\n\n    // we know this is ok because of the check in isNamedParameter\n    String parameter = working.substring(firstOpenEquals + 1, working.length());\n    if(isExpressionClause(parameter)){\n      namedParameter.setParameter(generateStreamExpression(parameter));\n    }\n    else{\n      // if wrapped in quotes, remove them\n      if(parameter.startsWith(\"\\\"\") && parameter.endsWith(\"\\\"\")){\n        parameter = parameter.substring(1, parameter.length() - 1).trim();\n        if(0 == parameter.length()){\n          throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n        }\n      }\n      \n      // if contain \\\" replace with \"\n      if(parameter.contains(\"\\\\\\\"\")){\n        parameter = parameter.replace(\"\\\\\\\"\", \"\\\"\");\n        if(0 == parameter.length()){\n          throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n        }\n      }\n      \n      namedParameter.setParameter(new StreamExpressionValue(parameter));\n    }\n    \n    return namedParameter;\n  }\n\n","bugFix":["3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0","f00f1c5fad501b66705121feb623f8cfbb6712f9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18391e7d733bf8152ea2d4fae43fe3bd85a973d5","date":1580489654,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#generateNamedParameterExpression(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#generateNamedParameterExpression(String).mjava","sourceNew":"  private static StreamExpressionNamedParameter generateNamedParameterExpression(String clause){\n    String working = clause.trim();\n\n    // might be overkill as the only place this is called from does this check already\n    if(!isNamedParameterClause(working)){\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n    }\n\n    // Get name\n    int firstOpenEquals = findNextClear(working, 0, '=');\n    StreamExpressionNamedParameter namedParameter = new StreamExpressionNamedParameter(working.substring(0, firstOpenEquals).trim());\n\n    // we know this is ok because of the check in isNamedParameter\n    String parameter = working.substring(firstOpenEquals + 1, working.length());\n    if(isExpressionClause(parameter)){\n      namedParameter.setParameter(generateStreamExpression(parameter));\n    }\n    else{\n      // if wrapped in quotes, remove them\n      if(parameter.startsWith(\"\\\"\") && parameter.endsWith(\"\\\"\")){\n        parameter = parameter.substring(1, parameter.length() - 1).trim();\n        if(0 == parameter.length()){\n          throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n        }\n      }\n\n      // if contain \\\" replace with \"\n      if(parameter.contains(\"\\\\\\\"\")){\n        parameter = parameter.replace(\"\\\\\\\"\", \"\\\"\");\n        if(0 == parameter.length()){\n          throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n        }\n      }\n\n      // If contains ` replace with \"\n      // This allows ` to be used as a quote character\n\n      if(parameter.contains(\"`\")){\n        parameter = parameter.replace('`', '\"');\n        if(0 == parameter.length()){\n          throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n        }\n      }\n\n\n      namedParameter.setParameter(new StreamExpressionValue(parameter));\n    }\n\n    return namedParameter;\n  }\n\n","sourceOld":"  private static StreamExpressionNamedParameter generateNamedParameterExpression(String clause){\n    String working = clause.trim();\n\n    // might be overkill as the only place this is called from does this check already\n    if(!isNamedParameterClause(working)){\n      throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n    }\n\n    // Get name\n    int firstOpenEquals = findNextClear(working, 0, '=');\n    StreamExpressionNamedParameter namedParameter = new StreamExpressionNamedParameter(working.substring(0, firstOpenEquals).trim());\n\n    // we know this is ok because of the check in isNamedParameter\n    String parameter = working.substring(firstOpenEquals + 1, working.length());\n    if(isExpressionClause(parameter)){\n      namedParameter.setParameter(generateStreamExpression(parameter));\n    }\n    else{\n      // if wrapped in quotes, remove them\n      if(parameter.startsWith(\"\\\"\") && parameter.endsWith(\"\\\"\")){\n        parameter = parameter.substring(1, parameter.length() - 1).trim();\n        if(0 == parameter.length()){\n          throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n        }\n      }\n\n      // if contain \\\" replace with \"\n      if(parameter.contains(\"\\\\\\\"\")){\n        parameter = parameter.replace(\"\\\\\\\"\", \"\\\"\");\n        if(0 == parameter.length()){\n          throw new IllegalArgumentException(String.format(Locale.ROOT,\"'%s' is not a proper named parameter clause\", working));\n        }\n      }\n\n      namedParameter.setParameter(new StreamExpressionValue(parameter));\n    }\n\n    return namedParameter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0370d6fb5289875090a50a9d0887ee584fed440":["3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0"],"3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["f00f1c5fad501b66705121feb623f8cfbb6712f9","3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0"],"b1704c078ec59838c9d95d5bf5738b393b537494":["f00f1c5fad501b66705121feb623f8cfbb6712f9","3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0"],"18391e7d733bf8152ea2d4fae43fe3bd85a973d5":["a0370d6fb5289875090a50a9d0887ee584fed440"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["18391e7d733bf8152ea2d4fae43fe3bd85a973d5"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494"],"a0370d6fb5289875090a50a9d0887ee584fed440":["18391e7d733bf8152ea2d4fae43fe3bd85a973d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"3fa3e2efe14a21ebcb7d24e05ff8cd926af501c0":["a0370d6fb5289875090a50a9d0887ee584fed440","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"b1704c078ec59838c9d95d5bf5738b393b537494":[],"18391e7d733bf8152ea2d4fae43fe3bd85a973d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b1704c078ec59838c9d95d5bf5738b393b537494","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}