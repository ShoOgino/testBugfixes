{"path":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVPOS);\n        boolean storePositionsWithTermVector = Boolean.parseBoolean(readString(STORETVPOS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVOFF);\n        boolean storeOffsetWithTermVector = Boolean.parseBoolean(readString(STORETVOFF.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType;\n        \n        if (\"false\".equals(dvType)) {\n          docValuesType = null;\n        } else {\n          docValuesType = DocValues.Type.valueOf(dvType);\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n        IndexOptions indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));\n\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          storePositionsWithTermVector, storeOffsetWithTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVPOS);\n        boolean storePositionsWithTermVector = Boolean.parseBoolean(readString(STORETVPOS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVOFF);\n        boolean storeOffsetWithTermVector = Boolean.parseBoolean(readString(STORETVOFF.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType;\n        \n        if (\"false\".equals(dvType)) {\n          docValuesType = null;\n        } else {\n          docValuesType = DocValues.Type.valueOf(dvType);\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n        IndexOptions indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));\n\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          storePositionsWithTermVector, storeOffsetWithTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType;\n        \n        if (\"false\".equals(dvType)) {\n          docValuesType = null;\n        } else {\n          docValuesType = DocValues.Type.valueOf(dvType);\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n        IndexOptions indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));\n\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVPOS);\n        boolean storePositionsWithTermVector = Boolean.parseBoolean(readString(STORETVPOS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETVOFF);\n        boolean storeOffsetWithTermVector = Boolean.parseBoolean(readString(STORETVOFF.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType;\n        \n        if (\"false\".equals(dvType)) {\n          docValuesType = null;\n        } else {\n          docValuesType = DocValues.Type.valueOf(dvType);\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n        IndexOptions indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));\n\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          storePositionsWithTermVector, storeOffsetWithTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType;\n        \n        if (\"false\".equals(dvType)) {\n          docValuesType = null;\n        } else {\n          docValuesType = DocValues.Type.valueOf(dvType);\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n        IndexOptions indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));\n\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType;\n        \n        if (\"false\".equals(dvType)) {\n          docValuesType = null;\n        } else {\n          docValuesType = DocValues.Type.valueOf(dvType);\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n        IndexOptions indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));\n\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValues.Type normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType = docValuesType(dvType);\n        \n        \n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n        IndexOptions indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));\n\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType;\n        \n        if (\"false\".equals(dvType)) {\n          docValuesType = null;\n        } else {\n          docValuesType = DocValues.Type.valueOf(dvType);\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n        IndexOptions indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));\n\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValues.Type normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType = docValuesType(dvType);\n        \n        \n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n        IndexOptions indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));\n\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValues.Type normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValues.Type docValuesType = docValuesType(dvType);\n        \n        \n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n        IndexOptions indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));\n\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"]},"commit2Childs":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}