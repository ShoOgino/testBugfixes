{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterState(ClusterState).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterState(ClusterState).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterState(ClusterState).mjava","sourceNew":"  /**\n   * Save clusterstate.json to {@link DistribStateManager}.\n   * @return saved state\n   */\n  private ClusterState saveClusterState(ClusterState state) throws IOException {\n    ensureNotClosed();\n    byte[] data = Utils.toJSON(state);\n    try {\n      VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_STATE);\n      int version = oldData != null ? oldData.getVersion() : 0;\n      assert clusterStateVersion == version : \"local clusterStateVersion out of sync\";\n      stateManager.setData(ZkStateReader.CLUSTER_STATE, data, version);\n      log.debug(\"** saved cluster state version \" + (version));\n      clusterStateVersion++;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    return state;\n  }\n\n","sourceOld":"  /**\n   * Save clusterstate.json to {@link DistribStateManager}.\n   * @return saved state\n   */\n  private ClusterState saveClusterState(ClusterState state) throws IOException {\n    ensureNotClosed();\n    byte[] data = Utils.toJSON(state);\n    try {\n      VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_STATE);\n      int version = oldData != null ? oldData.getVersion() : 0;\n      Assert.assertEquals(clusterStateVersion, version);\n      stateManager.setData(ZkStateReader.CLUSTER_STATE, data, version);\n      log.debug(\"** saved cluster state version \" + (version));\n      clusterStateVersion++;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterState(ClusterState).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterState(ClusterState).mjava","sourceNew":"  /**\n   * Save clusterstate.json to {@link DistribStateManager}.\n   * @return saved state\n   */\n  private ClusterState saveClusterState(ClusterState state) throws IOException {\n    ensureNotClosed();\n    byte[] data = Utils.toJSON(state);\n    try {\n      VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_STATE);\n      int version = oldData != null ? oldData.getVersion() : 0;\n      assert clusterStateVersion == version : \"local clusterStateVersion out of sync\";\n      stateManager.setData(ZkStateReader.CLUSTER_STATE, data, version);\n      log.debug(\"** saved cluster state version {}\", version);\n      clusterStateVersion++;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    return state;\n  }\n\n","sourceOld":"  /**\n   * Save clusterstate.json to {@link DistribStateManager}.\n   * @return saved state\n   */\n  private ClusterState saveClusterState(ClusterState state) throws IOException {\n    ensureNotClosed();\n    byte[] data = Utils.toJSON(state);\n    try {\n      VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_STATE);\n      int version = oldData != null ? oldData.getVersion() : 0;\n      assert clusterStateVersion == version : \"local clusterStateVersion out of sync\";\n      stateManager.setData(ZkStateReader.CLUSTER_STATE, data, version);\n      log.debug(\"** saved cluster state version \" + (version));\n      clusterStateVersion++;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a","date":1589907167,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#saveClusterState(ClusterState).mjava","sourceNew":null,"sourceOld":"  /**\n   * Save clusterstate.json to {@link DistribStateManager}.\n   * @return saved state\n   */\n  private ClusterState saveClusterState(ClusterState state) throws IOException {\n    ensureNotClosed();\n    byte[] data = Utils.toJSON(state);\n    try {\n      VersionedData oldData = stateManager.getData(ZkStateReader.CLUSTER_STATE);\n      int version = oldData != null ? oldData.getVersion() : 0;\n      assert clusterStateVersion == version : \"local clusterStateVersion out of sync\";\n      stateManager.setData(ZkStateReader.CLUSTER_STATE, data, version);\n      log.debug(\"** saved cluster state version {}\", version);\n      clusterStateVersion++;\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a":["e35f2dde06b35aa9904949a3a93fabd090371077"],"e35f2dde06b35aa9904949a3a93fabd090371077":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eb7a329be123e1f46f9d78d74f6d23f33ec81b0a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"eb7a329be123e1f46f9d78d74f6d23f33ec81b0a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e35f2dde06b35aa9904949a3a93fabd090371077":["eb7a329be123e1f46f9d78d74f6d23f33ec81b0a"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["e35f2dde06b35aa9904949a3a93fabd090371077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}