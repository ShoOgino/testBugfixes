{"path":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletes().mjava","commits":[{"id":"34ce7c842452c79b12c45a8feb64e4597c7110e8","date":1321637224,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testExpungeDeletes().mjava","sourceNew":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    TieredMergePolicy tmp = newTieredMergePolicy();\n    conf.setMergePolicy(tmp);\n    conf.setMaxBufferedDocs(4);\n    tmp.setMaxMergeAtOnce(100);\n    tmp.setSegmentsPerTier(100);\n    tmp.setForceMergeDeletesPctAllowed(30.0);\n    IndexWriter w = new IndexWriter(dir, conf);\n    for(int i=0;i<80;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa \" + (i%4), TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    assertEquals(80, w.maxDoc());\n    assertEquals(80, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete docs\");\n    }\n    w.deleteDocuments(new Term(\"content\", \"0\"));\n    w.forceMergeDeletes();\n\n    assertEquals(80, w.maxDoc());\n    assertEquals(60, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: forceMergeDeletes2\");\n    }\n    tmp.setForceMergeDeletesPctAllowed(10.0);\n    w.forceMergeDeletes();\n    assertEquals(60, w.maxDoc());\n    assertEquals(60, w.numDocs());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testExpungeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    TieredMergePolicy tmp = newTieredMergePolicy();\n    conf.setMergePolicy(tmp);\n    conf.setMaxBufferedDocs(4);\n    tmp.setMaxMergeAtOnce(100);\n    tmp.setSegmentsPerTier(100);\n    tmp.setExpungeDeletesPctAllowed(30.0);\n    IndexWriter w = new IndexWriter(dir, conf);\n    for(int i=0;i<80;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa \" + (i%4), TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    assertEquals(80, w.maxDoc());\n    assertEquals(80, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete docs\");\n    }\n    w.deleteDocuments(new Term(\"content\", \"0\"));\n    w.expungeDeletes();\n\n    assertEquals(80, w.maxDoc());\n    assertEquals(60, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: expunge2\");\n    }\n    tmp.setExpungeDeletesPctAllowed(10.0);\n    w.expungeDeletes();\n    assertEquals(60, w.maxDoc());\n    assertEquals(60, w.numDocs());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTieredMergePolicy#testForceMergeDeletes().mjava","sourceNew":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    TieredMergePolicy tmp = newTieredMergePolicy();\n    conf.setMergePolicy(tmp);\n    conf.setMaxBufferedDocs(4);\n    tmp.setMaxMergeAtOnce(100);\n    tmp.setSegmentsPerTier(100);\n    tmp.setForceMergeDeletesPctAllowed(30.0);\n    IndexWriter w = new IndexWriter(dir, conf);\n    for(int i=0;i<80;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa \" + (i%4), TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    assertEquals(80, w.maxDoc());\n    assertEquals(80, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete docs\");\n    }\n    w.deleteDocuments(new Term(\"content\", \"0\"));\n    w.forceMergeDeletes();\n\n    assertEquals(80, w.maxDoc());\n    assertEquals(60, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: forceMergeDeletes2\");\n    }\n    tmp.setForceMergeDeletesPctAllowed(10.0);\n    w.forceMergeDeletes();\n    assertEquals(60, w.maxDoc());\n    assertEquals(60, w.numDocs());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testForceMergeDeletes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    TieredMergePolicy tmp = newTieredMergePolicy();\n    conf.setMergePolicy(tmp);\n    conf.setMaxBufferedDocs(4);\n    tmp.setMaxMergeAtOnce(100);\n    tmp.setSegmentsPerTier(100);\n    tmp.setForceMergeDeletesPctAllowed(30.0);\n    IndexWriter w = new IndexWriter(dir, conf);\n    for(int i=0;i<80;i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa \" + (i%4), TextField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    assertEquals(80, w.maxDoc());\n    assertEquals(80, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: delete docs\");\n    }\n    w.deleteDocuments(new Term(\"content\", \"0\"));\n    w.forceMergeDeletes();\n\n    assertEquals(80, w.maxDoc());\n    assertEquals(60, w.numDocs());\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: forceMergeDeletes2\");\n    }\n    tmp.setForceMergeDeletesPctAllowed(10.0);\n    w.forceMergeDeletes();\n    assertEquals(60, w.maxDoc());\n    assertEquals(60, w.numDocs());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}