{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#autoDetectVariant(String).mjava","commits":[{"id":"29191e6ce86bfcd231cd069834a87833fa4079c1","date":1228333111,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#autoDetectVariant(String).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Detects and returns the variant of a trie encoded string using the length.\n\t * @throws NumberFormatException if the length is not 8, 16, or 32 chars.\n\t */\n\tpublic static final TrieUtils autoDetectVariant(final String s) {\n\t\tfinal int l=s.length();\n\t\tif (l==VARIANT_8BIT.TRIE_CODED_LENGTH) {\n\t\t\treturn VARIANT_8BIT;\n\t\t} else if (l==VARIANT_4BIT.TRIE_CODED_LENGTH) {\n\t\t\treturn VARIANT_4BIT;\n\t\t} else if (l==VARIANT_2BIT.TRIE_CODED_LENGTH) {\n\t\t\treturn VARIANT_2BIT;\n\t\t} else {\n\t\t\tthrow new NumberFormatException(\"Invalid trie encoded numerical value representation (incompatible length).\");\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ef14ec05032a847f9ce1820055c6c29f72d771a","date":1231669514,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#autoDetectVariant(String).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#autoDetectVariant(String).mjava","sourceNew":"  /**\n   * Detects and returns the variant of a trie encoded string using the length.\n   * @throws NumberFormatException if the length is not 8, 16, or 32 chars.\n   */\n  public static final TrieUtils autoDetectVariant(final String s) {\n    final int l=s.length();\n    if (l==VARIANT_8BIT.TRIE_CODED_LENGTH) {\n      return VARIANT_8BIT;\n    } else if (l==VARIANT_4BIT.TRIE_CODED_LENGTH) {\n      return VARIANT_4BIT;\n    } else if (l==VARIANT_2BIT.TRIE_CODED_LENGTH) {\n      return VARIANT_2BIT;\n    } else {\n      throw new NumberFormatException(\"Invalid trie encoded numerical value representation (incompatible length).\");\n    }\n  }\n\n","sourceOld":"\t/**\n\t * Detects and returns the variant of a trie encoded string using the length.\n\t * @throws NumberFormatException if the length is not 8, 16, or 32 chars.\n\t */\n\tpublic static final TrieUtils autoDetectVariant(final String s) {\n\t\tfinal int l=s.length();\n\t\tif (l==VARIANT_8BIT.TRIE_CODED_LENGTH) {\n\t\t\treturn VARIANT_8BIT;\n\t\t} else if (l==VARIANT_4BIT.TRIE_CODED_LENGTH) {\n\t\t\treturn VARIANT_4BIT;\n\t\t} else if (l==VARIANT_2BIT.TRIE_CODED_LENGTH) {\n\t\t\treturn VARIANT_2BIT;\n\t\t} else {\n\t\t\tthrow new NumberFormatException(\"Invalid trie encoded numerical value representation (incompatible length).\");\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#autoDetectVariant(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Detects and returns the variant of a trie encoded string using the length.\n   * @throws NumberFormatException if the length is not 8, 16, or 32 chars.\n   */\n  public static final TrieUtils autoDetectVariant(final String s) {\n    final int l=s.length();\n    if (l==VARIANT_8BIT.TRIE_CODED_LENGTH) {\n      return VARIANT_8BIT;\n    } else if (l==VARIANT_4BIT.TRIE_CODED_LENGTH) {\n      return VARIANT_4BIT;\n    } else if (l==VARIANT_2BIT.TRIE_CODED_LENGTH) {\n      return VARIANT_2BIT;\n    } else {\n      throw new NumberFormatException(\"Invalid trie encoded numerical value representation (incompatible length).\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29191e6ce86bfcd231cd069834a87833fa4079c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"]},"commit2Childs":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"29191e6ce86bfcd231cd069834a87833fa4079c1":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}