{"path":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","commits":[{"id":"8b5e0eebe355b14693e24007d721da78a79d8170","date":1305898401,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName);\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentMerger.NORMS_HEADER, 0, SegmentMerger.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName);\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentMerger.NORMS_HEADER, 0, SegmentMerger.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName);\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentMerger.NORMS_HEADER, 0, SegmentMerger.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b76d8c77c9c069618078344054ff4c6a3374f80","date":1306168582,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","sourceNew":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName);\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentNorms.NORMS_HEADER, 0, SegmentNorms.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","sourceOld":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName);\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentMerger.NORMS_HEADER, 0, SegmentMerger.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","sourceNew":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName);\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentNorms.NORMS_HEADER, 0, SegmentNorms.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","sourceOld":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName);\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentMerger.NORMS_HEADER, 0, SegmentMerger.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","sourceNew":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName);\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentNorms.NORMS_HEADER, 0, SegmentNorms.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","sourceOld":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName);\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentMerger.NORMS_HEADER, 0, SegmentMerger.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","sourceNew":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName, IOContext.DEFAULT);\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentNorms.NORMS_HEADER, 0, SegmentNorms.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","sourceOld":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName);\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentNorms.NORMS_HEADER, 0, SegmentNorms.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","sourceNew":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    //nocommit not sure if this is the correct information provided to FlushInfo\n    IndexOutput out = owner.directory().createOutput(normFileName, new IOContext(new FlushInfo(si.docCount, 0)));\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentNorms.NORMS_HEADER, 0, SegmentNorms.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","sourceOld":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName, IOContext.DEFAULT);\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentNorms.NORMS_HEADER, 0, SegmentNorms.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c162b4b9ef005383c38e0912c16267584dc40de5","date":1310021443,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","sourceNew":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName, new IOContext(new FlushInfo(si.docCount, 0)));\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentNorms.NORMS_HEADER, 0, SegmentNorms.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","sourceOld":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    //nocommit not sure if this is the correct information provided to FlushInfo\n    IndexOutput out = owner.directory().createOutput(normFileName, new IOContext(new FlushInfo(si.docCount, 0)));\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentNorms.NORMS_HEADER, 0, SegmentNorms.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","sourceNew":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName, new IOContext(new FlushInfo(si.docCount, 0)));\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentNorms.NORMS_HEADER, 0, SegmentNorms.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","sourceOld":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName);\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentNorms.NORMS_HEADER, 0, SegmentNorms.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","sourceNew":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName, new IOContext(new FlushInfo(si.docCount, 0)));\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentNorms.NORMS_HEADER, 0, SegmentNorms.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","sourceOld":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName);\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentNorms.NORMS_HEADER, 0, SegmentNorms.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","sourceNew":null,"sourceOld":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName, new IOContext(new FlushInfo(si.docCount, 0)));\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentNorms.NORMS_HEADER, 0, SegmentNorms.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","sourceNew":null,"sourceOld":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName, new IOContext(new FlushInfo(si.docCount, 0)));\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentNorms.NORMS_HEADER, 0, SegmentNorms.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentNorms#reWrite(SegmentInfo).mjava","sourceNew":null,"sourceOld":"  // Flush all pending changes to the next generation\n  // separate norms file.\n  public void reWrite(SegmentInfo si) throws IOException {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0): \"refCount=\" + refCount + \" origNorm=\" + origNorm;\n\n    // NOTE: norms are re-written in regular directory, not cfs\n    si.advanceNormGen(this.number);\n    final String normFileName = si.getNormFileName(this.number);\n    IndexOutput out = owner.directory().createOutput(normFileName, new IOContext(new FlushInfo(si.docCount, 0)));\n    boolean success = false;\n    try {\n      try {\n        out.writeBytes(SegmentNorms.NORMS_HEADER, 0, SegmentNorms.NORMS_HEADER.length);\n        out.writeBytes(bytes, owner.maxDoc());\n      } finally {\n        out.close();\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          owner.directory().deleteFile(normFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    this.dirty = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b76d8c77c9c069618078344054ff4c6a3374f80":["8b5e0eebe355b14693e24007d721da78a79d8170"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b5e0eebe355b14693e24007d721da78a79d8170"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["ddc4c914be86e34b54f70023f45a60fa7f04e929","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["8b76d8c77c9c069618078344054ff4c6a3374f80"],"8b5e0eebe355b14693e24007d721da78a79d8170":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c162b4b9ef005383c38e0912c16267584dc40de5":["b6f9be74ca7baaef11857ad002cad40419979516"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","8b76d8c77c9c069618078344054ff4c6a3374f80"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b5e0eebe355b14693e24007d721da78a79d8170"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ddc4c914be86e34b54f70023f45a60fa7f04e929","4122a26e1fd0457a340616673a3d3aada370f713"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["8b76d8c77c9c069618078344054ff4c6a3374f80","c162b4b9ef005383c38e0912c16267584dc40de5"],"4122a26e1fd0457a340616673a3d3aada370f713":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","8b76d8c77c9c069618078344054ff4c6a3374f80"]},"commit2Childs":{"8b76d8c77c9c069618078344054ff4c6a3374f80":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"8b5e0eebe355b14693e24007d721da78a79d8170":["8b76d8c77c9c069618078344054ff4c6a3374f80","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","a3776dccca01c11e7046323cfad46a3b4a471233"],"c162b4b9ef005383c38e0912c16267584dc40de5":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","8b5e0eebe355b14693e24007d721da78a79d8170","a3776dccca01c11e7046323cfad46a3b4a471233"],"b6f9be74ca7baaef11857ad002cad40419979516":["c162b4b9ef005383c38e0912c16267584dc40de5"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","5d004d0e0b3f65bb40da76d476d659d7888270e8","4122a26e1fd0457a340616673a3d3aada370f713"],"4122a26e1fd0457a340616673a3d3aada370f713":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}