{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","commits":[{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(Map[String,SolrCore],String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      try {\n        zkController.preRegister(core.getCoreDescriptor());\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = coreMaps.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = coreMaps.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n    core.getCoreDescriptor().putProperty(CoreDescriptor.CORE_NAME, name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(Map<String,SolrCore> whichCores, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      try {\n        zkController.preRegister(core.getCoreDescriptor());\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n    synchronized (whichCores) {\n      if (isShutDown) {\n        core.close();\n        throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n      }\n      old = whichCores.put(name, core);\n      coreInitFailures.remove(name);\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n      core.setName(name);\n      core.getCoreDescriptor().name = name;\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bd6aa52c560df7d631f1e5182265481bbb883ff","date":1365451215,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      try {\n        zkController.preRegister(core);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = coreMaps.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = coreMaps.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n    core.getCoreDescriptor().putProperty(CoreDescriptor.CORE_NAME, name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      try {\n        zkController.preRegister(core.getCoreDescriptor());\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = coreMaps.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = coreMaps.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n    core.getCoreDescriptor().putProperty(CoreDescriptor.CORE_NAME, name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      try {\n        zkController.preRegister(core);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n    core.getCoreDescriptor().putProperty(CoreDescriptor.CORE_NAME, name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      try {\n        zkController.preRegister(core);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = coreMaps.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = coreMaps.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n    core.getCoreDescriptor().putProperty(CoreDescriptor.CORE_NAME, name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b29abed5661c7911e4b45d5a3d79a186268e28c4","date":1366675770,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkSys.getZkController() != null) {\n      // this happens before we can receive requests\n      try {\n        zkSys.getZkController().preRegister(core);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n    core.getCoreDescriptor().putProperty(CoreDescriptor.CORE_NAME, name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      zkSys.registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      zkSys.registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkController != null) {\n      // this happens before we can receive requests\n      try {\n        zkController.preRegister(core);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n    core.getCoreDescriptor().putProperty(CoreDescriptor.CORE_NAME, name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"41e1b8818332825c60cfbd7efa38294078eae898","date":1369337752,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkSys.getZkController() != null) {\n      // this happens before we can receive requests\n      try {\n        zkSys.getZkController().preRegister(core.getCoreDescriptor());\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n    core.getCoreDescriptor().putProperty(CoreDescriptor.CORE_NAME, name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      zkSys.registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      zkSys.registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkSys.getZkController() != null) {\n      // this happens before we can receive requests\n      try {\n        zkSys.getZkController().preRegister(core);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n    core.getCoreDescriptor().putProperty(CoreDescriptor.CORE_NAME, name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      zkSys.registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      zkSys.registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce","date":1370818281,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    \n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n    core.getCoreDescriptor().putProperty(CoreDescriptor.CORE_NAME, name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      zkSys.registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      zkSys.registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    if (zkSys.getZkController() != null) {\n      // this happens before we can receive requests\n      try {\n        zkSys.getZkController().preRegister(core.getCoreDescriptor());\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n    core.getCoreDescriptor().putProperty(CoreDescriptor.CORE_NAME, name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      zkSys.registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      zkSys.registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":["b374d78db8148ec6796fdf37148b33897ab40a8c","b29abed5661c7911e4b45d5a3d79a186268e28c4","41e1b8818332825c60cfbd7efa38294078eae898"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    \n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      zkSys.registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      zkSys.registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    \n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n    core.getCoreDescriptor().putProperty(CoreDescriptor.CORE_NAME, name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      zkSys.registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      zkSys.registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    \n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      zkSys.registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      zkSys.registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    \n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n    core.getCoreDescriptor().putProperty(CoreDescriptor.CORE_NAME, name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      zkSys.registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      zkSys.registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bc9f3cab5bcaa03021a8677cda720596f0da2f8","date":1383747827,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    // We can register a core when creating them via the admin UI, so we need to insure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      zkSys.registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      zkSys.registerInZk(core);\n      return old;\n    }\n  }\n\n","sourceOld":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    \n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      zkSys.registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      zkSys.registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97bd2b0da4beced82821b752b29576be986cf1ff","date":1387747012,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","sourceNew":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    return registerCore(isTransientCore, name, core, returnPrevNotClosed, true);\n  }\n\n","sourceOld":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    if( name == null ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    // We can register a core when creating them via the admin UI, so we need to insure that the dynamic descriptors\n    // are up to date\n    CoreDescriptor cd = core.getCoreDescriptor();\n    if ((cd.isTransient() || ! cd.isLoadOnStartup())\n        && solrCores.getDynamicDescriptor(name) == null) {\n      // Store it away for later use. includes non-transient but not\n      // loaded at startup cores.\n      solrCores.putDynamicDescriptor(name, cd);\n    }\n\n    SolrCore old = null;\n\n    if (isShutDown) {\n      core.close();\n      throw new IllegalStateException(\"This CoreContainer has been shutdown\");\n    }\n    if (isTransientCore) {\n      old = solrCores.putTransientCore(cfg, name, core, loader);\n    } else {\n      old = solrCores.putCore(name, core);\n    }\n      /*\n      * set both the name of the descriptor and the name of the\n      * core, since the descriptors name is used for persisting.\n      */\n\n    core.setName(name);\n\n    synchronized (coreInitFailures) {\n      coreInitFailures.remove(name);\n    }\n\n    if( old == null || old == core) {\n      log.info( \"registering core: \"+name );\n      zkSys.registerInZk(core);\n      return null;\n    }\n    else {\n      log.info( \"replacing core: \"+name );\n      if (!returnPrevNotClosed) {\n        old.close();\n      }\n      zkSys.registerInZk(core);\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85032ab568b3f50eabd577aaa994ba197db93758","date":1404157267,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#registerCore(boolean,String,SolrCore,boolean).mjava","sourceNew":null,"sourceOld":"  protected SolrCore registerCore(boolean isTransientCore, String name, SolrCore core, boolean returnPrevNotClosed) {\n    return registerCore(isTransientCore, name, core, returnPrevNotClosed, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97bd2b0da4beced82821b752b29576be986cf1ff":["8bc9f3cab5bcaa03021a8677cda720596f0da2f8"],"41e1b8818332825c60cfbd7efa38294078eae898":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce":["41e1b8818332825c60cfbd7efa38294078eae898"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["9409650933cc688e77e565092a25e58adfc2e18d"],"5bd6aa52c560df7d631f1e5182265481bbb883ff":["a837c064b67fa63a9394136e31218b908cdcf783"],"9409650933cc688e77e565092a25e58adfc2e18d":["5bd6aa52c560df7d631f1e5182265481bbb883ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce"],"a837c064b67fa63a9394136e31218b908cdcf783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8bc9f3cab5bcaa03021a8677cda720596f0da2f8":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"85032ab568b3f50eabd577aaa994ba197db93758":["97bd2b0da4beced82821b752b29576be986cf1ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85032ab568b3f50eabd577aaa994ba197db93758"]},"commit2Childs":{"97bd2b0da4beced82821b752b29576be986cf1ff":["85032ab568b3f50eabd577aaa994ba197db93758"],"41e1b8818332825c60cfbd7efa38294078eae898":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["41e1b8818332825c60cfbd7efa38294078eae898"],"5bd6aa52c560df7d631f1e5182265481bbb883ff":["9409650933cc688e77e565092a25e58adfc2e18d"],"9409650933cc688e77e565092a25e58adfc2e18d":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a837c064b67fa63a9394136e31218b908cdcf783"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","8bc9f3cab5bcaa03021a8677cda720596f0da2f8"],"a837c064b67fa63a9394136e31218b908cdcf783":["5bd6aa52c560df7d631f1e5182265481bbb883ff"],"8bc9f3cab5bcaa03021a8677cda720596f0da2f8":["97bd2b0da4beced82821b752b29576be986cf1ff"],"85032ab568b3f50eabd577aaa994ba197db93758":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}