{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float).mjava","commits":[{"id":"edb74c83fff94196b864e08ca033d92823252cb7","date":1339593164,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean).mjava","sourceNew":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(PackedInts.bitsRequired(bytes.length - 1), 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n    \n    writer = new BytesWriter();\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","sourceOld":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new int[8];\n      inCounts = new int[8];\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n    \n    writer = new BytesWriter();\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb27634f76319b68d6d8fd11a7104d20294722c5","date":1355210077,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float).mjava","sourceNew":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(PackedInts.bitsRequired(bytes.length - 1), 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n    \n    writer = new DefaultBytesWriter();\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","sourceOld":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(PackedInts.bitsRequired(bytes.length - 1), 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n    \n    writer = new BytesWriter();\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float).mjava","sourceNew":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(PackedInts.bitsRequired(bytes.length - 1), 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n    \n    writer = new DefaultBytesWriter();\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","sourceOld":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(PackedInts.bitsRequired(bytes.length - 1), 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n    \n    writer = new BytesWriter();\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb8af2aec0a8574cf50cad6939d4475179595eca","date":1357675799,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float).mjava","sourceNew":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio, boolean allowArrayArcs) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    this.allowArrayArcs = allowArrayArcs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(PackedInts.bitsRequired(bytes.length - 1), 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n    \n    writer = new DefaultBytesWriter();\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","sourceOld":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(PackedInts.bitsRequired(bytes.length - 1), 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n    \n    writer = new DefaultBytesWriter();\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(INPUT_TYPE,Outputs[T],boolean,float).mjava","sourceNew":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio, boolean allowArrayArcs) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    this.allowArrayArcs = allowArrayArcs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(PackedInts.bitsRequired(bytes.length - 1), 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n    \n    writer = new DefaultBytesWriter();\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","sourceOld":"  // make a new empty FST, for building; Builder invokes\n  // this ctor\n  FST(INPUT_TYPE inputType, Outputs<T> outputs, boolean willPackFST, float acceptableOverheadRatio) {\n    this.inputType = inputType;\n    this.outputs = outputs;\n    bytes = new byte[128];\n    NO_OUTPUT = outputs.getNoOutput();\n    if (willPackFST) {\n      nodeAddress = new GrowableWriter(PackedInts.bitsRequired(bytes.length - 1), 8, acceptableOverheadRatio);\n      inCounts = new GrowableWriter(1, 8, acceptableOverheadRatio);\n    } else {\n      nodeAddress = null;\n      inCounts = null;\n    }\n    \n    writer = new DefaultBytesWriter();\n\n    emptyOutput = null;\n    packed = false;\n    nodeRefToAddress = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["edb74c83fff94196b864e08ca033d92823252cb7","cb27634f76319b68d6d8fd11a7104d20294722c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb8af2aec0a8574cf50cad6939d4475179595eca":["cb27634f76319b68d6d8fd11a7104d20294722c5"],"edb74c83fff94196b864e08ca033d92823252cb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fb8af2aec0a8574cf50cad6939d4475179595eca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb8af2aec0a8574cf50cad6939d4475179595eca"],"cb27634f76319b68d6d8fd11a7104d20294722c5":["edb74c83fff94196b864e08ca033d92823252cb7"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edb74c83fff94196b864e08ca033d92823252cb7"],"fb8af2aec0a8574cf50cad6939d4475179595eca":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"edb74c83fff94196b864e08ca033d92823252cb7":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cb27634f76319b68d6d8fd11a7104d20294722c5"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cb27634f76319b68d6d8fd11a7104d20294722c5":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fb8af2aec0a8574cf50cad6939d4475179595eca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}