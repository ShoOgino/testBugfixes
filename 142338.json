{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String).mjava","commits":[{"id":"3a80994db3380cd78c6f65b84515e2e931b6b3da","date":1329530403,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderUrl(String,String).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @param collection\n   * @param slice\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  private ZkCoreNodeProps getLeaderProps(final String collection, final String slice)\n      throws KeeperException, InterruptedException {\n    int iterCount = 60;\n    while (iterCount-- > 0)\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (NoNodeException e) {\n        Thread.sleep(500);\n      }\n    throw new RuntimeException(\"Could not get leader props\");\n  }\n\n","sourceOld":"  /**\n   * Get leader URL directly from zk nodes.\n   * \n   * @param collection\n   * @param slice\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  private String getLeaderUrl(final String collection, final String slice)\n      throws KeeperException, InterruptedException {\n    int iterCount = 60;\n    while (iterCount-- > 0)\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps.getCoreUrl();\n      } catch (NoNodeException e) {\n        Thread.sleep(500);\n      }\n    throw new RuntimeException(\"Could not get leader props\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c824b5854f7ad30cd53f0634fc7cb533df74590b","date":1344024196,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @param collection\n   * @param slice\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  private ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice) throws KeeperException, InterruptedException {\n    int iterCount = 60;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (NoNodeException e) {\n        Thread.sleep(500);\n      }\n    }\n    throw new RuntimeException(\"Could not get leader props\");\n  }\n\n","sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @param collection\n   * @param slice\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  private ZkCoreNodeProps getLeaderProps(final String collection, final String slice)\n      throws KeeperException, InterruptedException {\n    int iterCount = 60;\n    while (iterCount-- > 0)\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (NoNodeException e) {\n        Thread.sleep(500);\n      }\n    throw new RuntimeException(\"Could not get leader props\");\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @param collection\n   * @param slice\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  private ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice) throws KeeperException, InterruptedException {\n    int iterCount = 60;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (NoNodeException e) {\n        Thread.sleep(500);\n      }\n    }\n    throw new RuntimeException(\"Could not get leader props\");\n  }\n\n","sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @param collection\n   * @param slice\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  private ZkCoreNodeProps getLeaderProps(final String collection, final String slice)\n      throws KeeperException, InterruptedException {\n    int iterCount = 60;\n    while (iterCount-- > 0)\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (NoNodeException e) {\n        Thread.sleep(500);\n      }\n    throw new RuntimeException(\"Could not get leader props\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @param collection\n   * @param slice\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  private ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice) throws KeeperException, InterruptedException {\n    int iterCount = 60;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (NoNodeException e) {\n        Thread.sleep(500);\n      }\n    }\n    throw new RuntimeException(\"Could not get leader props\");\n  }\n\n","sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @param collection\n   * @param slice\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  private ZkCoreNodeProps getLeaderProps(final String collection, final String slice)\n      throws KeeperException, InterruptedException {\n    int iterCount = 60;\n    while (iterCount-- > 0)\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (NoNodeException e) {\n        Thread.sleep(500);\n      }\n    throw new RuntimeException(\"Could not get leader props\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @param collection\n   * @param slice\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  private ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice) throws InterruptedException {\n    int iterCount = 60;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (Exception e) {\n        exp = e;\n        Thread.sleep(500);\n      }\n      if (cc.isShutDown()) {\n        throw new RuntimeException(\"CoreContainer is shutdown\");\n      }\n    }\n    throw new RuntimeException(\"Could not get leader props\", exp);\n  }\n\n","sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @param collection\n   * @param slice\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  private ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice) throws KeeperException, InterruptedException {\n    int iterCount = 60;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (NoNodeException e) {\n        Thread.sleep(500);\n      }\n    }\n    throw new RuntimeException(\"Could not get leader props\");\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @param collection\n   * @param slice\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  private ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice) throws InterruptedException {\n    int iterCount = 60;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (Exception e) {\n        exp = e;\n        Thread.sleep(500);\n      }\n      if (cc.isShutDown()) {\n        throw new RuntimeException(\"CoreContainer is shutdown\");\n      }\n    }\n    throw new RuntimeException(\"Could not get leader props\", exp);\n  }\n\n","sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @param collection\n   * @param slice\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  private ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice) throws KeeperException, InterruptedException {\n    int iterCount = 60;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (NoNodeException e) {\n        Thread.sleep(500);\n      }\n    }\n    throw new RuntimeException(\"Could not get leader props\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f42adde674c3832964de02a512782c0d752a1ff7","date":1347295064,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   */\n  private ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice) throws InterruptedException {\n    int iterCount = 60;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (Exception e) {\n        exp = e;\n        Thread.sleep(500);\n      }\n      if (cc.isShutDown()) {\n        throw new RuntimeException(\"CoreContainer is shutdown\");\n      }\n    }\n    throw new RuntimeException(\"Could not get leader props\", exp);\n  }\n\n","sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   * \n   * @param collection\n   * @param slice\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  private ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice) throws InterruptedException {\n    int iterCount = 60;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (Exception e) {\n        exp = e;\n        Thread.sleep(500);\n      }\n      if (cc.isShutDown()) {\n        throw new RuntimeException(\"CoreContainer is shutdown\");\n      }\n    }\n    throw new RuntimeException(\"Could not get leader props\", exp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice) throws InterruptedException {\n    return getLeaderProps(collection, slice, false);\n  }\n\n","sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   */\n  private ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice) throws InterruptedException {\n    int iterCount = 60;\n    Exception exp = null;\n    while (iterCount-- > 0) {\n      try {\n        byte[] data = zkClient.getData(\n            ZkStateReader.getShardLeadersPath(collection, slice), null, null,\n            true);\n        ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(\n            ZkNodeProps.load(data));\n        return leaderProps;\n      } catch (InterruptedException e) {\n        throw e;\n      } catch (Exception e) {\n        exp = e;\n        Thread.sleep(500);\n      }\n      if (cc.isShutDown()) {\n        throw new RuntimeException(\"CoreContainer is shutdown\");\n      }\n    }\n    throw new RuntimeException(\"Could not get leader props\", exp);\n  }\n\n","bugFix":["c516f1fb8a8bbd4b308968d3f638304888ce86d1","c824b5854f7ad30cd53f0634fc7cb533df74590b","6013b4c7388f1627659c8f96c44abd10a294d3a6","3a80994db3380cd78c6f65b84515e2e931b6b3da"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a98541130dbb2dd570f39bd89ced65760cad80","date":1355032328,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String).mjava","sourceNew":"  /**\n   * Get leader props directly from zk nodes.\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice, int timeoutms) throws InterruptedException {\n    return getLeaderProps(collection, slice, timeoutms, false);\n  }\n\n","sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice) throws InterruptedException {\n    return getLeaderProps(collection, slice, false);\n  }\n\n","bugFix":null,"bugIntro":["bbb0b5c5101d175049b4ced1462f4c266d32fc63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getLeaderProps(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get leader props directly from zk nodes.\n   */\n  public ZkCoreNodeProps getLeaderProps(final String collection,\n      final String slice) throws InterruptedException {\n    return getLeaderProps(collection, slice, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c824b5854f7ad30cd53f0634fc7cb533df74590b":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"a6378064655e76cd7b908b1cab4ce425b384b508":["f42adde674c3832964de02a512782c0d752a1ff7"],"f42adde674c3832964de02a512782c0d752a1ff7":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"f9a98541130dbb2dd570f39bd89ced65760cad80":["a6378064655e76cd7b908b1cab4ce425b384b508"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a6378064655e76cd7b908b1cab4ce425b384b508","f9a98541130dbb2dd570f39bd89ced65760cad80"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["3a80994db3380cd78c6f65b84515e2e931b6b3da","c824b5854f7ad30cd53f0634fc7cb533df74590b"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["3a80994db3380cd78c6f65b84515e2e931b6b3da","c824b5854f7ad30cd53f0634fc7cb533df74590b"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["d6f074e73200c07d54f242d3880a8da5a35ff97b","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f9a98541130dbb2dd570f39bd89ced65760cad80"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["c824b5854f7ad30cd53f0634fc7cb533df74590b"]},"commit2Childs":{"c824b5854f7ad30cd53f0634fc7cb533df74590b":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"a6378064655e76cd7b908b1cab4ce425b384b508":["f9a98541130dbb2dd570f39bd89ced65760cad80","407687e67faf6e1f02a211ca078d8e3eed631027"],"f42adde674c3832964de02a512782c0d752a1ff7":["a6378064655e76cd7b908b1cab4ce425b384b508"],"f9a98541130dbb2dd570f39bd89ced65760cad80":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["c824b5854f7ad30cd53f0634fc7cb533df74590b","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["f42adde674c3832964de02a512782c0d752a1ff7","05a14b2611ead08655a2b2bdc61632eb31316e57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","8fd5be977c105554c6a7b68afcdbc511439723ab","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}