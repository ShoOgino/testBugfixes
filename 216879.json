{"path":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#verifyPropertyVal(CloudSolrServer,String,String,String,String).mjava","commits":[{"id":"dc2bafa00000be70227a04c29e3f885ff41e531d","date":1412182669,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#verifyPropertyVal(CloudSolrServer,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  private void verifyPropertyVal(CloudSolrServer client, String collectionName,\n                                 String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState(true);\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n    replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["57517fbf5120ed94888bc0bfb86f9a81094059cf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57517fbf5120ed94888bc0bfb86f9a81094059cf","date":1412273713,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#verifyPropertyVal(CloudSolrServer,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#verifyPropertyVal(CloudSolrServer,String,String,String,String).mjava","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  private void verifyPropertyVal(CloudSolrServer client, String collectionName,\n                                 String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState(true);\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  private void verifyPropertyVal(CloudSolrServer client, String collectionName,\n                                 String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState(true);\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n    replica.getProperties().toString() + \".\");\n\n  }\n\n","bugFix":["dc2bafa00000be70227a04c29e3f885ff41e531d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#verifyPropertyVal(CloudSolrServer,String,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  private void verifyPropertyVal(CloudSolrServer client, String collectionName,\n                                 String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState(true);\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64707d25b6352cf02909d3916038a3b3cec7f0a8","date":1412782122,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrServer,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#verifyPropertyVal(CloudSolrServer,String,String,String,String).mjava","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  void verifyPropertyVal(CloudSolrServer client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState(true);\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  private void verifyPropertyVal(CloudSolrServer client, String collectionName,\n                                 String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState(true);\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReplicaPropertiesBase#verifyPropertyVal(CloudSolrServer,String,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#verifyPropertyVal(CloudSolrServer,String,String,String,String).mjava","sourceNew":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  void verifyPropertyVal(CloudSolrServer client, String collectionName,\n                         String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState(true);\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","sourceOld":"  // The params are triplets,\n  // collection\n  // shard\n  // replica\n  private void verifyPropertyVal(CloudSolrServer client, String collectionName,\n                                 String replicaName, String property, String val)\n      throws InterruptedException, KeeperException {\n    Replica replica = null;\n    ClusterState clusterState = null;\n\n    for (int idx = 0; idx < 300; ++idx) { // Keep trying while Overseer writes the ZK state for up to 30 seconds.\n      client.getZkStateReader().updateClusterState(true);\n      clusterState = client.getZkStateReader().getClusterState();\n      replica = clusterState.getReplica(collectionName, replicaName);\n      if (replica == null) {\n        fail(\"Could not find collection/replica pair! \" + collectionName + \"/\" + replicaName);\n      }\n      if (StringUtils.equals(val, replica.getStr(property))) return;\n      Thread.sleep(100);\n    }\n\n    fail(\"Property '\" + property + \"' with value \" + replica.getStr(property) +\n        \" not set correctly for collection/replica pair: \" + collectionName + \"/\" + replicaName + \" property map is \" +\n        replica.getProperties().toString() + \".\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["d9a47902d6207303f5ed3e7aaca62ca33433af66","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["57517fbf5120ed94888bc0bfb86f9a81094059cf"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","57517fbf5120ed94888bc0bfb86f9a81094059cf"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57517fbf5120ed94888bc0bfb86f9a81094059cf":["dc2bafa00000be70227a04c29e3f885ff41e531d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64707d25b6352cf02909d3916038a3b3cec7f0a8"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","dc2bafa00000be70227a04c29e3f885ff41e531d"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["55980207f1977bd1463465de1659b821347e2fa8"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["57517fbf5120ed94888bc0bfb86f9a81094059cf"],"57517fbf5120ed94888bc0bfb86f9a81094059cf":["64707d25b6352cf02909d3916038a3b3cec7f0a8","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}