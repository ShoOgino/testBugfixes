{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  // A RangeValueSource can't easily be a ValueSource that takes another ValueSource\n  // because it needs different behavior depending on the type of fields.  There is also\n  // a setup cost - parsing and normalizing params, and doing a binary search on the StringIndex.\n  // TODO: change \"reader\" to AtomicReaderContext\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    float lower;\n    float upper;\n\n    if (lowerVal == null) {\n      lower = Float.NEGATIVE_INFINITY;\n    } else {\n      lower = Float.parseFloat(lowerVal);\n    }\n    if (upperVal == null) {\n      upper = Float.POSITIVE_INFINITY;\n    } else {\n      upper = Float.parseFloat(upperVal);\n    }\n\n    final float l = lower;\n    final float u = upper;\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // A RangeValueSource can't easily be a ValueSource that takes another ValueSource\n  // because it needs different behavior depending on the type of fields.  There is also\n  // a setup cost - parsing and normalizing params, and doing a binary search on the StringIndex.\n  // TODO: change \"reader\" to AtomicReaderContext\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    float lower;\n    float upper;\n\n    if (lowerVal == null) {\n      lower = Float.NEGATIVE_INFINITY;\n    } else {\n      lower = Float.parseFloat(lowerVal);\n    }\n    if (upperVal == null) {\n      upper = Float.POSITIVE_INFINITY;\n    } else {\n      upper = Float.parseFloat(upperVal);\n    }\n\n    final float l = lower;\n    final float u = upper;\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9644a32526f2e2ae87543b00e8be543aa25f29c","date":1411548458,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  // A RangeValueSource can't easily be a ValueSource that takes another ValueSource\n  // because it needs different behavior depending on the type of fields.  There is also\n  // a setup cost - parsing and normalizing params, and doing a binary search on the StringIndex.\n  // TODO: change \"reader\" to LeafReaderContext\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    float lower;\n    float upper;\n\n    if (lowerVal == null) {\n      lower = Float.NEGATIVE_INFINITY;\n    } else {\n      lower = Float.parseFloat(lowerVal);\n    }\n    if (upperVal == null) {\n      upper = Float.POSITIVE_INFINITY;\n    } else {\n      upper = Float.parseFloat(upperVal);\n    }\n\n    final float l = lower;\n    final float u = upper;\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // A RangeValueSource can't easily be a ValueSource that takes another ValueSource\n  // because it needs different behavior depending on the type of fields.  There is also\n  // a setup cost - parsing and normalizing params, and doing a binary search on the StringIndex.\n  // TODO: change \"reader\" to AtomicReaderContext\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    float lower;\n    float upper;\n\n    if (lowerVal == null) {\n      lower = Float.NEGATIVE_INFINITY;\n    } else {\n      lower = Float.parseFloat(lowerVal);\n    }\n    if (upperVal == null) {\n      upper = Float.POSITIVE_INFINITY;\n    } else {\n      upper = Float.parseFloat(upperVal);\n    }\n\n    final float l = lower;\n    final float u = upper;\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5639d0d5bffb5076883b28d9b3329fbd52812137","date":1438883244,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Yields a {@link Scorer} that matches documents with values between the specified range,\n   * and that which produces scores equal to {@link #floatVal(int)}.\n   */\n  // A RangeValueSource can't easily be a ValueSource that takes another ValueSource\n  // because it needs different behavior depending on the type of fields.  There is also\n  // a setup cost - parsing and normalizing params, and doing a binary search on the StringIndex.\n  // TODO: change \"reader\" to LeafReaderContext\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    float lower;\n    float upper;\n\n    if (lowerVal == null) {\n      lower = Float.NEGATIVE_INFINITY;\n    } else {\n      lower = Float.parseFloat(lowerVal);\n    }\n    if (upperVal == null) {\n      upper = Float.POSITIVE_INFINITY;\n    } else {\n      upper = Float.parseFloat(upperVal);\n    }\n\n    final float l = lower;\n    final float u = upper;\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matches(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matches(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matches(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matches(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // A RangeValueSource can't easily be a ValueSource that takes another ValueSource\n  // because it needs different behavior depending on the type of fields.  There is also\n  // a setup cost - parsing and normalizing params, and doing a binary search on the StringIndex.\n  // TODO: change \"reader\" to LeafReaderContext\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    float lower;\n    float upper;\n\n    if (lowerVal == null) {\n      lower = Float.NEGATIVE_INFINITY;\n    } else {\n      lower = Float.parseFloat(lowerVal);\n    }\n    if (upperVal == null) {\n      upper = Float.POSITIVE_INFINITY;\n    } else {\n      upper = Float.parseFloat(upperVal);\n    }\n\n    final float l = lower;\n    final float u = upper;\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","bugFix":["c0d9871701755df956b8bb5e417776dacc7dc1f2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57cfa96e1cacc0f1f98d8732aa54935875187781","date":1458248307,"type":5,"author":"yonik","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues#getRangeScorer(LeafReaderContext,String,String,boolean,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Yields a {@link Scorer} that matches documents with values between the specified range,\n   * and that which produces scores equal to {@link #floatVal(int)}.\n   */\n  // A RangeValueSource can't easily be a ValueSource that takes another ValueSource\n  // because it needs different behavior depending on the type of fields.  There is also\n  // a setup cost - parsing and normalizing params, and doing a binary search on the StringIndex.\n  // TODO: change \"reader\" to LeafReaderContext\n  public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    float lower;\n    float upper;\n\n    if (lowerVal == null) {\n      lower = Float.NEGATIVE_INFINITY;\n    } else {\n      lower = Float.parseFloat(lowerVal);\n    }\n    if (upperVal == null) {\n      upper = Float.POSITIVE_INFINITY;\n    } else {\n      upper = Float.parseFloat(upperVal);\n    }\n\n    final float l = lower;\n    final float u = upper;\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(readerContext, this) {\n        @Override\n        public boolean matches(int doc) {\n          if (!exists(doc)) return false;\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n       return new ValueSourceScorer(readerContext, this) {\n        @Override\n        public boolean matches(int doc) {\n          if (!exists(doc)) return false;\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n       return new ValueSourceScorer(readerContext, this) {\n        @Override\n        public boolean matches(int doc) {\n          if (!exists(doc)) return false;\n          float docVal = floatVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n       return new ValueSourceScorer(readerContext, this) {\n        @Override\n        public boolean matches(int doc) {\n          if (!exists(doc)) return false;\n          float docVal = floatVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /**\n   * Yields a {@link Scorer} that matches documents with values between the specified range,\n   * and that which produces scores equal to {@link #floatVal(int)}.\n   */\n  // A RangeValueSource can't easily be a ValueSource that takes another ValueSource\n  // because it needs different behavior depending on the type of fields.  There is also\n  // a setup cost - parsing and normalizing params, and doing a binary search on the StringIndex.\n  // TODO: change \"reader\" to LeafReaderContext\n  public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n    float lower;\n    float upper;\n\n    if (lowerVal == null) {\n      lower = Float.NEGATIVE_INFINITY;\n    } else {\n      lower = Float.parseFloat(lowerVal);\n    }\n    if (upperVal == null) {\n      upper = Float.POSITIVE_INFINITY;\n    } else {\n      upper = Float.parseFloat(upperVal);\n    }\n\n    final float l = lower;\n    final float u = upper;\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matches(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matches(int doc) {\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matches(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n       return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matches(int doc) {\n          float docVal = floatVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["5639d0d5bffb5076883b28d9b3329fbd52812137"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5639d0d5bffb5076883b28d9b3329fbd52812137":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"c9644a32526f2e2ae87543b00e8be543aa25f29c":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57cfa96e1cacc0f1f98d8732aa54935875187781"]},"commit2Childs":{"57cfa96e1cacc0f1f98d8732aa54935875187781":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"5639d0d5bffb5076883b28d9b3329fbd52812137":["57cfa96e1cacc0f1f98d8732aa54935875187781"],"c9644a32526f2e2ae87543b00e8be543aa25f29c":["5639d0d5bffb5076883b28d9b3329fbd52812137"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}