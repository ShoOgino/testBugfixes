{"path":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","sourceNew":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","sourceNew":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","sourceNew":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"820731f8480edb13c35c29432e85168fe2c5749f","date":1384418937,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","sourceNew":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n    \n    //Grouping\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n        \"group\", CommonParams.TRUE,\n        \"group.field\", \"inStock_b1\",\n        \"debug\", CommonParams.TRUE), \n        \"//str[@name='rawquerystring']='*:*'\",\n        \"count(//lst[@name='explain']/*)=2\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n  }\n\n","bugFix":["cd00dd91853514614379b0e680d65bd19cac0f30"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","sourceNew":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify its result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify its result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n    \n    //Grouping\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n        \"group\", CommonParams.TRUE,\n        \"group.field\", \"inStock_b1\",\n        \"debug\", CommonParams.TRUE), \n        \"//str[@name='rawquerystring']='*:*'\",\n        \"count(//lst[@name='explain']/*)=2\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n    \n    //Grouping\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n        \"group\", CommonParams.TRUE,\n        \"group.field\", \"inStock_b1\",\n        \"debug\", CommonParams.TRUE), \n        \"//str[@name='rawquerystring']='*:*'\",\n        \"count(//lst[@name='explain']/*)=2\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb2f9e92f7114c0c2cd94cadd470eab7614fbb3f","date":1593127760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","sourceNew":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=4\", //should be four pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify its result\n            \"count(//lst[@name='circuitbreaker']/*)>0\",\n            \"//lst[@name='circuitbreaker']/double[@name='time']\",\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=4\", //should be four pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify its result\n            \"count(//lst[@name='circuitbreaker']/*)>0\",\n            \"//lst[@name='circuitbreaker']/double[@name='time']\",\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n    \n    //Grouping\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n        \"group\", CommonParams.TRUE,\n        \"group.field\", \"inStock_b1\",\n        \"debug\", CommonParams.TRUE), \n        \"//str[@name='rawquerystring']='*:*'\",\n        \"count(//lst[@name='explain']/*)=2\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify its result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify its result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n    \n    //Grouping\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n        \"group\", CommonParams.TRUE,\n        \"group.field\", \"inStock_b1\",\n        \"debug\", CommonParams.TRUE), \n        \"//str[@name='rawquerystring']='*:*'\",\n        \"count(//lst[@name='explain']/*)=2\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83e4e3bad02b24e922b644b91e819af19553a79","date":1593190221,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","sourceNew":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be four pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify its result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be four pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify its result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n    \n    //Grouping\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n        \"group\", CommonParams.TRUE,\n        \"group.field\", \"inStock_b1\",\n        \"debug\", CommonParams.TRUE), \n        \"//str[@name='rawquerystring']='*:*'\",\n        \"count(//lst[@name='explain']/*)=2\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=4\", //should be four pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify its result\n            \"count(//lst[@name='circuitbreaker']/*)>0\",\n            \"//lst[@name='circuitbreaker']/double[@name='time']\",\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=4\", //should be four pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify its result\n            \"count(//lst[@name='circuitbreaker']/*)>0\",\n            \"//lst[@name='circuitbreaker']/double[@name='time']\",\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n    \n    //Grouping\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n        \"group\", CommonParams.TRUE,\n        \"group.field\", \"inStock_b1\",\n        \"debug\", CommonParams.TRUE), \n        \"//str[@name='rawquerystring']='*:*'\",\n        \"count(//lst[@name='explain']/*)=2\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9c8a0d139a128916bbde3ee20210c0aec72f4f7","date":1593281638,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","sourceNew":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=4\", //should be four pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify its result\n            \"count(//lst[@name='circuitbreaker']/*)>0\",\n            \"//lst[@name='circuitbreaker']/double[@name='time']\",\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=4\", //should be four pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify its result\n            \"count(//lst[@name='circuitbreaker']/*)>0\",\n            \"//lst[@name='circuitbreaker']/double[@name='time']\",\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n    \n    //Grouping\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n        \"group\", CommonParams.TRUE,\n        \"group.field\", \"inStock_b1\",\n        \"debug\", CommonParams.TRUE), \n        \"//str[@name='rawquerystring']='*:*'\",\n        \"count(//lst[@name='explain']/*)=2\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be four pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify its result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be four pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify its result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n    \n    //Grouping\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n        \"group\", CommonParams.TRUE,\n        \"group.field\", \"inStock_b1\",\n        \"debug\", CommonParams.TRUE), \n        \"//str[@name='rawquerystring']='*:*'\",\n        \"count(//lst[@name='explain']/*)=2\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c90ab1851c3d4f092f675db837cb3acfc97f0b1","date":1593428022,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","sourceNew":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify its result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify its result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n    \n    //Grouping\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n        \"group\", CommonParams.TRUE,\n        \"group.field\", \"inStock_b1\",\n        \"debug\", CommonParams.TRUE), \n        \"//str[@name='rawquerystring']='*:*'\",\n        \"count(//lst[@name='explain']/*)=2\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=4\", //should be four pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify its result\n            \"count(//lst[@name='circuitbreaker']/*)>0\",\n            \"//lst[@name='circuitbreaker']/double[@name='time']\",\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=4\", //should be four pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify its result\n            \"count(//lst[@name='circuitbreaker']/*)>0\",\n            \"//lst[@name='circuitbreaker']/double[@name='time']\",\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n    \n    //Grouping\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n        \"group\", CommonParams.TRUE,\n        \"group.field\", \"inStock_b1\",\n        \"debug\", CommonParams.TRUE), \n        \"//str[@name='rawquerystring']='*:*'\",\n        \"count(//lst[@name='explain']/*)=2\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c83e4e3bad02b24e922b644b91e819af19553a79":["eb2f9e92f7114c0c2cd94cadd470eab7614fbb3f"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["820731f8480edb13c35c29432e85168fe2c5749f"],"d9c8a0d139a128916bbde3ee20210c0aec72f4f7":["c83e4e3bad02b24e922b644b91e819af19553a79"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"820731f8480edb13c35c29432e85168fe2c5749f":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3c90ab1851c3d4f092f675db837cb3acfc97f0b1":["d9c8a0d139a128916bbde3ee20210c0aec72f4f7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c90ab1851c3d4f092f675db837cb3acfc97f0b1"],"eb2f9e92f7114c0c2cd94cadd470eab7614fbb3f":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"c83e4e3bad02b24e922b644b91e819af19553a79":["d9c8a0d139a128916bbde3ee20210c0aec72f4f7"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["eb2f9e92f7114c0c2cd94cadd470eab7614fbb3f"],"d9c8a0d139a128916bbde3ee20210c0aec72f4f7":["3c90ab1851c3d4f092f675db837cb3acfc97f0b1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"820731f8480edb13c35c29432e85168fe2c5749f":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"c26f00b574427b55127e869b935845554afde1fa":["820731f8480edb13c35c29432e85168fe2c5749f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"3c90ab1851c3d4f092f675db837cb3acfc97f0b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"eb2f9e92f7114c0c2cd94cadd470eab7614fbb3f":["c83e4e3bad02b24e922b644b91e819af19553a79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}