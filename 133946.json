{"path":"solr/core/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","pathOld":"solr/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","sourceNew":"  /**\n   * Tests that both update.chain and update.processor works\n   * NOTE: This test will fail when support for update.processor is removed and should then be removed\n   */\n  public void testUpdateProcessorParamDeprecation() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Tests that both update.chain and update.processor works\n   * NOTE: This test will fail when support for update.processor is removed and should then be removed\n   */\n  public void testUpdateProcessorParamDeprecation() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","pathOld":"solr/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","sourceNew":"  /**\n   * Tests that both update.chain and update.processor works\n   * NOTE: This test will fail when support for update.processor is removed and should then be removed\n   */\n  public void testUpdateProcessorParamDeprecation() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Tests that both update.chain and update.processor works\n   * NOTE: This test will fail when support for update.processor is removed and should then be removed\n   */\n  public void testUpdateProcessorParamDeprecation() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","pathOld":"solr/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","sourceNew":"  /**\n   * Tests that both update.chain and update.processor works\n   * NOTE: This test will fail when support for update.processor is removed and should then be removed\n   */\n  public void testUpdateProcessorParamDeprecation() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Tests that both update.chain and update.processor works\n   * NOTE: This test will fail when support for update.processor is removed and should then be removed\n   */\n  public void testUpdateProcessorParamDeprecation() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3a7218407032c06bc1d6c57edf979e7788f5def","date":1326793293,"type":5,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecationRemoved().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/UpdateParamsTest#testUpdateProcessorParamDeprecation().mjava","sourceNew":"  /**\n   * Tests that only update.chain and not update.processor works (SOLR-2105)\n   */\n  public void testUpdateProcessorParamDeprecationRemoved() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(\"update.processor\", \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertTrue(\"Old param update.processor should not have any effect anymore\", true);\n    } catch (Exception e) {\n      assertFalse(\"Got wrong exception while testing update.chain\", e.getMessage().equals(\"unknown UpdateRequestProcessorChain: nonexistant\"));\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(\"update.processor\");\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Tests that both update.chain and update.processor works\n   * NOTE: This test will fail when support for update.processor is removed and should then be removed\n   */\n  public void testUpdateProcessorParamDeprecation() throws Exception {\n    SolrCore core = h.getCore();\n    \n    XmlUpdateRequestHandler handler = new XmlUpdateRequestHandler();\n    handler.init( null );\n    \n    MapSolrParams params = new MapSolrParams( new HashMap<String, String>() );\n    params.getMap().put(UpdateParams.UPDATE_CHAIN_DEPRECATED, \"nonexistant\");\n\n    // Add a single document\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params ) {};\n    \n    // First check that the old param behaves as it should\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.processor parameter (deprecated but should work) not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n    // Then check that the new param behaves correctly\n    params.getMap().remove(UpdateParams.UPDATE_CHAIN_DEPRECATED);\n    params.getMap().put(UpdateParams.UPDATE_CHAIN, \"nonexistant\");    \n    req.setParams(params);\n    try {\n    \thandler.handleRequestBody(req, rsp);\n    \tassertFalse(\"Faulty update.chain parameter not causing an error - i.e. it is not detected\", true);\n    } catch (Exception e) {\n    \tassertEquals(\"Got wrong exception while testing update.chain\", e.getMessage(), \"unknown UpdateRequestProcessorChain: nonexistant\");\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f3a7218407032c06bc1d6c57edf979e7788f5def":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3a7218407032c06bc1d6c57edf979e7788f5def"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["f3a7218407032c06bc1d6c57edf979e7788f5def"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f3a7218407032c06bc1d6c57edf979e7788f5def":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}