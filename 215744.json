{"path":"lucene/src/test/org/apache/lucene/util/automaton/TestMinimize#randomishAutomaton().mjava","commits":[{"id":"d014891c148c6c65e1277971434bc45a62ced7aa","date":1287688005,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestMinimize#randomishAutomaton().mjava","pathOld":"/dev/null","sourceNew":"  private Automaton randomishAutomaton() {\n    // get two random Automata from regexps\n    Automaton a1 = AutomatonTestUtil.randomRegexp(random).toAutomaton();\n    if (random.nextBoolean())\n      a1 = BasicOperations.complement(a1);\n    \n    Automaton a2 = AutomatonTestUtil.randomRegexp(random).toAutomaton();\n    if (random.nextBoolean()) \n      a2 = BasicOperations.complement(a2);\n    \n    // combine them in random ways\n    switch(random.nextInt(3)) {\n      case 0: return BasicOperations.concatenate(a1, a2);\n      case 1: return BasicOperations.union(a1, a2);\n      default: return BasicOperations.minus(a1, a2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f929e76e5bff5bd750673f61a3b2570f98e59787","date":1287688473,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestMinimize#randomishAutomaton().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestMinimize#randomishAutomaton().mjava","sourceNew":"  private Automaton randomishAutomaton() {\n    // get two random Automata from regexps\n    Automaton a1 = AutomatonTestUtil.randomRegexp(random).toAutomaton();\n    if (random.nextBoolean())\n      a1 = BasicOperations.complement(a1);\n    \n    Automaton a2 = AutomatonTestUtil.randomRegexp(random).toAutomaton();\n    if (random.nextBoolean()) \n      a2 = BasicOperations.complement(a2);\n    \n    // combine them in random ways\n    switch(random.nextInt(4)) {\n      case 0: return BasicOperations.concatenate(a1, a2);\n      case 1: return BasicOperations.union(a1, a2);\n      case 2: return BasicOperations.intersection(a1, a2);\n      default: return BasicOperations.minus(a1, a2);\n    }\n  }\n\n","sourceOld":"  private Automaton randomishAutomaton() {\n    // get two random Automata from regexps\n    Automaton a1 = AutomatonTestUtil.randomRegexp(random).toAutomaton();\n    if (random.nextBoolean())\n      a1 = BasicOperations.complement(a1);\n    \n    Automaton a2 = AutomatonTestUtil.randomRegexp(random).toAutomaton();\n    if (random.nextBoolean()) \n      a2 = BasicOperations.complement(a2);\n    \n    // combine them in random ways\n    switch(random.nextInt(3)) {\n      case 0: return BasicOperations.concatenate(a1, a2);\n      case 1: return BasicOperations.union(a1, a2);\n      default: return BasicOperations.minus(a1, a2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a62f51fc98f22545b2c8453da582a2d8222a756","date":1287705676,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#randomAutomaton(Random).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestMinimize#randomishAutomaton().mjava","sourceNew":"  /** return a random NFA/DFA for testing */\n  public static Automaton randomAutomaton(Random random) {\n    // get two random Automata from regexps\n    Automaton a1 = AutomatonTestUtil.randomRegexp(random).toAutomaton();\n    if (random.nextBoolean())\n      a1 = BasicOperations.complement(a1);\n    \n    Automaton a2 = AutomatonTestUtil.randomRegexp(random).toAutomaton();\n    if (random.nextBoolean()) \n      a2 = BasicOperations.complement(a2);\n    \n    // combine them in random ways\n    switch(random.nextInt(4)) {\n      case 0: return BasicOperations.concatenate(a1, a2);\n      case 1: return BasicOperations.union(a1, a2);\n      case 2: return BasicOperations.intersection(a1, a2);\n      default: return BasicOperations.minus(a1, a2);\n    }\n  }\n\n","sourceOld":"  private Automaton randomishAutomaton() {\n    // get two random Automata from regexps\n    Automaton a1 = AutomatonTestUtil.randomRegexp(random).toAutomaton();\n    if (random.nextBoolean())\n      a1 = BasicOperations.complement(a1);\n    \n    Automaton a2 = AutomatonTestUtil.randomRegexp(random).toAutomaton();\n    if (random.nextBoolean()) \n      a2 = BasicOperations.complement(a2);\n    \n    // combine them in random ways\n    switch(random.nextInt(4)) {\n      case 0: return BasicOperations.concatenate(a1, a2);\n      case 1: return BasicOperations.union(a1, a2);\n      case 2: return BasicOperations.intersection(a1, a2);\n      default: return BasicOperations.minus(a1, a2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f929e76e5bff5bd750673f61a3b2570f98e59787":["d014891c148c6c65e1277971434bc45a62ced7aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a62f51fc98f22545b2c8453da582a2d8222a756":["f929e76e5bff5bd750673f61a3b2570f98e59787"],"d014891c148c6c65e1277971434bc45a62ced7aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a62f51fc98f22545b2c8453da582a2d8222a756"]},"commit2Childs":{"f929e76e5bff5bd750673f61a3b2570f98e59787":["6a62f51fc98f22545b2c8453da582a2d8222a756"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d014891c148c6c65e1277971434bc45a62ced7aa"],"d014891c148c6c65e1277971434bc45a62ced7aa":["f929e76e5bff5bd750673f61a3b2570f98e59787"],"6a62f51fc98f22545b2c8453da582a2d8222a756":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}