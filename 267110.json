{"path":"src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,DocValues,DocValues).mjava","commits":[{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,DocValues,DocValues).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param doc  The doc to score\n   * @param p1DV\n   * @param p2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, DocValues p1DV, DocValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double x1;\n    double y1;\n    double x2;\n    double y2;\n    if (convertToRadians) {\n      x1 = p1D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      y1 = p1D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n      x2 = p2D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      y2 = p2D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n    } else {\n      x1 = p1D[0];\n      y1 = p1D[1];\n      x2 = p2D[0];\n      y2 = p2D[1];\n    }\n    return DistanceUtils.haversine(x1, y1, x2, y2, radius);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["15cafceb8478fa94442a7368e682a9d9b61d8d13","15cafceb8478fa94442a7368e682a9d9b61d8d13","15cafceb8478fa94442a7368e682a9d9b61d8d13"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,DocValues,DocValues).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/HaversineFunction#distance(int,DocValues,DocValues).mjava","sourceNew":"  /**\n   * @param doc  The doc to score\n   * @param p1DV\n   * @param p2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, DocValues p1DV, DocValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double x1;\n    double y1;\n    double x2;\n    double y2;\n    if (convertToRadians) {\n      x1 = p1D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      y1 = p1D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n      x2 = p2D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      y2 = p2D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n    } else {\n      x1 = p1D[0];\n      y1 = p1D[1];\n      x2 = p2D[0];\n      y2 = p2D[1];\n    }\n    return DistanceUtils.haversine(x1, y1, x2, y2, radius);\n  }\n\n","sourceOld":"  /**\n   * @param doc  The doc to score\n   * @param p1DV\n   * @param p2DV\n   * @return The haversine distance formula\n   */\n  protected double distance(int doc, DocValues p1DV, DocValues p2DV) {\n\n    double[] p1D = new double[2];\n    double[] p2D = new double[2];\n    p1DV.doubleVal(doc, p1D);\n    p2DV.doubleVal(doc, p2D);\n    double x1;\n    double y1;\n    double x2;\n    double y2;\n    if (convertToRadians) {\n      x1 = p1D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      y1 = p1D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n      x2 = p2D[0] * DistanceUtils.DEGREES_TO_RADIANS;\n      y2 = p2D[1] * DistanceUtils.DEGREES_TO_RADIANS;\n    } else {\n      x1 = p1D[0];\n      y1 = p1D[1];\n      x2 = p2D[0];\n      y2 = p2D[1];\n    }\n    return DistanceUtils.haversine(x1, y1, x2, y2, radius);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}