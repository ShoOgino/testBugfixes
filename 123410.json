{"path":"src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","commits":[{"id":"9a70797e2ad3b67325d3043155af4baf6445fdd9","date":1227585729,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","pathOld":"/dev/null","sourceNew":"  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","pathOld":"src/test/org/apache/solr/request/TestFaceting#testFacets().mjava","sourceNew":"  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","sourceOld":"  public void testFacets() throws Exception {\n    StringBuilder sb = new StringBuilder();\n\n    // go over 4096 to test some of the buffer resizing\n    for (int i=0; i<5000; i++) {\n      sb.append(t(i));\n      sb.append(' ');     \n    }\n\n    assertU(adoc(\"id\", \"1\", \"many_ws\", sb.toString()));\n    assertU(commit());\n\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(5) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4092) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4093) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4094) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4095) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4096) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4097) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4098) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4090) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n            );\n\n    // test gaps that take more than one byte\n    sb = new StringBuilder();\n    sb.append(t(0)).append(' ');\n    sb.append(t(150)).append(' ');\n    sb.append(t(301)).append(' ');\n    sb.append(t(453)).append(' ');\n    sb.append(t(606)).append(' ');\n    sb.append(t(1000)).append(' ');\n    sb.append(t(2010)).append(' ');\n    sb.append(t(3050)).append(' ');\n    sb.append(t(4999)).append(' ');\n    assertU(adoc(\"id\", \"2\", \"many_ws\", sb.toString()));\n    assertQ(\"check many tokens\",\n            req(\"q\", \"id:1\",\"indent\",\"true\"\n                ,\"facet\", \"true\", \"facet.method\",\"fc\"\n                ,\"facet.field\", \"many_ws\"\n                ,\"facet.limit\", \"-1\"\n                )\n            ,\"*[count(//lst[@name='many_ws']/int)=5000]\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(0) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(150) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(301) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(453) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(606) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(1000) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(2010) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(3050) + \"'][.='1']\"\n            ,\"//lst[@name='many_ws']/int[@name='\" + t(4999) + \"'][.='1']\"\n              );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["9a70797e2ad3b67325d3043155af4baf6445fdd9"],"9a70797e2ad3b67325d3043155af4baf6445fdd9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9a70797e2ad3b67325d3043155af4baf6445fdd9"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"9a70797e2ad3b67325d3043155af4baf6445fdd9":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}