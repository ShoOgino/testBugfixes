{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testTriggerThrottling().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testTriggerThrottling().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e","date":1529622176,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testTriggerThrottling().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testTriggerThrottling().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testTriggerThrottling().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testTriggerThrottling().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testTriggerThrottling().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TestSimTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2018-06-18\n  public void testTriggerThrottling() throws Exception  {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // first trigger\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // second trigger\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger2',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    String newNode = cluster.simAddNode();\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n\n    // reset shared state\n    lastActionExecutedAt.set(0);\n    TestTriggerIntegration.actionInitCalled = new CountDownLatch(2);\n    triggerFiredLatch = new CountDownLatch(2);\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger1',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger2',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + ThrottlingTesterAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the two instances of action are created\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    // stop the node we had started earlier\n    cluster.simRemoveNode(newNode, false);\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Both triggers should have fired by now\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e":["a6a5c1c40529f15b445e6720dfde1967e139bff1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}