{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/CopyOfBigramDictionary#loadFromFile(String).mjava","commits":[{"id":"05ff0cc6e864c7d71a48579f2acfca4f58943568","date":1242295762,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/CopyOfBigramDictionary#loadFromFile(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * 将词库文件加载到WordDictionary的相关数据结构中，只是加载，没有进行合并和修改操作\n   * \n   * @param dctFilePath\n   * @return\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  public void loadFromFile(String dctFilePath) throws FileNotFoundException,\n      IOException, UnsupportedEncodingException {\n\n    int i, cnt, length, total = 0;\n    // 文件中只统计了6763个汉字加5个空汉字符3756~3760，其中第3756个用来存储符号信息。\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // 字典文件中第一个汉字出现的位置是0，最后一个是6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);// 原词库文件在c下开发，所以写入的文件为little\n      // endian编码，而java为big endian，必须转换过来\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c8e2ccb489ce315fed9d631928894312a59bd7b","date":1242482918,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/CopyOfBigramDictionary#loadFromFile(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * 将词库文件加载到WordDictionary的相关数据结构中，只是加载，没有进行合并和修改操作\n   * \n   * @param dctFilePath\n   * @return\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  public void loadFromFile(String dctFilePath) throws FileNotFoundException,\n      IOException, UnsupportedEncodingException {\n\n    int i, cnt, length, total = 0;\n    // 文件中只统计了6763个汉字加5个空汉字符3756~3760，其中第3756个用来存储符号信息。\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // 字典文件中第一个汉字出现的位置是0，最后一个是6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);// 原词库文件在c下开发，所以写入的文件为little\n      // endian编码，而java为big endian，必须转换过来\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c8e2ccb489ce315fed9d631928894312a59bd7b":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c8e2ccb489ce315fed9d631928894312a59bd7b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"5c8e2ccb489ce315fed9d631928894312a59bd7b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["5c8e2ccb489ce315fed9d631928894312a59bd7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}