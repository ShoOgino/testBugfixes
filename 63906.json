{"path":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#addSpellChecker(SolrCore,boolean,NamedList).mjava","commits":[{"id":"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90","date":1443533495,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#addSpellChecker(SolrCore,boolean,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private boolean addSpellChecker(SolrCore core, boolean hasDefault, NamedList spellchecker) {\n    String className = (String) spellchecker.get(\"classname\");\n    if (className == null) className = (String) spellchecker.get(\"class\");\n    // TODO: this is a little bit sneaky: warn if class isnt supplied\n    // so that it's mandatory in a future release?\n    if (className == null)\n      className = IndexBasedSpellChecker.class.getName();\n    SolrResourceLoader loader = core.getResourceLoader();\n    SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n    if (checker != null) {\n      String dictionary = checker.init(spellchecker, core);\n      if (dictionary != null) {\n        boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n        if (isDefault && !hasDefault) {\n          hasDefault = true;\n        } else if (isDefault && hasDefault) {\n          throw new RuntimeException(\"More than one dictionary is missing name.\");\n        }\n        spellCheckers.put(dictionary, checker);\n      } else {\n        if (!hasDefault) {\n          spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n          hasDefault = true;\n        } else {\n          throw new RuntimeException(\"More than one dictionary is missing name.\");\n        }\n      }\n      // Register event listeners for this SpellChecker\n      core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n      boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n      boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n      if (buildOnCommit || buildOnOptimize) {\n        LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n        core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n      }\n    } else {\n      throw new RuntimeException(\"Can't load spell checker: \" + className);\n    }\n    return hasDefault;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#addSpellChecker(SolrCore,boolean,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#addSpellChecker(SolrCore,boolean,NamedList).mjava","sourceNew":"  private boolean addSpellChecker(SolrCore core, boolean hasDefault, NamedList spellchecker) {\n    String className = (String) spellchecker.get(\"classname\");\n    if (className == null) className = (String) spellchecker.get(\"class\");\n    // TODO: this is a little bit sneaky: warn if class isnt supplied\n    // so that it's mandatory in a future release?\n    if (className == null)\n      className = IndexBasedSpellChecker.class.getName();\n    SolrResourceLoader loader = core.getResourceLoader();\n    SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n    if (checker != null) {\n      String dictionary = checker.init(spellchecker, core);\n      if (dictionary != null) {\n        boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n        if (isDefault && !hasDefault) {\n          hasDefault = true;\n        } else if (isDefault && hasDefault) {\n          throw new RuntimeException(\"More than one dictionary is missing name.\");\n        }\n        spellCheckers.put(dictionary, checker);\n      } else {\n        if (!hasDefault) {\n          spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n          hasDefault = true;\n        } else {\n          throw new RuntimeException(\"More than one dictionary is missing name.\");\n        }\n      }\n      // Register event listeners for this SpellChecker\n      core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n      boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n      boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n      if (buildOnCommit || buildOnOptimize) {\n        log.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n        core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n      }\n    } else {\n      throw new RuntimeException(\"Can't load spell checker: \" + className);\n    }\n    return hasDefault;\n  }\n\n","sourceOld":"  private boolean addSpellChecker(SolrCore core, boolean hasDefault, NamedList spellchecker) {\n    String className = (String) spellchecker.get(\"classname\");\n    if (className == null) className = (String) spellchecker.get(\"class\");\n    // TODO: this is a little bit sneaky: warn if class isnt supplied\n    // so that it's mandatory in a future release?\n    if (className == null)\n      className = IndexBasedSpellChecker.class.getName();\n    SolrResourceLoader loader = core.getResourceLoader();\n    SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n    if (checker != null) {\n      String dictionary = checker.init(spellchecker, core);\n      if (dictionary != null) {\n        boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n        if (isDefault && !hasDefault) {\n          hasDefault = true;\n        } else if (isDefault && hasDefault) {\n          throw new RuntimeException(\"More than one dictionary is missing name.\");\n        }\n        spellCheckers.put(dictionary, checker);\n      } else {\n        if (!hasDefault) {\n          spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n          hasDefault = true;\n        } else {\n          throw new RuntimeException(\"More than one dictionary is missing name.\");\n        }\n      }\n      // Register event listeners for this SpellChecker\n      core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n      boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n      boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n      if (buildOnCommit || buildOnOptimize) {\n        LOG.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n        core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n      }\n    } else {\n      throw new RuntimeException(\"Can't load spell checker: \" + className);\n    }\n    return hasDefault;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#addSpellChecker(SolrCore,boolean,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#addSpellChecker(SolrCore,boolean,NamedList).mjava","sourceNew":"  private boolean addSpellChecker(SolrCore core, boolean hasDefault, NamedList spellchecker) {\n    String className = (String) spellchecker.get(\"classname\");\n    if (className == null) className = (String) spellchecker.get(\"class\");\n    // TODO: this is a little bit sneaky: warn if class isnt supplied\n    // so that it's mandatory in a future release?\n    if (className == null)\n      className = IndexBasedSpellChecker.class.getName();\n    SolrResourceLoader loader = core.getResourceLoader();\n    SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n    if (checker != null) {\n      String dictionary = checker.init(spellchecker, core);\n      if (dictionary != null) {\n        boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n        if (isDefault && !hasDefault) {\n          hasDefault = true;\n        } else if (isDefault && hasDefault) {\n          throw new RuntimeException(\"More than one dictionary is missing name.\");\n        }\n        spellCheckers.put(dictionary, checker);\n      } else {\n        if (!hasDefault) {\n          spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n          hasDefault = true;\n        } else {\n          throw new RuntimeException(\"More than one dictionary is missing name.\");\n        }\n      }\n      // Register event listeners for this SpellChecker\n      core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n      boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n      boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n      if (buildOnCommit || buildOnOptimize) {\n        if (log.isInfoEnabled()) {\n          log.info(\"Registering newSearcher listener for spellchecker: {}\", checker.getDictionaryName());\n        }\n        core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n      }\n    } else {\n      throw new RuntimeException(\"Can't load spell checker: \" + className);\n    }\n    return hasDefault;\n  }\n\n","sourceOld":"  private boolean addSpellChecker(SolrCore core, boolean hasDefault, NamedList spellchecker) {\n    String className = (String) spellchecker.get(\"classname\");\n    if (className == null) className = (String) spellchecker.get(\"class\");\n    // TODO: this is a little bit sneaky: warn if class isnt supplied\n    // so that it's mandatory in a future release?\n    if (className == null)\n      className = IndexBasedSpellChecker.class.getName();\n    SolrResourceLoader loader = core.getResourceLoader();\n    SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n    if (checker != null) {\n      String dictionary = checker.init(spellchecker, core);\n      if (dictionary != null) {\n        boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n        if (isDefault && !hasDefault) {\n          hasDefault = true;\n        } else if (isDefault && hasDefault) {\n          throw new RuntimeException(\"More than one dictionary is missing name.\");\n        }\n        spellCheckers.put(dictionary, checker);\n      } else {\n        if (!hasDefault) {\n          spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n          hasDefault = true;\n        } else {\n          throw new RuntimeException(\"More than one dictionary is missing name.\");\n        }\n      }\n      // Register event listeners for this SpellChecker\n      core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n      boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n      boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n      if (buildOnCommit || buildOnOptimize) {\n        log.info(\"Registering newSearcher listener for spellchecker: \" + checker.getDictionaryName());\n        core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n      }\n    } else {\n      throw new RuntimeException(\"Can't load spell checker: \" + className);\n    }\n    return hasDefault;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#addSpellChecker(SolrCore,boolean,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#addSpellChecker(SolrCore,boolean,NamedList).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})private boolean addSpellChecker(SolrCore core, boolean hasDefault, @SuppressWarnings({\"rawtypes\"})NamedList spellchecker) {\n    String className = (String) spellchecker.get(\"classname\");\n    if (className == null) className = (String) spellchecker.get(\"class\");\n    // TODO: this is a little bit sneaky: warn if class isnt supplied\n    // so that it's mandatory in a future release?\n    if (className == null)\n      className = IndexBasedSpellChecker.class.getName();\n    SolrResourceLoader loader = core.getResourceLoader();\n    SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n    if (checker != null) {\n      String dictionary = checker.init(spellchecker, core);\n      if (dictionary != null) {\n        boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n        if (isDefault && !hasDefault) {\n          hasDefault = true;\n        } else if (isDefault && hasDefault) {\n          throw new RuntimeException(\"More than one dictionary is missing name.\");\n        }\n        spellCheckers.put(dictionary, checker);\n      } else {\n        if (!hasDefault) {\n          spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n          hasDefault = true;\n        } else {\n          throw new RuntimeException(\"More than one dictionary is missing name.\");\n        }\n      }\n      // Register event listeners for this SpellChecker\n      core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n      boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n      boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n      if (buildOnCommit || buildOnOptimize) {\n        if (log.isInfoEnabled()) {\n          log.info(\"Registering newSearcher listener for spellchecker: {}\", checker.getDictionaryName());\n        }\n        core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n      }\n    } else {\n      throw new RuntimeException(\"Can't load spell checker: \" + className);\n    }\n    return hasDefault;\n  }\n\n","sourceOld":"  private boolean addSpellChecker(SolrCore core, boolean hasDefault, NamedList spellchecker) {\n    String className = (String) spellchecker.get(\"classname\");\n    if (className == null) className = (String) spellchecker.get(\"class\");\n    // TODO: this is a little bit sneaky: warn if class isnt supplied\n    // so that it's mandatory in a future release?\n    if (className == null)\n      className = IndexBasedSpellChecker.class.getName();\n    SolrResourceLoader loader = core.getResourceLoader();\n    SolrSpellChecker checker = loader.newInstance(className, SolrSpellChecker.class);\n    if (checker != null) {\n      String dictionary = checker.init(spellchecker, core);\n      if (dictionary != null) {\n        boolean isDefault = dictionary.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME);\n        if (isDefault && !hasDefault) {\n          hasDefault = true;\n        } else if (isDefault && hasDefault) {\n          throw new RuntimeException(\"More than one dictionary is missing name.\");\n        }\n        spellCheckers.put(dictionary, checker);\n      } else {\n        if (!hasDefault) {\n          spellCheckers.put(SolrSpellChecker.DEFAULT_DICTIONARY_NAME, checker);\n          hasDefault = true;\n        } else {\n          throw new RuntimeException(\"More than one dictionary is missing name.\");\n        }\n      }\n      // Register event listeners for this SpellChecker\n      core.registerFirstSearcherListener(new SpellCheckerListener(core, checker, false, false));\n      boolean buildOnCommit = Boolean.parseBoolean((String) spellchecker.get(\"buildOnCommit\"));\n      boolean buildOnOptimize = Boolean.parseBoolean((String) spellchecker.get(\"buildOnOptimize\"));\n      if (buildOnCommit || buildOnOptimize) {\n        if (log.isInfoEnabled()) {\n          log.info(\"Registering newSearcher listener for spellchecker: {}\", checker.getDictionaryName());\n        }\n        core.registerNewSearcherListener(new SpellCheckerListener(core, checker, buildOnCommit, buildOnOptimize));\n      }\n    } else {\n      throw new RuntimeException(\"Can't load spell checker: \" + className);\n    }\n    return hasDefault;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["575e66bd4b2349209027f6801184da7fc3cba13f"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"],"575e66bd4b2349209027f6801184da7fc3cba13f":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}