{"path":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeLengthNorm(String,int).mjava","commits":[{"id":"3e00f80591de714c6975f454e33e0fa5218b5902","date":1294514405,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeLengthNorm(String,int).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(String,int).mjava","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float computeLengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ln_mins.get(fieldName).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ln_maxs.get(fieldName).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ln_steeps.get(fieldName).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","sourceOld":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  @Override\n  public float lengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ln_mins.get(fieldName).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ln_maxs.get(fieldName).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ln_steeps.get(fieldName).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeLengthNorm(String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float computeLengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ln_mins.get(fieldName).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ln_maxs.get(fieldName).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ln_steeps.get(fieldName).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeLengthNorm(String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float computeLengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ln_mins.get(fieldName).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ln_maxs.get(fieldName).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ln_steeps.get(fieldName).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ce8d53d5582eaa6a0c771c9b119d480f41da59c","date":1297466174,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeLengthNorm(int).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeLengthNorm(String,int).mjava","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float computeLengthNorm(int numTerms) {\n    final int l = ln_min;\n    final int h = ln_max;\n    final float s = ln_steep;\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","sourceOld":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float computeLengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ln_mins.get(fieldName).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ln_maxs.get(fieldName).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ln_steeps.get(fieldName).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeLengthNorm(int).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeLengthNorm(String,int).mjava","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float computeLengthNorm(int numTerms) {\n    final int l = ln_min;\n    final int h = ln_max;\n    final float s = ln_steep;\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","sourceOld":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float computeLengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ln_mins.get(fieldName).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ln_maxs.get(fieldName).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ln_steeps.get(fieldName).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeLengthNorm(int).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeLengthNorm(String,int).mjava","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float computeLengthNorm(int numTerms) {\n    final int l = ln_min;\n    final int h = ln_max;\n    final float s = ln_steep;\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","sourceOld":"  /**\n   * Implemented as:\n   * <code>\n   * 1/sqrt( steepness * (abs(x-min) + abs(x-max) - (max-min)) + 1 )\n   * </code>.\n   *\n   * <p>\n   * This degrades to <code>1/sqrt(x)</code> when min and max are both 1 and\n   * steepness is 0.5\n   * </p>\n   *\n   * <p>\n   * :TODO: potential optimization is to just flat out return 1.0f if numTerms\n   * is between min and max.\n   * </p>\n   *\n   * @see #setLengthNormFactors\n   */\n  public float computeLengthNorm(String fieldName, int numTerms) {\n    int l = ln_min;\n    int h = ln_max;\n    float s = ln_steep;\n  \n    if (ln_mins.containsKey(fieldName)) {\n      l = ln_mins.get(fieldName).intValue();\n    }\n    if (ln_maxs.containsKey(fieldName)) {\n      h = ln_maxs.get(fieldName).intValue();\n    }\n    if (ln_steeps.containsKey(fieldName)) {\n      s = ln_steeps.get(fieldName).floatValue();\n    }\n  \n    return (float)\n      (1.0f /\n       Math.sqrt\n       (\n        (\n         s *\n         (float)(Math.abs(numTerms - l) + Math.abs(numTerms - h) - (h-l))\n         )\n        + 1.0f\n        )\n       );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"3e00f80591de714c6975f454e33e0fa5218b5902":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e00f80591de714c6975f454e33e0fa5218b5902"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["3e00f80591de714c6975f454e33e0fa5218b5902"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e00f80591de714c6975f454e33e0fa5218b5902"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"3e00f80591de714c6975f454e33e0fa5218b5902":["29ef99d61cda9641b6250bf9567329a6e65f901d","5ce8d53d5582eaa6a0c771c9b119d480f41da59c","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e00f80591de714c6975f454e33e0fa5218b5902","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"5ce8d53d5582eaa6a0c771c9b119d480f41da59c":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}