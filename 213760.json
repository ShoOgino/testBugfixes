{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#prune(SegmentInfos).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#prune(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","sourceNew":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + updates.size());\n    }\n    final int limit = updates.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (updates.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","sourceOld":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfoPerCommit info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d34336c8863b33047124bd0bbe44ca6b3fd532","date":1400269546,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#prune(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#prune(SegmentInfos).mjava","sourceNew":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      Directory dir;\n      if (segmentInfos.size() > 0) {\n        dir = segmentInfos.info(0).info.dir;\n      } else {\n        dir = null;\n      }\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos.toString(dir) + \" minGen=\" + minGen + \" packetCount=\" + updates.size());\n    }\n    final int limit = updates.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (updates.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","sourceOld":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + updates.size());\n    }\n    final int limit = updates.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (updates.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#prune(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#prune(SegmentInfos).mjava","sourceNew":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      Directory dir;\n      if (segmentInfos.size() > 0) {\n        dir = segmentInfos.info(0).info.dir;\n      } else {\n        dir = null;\n      }\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos.toString(dir) + \" minGen=\" + minGen + \" packetCount=\" + updates.size());\n    }\n    final int limit = updates.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (updates.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","sourceOld":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + updates.size());\n    }\n    final int limit = updates.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (updates.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba839b7548159227edcb740033d0f814b323d8d","date":1424455904,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#prune(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#prune(SegmentInfos).mjava","sourceNew":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      Directory dir;\n      if (segmentInfos.size() > 0) {\n        dir = segmentInfos.info(0).info.dir;\n      } else {\n        dir = null;\n      }\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + updates.size());\n    }\n    final int limit = updates.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (updates.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","sourceOld":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      Directory dir;\n      if (segmentInfos.size() > 0) {\n        dir = segmentInfos.info(0).info.dir;\n      } else {\n        dir = null;\n      }\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos.toString(dir) + \" minGen=\" + minGen + \" packetCount=\" + updates.size());\n    }\n    final int limit = updates.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (updates.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"258f227b48a4dbfc180f6ec70f172469d6a2bef8","date":1428687213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#prune(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#prune(SegmentInfos).mjava","sourceNew":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + updates.size());\n    }\n    final int limit = updates.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (updates.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","sourceOld":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      Directory dir;\n      if (segmentInfos.size() > 0) {\n        dir = segmentInfos.info(0).info.dir;\n      } else {\n        dir = null;\n      }\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + updates.size());\n    }\n    final int limit = updates.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (updates.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#prune(SegmentInfos).mjava","sourceNew":null,"sourceOld":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + updates.size());\n    }\n    final int limit = updates.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (updates.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#prune(SegmentInfos).mjava","sourceNew":null,"sourceOld":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + updates.size());\n    }\n    final int limit = updates.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (updates.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#prune(SegmentInfos).mjava","sourceNew":null,"sourceOld":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + updates.size());\n    }\n    final int limit = updates.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (updates.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"258f227b48a4dbfc180f6ec70f172469d6a2bef8":["fba839b7548159227edcb740033d0f814b323d8d"],"fba839b7548159227edcb740033d0f814b323d8d":["91d34336c8863b33047124bd0bbe44ca6b3fd532"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["258f227b48a4dbfc180f6ec70f172469d6a2bef8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91d34336c8863b33047124bd0bbe44ca6b3fd532":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"56572ec06f1407c066d6b7399413178b33176cd8":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","91d34336c8863b33047124bd0bbe44ca6b3fd532"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["258f227b48a4dbfc180f6ec70f172469d6a2bef8","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["258f227b48a4dbfc180f6ec70f172469d6a2bef8","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["91d34336c8863b33047124bd0bbe44ca6b3fd532","56572ec06f1407c066d6b7399413178b33176cd8"],"258f227b48a4dbfc180f6ec70f172469d6a2bef8":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"fba839b7548159227edcb740033d0f814b323d8d":["258f227b48a4dbfc180f6ec70f172469d6a2bef8"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"91d34336c8863b33047124bd0bbe44ca6b3fd532":["fba839b7548159227edcb740033d0f814b323d8d","56572ec06f1407c066d6b7399413178b33176cd8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}