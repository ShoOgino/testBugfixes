{"path":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanNearPayloadCheckQuery#SpanNearPayloadCheckQuery(SpanNearQuery,Collection[byte[]]).mjava","commits":[{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanNearPayloadCheckQuery#SpanNearPayloadCheckQuery(SpanNearQuery,Collection[byte[]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearPayloadCheckQuery#SpanNearPayloadCheckQuery(SpanNearQuery,Collection[byte[]]).mjava","sourceNew":"  /**\n   * @param match          The underlying {@link org.apache.lucene.search.spans.SpanQuery} to check\n   * @param payloadToMatch The {@link java.util.Collection} of payloads to match\n   */\n  public SpanNearPayloadCheckQuery(SpanNearQuery match, Collection<byte[]> payloadToMatch) {\n    super(match);\n    this.payloadToMatch = Objects.requireNonNull(payloadToMatch);\n  }\n\n","sourceOld":"  /**\n   * @param match          The underlying {@link SpanQuery} to check\n   * @param payloadToMatch The {@link java.util.Collection} of payloads to match\n   */\n  public SpanNearPayloadCheckQuery(SpanNearQuery match, Collection<byte[]> payloadToMatch) {\n    super(match);\n    this.payloadToMatch = Objects.requireNonNull(payloadToMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanNearPayloadCheckQuery#SpanNearPayloadCheckQuery(SpanNearQuery,Collection[byte[]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanNearPayloadCheckQuery#SpanNearPayloadCheckQuery(SpanNearQuery,Collection[byte[]]).mjava","sourceNew":"  /**\n   * @param match          The underlying {@link org.apache.lucene.search.spans.SpanQuery} to check\n   * @param payloadToMatch The {@link java.util.Collection} of payloads to match\n   */\n  public SpanNearPayloadCheckQuery(SpanNearQuery match, Collection<byte[]> payloadToMatch) {\n    super(match, payloadToMatch);\n  }\n\n","sourceOld":"  /**\n   * @param match          The underlying {@link org.apache.lucene.search.spans.SpanQuery} to check\n   * @param payloadToMatch The {@link java.util.Collection} of payloads to match\n   */\n  public SpanNearPayloadCheckQuery(SpanNearQuery match, Collection<byte[]> payloadToMatch) {\n    super(match);\n    this.payloadToMatch = Objects.requireNonNull(payloadToMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1f341bf51e7020873fbdb7c3717c4ce09fc889d","date":1434385102,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanNearPayloadCheckQuery#SpanNearPayloadCheckQuery(SpanNearQuery,Collection[byte[]]).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param match          The underlying {@link org.apache.lucene.search.spans.SpanQuery} to check\n   * @param payloadToMatch The {@link java.util.Collection} of payloads to match\n   */\n  public SpanNearPayloadCheckQuery(SpanNearQuery match, Collection<byte[]> payloadToMatch) {\n    super(match, payloadToMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1f341bf51e7020873fbdb7c3717c4ce09fc889d":["29aea3139c4326c0501d75d51059855463220279"],"29aea3139c4326c0501d75d51059855463220279":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c1f341bf51e7020873fbdb7c3717c4ce09fc889d"]},"commit2Childs":{"c1f341bf51e7020873fbdb7c3717c4ce09fc889d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29aea3139c4326c0501d75d51059855463220279":["c1f341bf51e7020873fbdb7c3717c4ce09fc889d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["29aea3139c4326c0501d75d51059855463220279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}