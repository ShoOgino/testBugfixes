{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testReopenAfterNoRealChange().mjava","commits":[{"id":"43369d257d14f61a881aa609962ef95e8a334d3a","date":1318786064,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testReopenAfterNoRealChange().mjava","pathOld":"/dev/null","sourceNew":"  public void testReopenAfterNoRealChange() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.setInfoStream(VERBOSE ? System.out : null);\n\n    IndexReader r = w.getReader(); // start pooling readers\n\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNull(r2);\n    \n    w.addDocument(new Document());\n    IndexReader r3 = IndexReader.openIfChanged(r);\n    assertNotNull(r3);\n    assertTrue(r3.getVersion() != r.getVersion());\n    assertTrue(r3.isCurrent());\n\n    // Deletes nothing in reality...:\n    w.deleteDocuments(new Term(\"foo\", \"bar\"));\n\n    // ... but IW marks this as not current:\n    assertFalse(r3.isCurrent());\n    IndexReader r4 = IndexReader.openIfChanged(r3);\n    assertNull(r4);\n\n    // Deletes nothing in reality...:\n    w.deleteDocuments(new Term(\"foo\", \"bar\"));\n    IndexReader r5 = IndexReader.openIfChanged(r3, w, true);\n    assertNull(r5);\n\n    r3.close();\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["527cc14542789f47d75da436cb4287d1ab887e34"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testReopenAfterNoRealChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testReopenAfterNoRealChange().mjava","sourceNew":"  public void testReopenAfterNoRealChange() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    IndexReader r = w.getReader(); // start pooling readers\n\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNull(r2);\n    \n    w.addDocument(new Document());\n    IndexReader r3 = IndexReader.openIfChanged(r);\n    assertNotNull(r3);\n    assertTrue(r3.getVersion() != r.getVersion());\n    assertTrue(r3.isCurrent());\n\n    // Deletes nothing in reality...:\n    w.deleteDocuments(new Term(\"foo\", \"bar\"));\n\n    // ... but IW marks this as not current:\n    assertFalse(r3.isCurrent());\n    IndexReader r4 = IndexReader.openIfChanged(r3);\n    assertNull(r4);\n\n    // Deletes nothing in reality...:\n    w.deleteDocuments(new Term(\"foo\", \"bar\"));\n    IndexReader r5 = IndexReader.openIfChanged(r3, w, true);\n    assertNull(r5);\n\n    r3.close();\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testReopenAfterNoRealChange() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.setInfoStream(VERBOSE ? System.out : null);\n\n    IndexReader r = w.getReader(); // start pooling readers\n\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNull(r2);\n    \n    w.addDocument(new Document());\n    IndexReader r3 = IndexReader.openIfChanged(r);\n    assertNotNull(r3);\n    assertTrue(r3.getVersion() != r.getVersion());\n    assertTrue(r3.isCurrent());\n\n    // Deletes nothing in reality...:\n    w.deleteDocuments(new Term(\"foo\", \"bar\"));\n\n    // ... but IW marks this as not current:\n    assertFalse(r3.isCurrent());\n    IndexReader r4 = IndexReader.openIfChanged(r3);\n    assertNull(r4);\n\n    // Deletes nothing in reality...:\n    w.deleteDocuments(new Term(\"foo\", \"bar\"));\n    IndexReader r5 = IndexReader.openIfChanged(r3, w, true);\n    assertNull(r5);\n\n    r3.close();\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8","date":1327857288,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testReopenAfterNoRealChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testReopenAfterNoRealChange().mjava","sourceNew":"  public void testReopenAfterNoRealChange() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    DirectoryReader r = w.getReader(); // start pooling readers\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNull(r2);\n    \n    w.addDocument(new Document());\n    DirectoryReader r3 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r3);\n    assertTrue(r3.getVersion() != r.getVersion());\n    assertTrue(r3.isCurrent());\n\n    // Deletes nothing in reality...:\n    w.deleteDocuments(new Term(\"foo\", \"bar\"));\n\n    // ... but IW marks this as not current:\n    assertFalse(r3.isCurrent());\n    DirectoryReader r4 = DirectoryReader.openIfChanged(r3);\n    assertNull(r4);\n\n    // Deletes nothing in reality...:\n    w.deleteDocuments(new Term(\"foo\", \"bar\"));\n    DirectoryReader r5 = DirectoryReader.openIfChanged(r3, w, true);\n    assertNull(r5);\n\n    r3.close();\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testReopenAfterNoRealChange() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    IndexReader r = w.getReader(); // start pooling readers\n\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNull(r2);\n    \n    w.addDocument(new Document());\n    IndexReader r3 = IndexReader.openIfChanged(r);\n    assertNotNull(r3);\n    assertTrue(r3.getVersion() != r.getVersion());\n    assertTrue(r3.isCurrent());\n\n    // Deletes nothing in reality...:\n    w.deleteDocuments(new Term(\"foo\", \"bar\"));\n\n    // ... but IW marks this as not current:\n    assertFalse(r3.isCurrent());\n    IndexReader r4 = IndexReader.openIfChanged(r3);\n    assertNull(r4);\n\n    // Deletes nothing in reality...:\n    w.deleteDocuments(new Term(\"foo\", \"bar\"));\n    IndexReader r5 = IndexReader.openIfChanged(r3, w, true);\n    assertNull(r5);\n\n    r3.close();\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testReopenAfterNoRealChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testReopenAfterNoRealChange().mjava","sourceNew":"  public void testReopenAfterNoRealChange() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    DirectoryReader r = w.getReader(); // start pooling readers\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNull(r2);\n    \n    w.addDocument(new Document());\n    DirectoryReader r3 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r3);\n    assertTrue(r3.getVersion() != r.getVersion());\n    assertTrue(r3.isCurrent());\n\n    // Deletes nothing in reality...:\n    w.deleteDocuments(new Term(\"foo\", \"bar\"));\n\n    // ... but IW marks this as not current:\n    assertFalse(r3.isCurrent());\n    DirectoryReader r4 = DirectoryReader.openIfChanged(r3);\n    assertNull(r4);\n\n    // Deletes nothing in reality...:\n    w.deleteDocuments(new Term(\"foo\", \"bar\"));\n    DirectoryReader r5 = DirectoryReader.openIfChanged(r3, w, true);\n    assertNull(r5);\n\n    r3.close();\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testReopenAfterNoRealChange() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    IndexReader r = w.getReader(); // start pooling readers\n\n    IndexReader r2 = IndexReader.openIfChanged(r);\n    assertNull(r2);\n    \n    w.addDocument(new Document());\n    IndexReader r3 = IndexReader.openIfChanged(r);\n    assertNotNull(r3);\n    assertTrue(r3.getVersion() != r.getVersion());\n    assertTrue(r3.isCurrent());\n\n    // Deletes nothing in reality...:\n    w.deleteDocuments(new Term(\"foo\", \"bar\"));\n\n    // ... but IW marks this as not current:\n    assertFalse(r3.isCurrent());\n    IndexReader r4 = IndexReader.openIfChanged(r3);\n    assertNull(r4);\n\n    // Deletes nothing in reality...:\n    w.deleteDocuments(new Term(\"foo\", \"bar\"));\n    IndexReader r5 = IndexReader.openIfChanged(r3, w, true);\n    assertNull(r5);\n\n    r3.close();\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testReopenAfterNoRealChange().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testReopenAfterNoRealChange().mjava","sourceNew":"  public void testReopenAfterNoRealChange() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    DirectoryReader r = w.getReader(); // start pooling readers\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNull(r2);\n    \n    w.addDocument(new Document());\n    DirectoryReader r3 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r3);\n    assertTrue(r3.getVersion() != r.getVersion());\n    assertTrue(r3.isCurrent());\n\n    // Deletes nothing in reality...:\n    w.deleteDocuments(new Term(\"foo\", \"bar\"));\n\n    // ... but IW marks this as not current:\n    assertFalse(r3.isCurrent());\n    DirectoryReader r4 = DirectoryReader.openIfChanged(r3);\n    assertNull(r4);\n\n    // Deletes nothing in reality...:\n    w.deleteDocuments(new Term(\"foo\", \"bar\"));\n    DirectoryReader r5 = DirectoryReader.openIfChanged(r3, w, true);\n    assertNull(r5);\n\n    r3.close();\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testReopenAfterNoRealChange() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    DirectoryReader r = w.getReader(); // start pooling readers\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNull(r2);\n    \n    w.addDocument(new Document());\n    DirectoryReader r3 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r3);\n    assertTrue(r3.getVersion() != r.getVersion());\n    assertTrue(r3.isCurrent());\n\n    // Deletes nothing in reality...:\n    w.deleteDocuments(new Term(\"foo\", \"bar\"));\n\n    // ... but IW marks this as not current:\n    assertFalse(r3.isCurrent());\n    DirectoryReader r4 = DirectoryReader.openIfChanged(r3);\n    assertNull(r4);\n\n    // Deletes nothing in reality...:\n    w.deleteDocuments(new Term(\"foo\", \"bar\"));\n    DirectoryReader r5 = DirectoryReader.openIfChanged(r3, w, true);\n    assertNull(r5);\n\n    r3.close();\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"06584e6e98d592b34e1329b384182f368d2025e8":["43369d257d14f61a881aa609962ef95e8a334d3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8":["06584e6e98d592b34e1329b384182f368d2025e8"],"43369d257d14f61a881aa609962ef95e8a334d3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["06584e6e98d592b34e1329b384182f368d2025e8","55c2bb1bcc0edd142e63b9230976dfc3e500dbe8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["55c2bb1bcc0edd142e63b9230976dfc3e500dbe8","5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43369d257d14f61a881aa609962ef95e8a334d3a"],"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"43369d257d14f61a881aa609962ef95e8a334d3a":["06584e6e98d592b34e1329b384182f368d2025e8"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}