{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testEmptyIndex().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testEmptyIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#testEmptyIndex().mjava","sourceNew":"  public void testEmptyIndex() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer= new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(500));\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    AtomicReader reader = SlowCompositeReaderWrapper.wrap(r);\n    FieldCache.DEFAULT.getTerms(reader, \"foobar\");\n    FieldCache.DEFAULT.getTermsIndex(reader, \"foobar\");\n    FieldCache.DEFAULT.purge(reader);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyIndex() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer= new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(500));\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    AtomicReader reader = SlowCompositeReaderWrapper.wrap(r);\n    FieldCache.DEFAULT.getTerms(reader, \"foobar\");\n    FieldCache.DEFAULT.getTermsIndex(reader, \"foobar\");\n    FieldCache.DEFAULT.purge(reader);\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testEmptyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testEmptyIndex().mjava","sourceNew":"  public void testEmptyIndex() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer= new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(500));\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    AtomicReader reader = SlowCompositeReaderWrapper.wrap(r);\n    FieldCache.DEFAULT.getTerms(reader, \"foobar\");\n    FieldCache.DEFAULT.getTermsIndex(reader, \"foobar\");\n    FieldCache.DEFAULT.purge(reader);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyIndex() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer= new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(500));\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    AtomicReader reader = SlowCompositeReaderWrapper.wrap(r);\n    FieldCache.DEFAULT.getTerms(reader, \"foobar\");\n    FieldCache.DEFAULT.getTermsIndex(reader, \"foobar\");\n    FieldCache.DEFAULT.purge(reader);\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87d6f9603307ae2ad642fb01deedf031320fd0c3","date":1377877563,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testEmptyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testEmptyIndex().mjava","sourceNew":"  public void testEmptyIndex() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer= new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(500));\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    AtomicReader reader = SlowCompositeReaderWrapper.wrap(r);\n    FieldCache.DEFAULT.getTerms(reader, \"foobar\", true);\n    FieldCache.DEFAULT.getTermsIndex(reader, \"foobar\");\n    FieldCache.DEFAULT.purge(reader);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyIndex() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer= new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(500));\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    AtomicReader reader = SlowCompositeReaderWrapper.wrap(r);\n    FieldCache.DEFAULT.getTerms(reader, \"foobar\");\n    FieldCache.DEFAULT.getTermsIndex(reader, \"foobar\");\n    FieldCache.DEFAULT.purge(reader);\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["2dd6ecb8250c497ed227653279d6a4f470bfbb31"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2dcffe8fc78b093a5f4207f492bbae185740f6a","date":1380887572,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testEmptyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testEmptyIndex().mjava","sourceNew":"  public void testEmptyIndex() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer= new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(500));\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    AtomicReader reader = SlowCompositeReaderWrapper.wrap(r);\n    FieldCache.DEFAULT.getTerms(reader, \"foobar\", true);\n    FieldCache.DEFAULT.getTermsIndex(reader, \"foobar\");\n    FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyIndex() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer= new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(500));\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    AtomicReader reader = SlowCompositeReaderWrapper.wrap(r);\n    FieldCache.DEFAULT.getTerms(reader, \"foobar\", true);\n    FieldCache.DEFAULT.getTermsIndex(reader, \"foobar\");\n    FieldCache.DEFAULT.purge(reader);\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testEmptyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testEmptyIndex().mjava","sourceNew":"  public void testEmptyIndex() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer= new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(500));\n    writer.shutdown();\n    IndexReader r = DirectoryReader.open(dir);\n    AtomicReader reader = SlowCompositeReaderWrapper.wrap(r);\n    FieldCache.DEFAULT.getTerms(reader, \"foobar\", true);\n    FieldCache.DEFAULT.getTermsIndex(reader, \"foobar\");\n    FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyIndex() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer= new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(500));\n    writer.close();\n    IndexReader r = DirectoryReader.open(dir);\n    AtomicReader reader = SlowCompositeReaderWrapper.wrap(r);\n    FieldCache.DEFAULT.getTerms(reader, \"foobar\", true);\n    FieldCache.DEFAULT.getTermsIndex(reader, \"foobar\");\n    FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testEmptyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testEmptyIndex().mjava","sourceNew":"  public void testEmptyIndex() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer= new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(500));\n    writer.shutdown();\n    IndexReader r = DirectoryReader.open(dir);\n    AtomicReader reader = SlowCompositeReaderWrapper.wrap(r);\n    FieldCache.DEFAULT.getTerms(reader, \"foobar\", true);\n    FieldCache.DEFAULT.getTermsIndex(reader, \"foobar\");\n    FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyIndex() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer= new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(500));\n    writer.shutdown();\n    IndexReader r = DirectoryReader.open(dir);\n    AtomicReader reader = SlowCompositeReaderWrapper.wrap(r);\n    FieldCache.DEFAULT.getTerms(reader, \"foobar\", true);\n    FieldCache.DEFAULT.getTermsIndex(reader, \"foobar\");\n    FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testEmptyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testEmptyIndex().mjava","sourceNew":"  public void testEmptyIndex() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer= new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(500));\n    writer.shutdown();\n    IndexReader r = DirectoryReader.open(dir);\n    AtomicReader reader = SlowCompositeReaderWrapper.wrap(r);\n    FieldCache.DEFAULT.getTerms(reader, \"foobar\", true);\n    FieldCache.DEFAULT.getTermsIndex(reader, \"foobar\");\n    FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyIndex() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer= new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(500));\n    writer.shutdown();\n    IndexReader r = DirectoryReader.open(dir);\n    AtomicReader reader = SlowCompositeReaderWrapper.wrap(r);\n    FieldCache.DEFAULT.getTerms(reader, \"foobar\", true);\n    FieldCache.DEFAULT.getTermsIndex(reader, \"foobar\");\n    FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testEmptyIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testEmptyIndex().mjava","sourceNew":"  public void testEmptyIndex() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer= new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(500));\n    writer.shutdown();\n    IndexReader r = DirectoryReader.open(dir);\n    AtomicReader reader = SlowCompositeReaderWrapper.wrap(r);\n    FieldCache.DEFAULT.getTerms(reader, \"foobar\", true);\n    FieldCache.DEFAULT.getTermsIndex(reader, \"foobar\");\n    FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyIndex() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer= new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(500));\n    writer.shutdown();\n    IndexReader r = DirectoryReader.open(dir);\n    AtomicReader reader = SlowCompositeReaderWrapper.wrap(r);\n    FieldCache.DEFAULT.getTerms(reader, \"foobar\", true);\n    FieldCache.DEFAULT.getTermsIndex(reader, \"foobar\");\n    FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2dcffe8fc78b093a5f4207f492bbae185740f6a":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d2dcffe8fc78b093a5f4207f492bbae185740f6a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d2dcffe8fc78b093a5f4207f492bbae185740f6a":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["d2dcffe8fc78b093a5f4207f492bbae185740f6a"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}