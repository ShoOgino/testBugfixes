{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","commits":[{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      solrj.getZkStateReader().updateCloudState(true);\n      CloudState cloudState = solrj.getZkStateReader().getCloudState();\n      Map<String,Map<String,Slice>> collections = cloudState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8512200aed2724abd80dbeb686d3412d537b7d8a","date":1342139754,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","sourceNew":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      solrj.getZkStateReader().updateCloudState(true);\n      CloudState cloudState = solrj.getZkStateReader().getCloudState();\n      Map<String,Map<String,Slice>> collections = cloudState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      solrj.getZkStateReader().updateCloudState(true);\n      CloudState cloudState = solrj.getZkStateReader().getCloudState();\n      Map<String,Map<String,Slice>> collections = cloudState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      solrj.getZkStateReader().updateCloudState(true);\n      CloudState cloudState = solrj.getZkStateReader().getCloudState();\n      Map<String,Map<String,Slice>> collections = cloudState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","sourceNew":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      solrj.getZkStateReader().updateCloudState(true);\n      CloudState cloudState = solrj.getZkStateReader().getCloudState();\n      Map<String,Map<String,Slice>> collections = cloudState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      solrj.getZkStateReader().updateCloudState(true);\n      CloudState cloudState = solrj.getZkStateReader().getCloudState();\n      Map<String,Map<String,Slice>> collections = cloudState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(50);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","sourceNew":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      solrj.getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = solrj.getZkStateReader().getClusterState();\n      Map<String,Map<String,Slice>> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      solrj.getZkStateReader().updateCloudState(true);\n      CloudState cloudState = solrj.getZkStateReader().getCloudState();\n      Map<String,Map<String,Slice>> collections = cloudState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","sourceNew":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      solrj.getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = solrj.getZkStateReader().getClusterState();\n      Map<String,Map<String,Slice>> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      solrj.getZkStateReader().updateCloudState(true);\n      CloudState cloudState = solrj.getZkStateReader().getCloudState();\n      Map<String,Map<String,Slice>> collections = cloudState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","sourceNew":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      solrj.getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = solrj.getZkStateReader().getClusterState();\n      Map<String,Map<String,Slice>> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      solrj.getZkStateReader().updateCloudState(true);\n      CloudState cloudState = solrj.getZkStateReader().getCloudState();\n      Map<String,Map<String,Slice>> collections = cloudState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","sourceNew":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      solrj.getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = solrj.getZkStateReader().getClusterState();\n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      solrj.getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = solrj.getZkStateReader().getClusterState();\n      Map<String,Map<String,Slice>> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c215736a9e29403edd2132d9f0829a287b428df4","date":1354641965,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","sourceNew":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      solrj.getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = solrj.getZkStateReader().getClusterState();\n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","sourceNew":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      solrj.getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = solrj.getZkStateReader().getClusterState();\n      Map<String,Map<String,Slice>> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbc02da5f5ef6ee1ef22d8f5b58cba45ae3440b3","date":1355444542,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","sourceNew":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","sourceNew":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 15000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81a4a1810b619aea1d002a09c1878b498e20bf33","date":1361142322,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","sourceNew":null,"sourceOld":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c8567c25c02eeeb3e719841606a1269f3538ca","date":1361155063,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#checkForMissingCollection(String).mjava","sourceNew":null,"sourceOld":"  private void checkForMissingCollection(String collectionName)\n      throws Exception {\n    // check for a  collection - we poll the state\n    long timeoutAt = System.currentTimeMillis() + 30000;\n    boolean found = true;\n    while (System.currentTimeMillis() < timeoutAt) {\n      getCommonCloudSolrServer().getZkStateReader().updateClusterState(true);\n      ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader().getClusterState();\n      Map<String,DocCollection> collections = clusterState\n          .getCollectionStates();\n      if (!collections.containsKey(collectionName)) {\n        found = false;\n        break;\n      }\n      Thread.sleep(100);\n    }\n    if (found) {\n      fail(\"Found collection that should be gone \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","dbc02da5f5ef6ee1ef22d8f5b58cba45ae3440b3"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"81a4a1810b619aea1d002a09c1878b498e20bf33":["dbc02da5f5ef6ee1ef22d8f5b58cba45ae3440b3"],"407687e67faf6e1f02a211ca078d8e3eed631027":["3f767f8c99eaedb984df754fe61f21c5de260f94","c215736a9e29403edd2132d9f0829a287b428df4"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3f767f8c99eaedb984df754fe61f21c5de260f94"],"dbc02da5f5ef6ee1ef22d8f5b58cba45ae3440b3":["c215736a9e29403edd2132d9f0829a287b428df4"],"09c8567c25c02eeeb3e719841606a1269f3538ca":["dbc02da5f5ef6ee1ef22d8f5b58cba45ae3440b3","81a4a1810b619aea1d002a09c1878b498e20bf33"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["8512200aed2724abd80dbeb686d3412d537b7d8a"],"aba371508186796cc6151d8223a5b4e16d02e26e":["33d0ed80b7b47e34ad3ff033a77544563aba3085","8512200aed2724abd80dbeb686d3412d537b7d8a"],"c215736a9e29403edd2132d9f0829a287b428df4":["c5a558d54519c651068ddb202f03befefb1514a7"],"8512200aed2724abd80dbeb686d3412d537b7d8a":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8512200aed2724abd80dbeb686d3412d537b7d8a"],"c5a558d54519c651068ddb202f03befefb1514a7":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81a4a1810b619aea1d002a09c1878b498e20bf33"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["aba371508186796cc6151d8223a5b4e16d02e26e","8512200aed2724abd80dbeb686d3412d537b7d8a"],"81a4a1810b619aea1d002a09c1878b498e20bf33":["09c8567c25c02eeeb3e719841606a1269f3538ca","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"dbc02da5f5ef6ee1ef22d8f5b58cba45ae3440b3":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","81a4a1810b619aea1d002a09c1878b498e20bf33","09c8567c25c02eeeb3e719841606a1269f3538ca"],"09c8567c25c02eeeb3e719841606a1269f3538ca":[],"3f767f8c99eaedb984df754fe61f21c5de260f94":["407687e67faf6e1f02a211ca078d8e3eed631027","8fd5be977c105554c6a7b68afcdbc511439723ab","c5a558d54519c651068ddb202f03befefb1514a7","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c215736a9e29403edd2132d9f0829a287b428df4":["407687e67faf6e1f02a211ca078d8e3eed631027","dbc02da5f5ef6ee1ef22d8f5b58cba45ae3440b3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"8512200aed2724abd80dbeb686d3412d537b7d8a":["3f767f8c99eaedb984df754fe61f21c5de260f94","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33d0ed80b7b47e34ad3ff033a77544563aba3085","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c5a558d54519c651068ddb202f03befefb1514a7":["c215736a9e29403edd2132d9f0829a287b428df4"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8fd5be977c105554c6a7b68afcdbc511439723ab","09c8567c25c02eeeb3e719841606a1269f3538ca","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}