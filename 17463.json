{"path":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#lineCrossesSphere(double,double,double,double,double,double,double,double,double,double).mjava","commits":[{"id":"33bb6bd7295e66f93f182556f5353b97243e62ba","date":1449525768,"type":0,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#lineCrossesSphere(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes whether or a 3dimensional line segment intersects or crosses a sphere\n   *\n   * @param lon1 longitudinal location of the line segment start point (in degrees)\n   * @param lat1 latitudinal location of the line segment start point (in degrees)\n   * @param alt1 altitude of the line segment start point (in degrees)\n   * @param lon2 longitudinal location of the line segment end point (in degrees)\n   * @param lat2 latitudinal location of the line segment end point (in degrees)\n   * @param alt2 altitude of the line segment end point (in degrees)\n   * @param centerLon longitudinal location of center search point (in degrees)\n   * @param centerLat latitudinal location of center search point (in degrees)\n   * @param centerAlt altitude of the center point (in meters)\n   * @param radiusMeters search sphere radius (in meters)\n   * @return whether the provided line segment is a secant of the\n   */\n  private static boolean lineCrossesSphere(double lon1, double lat1, double alt1, double lon2,\n                                           double lat2, double alt2, double centerLon, double centerLat,\n                                           double centerAlt, double radiusMeters) {\n    // convert to cartesian 3d (in meters)\n    double[] ecf1 = GeoProjectionUtils.llaToECF(lon1, lat1, alt1, null);\n    double[] ecf2 = GeoProjectionUtils.llaToECF(lon2, lat2, alt2, null);\n    double[] cntr = GeoProjectionUtils.llaToECF(centerLon, centerLat, centerAlt, null);\n\n    // convert radius from arc radius to cartesian radius\n    double[] oneEighty = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(centerLon, centerLat, 180.0d, radiusMeters, new double[3]);\n    GeoProjectionUtils.llaToECF(oneEighty[0], oneEighty[1], 0, oneEighty);\n\n    radiusMeters = GeoDistanceUtils.linearDistance(oneEighty, cntr);//   Math.sqrt(oneEighty[0]*cntr[0] + oneEighty[1]*cntr[1] + oneEighty[2]*cntr[2]);\n\n    final double dX = ecf2[0] - ecf1[0];\n    final double dY = ecf2[1] - ecf1[1];\n    final double dZ = ecf2[2] - ecf1[2];\n    final double fX = ecf1[0] - cntr[0];\n    final double fY = ecf1[1] - cntr[1];\n    final double fZ = ecf1[2] - cntr[2];\n\n    final double a = dX*dX + dY*dY + dZ*dZ;\n    final double b = 2 * (fX*dX + fY*dY + fZ*dZ);\n    final double c = (fX*fX + fY*fY + fZ*fZ) - (radiusMeters*radiusMeters);\n\n    double discrim = (b*b)-(4*a*c);\n    if (discrim < 0) {\n      return false;\n    }\n\n    discrim = StrictMath.sqrt(discrim);\n    final double a2 = 2*a;\n    final double t1 = (-b - discrim)/a2;\n    final double t2 = (-b + discrim)/a2;\n\n    if ( (t1 < 0 || t1 > 1) ) {\n      return !(t2 < 0 || t2 > 1);\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#lineCrossesSphere(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#lineCrossesSphere(double,double,double,double,double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Computes whether or a 3dimensional line segment intersects or crosses a sphere\n   *\n   * @param lon1 longitudinal location of the line segment start point (in degrees)\n   * @param lat1 latitudinal location of the line segment start point (in degrees)\n   * @param alt1 altitude of the line segment start point (in degrees)\n   * @param lon2 longitudinal location of the line segment end point (in degrees)\n   * @param lat2 latitudinal location of the line segment end point (in degrees)\n   * @param alt2 altitude of the line segment end point (in degrees)\n   * @param centerLon longitudinal location of center search point (in degrees)\n   * @param centerLat latitudinal location of center search point (in degrees)\n   * @param centerAlt altitude of the center point (in meters)\n   * @param radiusMeters search sphere radius (in meters)\n   * @return whether the provided line segment is a secant of the\n   */\n  private static boolean lineCrossesSphere(double lon1, double lat1, double alt1, double lon2,\n                                           double lat2, double alt2, double centerLon, double centerLat,\n                                           double centerAlt, double radiusMeters) {\n    // convert to cartesian 3d (in meters)\n    double[] ecf1 = GeoProjectionUtils.llaToECF(lon1, lat1, alt1, null);\n    double[] ecf2 = GeoProjectionUtils.llaToECF(lon2, lat2, alt2, null);\n    double[] cntr = GeoProjectionUtils.llaToECF(centerLon, centerLat, centerAlt, null);\n\n    // convert radius from arc radius to cartesian radius\n    double[] oneEighty = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(centerLon, centerLat, 180.0d, radiusMeters, new double[3]);\n    GeoProjectionUtils.llaToECF(oneEighty[0], oneEighty[1], 0, oneEighty);\n\n    radiusMeters = GeoDistanceUtils.linearDistance(oneEighty, cntr);//   Math.sqrt(oneEighty[0]*cntr[0] + oneEighty[1]*cntr[1] + oneEighty[2]*cntr[2]);\n\n    final double dX = ecf2[0] - ecf1[0];\n    final double dY = ecf2[1] - ecf1[1];\n    final double dZ = ecf2[2] - ecf1[2];\n    final double fX = ecf1[0] - cntr[0];\n    final double fY = ecf1[1] - cntr[1];\n    final double fZ = ecf1[2] - cntr[2];\n\n    final double a = dX*dX + dY*dY + dZ*dZ;\n    final double b = 2 * (fX*dX + fY*dY + fZ*dZ);\n    final double c = (fX*fX + fY*fY + fZ*fZ) - (radiusMeters*radiusMeters);\n\n    double discrim = (b*b)-(4*a*c);\n    if (discrim < 0) {\n      return false;\n    }\n\n    discrim = StrictMath.sqrt(discrim);\n    final double a2 = 2*a;\n    final double t1 = (-b - discrim)/a2;\n    final double t2 = (-b + discrim)/a2;\n\n    if ( (t1 < 0 || t1 > 1) ) {\n      return !(t2 < 0 || t2 > 1);\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Computes whether or a 3dimensional line segment intersects or crosses a sphere\n   *\n   * @param lon1 longitudinal location of the line segment start point (in degrees)\n   * @param lat1 latitudinal location of the line segment start point (in degrees)\n   * @param alt1 altitude of the line segment start point (in degrees)\n   * @param lon2 longitudinal location of the line segment end point (in degrees)\n   * @param lat2 latitudinal location of the line segment end point (in degrees)\n   * @param alt2 altitude of the line segment end point (in degrees)\n   * @param centerLon longitudinal location of center search point (in degrees)\n   * @param centerLat latitudinal location of center search point (in degrees)\n   * @param centerAlt altitude of the center point (in meters)\n   * @param radiusMeters search sphere radius (in meters)\n   * @return whether the provided line segment is a secant of the\n   */\n  private static boolean lineCrossesSphere(double lon1, double lat1, double alt1, double lon2,\n                                           double lat2, double alt2, double centerLon, double centerLat,\n                                           double centerAlt, double radiusMeters) {\n    // convert to cartesian 3d (in meters)\n    double[] ecf1 = GeoProjectionUtils.llaToECF(lon1, lat1, alt1, null);\n    double[] ecf2 = GeoProjectionUtils.llaToECF(lon2, lat2, alt2, null);\n    double[] cntr = GeoProjectionUtils.llaToECF(centerLon, centerLat, centerAlt, null);\n\n    // convert radius from arc radius to cartesian radius\n    double[] oneEighty = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(centerLon, centerLat, 180.0d, radiusMeters, new double[3]);\n    GeoProjectionUtils.llaToECF(oneEighty[0], oneEighty[1], 0, oneEighty);\n\n    radiusMeters = GeoDistanceUtils.linearDistance(oneEighty, cntr);//   Math.sqrt(oneEighty[0]*cntr[0] + oneEighty[1]*cntr[1] + oneEighty[2]*cntr[2]);\n\n    final double dX = ecf2[0] - ecf1[0];\n    final double dY = ecf2[1] - ecf1[1];\n    final double dZ = ecf2[2] - ecf1[2];\n    final double fX = ecf1[0] - cntr[0];\n    final double fY = ecf1[1] - cntr[1];\n    final double fZ = ecf1[2] - cntr[2];\n\n    final double a = dX*dX + dY*dY + dZ*dZ;\n    final double b = 2 * (fX*dX + fY*dY + fZ*dZ);\n    final double c = (fX*fX + fY*fY + fZ*fZ) - (radiusMeters*radiusMeters);\n\n    double discrim = (b*b)-(4*a*c);\n    if (discrim < 0) {\n      return false;\n    }\n\n    discrim = StrictMath.sqrt(discrim);\n    final double a2 = 2*a;\n    final double t1 = (-b - discrim)/a2;\n    final double t2 = (-b + discrim)/a2;\n\n    if ( (t1 < 0 || t1 > 1) ) {\n      return !(t2 < 0 || t2 > 1);\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#lineCrossesSphere(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#lineCrossesSphere(double,double,double,double,double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Computes whether or a 3dimensional line segment intersects or crosses a sphere\n   *\n   * @param lon1 longitudinal location of the line segment start point (in degrees)\n   * @param lat1 latitudinal location of the line segment start point (in degrees)\n   * @param alt1 altitude of the line segment start point (in degrees)\n   * @param lon2 longitudinal location of the line segment end point (in degrees)\n   * @param lat2 latitudinal location of the line segment end point (in degrees)\n   * @param alt2 altitude of the line segment end point (in degrees)\n   * @param centerLon longitudinal location of center search point (in degrees)\n   * @param centerLat latitudinal location of center search point (in degrees)\n   * @param centerAlt altitude of the center point (in meters)\n   * @param radiusMeters search sphere radius (in meters)\n   * @return whether the provided line segment is a secant of the\n   */\n  private static boolean lineCrossesSphere(double lon1, double lat1, double alt1, double lon2,\n                                           double lat2, double alt2, double centerLon, double centerLat,\n                                           double centerAlt, double radiusMeters) {\n    // convert to cartesian 3d (in meters)\n    double[] ecf1 = GeoProjectionUtils.llaToECF(lon1, lat1, alt1, null);\n    double[] ecf2 = GeoProjectionUtils.llaToECF(lon2, lat2, alt2, null);\n    double[] cntr = GeoProjectionUtils.llaToECF(centerLon, centerLat, centerAlt, null);\n\n    // convert radius from arc radius to cartesian radius\n    double[] oneEighty = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(centerLon, centerLat, 180.0d, radiusMeters, new double[3]);\n    GeoProjectionUtils.llaToECF(oneEighty[0], oneEighty[1], 0, oneEighty);\n\n    radiusMeters = GeoDistanceUtils.linearDistance(oneEighty, cntr);//   Math.sqrt(oneEighty[0]*cntr[0] + oneEighty[1]*cntr[1] + oneEighty[2]*cntr[2]);\n\n    final double dX = ecf2[0] - ecf1[0];\n    final double dY = ecf2[1] - ecf1[1];\n    final double dZ = ecf2[2] - ecf1[2];\n    final double fX = ecf1[0] - cntr[0];\n    final double fY = ecf1[1] - cntr[1];\n    final double fZ = ecf1[2] - cntr[2];\n\n    final double a = dX*dX + dY*dY + dZ*dZ;\n    final double b = 2 * (fX*dX + fY*dY + fZ*dZ);\n    final double c = (fX*fX + fY*fY + fZ*fZ) - (radiusMeters*radiusMeters);\n\n    double discrim = (b*b)-(4*a*c);\n    if (discrim < 0) {\n      return false;\n    }\n\n    discrim = StrictMath.sqrt(discrim);\n    final double a2 = 2*a;\n    final double t1 = (-b - discrim)/a2;\n    final double t2 = (-b + discrim)/a2;\n\n    if ( (t1 < 0 || t1 > 1) ) {\n      return !(t2 < 0 || t2 > 1);\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Computes whether or a 3dimensional line segment intersects or crosses a sphere\n   *\n   * @param lon1 longitudinal location of the line segment start point (in degrees)\n   * @param lat1 latitudinal location of the line segment start point (in degrees)\n   * @param alt1 altitude of the line segment start point (in degrees)\n   * @param lon2 longitudinal location of the line segment end point (in degrees)\n   * @param lat2 latitudinal location of the line segment end point (in degrees)\n   * @param alt2 altitude of the line segment end point (in degrees)\n   * @param centerLon longitudinal location of center search point (in degrees)\n   * @param centerLat latitudinal location of center search point (in degrees)\n   * @param centerAlt altitude of the center point (in meters)\n   * @param radiusMeters search sphere radius (in meters)\n   * @return whether the provided line segment is a secant of the\n   */\n  private static boolean lineCrossesSphere(double lon1, double lat1, double alt1, double lon2,\n                                           double lat2, double alt2, double centerLon, double centerLat,\n                                           double centerAlt, double radiusMeters) {\n    // convert to cartesian 3d (in meters)\n    double[] ecf1 = GeoProjectionUtils.llaToECF(lon1, lat1, alt1, null);\n    double[] ecf2 = GeoProjectionUtils.llaToECF(lon2, lat2, alt2, null);\n    double[] cntr = GeoProjectionUtils.llaToECF(centerLon, centerLat, centerAlt, null);\n\n    // convert radius from arc radius to cartesian radius\n    double[] oneEighty = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(centerLon, centerLat, 180.0d, radiusMeters, new double[3]);\n    GeoProjectionUtils.llaToECF(oneEighty[0], oneEighty[1], 0, oneEighty);\n\n    radiusMeters = GeoDistanceUtils.linearDistance(oneEighty, cntr);//   Math.sqrt(oneEighty[0]*cntr[0] + oneEighty[1]*cntr[1] + oneEighty[2]*cntr[2]);\n\n    final double dX = ecf2[0] - ecf1[0];\n    final double dY = ecf2[1] - ecf1[1];\n    final double dZ = ecf2[2] - ecf1[2];\n    final double fX = ecf1[0] - cntr[0];\n    final double fY = ecf1[1] - cntr[1];\n    final double fZ = ecf1[2] - cntr[2];\n\n    final double a = dX*dX + dY*dY + dZ*dZ;\n    final double b = 2 * (fX*dX + fY*dY + fZ*dZ);\n    final double c = (fX*fX + fY*fY + fZ*fZ) - (radiusMeters*radiusMeters);\n\n    double discrim = (b*b)-(4*a*c);\n    if (discrim < 0) {\n      return false;\n    }\n\n    discrim = StrictMath.sqrt(discrim);\n    final double a2 = 2*a;\n    final double t1 = (-b - discrim)/a2;\n    final double t2 = (-b + discrim)/a2;\n\n    if ( (t1 < 0 || t1 > 1) ) {\n      return !(t2 < 0 || t2 > 1);\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["33bb6bd7295e66f93f182556f5353b97243e62ba","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}