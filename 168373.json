{"path":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","commits":[{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testReopen() throws Exception {\r\n    Directory dir = newDirectory();\r\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\r\n    IndexWriter writer = new IndexWriter(dir, conf);\r\n    writer.addDocument(doc(0));\r\n    writer.addDocument(doc(1));\r\n    \r\n    final boolean isNRT = random().nextBoolean();\r\n    final DirectoryReader reader1;\r\n    if (isNRT) {\r\n      reader1 = DirectoryReader.open(writer, true);\r\n    } else {\r\n      writer.commit();\r\n      reader1 = DirectoryReader.open(dir);\r\n    }\r\n    \r\n    // update doc\r\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\r\n    if (!isNRT) {\r\n      writer.commit();\r\n    }\r\n    \r\n    // reopen reader and assert only it sees the update\r\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\r\n    assertNotNull(reader2);\r\n    assertTrue(reader1 != reader2);\r\n    \r\n    assertEquals(1, reader1.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\r\n    assertEquals(10, reader2.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\r\n    \r\n    IOUtils.close(writer, reader1, reader2, dir);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4962e8a1c440950d757f5e295b4f6106ba2ab420","date":1379271654,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","sourceNew":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer, true);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n    \n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n    \n    assertEquals(1, reader1.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n    assertEquals(10, reader2.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n    \n    IOUtils.close(writer, reader1, reader2, dir);\n  }\n\n","sourceOld":"  @Test\r\n  public void testReopen() throws Exception {\r\n    Directory dir = newDirectory();\r\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\r\n    IndexWriter writer = new IndexWriter(dir, conf);\r\n    writer.addDocument(doc(0));\r\n    writer.addDocument(doc(1));\r\n    \r\n    final boolean isNRT = random().nextBoolean();\r\n    final DirectoryReader reader1;\r\n    if (isNRT) {\r\n      reader1 = DirectoryReader.open(writer, true);\r\n    } else {\r\n      writer.commit();\r\n      reader1 = DirectoryReader.open(dir);\r\n    }\r\n    \r\n    // update doc\r\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\r\n    if (!isNRT) {\r\n      writer.commit();\r\n    }\r\n    \r\n    // reopen reader and assert only it sees the update\r\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\r\n    assertNotNull(reader2);\r\n    assertTrue(reader1 != reader2);\r\n    \r\n    assertEquals(1, reader1.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\r\n    assertEquals(10, reader2.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\r\n    \r\n    IOUtils.close(writer, reader1, reader2, dir);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","sourceNew":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer, true);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n\n    assertEquals(1, reader1.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n    assertEquals(10, reader2.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n    \n    IOUtils.close(writer, reader1, reader2, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer, true);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n    \n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n    \n    assertEquals(1, reader1.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n    assertEquals(10, reader2.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n    \n    IOUtils.close(writer, reader1, reader2, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","sourceNew":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer, true);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n\n    assertEquals(1, reader1.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n    assertEquals(10, reader2.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n\n    writer.shutdown();\n    IOUtils.close(reader1, reader2, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer, true);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n\n    assertEquals(1, reader1.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n    assertEquals(10, reader2.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n    \n    IOUtils.close(writer, reader1, reader2, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","sourceNew":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer, true);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n\n    assertEquals(1, reader1.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n    assertEquals(10, reader2.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n\n    writer.shutdown();\n    IOUtils.close(reader1, reader2, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer, true);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n\n    assertEquals(1, reader1.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n    assertEquals(10, reader2.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n\n    writer.shutdown();\n    IOUtils.close(reader1, reader2, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","sourceNew":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer, true);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n\n    assertEquals(1, reader1.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n    assertEquals(10, reader2.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n\n    writer.close();\n    IOUtils.close(reader1, reader2, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer, true);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n\n    assertEquals(1, reader1.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n    assertEquals(10, reader2.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n\n    writer.shutdown();\n    IOUtils.close(reader1, reader2, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","sourceNew":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n\n    assertEquals(1, reader1.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n    assertEquals(10, reader2.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n\n    writer.close();\n    IOUtils.close(reader1, reader2, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer, true);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n\n    assertEquals(1, reader1.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n    assertEquals(10, reader2.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n\n    writer.close();\n    IOUtils.close(reader1, reader2, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","sourceNew":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n    NumericDocValues dvs1 = reader1.leaves().get(0).reader().getNumericDocValues(\"val\");\n    assertEquals(0, dvs1.nextDoc());\n    assertEquals(1, dvs1.longValue());\n\n    NumericDocValues dvs2 = reader2.leaves().get(0).reader().getNumericDocValues(\"val\");\n    assertEquals(0, dvs2.nextDoc());\n    assertEquals(10, dvs2.longValue());\n\n    writer.close();\n    IOUtils.close(reader1, reader2, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n\n    assertEquals(1, reader1.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n    assertEquals(10, reader2.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n\n    writer.close();\n    IOUtils.close(reader1, reader2, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","sourceNew":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n    NumericDocValues dvs1 = reader1.leaves().get(0).reader().getNumericDocValues(\"val\");\n    assertEquals(0, dvs1.nextDoc());\n    assertEquals(1, dvs1.longValue());\n\n    NumericDocValues dvs2 = reader2.leaves().get(0).reader().getNumericDocValues(\"val\");\n    assertEquals(0, dvs2.nextDoc());\n    assertEquals(10, dvs2.longValue());\n\n    writer.close();\n    IOUtils.close(reader1, reader2, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n\n    assertEquals(1, reader1.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n    assertEquals(10, reader2.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n\n    writer.close();\n    IOUtils.close(reader1, reader2, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","sourceNew":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n    NumericDocValues dvs1 = reader1.leaves().get(0).reader().getNumericDocValues(\"val\");\n    assertEquals(0, dvs1.nextDoc());\n    assertEquals(1, dvs1.longValue());\n\n    NumericDocValues dvs2 = reader2.leaves().get(0).reader().getNumericDocValues(\"val\");\n    assertEquals(0, dvs2.nextDoc());\n    assertEquals(10, dvs2.longValue());\n\n    writer.close();\n    IOUtils.close(reader1, reader2, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n\n    assertEquals(1, reader1.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n    assertEquals(10, reader2.leaves().get(0).reader().getNumericDocValues(\"val\").get(0));\n\n    writer.close();\n    IOUtils.close(reader1, reader2, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: isNRT=\" + isNRT);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    if (VERBOSE) {\n      System.out.println(\"TEST: openIfChanged\");\n    }\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n    NumericDocValues dvs1 = reader1.leaves().get(0).reader().getNumericDocValues(\"val\");\n    assertEquals(0, dvs1.nextDoc());\n    assertEquals(1, dvs1.longValue());\n\n    NumericDocValues dvs2 = reader2.leaves().get(0).reader().getNumericDocValues(\"val\");\n    assertEquals(0, dvs2.nextDoc());\n    assertEquals(10, dvs2.longValue());\n\n    writer.close();\n    IOUtils.close(reader1, reader2, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n    NumericDocValues dvs1 = reader1.leaves().get(0).reader().getNumericDocValues(\"val\");\n    assertEquals(0, dvs1.nextDoc());\n    assertEquals(1, dvs1.longValue());\n\n    NumericDocValues dvs2 = reader2.leaves().get(0).reader().getNumericDocValues(\"val\");\n    assertEquals(0, dvs2.nextDoc());\n    assertEquals(10, dvs2.longValue());\n\n    writer.close();\n    IOUtils.close(reader1, reader2, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: isNRT=\" + isNRT);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    if (VERBOSE) {\n      System.out.println(\"TEST: openIfChanged\");\n    }\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n    NumericDocValues dvs1 = reader1.leaves().get(0).reader().getNumericDocValues(\"val\");\n    assertEquals(0, dvs1.nextDoc());\n    assertEquals(1, dvs1.longValue());\n\n    NumericDocValues dvs2 = reader2.leaves().get(0).reader().getNumericDocValues(\"val\");\n    assertEquals(0, dvs2.nextDoc());\n    assertEquals(10, dvs2.longValue());\n\n    writer.close();\n    IOUtils.close(reader1, reader2, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n    NumericDocValues dvs1 = reader1.leaves().get(0).reader().getNumericDocValues(\"val\");\n    assertEquals(0, dvs1.nextDoc());\n    assertEquals(1, dvs1.longValue());\n\n    NumericDocValues dvs2 = reader2.leaves().get(0).reader().getNumericDocValues(\"val\");\n    assertEquals(0, dvs2.nextDoc());\n    assertEquals(10, dvs2.longValue());\n\n    writer.close();\n    IOUtils.close(reader1, reader2, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testReopen().mjava","sourceNew":"  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: isNRT=\" + isNRT);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    if (VERBOSE) {\n      System.out.println(\"TEST: openIfChanged\");\n    }\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n    NumericDocValues dvs1 = reader1.leaves().get(0).reader().getNumericDocValues(\"val\");\n    assertEquals(0, dvs1.nextDoc());\n    assertEquals(1, dvs1.longValue());\n\n    NumericDocValues dvs2 = reader2.leaves().get(0).reader().getNumericDocValues(\"val\");\n    assertEquals(0, dvs2.nextDoc());\n    assertEquals(10, dvs2.longValue());\n\n    writer.close();\n    IOUtils.close(reader1, reader2, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testReopen() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    final boolean isNRT = random().nextBoolean();\n    final DirectoryReader reader1;\n    if (isNRT) {\n      reader1 = DirectoryReader.open(writer);\n    } else {\n      writer.commit();\n      reader1 = DirectoryReader.open(dir);\n    }\n\n    // update doc\n    writer.updateNumericDocValue(new Term(\"id\", \"doc-0\"), \"val\", 10L); // update doc-0's value to 10\n    if (!isNRT) {\n      writer.commit();\n    }\n    \n    // reopen reader and assert only it sees the update\n    final DirectoryReader reader2 = DirectoryReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    assertTrue(reader1 != reader2);\n    NumericDocValues dvs1 = reader1.leaves().get(0).reader().getNumericDocValues(\"val\");\n    assertEquals(0, dvs1.nextDoc());\n    assertEquals(1, dvs1.longValue());\n\n    NumericDocValues dvs2 = reader2.leaves().get(0).reader().getNumericDocValues(\"val\");\n    assertEquals(0, dvs2.nextDoc());\n    assertEquals(10, dvs2.longValue());\n\n    writer.close();\n    IOUtils.close(reader1, reader2, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"8435160e9702b19398118ddf76b61c846612b6a4":["4962e8a1c440950d757f5e295b4f6106ba2ab420"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2a1862266772deb28cdcb7d996b64d2177022687","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2a1862266772deb28cdcb7d996b64d2177022687":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2a1862266772deb28cdcb7d996b64d2177022687","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["2a1862266772deb28cdcb7d996b64d2177022687"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["8435160e9702b19398118ddf76b61c846612b6a4"],"4962e8a1c440950d757f5e295b4f6106ba2ab420":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["4962e8a1c440950d757f5e295b4f6106ba2ab420"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"8435160e9702b19398118ddf76b61c846612b6a4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"2a1862266772deb28cdcb7d996b64d2177022687":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2a1862266772deb28cdcb7d996b64d2177022687"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4962e8a1c440950d757f5e295b4f6106ba2ab420":["8435160e9702b19398118ddf76b61c846612b6a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}