{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesFixedStraight(FieldInfo).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesFixedStraight(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesFixedStraight(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBytesFixedStraight(FieldInfo field) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexInput input = dir.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_CODEC_NAME,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_CURRENT);\n      final int fixedLength = input.readInt();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(input, fixedLength * (long)state.segmentInfo.getDocCount());\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      CodecUtil.checkEOF(input);\n      success = true;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed());\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBytesFixedStraight(FieldInfo field) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexInput input = dir.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_CODEC_NAME,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_CURRENT);\n      final int fixedLength = input.readInt();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(input, fixedLength * (long)state.segmentInfo.getDocCount());\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      CodecUtil.checkEOF(input);\n      success = true;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed());\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesFixedStraight(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesFixedStraight(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBytesFixedStraight(FieldInfo field) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexInput input = dir.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_CODEC_NAME,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_CURRENT);\n      final int fixedLength = input.readInt();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(input, fixedLength * (long)state.segmentInfo.getDocCount());\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      CodecUtil.checkEOF(input);\n      success = true;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed());\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBytesFixedStraight(FieldInfo field) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexInput input = dir.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_CODEC_NAME,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_CURRENT);\n      final int fixedLength = input.readInt();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(input, fixedLength * (long)state.segmentInfo.getDocCount());\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      CodecUtil.checkEOF(input);\n      success = true;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed());\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesFixedStraight(FieldInfo).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesFixedStraight(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBytesFixedStraight(FieldInfo field) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexInput input = dir.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_CODEC_NAME,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_CURRENT);\n      final int fixedLength = input.readInt();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(input, fixedLength * (long)state.segmentInfo.getDocCount());\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      CodecUtil.checkEOF(input);\n      success = true;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed());\n      instanceInfo.put(field.name, bytesReader);\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBytesFixedStraight(FieldInfo field) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexInput input = dir.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_CODEC_NAME,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_CURRENT);\n      final int fixedLength = input.readInt();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(input, fixedLength * (long)state.segmentInfo.getDocCount());\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      CodecUtil.checkEOF(input);\n      success = true;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed());\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesFixedStraight(FieldInfo).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesFixedStraight(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBytesFixedStraight(FieldInfo field) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexInput input = dir.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_CODEC_NAME,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_CURRENT);\n      final int fixedLength = input.readInt();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(input, fixedLength * (long)state.segmentInfo.getDocCount());\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      CodecUtil.checkEOF(input);\n      success = true;\n      if (!merging) {\n        ramBytesUsed.addAndGet(bytesReader.ramBytesUsed());\n        instanceInfo.put(field.name, bytesReader);\n      }\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBytesFixedStraight(FieldInfo field) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexInput input = dir.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_CODEC_NAME,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_CURRENT);\n      final int fixedLength = input.readInt();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(input, fixedLength * (long)state.segmentInfo.getDocCount());\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      CodecUtil.checkEOF(input);\n      success = true;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed());\n      instanceInfo.put(field.name, bytesReader);\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesFixedStraight(FieldInfo).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesFixedStraight(FieldInfo).mjava","sourceNew":"  private BinaryDocValues loadBytesFixedStraight(FieldInfo field) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexInput input = dir.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_CODEC_NAME,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_CURRENT);\n      final int fixedLength = input.readInt();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(input, fixedLength * (long)state.segmentInfo.getDocCount());\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      CodecUtil.checkEOF(input);\n      success = true;\n      if (!merging) {\n        ramBytesUsed.addAndGet(bytesReader.ramBytesUsed());\n        instanceInfo.put(field.name, bytesReader);\n      }\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  private BinaryDocValues loadBytesFixedStraight(FieldInfo field) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexInput input = dir.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_CODEC_NAME,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_CURRENT);\n      final int fixedLength = input.readInt();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(input, fixedLength * (long)state.segmentInfo.getDocCount());\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      CodecUtil.checkEOF(input);\n      success = true;\n      ramBytesUsed.addAndGet(bytesReader.ramBytesUsed());\n      instanceInfo.put(field.name, bytesReader);\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader#loadBytesFixedStraight(FieldInfo).mjava","sourceNew":null,"sourceOld":"  private BinaryDocValues loadBytesFixedStraight(FieldInfo field) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    IndexInput input = dir.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_CODEC_NAME,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_START,\n                                   Lucene40DocValuesFormat.BYTES_FIXED_STRAIGHT_VERSION_CURRENT);\n      final int fixedLength = input.readInt();\n      PagedBytes bytes = new PagedBytes(16);\n      bytes.copy(input, fixedLength * (long)state.segmentInfo.getDocCount());\n      final PagedBytes.Reader bytesReader = bytes.freeze(true);\n      CodecUtil.checkEOF(input);\n      success = true;\n      if (!merging) {\n        ramBytesUsed.addAndGet(bytesReader.ramBytesUsed());\n        instanceInfo.put(field.name, bytesReader);\n      }\n      return new BinaryDocValues() {\n\n        @Override\n        public BytesRef get(int docID) {\n          final BytesRef term = new BytesRef();\n          bytesReader.fillSlice(term, fixedLength * (long)docID, fixedLength);\n          return term;\n        }\n      };\n    } finally {\n      if (success) {\n        IOUtils.close(input);\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc8f80fee115148a0e4a0574560be06b494de821":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["0936055c0eed56be3e4ae5c9db5b0e355390736a","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}