{"path":"lucene/core/src/java/org/apache/lucene/search/TwoPhaseDocIdSetIterator#asDocIdSetIterator(TwoPhaseDocIdSetIterator).mjava","commits":[{"id":"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","date":1423845906,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TwoPhaseDocIdSetIterator#asDocIdSetIterator(TwoPhaseDocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"  /** Return a {@link DocIdSetIterator} view of the provided\n   *  {@link TwoPhaseDocIdSetIterator}. */\n  public static DocIdSetIterator asDocIdSetIterator(TwoPhaseDocIdSetIterator twoPhaseIterator) {\n    final DocIdSetIterator approximation = twoPhaseIterator.approximation();\n    return new DocIdSetIterator() {\n\n      @Override\n      public int docID() {\n        return approximation.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return doNext(approximation.nextDoc());\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        return doNext(approximation.advance(target));\n      }\n\n      private int doNext(int doc) throws IOException {\n        for (;; doc = approximation.nextDoc()) {\n          if (doc == NO_MORE_DOCS) {\n            return NO_MORE_DOCS;\n          } else if (twoPhaseIterator.matches()) {\n            return doc;\n          }\n        }\n      }\n\n      @Override\n      public long cost() {\n        return approximation.cost();\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d6eb0072094d94624002318ba2d4c840946833","date":1424947971,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TwoPhaseIterator#asDocIdSetIterator(TwoPhaseIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TwoPhaseDocIdSetIterator#asDocIdSetIterator(TwoPhaseDocIdSetIterator).mjava","sourceNew":"  /** Return a {@link DocIdSetIterator} view of the provided\n   *  {@link TwoPhaseIterator}. */\n  public static DocIdSetIterator asDocIdSetIterator(TwoPhaseIterator twoPhaseIterator) {\n    final DocIdSetIterator approximation = twoPhaseIterator.approximation();\n    return new DocIdSetIterator() {\n\n      @Override\n      public int docID() {\n        return approximation.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return doNext(approximation.nextDoc());\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        return doNext(approximation.advance(target));\n      }\n\n      private int doNext(int doc) throws IOException {\n        for (;; doc = approximation.nextDoc()) {\n          if (doc == NO_MORE_DOCS) {\n            return NO_MORE_DOCS;\n          } else if (twoPhaseIterator.matches()) {\n            return doc;\n          }\n        }\n      }\n\n      @Override\n      public long cost() {\n        return approximation.cost();\n      }\n\n    };\n  }\n\n","sourceOld":"  /** Return a {@link DocIdSetIterator} view of the provided\n   *  {@link TwoPhaseDocIdSetIterator}. */\n  public static DocIdSetIterator asDocIdSetIterator(TwoPhaseDocIdSetIterator twoPhaseIterator) {\n    final DocIdSetIterator approximation = twoPhaseIterator.approximation();\n    return new DocIdSetIterator() {\n\n      @Override\n      public int docID() {\n        return approximation.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return doNext(approximation.nextDoc());\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        return doNext(approximation.advance(target));\n      }\n\n      private int doNext(int doc) throws IOException {\n        for (;; doc = approximation.nextDoc()) {\n          if (doc == NO_MORE_DOCS) {\n            return NO_MORE_DOCS;\n          } else if (twoPhaseIterator.matches()) {\n            return doc;\n          }\n        }\n      }\n\n      @Override\n      public long cost() {\n        return approximation.cost();\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/TwoPhaseDocIdSetIterator#asDocIdSetIterator(TwoPhaseDocIdSetIterator).mjava","sourceNew":null,"sourceOld":"  /** Return a {@link DocIdSetIterator} view of the provided\n   *  {@link TwoPhaseDocIdSetIterator}. */\n  public static DocIdSetIterator asDocIdSetIterator(TwoPhaseDocIdSetIterator twoPhaseIterator) {\n    final DocIdSetIterator approximation = twoPhaseIterator.approximation();\n    return new DocIdSetIterator() {\n\n      @Override\n      public int docID() {\n        return approximation.docID();\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        return doNext(approximation.nextDoc());\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        return doNext(approximation.advance(target));\n      }\n\n      private int doNext(int doc) throws IOException {\n        for (;; doc = approximation.nextDoc()) {\n          if (doc == NO_MORE_DOCS) {\n            return NO_MORE_DOCS;\n          } else if (twoPhaseIterator.matches()) {\n            return doc;\n          }\n        }\n      }\n\n      @Override\n      public long cost() {\n        return approximation.cost();\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","a3d6eb0072094d94624002318ba2d4c840946833"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d6eb0072094d94624002318ba2d4c840946833":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3d6eb0072094d94624002318ba2d4c840946833"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"a3d6eb0072094d94624002318ba2d4c840946833":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a3d6eb0072094d94624002318ba2d4c840946833"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}