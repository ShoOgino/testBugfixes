{"path":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState#quickSort(Posting[],int,int).mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState#quickSort(Posting[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    final void quickSort(Posting[] postings, int lo, int hi) {\n      if (lo >= hi)\n        return;\n\n      int mid = (lo + hi) / 2;\n\n      if (comparePostings(postings[lo], postings[mid]) > 0) {\n        Posting tmp = postings[lo];\n        postings[lo] = postings[mid];\n        postings[mid] = tmp;\n      }\n\n      if (comparePostings(postings[mid], postings[hi]) > 0) {\n        Posting tmp = postings[mid];\n        postings[mid] = postings[hi];\n        postings[hi] = tmp;\n\n        if (comparePostings(postings[lo], postings[mid]) > 0) {\n          Posting tmp2 = postings[lo];\n          postings[lo] = postings[mid];\n          postings[mid] = tmp2;\n        }\n      }\n\n      int left = lo + 1;\n      int right = hi - 1;\n\n      if (left >= right)\n        return;\n\n      Posting partition = postings[mid];\n\n      for (; ;) {\n        while (comparePostings(postings[right], partition) > 0)\n          --right;\n\n        while (left < right && comparePostings(postings[left], partition) <= 0)\n          ++left;\n\n        if (left < right) {\n          Posting tmp = postings[left];\n          postings[left] = postings[right];\n          postings[right] = tmp;\n          --right;\n        } else {\n          break;\n        }\n      }\n\n      quickSort(postings, lo, left);\n      quickSort(postings, left + 1, hi);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"290ddf70ef4230015d4b5ff6758c630a466d757c","date":1183739680,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState#quickSort(Posting[],int,int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState#quickSort(Posting[],int,int).mjava","sourceNew":"    final void quickSort(Posting[] postings, int lo, int hi) {\n      if (lo >= hi)\n        return;\n\n      int mid = (lo + hi) >>> 1;\n\n      if (comparePostings(postings[lo], postings[mid]) > 0) {\n        Posting tmp = postings[lo];\n        postings[lo] = postings[mid];\n        postings[mid] = tmp;\n      }\n\n      if (comparePostings(postings[mid], postings[hi]) > 0) {\n        Posting tmp = postings[mid];\n        postings[mid] = postings[hi];\n        postings[hi] = tmp;\n\n        if (comparePostings(postings[lo], postings[mid]) > 0) {\n          Posting tmp2 = postings[lo];\n          postings[lo] = postings[mid];\n          postings[mid] = tmp2;\n        }\n      }\n\n      int left = lo + 1;\n      int right = hi - 1;\n\n      if (left >= right)\n        return;\n\n      Posting partition = postings[mid];\n\n      for (; ;) {\n        while (comparePostings(postings[right], partition) > 0)\n          --right;\n\n        while (left < right && comparePostings(postings[left], partition) <= 0)\n          ++left;\n\n        if (left < right) {\n          Posting tmp = postings[left];\n          postings[left] = postings[right];\n          postings[right] = tmp;\n          --right;\n        } else {\n          break;\n        }\n      }\n\n      quickSort(postings, lo, left);\n      quickSort(postings, left + 1, hi);\n    }\n\n","sourceOld":"    final void quickSort(Posting[] postings, int lo, int hi) {\n      if (lo >= hi)\n        return;\n\n      int mid = (lo + hi) / 2;\n\n      if (comparePostings(postings[lo], postings[mid]) > 0) {\n        Posting tmp = postings[lo];\n        postings[lo] = postings[mid];\n        postings[mid] = tmp;\n      }\n\n      if (comparePostings(postings[mid], postings[hi]) > 0) {\n        Posting tmp = postings[mid];\n        postings[mid] = postings[hi];\n        postings[hi] = tmp;\n\n        if (comparePostings(postings[lo], postings[mid]) > 0) {\n          Posting tmp2 = postings[lo];\n          postings[lo] = postings[mid];\n          postings[mid] = tmp2;\n        }\n      }\n\n      int left = lo + 1;\n      int right = hi - 1;\n\n      if (left >= right)\n        return;\n\n      Posting partition = postings[mid];\n\n      for (; ;) {\n        while (comparePostings(postings[right], partition) > 0)\n          --right;\n\n        while (left < right && comparePostings(postings[left], partition) <= 0)\n          ++left;\n\n        if (left < right) {\n          Posting tmp = postings[left];\n          postings[left] = postings[right];\n          postings[right] = tmp;\n          --right;\n        } else {\n          break;\n        }\n      }\n\n      quickSort(postings, lo, left);\n      quickSort(postings, left + 1, hi);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a1f29c9b1051488fd5fa7d56c98db5f4388408","date":1196281221,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState#quickSort(Posting[],int,int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState#quickSort(Posting[],int,int).mjava","sourceNew":"    void quickSort(Posting[] postings, int lo, int hi) {\n      if (lo >= hi)\n        return;\n\n      int mid = (lo + hi) >>> 1;\n\n      if (comparePostings(postings[lo], postings[mid]) > 0) {\n        Posting tmp = postings[lo];\n        postings[lo] = postings[mid];\n        postings[mid] = tmp;\n      }\n\n      if (comparePostings(postings[mid], postings[hi]) > 0) {\n        Posting tmp = postings[mid];\n        postings[mid] = postings[hi];\n        postings[hi] = tmp;\n\n        if (comparePostings(postings[lo], postings[mid]) > 0) {\n          Posting tmp2 = postings[lo];\n          postings[lo] = postings[mid];\n          postings[mid] = tmp2;\n        }\n      }\n\n      int left = lo + 1;\n      int right = hi - 1;\n\n      if (left >= right)\n        return;\n\n      Posting partition = postings[mid];\n\n      for (; ;) {\n        while (comparePostings(postings[right], partition) > 0)\n          --right;\n\n        while (left < right && comparePostings(postings[left], partition) <= 0)\n          ++left;\n\n        if (left < right) {\n          Posting tmp = postings[left];\n          postings[left] = postings[right];\n          postings[right] = tmp;\n          --right;\n        } else {\n          break;\n        }\n      }\n\n      quickSort(postings, lo, left);\n      quickSort(postings, left + 1, hi);\n    }\n\n","sourceOld":"    final void quickSort(Posting[] postings, int lo, int hi) {\n      if (lo >= hi)\n        return;\n\n      int mid = (lo + hi) >>> 1;\n\n      if (comparePostings(postings[lo], postings[mid]) > 0) {\n        Posting tmp = postings[lo];\n        postings[lo] = postings[mid];\n        postings[mid] = tmp;\n      }\n\n      if (comparePostings(postings[mid], postings[hi]) > 0) {\n        Posting tmp = postings[mid];\n        postings[mid] = postings[hi];\n        postings[hi] = tmp;\n\n        if (comparePostings(postings[lo], postings[mid]) > 0) {\n          Posting tmp2 = postings[lo];\n          postings[lo] = postings[mid];\n          postings[mid] = tmp2;\n        }\n      }\n\n      int left = lo + 1;\n      int right = hi - 1;\n\n      if (left >= right)\n        return;\n\n      Posting partition = postings[mid];\n\n      for (; ;) {\n        while (comparePostings(postings[right], partition) > 0)\n          --right;\n\n        while (left < right && comparePostings(postings[left], partition) <= 0)\n          ++left;\n\n        if (left < right) {\n          Posting tmp = postings[left];\n          postings[left] = postings[right];\n          postings[right] = tmp;\n          --right;\n        } else {\n          break;\n        }\n      }\n\n      quickSort(postings, lo, left);\n      quickSort(postings, left + 1, hi);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11ed8f980e6e2c95cbe9ce98790c259707ea5475","date":1205051176,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState#quickSort(Posting[],int,int).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState#quickSort(Posting[],int,int).mjava","sourceNew":"    void quickSort(Posting[] postings, int lo, int hi) {\n      if (lo >= hi)\n        return;\n      else if (hi == 1+lo) {\n        if (comparePostings(postings[lo], postings[hi]) > 0) {\n          final Posting tmp = postings[lo];\n          postings[lo] = postings[hi];\n          postings[hi] = tmp;\n        }\n        return;\n      }\n\n      int mid = (lo + hi) >>> 1;\n\n      if (comparePostings(postings[lo], postings[mid]) > 0) {\n        Posting tmp = postings[lo];\n        postings[lo] = postings[mid];\n        postings[mid] = tmp;\n      }\n\n      if (comparePostings(postings[mid], postings[hi]) > 0) {\n        Posting tmp = postings[mid];\n        postings[mid] = postings[hi];\n        postings[hi] = tmp;\n\n        if (comparePostings(postings[lo], postings[mid]) > 0) {\n          Posting tmp2 = postings[lo];\n          postings[lo] = postings[mid];\n          postings[mid] = tmp2;\n        }\n      }\n\n      int left = lo + 1;\n      int right = hi - 1;\n\n      if (left >= right)\n        return;\n\n      Posting partition = postings[mid];\n\n      for (; ;) {\n        while (comparePostings(postings[right], partition) > 0)\n          --right;\n\n        while (left < right && comparePostings(postings[left], partition) <= 0)\n          ++left;\n\n        if (left < right) {\n          Posting tmp = postings[left];\n          postings[left] = postings[right];\n          postings[right] = tmp;\n          --right;\n        } else {\n          break;\n        }\n      }\n\n      quickSort(postings, lo, left);\n      quickSort(postings, left + 1, hi);\n    }\n\n","sourceOld":"    void quickSort(Posting[] postings, int lo, int hi) {\n      if (lo >= hi)\n        return;\n\n      int mid = (lo + hi) >>> 1;\n\n      if (comparePostings(postings[lo], postings[mid]) > 0) {\n        Posting tmp = postings[lo];\n        postings[lo] = postings[mid];\n        postings[mid] = tmp;\n      }\n\n      if (comparePostings(postings[mid], postings[hi]) > 0) {\n        Posting tmp = postings[mid];\n        postings[mid] = postings[hi];\n        postings[hi] = tmp;\n\n        if (comparePostings(postings[lo], postings[mid]) > 0) {\n          Posting tmp2 = postings[lo];\n          postings[lo] = postings[mid];\n          postings[mid] = tmp2;\n        }\n      }\n\n      int left = lo + 1;\n      int right = hi - 1;\n\n      if (left >= right)\n        return;\n\n      Posting partition = postings[mid];\n\n      for (; ;) {\n        while (comparePostings(postings[right], partition) > 0)\n          --right;\n\n        while (left < right && comparePostings(postings[left], partition) <= 0)\n          ++left;\n\n        if (left < right) {\n          Posting tmp = postings[left];\n          postings[left] = postings[right];\n          postings[right] = tmp;\n          --right;\n        } else {\n          break;\n        }\n      }\n\n      quickSort(postings, lo, left);\n      quickSort(postings, left + 1, hi);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a0af3a442be522899177e5e11384a45a6784a3f","date":1205348952,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState#quickSort(Posting[],int,int).mjava","sourceNew":null,"sourceOld":"    void quickSort(Posting[] postings, int lo, int hi) {\n      if (lo >= hi)\n        return;\n      else if (hi == 1+lo) {\n        if (comparePostings(postings[lo], postings[hi]) > 0) {\n          final Posting tmp = postings[lo];\n          postings[lo] = postings[hi];\n          postings[hi] = tmp;\n        }\n        return;\n      }\n\n      int mid = (lo + hi) >>> 1;\n\n      if (comparePostings(postings[lo], postings[mid]) > 0) {\n        Posting tmp = postings[lo];\n        postings[lo] = postings[mid];\n        postings[mid] = tmp;\n      }\n\n      if (comparePostings(postings[mid], postings[hi]) > 0) {\n        Posting tmp = postings[mid];\n        postings[mid] = postings[hi];\n        postings[hi] = tmp;\n\n        if (comparePostings(postings[lo], postings[mid]) > 0) {\n          Posting tmp2 = postings[lo];\n          postings[lo] = postings[mid];\n          postings[mid] = tmp2;\n        }\n      }\n\n      int left = lo + 1;\n      int right = hi - 1;\n\n      if (left >= right)\n        return;\n\n      Posting partition = postings[mid];\n\n      for (; ;) {\n        while (comparePostings(postings[right], partition) > 0)\n          --right;\n\n        while (left < right && comparePostings(postings[left], partition) <= 0)\n          ++left;\n\n        if (left < right) {\n          Posting tmp = postings[left];\n          postings[left] = postings[right];\n          postings[right] = tmp;\n          --right;\n        } else {\n          break;\n        }\n      }\n\n      quickSort(postings, lo, left);\n      quickSort(postings, left + 1, hi);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a0af3a442be522899177e5e11384a45a6784a3f":["11ed8f980e6e2c95cbe9ce98790c259707ea5475"],"290ddf70ef4230015d4b5ff6758c630a466d757c":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"11ed8f980e6e2c95cbe9ce98790c259707ea5475":["b6a1f29c9b1051488fd5fa7d56c98db5f4388408"],"b6a1f29c9b1051488fd5fa7d56c98db5f4388408":["290ddf70ef4230015d4b5ff6758c630a466d757c"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a0af3a442be522899177e5e11384a45a6784a3f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"5a0af3a442be522899177e5e11384a45a6784a3f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"290ddf70ef4230015d4b5ff6758c630a466d757c":["b6a1f29c9b1051488fd5fa7d56c98db5f4388408"],"11ed8f980e6e2c95cbe9ce98790c259707ea5475":["5a0af3a442be522899177e5e11384a45a6784a3f"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["290ddf70ef4230015d4b5ff6758c630a466d757c"],"b6a1f29c9b1051488fd5fa7d56c98db5f4388408":["11ed8f980e6e2c95cbe9ce98790c259707ea5475"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}