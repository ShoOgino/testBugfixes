{"path":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","sourceNew":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    Set<String> fileNames = fileMap.keySet();\n    List<String> names = new ArrayList<String>(fileNames.size());\n    for (String name : fileNames) names.add(name);\n    return names.toArray(new String[names.size()]);\n  }\n\n","sourceOld":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    Set<String> fileNames = fileMap.keySet();\n    List<String> names = new ArrayList<String>(fileNames.size());\n    for (String name : fileNames) names.add(name);\n    return names.toArray(new String[names.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","sourceNew":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    Set<String> fileNames = fileMap.keySet();\n    List<String> names = new ArrayList<>(fileNames.size());\n    for (String name : fileNames) names.add(name);\n    return names.toArray(new String[names.size()]);\n  }\n\n","sourceOld":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    Set<String> fileNames = fileMap.keySet();\n    List<String> names = new ArrayList<String>(fileNames.size());\n    for (String name : fileNames) names.add(name);\n    return names.toArray(new String[names.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","sourceNew":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: this returns a \"weakly consistent view\". Unless we change Dir API, keep this,\n    // and do not synchronize or anything stronger. its great for testing!\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    Set<String> fileNames = fileMap.keySet();\n    List<String> names = new ArrayList<>(fileNames.size());\n    for (String name : fileNames) names.add(name);\n    return names.toArray(new String[names.size()]);\n  }\n\n","sourceOld":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    Set<String> fileNames = fileMap.keySet();\n    List<String> names = new ArrayList<>(fileNames.size());\n    for (String name : fileNames) names.add(name);\n    return names.toArray(new String[names.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","sourceNew":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: this returns a \"weakly consistent view\". Unless we change Dir API, keep this,\n    // and do not synchronize or anything stronger. it's great for testing!\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    Set<String> fileNames = fileMap.keySet();\n    List<String> names = new ArrayList<>(fileNames.size());\n    for (String name : fileNames) names.add(name);\n    return names.toArray(new String[names.size()]);\n  }\n\n","sourceOld":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: this returns a \"weakly consistent view\". Unless we change Dir API, keep this,\n    // and do not synchronize or anything stronger. its great for testing!\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    Set<String> fileNames = fileMap.keySet();\n    List<String> names = new ArrayList<>(fileNames.size());\n    for (String name : fileNames) names.add(name);\n    return names.toArray(new String[names.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","sourceNew":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: this returns a \"weakly consistent view\". Unless we change Dir API, keep this,\n    // and do not synchronize or anything stronger. it's great for testing!\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    return fileMap.keySet().toArray(new String[fileMap.size()]);\n  }\n\n","sourceOld":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: this returns a \"weakly consistent view\". Unless we change Dir API, keep this,\n    // and do not synchronize or anything stronger. it's great for testing!\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    Set<String> fileNames = fileMap.keySet();\n    List<String> names = new ArrayList<>(fileNames.size());\n    for (String name : fileNames) names.add(name);\n    return names.toArray(new String[names.size()]);\n  }\n\n","bugFix":null,"bugIntro":["2e9eb36d1b08cda71a07969b1cf73ab7de427d98"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e9eb36d1b08cda71a07969b1cf73ab7de427d98","date":1445265133,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","sourceNew":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: this returns a \"weakly consistent view\". Unless we change Dir API, keep this,\n    // and do not synchronize or anything stronger. it's great for testing!\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    // NOTE: don't replace this with return names.toArray(new String[names.size()]);\n    // or some files could be null at the end of the array if files are being deleted\n    // concurrently\n    Set<String> fileNames = fileMap.keySet();\n    List<String> names = new ArrayList<>(fileNames.size());\n    for (String name : fileNames) names.add(name);\n    return names.toArray(new String[names.size()]);\n  }\n\n","sourceOld":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: this returns a \"weakly consistent view\". Unless we change Dir API, keep this,\n    // and do not synchronize or anything stronger. it's great for testing!\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    return fileMap.keySet().toArray(new String[fileMap.size()]);\n  }\n\n","bugFix":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b457e7ac6faeb9e91a9dd5faaf0e2c7286faac","date":1454606266,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","sourceNew":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: this returns a \"weakly consistent view\". Unless we change Dir API, keep this,\n    // and do not synchronize or anything stronger. it's great for testing!\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    // NOTE: don't replace this with return names.toArray(new String[names.size()]);\n    // or some files could be null at the end of the array if files are being deleted\n    // concurrently\n    Set<String> fileNames = fileMap.keySet();\n    List<String> names = new ArrayList<>(fileNames.size());\n    for (String name : fileNames) {\n      names.add(name);\n    }\n    String[] namesArray = names.toArray(new String[names.size()]);\n    Arrays.sort(namesArray);\n    return namesArray;\n  }\n\n","sourceOld":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: this returns a \"weakly consistent view\". Unless we change Dir API, keep this,\n    // and do not synchronize or anything stronger. it's great for testing!\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    // NOTE: don't replace this with return names.toArray(new String[names.size()]);\n    // or some files could be null at the end of the array if files are being deleted\n    // concurrently\n    Set<String> fileNames = fileMap.keySet();\n    List<String> names = new ArrayList<>(fileNames.size());\n    for (String name : fileNames) names.add(name);\n    return names.toArray(new String[names.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","sourceNew":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: this returns a \"weakly consistent view\". Unless we change Dir API, keep this,\n    // and do not synchronize or anything stronger. it's great for testing!\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    // NOTE: don't replace this with return names.toArray(new String[names.size()]);\n    // or some files could be null at the end of the array if files are being deleted\n    // concurrently\n    Set<String> fileNames = fileMap.keySet();\n    List<String> names = new ArrayList<>(fileNames.size());\n    for (String name : fileNames) {\n      names.add(name);\n    }\n    String[] namesArray = names.toArray(new String[names.size()]);\n    Arrays.sort(namesArray);\n    return namesArray;\n  }\n\n","sourceOld":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: this returns a \"weakly consistent view\". Unless we change Dir API, keep this,\n    // and do not synchronize or anything stronger. it's great for testing!\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    // NOTE: don't replace this with return names.toArray(new String[names.size()]);\n    // or some files could be null at the end of the array if files are being deleted\n    // concurrently\n    Set<String> fileNames = fileMap.keySet();\n    List<String> names = new ArrayList<>(fileNames.size());\n    for (String name : fileNames) names.add(name);\n    return names.toArray(new String[names.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","sourceNew":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: this returns a \"weakly consistent view\". Unless we change Dir API, keep this,\n    // and do not synchronize or anything stronger. it's great for testing!\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    // NOTE: don't replace this with return names.toArray(new String[names.size()]);\n    // or some files could be null at the end of the array if files are being deleted\n    // concurrently\n    Set<String> fileNames = fileMap.keySet();\n    List<String> names = new ArrayList<>(fileNames.size());\n    for (String name : fileNames) {\n      names.add(name);\n    }\n    String[] namesArray = names.toArray(new String[names.size()]);\n    Arrays.sort(namesArray);\n    return namesArray;\n  }\n\n","sourceOld":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: this returns a \"weakly consistent view\". Unless we change Dir API, keep this,\n    // and do not synchronize or anything stronger. it's great for testing!\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    // NOTE: don't replace this with return names.toArray(new String[names.size()]);\n    // or some files could be null at the end of the array if files are being deleted\n    // concurrently\n    Set<String> fileNames = fileMap.keySet();\n    List<String> names = new ArrayList<>(fileNames.size());\n    for (String name : fileNames) names.add(name);\n    return names.toArray(new String[names.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","sourceNew":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: this returns a \"weakly consistent view\". Unless we change Dir API, keep this,\n    // and do not synchronize or anything stronger. it's great for testing!\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    // NOTE: don't replace this with return names.toArray(new String[names.size()]);\n    // or some files could be null at the end of the array if files are being deleted\n    // concurrently\n    Set<String> fileNames = fileMap.keySet();\n    List<String> names = new ArrayList<>(fileNames.size());\n    for (String name : fileNames) {\n      names.add(name);\n    }\n    String[] namesArray = names.toArray(new String[names.size()]);\n    Arrays.sort(namesArray);\n    return namesArray;\n  }\n\n","sourceOld":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: this returns a \"weakly consistent view\". Unless we change Dir API, keep this,\n    // and do not synchronize or anything stronger. it's great for testing!\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    // NOTE: don't replace this with return names.toArray(new String[names.size()]);\n    // or some files could be null at the end of the array if files are being deleted\n    // concurrently\n    Set<String> fileNames = fileMap.keySet();\n    List<String> names = new ArrayList<>(fileNames.size());\n    for (String name : fileNames) names.add(name);\n    return names.toArray(new String[names.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/RAMDirectory#listAll().mjava","sourceNew":null,"sourceOld":"  @Override\n  public final String[] listAll() {\n    ensureOpen();\n    // NOTE: this returns a \"weakly consistent view\". Unless we change Dir API, keep this,\n    // and do not synchronize or anything stronger. it's great for testing!\n    // NOTE: fileMap.keySet().toArray(new String[0]) is broken in non Sun JDKs,\n    // and the code below is resilient to map changes during the array population.\n    // NOTE: don't replace this with return names.toArray(new String[names.size()]);\n    // or some files could be null at the end of the array if files are being deleted\n    // concurrently\n    Set<String> fileNames = fileMap.keySet();\n    List<String> names = new ArrayList<>(fileNames.size());\n    for (String name : fileNames) {\n      names.add(name);\n    }\n    String[] namesArray = names.toArray(new String[names.size()]);\n    Arrays.sort(namesArray);\n    return namesArray;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["2e9eb36d1b08cda71a07969b1cf73ab7de427d98","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["2e9eb36d1b08cda71a07969b1cf73ab7de427d98","b470f36a9372c97283360b1304eacbde22df6c0d"],"d77dafd89756a5161d244985903e3487ca109182":["5a207d19eac354d649c3f0e2cce070017c78125e"],"b0b457e7ac6faeb9e91a9dd5faaf0e2c7286faac":["2e9eb36d1b08cda71a07969b1cf73ab7de427d98"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"2e9eb36d1b08cda71a07969b1cf73ab7de427d98":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"b470f36a9372c97283360b1304eacbde22df6c0d":["2e9eb36d1b08cda71a07969b1cf73ab7de427d98","b0b457e7ac6faeb9e91a9dd5faaf0e2c7286faac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5a207d19eac354d649c3f0e2cce070017c78125e":["d77dafd89756a5161d244985903e3487ca109182"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0b457e7ac6faeb9e91a9dd5faaf0e2c7286faac":["b470f36a9372c97283360b1304eacbde22df6c0d"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"2e9eb36d1b08cda71a07969b1cf73ab7de427d98":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b0b457e7ac6faeb9e91a9dd5faaf0e2c7286faac","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["2e9eb36d1b08cda71a07969b1cf73ab7de427d98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}