{"path":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#explain(LeafReaderContext,int).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#explain(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      PayloadTermSpanScorer scorer = (PayloadTermSpanScorer) scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.sloppyFreq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          // now the payloads part\n          // QUESTION: Is there a way to avoid this skipTo call? We need to know\n          // whether to load the payload or not\n          // GSI: I suppose we could toString the payload, but I don't think that\n          // would be a good idea\n          String field = ((SpanQuery)getQuery()).getField();\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          payloadExpl.setValue(scorer.getPayloadScore());\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          if (includeSpanScore) {\n            result.addDetail(expl);\n            result.addDetail(payloadExpl);\n            result.setValue(expl.getValue() * payloadExpl.getValue());\n            result.setDescription(\"btq, product of:\");\n          } else {\n            result.addDetail(payloadExpl);\n            result.setValue(payloadExpl.getValue());\n            result.setDescription(\"btq(includeSpanScore=false), result of:\");\n          }\n          result.setMatch(true); // LUCENE-1303\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      PayloadTermSpanScorer scorer = (PayloadTermSpanScorer) scorer(context, context.reader().getLiveDocs(), true);\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.sloppyFreq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          // now the payloads part\n          // QUESTION: Is there a way to avoid this skipTo call? We need to know\n          // whether to load the payload or not\n          // GSI: I suppose we could toString the payload, but I don't think that\n          // would be a good idea\n          String field = ((SpanQuery)getQuery()).getField();\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          payloadExpl.setValue(scorer.getPayloadScore());\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          if (includeSpanScore) {\n            result.addDetail(expl);\n            result.addDetail(payloadExpl);\n            result.setValue(expl.getValue() * payloadExpl.getValue());\n            result.setDescription(\"btq, product of:\");\n          } else {\n            result.addDetail(payloadExpl);\n            result.setValue(payloadExpl.getValue());\n            result.setDescription(\"btq(includeSpanScore=false), result of:\");\n          }\n          result.setMatch(true); // LUCENE-1303\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      PayloadTermSpanScorer scorer = (PayloadTermSpanScorer) scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.sloppyFreq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          // now the payloads part\n          // QUESTION: Is there a way to avoid this skipTo call? We need to know\n          // whether to load the payload or not\n          // GSI: I suppose we could toString the payload, but I don't think that\n          // would be a good idea\n          String field = ((SpanQuery)getQuery()).getField();\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          payloadExpl.setValue(scorer.getPayloadScore());\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          if (includeSpanScore) {\n            result.addDetail(expl);\n            result.addDetail(payloadExpl);\n            result.setValue(expl.getValue() * payloadExpl.getValue());\n            result.setDescription(\"btq, product of:\");\n          } else {\n            result.addDetail(payloadExpl);\n            result.setValue(payloadExpl.getValue());\n            result.setDescription(\"btq(includeSpanScore=false), result of:\");\n          }\n          result.setMatch(true); // LUCENE-1303\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      PayloadTermSpanScorer scorer = (PayloadTermSpanScorer) scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.sloppyFreq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          // now the payloads part\n          // QUESTION: Is there a way to avoid this skipTo call? We need to know\n          // whether to load the payload or not\n          // GSI: I suppose we could toString the payload, but I don't think that\n          // would be a good idea\n          String field = ((SpanQuery)getQuery()).getField();\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          payloadExpl.setValue(scorer.getPayloadScore());\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          if (includeSpanScore) {\n            result.addDetail(expl);\n            result.addDetail(payloadExpl);\n            result.setValue(expl.getValue() * payloadExpl.getValue());\n            result.setDescription(\"btq, product of:\");\n          } else {\n            result.addDetail(payloadExpl);\n            result.setValue(payloadExpl.getValue());\n            result.setDescription(\"btq(includeSpanScore=false), result of:\");\n          }\n          result.setMatch(true); // LUCENE-1303\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      PayloadTermSpanScorer scorer = (PayloadTermSpanScorer) scorer(context, context.reader().getLiveDocs(), true);\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.sloppyFreq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          // now the payloads part\n          // QUESTION: Is there a way to avoid this skipTo call? We need to know\n          // whether to load the payload or not\n          // GSI: I suppose we could toString the payload, but I don't think that\n          // would be a good idea\n          String field = ((SpanQuery)getQuery()).getField();\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          payloadExpl.setValue(scorer.getPayloadScore());\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          if (includeSpanScore) {\n            result.addDetail(expl);\n            result.addDetail(payloadExpl);\n            result.setValue(expl.getValue() * payloadExpl.getValue());\n            result.setDescription(\"btq, product of:\");\n          } else {\n            result.addDetail(payloadExpl);\n            result.setValue(payloadExpl.getValue());\n            result.setDescription(\"btq(includeSpanScore=false), result of:\");\n          }\n          result.setMatch(true); // LUCENE-1303\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      PayloadTermSpanScorer scorer = scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.sloppyFreq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          // now the payloads part\n          // QUESTION: Is there a way to avoid this skipTo call? We need to know\n          // whether to load the payload or not\n          // GSI: I suppose we could toString the payload, but I don't think that\n          // would be a good idea\n          String field = ((SpanQuery)getQuery()).getField();\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          payloadExpl.setValue(scorer.getPayloadScore());\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          if (includeSpanScore) {\n            result.addDetail(expl);\n            result.addDetail(payloadExpl);\n            result.setValue(expl.getValue() * payloadExpl.getValue());\n            result.setDescription(\"btq, product of:\");\n          } else {\n            result.addDetail(payloadExpl);\n            result.setValue(payloadExpl.getValue());\n            result.setDescription(\"btq(includeSpanScore=false), result of:\");\n          }\n          result.setMatch(true); // LUCENE-1303\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      PayloadTermSpanScorer scorer = (PayloadTermSpanScorer) scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.sloppyFreq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          // now the payloads part\n          // QUESTION: Is there a way to avoid this skipTo call? We need to know\n          // whether to load the payload or not\n          // GSI: I suppose we could toString the payload, but I don't think that\n          // would be a good idea\n          String field = ((SpanQuery)getQuery()).getField();\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          payloadExpl.setValue(scorer.getPayloadScore());\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          if (includeSpanScore) {\n            result.addDetail(expl);\n            result.addDetail(payloadExpl);\n            result.setValue(expl.getValue() * payloadExpl.getValue());\n            result.setDescription(\"btq, product of:\");\n          } else {\n            result.addDetail(payloadExpl);\n            result.setValue(payloadExpl.getValue());\n            result.setDescription(\"btq(includeSpanScore=false), result of:\");\n          }\n          result.setMatch(true); // LUCENE-1303\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      PayloadTermSpanScorer scorer = scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.sloppyFreq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          // now the payloads part\n          // QUESTION: Is there a way to avoid this skipTo call? We need to know\n          // whether to load the payload or not\n          // GSI: I suppose we could toString the payload, but I don't think that\n          // would be a good idea\n          String field = ((SpanQuery)getQuery()).getField();\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          payloadExpl.setValue(scorer.getPayloadScore());\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          if (includeSpanScore) {\n            result.addDetail(expl);\n            result.addDetail(payloadExpl);\n            result.setValue(expl.getValue() * payloadExpl.getValue());\n            result.setDescription(\"btq, product of:\");\n          } else {\n            result.addDetail(payloadExpl);\n            result.setValue(payloadExpl.getValue());\n            result.setDescription(\"btq(includeSpanScore=false), result of:\");\n          }\n          result.setMatch(true); // LUCENE-1303\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      PayloadTermSpanScorer scorer = (PayloadTermSpanScorer) scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.sloppyFreq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          // now the payloads part\n          // QUESTION: Is there a way to avoid this skipTo call? We need to know\n          // whether to load the payload or not\n          // GSI: I suppose we could toString the payload, but I don't think that\n          // would be a good idea\n          String field = ((SpanQuery)getQuery()).getField();\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          payloadExpl.setValue(scorer.getPayloadScore());\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          if (includeSpanScore) {\n            result.addDetail(expl);\n            result.addDetail(payloadExpl);\n            result.setValue(expl.getValue() * payloadExpl.getValue());\n            result.setDescription(\"btq, product of:\");\n          } else {\n            result.addDetail(payloadExpl);\n            result.setValue(payloadExpl.getValue());\n            result.setDescription(\"btq(includeSpanScore=false), result of:\");\n          }\n          result.setMatch(true); // LUCENE-1303\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","date":1429620941,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      PayloadTermSpanScorer scorer = scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.sloppyFreq();\n          Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          Explanation expl = Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n          // now the payloads part\n          // QUESTION: Is there a way to avoid this skipTo call? We need to know\n          // whether to load the payload or not\n          // GSI: I suppose we could toString the payload, but I don't think that\n          // would be a good idea\n          String field = ((SpanQuery)getQuery()).getField();\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          if (includeSpanScore) {\n            return Explanation.match(\n                expl.getValue() * payloadExpl.getValue(),\n                \"btq, product of:\", expl, payloadExpl);\n          } else {\n            return Explanation.match(payloadExpl.getValue(), \"btq(includeSpanScore=false), result of:\", payloadExpl);\n          }\n        }\n      }\n      \n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      PayloadTermSpanScorer scorer = scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.sloppyFreq();\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation expl = new Explanation();\n          expl.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\");\n          Explanation scoreExplanation = docScorer.explain(doc, new Explanation(freq, \"phraseFreq=\" + freq));\n          expl.addDetail(scoreExplanation);\n          expl.setValue(scoreExplanation.getValue());\n          // now the payloads part\n          // QUESTION: Is there a way to avoid this skipTo call? We need to know\n          // whether to load the payload or not\n          // GSI: I suppose we could toString the payload, but I don't think that\n          // would be a good idea\n          String field = ((SpanQuery)getQuery()).getField();\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          payloadExpl.setValue(scorer.getPayloadScore());\n          // combined\n          ComplexExplanation result = new ComplexExplanation();\n          if (includeSpanScore) {\n            result.addDetail(expl);\n            result.addDetail(payloadExpl);\n            result.setValue(expl.getValue() * payloadExpl.getValue());\n            result.setDescription(\"btq, product of:\");\n          } else {\n            result.addDetail(payloadExpl);\n            result.setValue(payloadExpl.getValue());\n            result.setDescription(\"btq(includeSpanScore=false), result of:\");\n          }\n          result.setMatch(true); // LUCENE-1303\n          return result;\n        }\n      }\n      \n      return new ComplexExplanation(false, 0.0f, \"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c257cd8ddb1ed5632a36c7488614a2ee21705d24","date":1432128550,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      PayloadTermSpanScorer scorer = scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.sloppyFreq();\n          Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n          SimScorer docScorer = similarity.simScorer(context);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          Explanation expl = Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n          // now the payloads part\n          // QUESTION: Is there a way to avoid this skipTo call? We need to know\n          // whether to load the payload or not\n          // GSI: I suppose we could toString the payload, but I don't think that\n          // would be a good idea\n          String field = ((SpanQuery)getQuery()).getField();\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          if (includeSpanScore) {\n            return Explanation.match(\n                expl.getValue() * payloadExpl.getValue(),\n                \"btq, product of:\", expl, payloadExpl);\n          } else {\n            return Explanation.match(payloadExpl.getValue(), \"btq(includeSpanScore=false), result of:\", payloadExpl);\n          }\n        }\n      }\n      \n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      PayloadTermSpanScorer scorer = scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.sloppyFreq();\n          Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n          SimScorer docScorer = similarity.simScorer(stats, context);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          Explanation expl = Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n          // now the payloads part\n          // QUESTION: Is there a way to avoid this skipTo call? We need to know\n          // whether to load the payload or not\n          // GSI: I suppose we could toString the payload, but I don't think that\n          // would be a good idea\n          String field = ((SpanQuery)getQuery()).getField();\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          if (includeSpanScore) {\n            return Explanation.match(\n                expl.getValue() * payloadExpl.getValue(),\n                \"btq, product of:\", expl, payloadExpl);\n          } else {\n            return Explanation.match(payloadExpl.getValue(), \"btq(includeSpanScore=false), result of:\", payloadExpl);\n          }\n        }\n      }\n      \n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4b6308fa66dc96de36abfae5d3e7c92c805e227","date":1432916588,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      PayloadTermSpanScorer scorer = scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.sloppyFreq();\n          Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n          SimScorer docScorer = similarity.simScorer(simWeight, context);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          Explanation expl = Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n          // now the payloads part\n          // QUESTION: Is there a way to avoid this skipTo call? We need to know\n          // whether to load the payload or not\n          // GSI: I suppose we could toString the payload, but I don't think that\n          // would be a good idea\n          String field = ((SpanQuery)getQuery()).getField();\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          if (includeSpanScore) {\n            return Explanation.match(\n                expl.getValue() * payloadExpl.getValue(),\n                \"btq, product of:\", expl, payloadExpl);\n          } else {\n            return Explanation.match(payloadExpl.getValue(), \"btq(includeSpanScore=false), result of:\", payloadExpl);\n          }\n        }\n      }\n      \n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      PayloadTermSpanScorer scorer = scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.sloppyFreq();\n          Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n          SimScorer docScorer = similarity.simScorer(context);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          Explanation expl = Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n          // now the payloads part\n          // QUESTION: Is there a way to avoid this skipTo call? We need to know\n          // whether to load the payload or not\n          // GSI: I suppose we could toString the payload, but I don't think that\n          // would be a good idea\n          String field = ((SpanQuery)getQuery()).getField();\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          if (includeSpanScore) {\n            return Explanation.match(\n                expl.getValue() * payloadExpl.getValue(),\n                \"btq, product of:\", expl, payloadExpl);\n          } else {\n            return Explanation.match(payloadExpl.getValue(), \"btq(includeSpanScore=false), result of:\", payloadExpl);\n          }\n        }\n      }\n      \n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      PayloadTermSpanScorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.sloppyFreq();\n          Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n          SimScorer docScorer = similarity.simScorer(simWeight, context);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          Explanation expl = Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n          // now the payloads part\n          // QUESTION: Is there a way to avoid this skipTo call? We need to know\n          // whether to load the payload or not\n          // GSI: I suppose we could toString the payload, but I don't think that\n          // would be a good idea\n          String field = ((SpanQuery)getQuery()).getField();\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          if (includeSpanScore) {\n            return Explanation.match(\n                expl.getValue() * payloadExpl.getValue(),\n                \"btq, product of:\", expl, payloadExpl);\n          } else {\n            return Explanation.match(payloadExpl.getValue(), \"btq(includeSpanScore=false), result of:\", payloadExpl);\n          }\n        }\n      }\n      \n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      PayloadTermSpanScorer scorer = scorer(context, context.reader().getLiveDocs());\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.sloppyFreq();\n          Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n          SimScorer docScorer = similarity.simScorer(simWeight, context);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          Explanation expl = Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n          // now the payloads part\n          // QUESTION: Is there a way to avoid this skipTo call? We need to know\n          // whether to load the payload or not\n          // GSI: I suppose we could toString the payload, but I don't think that\n          // would be a good idea\n          String field = ((SpanQuery)getQuery()).getField();\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          if (includeSpanScore) {\n            return Explanation.match(\n                expl.getValue() * payloadExpl.getValue(),\n                \"btq, product of:\", expl, payloadExpl);\n          } else {\n            return Explanation.match(payloadExpl.getValue(), \"btq(includeSpanScore=false), result of:\", payloadExpl);\n          }\n        }\n      }\n      \n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73561ba4c64c1aea2ba4b3873f80b9b2a2946816","date":1438618499,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadTermQuery.PayloadTermWeight#explain(LeafReaderContext,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      PayloadTermSpanScorer scorer = scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.sloppyFreq();\n          Explanation freqExplanation = Explanation.match(freq, \"phraseFreq=\" + freq);\n          SimScorer docScorer = similarity.simScorer(simWeight, context);\n          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);\n          Explanation expl = Explanation.match(\n              scoreExplanation.getValue(),\n              \"weight(\"+getQuery()+\" in \"+doc+\") [\" + similarity.getClass().getSimpleName() + \"], result of:\",\n              scoreExplanation);\n          // now the payloads part\n          // QUESTION: Is there a way to avoid this skipTo call? We need to know\n          // whether to load the payload or not\n          // GSI: I suppose we could toString the payload, but I don't think that\n          // would be a good idea\n          String field = ((SpanQuery)getQuery()).getField();\n          Explanation payloadExpl = function.explain(doc, field, scorer.payloadsSeen, scorer.payloadScore);\n          // combined\n          if (includeSpanScore) {\n            return Explanation.match(\n                expl.getValue() * payloadExpl.getValue(),\n                \"btq, product of:\", expl, payloadExpl);\n          } else {\n            return Explanation.match(payloadExpl.getValue(), \"btq(includeSpanScore=false), result of:\", payloadExpl);\n          }\n        }\n      }\n      \n      return Explanation.noMatch(\"no matching term\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["d4b6308fa66dc96de36abfae5d3e7c92c805e227"],"73561ba4c64c1aea2ba4b3873f80b9b2a2946816":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["fb17639909a369c1e64866842e5c213440acc17e"],"fab172655716b96f7e42376116235017a922de3a":["fb17639909a369c1e64866842e5c213440acc17e","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73561ba4c64c1aea2ba4b3873f80b9b2a2946816"],"d4b6308fa66dc96de36abfae5d3e7c92c805e227":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["73561ba4c64c1aea2ba4b3873f80b9b2a2946816"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"73561ba4c64c1aea2ba4b3873f80b9b2a2946816":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["d4b6308fa66dc96de36abfae5d3e7c92c805e227"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"d4b6308fa66dc96de36abfae5d3e7c92c805e227":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}