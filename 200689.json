{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionQueryExplanations#testMapFunction().mjava","commits":[{"id":"a924dfeede13519417b3bb2ccda42205b3751165","date":1447189983,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionQueryExplanations#testMapFunction().mjava","pathOld":"/dev/null","sourceNew":"  public void testMapFunction() throws Exception {\n    ValueSource rff = new RangeMapFloatFunction(new ConstValueSource(3), 0, 1, 2, new Float(4));\n    Query q = new FunctionQuery(rff);\n    qtest(q, new int[] { 0,1,2,3 });\n    assertEquals(\"map(const(3.0),0.0,1.0,const(2.0),const(4.0))\", rff.description());\n    assertEquals(\"map(const(3.0),min=0.0,max=1.0,target=const(2.0),defaultVal=const(4.0))\", rff.getValues(null, null).toString(123));\n\n    // DefaultValue is null -> defaults to source value\n    rff = new RangeMapFloatFunction(new ConstValueSource(3), 0, 1, 2, null);\n    assertEquals(\"map(const(3.0),0.0,1.0,const(2.0),null)\", rff.description());\n    assertEquals(\"map(const(3.0),min=0.0,max=1.0,target=const(2.0),defaultVal=null)\", rff.getValues(null, null).toString(123));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionQueryExplanations#testMapFunction().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionQueryExplanations#testMapFunction().mjava","sourceNew":"  public void testMapFunction() throws Exception {\n    ValueSource rff = new RangeMapFloatFunction(new ConstValueSource(3), 0, 1, 2, 4f);\n    Query q = new FunctionQuery(rff);\n    qtest(q, new int[] { 0,1,2,3 });\n    assertEquals(\"map(const(3.0),0.0,1.0,const(2.0),const(4.0))\", rff.description());\n    assertEquals(\"map(const(3.0),min=0.0,max=1.0,target=const(2.0),defaultVal=const(4.0))\", rff.getValues(null, null).toString(123));\n\n    // DefaultValue is null -> defaults to source value\n    rff = new RangeMapFloatFunction(new ConstValueSource(3), 0, 1, 2, null);\n    assertEquals(\"map(const(3.0),0.0,1.0,const(2.0),null)\", rff.description());\n    assertEquals(\"map(const(3.0),min=0.0,max=1.0,target=const(2.0),defaultVal=null)\", rff.getValues(null, null).toString(123));\n  }\n\n","sourceOld":"  public void testMapFunction() throws Exception {\n    ValueSource rff = new RangeMapFloatFunction(new ConstValueSource(3), 0, 1, 2, new Float(4));\n    Query q = new FunctionQuery(rff);\n    qtest(q, new int[] { 0,1,2,3 });\n    assertEquals(\"map(const(3.0),0.0,1.0,const(2.0),const(4.0))\", rff.description());\n    assertEquals(\"map(const(3.0),min=0.0,max=1.0,target=const(2.0),defaultVal=const(4.0))\", rff.getValues(null, null).toString(123));\n\n    // DefaultValue is null -> defaults to source value\n    rff = new RangeMapFloatFunction(new ConstValueSource(3), 0, 1, 2, null);\n    assertEquals(\"map(const(3.0),0.0,1.0,const(2.0),null)\", rff.description());\n    assertEquals(\"map(const(3.0),min=0.0,max=1.0,target=const(2.0),defaultVal=null)\", rff.getValues(null, null).toString(123));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionQueryExplanations#testMapFunction().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionQueryExplanations#testMapFunction().mjava","sourceNew":"  public void testMapFunction() throws Exception {\n    ValueSource rff = new RangeMapFloatFunction(new ConstValueSource(3), 0, 1, 2, 4f);\n    Query q = new FunctionQuery(rff);\n    qtest(q, new int[] { 0,1,2,3 });\n    assertEquals(\"map(const(3.0),0.0,1.0,const(2.0),const(4.0))\", rff.description());\n    assertEquals(\"map(const(3.0),min=0.0,max=1.0,target=const(2.0),defaultVal=const(4.0))\", rff.getValues(null, null).toString(123));\n\n    // DefaultValue is null -> defaults to source value\n    rff = new RangeMapFloatFunction(new ConstValueSource(3), 0, 1, 2, null);\n    assertEquals(\"map(const(3.0),0.0,1.0,const(2.0),null)\", rff.description());\n    assertEquals(\"map(const(3.0),min=0.0,max=1.0,target=const(2.0),defaultVal=null)\", rff.getValues(null, null).toString(123));\n  }\n\n","sourceOld":"  public void testMapFunction() throws Exception {\n    ValueSource rff = new RangeMapFloatFunction(new ConstValueSource(3), 0, 1, 2, new Float(4));\n    Query q = new FunctionQuery(rff);\n    qtest(q, new int[] { 0,1,2,3 });\n    assertEquals(\"map(const(3.0),0.0,1.0,const(2.0),const(4.0))\", rff.description());\n    assertEquals(\"map(const(3.0),min=0.0,max=1.0,target=const(2.0),defaultVal=const(4.0))\", rff.getValues(null, null).toString(123));\n\n    // DefaultValue is null -> defaults to source value\n    rff = new RangeMapFloatFunction(new ConstValueSource(3), 0, 1, 2, null);\n    assertEquals(\"map(const(3.0),0.0,1.0,const(2.0),null)\", rff.description());\n    assertEquals(\"map(const(3.0),min=0.0,max=1.0,target=const(2.0),defaultVal=null)\", rff.getValues(null, null).toString(123));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionQueryExplanations#testMapFunction().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionQueryExplanations#testMapFunction().mjava","sourceNew":"  public void testMapFunction() throws Exception {\n    ValueSource rff = new RangeMapFloatFunction(new ConstValueSource(3), 0, 1, 2, 4f);\n    Query q = new FunctionQuery(rff);\n    qtest(q, new int[] { 0,1,2,3 });\n    assertEquals(\"map(const(3.0),0.0,1.0,const(2.0),const(4.0))\", rff.description());\n    assertEquals(\"map(const(3.0),min=0.0,max=1.0,target=const(2.0),defaultVal=const(4.0))\", rff.getValues(null, null).toString(123));\n\n    // DefaultValue is null -> defaults to source value\n    rff = new RangeMapFloatFunction(new ConstValueSource(3), 0, 1, 2, null);\n    assertEquals(\"map(const(3.0),0.0,1.0,const(2.0),null)\", rff.description());\n    assertEquals(\"map(const(3.0),min=0.0,max=1.0,target=const(2.0),defaultVal=null)\", rff.getValues(null, null).toString(123));\n  }\n\n","sourceOld":"  public void testMapFunction() throws Exception {\n    ValueSource rff = new RangeMapFloatFunction(new ConstValueSource(3), 0, 1, 2, new Float(4));\n    Query q = new FunctionQuery(rff);\n    qtest(q, new int[] { 0,1,2,3 });\n    assertEquals(\"map(const(3.0),0.0,1.0,const(2.0),const(4.0))\", rff.description());\n    assertEquals(\"map(const(3.0),min=0.0,max=1.0,target=const(2.0),defaultVal=const(4.0))\", rff.getValues(null, null).toString(123));\n\n    // DefaultValue is null -> defaults to source value\n    rff = new RangeMapFloatFunction(new ConstValueSource(3), 0, 1, 2, null);\n    assertEquals(\"map(const(3.0),0.0,1.0,const(2.0),null)\", rff.description());\n    assertEquals(\"map(const(3.0),min=0.0,max=1.0,target=const(2.0),defaultVal=null)\", rff.getValues(null, null).toString(123));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["a924dfeede13519417b3bb2ccda42205b3751165"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a924dfeede13519417b3bb2ccda42205b3751165","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a924dfeede13519417b3bb2ccda42205b3751165":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["a924dfeede13519417b3bb2ccda42205b3751165","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a924dfeede13519417b3bb2ccda42205b3751165"],"a924dfeede13519417b3bb2ccda42205b3751165":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}