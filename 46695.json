{"path":"src/java/org/apache/lucene/store/IndexInput#clone().mjava","commits":[{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/IndexInput#clone().mjava","pathOld":"src/java/org/apache/lucene/store/InputStream#clone().mjava","sourceNew":"  /** Returns a clone of this stream.\n   *\n   * <p>Clones of a stream access the same data, and are positioned at the same\n   * point as the stream they were cloned from.\n   *\n   * <p>Expert: Subclasses must ensure that clones may be positioned at\n   * different points in the input from each other and from the stream they\n   * were cloned from.\n   */\n  public Object clone() {\n    IndexInput clone = null;\n    try {\n      clone = (IndexInput)super.clone();\n    } catch (CloneNotSupportedException e) {}\n\n    clone.chars = null;\n\n    return clone;\n  }\n\n","sourceOld":"  /** Returns a clone of this stream.\n   *\n   * <p>Clones of a stream access the same data, and are positioned at the same\n   * point as the stream they were cloned from.\n   *\n   * <p>Expert: Subclasses must ensure that clones may be positioned at\n   * different points in the input from each other and from the stream they\n   * were cloned from.\n   */\n  public Object clone() {\n    InputStream clone = null;\n    try {\n      clone = (InputStream)super.clone();\n    } catch (CloneNotSupportedException e) {}\n\n    if (buffer != null) {\n      clone.buffer = new byte[BUFFER_SIZE];\n      System.arraycopy(buffer, 0, clone.buffer, 0, bufferLength);\n    }\n\n    clone.chars = null;\n\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4","date":1206538765,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/IndexInput#clone().mjava","pathOld":"src/java/org/apache/lucene/store/IndexInput#clone().mjava","sourceNew":"  /** Returns a clone of this stream.\n   *\n   * <p>Clones of a stream access the same data, and are positioned at the same\n   * point as the stream they were cloned from.\n   *\n   * <p>Expert: Subclasses must ensure that clones may be positioned at\n   * different points in the input from each other and from the stream they\n   * were cloned from.\n   */\n  public Object clone() {\n    IndexInput clone = null;\n    try {\n      clone = (IndexInput)super.clone();\n    } catch (CloneNotSupportedException e) {}\n\n    clone.bytes = null;\n    clone.chars = null;\n\n    return clone;\n  }\n\n","sourceOld":"  /** Returns a clone of this stream.\n   *\n   * <p>Clones of a stream access the same data, and are positioned at the same\n   * point as the stream they were cloned from.\n   *\n   * <p>Expert: Subclasses must ensure that clones may be positioned at\n   * different points in the input from each other and from the stream they\n   * were cloned from.\n   */\n  public Object clone() {\n    IndexInput clone = null;\n    try {\n      clone = (IndexInput)super.clone();\n    } catch (CloneNotSupportedException e) {}\n\n    clone.chars = null;\n\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/IndexInput#clone().mjava","pathOld":"src/java/org/apache/lucene/store/IndexInput#clone().mjava","sourceNew":"  /** Returns a clone of this stream.\n   *\n   * <p>Clones of a stream access the same data, and are positioned at the same\n   * point as the stream they were cloned from.\n   *\n   * <p>Expert: Subclasses must ensure that clones may be positioned at\n   * different points in the input from each other and from the stream they\n   * were cloned from.\n   */\n  @Override\n  public Object clone() {\n    IndexInput clone = null;\n    try {\n      clone = (IndexInput)super.clone();\n    } catch (CloneNotSupportedException e) {}\n\n    clone.bytes = null;\n    clone.chars = null;\n\n    return clone;\n  }\n\n","sourceOld":"  /** Returns a clone of this stream.\n   *\n   * <p>Clones of a stream access the same data, and are positioned at the same\n   * point as the stream they were cloned from.\n   *\n   * <p>Expert: Subclasses must ensure that clones may be positioned at\n   * different points in the input from each other and from the stream they\n   * were cloned from.\n   */\n  public Object clone() {\n    IndexInput clone = null;\n    try {\n      clone = (IndexInput)super.clone();\n    } catch (CloneNotSupportedException e) {}\n\n    clone.bytes = null;\n    clone.chars = null;\n\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/IndexInput#clone().mjava","pathOld":"src/java/org/apache/lucene/store/IndexInput#clone().mjava","sourceNew":"  /** Returns a clone of this stream.\n   *\n   * <p>Clones of a stream access the same data, and are positioned at the same\n   * point as the stream they were cloned from.\n   *\n   * <p>Expert: Subclasses must ensure that clones may be positioned at\n   * different points in the input from each other and from the stream they\n   * were cloned from.\n   */\n  @Override\n  public Object clone() {\n    IndexInput clone = null;\n    try {\n      clone = (IndexInput)super.clone();\n    } catch (CloneNotSupportedException e) {}\n\n    clone.bytes = null;\n    clone.chars = null;\n\n    return clone;\n  }\n\n","sourceOld":"  /** Returns a clone of this stream.\n   *\n   * <p>Clones of a stream access the same data, and are positioned at the same\n   * point as the stream they were cloned from.\n   *\n   * <p>Expert: Subclasses must ensure that clones may be positioned at\n   * different points in the input from each other and from the stream they\n   * were cloned from.\n   */\n  @Override\n  public Object clone() {\n    IndexInput clone = null;\n    try {\n      clone = (IndexInput)super.clone();\n    } catch (CloneNotSupportedException e) {}\n\n    clone.bytes = null;\n    clone.chars = null;\n\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e971ba25509e21a130fef61f0687be0446ca27a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["e971ba25509e21a130fef61f0687be0446ca27a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"e971ba25509e21a130fef61f0687be0446ca27a0":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e971ba25509e21a130fef61f0687be0446ca27a0"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}