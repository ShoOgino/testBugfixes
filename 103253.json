{"path":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","sourceNew":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random(), q1, s, rarely());\n    QueryUtils.check(random(), q2, s, rarely());\n    QueryUtils.check(random(), q3, s, rarely());\n    QueryUtils.check(random(), q4, s, rarely());\n    QueryUtils.check(random(), q5, s, rarely());\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, TEST_SCORE_TOLERANCE_DELTA);\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","sourceOld":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random(), q1, s, rarely());\n    QueryUtils.check(random(), q2, s, rarely());\n    QueryUtils.check(random(), q3, s, rarely());\n    QueryUtils.check(random(), q4, s, rarely());\n    QueryUtils.check(random(), q5, s, rarely());\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, TEST_SCORE_TOLERANCE_DELTA);\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daf2bbd6052a018ef03339fc26bfedfba938ef54","date":1367290126,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","sourceNew":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random(), q1, s, rarely());\n    QueryUtils.check(random(), q2, s, rarely());\n    QueryUtils.check(random(), q3, s, rarely());\n    QueryUtils.check(random(), q4, s, rarely());\n    QueryUtils.check(random(), q5, s, rarely());\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, CheckHits.explainToleranceDelta(boost * score1, score2));\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, CheckHits.explainToleranceDelta(boost * fieldScore * score1, score3));\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, CheckHits.explainToleranceDelta(boost * (fieldScore + score1), score4));\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, CheckHits.explainToleranceDelta(boost * fieldScore * (score1 + fieldScore), score5));\n    }\n  }\n\n","sourceOld":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random(), q1, s, rarely());\n    QueryUtils.check(random(), q2, s, rarely());\n    QueryUtils.check(random(), q3, s, rarely());\n    QueryUtils.check(random(), q4, s, rarely());\n    QueryUtils.check(random(), q5, s, rarely());\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, TEST_SCORE_TOLERANCE_DELTA);\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, TEST_SCORE_TOLERANCE_DELTA);\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","sourceNew":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random(), q1, s, rarely());\n    QueryUtils.check(random(), q2, s, rarely());\n    QueryUtils.check(random(), q3, s, rarely());\n    QueryUtils.check(random(), q4, s, rarely());\n    QueryUtils.check(random(), q5, s, rarely());\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, CheckHits.explainToleranceDelta(boost * score1, score2));\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, CheckHits.explainToleranceDelta(boost * fieldScore * score1, score3));\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, CheckHits.explainToleranceDelta(boost * (fieldScore + score1), score4));\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, CheckHits.explainToleranceDelta(boost * fieldScore * (score1 + fieldScore), score5));\n    }\n  }\n\n","sourceOld":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random(), q1, s, rarely());\n    QueryUtils.check(random(), q2, s, rarely());\n    QueryUtils.check(random(), q3, s, rarely());\n    QueryUtils.check(random(), q4, s, rarely());\n    QueryUtils.check(random(), q5, s, rarely());\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, CheckHits.explainToleranceDelta(boost * score1, score2));\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, CheckHits.explainToleranceDelta(boost * fieldScore * score1, score3));\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, CheckHits.explainToleranceDelta(boost * (fieldScore + score1), score4));\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, CheckHits.explainToleranceDelta(boost * fieldScore * (score1 + fieldScore), score5));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","sourceNew":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random(), q1, s, rarely());\n    QueryUtils.check(random(), q2, s, rarely());\n    QueryUtils.check(random(), q3, s, rarely());\n    QueryUtils.check(random(), q4, s, rarely());\n    QueryUtils.check(random(), q5, s, rarely());\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, CheckHits.explainToleranceDelta(boost * score1, score2));\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, CheckHits.explainToleranceDelta(boost * fieldScore * score1, score3));\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, CheckHits.explainToleranceDelta(boost * (fieldScore + score1), score4));\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, CheckHits.explainToleranceDelta(boost * fieldScore * (score1 + fieldScore), score5));\n    }\n  }\n\n","sourceOld":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random(), q1, s, rarely());\n    QueryUtils.check(random(), q2, s, rarely());\n    QueryUtils.check(random(), q3, s, rarely());\n    QueryUtils.check(random(), q4, s, rarely());\n    QueryUtils.check(random(), q5, s, rarely());\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, CheckHits.explainToleranceDelta(boost * score1, score2));\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, CheckHits.explainToleranceDelta(boost * fieldScore * score1, score3));\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, CheckHits.explainToleranceDelta(boost * (fieldScore + score1), score4));\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, CheckHits.explainToleranceDelta(boost * fieldScore * (score1 + fieldScore), score5));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","sourceNew":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random(), q1, s, rarely());\n    QueryUtils.check(random(), q2, s, rarely());\n    QueryUtils.check(random(), q3, s, rarely());\n    QueryUtils.check(random(), q4, s, rarely());\n    QueryUtils.check(random(), q5, s, rarely());\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, Math.scalb(score2, -15));\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, Math.scalb(score3, -15));\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, Math.scalb(score4, -15));\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, Math.scalb(score5, -15));\n    }\n  }\n\n","sourceOld":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random(), q1, s, rarely());\n    QueryUtils.check(random(), q2, s, rarely());\n    QueryUtils.check(random(), q3, s, rarely());\n    QueryUtils.check(random(), q4, s, rarely());\n    QueryUtils.check(random(), q5, s, rarely());\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, CheckHits.explainToleranceDelta(boost * score1, score2));\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, CheckHits.explainToleranceDelta(boost * fieldScore * score1, score3));\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, CheckHits.explainToleranceDelta(boost * (fieldScore + score1), score4));\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, CheckHits.explainToleranceDelta(boost * fieldScore * (score1 + fieldScore), score5));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","sourceNew":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random(), q1, s, rarely());\n    QueryUtils.check(random(), q2, s, rarely());\n    QueryUtils.check(random(), q3, s, rarely());\n    QueryUtils.check(random(), q4, s, rarely());\n    QueryUtils.check(random(), q5, s, rarely());\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, Math.scalb(score2, -15));\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, Math.scalb(score3, -15));\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, Math.scalb(score4, -15));\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, Math.scalb(score5, -15));\n    }\n  }\n\n","sourceOld":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random(), q1, s, rarely());\n    QueryUtils.check(random(), q2, s, rarely());\n    QueryUtils.check(random(), q3, s, rarely());\n    QueryUtils.check(random(), q4, s, rarely());\n    QueryUtils.check(random(), q5, s, rarely());\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, CheckHits.explainToleranceDelta(boost * score1, score2));\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, CheckHits.explainToleranceDelta(boost * fieldScore * score1, score3));\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, CheckHits.explainToleranceDelta(boost * (fieldScore + score1), score4));\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, CheckHits.explainToleranceDelta(boost * fieldScore * (score1 + fieldScore), score5));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a82662cae660e76ded4de1e9b451633e523d83e1","date":1513619223,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#verifyResults(float,IndexSearcher,Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Map[Integer,Float],Query,Query,Query,Query,Query).mjava","sourceNew":null,"sourceOld":"  // verify results are as expected.\n  private void verifyResults(float boost, IndexSearcher s, \n      Map<Integer,Float> h1, Map<Integer,Float> h2customNeutral, Map<Integer,Float> h3CustomMul, Map<Integer,Float> h4CustomAdd, Map<Integer,Float> h5CustomMulAdd,\n      Query q1, Query q2, Query q3, Query q4, Query q5) throws Exception {\n    \n    // verify numbers of matches\n    log(\"#hits = \"+h1.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h2customNeutral.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h3CustomMul.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h4CustomAdd.size());\n    assertEquals(\"queries should have same #hits\",h1.size(),h5CustomMulAdd.size());\n\n    QueryUtils.check(random(), q1, s, rarely());\n    QueryUtils.check(random(), q2, s, rarely());\n    QueryUtils.check(random(), q3, s, rarely());\n    QueryUtils.check(random(), q4, s, rarely());\n    QueryUtils.check(random(), q5, s, rarely());\n\n    // verify scores ratios\n    for (final Integer doc : h1.keySet()) {\n\n      log(\"doc = \"+doc);\n\n      float fieldScore = expectedFieldScore(s.getIndexReader().document(doc).get(ID_FIELD));\n      log(\"fieldScore = \" + fieldScore);\n      assertTrue(\"fieldScore should not be 0\", fieldScore > 0);\n\n      float score1 = h1.get(doc);\n      logResult(\"score1=\", s, q1, doc, score1);\n      \n      float score2 = h2customNeutral.get(doc);\n      logResult(\"score2=\", s, q2, doc, score2);\n      assertEquals(\"same score (just boosted) for neutral\", boost * score1, score2, Math.scalb(score2, -15));\n\n      float score3 = h3CustomMul.get(doc);\n      logResult(\"score3=\", s, q3, doc, score3);\n      assertEquals(\"new score for custom mul\", boost * fieldScore * score1, score3, Math.scalb(score3, -15));\n      \n      float score4 = h4CustomAdd.get(doc);\n      logResult(\"score4=\", s, q4, doc, score4);\n      assertEquals(\"new score for custom add\", boost * (fieldScore + score1), score4, Math.scalb(score4, -15));\n      \n      float score5 = h5CustomMulAdd.get(doc);\n      logResult(\"score5=\", s, q5, doc, score5);\n      assertEquals(\"new score for custom mul add\", boost * fieldScore * (score1 + fieldScore), score5, Math.scalb(score5, -15));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["19275ba31e621f6da1b83bf13af75233876fd3d4","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"daf2bbd6052a018ef03339fc26bfedfba938ef54":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a82662cae660e76ded4de1e9b451633e523d83e1":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["daf2bbd6052a018ef03339fc26bfedfba938ef54"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["daf2bbd6052a018ef03339fc26bfedfba938ef54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a82662cae660e76ded4de1e9b451633e523d83e1"]},"commit2Childs":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["a82662cae660e76ded4de1e9b451633e523d83e1"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["daf2bbd6052a018ef03339fc26bfedfba938ef54"],"daf2bbd6052a018ef03339fc26bfedfba938ef54":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a82662cae660e76ded4de1e9b451633e523d83e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c7732a106554be0db3e03ac5211e46f6e0c285b8","1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}