{"path":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Closes reporters specific to this core.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(getRegistryName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Closes reporters specific to this core.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(getRegistryName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","sourceNew":"  /**\n   * Closes reporters specific to this core.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(getRegistryName(), tag);\n  }\n\n","sourceOld":"  /**\n   * Closes reporters specific to this core.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(getRegistryName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","sourceNew":"  /**\n   * Closes reporters specific to this core.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(getRegistryName(), tag);\n    if (getLeaderRegistryName() != null) {\n      metricManager.closeReporters(getLeaderRegistryName(), tag);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes reporters specific to this core.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(getRegistryName(), tag);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","sourceNew":"  /**\n   * Closes reporters specific to this core.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(getRegistryName(), tag);\n    if (getLeaderRegistryName() != null) {\n      metricManager.closeReporters(getLeaderRegistryName(), tag);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes reporters specific to this core.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(getRegistryName(), tag);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efc6fba4d5c899e6b902d46d3ea16ed0a4783f3f","date":1516757942,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","sourceNew":"  /**\n   * Closes reporters specific to this core.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(getRegistryName(), tag);\n    if (getLeaderRegistryName() != null) {\n      metricManager.closeReporters(getLeaderRegistryName(), tag);\n    }\n    MetricRegistry metricRegistry = getRegistry();\n    metricRegistry.getGauges().forEach((k, v) -> {\n      Object val = v.getValue();\n      metricRegistry.remove(k);\n      metricRegistry.register(k, (Gauge)() -> val);\n    });\n  }\n\n","sourceOld":"  /**\n   * Closes reporters specific to this core.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(getRegistryName(), tag);\n    if (getLeaderRegistryName() != null) {\n      metricManager.closeReporters(getLeaderRegistryName(), tag);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d923d43d92fc38da35fc2c46314f9c6c05b5704","date":1517197378,"type":3,"author":"Erick","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","sourceNew":"  /**\n   * Closes reporters specific to this core.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(getRegistryName(), tag);\n    if (getLeaderRegistryName() != null) {\n      metricManager.closeReporters(getLeaderRegistryName(), tag);\n    }\n    MetricRegistry metricRegistry = getRegistry();\n    metricRegistry.getGauges().forEach((k, v) -> {\n      Object val = v.getValue();\n      metricRegistry.remove(k);\n      metricRegistry.register(k, (Gauge)() -> val);\n    });\n  }\n\n","sourceOld":"  /**\n   * Closes reporters specific to this core.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(getRegistryName(), tag);\n    if (getLeaderRegistryName() != null) {\n      metricManager.closeReporters(getLeaderRegistryName(), tag);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6ca670f6c74c9b5f427c24e9a604d750001e1ca","date":1517505253,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","sourceNew":"  /**\n   * Closes reporters specific to this core.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(getRegistryName(), tag);\n    if (getLeaderRegistryName() != null) {\n      metricManager.closeReporters(getLeaderRegistryName(), tag);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes reporters specific to this core.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(getRegistryName(), tag);\n    if (getLeaderRegistryName() != null) {\n      metricManager.closeReporters(getLeaderRegistryName(), tag);\n    }\n    MetricRegistry metricRegistry = getRegistry();\n    metricRegistry.getGauges().forEach((k, v) -> {\n      Object val = v.getValue();\n      metricRegistry.remove(k);\n      metricRegistry.register(k, (Gauge)() -> val);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","sourceNew":"  /**\n   * Closes reporters specific to this core and unregisters gauges with this core's instance tag.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(getRegistryName(), tag);\n    if (getLeaderRegistryName() != null) {\n      metricManager.closeReporters(getLeaderRegistryName(), tag);\n    }\n    metricManager.unregisterGauges(getRegistryName(), tag);\n  }\n\n","sourceOld":"  /**\n   * Closes reporters specific to this core.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(getRegistryName(), tag);\n    if (getLeaderRegistryName() != null) {\n      metricManager.closeReporters(getLeaderRegistryName(), tag);\n    }\n  }\n\n","bugFix":["0265144286422ad99682a00904cc2536b79c8535"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","sourceNew":"  /**\n   * Closes reporters specific to this core and unregisters gauges with this core's instance tag.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(getRegistryName(), tag);\n    if (getLeaderRegistryName() != null) {\n      metricManager.closeReporters(getLeaderRegistryName(), tag);\n    }\n    metricManager.unregisterGauges(getRegistryName(), tag);\n  }\n\n","sourceOld":"  /**\n   * Closes reporters specific to this core.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(getRegistryName(), tag);\n    if (getLeaderRegistryName() != null) {\n      metricManager.closeReporters(getLeaderRegistryName(), tag);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","sourceNew":"  /**\n   * Closes reporters specific to this core and unregisters gauges with this core's instance tag.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(solrMetricsContext.registry, solrMetricsContext.tag);\n    if (getLeaderRegistryName() != null) {\n      metricManager.closeReporters(getLeaderRegistryName(), solrMetricsContext.tag);\n    }\n    metricManager.unregisterGauges(solrMetricsContext.registry, solrMetricsContext.tag);\n  }\n\n","sourceOld":"  /**\n   * Closes reporters specific to this core and unregisters gauges with this core's instance tag.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(getRegistryName(), tag);\n    if (getLeaderRegistryName() != null) {\n      metricManager.closeReporters(getLeaderRegistryName(), tag);\n    }\n    metricManager.unregisterGauges(getRegistryName(), tag);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c2af5a711bd6e2d33e0221ced0f47ac596ed275","date":1572877903,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#close().mjava","sourceNew":"  /**\n   * Closes reporters specific to this core and unregisters gauges with this core's instance tag.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(solrMetricsContext.getRegistryName(), solrMetricsContext.getTag());\n    if (getLeaderRegistryName() != null) {\n      metricManager.closeReporters(getLeaderRegistryName(), solrMetricsContext.getTag());\n    }\n    metricManager.unregisterGauges(solrMetricsContext.getRegistryName(), solrMetricsContext.getTag());\n  }\n\n","sourceOld":"  /**\n   * Closes reporters specific to this core and unregisters gauges with this core's instance tag.\n   */\n  @Override\n  public void close() throws IOException {\n    metricManager.closeReporters(solrMetricsContext.registry, solrMetricsContext.tag);\n    if (getLeaderRegistryName() != null) {\n      metricManager.closeReporters(getLeaderRegistryName(), solrMetricsContext.tag);\n    }\n    metricManager.unregisterGauges(solrMetricsContext.registry, solrMetricsContext.tag);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["a6ca670f6c74c9b5f427c24e9a604d750001e1ca","bfc52860e6d13d034226a760813c59d984c6817a"],"efc6fba4d5c899e6b902d46d3ea16ed0a4783f3f":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6d923d43d92fc38da35fc2c46314f9c6c05b5704":["816521ebaad5add9cb96bb88c577394e2938c40b","efc6fba4d5c899e6b902d46d3ea16ed0a4783f3f"],"bfc52860e6d13d034226a760813c59d984c6817a":["a6ca670f6c74c9b5f427c24e9a604d750001e1ca"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["0265144286422ad99682a00904cc2536b79c8535"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"a6ca670f6c74c9b5f427c24e9a604d750001e1ca":["6d923d43d92fc38da35fc2c46314f9c6c05b5704"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"43564cbb30b064675027cfb569564e8531096e97":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"efc6fba4d5c899e6b902d46d3ea16ed0a4783f3f":["6d923d43d92fc38da35fc2c46314f9c6c05b5704"],"816521ebaad5add9cb96bb88c577394e2938c40b":["efc6fba4d5c899e6b902d46d3ea16ed0a4783f3f","6d923d43d92fc38da35fc2c46314f9c6c05b5704"],"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"6d923d43d92fc38da35fc2c46314f9c6c05b5704":["a6ca670f6c74c9b5f427c24e9a604d750001e1ca"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"a6ca670f6c74c9b5f427c24e9a604d750001e1ca":["43564cbb30b064675027cfb569564e8531096e97","bfc52860e6d13d034226a760813c59d984c6817a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}