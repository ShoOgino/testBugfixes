{"path":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(StorableField,FieldInfo).mjava","commits":[{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(StorableField,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(IndexableField,FieldInfo).mjava","sourceNew":"  public void addField(StorableField field, FieldInfo fieldInfo) {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      StorableField[] newArray = new StorableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n      \n      FieldInfo[] newInfoArray = new FieldInfo[newSize];\n      System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n      fieldInfos = newInfoArray;\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldInfos[numStoredFields] = fieldInfo;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","sourceOld":"  public void addField(IndexableField field, FieldInfo fieldInfo) {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      IndexableField[] newArray = new IndexableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n      \n      FieldInfo[] newInfoArray = new FieldInfo[newSize];\n      System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n      fieldInfos = newInfoArray;\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldInfos[numStoredFields] = fieldInfo;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(StorableField,FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(IndexableField,FieldInfo).mjava","sourceNew":"  public void addField(StorableField field, FieldInfo fieldInfo) {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      StorableField[] newArray = new StorableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n      \n      FieldInfo[] newInfoArray = new FieldInfo[newSize];\n      System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n      fieldInfos = newInfoArray;\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldInfos[numStoredFields] = fieldInfo;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","sourceOld":"  public void addField(IndexableField field, FieldInfo fieldInfo) {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      IndexableField[] newArray = new IndexableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n      \n      FieldInfo[] newInfoArray = new FieldInfo[newSize];\n      System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n      fieldInfos = newInfoArray;\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldInfos[numStoredFields] = fieldInfo;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"127981e5a1e1d1425c5fdc816ceacf753ca70ee4","date":1354205321,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(StorableField,FieldInfo).mjava","sourceNew":null,"sourceOld":"  public void addField(StorableField field, FieldInfo fieldInfo) {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      StorableField[] newArray = new StorableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n      \n      FieldInfo[] newInfoArray = new FieldInfo[newSize];\n      System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n      fieldInfos = newInfoArray;\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldInfos[numStoredFields] = fieldInfo;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/StoredFieldsConsumer#addField(StorableField,FieldInfo).mjava","sourceNew":null,"sourceOld":"  public void addField(StorableField field, FieldInfo fieldInfo) {\n    if (numStoredFields == storedFields.length) {\n      int newSize = ArrayUtil.oversize(numStoredFields + 1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      StorableField[] newArray = new StorableField[newSize];\n      System.arraycopy(storedFields, 0, newArray, 0, numStoredFields);\n      storedFields = newArray;\n      \n      FieldInfo[] newInfoArray = new FieldInfo[newSize];\n      System.arraycopy(fieldInfos, 0, newInfoArray, 0, numStoredFields);\n      fieldInfos = newInfoArray;\n    }\n\n    storedFields[numStoredFields] = field;\n    fieldInfos[numStoredFields] = fieldInfo;\n    numStoredFields++;\n\n    assert docState.testPoint(\"StoredFieldsWriterPerThread.processFields.writeField\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["1d028314cced5858683a1bb4741423d0f934257b","127981e5a1e1d1425c5fdc816ceacf753ca70ee4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"1d028314cced5858683a1bb4741423d0f934257b":["d4d69c535930b5cce125cff868d40f6373dc27d4","127981e5a1e1d1425c5fdc816ceacf753ca70ee4"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["1d028314cced5858683a1bb4741423d0f934257b"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}