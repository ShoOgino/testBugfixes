{"path":"lucene/src/test/org/apache/lucene/util/TestOpenBitSet#doIterate1(BitSet,OpenBitSet).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestOpenBitSet#doIterate1(BitSet,OpenBitSet).mjava","pathOld":"src/test/org/apache/lucene/util/TestOpenBitSet#doIterate1(BitSet,OpenBitSet).mjava","sourceNew":"  void doIterate1(BitSet a, OpenBitSet b) {\n    int aa=-1,bb=-1;\n    OpenBitSetIterator iterator = new OpenBitSetIterator(b);\n    do {\n      aa = a.nextSetBit(aa+1);\n      bb = rand.nextBoolean() ? iterator.nextDoc() : iterator.advance(bb + 1);\n      assertEquals(aa == -1 ? DocIdSetIterator.NO_MORE_DOCS : aa, bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":"  void doIterate1(BitSet a, OpenBitSet b) {\n    int aa=-1,bb=-1;\n    OpenBitSetIterator iterator = new OpenBitSetIterator(b);\n    do {\n      aa = a.nextSetBit(aa+1);\n      bb = rand.nextBoolean() ? iterator.nextDoc() : iterator.advance(bb + 1);\n      assertEquals(aa == -1 ? DocIdSetIterator.NO_MORE_DOCS : aa, bb);\n    } while (aa>=0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestOpenBitSet#doIterate1(BitSet,OpenBitSet).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestOpenBitSet#doIterate1(BitSet,OpenBitSet).mjava","sourceNew":"  void doIterate1(BitSet a, OpenBitSet b) {\n    int aa=-1,bb=-1;\n    OpenBitSetIterator iterator = new OpenBitSetIterator(b);\n    do {\n      aa = a.nextSetBit(aa+1);\n      bb = random.nextBoolean() ? iterator.nextDoc() : iterator.advance(bb + 1);\n      assertEquals(aa == -1 ? DocIdSetIterator.NO_MORE_DOCS : aa, bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":"  void doIterate1(BitSet a, OpenBitSet b) {\n    int aa=-1,bb=-1;\n    OpenBitSetIterator iterator = new OpenBitSetIterator(b);\n    do {\n      aa = a.nextSetBit(aa+1);\n      bb = rand.nextBoolean() ? iterator.nextDoc() : iterator.advance(bb + 1);\n      assertEquals(aa == -1 ? DocIdSetIterator.NO_MORE_DOCS : aa, bb);\n    } while (aa>=0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestOpenBitSet#doIterate1(BitSet,OpenBitSet).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestOpenBitSet#doIterate1(BitSet,OpenBitSet).mjava","sourceNew":"  void doIterate1(BitSet a, OpenBitSet b) {\n    int aa=-1,bb=-1;\n    OpenBitSetIterator iterator = new OpenBitSetIterator(b);\n    do {\n      aa = a.nextSetBit(aa+1);\n      bb = random.nextBoolean() ? iterator.nextDoc() : iterator.advance(bb + 1);\n      assertEquals(aa == -1 ? DocIdSetIterator.NO_MORE_DOCS : aa, bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":"  void doIterate1(BitSet a, OpenBitSet b) {\n    int aa=-1,bb=-1;\n    OpenBitSetIterator iterator = new OpenBitSetIterator(b);\n    do {\n      aa = a.nextSetBit(aa+1);\n      bb = rand.nextBoolean() ? iterator.nextDoc() : iterator.advance(bb + 1);\n      assertEquals(aa == -1 ? DocIdSetIterator.NO_MORE_DOCS : aa, bb);\n    } while (aa>=0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#doIterate1(BitSet,OpenBitSet).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestOpenBitSet#doIterate1(BitSet,OpenBitSet).mjava","sourceNew":"  void doIterate1(BitSet a, OpenBitSet b) {\n    int aa=-1,bb=-1;\n    OpenBitSetIterator iterator = new OpenBitSetIterator(b);\n    do {\n      aa = a.nextSetBit(aa+1);\n      bb = random.nextBoolean() ? iterator.nextDoc() : iterator.advance(bb + 1);\n      assertEquals(aa == -1 ? DocIdSetIterator.NO_MORE_DOCS : aa, bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":"  void doIterate1(BitSet a, OpenBitSet b) {\n    int aa=-1,bb=-1;\n    OpenBitSetIterator iterator = new OpenBitSetIterator(b);\n    do {\n      aa = a.nextSetBit(aa+1);\n      bb = random.nextBoolean() ? iterator.nextDoc() : iterator.advance(bb + 1);\n      assertEquals(aa == -1 ? DocIdSetIterator.NO_MORE_DOCS : aa, bb);\n    } while (aa>=0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f653cfcf159baeaafe5d01682a911e95bba4012","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}