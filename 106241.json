{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba74b188d46af33b86ff8e5a500d6f066852a182","date":1312857652,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8191177d7e99590f340be1dbfb1cb0f01bf2f993","date":1366233200,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n      CommitVersionInfo vInfo = getIndexVersion();\n      list.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n      list.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n      long[] versionGen = getIndexVersion();\n      list.add(\"indexVersion\", versionGen[0]);\n      list.add(GENERATION, versionGen[1]);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","bugFix":["e1c62d84fa064ee3b226a7ed01c37d152d0253bb","f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0094ec1f4134315c70a7c4393df01a259d89161","date":1420652120,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n      CommitVersionInfo vInfo = (core != null && !core.isClosed()) ? getIndexVersion(): null;\n      list.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n      list.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n      CommitVersionInfo vInfo = getIndexVersion();\n      list.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n      list.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n      CommitVersionInfo vInfo = (core != null && !core.isClosed()) ? getIndexVersion(): null;\n      list.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n      list.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        list.add(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          list.add(POLL_INTERVAL, getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(list, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n      CommitVersionInfo vInfo = (core != null && !core.isClosed()) ? getIndexVersion(): null;\n      list.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n      list.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n      CommitVersionInfo vInfo = (core != null && !core.isClosed()) ? getIndexVersion(): null;\n      list.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n      list.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        list.add(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          list.add(POLL_INTERVAL, getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(list, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n      CommitVersionInfo vInfo = (core != null && !core.isClosed()) ? getIndexVersion(): null;\n      list.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n      list.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      SnapPuller snapPuller = tempSnapPuller;\n      if (snapPuller != null) {\n        list.add(MASTER_URL, snapPuller.getMasterUrl());\n        if (snapPuller.getPollInterval() != null) {\n          list.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = getTimeElapsed(snapPuller);\n        long val = SnapPuller.getTotalBytesDownloaded(snapPuller);\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, SnapPuller.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, SnapPuller.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, SnapPuller.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, SnapPuller.TIMES_FAILED, props, Integer.class);\n        addVal(list, SnapPuller.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, SnapPuller.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, SnapPuller.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a35c02a24fd1c193f4a30120e5c4abd7eff42c1d","date":1483555724,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", NumberUtils.readableSize(core.getIndexSize()));\n      CommitVersionInfo vInfo = (core != null && !core.isClosed()) ? getIndexVersion(): null;\n      list.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n      list.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        list.add(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          list.add(POLL_INTERVAL, getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(list, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n      CommitVersionInfo vInfo = (core != null && !core.isClosed()) ? getIndexVersion(): null;\n      list.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n      list.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        list.add(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          list.add(POLL_INTERVAL, getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(list, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", NumberUtils.readableSize(core.getIndexSize()));\n      CommitVersionInfo vInfo = (core != null && !core.isClosed()) ? getIndexVersion(): null;\n      list.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n      list.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        list.add(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          list.add(POLL_INTERVAL, getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(list, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", NumberUtils.readableSize(getIndexSize()));\n      CommitVersionInfo vInfo = (core != null && !core.isClosed()) ? getIndexVersion(): null;\n      list.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n      list.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        list.add(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          list.add(POLL_INTERVAL, getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(list, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", NumberUtils.readableSize(core.getIndexSize()));\n      CommitVersionInfo vInfo = (core != null && !core.isClosed()) ? getIndexVersion(): null;\n      list.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n      list.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        list.add(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          list.add(POLL_INTERVAL, getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(list, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#getStatistics().mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public NamedList getStatistics() {\n    NamedList list = super.getStatistics();\n    if (core != null) {\n      list.add(\"indexSize\", NumberUtils.readableSize(core.getIndexSize()));\n      CommitVersionInfo vInfo = (core != null && !core.isClosed()) ? getIndexVersion(): null;\n      list.add(\"indexVersion\", null == vInfo ? 0 : vInfo.version);\n      list.add(GENERATION, null == vInfo ? 0 : vInfo.generation);\n\n      list.add(\"indexPath\", core.getIndexDir());\n      list.add(\"isMaster\", String.valueOf(isMaster));\n      list.add(\"isSlave\", String.valueOf(isSlave));\n\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        list.add(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          list.add(POLL_INTERVAL, getPollInterval());\n        }\n        list.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        list.add(\"isReplicating\", String.valueOf(isReplicating()));\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          list.add(\"timeElapsed\", elapsed);\n          list.add(\"bytesDownloaded\", val);\n          list.add(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(list, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(list, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(list, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(list, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(list, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(list, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(list, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(list, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(list, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n      if (isMaster) {\n        if (includeConfFiles != null) list.add(\"confFilesToReplicate\", includeConfFiles);\n        list.add(REPLICATE_AFTER, getReplicateAfterStrings());\n        list.add(\"replicationEnabled\", String.valueOf(replicationEnabled.get()));\n      }\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a35c02a24fd1c193f4a30120e5c4abd7eff42c1d"],"a35c02a24fd1c193f4a30120e5c4abd7eff42c1d":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"ba74b188d46af33b86ff8e5a500d6f066852a182":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"8191177d7e99590f340be1dbfb1cb0f01bf2f993":["ba74b188d46af33b86ff8e5a500d6f066852a182"],"816521ebaad5add9cb96bb88c577394e2938c40b":["a35c02a24fd1c193f4a30120e5c4abd7eff42c1d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d0094ec1f4134315c70a7c4393df01a259d89161","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["d0094ec1f4134315c70a7c4393df01a259d89161"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0094ec1f4134315c70a7c4393df01a259d89161":["8191177d7e99590f340be1dbfb1cb0f01bf2f993"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["20f6b7cff3771384f27af0f059795d7e64aff6b9","a35c02a24fd1c193f4a30120e5c4abd7eff42c1d"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a35c02a24fd1c193f4a30120e5c4abd7eff42c1d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"ba74b188d46af33b86ff8e5a500d6f066852a182":["8191177d7e99590f340be1dbfb1cb0f01bf2f993"],"c26f00b574427b55127e869b935845554afde1fa":["ba74b188d46af33b86ff8e5a500d6f066852a182"],"8191177d7e99590f340be1dbfb1cb0f01bf2f993":["d0094ec1f4134315c70a7c4393df01a259d89161"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a35c02a24fd1c193f4a30120e5c4abd7eff42c1d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d0094ec1f4134315c70a7c4393df01a259d89161":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"491c9672ec42582fe43960452dbd37f1c80fe0f0":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}