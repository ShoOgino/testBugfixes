{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#reloadCoreDescriptor(CoreDescriptor).mjava","commits":[{"id":"fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5","date":1493061731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reloadCoreDescriptor(CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  private CoreDescriptor reloadCoreDescriptor(CoreDescriptor oldDesc) {\n    if (oldDesc == null) {\n      return null;\n    }\n\n    CorePropertiesLocator cpl = new CorePropertiesLocator(null);\n    CoreDescriptor ret = cpl.buildCoreDescriptor(oldDesc.getInstanceDir().resolve(PROPERTIES_FILENAME), this);\n\n    // Ok, this little jewel is all because we still create core descriptors on the fly from lists of properties\n    // in tests particularly. Theoretically, there should be _no_ way to create a CoreDescriptor in the new world\n    // of core discovery without writing the core.properties file out first.\n    //\n    // TODO: remove core.properties from the conf directory in test files, it's in a bad place there anyway.\n    if (ret == null) {\n      oldDesc.loadExtraProperties(); // there may be changes to extra properties that we need to pick up.\n      return oldDesc;\n      \n    }\n    // The CloudDescriptor bit here is created in a very convoluted way, requiring access to private methods\n    // in ZkController. When reloading, this behavior is identical to what used to happen where a copy of the old\n    // CoreDescriptor was just re-used.\n    \n    if (ret.getCloudDescriptor() != null) {\n      ret.getCloudDescriptor().reload(oldDesc.getCloudDescriptor());\n    }\n\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reloadCoreDescriptor(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reloadCoreDescriptor(CoreDescriptor).mjava","sourceNew":"  private CoreDescriptor reloadCoreDescriptor(CoreDescriptor oldDesc) {\n    if (oldDesc == null) {\n      return null;\n    }\n\n    CorePropertiesLocator cpl = new CorePropertiesLocator(null);\n    CoreDescriptor ret = cpl.buildCoreDescriptor(oldDesc.getInstanceDir().resolve(PROPERTIES_FILENAME), this);\n\n    // Ok, this little jewel is all because we still create core descriptors on the fly from lists of properties\n    // in tests particularly. Theoretically, there should be _no_ way to create a CoreDescriptor in the new world\n    // of core discovery without writing the core.properties file out first.\n    //\n    // TODO: remove core.properties from the conf directory in test files, it's in a bad place there anyway.\n    if (ret == null) {\n      oldDesc.loadExtraProperties(); // there may be changes to extra properties that we need to pick up.\n      return oldDesc;\n\n    }\n    // The CloudDescriptor bit here is created in a very convoluted way, requiring access to private methods\n    // in ZkController. When reloading, this behavior is identical to what used to happen where a copy of the old\n    // CoreDescriptor was just re-used.\n\n    if (ret.getCloudDescriptor() != null) {\n      ret.getCloudDescriptor().reload(oldDesc.getCloudDescriptor());\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  private CoreDescriptor reloadCoreDescriptor(CoreDescriptor oldDesc) {\n    if (oldDesc == null) {\n      return null;\n    }\n\n    CorePropertiesLocator cpl = new CorePropertiesLocator(null);\n    CoreDescriptor ret = cpl.buildCoreDescriptor(oldDesc.getInstanceDir().resolve(PROPERTIES_FILENAME), this);\n\n    // Ok, this little jewel is all because we still create core descriptors on the fly from lists of properties\n    // in tests particularly. Theoretically, there should be _no_ way to create a CoreDescriptor in the new world\n    // of core discovery without writing the core.properties file out first.\n    //\n    // TODO: remove core.properties from the conf directory in test files, it's in a bad place there anyway.\n    if (ret == null) {\n      oldDesc.loadExtraProperties(); // there may be changes to extra properties that we need to pick up.\n      return oldDesc;\n      \n    }\n    // The CloudDescriptor bit here is created in a very convoluted way, requiring access to private methods\n    // in ZkController. When reloading, this behavior is identical to what used to happen where a copy of the old\n    // CoreDescriptor was just re-used.\n    \n    if (ret.getCloudDescriptor() != null) {\n      ret.getCloudDescriptor().reload(oldDesc.getCloudDescriptor());\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reloadCoreDescriptor(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reloadCoreDescriptor(CoreDescriptor).mjava","sourceNew":"  private CoreDescriptor reloadCoreDescriptor(CoreDescriptor oldDesc) {\n    if (oldDesc == null) {\n      return null;\n    }\n\n    CorePropertiesLocator cpl = new CorePropertiesLocator(null);\n    CoreDescriptor ret = cpl.buildCoreDescriptor(oldDesc.getInstanceDir().resolve(PROPERTIES_FILENAME), this);\n\n    // Ok, this little jewel is all because we still create core descriptors on the fly from lists of properties\n    // in tests particularly. Theoretically, there should be _no_ way to create a CoreDescriptor in the new world\n    // of core discovery without writing the core.properties file out first.\n    //\n    // TODO: remove core.properties from the conf directory in test files, it's in a bad place there anyway.\n    if (ret == null) {\n      oldDesc.loadExtraProperties(); // there may be changes to extra properties that we need to pick up.\n      return oldDesc;\n\n    }\n    // The CloudDescriptor bit here is created in a very convoluted way, requiring access to private methods\n    // in ZkController. When reloading, this behavior is identical to what used to happen where a copy of the old\n    // CoreDescriptor was just re-used.\n\n    if (ret.getCloudDescriptor() != null) {\n      ret.getCloudDescriptor().reload(oldDesc.getCloudDescriptor());\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  private CoreDescriptor reloadCoreDescriptor(CoreDescriptor oldDesc) {\n    if (oldDesc == null) {\n      return null;\n    }\n\n    CorePropertiesLocator cpl = new CorePropertiesLocator(null);\n    CoreDescriptor ret = cpl.buildCoreDescriptor(oldDesc.getInstanceDir().resolve(PROPERTIES_FILENAME), this);\n\n    // Ok, this little jewel is all because we still create core descriptors on the fly from lists of properties\n    // in tests particularly. Theoretically, there should be _no_ way to create a CoreDescriptor in the new world\n    // of core discovery without writing the core.properties file out first.\n    //\n    // TODO: remove core.properties from the conf directory in test files, it's in a bad place there anyway.\n    if (ret == null) {\n      oldDesc.loadExtraProperties(); // there may be changes to extra properties that we need to pick up.\n      return oldDesc;\n      \n    }\n    // The CloudDescriptor bit here is created in a very convoluted way, requiring access to private methods\n    // in ZkController. When reloading, this behavior is identical to what used to happen where a copy of the old\n    // CoreDescriptor was just re-used.\n    \n    if (ret.getCloudDescriptor() != null) {\n      ret.getCloudDescriptor().reload(oldDesc.getCloudDescriptor());\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reloadCoreDescriptor(CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  private CoreDescriptor reloadCoreDescriptor(CoreDescriptor oldDesc) {\n    if (oldDesc == null) {\n      return null;\n    }\n\n    CorePropertiesLocator cpl = new CorePropertiesLocator(null);\n    CoreDescriptor ret = cpl.buildCoreDescriptor(oldDesc.getInstanceDir().resolve(PROPERTIES_FILENAME), this);\n\n    // Ok, this little jewel is all because we still create core descriptors on the fly from lists of properties\n    // in tests particularly. Theoretically, there should be _no_ way to create a CoreDescriptor in the new world\n    // of core discovery without writing the core.properties file out first.\n    //\n    // TODO: remove core.properties from the conf directory in test files, it's in a bad place there anyway.\n    if (ret == null) {\n      oldDesc.loadExtraProperties(); // there may be changes to extra properties that we need to pick up.\n      return oldDesc;\n\n    }\n    // The CloudDescriptor bit here is created in a very convoluted way, requiring access to private methods\n    // in ZkController. When reloading, this behavior is identical to what used to happen where a copy of the old\n    // CoreDescriptor was just re-used.\n\n    if (ret.getCloudDescriptor() != null) {\n      ret.getCloudDescriptor().reload(oldDesc.getCloudDescriptor());\n    }\n\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#reloadCoreDescriptor(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#reloadCoreDescriptor(CoreDescriptor).mjava","sourceNew":"  private CoreDescriptor reloadCoreDescriptor(CoreDescriptor oldDesc) {\n    if (oldDesc == null) {\n      return null;\n    }\n\n    CorePropertiesLocator cpl = new CorePropertiesLocator(null);\n    CoreDescriptor ret = cpl.buildCoreDescriptor(oldDesc.getInstanceDir().resolve(PROPERTIES_FILENAME), this);\n\n    // Ok, this little jewel is all because we still create core descriptors on the fly from lists of properties\n    // in tests particularly. Theoretically, there should be _no_ way to create a CoreDescriptor in the new world\n    // of core discovery without writing the core.properties file out first.\n    //\n    // TODO: remove core.properties from the conf directory in test files, it's in a bad place there anyway.\n    if (ret == null) {\n      oldDesc.loadExtraProperties(); // there may be changes to extra properties that we need to pick up.\n      return oldDesc;\n\n    }\n    // The CloudDescriptor bit here is created in a very convoluted way, requiring access to private methods\n    // in ZkController. When reloading, this behavior is identical to what used to happen where a copy of the old\n    // CoreDescriptor was just re-used.\n\n    if (ret.getCloudDescriptor() != null) {\n      ret.getCloudDescriptor().reload(oldDesc.getCloudDescriptor());\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  private CoreDescriptor reloadCoreDescriptor(CoreDescriptor oldDesc) {\n    if (oldDesc == null) {\n      return null;\n    }\n\n    CorePropertiesLocator cpl = new CorePropertiesLocator(null);\n    CoreDescriptor ret = cpl.buildCoreDescriptor(oldDesc.getInstanceDir().resolve(PROPERTIES_FILENAME), this);\n\n    // Ok, this little jewel is all because we still create core descriptors on the fly from lists of properties\n    // in tests particularly. Theoretically, there should be _no_ way to create a CoreDescriptor in the new world\n    // of core discovery without writing the core.properties file out first.\n    //\n    // TODO: remove core.properties from the conf directory in test files, it's in a bad place there anyway.\n    if (ret == null) {\n      oldDesc.loadExtraProperties(); // there may be changes to extra properties that we need to pick up.\n      return oldDesc;\n      \n    }\n    // The CloudDescriptor bit here is created in a very convoluted way, requiring access to private methods\n    // in ZkController. When reloading, this behavior is identical to what used to happen where a copy of the old\n    // CoreDescriptor was just re-used.\n    \n    if (ret.getCloudDescriptor() != null) {\n      ret.getCloudDescriptor().reload(oldDesc.getCloudDescriptor());\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5"],"fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"fb239ff148d77d2846f7c73b4b1f0ecb0827c0d5":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}