{"path":"src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testTwoServers().mjava","commits":[{"id":"1bf975219b6e3c21deb51ed8f19ec16b24518598","date":1239958673,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testTwoServers().mjava","pathOld":"/dev/null","sourceNew":"  public void testTwoServers() throws Exception {\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, solr[0].getUrl(), solr[1].getUrl());\n    lbHttpSolrServer.setAliveCheckInterval(1);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    solr[0].jetty.stop();\n    solr[0].jetty = null;\n    resp = lbHttpSolrServer.query(solrQuery);\n    String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr1\", name);\n    resp = lbHttpSolrServer.query(solrQuery);\n    name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr1\", name);\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    solr[0].startJetty();\n    Thread.sleep(1200);\n    resp = lbHttpSolrServer.query(solrQuery);\n    name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr0\", name);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9dd5493abd1beb8c4c37b29a8c70c6d37148d3b","date":1244472460,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testTwoServers().mjava","pathOld":"src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testTwoServers().mjava","sourceNew":"  public void testTwoServers() throws Exception {\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, solr[0].getUrl(), solr[1].getUrl());\n    lbHttpSolrServer.setAliveCheckInterval(1);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    solr[0].jetty.stop();\n    solr[0].jetty = null;\n    resp = lbHttpSolrServer.query(solrQuery);\n    String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr1\", name);\n    resp = lbHttpSolrServer.query(solrQuery);\n    name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr1\", name);\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    solr[0].startJetty();\n    Thread.sleep(1200);\n    try {\n      resp = lbHttpSolrServer.query(solrQuery);\n    } catch(SolrServerException e) {\n      // try again after a pause in case the error is lack of time to start server\n      Thread.sleep(3000);\n      resp = lbHttpSolrServer.query(solrQuery);\n    }\n    name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr0\", name);\n  }\n\n","sourceOld":"  public void testTwoServers() throws Exception {\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, solr[0].getUrl(), solr[1].getUrl());\n    lbHttpSolrServer.setAliveCheckInterval(1);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    solr[0].jetty.stop();\n    solr[0].jetty = null;\n    resp = lbHttpSolrServer.query(solrQuery);\n    String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr1\", name);\n    resp = lbHttpSolrServer.query(solrQuery);\n    name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr1\", name);\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    solr[0].startJetty();\n    Thread.sleep(1200);\n    resp = lbHttpSolrServer.query(solrQuery);\n    name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr0\", name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba8376d112bb95ab94d979a28d968ba1ed774ebc","date":1253737604,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testTwoServers().mjava","pathOld":"src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testTwoServers().mjava","sourceNew":"  public void testTwoServers() throws Exception {\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, solr[0].getUrl(), solr[1].getUrl());\n    lbHttpSolrServer.setAliveCheckInterval(1000);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    solr[0].jetty.stop();\n    solr[0].jetty = null;\n    resp = lbHttpSolrServer.query(solrQuery);\n    String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr1\", name);\n    resp = lbHttpSolrServer.query(solrQuery);\n    name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr1\", name);\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    solr[0].startJetty();\n    Thread.sleep(1200);\n    try {\n      resp = lbHttpSolrServer.query(solrQuery);\n    } catch(SolrServerException e) {\n      // try again after a pause in case the error is lack of time to start server\n      Thread.sleep(3000);\n      resp = lbHttpSolrServer.query(solrQuery);\n    }\n    name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr0\", name);\n  }\n\n","sourceOld":"  public void testTwoServers() throws Exception {\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, solr[0].getUrl(), solr[1].getUrl());\n    lbHttpSolrServer.setAliveCheckInterval(1);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    solr[0].jetty.stop();\n    solr[0].jetty = null;\n    resp = lbHttpSolrServer.query(solrQuery);\n    String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr1\", name);\n    resp = lbHttpSolrServer.query(solrQuery);\n    name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr1\", name);\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    solr[0].startJetty();\n    Thread.sleep(1200);\n    try {\n      resp = lbHttpSolrServer.query(solrQuery);\n    } catch(SolrServerException e) {\n      // try again after a pause in case the error is lack of time to start server\n      Thread.sleep(3000);\n      resp = lbHttpSolrServer.query(solrQuery);\n    }\n    name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr0\", name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35e8f8c486e79a55058bbab4d089135c9bfb8979","date":1255796811,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testTwoServers().mjava","pathOld":"src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testTwoServers().mjava","sourceNew":"  public void testTwoServers() throws Exception {\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, solr[0].getUrl(), solr[1].getUrl());\n    lbHttpSolrServer.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    solr[0].jetty.stop();\n    solr[0].jetty = null;\n    resp = lbHttpSolrServer.query(solrQuery);\n    String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr1\", name);\n    resp = lbHttpSolrServer.query(solrQuery);\n    name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr1\", name);\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    solr[0].startJetty();\n    Thread.sleep(1200);\n    try {\n      resp = lbHttpSolrServer.query(solrQuery);\n    } catch(SolrServerException e) {\n      // try again after a pause in case the error is lack of time to start server\n      Thread.sleep(3000);\n      resp = lbHttpSolrServer.query(solrQuery);\n    }\n    name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr0\", name);\n  }\n\n","sourceOld":"  public void testTwoServers() throws Exception {\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, solr[0].getUrl(), solr[1].getUrl());\n    lbHttpSolrServer.setAliveCheckInterval(1000);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    solr[0].jetty.stop();\n    solr[0].jetty = null;\n    resp = lbHttpSolrServer.query(solrQuery);\n    String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr1\", name);\n    resp = lbHttpSolrServer.query(solrQuery);\n    name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr1\", name);\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    solr[0].startJetty();\n    Thread.sleep(1200);\n    try {\n      resp = lbHttpSolrServer.query(solrQuery);\n    } catch(SolrServerException e) {\n      // try again after a pause in case the error is lack of time to start server\n      Thread.sleep(3000);\n      resp = lbHttpSolrServer.query(solrQuery);\n    }\n    name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr0\", name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testTwoServers().mjava","pathOld":"src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testTwoServers().mjava","sourceNew":"  public void testTwoServers() throws Exception {\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, solr[0].getUrl(), solr[1].getUrl());\n    lbHttpSolrServer.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    solr[0].jetty.stop();\n    solr[0].jetty = null;\n    resp = lbHttpSolrServer.query(solrQuery);\n    String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr1\", name);\n    resp = lbHttpSolrServer.query(solrQuery);\n    name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr1\", name);\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    solr[0].startJetty();\n    Thread.sleep(1200);\n    try {\n      resp = lbHttpSolrServer.query(solrQuery);\n    } catch(SolrServerException e) {\n      // try again after a pause in case the error is lack of time to start server\n      Thread.sleep(3000);\n      resp = lbHttpSolrServer.query(solrQuery);\n    }\n    name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr0\", name);\n  }\n\n","sourceOld":"  public void testTwoServers() throws Exception {\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, solr[0].getUrl(), solr[1].getUrl());\n    lbHttpSolrServer.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    solr[0].jetty.stop();\n    solr[0].jetty = null;\n    resp = lbHttpSolrServer.query(solrQuery);\n    String name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr1\", name);\n    resp = lbHttpSolrServer.query(solrQuery);\n    name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr1\", name);\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    solr[0].startJetty();\n    Thread.sleep(1200);\n    try {\n      resp = lbHttpSolrServer.query(solrQuery);\n    } catch(SolrServerException e) {\n      // try again after a pause in case the error is lack of time to start server\n      Thread.sleep(3000);\n      resp = lbHttpSolrServer.query(solrQuery);\n    }\n    name = resp.getResults().get(0).getFieldValue(\"name\").toString();\n    Assert.assertEquals(\"solr0\", name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f9dd5493abd1beb8c4c37b29a8c70c6d37148d3b":["1bf975219b6e3c21deb51ed8f19ec16b24518598"],"1bf975219b6e3c21deb51ed8f19ec16b24518598":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba8376d112bb95ab94d979a28d968ba1ed774ebc":["f9dd5493abd1beb8c4c37b29a8c70c6d37148d3b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["35e8f8c486e79a55058bbab4d089135c9bfb8979"],"35e8f8c486e79a55058bbab4d089135c9bfb8979":["ba8376d112bb95ab94d979a28d968ba1ed774ebc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f9dd5493abd1beb8c4c37b29a8c70c6d37148d3b":["ba8376d112bb95ab94d979a28d968ba1ed774ebc"],"1bf975219b6e3c21deb51ed8f19ec16b24518598":["f9dd5493abd1beb8c4c37b29a8c70c6d37148d3b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["1bf975219b6e3c21deb51ed8f19ec16b24518598"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba8376d112bb95ab94d979a28d968ba1ed774ebc":["35e8f8c486e79a55058bbab4d089135c9bfb8979"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"35e8f8c486e79a55058bbab4d089135c9bfb8979":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}