{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup#[T]_merge(List[Collection[SearchGroup[T]]],int,int,Sort).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup#[T]_merge(List[Collection[SearchGroup[T]]],int,int,Sort).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup#[T]_merge(List[Collection[SearchGroup[T]]],int,int,Sort).mjava","sourceNew":"  /** Merges multiple collections of top groups, for example\n   *  obtained from separate index shards.  The provided\n   *  groupSort must match how the groups were sorted, and\n   *  the provided SearchGroups must have been computed\n   *  with fillFields=true passed to {@link\n   *  AbstractFirstPassGroupingCollector#getTopGroups}.\n   *\n   * <p>NOTE: this returns null if the topGroups is empty.\n   */\n  public static <T> Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> topGroups, int offset, int topN, Sort groupSort)\n    throws IOException {\n    if (topGroups.size() == 0) {\n      return null;\n    } else {\n      return new GroupMerger<T>(groupSort).merge(topGroups, offset, topN);\n    }\n  }\n\n","sourceOld":"  /** Merges multiple collections of top groups, for example\n   *  obtained from separate index shards.  The provided\n   *  groupSort must match how the groups were sorted, and\n   *  the provided SearchGroups must have been computed\n   *  with fillFields=true passed to {@link\n   *  AbstractFirstPassGroupingCollector#getTopGroups}.\n   *\n   * <p>NOTE: this returns null if the topGroups is empty.\n   */\n  public static <T> Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> topGroups, int offset, int topN, Sort groupSort)\n    throws IOException {\n    if (topGroups.size() == 0) {\n      return null;\n    } else {\n      return new GroupMerger<T>(groupSort).merge(topGroups, offset, topN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"341fa5edecbe460c9e15d78786c68e3168ba1268","date":1467114131,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup#[T]_merge(List[Collection[SearchGroup[T]]],int,int,Sort).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup#[T]_merge(List[Collection[SearchGroup[T]]],int,int,Sort).mjava","sourceNew":"  /** Merges multiple collections of top groups, for example\n   *  obtained from separate index shards.  The provided\n   *  groupSort must match how the groups were sorted, and\n   *  the provided SearchGroups must have been computed\n   *  with fillFields=true passed to {@link\n   *  AbstractFirstPassGroupingCollector#getTopGroups}.\n   *\n   * <p>NOTE: this returns null if the topGroups is empty.\n   */\n  public static <T> Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> topGroups, int offset, int topN, Sort groupSort)\n    throws IOException {\n    if (topGroups.isEmpty()) {\n      return null;\n    } else {\n      return new GroupMerger<T>(groupSort).merge(topGroups, offset, topN);\n    }\n  }\n\n","sourceOld":"  /** Merges multiple collections of top groups, for example\n   *  obtained from separate index shards.  The provided\n   *  groupSort must match how the groups were sorted, and\n   *  the provided SearchGroups must have been computed\n   *  with fillFields=true passed to {@link\n   *  AbstractFirstPassGroupingCollector#getTopGroups}.\n   *\n   * <p>NOTE: this returns null if the topGroups is empty.\n   */\n  public static <T> Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> topGroups, int offset, int topN, Sort groupSort)\n    throws IOException {\n    if (topGroups.size() == 0) {\n      return null;\n    } else {\n      return new GroupMerger<T>(groupSort).merge(topGroups, offset, topN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup#[T]_merge(List[Collection[SearchGroup[T]]],int,int,Sort).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup#[T]_merge(List[Collection[SearchGroup[T]]],int,int,Sort).mjava","sourceNew":"  /** Merges multiple collections of top groups, for example\n   *  obtained from separate index shards.  The provided\n   *  groupSort must match how the groups were sorted, and\n   *  the provided SearchGroups must have been computed\n   *  with fillFields=true passed to {@link\n   *  AbstractFirstPassGroupingCollector#getTopGroups}.\n   *\n   * <p>NOTE: this returns null if the topGroups is empty.\n   */\n  public static <T> Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> topGroups, int offset, int topN, Sort groupSort)\n    throws IOException {\n    if (topGroups.isEmpty()) {\n      return null;\n    } else {\n      return new GroupMerger<T>(groupSort).merge(topGroups, offset, topN);\n    }\n  }\n\n","sourceOld":"  /** Merges multiple collections of top groups, for example\n   *  obtained from separate index shards.  The provided\n   *  groupSort must match how the groups were sorted, and\n   *  the provided SearchGroups must have been computed\n   *  with fillFields=true passed to {@link\n   *  AbstractFirstPassGroupingCollector#getTopGroups}.\n   *\n   * <p>NOTE: this returns null if the topGroups is empty.\n   */\n  public static <T> Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> topGroups, int offset, int topN, Sort groupSort)\n    throws IOException {\n    if (topGroups.size() == 0) {\n      return null;\n    } else {\n      return new GroupMerger<T>(groupSort).merge(topGroups, offset, topN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup#[T]_merge(List[Collection[SearchGroup[T]]],int,int,Sort).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup#[T]_merge(List[Collection[SearchGroup[T]]],int,int,Sort).mjava","sourceNew":"  /** Merges multiple collections of top groups, for example\n   *  obtained from separate index shards.  The provided\n   *  groupSort must match how the groups were sorted, and\n   *  the provided SearchGroups must have been computed\n   *  with fillFields=true passed to {@link\n   *  FirstPassGroupingCollector#getTopGroups}.\n   *\n   * <p>NOTE: this returns null if the topGroups is empty.\n   */\n  public static <T> Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> topGroups, int offset, int topN, Sort groupSort)\n    throws IOException {\n    if (topGroups.isEmpty()) {\n      return null;\n    } else {\n      return new GroupMerger<T>(groupSort).merge(topGroups, offset, topN);\n    }\n  }\n\n","sourceOld":"  /** Merges multiple collections of top groups, for example\n   *  obtained from separate index shards.  The provided\n   *  groupSort must match how the groups were sorted, and\n   *  the provided SearchGroups must have been computed\n   *  with fillFields=true passed to {@link\n   *  AbstractFirstPassGroupingCollector#getTopGroups}.\n   *\n   * <p>NOTE: this returns null if the topGroups is empty.\n   */\n  public static <T> Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> topGroups, int offset, int topN, Sort groupSort)\n    throws IOException {\n    if (topGroups.isEmpty()) {\n      return null;\n    } else {\n      return new GroupMerger<T>(groupSort).merge(topGroups, offset, topN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup#[T]_merge(List[Collection[SearchGroup[T]]],int,int,Sort).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup#[T]_merge(List[Collection[SearchGroup[T]]],int,int,Sort).mjava","sourceNew":"  /** Merges multiple collections of top groups, for example\n   *  obtained from separate index shards.  The provided\n   *  groupSort must match how the groups were sorted, and\n   *  the provided SearchGroups must have been computed\n   *  with fillFields=true passed to {@link\n   *  FirstPassGroupingCollector#getTopGroups}.\n   *\n   * <p>NOTE: this returns null if the topGroups is empty.\n   */\n  public static <T> Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> topGroups, int offset, int topN, Sort groupSort)\n    throws IOException {\n    if (topGroups.isEmpty()) {\n      return null;\n    } else {\n      return new GroupMerger<T>(groupSort).merge(topGroups, offset, topN);\n    }\n  }\n\n","sourceOld":"  /** Merges multiple collections of top groups, for example\n   *  obtained from separate index shards.  The provided\n   *  groupSort must match how the groups were sorted, and\n   *  the provided SearchGroups must have been computed\n   *  with fillFields=true passed to {@link\n   *  AbstractFirstPassGroupingCollector#getTopGroups}.\n   *\n   * <p>NOTE: this returns null if the topGroups is empty.\n   */\n  public static <T> Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> topGroups, int offset, int topN, Sort groupSort)\n    throws IOException {\n    if (topGroups.isEmpty()) {\n      return null;\n    } else {\n      return new GroupMerger<T>(groupSort).merge(topGroups, offset, topN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e38c6374c23083c93e212a9498ff0a9c255476","date":1484767039,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup#[T]_merge(List[Collection[SearchGroup[T]]],int,int,Sort).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup#[T]_merge(List[Collection[SearchGroup[T]]],int,int,Sort).mjava","sourceNew":"  /** Merges multiple collections of top groups, for example\n   *  obtained from separate index shards.  The provided\n   *  groupSort must match how the groups were sorted, and\n   *  the provided SearchGroups must have been computed\n   *  with fillFields=true passed to {@link\n   *  FirstPassGroupingCollector#getTopGroups}.\n   *\n   * <p>NOTE: this returns null if the topGroups is empty.\n   */\n  public static <T> Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> topGroups, int offset, int topN, Sort groupSort) {\n    if (topGroups.isEmpty()) {\n      return null;\n    } else {\n      return new GroupMerger<T>(groupSort).merge(topGroups, offset, topN);\n    }\n  }\n\n","sourceOld":"  /** Merges multiple collections of top groups, for example\n   *  obtained from separate index shards.  The provided\n   *  groupSort must match how the groups were sorted, and\n   *  the provided SearchGroups must have been computed\n   *  with fillFields=true passed to {@link\n   *  FirstPassGroupingCollector#getTopGroups}.\n   *\n   * <p>NOTE: this returns null if the topGroups is empty.\n   */\n  public static <T> Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> topGroups, int offset, int topN, Sort groupSort)\n    throws IOException {\n    if (topGroups.isEmpty()) {\n      return null;\n    } else {\n      return new GroupMerger<T>(groupSort).merge(topGroups, offset, topN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup#[T]_merge(List[Collection[SearchGroup[T]]],int,int,Sort).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SearchGroup#[T]_merge(List[Collection[SearchGroup[T]]],int,int,Sort).mjava","sourceNew":"  /** Merges multiple collections of top groups, for example\n   *  obtained from separate index shards.  The provided\n   *  groupSort must match how the groups were sorted, and\n   *  the provided SearchGroups must have been computed\n   *  with fillFields=true passed to {@link\n   *  FirstPassGroupingCollector#getTopGroups}.\n   *\n   * <p>NOTE: this returns null if the topGroups is empty.\n   */\n  public static <T> Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> topGroups, int offset, int topN, Sort groupSort) {\n    if (topGroups.isEmpty()) {\n      return null;\n    } else {\n      return new GroupMerger<T>(groupSort).merge(topGroups, offset, topN);\n    }\n  }\n\n","sourceOld":"  /** Merges multiple collections of top groups, for example\n   *  obtained from separate index shards.  The provided\n   *  groupSort must match how the groups were sorted, and\n   *  the provided SearchGroups must have been computed\n   *  with fillFields=true passed to {@link\n   *  FirstPassGroupingCollector#getTopGroups}.\n   *\n   * <p>NOTE: this returns null if the topGroups is empty.\n   */\n  public static <T> Collection<SearchGroup<T>> merge(List<Collection<SearchGroup<T>>> topGroups, int offset, int topN, Sort groupSort)\n    throws IOException {\n    if (topGroups.isEmpty()) {\n      return null;\n    } else {\n      return new GroupMerger<T>(groupSort).merge(topGroups, offset, topN);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20e94e61fe5291647346b70437617e6b6c370408":["341fa5edecbe460c9e15d78786c68e3168ba1268"],"03e38c6374c23083c93e212a9498ff0a9c255476":["20e94e61fe5291647346b70437617e6b6c370408"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","20e94e61fe5291647346b70437617e6b6c370408"],"341fa5edecbe460c9e15d78786c68e3168ba1268":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","341fa5edecbe460c9e15d78786c68e3168ba1268"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","03e38c6374c23083c93e212a9498ff0a9c255476"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e38c6374c23083c93e212a9498ff0a9c255476"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["341fa5edecbe460c9e15d78786c68e3168ba1268","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"20e94e61fe5291647346b70437617e6b6c370408":["03e38c6374c23083c93e212a9498ff0a9c255476","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"03e38c6374c23083c93e212a9498ff0a9c255476":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"341fa5edecbe460c9e15d78786c68e3168ba1268":["20e94e61fe5291647346b70437617e6b6c370408","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}