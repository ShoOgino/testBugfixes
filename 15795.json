{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#pushDeletes(SegmentInfo,SegmentInfos).mjava","commits":[{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#pushDeletes(SegmentInfo,SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  private void pushDeletes(SegmentInfo newSegment, SegmentInfos segmentInfos) {\n    // Lock order: DW -> BD\n    if (pendingDeletes.any()) {\n      if (newSegment != null) {\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes to newSegment\");\n        }\n        bufferedDeletes.pushDeletes(pendingDeletes, newSegment);\n      } else if (segmentInfos.size() > 0) {\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes to previously flushed segment \" + segmentInfos.lastElement());\n        }\n        bufferedDeletes.pushDeletes(pendingDeletes, segmentInfos.lastElement(), true);\n      } else {\n        if (infoStream != null) {\n          message(\"flush: drop buffered deletes: no segments\");\n        }\n        // We can safely discard these deletes: since\n        // there are no segments, the deletions cannot\n        // affect anything.\n      }\n      pendingDeletes = new SegmentDeletes();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#pushDeletes(SegmentInfo,SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  private void pushDeletes(SegmentInfo newSegment, SegmentInfos segmentInfos) {\n    // Lock order: DW -> BD\n    if (pendingDeletes.any()) {\n      if (newSegment != null) {\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes to newSegment\");\n        }\n        bufferedDeletes.pushDeletes(pendingDeletes, newSegment);\n      } else if (segmentInfos.size() > 0) {\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes to previously flushed segment \" + segmentInfos.lastElement());\n        }\n        bufferedDeletes.pushDeletes(pendingDeletes, segmentInfos.lastElement(), true);\n      } else {\n        if (infoStream != null) {\n          message(\"flush: drop buffered deletes: no segments\");\n        }\n        // We can safely discard these deletes: since\n        // there are no segments, the deletions cannot\n        // affect anything.\n      }\n      pendingDeletes = new SegmentDeletes();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#pushDeletes(SegmentInfo,SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#pushDeletes(SegmentInfo,SegmentInfos).mjava","sourceNew":"  private void pushDeletes(SegmentInfo newSegment, SegmentInfos segmentInfos) {\n    // Lock order: DW -> BD\n    if (pendingDeletes.any()) {\n      if (segmentInfos.size() > 0 || newSegment != null) {\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes\");\n        }\n        bufferedDeletesStream.push(pendingDeletes);\n        if (infoStream != null) {\n          message(\"flush: delGen=\" + pendingDeletes.gen);\n        }\n        if (newSegment != null) {\n          newSegment.setBufferedDeletesGen(pendingDeletes.gen);\n        }\n      } else {\n        if (infoStream != null) {\n          message(\"flush: drop buffered deletes: no segments\");\n        }\n        // We can safely discard these deletes: since\n        // there are no segments, the deletions cannot\n        // affect anything.\n      }\n      pendingDeletes = new BufferedDeletes();\n    } else if (newSegment != null) {\n      newSegment.setBufferedDeletesGen(bufferedDeletesStream.getNextGen());\n    }\n  }\n\n","sourceOld":"  private void pushDeletes(SegmentInfo newSegment, SegmentInfos segmentInfos) {\n    // Lock order: DW -> BD\n    if (pendingDeletes.any()) {\n      if (newSegment != null) {\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes to newSegment\");\n        }\n        bufferedDeletes.pushDeletes(pendingDeletes, newSegment);\n      } else if (segmentInfos.size() > 0) {\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes to previously flushed segment \" + segmentInfos.lastElement());\n        }\n        bufferedDeletes.pushDeletes(pendingDeletes, segmentInfos.lastElement(), true);\n      } else {\n        if (infoStream != null) {\n          message(\"flush: drop buffered deletes: no segments\");\n        }\n        // We can safely discard these deletes: since\n        // there are no segments, the deletions cannot\n        // affect anything.\n      }\n      pendingDeletes = new SegmentDeletes();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69a6d2d525aeab53c867ed26934185e5bb627d0e","date":1296516902,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#pushDeletes(SegmentInfo,SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#pushDeletes(SegmentInfo,SegmentInfos).mjava","sourceNew":"  private void pushDeletes(SegmentInfo newSegment, SegmentInfos segmentInfos) {\n    // Lock order: DW -> BD\n    final long delGen = bufferedDeletesStream.getNextGen();\n    if (pendingDeletes.any()) {\n      if (segmentInfos.size() > 0 || newSegment != null) {\n        final FrozenBufferedDeletes packet = new FrozenBufferedDeletes(pendingDeletes, delGen);\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes\");\n        }\n        bufferedDeletesStream.push(packet);\n        if (infoStream != null) {\n          message(\"flush: delGen=\" + packet.gen);\n        }\n        if (newSegment != null) {\n          newSegment.setBufferedDeletesGen(packet.gen);\n        }\n      } else {\n        if (infoStream != null) {\n          message(\"flush: drop buffered deletes: no segments\");\n        }\n        // We can safely discard these deletes: since\n        // there are no segments, the deletions cannot\n        // affect anything.\n      }\n      pendingDeletes.clear();\n    } else if (newSegment != null) {\n      newSegment.setBufferedDeletesGen(delGen);\n    }\n  }\n\n","sourceOld":"  private void pushDeletes(SegmentInfo newSegment, SegmentInfos segmentInfos) {\n    // Lock order: DW -> BD\n    if (pendingDeletes.any()) {\n      if (segmentInfos.size() > 0 || newSegment != null) {\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes\");\n        }\n        bufferedDeletesStream.push(pendingDeletes);\n        if (infoStream != null) {\n          message(\"flush: delGen=\" + pendingDeletes.gen);\n        }\n        if (newSegment != null) {\n          newSegment.setBufferedDeletesGen(pendingDeletes.gen);\n        }\n      } else {\n        if (infoStream != null) {\n          message(\"flush: drop buffered deletes: no segments\");\n        }\n        // We can safely discard these deletes: since\n        // there are no segments, the deletions cannot\n        // affect anything.\n      }\n      pendingDeletes = new BufferedDeletes();\n    } else if (newSegment != null) {\n      newSegment.setBufferedDeletesGen(bufferedDeletesStream.getNextGen());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#pushDeletes(SegmentInfo,SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#pushDeletes(SegmentInfo,SegmentInfos).mjava","sourceNew":"  private void pushDeletes(SegmentInfo newSegment, SegmentInfos segmentInfos) {\n    // Lock order: DW -> BD\n    final long delGen = bufferedDeletesStream.getNextGen();\n    if (pendingDeletes.any()) {\n      if (segmentInfos.size() > 0 || newSegment != null) {\n        final FrozenBufferedDeletes packet = new FrozenBufferedDeletes(pendingDeletes, delGen);\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes\");\n        }\n        bufferedDeletesStream.push(packet);\n        if (infoStream != null) {\n          message(\"flush: delGen=\" + packet.gen);\n        }\n        if (newSegment != null) {\n          newSegment.setBufferedDeletesGen(packet.gen);\n        }\n      } else {\n        if (infoStream != null) {\n          message(\"flush: drop buffered deletes: no segments\");\n        }\n        // We can safely discard these deletes: since\n        // there are no segments, the deletions cannot\n        // affect anything.\n      }\n      pendingDeletes.clear();\n    } else if (newSegment != null) {\n      newSegment.setBufferedDeletesGen(delGen);\n    }\n  }\n\n","sourceOld":"  private void pushDeletes(SegmentInfo newSegment, SegmentInfos segmentInfos) {\n    // Lock order: DW -> BD\n    if (pendingDeletes.any()) {\n      if (newSegment != null) {\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes to newSegment\");\n        }\n        bufferedDeletes.pushDeletes(pendingDeletes, newSegment);\n      } else if (segmentInfos.size() > 0) {\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes to previously flushed segment \" + segmentInfos.lastElement());\n        }\n        bufferedDeletes.pushDeletes(pendingDeletes, segmentInfos.lastElement(), true);\n      } else {\n        if (infoStream != null) {\n          message(\"flush: drop buffered deletes: no segments\");\n        }\n        // We can safely discard these deletes: since\n        // there are no segments, the deletions cannot\n        // affect anything.\n      }\n      pendingDeletes = new SegmentDeletes();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75e860e394e2df132144a3591b21f1bf43903433","date":1299677114,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#pushDeletes(SegmentInfo,SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#pushDeletes(SegmentInfo,SegmentInfos).mjava","sourceNew":"  private void pushDeletes(SegmentInfo newSegment, SegmentInfos segmentInfos) {\n    // Lock order: DW -> BD\n    final long delGen = bufferedDeletesStream.getNextGen();\n    if (pendingDeletes.any()) {\n      if (segmentInfos.size() > 0 || newSegment != null) {\n        final FrozenBufferedDeletes packet = new FrozenBufferedDeletes(pendingDeletes, delGen);\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes startSize=\" + pendingDeletes.bytesUsed.get() + \" frozenSize=\" + packet.bytesUsed);\n        }\n        bufferedDeletesStream.push(packet);\n        if (infoStream != null) {\n          message(\"flush: delGen=\" + packet.gen);\n        }\n        if (newSegment != null) {\n          newSegment.setBufferedDeletesGen(packet.gen);\n        }\n      } else {\n        if (infoStream != null) {\n          message(\"flush: drop buffered deletes: no segments\");\n        }\n        // We can safely discard these deletes: since\n        // there are no segments, the deletions cannot\n        // affect anything.\n      }\n      pendingDeletes.clear();\n    } else if (newSegment != null) {\n      newSegment.setBufferedDeletesGen(delGen);\n    }\n  }\n\n","sourceOld":"  private void pushDeletes(SegmentInfo newSegment, SegmentInfos segmentInfos) {\n    // Lock order: DW -> BD\n    final long delGen = bufferedDeletesStream.getNextGen();\n    if (pendingDeletes.any()) {\n      if (segmentInfos.size() > 0 || newSegment != null) {\n        final FrozenBufferedDeletes packet = new FrozenBufferedDeletes(pendingDeletes, delGen);\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes\");\n        }\n        bufferedDeletesStream.push(packet);\n        if (infoStream != null) {\n          message(\"flush: delGen=\" + packet.gen);\n        }\n        if (newSegment != null) {\n          newSegment.setBufferedDeletesGen(packet.gen);\n        }\n      } else {\n        if (infoStream != null) {\n          message(\"flush: drop buffered deletes: no segments\");\n        }\n        // We can safely discard these deletes: since\n        // there are no segments, the deletions cannot\n        // affect anything.\n      }\n      pendingDeletes.clear();\n    } else if (newSegment != null) {\n      newSegment.setBufferedDeletesGen(delGen);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#pushDeletes(SegmentInfo,SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#pushDeletes(SegmentInfo,SegmentInfos).mjava","sourceNew":"  private void pushDeletes(SegmentInfo newSegment, SegmentInfos segmentInfos) {\n    // Lock order: DW -> BD\n    final long delGen = bufferedDeletesStream.getNextGen();\n    if (pendingDeletes.any()) {\n      if (segmentInfos.size() > 0 || newSegment != null) {\n        final FrozenBufferedDeletes packet = new FrozenBufferedDeletes(pendingDeletes, delGen);\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes startSize=\" + pendingDeletes.bytesUsed.get() + \" frozenSize=\" + packet.bytesUsed);\n        }\n        bufferedDeletesStream.push(packet);\n        if (infoStream != null) {\n          message(\"flush: delGen=\" + packet.gen);\n        }\n        if (newSegment != null) {\n          newSegment.setBufferedDeletesGen(packet.gen);\n        }\n      } else {\n        if (infoStream != null) {\n          message(\"flush: drop buffered deletes: no segments\");\n        }\n        // We can safely discard these deletes: since\n        // there are no segments, the deletions cannot\n        // affect anything.\n      }\n      pendingDeletes.clear();\n    } else if (newSegment != null) {\n      newSegment.setBufferedDeletesGen(delGen);\n    }\n  }\n\n","sourceOld":"  private void pushDeletes(SegmentInfo newSegment, SegmentInfos segmentInfos) {\n    // Lock order: DW -> BD\n    final long delGen = bufferedDeletesStream.getNextGen();\n    if (pendingDeletes.any()) {\n      if (segmentInfos.size() > 0 || newSegment != null) {\n        final FrozenBufferedDeletes packet = new FrozenBufferedDeletes(pendingDeletes, delGen);\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes\");\n        }\n        bufferedDeletesStream.push(packet);\n        if (infoStream != null) {\n          message(\"flush: delGen=\" + packet.gen);\n        }\n        if (newSegment != null) {\n          newSegment.setBufferedDeletesGen(packet.gen);\n        }\n      } else {\n        if (infoStream != null) {\n          message(\"flush: drop buffered deletes: no segments\");\n        }\n        // We can safely discard these deletes: since\n        // there are no segments, the deletions cannot\n        // affect anything.\n      }\n      pendingDeletes.clear();\n    } else if (newSegment != null) {\n      newSegment.setBufferedDeletesGen(delGen);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#pushDeletes(SegmentInfo,SegmentInfos).mjava","sourceNew":null,"sourceOld":"  private void pushDeletes(SegmentInfo newSegment, SegmentInfos segmentInfos) {\n    // Lock order: DW -> BD\n    final long delGen = bufferedDeletesStream.getNextGen();\n    if (pendingDeletes.any()) {\n      if (segmentInfos.size() > 0 || newSegment != null) {\n        final FrozenBufferedDeletes packet = new FrozenBufferedDeletes(pendingDeletes, delGen);\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes startSize=\" + pendingDeletes.bytesUsed.get() + \" frozenSize=\" + packet.bytesUsed);\n        }\n        bufferedDeletesStream.push(packet);\n        if (infoStream != null) {\n          message(\"flush: delGen=\" + packet.gen);\n        }\n        if (newSegment != null) {\n          newSegment.setBufferedDeletesGen(packet.gen);\n        }\n      } else {\n        if (infoStream != null) {\n          message(\"flush: drop buffered deletes: no segments\");\n        }\n        // We can safely discard these deletes: since\n        // there are no segments, the deletions cannot\n        // affect anything.\n      }\n      pendingDeletes.clear();\n    } else if (newSegment != null) {\n      newSegment.setBufferedDeletesGen(delGen);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#pushDeletes(SegmentInfo,SegmentInfos).mjava","sourceNew":null,"sourceOld":"  private void pushDeletes(SegmentInfo newSegment, SegmentInfos segmentInfos) {\n    // Lock order: DW -> BD\n    final long delGen = bufferedDeletesStream.getNextGen();\n    if (pendingDeletes.any()) {\n      if (segmentInfos.size() > 0 || newSegment != null) {\n        final FrozenBufferedDeletes packet = new FrozenBufferedDeletes(pendingDeletes, delGen);\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes startSize=\" + pendingDeletes.bytesUsed.get() + \" frozenSize=\" + packet.bytesUsed);\n        }\n        bufferedDeletesStream.push(packet);\n        if (infoStream != null) {\n          message(\"flush: delGen=\" + packet.gen);\n        }\n        if (newSegment != null) {\n          newSegment.setBufferedDeletesGen(packet.gen);\n        }\n      } else {\n        if (infoStream != null) {\n          message(\"flush: drop buffered deletes: no segments\");\n        }\n        // We can safely discard these deletes: since\n        // there are no segments, the deletions cannot\n        // affect anything.\n      }\n      pendingDeletes.clear();\n    } else if (newSegment != null) {\n      newSegment.setBufferedDeletesGen(delGen);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#pushDeletes(SegmentInfo,SegmentInfos).mjava","sourceNew":null,"sourceOld":"  private void pushDeletes(SegmentInfo newSegment, SegmentInfos segmentInfos) {\n    // Lock order: DW -> BD\n    final long delGen = bufferedDeletesStream.getNextGen();\n    if (pendingDeletes.any()) {\n      if (segmentInfos.size() > 0 || newSegment != null) {\n        final FrozenBufferedDeletes packet = new FrozenBufferedDeletes(pendingDeletes, delGen);\n        if (infoStream != null) {\n          message(\"flush: push buffered deletes startSize=\" + pendingDeletes.bytesUsed.get() + \" frozenSize=\" + packet.bytesUsed);\n        }\n        bufferedDeletesStream.push(packet);\n        if (infoStream != null) {\n          message(\"flush: delGen=\" + packet.gen);\n        }\n        if (newSegment != null) {\n          newSegment.setBufferedDeletesGen(packet.gen);\n        }\n      } else {\n        if (infoStream != null) {\n          message(\"flush: drop buffered deletes: no segments\");\n        }\n        // We can safely discard these deletes: since\n        // there are no segments, the deletions cannot\n        // affect anything.\n      }\n      pendingDeletes.clear();\n    } else if (newSegment != null) {\n      newSegment.setBufferedDeletesGen(delGen);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","75e860e394e2df132144a3591b21f1bf43903433"],"75e860e394e2df132144a3591b21f1bf43903433":["69a6d2d525aeab53c867ed26934185e5bb627d0e"],"a3776dccca01c11e7046323cfad46a3b4a471233":["75e860e394e2df132144a3591b21f1bf43903433","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["75e860e394e2df132144a3591b21f1bf43903433","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["c19f985e36a65cc969e8e564fe337a0d41512075"],"c19f985e36a65cc969e8e564fe337a0d41512075":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","c19f985e36a65cc969e8e564fe337a0d41512075"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"75e860e394e2df132144a3591b21f1bf43903433":["d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","b3e06be49006ecac364d39d12b9c9f74882f9b9f","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["75e860e394e2df132144a3591b21f1bf43903433","29ef99d61cda9641b6250bf9567329a6e65f901d"],"c19f985e36a65cc969e8e564fe337a0d41512075":["69a6d2d525aeab53c867ed26934185e5bb627d0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}