{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","commits":[{"id":"a027750b86452a8dcd054ac993d54b203dae9102","date":1451953949,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testParallelUpdateStream() throws Exception {\n    CloudSolrClient destinationCollectionClient = createCloudClient(\"parallelDestinationCollection\");\n    createCollection(\"parallelDestinationCollection\", destinationCollectionClient, 2, 2);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\");\n    commit();\n    waitForRecoveriesToFinish(\"parallelDestinationCollection\", false);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    \n    String zkHost = zkServer.getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    //Copy all docs to destinationCollection\n    String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n    TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\"+zkHost+\"\\\", sort=\\\"batchNumber asc\\\")\");\n    List<Tuple> tuples = getTuples(parallelUpdateStream);\n    destinationCollectionClient.commit();\n    \n    //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n    long count = 0;\n\n    for(Tuple tuple : tuples) {\n      count+=tuple.getLong(\"batchIndexed\");\n    }\n\n    assert(count == 5);\n\n    //Ensure that destinationCollection actually has the new docs.\n    expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(5, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getLong(\"id\") == 0);\n    assert(tuple.get(\"a_s\").equals(\"hello0\"));\n    assert(tuple.getLong(\"a_i\") == 0);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n    tuple = tuples.get(1);\n    assert(tuple.getLong(\"id\") == 1);\n    assert(tuple.get(\"a_s\").equals(\"hello1\"));\n    assert(tuple.getLong(\"a_i\") == 1);\n    assert(tuple.getDouble(\"a_f\") == 1.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n    tuple = tuples.get(2);\n    assert(tuple.getLong(\"id\") == 2);\n    assert(tuple.get(\"a_s\").equals(\"hello2\"));\n    assert(tuple.getLong(\"a_i\") == 2);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n    tuple = tuples.get(3);\n    assert(tuple.getLong(\"id\") == 3);\n    assert(tuple.get(\"a_s\").equals(\"hello3\"));\n    assert(tuple.getLong(\"a_i\") == 3);\n    assert(tuple.getDouble(\"a_f\") == 3.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n    tuple = tuples.get(4);\n    assert(tuple.getLong(\"id\") == 4);\n    assert(tuple.get(\"a_s\").equals(\"hello4\"));\n    assert(tuple.getLong(\"a_i\") == 4);\n    assert(tuple.getDouble(\"a_f\") == 4.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n\n    destinationCollectionClient.deleteByQuery(\"*:*\");\n    destinationCollectionClient.commit();\n    destinationCollectionClient.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","sourceNew":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    //Copy all docs to destinationCollection\n    String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n    TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\"+zkHost+\"\\\", sort=\\\"batchNumber asc\\\")\");\n    List<Tuple> tuples = getTuples(parallelUpdateStream);\n    cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n    \n    //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n    long count = 0;\n\n    for(Tuple tuple : tuples) {\n      count+=tuple.getLong(\"batchIndexed\");\n    }\n\n    assert(count == 5);\n\n    //Ensure that destinationCollection actually has the new docs.\n    expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(5, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getLong(\"id\") == 0);\n    assert(tuple.get(\"a_s\").equals(\"hello0\"));\n    assert(tuple.getLong(\"a_i\") == 0);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n    tuple = tuples.get(1);\n    assert(tuple.getLong(\"id\") == 1);\n    assert(tuple.get(\"a_s\").equals(\"hello1\"));\n    assert(tuple.getLong(\"a_i\") == 1);\n    assert(tuple.getDouble(\"a_f\") == 1.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n    tuple = tuples.get(2);\n    assert(tuple.getLong(\"id\") == 2);\n    assert(tuple.get(\"a_s\").equals(\"hello2\"));\n    assert(tuple.getLong(\"a_i\") == 2);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n    tuple = tuples.get(3);\n    assert(tuple.getLong(\"id\") == 3);\n    assert(tuple.get(\"a_s\").equals(\"hello3\"));\n    assert(tuple.getLong(\"a_i\") == 3);\n    assert(tuple.getDouble(\"a_f\") == 3.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n    tuple = tuples.get(4);\n    assert(tuple.getLong(\"id\") == 4);\n    assert(tuple.get(\"a_s\").equals(\"hello4\"));\n    assert(tuple.getLong(\"a_i\") == 4);\n    assert(tuple.getDouble(\"a_f\") == 4.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n\n  }\n\n","sourceOld":"  private void testParallelUpdateStream() throws Exception {\n    CloudSolrClient destinationCollectionClient = createCloudClient(\"parallelDestinationCollection\");\n    createCollection(\"parallelDestinationCollection\", destinationCollectionClient, 2, 2);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\");\n    commit();\n    waitForRecoveriesToFinish(\"parallelDestinationCollection\", false);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    \n    String zkHost = zkServer.getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    //Copy all docs to destinationCollection\n    String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n    TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\"+zkHost+\"\\\", sort=\\\"batchNumber asc\\\")\");\n    List<Tuple> tuples = getTuples(parallelUpdateStream);\n    destinationCollectionClient.commit();\n    \n    //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n    long count = 0;\n\n    for(Tuple tuple : tuples) {\n      count+=tuple.getLong(\"batchIndexed\");\n    }\n\n    assert(count == 5);\n\n    //Ensure that destinationCollection actually has the new docs.\n    expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(5, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getLong(\"id\") == 0);\n    assert(tuple.get(\"a_s\").equals(\"hello0\"));\n    assert(tuple.getLong(\"a_i\") == 0);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n    tuple = tuples.get(1);\n    assert(tuple.getLong(\"id\") == 1);\n    assert(tuple.get(\"a_s\").equals(\"hello1\"));\n    assert(tuple.getLong(\"a_i\") == 1);\n    assert(tuple.getDouble(\"a_f\") == 1.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n    tuple = tuples.get(2);\n    assert(tuple.getLong(\"id\") == 2);\n    assert(tuple.get(\"a_s\").equals(\"hello2\"));\n    assert(tuple.getLong(\"a_i\") == 2);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n    tuple = tuples.get(3);\n    assert(tuple.getLong(\"id\") == 3);\n    assert(tuple.get(\"a_s\").equals(\"hello3\"));\n    assert(tuple.getLong(\"a_i\") == 3);\n    assert(tuple.getDouble(\"a_f\") == 3.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n    tuple = tuples.get(4);\n    assert(tuple.getLong(\"id\") == 4);\n    assert(tuple.get(\"a_s\").equals(\"hello4\"));\n    assert(tuple.getLong(\"a_i\") == 4);\n    assert(tuple.getDouble(\"a_f\") == 4.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n\n    destinationCollectionClient.deleteByQuery(\"*:*\");\n    destinationCollectionClient.commit();\n    destinationCollectionClient.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","sourceNew":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    //Copy all docs to destinationCollection\n    String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n    TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\"+zkHost+\"\\\", sort=\\\"batchNumber asc\\\")\");\n    List<Tuple> tuples = getTuples(parallelUpdateStream);\n    cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n    \n    //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n    long count = 0;\n\n    for(Tuple tuple : tuples) {\n      count+=tuple.getLong(\"batchIndexed\");\n    }\n\n    assert(count == 5);\n\n    //Ensure that destinationCollection actually has the new docs.\n    expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(5, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getLong(\"id\") == 0);\n    assert(tuple.get(\"a_s\").equals(\"hello0\"));\n    assert(tuple.getLong(\"a_i\") == 0);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n    tuple = tuples.get(1);\n    assert(tuple.getLong(\"id\") == 1);\n    assert(tuple.get(\"a_s\").equals(\"hello1\"));\n    assert(tuple.getLong(\"a_i\") == 1);\n    assert(tuple.getDouble(\"a_f\") == 1.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n    tuple = tuples.get(2);\n    assert(tuple.getLong(\"id\") == 2);\n    assert(tuple.get(\"a_s\").equals(\"hello2\"));\n    assert(tuple.getLong(\"a_i\") == 2);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n    tuple = tuples.get(3);\n    assert(tuple.getLong(\"id\") == 3);\n    assert(tuple.get(\"a_s\").equals(\"hello3\"));\n    assert(tuple.getLong(\"a_i\") == 3);\n    assert(tuple.getDouble(\"a_f\") == 3.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n    tuple = tuples.get(4);\n    assert(tuple.getLong(\"id\") == 4);\n    assert(tuple.get(\"a_s\").equals(\"hello4\"));\n    assert(tuple.getLong(\"a_i\") == 4);\n    assert(tuple.getDouble(\"a_f\") == 4.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n\n  }\n\n","sourceOld":"  private void testParallelUpdateStream() throws Exception {\n    CloudSolrClient destinationCollectionClient = createCloudClient(\"parallelDestinationCollection\");\n    createCollection(\"parallelDestinationCollection\", destinationCollectionClient, 2, 2);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\");\n    commit();\n    waitForRecoveriesToFinish(\"parallelDestinationCollection\", false);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    \n    String zkHost = zkServer.getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    //Copy all docs to destinationCollection\n    String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n    TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\"+zkHost+\"\\\", sort=\\\"batchNumber asc\\\")\");\n    List<Tuple> tuples = getTuples(parallelUpdateStream);\n    destinationCollectionClient.commit();\n    \n    //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n    long count = 0;\n\n    for(Tuple tuple : tuples) {\n      count+=tuple.getLong(\"batchIndexed\");\n    }\n\n    assert(count == 5);\n\n    //Ensure that destinationCollection actually has the new docs.\n    expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(5, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getLong(\"id\") == 0);\n    assert(tuple.get(\"a_s\").equals(\"hello0\"));\n    assert(tuple.getLong(\"a_i\") == 0);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n    tuple = tuples.get(1);\n    assert(tuple.getLong(\"id\") == 1);\n    assert(tuple.get(\"a_s\").equals(\"hello1\"));\n    assert(tuple.getLong(\"a_i\") == 1);\n    assert(tuple.getDouble(\"a_f\") == 1.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n    tuple = tuples.get(2);\n    assert(tuple.getLong(\"id\") == 2);\n    assert(tuple.get(\"a_s\").equals(\"hello2\"));\n    assert(tuple.getLong(\"a_i\") == 2);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n    tuple = tuples.get(3);\n    assert(tuple.getLong(\"id\") == 3);\n    assert(tuple.get(\"a_s\").equals(\"hello3\"));\n    assert(tuple.getLong(\"a_i\") == 3);\n    assert(tuple.getDouble(\"a_f\") == 3.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n    tuple = tuples.get(4);\n    assert(tuple.getLong(\"id\") == 4);\n    assert(tuple.get(\"a_s\").equals(\"hello4\"));\n    assert(tuple.getLong(\"a_i\") == 4);\n    assert(tuple.getDouble(\"a_f\") == 4.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n\n    destinationCollectionClient.deleteByQuery(\"*:*\");\n    destinationCollectionClient.commit();\n    destinationCollectionClient.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","sourceNew":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    //Copy all docs to destinationCollection\n    String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n    TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\"+zkHost+\"\\\", sort=\\\"batchNumber asc\\\")\");\n    List<Tuple> tuples = getTuples(parallelUpdateStream);\n    cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n    \n    //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n    long count = 0;\n\n    for(Tuple tuple : tuples) {\n      count+=tuple.getLong(\"batchIndexed\");\n    }\n\n    assert(count == 5);\n\n    //Ensure that destinationCollection actually has the new docs.\n    expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(5, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getLong(\"id\") == 0);\n    assert(tuple.get(\"a_s\").equals(\"hello0\"));\n    assert(tuple.getLong(\"a_i\") == 0);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n    tuple = tuples.get(1);\n    assert(tuple.getLong(\"id\") == 1);\n    assert(tuple.get(\"a_s\").equals(\"hello1\"));\n    assert(tuple.getLong(\"a_i\") == 1);\n    assert(tuple.getDouble(\"a_f\") == 1.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n    tuple = tuples.get(2);\n    assert(tuple.getLong(\"id\") == 2);\n    assert(tuple.get(\"a_s\").equals(\"hello2\"));\n    assert(tuple.getLong(\"a_i\") == 2);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n    tuple = tuples.get(3);\n    assert(tuple.getLong(\"id\") == 3);\n    assert(tuple.get(\"a_s\").equals(\"hello3\"));\n    assert(tuple.getLong(\"a_i\") == 3);\n    assert(tuple.getDouble(\"a_f\") == 3.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n    tuple = tuples.get(4);\n    assert(tuple.getLong(\"id\") == 4);\n    assert(tuple.get(\"a_s\").equals(\"hello4\"));\n    assert(tuple.getLong(\"a_i\") == 4);\n    assert(tuple.getDouble(\"a_f\") == 4.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n\n  }\n\n","sourceOld":"  private void testParallelUpdateStream() throws Exception {\n    CloudSolrClient destinationCollectionClient = createCloudClient(\"parallelDestinationCollection\");\n    createCollection(\"parallelDestinationCollection\", destinationCollectionClient, 2, 2);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\");\n    commit();\n    waitForRecoveriesToFinish(\"parallelDestinationCollection\", false);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    \n    String zkHost = zkServer.getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    //Copy all docs to destinationCollection\n    String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n    TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\"+zkHost+\"\\\", sort=\\\"batchNumber asc\\\")\");\n    List<Tuple> tuples = getTuples(parallelUpdateStream);\n    destinationCollectionClient.commit();\n    \n    //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n    long count = 0;\n\n    for(Tuple tuple : tuples) {\n      count+=tuple.getLong(\"batchIndexed\");\n    }\n\n    assert(count == 5);\n\n    //Ensure that destinationCollection actually has the new docs.\n    expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(5, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getLong(\"id\") == 0);\n    assert(tuple.get(\"a_s\").equals(\"hello0\"));\n    assert(tuple.getLong(\"a_i\") == 0);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n    tuple = tuples.get(1);\n    assert(tuple.getLong(\"id\") == 1);\n    assert(tuple.get(\"a_s\").equals(\"hello1\"));\n    assert(tuple.getLong(\"a_i\") == 1);\n    assert(tuple.getDouble(\"a_f\") == 1.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n    tuple = tuples.get(2);\n    assert(tuple.getLong(\"id\") == 2);\n    assert(tuple.get(\"a_s\").equals(\"hello2\"));\n    assert(tuple.getLong(\"a_i\") == 2);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n    tuple = tuples.get(3);\n    assert(tuple.getLong(\"id\") == 3);\n    assert(tuple.get(\"a_s\").equals(\"hello3\"));\n    assert(tuple.getLong(\"a_i\") == 3);\n    assert(tuple.getDouble(\"a_f\") == 3.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n    tuple = tuples.get(4);\n    assert(tuple.getLong(\"id\") == 4);\n    assert(tuple.get(\"a_s\").equals(\"hello4\"));\n    assert(tuple.getLong(\"a_i\") == 4);\n    assert(tuple.getDouble(\"a_f\") == 4.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n\n    destinationCollectionClient.deleteByQuery(\"*:*\");\n    destinationCollectionClient.commit();\n    destinationCollectionClient.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","sourceNew":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    //Copy all docs to destinationCollection\n    String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n    TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\"+zkHost+\"\\\", sort=\\\"batchNumber asc\\\")\");\n    List<Tuple> tuples = getTuples(parallelUpdateStream);\n    cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n    \n    //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n    long count = 0;\n\n    for(Tuple tuple : tuples) {\n      count+=tuple.getLong(\"batchIndexed\");\n    }\n\n    assert(count == 5);\n\n    //Ensure that destinationCollection actually has the new docs.\n    expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(5, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getLong(\"id\") == 0);\n    assert(tuple.get(\"a_s\").equals(\"hello0\"));\n    assert(tuple.getLong(\"a_i\") == 0);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n    tuple = tuples.get(1);\n    assert(tuple.getLong(\"id\") == 1);\n    assert(tuple.get(\"a_s\").equals(\"hello1\"));\n    assert(tuple.getLong(\"a_i\") == 1);\n    assert(tuple.getDouble(\"a_f\") == 1.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n    tuple = tuples.get(2);\n    assert(tuple.getLong(\"id\") == 2);\n    assert(tuple.get(\"a_s\").equals(\"hello2\"));\n    assert(tuple.getLong(\"a_i\") == 2);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n    tuple = tuples.get(3);\n    assert(tuple.getLong(\"id\") == 3);\n    assert(tuple.get(\"a_s\").equals(\"hello3\"));\n    assert(tuple.getLong(\"a_i\") == 3);\n    assert(tuple.getDouble(\"a_f\") == 3.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n    tuple = tuples.get(4);\n    assert(tuple.getLong(\"id\") == 4);\n    assert(tuple.get(\"a_s\").equals(\"hello4\"));\n    assert(tuple.getLong(\"a_i\") == 4);\n    assert(tuple.getDouble(\"a_f\") == 4.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n\n  }\n\n","sourceOld":"  private void testParallelUpdateStream() throws Exception {\n    CloudSolrClient destinationCollectionClient = createCloudClient(\"parallelDestinationCollection\");\n    createCollection(\"parallelDestinationCollection\", destinationCollectionClient, 2, 2);\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\");\n    commit();\n    waitForRecoveriesToFinish(\"parallelDestinationCollection\", false);\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    \n    String zkHost = zkServer.getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    //Copy all docs to destinationCollection\n    String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n    TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\"+zkHost+\"\\\", sort=\\\"batchNumber asc\\\")\");\n    List<Tuple> tuples = getTuples(parallelUpdateStream);\n    destinationCollectionClient.commit();\n    \n    //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n    long count = 0;\n\n    for(Tuple tuple : tuples) {\n      count+=tuple.getLong(\"batchIndexed\");\n    }\n\n    assert(count == 5);\n\n    //Ensure that destinationCollection actually has the new docs.\n    expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(5, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getLong(\"id\") == 0);\n    assert(tuple.get(\"a_s\").equals(\"hello0\"));\n    assert(tuple.getLong(\"a_i\") == 0);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n    tuple = tuples.get(1);\n    assert(tuple.getLong(\"id\") == 1);\n    assert(tuple.get(\"a_s\").equals(\"hello1\"));\n    assert(tuple.getLong(\"a_i\") == 1);\n    assert(tuple.getDouble(\"a_f\") == 1.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n    tuple = tuples.get(2);\n    assert(tuple.getLong(\"id\") == 2);\n    assert(tuple.get(\"a_s\").equals(\"hello2\"));\n    assert(tuple.getLong(\"a_i\") == 2);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n    tuple = tuples.get(3);\n    assert(tuple.getLong(\"id\") == 3);\n    assert(tuple.get(\"a_s\").equals(\"hello3\"));\n    assert(tuple.getLong(\"a_i\") == 3);\n    assert(tuple.getDouble(\"a_f\") == 3.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n    tuple = tuples.get(4);\n    assert(tuple.getLong(\"id\") == 4);\n    assert(tuple.get(\"a_s\").equals(\"hello4\"));\n    assert(tuple.getLong(\"a_i\") == 4);\n    assert(tuple.getDouble(\"a_f\") == 4.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n\n    destinationCollectionClient.deleteByQuery(\"*:*\");\n    destinationCollectionClient.commit();\n    destinationCollectionClient.close();\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91","date":1470238980,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","sourceNew":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    //Copy all docs to destinationCollection\n    String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n    TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\"+zkHost+\"\\\", sort=\\\"batchNumber asc\\\")\");\n    List<Tuple> tuples = getTuples(parallelUpdateStream);\n    cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n    \n    //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n    long count = 0;\n\n    for(Tuple tuple : tuples) {\n      count+=tuple.getLong(\"batchIndexed\");\n    }\n\n    assert(count == 5);\n\n    //Ensure that destinationCollection actually has the new docs.\n    expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(5, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getLong(\"id\") == 0);\n    assert(tuple.get(\"a_s\").equals(\"hello0\"));\n    assert(tuple.getLong(\"a_i\") == 0);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n    tuple = tuples.get(1);\n    assert(tuple.getLong(\"id\") == 1);\n    assert(tuple.get(\"a_s\").equals(\"hello1\"));\n    assert(tuple.getLong(\"a_i\") == 1);\n    assert(tuple.getDouble(\"a_f\") == 1.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n    tuple = tuples.get(2);\n    assert(tuple.getLong(\"id\") == 2);\n    assert(tuple.get(\"a_s\").equals(\"hello2\"));\n    assert(tuple.getLong(\"a_i\") == 2);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n    tuple = tuples.get(3);\n    assert(tuple.getLong(\"id\") == 3);\n    assert(tuple.get(\"a_s\").equals(\"hello3\"));\n    assert(tuple.getLong(\"a_i\") == 3);\n    assert(tuple.getDouble(\"a_f\") == 3.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n    tuple = tuples.get(4);\n    assert(tuple.getLong(\"id\") == 4);\n    assert(tuple.get(\"a_s\").equals(\"hello4\"));\n    assert(tuple.getLong(\"a_i\") == 4);\n    assert(tuple.getDouble(\"a_f\") == 4.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n\n    CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection\").process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    //Copy all docs to destinationCollection\n    String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n    TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\"+zkHost+\"\\\", sort=\\\"batchNumber asc\\\")\");\n    List<Tuple> tuples = getTuples(parallelUpdateStream);\n    cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n    \n    //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n    long count = 0;\n\n    for(Tuple tuple : tuples) {\n      count+=tuple.getLong(\"batchIndexed\");\n    }\n\n    assert(count == 5);\n\n    //Ensure that destinationCollection actually has the new docs.\n    expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(5, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getLong(\"id\") == 0);\n    assert(tuple.get(\"a_s\").equals(\"hello0\"));\n    assert(tuple.getLong(\"a_i\") == 0);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n    tuple = tuples.get(1);\n    assert(tuple.getLong(\"id\") == 1);\n    assert(tuple.get(\"a_s\").equals(\"hello1\"));\n    assert(tuple.getLong(\"a_i\") == 1);\n    assert(tuple.getDouble(\"a_f\") == 1.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n    tuple = tuples.get(2);\n    assert(tuple.getLong(\"id\") == 2);\n    assert(tuple.get(\"a_s\").equals(\"hello2\"));\n    assert(tuple.getLong(\"a_i\") == 2);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n    tuple = tuples.get(3);\n    assert(tuple.getLong(\"id\") == 3);\n    assert(tuple.get(\"a_s\").equals(\"hello3\"));\n    assert(tuple.getLong(\"a_i\") == 3);\n    assert(tuple.getDouble(\"a_f\") == 3.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n    tuple = tuples.get(4);\n    assert(tuple.getLong(\"id\") == 4);\n    assert(tuple.get(\"a_s\").equals(\"hello4\"));\n    assert(tuple.getLong(\"a_i\") == 4);\n    assert(tuple.getDouble(\"a_f\") == 4.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","sourceNew":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    //Copy all docs to destinationCollection\n    String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n    TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\"+zkHost+\"\\\", sort=\\\"batchNumber asc\\\")\");\n    List<Tuple> tuples = getTuples(parallelUpdateStream);\n    cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n    \n    //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n    long count = 0;\n\n    for(Tuple tuple : tuples) {\n      count+=tuple.getLong(\"batchIndexed\");\n    }\n\n    assert(count == 5);\n\n    //Ensure that destinationCollection actually has the new docs.\n    expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(5, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getLong(\"id\") == 0);\n    assert(tuple.get(\"a_s\").equals(\"hello0\"));\n    assert(tuple.getLong(\"a_i\") == 0);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n    tuple = tuples.get(1);\n    assert(tuple.getLong(\"id\") == 1);\n    assert(tuple.get(\"a_s\").equals(\"hello1\"));\n    assert(tuple.getLong(\"a_i\") == 1);\n    assert(tuple.getDouble(\"a_f\") == 1.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n    tuple = tuples.get(2);\n    assert(tuple.getLong(\"id\") == 2);\n    assert(tuple.get(\"a_s\").equals(\"hello2\"));\n    assert(tuple.getLong(\"a_i\") == 2);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n    tuple = tuples.get(3);\n    assert(tuple.getLong(\"id\") == 3);\n    assert(tuple.get(\"a_s\").equals(\"hello3\"));\n    assert(tuple.getLong(\"a_i\") == 3);\n    assert(tuple.getDouble(\"a_f\") == 3.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n    tuple = tuples.get(4);\n    assert(tuple.getLong(\"id\") == 4);\n    assert(tuple.get(\"a_s\").equals(\"hello4\"));\n    assert(tuple.getLong(\"a_i\") == 4);\n    assert(tuple.getDouble(\"a_f\") == 4.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n\n    CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection\").process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    //Copy all docs to destinationCollection\n    String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n    TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\"+zkHost+\"\\\", sort=\\\"batchNumber asc\\\")\");\n    List<Tuple> tuples = getTuples(parallelUpdateStream);\n    cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n    \n    //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n    long count = 0;\n\n    for(Tuple tuple : tuples) {\n      count+=tuple.getLong(\"batchIndexed\");\n    }\n\n    assert(count == 5);\n\n    //Ensure that destinationCollection actually has the new docs.\n    expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(5, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getLong(\"id\") == 0);\n    assert(tuple.get(\"a_s\").equals(\"hello0\"));\n    assert(tuple.getLong(\"a_i\") == 0);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n    tuple = tuples.get(1);\n    assert(tuple.getLong(\"id\") == 1);\n    assert(tuple.get(\"a_s\").equals(\"hello1\"));\n    assert(tuple.getLong(\"a_i\") == 1);\n    assert(tuple.getDouble(\"a_f\") == 1.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n    tuple = tuples.get(2);\n    assert(tuple.getLong(\"id\") == 2);\n    assert(tuple.get(\"a_s\").equals(\"hello2\"));\n    assert(tuple.getLong(\"a_i\") == 2);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n    tuple = tuples.get(3);\n    assert(tuple.getLong(\"id\") == 3);\n    assert(tuple.get(\"a_s\").equals(\"hello3\"));\n    assert(tuple.getLong(\"a_i\") == 3);\n    assert(tuple.getDouble(\"a_f\") == 3.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n    tuple = tuples.get(4);\n    assert(tuple.getLong(\"id\") == 4);\n    assert(tuple.get(\"a_s\").equals(\"hello4\"));\n    assert(tuple.getLong(\"a_i\") == 4);\n    assert(tuple.getDouble(\"a_f\") == 4.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","sourceNew":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    //Copy all docs to destinationCollection\n    String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n    TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\"+zkHost+\"\\\", sort=\\\"batchNumber asc\\\")\");\n    List<Tuple> tuples = getTuples(parallelUpdateStream);\n    cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n    \n    //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n    long count = 0;\n\n    for(Tuple tuple : tuples) {\n      count+=tuple.getLong(\"batchIndexed\");\n    }\n\n    assert(count == 5);\n\n    //Ensure that destinationCollection actually has the new docs.\n    expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(5, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getLong(\"id\") == 0);\n    assert(tuple.get(\"a_s\").equals(\"hello0\"));\n    assert(tuple.getLong(\"a_i\") == 0);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n    tuple = tuples.get(1);\n    assert(tuple.getLong(\"id\") == 1);\n    assert(tuple.get(\"a_s\").equals(\"hello1\"));\n    assert(tuple.getLong(\"a_i\") == 1);\n    assert(tuple.getDouble(\"a_f\") == 1.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n    tuple = tuples.get(2);\n    assert(tuple.getLong(\"id\") == 2);\n    assert(tuple.get(\"a_s\").equals(\"hello2\"));\n    assert(tuple.getLong(\"a_i\") == 2);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n    tuple = tuples.get(3);\n    assert(tuple.getLong(\"id\") == 3);\n    assert(tuple.get(\"a_s\").equals(\"hello3\"));\n    assert(tuple.getLong(\"a_i\") == 3);\n    assert(tuple.getDouble(\"a_f\") == 3.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n    tuple = tuples.get(4);\n    assert(tuple.getLong(\"id\") == 4);\n    assert(tuple.get(\"a_s\").equals(\"hello4\"));\n    assert(tuple.getLong(\"a_i\") == 4);\n    assert(tuple.getDouble(\"a_f\") == 4.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n\n    CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection\").process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    //Copy all docs to destinationCollection\n    String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n    TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\"+zkHost+\"\\\", sort=\\\"batchNumber asc\\\")\");\n    List<Tuple> tuples = getTuples(parallelUpdateStream);\n    cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n    \n    //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n    long count = 0;\n\n    for(Tuple tuple : tuples) {\n      count+=tuple.getLong(\"batchIndexed\");\n    }\n\n    assert(count == 5);\n\n    //Ensure that destinationCollection actually has the new docs.\n    expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(5, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getLong(\"id\") == 0);\n    assert(tuple.get(\"a_s\").equals(\"hello0\"));\n    assert(tuple.getLong(\"a_i\") == 0);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n    tuple = tuples.get(1);\n    assert(tuple.getLong(\"id\") == 1);\n    assert(tuple.get(\"a_s\").equals(\"hello1\"));\n    assert(tuple.getLong(\"a_i\") == 1);\n    assert(tuple.getDouble(\"a_f\") == 1.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n    tuple = tuples.get(2);\n    assert(tuple.getLong(\"id\") == 2);\n    assert(tuple.get(\"a_s\").equals(\"hello2\"));\n    assert(tuple.getLong(\"a_i\") == 2);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n    tuple = tuples.get(3);\n    assert(tuple.getLong(\"id\") == 3);\n    assert(tuple.get(\"a_s\").equals(\"hello3\"));\n    assert(tuple.getLong(\"a_i\") == 3);\n    assert(tuple.getDouble(\"a_f\") == 3.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n    tuple = tuples.get(4);\n    assert(tuple.getLong(\"id\") == 4);\n    assert(tuple.get(\"a_s\").equals(\"hello4\"));\n    assert(tuple.getLong(\"a_i\") == 4);\n    assert(tuple.getDouble(\"a_f\") == 4.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","sourceNew":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    try {\n      //Copy all docs to destinationCollection\n      String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n      TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"batchNumber asc\\\")\");\n      parallelUpdateStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelUpdateStream);\n      cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n\n      //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n      long count = 0;\n\n      for (Tuple tuple : tuples) {\n        count += tuple.getLong(\"batchIndexed\");\n      }\n\n      assert (count == 5);\n\n      //Ensure that destinationCollection actually has the new docs.\n      expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    //Copy all docs to destinationCollection\n    String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n    TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\"+zkHost+\"\\\", sort=\\\"batchNumber asc\\\")\");\n    List<Tuple> tuples = getTuples(parallelUpdateStream);\n    cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n    \n    //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n    long count = 0;\n\n    for(Tuple tuple : tuples) {\n      count+=tuple.getLong(\"batchIndexed\");\n    }\n\n    assert(count == 5);\n\n    //Ensure that destinationCollection actually has the new docs.\n    expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(5, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getLong(\"id\") == 0);\n    assert(tuple.get(\"a_s\").equals(\"hello0\"));\n    assert(tuple.getLong(\"a_i\") == 0);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n    tuple = tuples.get(1);\n    assert(tuple.getLong(\"id\") == 1);\n    assert(tuple.get(\"a_s\").equals(\"hello1\"));\n    assert(tuple.getLong(\"a_i\") == 1);\n    assert(tuple.getDouble(\"a_f\") == 1.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n    tuple = tuples.get(2);\n    assert(tuple.getLong(\"id\") == 2);\n    assert(tuple.get(\"a_s\").equals(\"hello2\"));\n    assert(tuple.getLong(\"a_i\") == 2);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n    tuple = tuples.get(3);\n    assert(tuple.getLong(\"id\") == 3);\n    assert(tuple.get(\"a_s\").equals(\"hello3\"));\n    assert(tuple.getLong(\"a_i\") == 3);\n    assert(tuple.getDouble(\"a_f\") == 3.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n    tuple = tuples.get(4);\n    assert(tuple.getLong(\"id\") == 4);\n    assert(tuple.get(\"a_s\").equals(\"hello4\"));\n    assert(tuple.getLong(\"a_i\") == 4);\n    assert(tuple.getDouble(\"a_f\") == 4.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n\n    CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection\").process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","sourceNew":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    try {\n      //Copy all docs to destinationCollection\n      String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n      TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"batchNumber asc\\\")\");\n      parallelUpdateStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelUpdateStream);\n      cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n\n      //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n      long count = 0;\n\n      for (Tuple tuple : tuples) {\n        count += tuple.getLong(\"batchIndexed\");\n      }\n\n      assert (count == 5);\n\n      //Ensure that destinationCollection actually has the new docs.\n      expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    //Copy all docs to destinationCollection\n    String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n    TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\"+zkHost+\"\\\", sort=\\\"batchNumber asc\\\")\");\n    List<Tuple> tuples = getTuples(parallelUpdateStream);\n    cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n    \n    //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n    long count = 0;\n\n    for(Tuple tuple : tuples) {\n      count+=tuple.getLong(\"batchIndexed\");\n    }\n\n    assert(count == 5);\n\n    //Ensure that destinationCollection actually has the new docs.\n    expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n    stream = new CloudSolrStream(expression, factory);\n    tuples = getTuples(stream);\n    assertEquals(5, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assert(tuple.getLong(\"id\") == 0);\n    assert(tuple.get(\"a_s\").equals(\"hello0\"));\n    assert(tuple.getLong(\"a_i\") == 0);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n    tuple = tuples.get(1);\n    assert(tuple.getLong(\"id\") == 1);\n    assert(tuple.get(\"a_s\").equals(\"hello1\"));\n    assert(tuple.getLong(\"a_i\") == 1);\n    assert(tuple.getDouble(\"a_f\") == 1.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n    tuple = tuples.get(2);\n    assert(tuple.getLong(\"id\") == 2);\n    assert(tuple.get(\"a_s\").equals(\"hello2\"));\n    assert(tuple.getLong(\"a_i\") == 2);\n    assert(tuple.getDouble(\"a_f\") == 0.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n    tuple = tuples.get(3);\n    assert(tuple.getLong(\"id\") == 3);\n    assert(tuple.get(\"a_s\").equals(\"hello3\"));\n    assert(tuple.getLong(\"a_i\") == 3);\n    assert(tuple.getDouble(\"a_f\") == 3.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n    tuple = tuples.get(4);\n    assert(tuple.getLong(\"id\") == 4);\n    assert(tuple.get(\"a_s\").equals(\"hello4\"));\n    assert(tuple.getLong(\"a_i\") == 4);\n    assert(tuple.getDouble(\"a_f\") == 4.0);\n    assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n    assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n\n    CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection\").process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c35d3c01114129fff707f0777080210fa9deb2a7","date":1493219863,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","sourceNew":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    try {\n      //Copy all docs to destinationCollection\n      String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n      TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"batchNumber asc\\\")\");\n      parallelUpdateStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelUpdateStream);\n      cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n\n      //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n      long count = 0;\n\n      for (Tuple tuple : tuples) {\n        count += tuple.getLong(\"batchIndexed\");\n      }\n\n      assert (count == 5);\n\n      //Ensure that destinationCollection actually has the new docs.\n      expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    try {\n      //Copy all docs to destinationCollection\n      String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n      TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"batchNumber asc\\\")\");\n      parallelUpdateStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelUpdateStream);\n      cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n\n      //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n      long count = 0;\n\n      for (Tuple tuple : tuples) {\n        count += tuple.getLong(\"batchIndexed\");\n      }\n\n      assert (count == 5);\n\n      //Ensure that destinationCollection actually has the new docs.\n      expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","sourceNew":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    try {\n      //Copy all docs to destinationCollection\n      String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n      TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"batchNumber asc\\\")\");\n      parallelUpdateStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelUpdateStream);\n      cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n\n      //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n      long count = 0;\n\n      for (Tuple tuple : tuples) {\n        count += tuple.getLong(\"batchIndexed\");\n      }\n\n      assert (count == 5);\n\n      //Ensure that destinationCollection actually has the new docs.\n      expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\",  \"s_multi\", \"bbbb\",  \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    try {\n      //Copy all docs to destinationCollection\n      String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n      TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"batchNumber asc\\\")\");\n      parallelUpdateStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelUpdateStream);\n      cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n\n      //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n      long count = 0;\n\n      for (Tuple tuple : tuples) {\n        count += tuple.getLong(\"batchIndexed\");\n      }\n\n      assert (count == 5);\n\n      //Ensure that destinationCollection actually has the new docs.\n      expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testParallelUpdateStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUpdateStream().mjava","sourceNew":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    try {\n      //Copy all docs to destinationCollection\n      String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n      TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"batchNumber asc\\\")\");\n      parallelUpdateStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelUpdateStream);\n      cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n\n      //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n      long count = 0;\n\n      for (Tuple tuple : tuples) {\n        count += tuple.getLong(\"batchIndexed\");\n      }\n\n      assert (count == 5);\n\n      //Ensure that destinationCollection actually has the new docs.\n      expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelUpdateStream() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"parallelDestinationCollection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"parallelDestinationCollection\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\", \"s_multi\", \"aaaa\", \"s_multi\", \"bbbb\", \"i_multi\", \"4\", \"i_multi\", \"7\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\", \"s_multi\", \"aaaa1\", \"s_multi\", \"bbbb1\", \"i_multi\", \"44\", \"i_multi\", \"77\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\", \"s_multi\", \"aaaa2\", \"s_multi\", \"bbbb2\", \"i_multi\", \"444\", \"i_multi\", \"777\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\", \"s_multi\", \"aaaa3\", \"s_multi\", \"bbbb3\", \"i_multi\", \"4444\", \"i_multi\", \"7777\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\", \"s_multi\", \"aaaa4\", \"s_multi\", \"bbbb4\", \"i_multi\", \"44444\", \"i_multi\", \"77777\")\n        .commit(cluster.getSolrClient(), \"collection1\");\n    \n    StreamExpression expression;\n    TupleStream stream;\n    Tuple t;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withCollectionZkHost(\"parallelDestinationCollection\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class);\n\n    try {\n      //Copy all docs to destinationCollection\n      String updateExpression = \"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"))\";\n      TupleStream parallelUpdateStream = factory.constructStream(\"parallel(collection1, \" + updateExpression + \", workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"batchNumber asc\\\")\");\n      parallelUpdateStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelUpdateStream);\n      cluster.getSolrClient().commit(\"parallelDestinationCollection\");\n\n      //Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs\n      long count = 0;\n\n      for (Tuple tuple : tuples) {\n        count += tuple.getLong(\"batchIndexed\");\n      }\n\n      assert (count == 5);\n\n      //Ensure that destinationCollection actually has the new docs.\n      expression = StreamExpressionParser.parse(\"search(parallelDestinationCollection, q=*:*, fl=\\\"id,a_s,a_i,a_f,s_multi,i_multi\\\", sort=\\\"a_i asc\\\")\");\n      stream = new CloudSolrStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertEquals(5, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      assert (tuple.getLong(\"id\") == 0);\n      assert (tuple.get(\"a_s\").equals(\"hello0\"));\n      assert (tuple.getLong(\"a_i\") == 0);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa\", \"bbbb\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4\"), Long.parseLong(\"7\"));\n\n      tuple = tuples.get(1);\n      assert (tuple.getLong(\"id\") == 1);\n      assert (tuple.get(\"a_s\").equals(\"hello1\"));\n      assert (tuple.getLong(\"a_i\") == 1);\n      assert (tuple.getDouble(\"a_f\") == 1.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa4\", \"bbbb4\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44444\"), Long.parseLong(\"77777\"));\n\n      tuple = tuples.get(2);\n      assert (tuple.getLong(\"id\") == 2);\n      assert (tuple.get(\"a_s\").equals(\"hello2\"));\n      assert (tuple.getLong(\"a_i\") == 2);\n      assert (tuple.getDouble(\"a_f\") == 0.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa1\", \"bbbb1\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"44\"), Long.parseLong(\"77\"));\n\n      tuple = tuples.get(3);\n      assert (tuple.getLong(\"id\") == 3);\n      assert (tuple.get(\"a_s\").equals(\"hello3\"));\n      assert (tuple.getLong(\"a_i\") == 3);\n      assert (tuple.getDouble(\"a_f\") == 3.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa2\", \"bbbb2\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"444\"), Long.parseLong(\"777\"));\n\n      tuple = tuples.get(4);\n      assert (tuple.getLong(\"id\") == 4);\n      assert (tuple.get(\"a_s\").equals(\"hello4\"));\n      assert (tuple.getLong(\"a_i\") == 4);\n      assert (tuple.getDouble(\"a_f\") == 4.0);\n      assertList(tuple.getStrings(\"s_multi\"), \"aaaa3\", \"bbbb3\");\n      assertList(tuple.getLongs(\"i_multi\"), Long.parseLong(\"4444\"), Long.parseLong(\"7777\"));\n    } finally {\n      CollectionAdminRequest.deleteCollection(\"parallelDestinationCollection\").process(cluster.getSolrClient());\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"c35d3c01114129fff707f0777080210fa9deb2a7":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a027750b86452a8dcd054ac993d54b203dae9102","b940572a59da1b42b6c20ab5278155b12816807a"],"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91":["73450c0955930295d34703e7ddbfc6973b7a121a"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"b940572a59da1b42b6c20ab5278155b12816807a":["a027750b86452a8dcd054ac993d54b203dae9102"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c35d3c01114129fff707f0777080210fa9deb2a7"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["a027750b86452a8dcd054ac993d54b203dae9102","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a027750b86452a8dcd054ac993d54b203dae9102","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a027750b86452a8dcd054ac993d54b203dae9102":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["73450c0955930295d34703e7ddbfc6973b7a121a","f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["c35d3c01114129fff707f0777080210fa9deb2a7"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"c35d3c01114129fff707f0777080210fa9deb2a7":["e9017cf144952056066919f1ebc7897ff9bd71b1","8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"73450c0955930295d34703e7ddbfc6973b7a121a":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["c35d3c01114129fff707f0777080210fa9deb2a7"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a027750b86452a8dcd054ac993d54b203dae9102"],"a027750b86452a8dcd054ac993d54b203dae9102":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}