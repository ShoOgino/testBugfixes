{"path":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"/dev/null","sourceNew":"  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n    ValueSource vs = parseValueSource();\n\n    /***  boost promoted to top-level query type to avoid this hack \n\n    // HACK - if this is a boosted query wrapped in a value-source, return\n    // that boosted query instead of a FunctionQuery\n    if (vs instanceof QueryValueSource) {\n      Query q = ((QueryValueSource)vs).getQuery();\n      if (q instanceof BoostedQuery) return q;\n    }\n    ***/\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":null,"sourceOld":"  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n    ValueSource vs = parseValueSource();\n\n    /***  boost promoted to top-level query type to avoid this hack \n\n    // HACK - if this is a boosted query wrapped in a value-source, return\n    // that boosted query instead of a FunctionQuery\n    if (vs instanceof QueryValueSource) {\n      Query q = ((QueryValueSource)vs).getQuery();\n      if (q instanceof BoostedQuery) return q;\n    }\n    ***/\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":"  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n    ValueSource vs = parseValueSource();\n\n    /***  boost promoted to top-level query type to avoid this hack \n\n    // HACK - if this is a boosted query wrapped in a value-source, return\n    // that boosted query instead of a FunctionQuery\n    if (vs instanceof QueryValueSource) {\n      Query q = ((QueryValueSource)vs).getQuery();\n      if (q instanceof BoostedQuery) return q;\n    }\n    ***/\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":"  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n    ValueSource vs = parseValueSource();\n\n    /***  boost promoted to top-level query type to avoid this hack \n\n    // HACK - if this is a boosted query wrapped in a value-source, return\n    // that boosted query instead of a FunctionQuery\n    if (vs instanceof QueryValueSource) {\n      Query q = ((QueryValueSource)vs).getQuery();\n      if (q instanceof BoostedQuery) return q;\n    }\n    ***/\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"/dev/null","sourceNew":"  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n    ValueSource vs = parseValueSource();\n\n    /***  boost promoted to top-level query type to avoid this hack \n\n    // HACK - if this is a boosted query wrapped in a value-source, return\n    // that boosted query instead of a FunctionQuery\n    if (vs instanceof QueryValueSource) {\n      Query q = ((QueryValueSource)vs).getQuery();\n      if (q instanceof BoostedQuery) return q;\n    }\n    ***/\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58f6207f98d96eddff4bee41c445792c249e5b74","date":1285448770,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":"  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":"  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n    ValueSource vs = parseValueSource();\n\n    /***  boost promoted to top-level query type to avoid this hack \n\n    // HACK - if this is a boosted query wrapped in a value-source, return\n    // that boosted query instead of a FunctionQuery\n    if (vs instanceof QueryValueSource) {\n      Query q = ((QueryValueSource)vs).getQuery();\n      if (q instanceof BoostedQuery) return q;\n    }\n    ***/\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":"  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":"  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n    ValueSource vs = parseValueSource();\n\n    /***  boost promoted to top-level query type to avoid this hack \n\n    // HACK - if this is a boosted query wrapped in a value-source, return\n    // that boosted query instead of a FunctionQuery\n    if (vs instanceof QueryValueSource) {\n      Query q = ((QueryValueSource)vs).getQuery();\n      if (q instanceof BoostedQuery) return q;\n    }\n    ***/\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":"  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":"  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":"  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["58f6207f98d96eddff4bee41c445792c249e5b74"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","58f6207f98d96eddff4bee41c445792c249e5b74"],"58f6207f98d96eddff4bee41c445792c249e5b74":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["58f6207f98d96eddff4bee41c445792c249e5b74","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"58f6207f98d96eddff4bee41c445792c249e5b74":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d"],"1da8d55113b689b06716246649de6f62430f15c0":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","58f6207f98d96eddff4bee41c445792c249e5b74"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}