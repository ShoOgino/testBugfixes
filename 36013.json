{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/CompositeSpatialStrategy#makeQuery(SpatialArgs).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/CompositeSpatialStrategy#makeQuery(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/CompositeSpatialStrategy#makeQuery(SpatialArgs).mjava","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation pred = args.getOperation();\n\n    if (pred == SpatialOperation.BBoxIntersects || pred == SpatialOperation.BBoxWithin) {\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    if (pred == SpatialOperation.IsDisjointTo) {\n//      final Query intersectQuery = makeQuery(new SpatialArgs(SpatialOperation.Intersects, args.getShape()));\n//      DocValues.getDocsWithField(reader, geometryStrategy.getFieldName());\n      //TODO resurrect Disjoint spatial query utility accepting a field name known to have DocValues.\n      // update class docs when it's added.\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    final ShapePredicateValueSource predicateValueSource =\n        new ShapePredicateValueSource(geometryStrategy.makeShapeValueSource(), pred, args.getShape());\n    //System.out.println(\"PredOpt: \" + optimizePredicates);\n    if (pred == SpatialOperation.Intersects && optimizePredicates) {\n      // We have a smart Intersects impl\n\n      final SpatialPrefixTree grid = indexStrategy.getGrid();\n      final int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, 0.0));//default to max precision\n      return new IntersectsRPTVerifyQuery(args.getShape(), indexStrategy.getFieldName(), grid,\n          detailLevel, indexStrategy.getPrefixGridScanLevel(), predicateValueSource);\n    } else {\n      //The general path; all index matches get verified\n\n      SpatialArgs indexArgs;\n      if (pred == SpatialOperation.Contains) {\n        // note: we could map IsWithin as well but it's pretty darned slow since it touches all world grids\n        indexArgs = args;\n      } else {\n        //TODO add args.clone method with new predicate? Or simply make non-final?\n        indexArgs = new SpatialArgs(SpatialOperation.Intersects, args.getShape());\n        indexArgs.setDistErr(args.getDistErr());\n        indexArgs.setDistErrPct(args.getDistErrPct());\n      }\n\n      if (indexArgs.getDistErr() == null && indexArgs.getDistErrPct() == null) {\n        indexArgs.setDistErrPct(0.10);\n      }\n\n      final Query indexQuery = indexStrategy.makeQuery(indexArgs);\n      return new CompositeVerifyQuery(indexQuery, predicateValueSource);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation pred = args.getOperation();\n\n    if (pred == SpatialOperation.BBoxIntersects || pred == SpatialOperation.BBoxWithin) {\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    if (pred == SpatialOperation.IsDisjointTo) {\n//      final Query intersectQuery = makeQuery(new SpatialArgs(SpatialOperation.Intersects, args.getShape()));\n//      DocValues.getDocsWithField(reader, geometryStrategy.getFieldName());\n      //TODO resurrect Disjoint spatial query utility accepting a field name known to have DocValues.\n      // update class docs when it's added.\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    final ShapePredicateValueSource predicateValueSource =\n        new ShapePredicateValueSource(geometryStrategy.makeShapeValueSource(), pred, args.getShape());\n    //System.out.println(\"PredOpt: \" + optimizePredicates);\n    if (pred == SpatialOperation.Intersects && optimizePredicates) {\n      // We have a smart Intersects impl\n\n      final SpatialPrefixTree grid = indexStrategy.getGrid();\n      final int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, 0.0));//default to max precision\n      return new IntersectsRPTVerifyQuery(args.getShape(), indexStrategy.getFieldName(), grid,\n          detailLevel, indexStrategy.getPrefixGridScanLevel(), predicateValueSource);\n    } else {\n      //The general path; all index matches get verified\n\n      SpatialArgs indexArgs;\n      if (pred == SpatialOperation.Contains) {\n        // note: we could map IsWithin as well but it's pretty darned slow since it touches all world grids\n        indexArgs = args;\n      } else {\n        //TODO add args.clone method with new predicate? Or simply make non-final?\n        indexArgs = new SpatialArgs(SpatialOperation.Intersects, args.getShape());\n        indexArgs.setDistErr(args.getDistErr());\n        indexArgs.setDistErrPct(args.getDistErrPct());\n      }\n\n      if (indexArgs.getDistErr() == null && indexArgs.getDistErrPct() == null) {\n        indexArgs.setDistErrPct(0.10);\n      }\n\n      final Query indexQuery = indexStrategy.makeQuery(indexArgs);\n      return new CompositeVerifyQuery(indexQuery, predicateValueSource);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/CompositeSpatialStrategy#makeQuery(SpatialArgs).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/CompositeSpatialStrategy#makeQuery(SpatialArgs).mjava","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation pred = args.getOperation();\n\n    if (pred == SpatialOperation.BBoxIntersects || pred == SpatialOperation.BBoxWithin) {\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    if (pred == SpatialOperation.IsDisjointTo) {\n//      final Query intersectQuery = makeQuery(new SpatialArgs(SpatialOperation.Intersects, args.getShape()));\n//      DocValues.getDocsWithField(reader, geometryStrategy.getFieldName());\n      //TODO resurrect Disjoint spatial query utility accepting a field name known to have DocValues.\n      // update class docs when it's added.\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    final ShapePredicateValueSource predicateValueSource =\n        new ShapePredicateValueSource(geometryStrategy.makeShapeValueSource(), pred, args.getShape());\n    //System.out.println(\"PredOpt: \" + optimizePredicates);\n    if (pred == SpatialOperation.Intersects && optimizePredicates) {\n      // We have a smart Intersects impl\n\n      final SpatialPrefixTree grid = indexStrategy.getGrid();\n      final int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, 0.0));//default to max precision\n      return new IntersectsRPTVerifyQuery(args.getShape(), indexStrategy.getFieldName(), grid,\n          detailLevel, indexStrategy.getPrefixGridScanLevel(), predicateValueSource);\n    } else {\n      //The general path; all index matches get verified\n\n      SpatialArgs indexArgs;\n      if (pred == SpatialOperation.Contains) {\n        // note: we could map IsWithin as well but it's pretty darned slow since it touches all world grids\n        indexArgs = args;\n      } else {\n        //TODO add args.clone method with new predicate? Or simply make non-final?\n        indexArgs = new SpatialArgs(SpatialOperation.Intersects, args.getShape());\n        indexArgs.setDistErr(args.getDistErr());\n        indexArgs.setDistErrPct(args.getDistErrPct());\n      }\n\n      if (indexArgs.getDistErr() == null && indexArgs.getDistErrPct() == null) {\n        indexArgs.setDistErrPct(0.10);\n      }\n\n      final Query indexQuery = indexStrategy.makeQuery(indexArgs);\n      return new CompositeVerifyQuery(indexQuery, predicateValueSource);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation pred = args.getOperation();\n\n    if (pred == SpatialOperation.BBoxIntersects || pred == SpatialOperation.BBoxWithin) {\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    if (pred == SpatialOperation.IsDisjointTo) {\n//      final Query intersectQuery = makeQuery(new SpatialArgs(SpatialOperation.Intersects, args.getShape()));\n//      DocValues.getDocsWithField(reader, geometryStrategy.getFieldName());\n      //TODO resurrect Disjoint spatial query utility accepting a field name known to have DocValues.\n      // update class docs when it's added.\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    final ShapePredicateValueSource predicateValueSource =\n        new ShapePredicateValueSource(geometryStrategy.makeShapeValueSource(), pred, args.getShape());\n    //System.out.println(\"PredOpt: \" + optimizePredicates);\n    if (pred == SpatialOperation.Intersects && optimizePredicates) {\n      // We have a smart Intersects impl\n\n      final SpatialPrefixTree grid = indexStrategy.getGrid();\n      final int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, 0.0));//default to max precision\n      return new IntersectsRPTVerifyQuery(args.getShape(), indexStrategy.getFieldName(), grid,\n          detailLevel, indexStrategy.getPrefixGridScanLevel(), predicateValueSource);\n    } else {\n      //The general path; all index matches get verified\n\n      SpatialArgs indexArgs;\n      if (pred == SpatialOperation.Contains) {\n        // note: we could map IsWithin as well but it's pretty darned slow since it touches all world grids\n        indexArgs = args;\n      } else {\n        //TODO add args.clone method with new predicate? Or simply make non-final?\n        indexArgs = new SpatialArgs(SpatialOperation.Intersects, args.getShape());\n        indexArgs.setDistErr(args.getDistErr());\n        indexArgs.setDistErrPct(args.getDistErrPct());\n      }\n\n      if (indexArgs.getDistErr() == null && indexArgs.getDistErrPct() == null) {\n        indexArgs.setDistErrPct(0.10);\n      }\n\n      final Query indexQuery = indexStrategy.makeQuery(indexArgs);\n      return new CompositeVerifyQuery(indexQuery, predicateValueSource);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32b9119890a8e82252b6cc341ac491d18fa1e49b","date":1498575219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/CompositeSpatialStrategy#makeQuery(SpatialArgs).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/CompositeSpatialStrategy#makeQuery(SpatialArgs).mjava","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation pred = args.getOperation();\n\n    if (pred == SpatialOperation.BBoxIntersects || pred == SpatialOperation.BBoxWithin) {\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    if (pred == SpatialOperation.IsDisjointTo) {\n//      final Query intersectQuery = makeQuery(new SpatialArgs(SpatialOperation.Intersects, args.getShape()));\n//      DocValues.getDocsWithField(reader, geometryStrategy.getFieldName());\n      //TODO resurrect Disjoint spatial query utility accepting a field name known to have DocValues.\n      // update class docs when it's added.\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    final ShapeValuesPredicate predicateValueSource =\n        new ShapeValuesPredicate(geometryStrategy.makeShapeValueSource(), pred, args.getShape());\n    //System.out.println(\"PredOpt: \" + optimizePredicates);\n    if (pred == SpatialOperation.Intersects && optimizePredicates) {\n      // We have a smart Intersects impl\n\n      final SpatialPrefixTree grid = indexStrategy.getGrid();\n      final int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, 0.0));//default to max precision\n      return new IntersectsRPTVerifyQuery(args.getShape(), indexStrategy.getFieldName(), grid,\n          detailLevel, indexStrategy.getPrefixGridScanLevel(), predicateValueSource);\n    } else {\n      //The general path; all index matches get verified\n\n      SpatialArgs indexArgs;\n      if (pred == SpatialOperation.Contains) {\n        // note: we could map IsWithin as well but it's pretty darned slow since it touches all world grids\n        indexArgs = args;\n      } else {\n        //TODO add args.clone method with new predicate? Or simply make non-final?\n        indexArgs = new SpatialArgs(SpatialOperation.Intersects, args.getShape());\n        indexArgs.setDistErr(args.getDistErr());\n        indexArgs.setDistErrPct(args.getDistErrPct());\n      }\n\n      if (indexArgs.getDistErr() == null && indexArgs.getDistErrPct() == null) {\n        indexArgs.setDistErrPct(0.10);\n      }\n\n      final Query indexQuery = indexStrategy.makeQuery(indexArgs);\n      return new CompositeVerifyQuery(indexQuery, predicateValueSource);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation pred = args.getOperation();\n\n    if (pred == SpatialOperation.BBoxIntersects || pred == SpatialOperation.BBoxWithin) {\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    if (pred == SpatialOperation.IsDisjointTo) {\n//      final Query intersectQuery = makeQuery(new SpatialArgs(SpatialOperation.Intersects, args.getShape()));\n//      DocValues.getDocsWithField(reader, geometryStrategy.getFieldName());\n      //TODO resurrect Disjoint spatial query utility accepting a field name known to have DocValues.\n      // update class docs when it's added.\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    final ShapePredicateValueSource predicateValueSource =\n        new ShapePredicateValueSource(geometryStrategy.makeShapeValueSource(), pred, args.getShape());\n    //System.out.println(\"PredOpt: \" + optimizePredicates);\n    if (pred == SpatialOperation.Intersects && optimizePredicates) {\n      // We have a smart Intersects impl\n\n      final SpatialPrefixTree grid = indexStrategy.getGrid();\n      final int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, 0.0));//default to max precision\n      return new IntersectsRPTVerifyQuery(args.getShape(), indexStrategy.getFieldName(), grid,\n          detailLevel, indexStrategy.getPrefixGridScanLevel(), predicateValueSource);\n    } else {\n      //The general path; all index matches get verified\n\n      SpatialArgs indexArgs;\n      if (pred == SpatialOperation.Contains) {\n        // note: we could map IsWithin as well but it's pretty darned slow since it touches all world grids\n        indexArgs = args;\n      } else {\n        //TODO add args.clone method with new predicate? Or simply make non-final?\n        indexArgs = new SpatialArgs(SpatialOperation.Intersects, args.getShape());\n        indexArgs.setDistErr(args.getDistErr());\n        indexArgs.setDistErrPct(args.getDistErrPct());\n      }\n\n      if (indexArgs.getDistErr() == null && indexArgs.getDistErrPct() == null) {\n        indexArgs.setDistErrPct(0.10);\n      }\n\n      final Query indexQuery = indexStrategy.makeQuery(indexArgs);\n      return new CompositeVerifyQuery(indexQuery, predicateValueSource);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/CompositeSpatialStrategy#makeQuery(SpatialArgs).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/CompositeSpatialStrategy#makeQuery(SpatialArgs).mjava","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation pred = args.getOperation();\n\n    if (pred == SpatialOperation.BBoxIntersects || pred == SpatialOperation.BBoxWithin) {\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    if (pred == SpatialOperation.IsDisjointTo) {\n//      final Query intersectQuery = makeQuery(new SpatialArgs(SpatialOperation.Intersects, args.getShape()));\n//      DocValues.getDocsWithField(reader, geometryStrategy.getFieldName());\n      //TODO resurrect Disjoint spatial query utility accepting a field name known to have DocValues.\n      // update class docs when it's added.\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    final ShapeValuesPredicate predicateValueSource =\n        new ShapeValuesPredicate(geometryStrategy.makeShapeValueSource(), pred, args.getShape());\n    //System.out.println(\"PredOpt: \" + optimizePredicates);\n    if (pred == SpatialOperation.Intersects && optimizePredicates) {\n      // We have a smart Intersects impl\n\n      final SpatialPrefixTree grid = indexStrategy.getGrid();\n      final int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, 0.0));//default to max precision\n      return new IntersectsRPTVerifyQuery(args.getShape(), indexStrategy.getFieldName(), grid,\n          detailLevel, indexStrategy.getPrefixGridScanLevel(), predicateValueSource);\n    } else {\n      //The general path; all index matches get verified\n\n      SpatialArgs indexArgs;\n      if (pred == SpatialOperation.Contains) {\n        // note: we could map IsWithin as well but it's pretty darned slow since it touches all world grids\n        indexArgs = args;\n      } else {\n        //TODO add args.clone method with new predicate? Or simply make non-final?\n        indexArgs = new SpatialArgs(SpatialOperation.Intersects, args.getShape());\n        indexArgs.setDistErr(args.getDistErr());\n        indexArgs.setDistErrPct(args.getDistErrPct());\n      }\n\n      if (indexArgs.getDistErr() == null && indexArgs.getDistErrPct() == null) {\n        indexArgs.setDistErrPct(0.10);\n      }\n\n      final Query indexQuery = indexStrategy.makeQuery(indexArgs);\n      return new CompositeVerifyQuery(indexQuery, predicateValueSource);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation pred = args.getOperation();\n\n    if (pred == SpatialOperation.BBoxIntersects || pred == SpatialOperation.BBoxWithin) {\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    if (pred == SpatialOperation.IsDisjointTo) {\n//      final Query intersectQuery = makeQuery(new SpatialArgs(SpatialOperation.Intersects, args.getShape()));\n//      DocValues.getDocsWithField(reader, geometryStrategy.getFieldName());\n      //TODO resurrect Disjoint spatial query utility accepting a field name known to have DocValues.\n      // update class docs when it's added.\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    final ShapePredicateValueSource predicateValueSource =\n        new ShapePredicateValueSource(geometryStrategy.makeShapeValueSource(), pred, args.getShape());\n    //System.out.println(\"PredOpt: \" + optimizePredicates);\n    if (pred == SpatialOperation.Intersects && optimizePredicates) {\n      // We have a smart Intersects impl\n\n      final SpatialPrefixTree grid = indexStrategy.getGrid();\n      final int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, 0.0));//default to max precision\n      return new IntersectsRPTVerifyQuery(args.getShape(), indexStrategy.getFieldName(), grid,\n          detailLevel, indexStrategy.getPrefixGridScanLevel(), predicateValueSource);\n    } else {\n      //The general path; all index matches get verified\n\n      SpatialArgs indexArgs;\n      if (pred == SpatialOperation.Contains) {\n        // note: we could map IsWithin as well but it's pretty darned slow since it touches all world grids\n        indexArgs = args;\n      } else {\n        //TODO add args.clone method with new predicate? Or simply make non-final?\n        indexArgs = new SpatialArgs(SpatialOperation.Intersects, args.getShape());\n        indexArgs.setDistErr(args.getDistErr());\n        indexArgs.setDistErrPct(args.getDistErrPct());\n      }\n\n      if (indexArgs.getDistErr() == null && indexArgs.getDistErrPct() == null) {\n        indexArgs.setDistErrPct(0.10);\n      }\n\n      final Query indexQuery = indexStrategy.makeQuery(indexArgs);\n      return new CompositeVerifyQuery(indexQuery, predicateValueSource);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/CompositeSpatialStrategy#makeQuery(SpatialArgs).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/CompositeSpatialStrategy#makeQuery(SpatialArgs).mjava","sourceNew":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation pred = args.getOperation();\n\n    if (pred == SpatialOperation.BBoxIntersects || pred == SpatialOperation.BBoxWithin) {\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    if (pred == SpatialOperation.IsDisjointTo) {\n//      final Query intersectQuery = makeQuery(new SpatialArgs(SpatialOperation.Intersects, args.getShape()));\n//      DocValues.getDocsWithField(reader, geometryStrategy.getFieldName());\n      //TODO resurrect Disjoint spatial query utility accepting a field name known to have DocValues.\n      // update class docs when it's added.\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    final ShapeValuesPredicate predicateValueSource =\n        new ShapeValuesPredicate(geometryStrategy.makeShapeValueSource(), pred, args.getShape());\n    //System.out.println(\"PredOpt: \" + optimizePredicates);\n    if (pred == SpatialOperation.Intersects && optimizePredicates) {\n      // We have a smart Intersects impl\n\n      final SpatialPrefixTree grid = indexStrategy.getGrid();\n      final int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, 0.0));//default to max precision\n      return new IntersectsRPTVerifyQuery(args.getShape(), indexStrategy.getFieldName(), grid,\n          detailLevel, indexStrategy.getPrefixGridScanLevel(), predicateValueSource);\n    } else {\n      //The general path; all index matches get verified\n\n      SpatialArgs indexArgs;\n      if (pred == SpatialOperation.Contains) {\n        // note: we could map IsWithin as well but it's pretty darned slow since it touches all world grids\n        indexArgs = args;\n      } else {\n        //TODO add args.clone method with new predicate? Or simply make non-final?\n        indexArgs = new SpatialArgs(SpatialOperation.Intersects, args.getShape());\n        indexArgs.setDistErr(args.getDistErr());\n        indexArgs.setDistErrPct(args.getDistErrPct());\n      }\n\n      if (indexArgs.getDistErr() == null && indexArgs.getDistErrPct() == null) {\n        indexArgs.setDistErrPct(0.10);\n      }\n\n      final Query indexQuery = indexStrategy.makeQuery(indexArgs);\n      return new CompositeVerifyQuery(indexQuery, predicateValueSource);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query makeQuery(SpatialArgs args) {\n    final SpatialOperation pred = args.getOperation();\n\n    if (pred == SpatialOperation.BBoxIntersects || pred == SpatialOperation.BBoxWithin) {\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    if (pred == SpatialOperation.IsDisjointTo) {\n//      final Query intersectQuery = makeQuery(new SpatialArgs(SpatialOperation.Intersects, args.getShape()));\n//      DocValues.getDocsWithField(reader, geometryStrategy.getFieldName());\n      //TODO resurrect Disjoint spatial query utility accepting a field name known to have DocValues.\n      // update class docs when it's added.\n      throw new UnsupportedSpatialOperation(pred);\n    }\n\n    final ShapePredicateValueSource predicateValueSource =\n        new ShapePredicateValueSource(geometryStrategy.makeShapeValueSource(), pred, args.getShape());\n    //System.out.println(\"PredOpt: \" + optimizePredicates);\n    if (pred == SpatialOperation.Intersects && optimizePredicates) {\n      // We have a smart Intersects impl\n\n      final SpatialPrefixTree grid = indexStrategy.getGrid();\n      final int detailLevel = grid.getLevelForDistance(args.resolveDistErr(ctx, 0.0));//default to max precision\n      return new IntersectsRPTVerifyQuery(args.getShape(), indexStrategy.getFieldName(), grid,\n          detailLevel, indexStrategy.getPrefixGridScanLevel(), predicateValueSource);\n    } else {\n      //The general path; all index matches get verified\n\n      SpatialArgs indexArgs;\n      if (pred == SpatialOperation.Contains) {\n        // note: we could map IsWithin as well but it's pretty darned slow since it touches all world grids\n        indexArgs = args;\n      } else {\n        //TODO add args.clone method with new predicate? Or simply make non-final?\n        indexArgs = new SpatialArgs(SpatialOperation.Intersects, args.getShape());\n        indexArgs.setDistErr(args.getDistErr());\n        indexArgs.setDistErrPct(args.getDistErrPct());\n      }\n\n      if (indexArgs.getDistErr() == null && indexArgs.getDistErrPct() == null) {\n        indexArgs.setDistErrPct(0.10);\n      }\n\n      final Query indexQuery = indexStrategy.makeQuery(indexArgs);\n      return new CompositeVerifyQuery(indexQuery, predicateValueSource);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"32b9119890a8e82252b6cc341ac491d18fa1e49b":["af2638813028b254a88b418ebeafb541afb49653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["af2638813028b254a88b418ebeafb541afb49653","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"98f11c416d30e556e0004a9a84960702d12d35b1":["af2638813028b254a88b418ebeafb541afb49653","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["32b9119890a8e82252b6cc341ac491d18fa1e49b","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"32b9119890a8e82252b6cc341ac491d18fa1e49b":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}