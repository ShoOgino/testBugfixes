{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n      ldmp.setMinMergeDocs(1);\n      writer.setMergePolicy(ldmp);\n      writer.setMergeFactor(4);\n      writer.setMaxBufferedDocs(2);\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n      ldmp.setMinMergeDocs(1);\n      writer.setMergePolicy(ldmp);\n      writer.setMergeFactor(4);\n      writer.setMaxBufferedDocs(2);\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      writer.setMergePolicy(ldmp);\n      writer.setMergeFactor(4);\n      writer.setMaxBufferedDocs(2);\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n      ldmp.setMinMergeDocs(1);\n      writer.setMergePolicy(ldmp);\n      writer.setMergeFactor(4);\n      writer.setMaxBufferedDocs(2);\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":null,"sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      writer.setMergePolicy(ldmp);\n      writer.setMergeFactor(4);\n      writer.setMaxBufferedDocs(2);\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}