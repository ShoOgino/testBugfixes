{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#read().mjava","commits":[{"id":"b50e78d06f282e14c7918c600c1f098b14171ead","date":1461010196,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#read().mjava","pathOld":"/dev/null","sourceNew":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n      for(String key  : doc.keySet()) {\n        map.put(key, doc.get(key));\n      }\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e15955b4980562a0c1c81d08654904f3fadb83b","date":1461068916,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#read().mjava","pathOld":"/dev/null","sourceNew":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n      for(String key  : doc.keySet()) {\n        map.put(key, doc.get(key));\n      }\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97fc3d287be2a8d7f513f0de3249b50dda47299","date":1568378558,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n      for(Entry<String, Object> entry : doc.entrySet()) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n      for(String key  : doc.keySet()) {\n        map.put(key, doc.get(key));\n      }\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c8bdaac3b1ede20bf22bbb116a282b7d0eb910f","date":1576114640,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n\n      // Put the generated x-axis first. If there really is an x field it will overwrite it.\n      if(outputX) {\n        map.put(\"x\", x++);\n      }\n\n      for(Entry<String, Object> entry : doc.entrySet()) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n\n\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n      for(Entry<String, Object> entry : doc.entrySet()) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n\n      // Put the generated x-axis first. If there really is an x field it will overwrite it.\n      if(outputX) {\n        map.put(\"x\", x++);\n      }\n\n      for(Entry<String, Object> entry : doc.entrySet()) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n\n\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n      for(Entry<String, Object> entry : doc.entrySet()) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RandomStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Tuple tuple = new Tuple();\n      SolrDocument doc = documentIterator.next();\n\n      // Put the generated x-axis first. If there really is an x field it will overwrite it.\n      if(outputX) {\n        tuple.put(\"x\", x++);\n      }\n\n      for(Entry<String, Object> entry : doc.entrySet()) {\n        tuple.put(entry.getKey(), entry.getValue());\n      }\n\n\n      return tuple;\n    } else {\n      return Tuple.EOF();\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    if(documentIterator.hasNext()) {\n      Map map = new HashMap();\n      SolrDocument doc = documentIterator.next();\n\n      // Put the generated x-axis first. If there really is an x field it will overwrite it.\n      if(outputX) {\n        map.put(\"x\", x++);\n      }\n\n      for(Entry<String, Object> entry : doc.entrySet()) {\n        map.put(entry.getKey(), entry.getValue());\n      }\n\n\n      return new Tuple(map);\n    } else {\n      Map fields = new HashMap();\n      fields.put(\"EOF\", true);\n      Tuple tuple = new Tuple(fields);\n      return tuple;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df724d84dab24a0cc54bec95a8680867adc7f171":["f97fc3d287be2a8d7f513f0de3249b50dda47299","1c8bdaac3b1ede20bf22bbb116a282b7d0eb910f"],"1c8bdaac3b1ede20bf22bbb116a282b7d0eb910f":["f97fc3d287be2a8d7f513f0de3249b50dda47299"],"b50e78d06f282e14c7918c600c1f098b14171ead":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e15955b4980562a0c1c81d08654904f3fadb83b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b50e78d06f282e14c7918c600c1f098b14171ead"],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"804a8d5358fe7b7563b85ee7838714d720b89272":["1c8bdaac3b1ede20bf22bbb116a282b7d0eb910f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"df724d84dab24a0cc54bec95a8680867adc7f171":[],"1c8bdaac3b1ede20bf22bbb116a282b7d0eb910f":["df724d84dab24a0cc54bec95a8680867adc7f171","804a8d5358fe7b7563b85ee7838714d720b89272"],"b50e78d06f282e14c7918c600c1f098b14171ead":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b50e78d06f282e14c7918c600c1f098b14171ead","0e15955b4980562a0c1c81d08654904f3fadb83b"],"0e15955b4980562a0c1c81d08654904f3fadb83b":["f97fc3d287be2a8d7f513f0de3249b50dda47299"],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["df724d84dab24a0cc54bec95a8680867adc7f171","1c8bdaac3b1ede20bf22bbb116a282b7d0eb910f"],"804a8d5358fe7b7563b85ee7838714d720b89272":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}