{"path":"lucene/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","commits":[{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to <= the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all\n   *          SegmentInfos.  If the value is True for a\n   *          given SegmentInfo, that means this segment was\n   *          an original segment present in the\n   *          to-be-merged index; else, it was a segment\n   *          produced by a cascaded merge.\n   */\n  public abstract MergeSpecification findForcedMerges(\n          SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToMerge)\n      throws CorruptIndexException, IOException;\n\n","sourceOld":"  /**\n   * Determine what set of merge operations is necessary in order to optimize\n   * the index. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#optimize()} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToOptimize\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all\n   *          SegmentInfos.  If the value is True for a\n   *          given SegmentInfo, that means this segment was\n   *          an original segment present in the\n   *          to-be-optimized index; else, it was a segment\n   *          produced by a cascaded merge.\n   */\n  public abstract MergeSpecification findMergesForOptimize(\n          SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize)\n      throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to <= the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all\n   *          SegmentInfos.  If the value is True for a\n   *          given SegmentInfo, that means this segment was\n   *          an original segment present in the\n   *          to-be-merged index; else, it was a segment\n   *          produced by a cascaded merge.\n   */\n  public abstract MergeSpecification findForcedMerges(\n          SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToMerge)\n      throws CorruptIndexException, IOException;\n\n","sourceOld":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to <= the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all\n   *          SegmentInfos.  If the value is True for a\n   *          given SegmentInfo, that means this segment was\n   *          an original segment present in the\n   *          to-be-merged index; else, it was a segment\n   *          produced by a cascaded merge.\n   */\n  public abstract MergeSpecification findForcedMerges(\n          SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToMerge)\n      throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}