{"path":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[],int,float,boolean).mjava","commits":[{"id":"165c3432cb3c4fcfc8e859af24323bbbd12084af","date":1532292166,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[],int,float,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[],int,float).mjava","sourceNew":"  SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, int slop, float matchCost, boolean captureLeadMatch) {\n    super(approximation(postings), matchCost);\n    this.slop = slop;\n    this.numPostings = postings.length;\n    this.captureLeadMatch = captureLeadMatch;\n    pq = new PhraseQueue(postings.length);\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n  }\n\n","sourceOld":"  SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, int slop, float matchCost) {\n    super(approximation(postings), matchCost);\n    this.slop = slop;\n    this.numPostings = postings.length;\n    pq = new PhraseQueue(postings.length);\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62ba8124694976baa3b03705351de238ec5d4352","date":1532295406,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[],int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[],int,float,boolean).mjava","sourceNew":"  SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, int slop, float matchCost) {\n    super(approximation(postings), matchCost);\n    this.slop = slop;\n    this.numPostings = postings.length;\n    pq = new PhraseQueue(postings.length);\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n  }\n\n","sourceOld":"  SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, int slop, float matchCost, boolean captureLeadMatch) {\n    super(approximation(postings), matchCost);\n    this.slop = slop;\n    this.numPostings = postings.length;\n    this.captureLeadMatch = captureLeadMatch;\n    pq = new PhraseQueue(postings.length);\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ebc07bccf12a902ca6a0077910d18ee38b695f","date":1532336521,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[],int,float,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[],int,float).mjava","sourceNew":"  SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, int slop, float matchCost, boolean captureLeadMatch) {\n    super(approximation(postings), matchCost);\n    this.slop = slop;\n    this.numPostings = postings.length;\n    this.captureLeadMatch = captureLeadMatch;\n    pq = new PhraseQueue(postings.length);\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n  }\n\n","sourceOld":"  SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, int slop, float matchCost) {\n    super(approximation(postings), matchCost);\n    this.slop = slop;\n    this.numPostings = postings.length;\n    pq = new PhraseQueue(postings.length);\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8dd25829321d66cd54ea7d40a4130e0d2a29bec","date":1562680889,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[],int,float,boolean).mjava","sourceNew":null,"sourceOld":"  SloppyPhraseMatcher(PhraseQuery.PostingsAndFreq[] postings, int slop, float matchCost, boolean captureLeadMatch) {\n    super(approximation(postings), matchCost);\n    this.slop = slop;\n    this.numPostings = postings.length;\n    this.captureLeadMatch = captureLeadMatch;\n    pq = new PhraseQueue(postings.length);\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"165c3432cb3c4fcfc8e859af24323bbbd12084af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"62ba8124694976baa3b03705351de238ec5d4352":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["62ba8124694976baa3b03705351de238ec5d4352"]},"commit2Childs":{"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"165c3432cb3c4fcfc8e859af24323bbbd12084af":["62ba8124694976baa3b03705351de238ec5d4352"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"62ba8124694976baa3b03705351de238ec5d4352":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}