{"path":"solr/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","commits":[{"id":"15345a5c40a4fa937f1b1b8462ddd6677135378a","date":1276548894,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","pathOld":"/dev/null","sourceNew":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analyisis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","pathOld":"/dev/null","sourceNew":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analyisis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c62eb41cf8a97c0d2150100bd20b855954fa490","date":1301013389,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","pathOld":"solr/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","sourceNew":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","sourceOld":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analyisis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","pathOld":"solr/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","sourceNew":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","sourceOld":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analyisis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","pathOld":"solr/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","sourceNew":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","sourceOld":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analyisis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","pathOld":"solr/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","sourceNew":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","sourceOld":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","pathOld":"solr/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","sourceNew":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","sourceOld":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","pathOld":"solr/src/java/org/apache/solr/search/ValueSourceParser#parseTerm(FunctionQParser).mjava","sourceNew":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","sourceOld":"  private static TInfo parseTerm(FunctionQParser fp) throws ParseException {\n    TInfo tinfo = new TInfo();\n\n    tinfo.indexedField = tinfo.field = fp.parseArg();\n    tinfo.val = fp.parseArg();\n    tinfo.indexedBytes = new BytesRef();\n\n    FieldType ft = fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field);\n    if (ft == null) ft = new StrField();\n\n    if (ft instanceof TextField) {\n      // need to do analysis on the term\n      String indexedVal = tinfo.val;\n      Query q = ft.getFieldQuery(fp, fp.getReq().getSchema().getFieldOrNull(tinfo.field), tinfo.val);\n      if (q instanceof TermQuery) {\n        Term term = ((TermQuery)q).getTerm();\n        tinfo.indexedField = term.field();\n        indexedVal = term.text();\n      }\n      UnicodeUtil.UTF16toUTF8(indexedVal, 0, indexedVal.length(), tinfo.indexedBytes);\n    } else {\n      ft.readableToIndexed(tinfo.val, tinfo.indexedBytes);\n    }\n\n    return tinfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["5f4e87790277826a2aea119328600dfb07761f32","2c62eb41cf8a97c0d2150100bd20b855954fa490"],"2c62eb41cf8a97c0d2150100bd20b855954fa490":["15345a5c40a4fa937f1b1b8462ddd6677135378a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2c62eb41cf8a97c0d2150100bd20b855954fa490"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["15345a5c40a4fa937f1b1b8462ddd6677135378a","2c62eb41cf8a97c0d2150100bd20b855954fa490"],"15345a5c40a4fa937f1b1b8462ddd6677135378a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["2c62eb41cf8a97c0d2150100bd20b855954fa490","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["2c62eb41cf8a97c0d2150100bd20b855954fa490"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","15345a5c40a4fa937f1b1b8462ddd6677135378a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"2c62eb41cf8a97c0d2150100bd20b855954fa490":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"15345a5c40a4fa937f1b1b8462ddd6677135378a":["2c62eb41cf8a97c0d2150100bd20b855954fa490","d619839baa8ce5503e496b94a9e42ad6f079293f","5f4e87790277826a2aea119328600dfb07761f32"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15345a5c40a4fa937f1b1b8462ddd6677135378a","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}