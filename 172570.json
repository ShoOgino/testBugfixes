{"path":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,DocumentsWriterPerThread).mjava","commits":[{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,DocumentsWriterPerThread).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, DocumentsWriterPerThread perThread) {\n    if (flushOnDocCount()\n        && perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(perThread);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        if (infoStream.isEnabled(\"FP\")) {\n          infoStream.message(\"FP\", \"trigger flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, perThread);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.dwpt.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        if (infoStream.isEnabled(\"FP\")) {\n          infoStream.message(\"FP\", \"trigger flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["264935965977b4a9e2f3920420647072c9c49176"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}