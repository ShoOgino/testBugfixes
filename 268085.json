{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","sourceNew":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private TermAttribute termAtt;\n      private PositionIncrementAttribute posIncrAtt;\n      private OffsetAttribute offsetAtt;\n      {\n        termAtt = addAttribute(TermAttribute.class);\n        posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n        offsetAtt = addAttribute(OffsetAttribute.class);\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          clearAttributes();\n          termAtt.setTermBuffer(token.term());\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private TermAttribute termAtt;\n      private PositionIncrementAttribute posIncrAtt;\n      private OffsetAttribute offsetAtt;\n      {\n        termAtt = addAttribute(TermAttribute.class);\n        posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n        offsetAtt = addAttribute(OffsetAttribute.class);\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          clearAttributes();\n          termAtt.setTermBuffer(token.term());\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","sourceNew":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n      {\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          clearAttributes();\n          termAtt.setEmpty().append(token);\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private TermAttribute termAtt;\n      private PositionIncrementAttribute posIncrAtt;\n      private OffsetAttribute offsetAtt;\n      {\n        termAtt = addAttribute(TermAttribute.class);\n        posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n        offsetAtt = addAttribute(OffsetAttribute.class);\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          clearAttributes();\n          termAtt.setTermBuffer(token.term());\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","sourceNew":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n      {\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          clearAttributes();\n          termAtt.setEmpty().append(token);\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n\n      @Override\n      public void reset() throws IOException {\n        super.reset();\n        iter = lst.iterator();\n      }\n    };\n  }\n\n","sourceOld":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n      {\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          clearAttributes();\n          termAtt.setEmpty().append(token);\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#getTS2a().mjava","sourceNew":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n      {\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          clearAttributes();\n          termAtt.setEmpty().append(token);\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n\n      @Override\n      public void reset() throws IOException {\n        super.reset();\n        iter = lst.iterator();\n      }\n    };\n  }\n\n","sourceOld":"  // same token-stream as above, but the bigger token comes first this time\n  protected TokenStream getTS2a() {\n    // String s = \"Hi-Speed10 foo\";\n    return new TokenStream() {\n      Iterator<Token> iter;\n      List<Token> lst;\n      private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n      private final OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n      {\n        lst = new ArrayList<Token>();\n        Token t;\n        t = createToken(\"hispeed\", 0, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"hi\", 0, 2);\n        t.setPositionIncrement(0);\n        lst.add(t);\n        t = createToken(\"speed\", 3, 8);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"10\", 8, 10);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        t = createToken(\"foo\", 11, 14);\n        t.setPositionIncrement(1);\n        lst.add(t);\n        iter = lst.iterator();\n      }\n\n      @Override\n      public boolean incrementToken() throws IOException {\n        if(iter.hasNext()) {\n          Token token = iter.next();\n          clearAttributes();\n          termAtt.setEmpty().append(token);\n          posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n          offsetAtt.setOffset(token.startOffset(), token.endOffset());\n          return true;\n        }\n        return false;\n      }\n\n      @Override\n      public void reset() throws IOException {\n        super.reset();\n        iter = lst.iterator();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cf7efd82433f3f64684711c16edfd149db6af111"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf7efd82433f3f64684711c16edfd149db6af111":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cf7efd82433f3f64684711c16edfd149db6af111":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["cf7efd82433f3f64684711c16edfd149db6af111"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}