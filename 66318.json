{"path":"solr/core/src/java/org/apache/solr/util/PayloadUtils#getPayloadFunction(String).mjava","commits":[{"id":"03d1c7f08294f7d7e9ecf082aa1459f38d77f277","date":1493688929,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/PayloadUtils#getPayloadFunction(String).mjava","pathOld":"/dev/null","sourceNew":"  public static PayloadFunction getPayloadFunction(String func) {\n    PayloadFunction payloadFunction = null;\n    if (\"min\".equals(func)) {\n      payloadFunction = new MinPayloadFunction();\n    }\n    if (\"max\".equals(func)) {\n      payloadFunction = new MaxPayloadFunction();\n    }\n    if (\"average\".equals(func)) {\n      payloadFunction = new AveragePayloadFunction();\n    }\n\n    return payloadFunction;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fde37608cd70b4d772cda072953ab6e7aec60923"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/PayloadUtils#getPayloadFunction(String).mjava","pathOld":"/dev/null","sourceNew":"  public static PayloadFunction getPayloadFunction(String func) {\n    PayloadFunction payloadFunction = null;\n    if (\"min\".equals(func)) {\n      payloadFunction = new MinPayloadFunction();\n    }\n    if (\"max\".equals(func)) {\n      payloadFunction = new MaxPayloadFunction();\n    }\n    if (\"average\".equals(func)) {\n      payloadFunction = new AveragePayloadFunction();\n    }\n\n    return payloadFunction;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fde37608cd70b4d772cda072953ab6e7aec60923","date":1502236361,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/PayloadUtils#getPayloadFunction(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PayloadUtils#getPayloadFunction(String).mjava","sourceNew":"  public static PayloadFunction getPayloadFunction(String func) {\n    PayloadFunction payloadFunction = null;\n    if (\"min\".equals(func)) {\n      payloadFunction = new MinPayloadFunction();\n    }\n    if (\"max\".equals(func)) {\n      payloadFunction = new MaxPayloadFunction();\n    }\n    if (\"average\".equals(func)) {\n      payloadFunction = new AveragePayloadFunction();\n    }\n    if (\"sum\".equals(func)) {\n      payloadFunction = new SumPayloadFunction();\n    }\n    return payloadFunction;\n  }\n\n","sourceOld":"  public static PayloadFunction getPayloadFunction(String func) {\n    PayloadFunction payloadFunction = null;\n    if (\"min\".equals(func)) {\n      payloadFunction = new MinPayloadFunction();\n    }\n    if (\"max\".equals(func)) {\n      payloadFunction = new MaxPayloadFunction();\n    }\n    if (\"average\".equals(func)) {\n      payloadFunction = new AveragePayloadFunction();\n    }\n\n    return payloadFunction;\n  }\n\n","bugFix":["03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/PayloadUtils#getPayloadFunction(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PayloadUtils#getPayloadFunction(String).mjava","sourceNew":"  public static PayloadFunction getPayloadFunction(String func) {\n    PayloadFunction payloadFunction = null;\n    if (\"min\".equals(func)) {\n      payloadFunction = new MinPayloadFunction();\n    }\n    if (\"max\".equals(func)) {\n      payloadFunction = new MaxPayloadFunction();\n    }\n    if (\"average\".equals(func)) {\n      payloadFunction = new AveragePayloadFunction();\n    }\n    if (\"sum\".equals(func)) {\n      payloadFunction = new SumPayloadFunction();\n    }\n    return payloadFunction;\n  }\n\n","sourceOld":"  public static PayloadFunction getPayloadFunction(String func) {\n    PayloadFunction payloadFunction = null;\n    if (\"min\".equals(func)) {\n      payloadFunction = new MinPayloadFunction();\n    }\n    if (\"max\".equals(func)) {\n      payloadFunction = new MaxPayloadFunction();\n    }\n    if (\"average\".equals(func)) {\n      payloadFunction = new AveragePayloadFunction();\n    }\n\n    return payloadFunction;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/PayloadUtils#getPayloadFunction(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PayloadUtils#getPayloadFunction(String).mjava","sourceNew":"  public static PayloadFunction getPayloadFunction(String func) {\n    PayloadFunction payloadFunction = null;\n    if (\"min\".equals(func)) {\n      payloadFunction = new MinPayloadFunction();\n    }\n    if (\"max\".equals(func)) {\n      payloadFunction = new MaxPayloadFunction();\n    }\n    if (\"average\".equals(func)) {\n      payloadFunction = new AveragePayloadFunction();\n    }\n    if (\"sum\".equals(func)) {\n      payloadFunction = new SumPayloadFunction();\n    }\n    return payloadFunction;\n  }\n\n","sourceOld":"  public static PayloadFunction getPayloadFunction(String func) {\n    PayloadFunction payloadFunction = null;\n    if (\"min\".equals(func)) {\n      payloadFunction = new MinPayloadFunction();\n    }\n    if (\"max\".equals(func)) {\n      payloadFunction = new MaxPayloadFunction();\n    }\n    if (\"average\".equals(func)) {\n      payloadFunction = new AveragePayloadFunction();\n    }\n\n    return payloadFunction;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["03d1c7f08294f7d7e9ecf082aa1459f38d77f277","fde37608cd70b4d772cda072953ab6e7aec60923"],"fde37608cd70b4d772cda072953ab6e7aec60923":["03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["e9017cf144952056066919f1ebc7897ff9bd71b1","fde37608cd70b4d772cda072953ab6e7aec60923"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fde37608cd70b4d772cda072953ab6e7aec60923"],"03d1c7f08294f7d7e9ecf082aa1459f38d77f277":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"fde37608cd70b4d772cda072953ab6e7aec60923":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"03d1c7f08294f7d7e9ecf082aa1459f38d77f277":["e9017cf144952056066919f1ebc7897ff9bd71b1","58884af1f68e9d61c217c753fbd6266d86a63b14","fde37608cd70b4d772cda072953ab6e7aec60923"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}