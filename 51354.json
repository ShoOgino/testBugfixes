{"path":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,String,String).mjava","commits":[{"id":"8ddfc890383ad49b761c95033cf08766953f805c","date":1145426420,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param dataDirectory path for index data, will not be cleaned up\n   * @param confFile solrconfig filename\n   * @param schemaFile schema filename\n   */\n  public TestHarness(String dataDirectory,\n                     String confFile,\n                     String schemaFile) {\n    try {\n      SolrConfig.initConfig(confFile);\n      core = new SolrCore(dataDirectory, new IndexSchema(schemaFile));\n      builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d80013b5e260def972025c93a0b08524f9c38f49","date":1170102801,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,String,String).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,String,String).mjava","sourceNew":"  /**\n   * @param dataDirectory path for index data, will not be cleaned up\n   * @param confFile solrconfig filename\n   * @param schemaFile schema filename\n   */\n  public TestHarness(String dataDirectory,\n                     String confFile,\n                     String schemaFile) {\n    try {\n      SolrConfig.initConfig(confFile);\n      core = new SolrCore(dataDirectory, new IndexSchema(schemaFile));\n      builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      \n      updater = new XmlUpdateRequestHandler();\n      updater.init( null );\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * @param dataDirectory path for index data, will not be cleaned up\n   * @param confFile solrconfig filename\n   * @param schemaFile schema filename\n   */\n  public TestHarness(String dataDirectory,\n                     String confFile,\n                     String schemaFile) {\n    try {\n      SolrConfig.initConfig(confFile);\n      core = new SolrCore(dataDirectory, new IndexSchema(schemaFile));\n      builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e549059bcc575213ebeb1bbed797f39b07ab6f11","date":1183065492,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,String,String).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,String,String).mjava","sourceNew":"  /**\n   * @param dataDirectory path for index data, will not be cleaned up\n   * @param confFile solrconfig filename\n   * @param schemaFile schema filename\n   */\n  public TestHarness(String dataDirectory,\n                     String confFile,\n                     String schemaFile) {\n    try {\n      // set some system properties for use by tests\n      System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n      System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n      SolrConfig.initConfig(confFile);\n      core = new SolrCore(dataDirectory, new IndexSchema(schemaFile));\n      builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      \n      updater = new XmlUpdateRequestHandler();\n      updater.init( null );\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * @param dataDirectory path for index data, will not be cleaned up\n   * @param confFile solrconfig filename\n   * @param schemaFile schema filename\n   */\n  public TestHarness(String dataDirectory,\n                     String confFile,\n                     String schemaFile) {\n    try {\n      SolrConfig.initConfig(confFile);\n      core = new SolrCore(dataDirectory, new IndexSchema(schemaFile));\n      builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      \n      updater = new XmlUpdateRequestHandler();\n      updater.init( null );\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,String,String).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,String,String).mjava","sourceNew":"  /**\n   * Assumes \"solrconfig.xml\" is the config file to use.\n   *\n   * @param dataDirectory path for index data, will not be cleaned up\n   * @param schemaFile path of schema file\n   */\n  public TestHarness(String name, String dataDirectory, String schemaFile) {\n    this(name, dataDirectory, \"solrconfig.xml\", schemaFile);\n  }\n\n","sourceOld":"  /**\n   * @param dataDirectory path for index data, will not be cleaned up\n   * @param confFile solrconfig filename\n   * @param schemaFile schema filename\n   */\n  public TestHarness(String dataDirectory,\n                     String confFile,\n                     String schemaFile) {\n    try {\n      // set some system properties for use by tests\n      System.setProperty(\"solr.test.sys.prop1\", \"propone\");\n      System.setProperty(\"solr.test.sys.prop2\", \"proptwo\");\n\n      SolrConfig.initConfig(confFile);\n      core = new SolrCore(dataDirectory, new IndexSchema(schemaFile));\n      builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n      \n      updater = new XmlUpdateRequestHandler();\n      updater.init( null );\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fe3c163c8df3fb3e4248c30f8ae8034cc786589","date":1189317596,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,String,String).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,String,String).mjava","sourceNew":"  /**\n    * @param name the core name\n   * @param dataDirectory path for index data, will not be cleaned up\n    * @param configFile solrconfig filename\n   * @param schemaFile schema filename\n   */\n   public TestHarness( String dataDirectory, String configFile, String schemaFile) {\n     this( dataDirectory, createConfig(configFile), schemaFile);\n   }\n\n","sourceOld":"  /**\n   * Assumes \"solrconfig.xml\" is the config file to use.\n   *\n   * @param dataDirectory path for index data, will not be cleaned up\n   * @param schemaFile path of schema file\n   */\n  public TestHarness(String name, String dataDirectory, String schemaFile) {\n    this(name, dataDirectory, \"solrconfig.xml\", schemaFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0af8df23c8bf16151f1911c8ad7e2bd21386b1e","date":1190668853,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,String,String).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,String,String).mjava","sourceNew":"  /**\n   * @param dataDirectory path for index data, will not be cleaned up\n   * @param configFile solrconfig filename\n   * @param schemaFile schema filename\n   */\n   public TestHarness( String dataDirectory, String configFile, String schemaFile) {\n     this( dataDirectory, createConfig(configFile), schemaFile);\n   }\n\n","sourceOld":"  /**\n    * @param name the core name\n   * @param dataDirectory path for index data, will not be cleaned up\n    * @param configFile solrconfig filename\n   * @param schemaFile schema filename\n   */\n   public TestHarness( String dataDirectory, String configFile, String schemaFile) {\n     this( dataDirectory, createConfig(configFile), schemaFile);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/TestHarness#TestHarness(String,String,String).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#TestHarness(String,String,String).mjava","sourceNew":"  /**\n   * @param dataDirectory path for index data, will not be cleaned up\n   * @param configFile solrconfig filename\n   * @param schemaFile schema filename\n   */\n   public TestHarness( String dataDirectory, String configFile, String schemaFile) {\n     this( dataDirectory, createConfig(configFile), schemaFile);\n   }\n\n","sourceOld":"  /**\n   * @param dataDirectory path for index data, will not be cleaned up\n   * @param configFile solrconfig filename\n   * @param schemaFile schema filename\n   */\n   public TestHarness( String dataDirectory, String configFile, String schemaFile) {\n     this( dataDirectory, createConfig(configFile), schemaFile);\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["e549059bcc575213ebeb1bbed797f39b07ab6f11"],"e549059bcc575213ebeb1bbed797f39b07ab6f11":["d80013b5e260def972025c93a0b08524f9c38f49"],"c0af8df23c8bf16151f1911c8ad7e2bd21386b1e":["8fe3c163c8df3fb3e4248c30f8ae8034cc786589"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fe3c163c8df3fb3e4248c30f8ae8034cc786589":["6d6338c87060be5f66757a94945975f3bbd377a9"],"8ddfc890383ad49b761c95033cf08766953f805c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c0af8df23c8bf16151f1911c8ad7e2bd21386b1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d80013b5e260def972025c93a0b08524f9c38f49":["8ddfc890383ad49b761c95033cf08766953f805c"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["8fe3c163c8df3fb3e4248c30f8ae8034cc786589"],"e549059bcc575213ebeb1bbed797f39b07ab6f11":["6d6338c87060be5f66757a94945975f3bbd377a9"],"c0af8df23c8bf16151f1911c8ad7e2bd21386b1e":["ad94625fb8d088209f46650c8097196fec67f00c"],"8fe3c163c8df3fb3e4248c30f8ae8034cc786589":["c0af8df23c8bf16151f1911c8ad7e2bd21386b1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ddfc890383ad49b761c95033cf08766953f805c":["d80013b5e260def972025c93a0b08524f9c38f49"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8ddfc890383ad49b761c95033cf08766953f805c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"d80013b5e260def972025c93a0b08524f9c38f49":["e549059bcc575213ebeb1bbed797f39b07ab6f11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}