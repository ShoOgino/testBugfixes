{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin#getTopFieldCacheReader(SolrIndexSearcher,String).mjava","commits":[{"id":"7bc10aeb596994a4cbfa5801932a4dac9fdd2afc","date":1541533532,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin#getTopFieldCacheReader(SolrIndexSearcher,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This forces the use of the top level field cache for String fields.\n   * This is VERY fast at query time but slower to warm and causes insanity.\n   */\n  public static LeafReader getTopFieldCacheReader(SolrIndexSearcher searcher, String collapseField) {\n    return UninvertingReader.wrap(\n        new ReaderWrapper(searcher.getSlowAtomicReader(), collapseField),\n        Collections.singletonMap(collapseField, UninvertingReader.Type.SORTED)::get);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e","date":1541777404,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin#getTopFieldCacheReader(SolrIndexSearcher,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin#getTopFieldCacheReader(SolrIndexSearcher,String).mjava","sourceNew":"  /**\n   * This forces the use of the top level field cache for String fields.\n   * This is VERY fast at query time but slower to warm and causes insanity.\n   */\n  public static LeafReader getTopFieldCacheReader(SolrIndexSearcher searcher, String collapseField) {\n    UninvertingReader.Type type = null;\n    final SchemaField f = searcher.getSchema().getFieldOrNull(collapseField);\n    assert null != f;        // should already be enforced higher up\n    assert !f.multiValued(); // should already be enforced higher up\n    \n    assert f.getType() instanceof StrField; // this method shouldn't be called otherwise\n    if (f.indexed() && f.isUninvertible()) {\n      type = UninvertingReader.Type.SORTED;\n    }\n    \n    return UninvertingReader.wrap(\n        new ReaderWrapper(searcher.getSlowAtomicReader(), collapseField),\n        Collections.singletonMap(collapseField, type)::get);\n  }\n\n","sourceOld":"  /**\n   * This forces the use of the top level field cache for String fields.\n   * This is VERY fast at query time but slower to warm and causes insanity.\n   */\n  public static LeafReader getTopFieldCacheReader(SolrIndexSearcher searcher, String collapseField) {\n    return UninvertingReader.wrap(\n        new ReaderWrapper(searcher.getSlowAtomicReader(), collapseField),\n        Collections.singletonMap(collapseField, UninvertingReader.Type.SORTED)::get);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3575e61fd7df2bbcce8b977a23d3d67aa423ce62","date":1586507050,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin#getTopFieldCacheReader(SolrIndexSearcher,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin#getTopFieldCacheReader(SolrIndexSearcher,String).mjava","sourceNew":"  /**\n   * This forces the use of the top level field cache for String fields.\n   * This is VERY fast at query time but slower to warm and causes insanity.\n   */\n  public static LeafReader getTopFieldCacheReader(SolrIndexSearcher searcher, String collapseField) {\n    UninvertingReader.Type type = null;\n    final SchemaField f = searcher.getSchema().getFieldOrNull(collapseField);\n    assert null != f;        // should already be enforced higher up\n    assert !f.multiValued(); // should already be enforced higher up\n\n    assert f.getType() instanceof StrField; // this method shouldn't be called otherwise\n    if (f.indexed() && f.isUninvertible()) {\n      type = UninvertingReader.Type.SORTED;\n    }\n\n    return UninvertingReader.wrap(\n        new ReaderWrapper(searcher.getSlowAtomicReader(), collapseField),\n        Collections.singletonMap(collapseField, type)::get);\n  }\n\n","sourceOld":"  /**\n   * This forces the use of the top level field cache for String fields.\n   * This is VERY fast at query time but slower to warm and causes insanity.\n   */\n  public static LeafReader getTopFieldCacheReader(SolrIndexSearcher searcher, String collapseField) {\n    UninvertingReader.Type type = null;\n    final SchemaField f = searcher.getSchema().getFieldOrNull(collapseField);\n    assert null != f;        // should already be enforced higher up\n    assert !f.multiValued(); // should already be enforced higher up\n    \n    assert f.getType() instanceof StrField; // this method shouldn't be called otherwise\n    if (f.indexed() && f.isUninvertible()) {\n      type = UninvertingReader.Type.SORTED;\n    }\n    \n    return UninvertingReader.wrap(\n        new ReaderWrapper(searcher.getSlowAtomicReader(), collapseField),\n        Collections.singletonMap(collapseField, type)::get);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7bc10aeb596994a4cbfa5801932a4dac9fdd2afc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3575e61fd7df2bbcce8b977a23d3d67aa423ce62":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["7bc10aeb596994a4cbfa5801932a4dac9fdd2afc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3575e61fd7df2bbcce8b977a23d3d67aa423ce62"]},"commit2Childs":{"7bc10aeb596994a4cbfa5801932a4dac9fdd2afc":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"3575e61fd7df2bbcce8b977a23d3d67aa423ce62":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bc10aeb596994a4cbfa5801932a4dac9fdd2afc"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["3575e61fd7df2bbcce8b977a23d3d67aa423ce62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}