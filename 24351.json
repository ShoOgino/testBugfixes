{"path":"lucene/core/src/java/org/apache/lucene/index/Sorter#getDocComparator(int,SortField,SortedDocValuesSupplier,NumericDocValuesSupplier).mjava","commits":[{"id":"86a0a50d2d14aaee1e635bbec914468551f7f9a2","date":1482234306,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#getDocComparator(int,SortField,SortedDocValuesSupplier,NumericDocValuesSupplier).mjava","pathOld":"/dev/null","sourceNew":"  /** We cannot use the {@link FieldComparator} API because that API requires that you send it docIDs in order.  Note that this API\n   *  allocates arrays[maxDoc] to hold the native values needed for comparison, but 1) they are transient (only alive while sorting this one\n   *  segment), and 2) in the typical index sorting case, they are only used to sort newly flushed segments, which will be smaller than\n   *  merged segments.  */\n  static DocComparator getDocComparator(int maxDoc,\n                                        SortField sortField,\n                                        SortedDocValuesSupplier sortedProvider,\n                                        NumericDocValuesSupplier numericProvider) throws IOException {\n\n    final int reverseMul = sortField.getReverse() ? -1 : 1;\n    final SortField.Type sortType = getSortFieldType(sortField);\n\n    switch(sortType) {\n\n      case STRING:\n      {\n        final SortedDocValues sorted = sortedProvider.get();\n        final int missingOrd;\n        if (sortField.getMissingValue() == SortField.STRING_LAST) {\n          missingOrd = Integer.MAX_VALUE;\n        } else {\n          missingOrd = Integer.MIN_VALUE;\n        }\n\n        final int[] ords = new int[maxDoc];\n        Arrays.fill(ords, missingOrd);\n        int docID;\n        while ((docID = sorted.nextDoc()) != NO_MORE_DOCS) {\n          ords[docID] = sorted.ordValue();\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(ords[docID1], ords[docID2]);\n          }\n        };\n      }\n\n      case LONG:\n      {\n        final NumericDocValues dvs = numericProvider.get();\n        long[] values = new long[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Long) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = dvs.longValue();\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Long.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n      case INT:\n      {\n        final NumericDocValues dvs = numericProvider.get();\n        int[] values = new int[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Integer) sortField.getMissingValue());\n        }\n\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = (int) dvs.longValue();\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n      case DOUBLE:\n      {\n        final NumericDocValues dvs = numericProvider.get();\n        double[] values = new double[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Double) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Double.longBitsToDouble(dvs.longValue());\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Double.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n      case FLOAT:\n      {\n        final NumericDocValues dvs = numericProvider.get();\n        float[] values = new float[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Float) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Float.intBitsToFloat((int) dvs.longValue());\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Float.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n      default:\n        throw new IllegalArgumentException(\"unhandled SortField.getType()=\" + sortField.getType());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Sorter#getDocComparator(int,SortField,SortedDocValuesSupplier,NumericDocValuesSupplier).mjava","pathOld":"/dev/null","sourceNew":"  /** We cannot use the {@link FieldComparator} API because that API requires that you send it docIDs in order.  Note that this API\n   *  allocates arrays[maxDoc] to hold the native values needed for comparison, but 1) they are transient (only alive while sorting this one\n   *  segment), and 2) in the typical index sorting case, they are only used to sort newly flushed segments, which will be smaller than\n   *  merged segments.  */\n  static DocComparator getDocComparator(int maxDoc,\n                                        SortField sortField,\n                                        SortedDocValuesSupplier sortedProvider,\n                                        NumericDocValuesSupplier numericProvider) throws IOException {\n\n    final int reverseMul = sortField.getReverse() ? -1 : 1;\n    final SortField.Type sortType = getSortFieldType(sortField);\n\n    switch(sortType) {\n\n      case STRING:\n      {\n        final SortedDocValues sorted = sortedProvider.get();\n        final int missingOrd;\n        if (sortField.getMissingValue() == SortField.STRING_LAST) {\n          missingOrd = Integer.MAX_VALUE;\n        } else {\n          missingOrd = Integer.MIN_VALUE;\n        }\n\n        final int[] ords = new int[maxDoc];\n        Arrays.fill(ords, missingOrd);\n        int docID;\n        while ((docID = sorted.nextDoc()) != NO_MORE_DOCS) {\n          ords[docID] = sorted.ordValue();\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(ords[docID1], ords[docID2]);\n          }\n        };\n      }\n\n      case LONG:\n      {\n        final NumericDocValues dvs = numericProvider.get();\n        long[] values = new long[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Long) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = dvs.longValue();\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Long.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n      case INT:\n      {\n        final NumericDocValues dvs = numericProvider.get();\n        int[] values = new int[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Integer) sortField.getMissingValue());\n        }\n\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = (int) dvs.longValue();\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n      case DOUBLE:\n      {\n        final NumericDocValues dvs = numericProvider.get();\n        double[] values = new double[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Double) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Double.longBitsToDouble(dvs.longValue());\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Double.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n      case FLOAT:\n      {\n        final NumericDocValues dvs = numericProvider.get();\n        float[] values = new float[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Float) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Float.intBitsToFloat((int) dvs.longValue());\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Float.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n      default:\n        throw new IllegalArgumentException(\"unhandled SortField.getType()=\" + sortField.getType());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/Sorter#getDocComparator(int,SortField,SortedDocValuesSupplier,NumericDocValuesSupplier).mjava","sourceNew":null,"sourceOld":"  /** We cannot use the {@link FieldComparator} API because that API requires that you send it docIDs in order.  Note that this API\n   *  allocates arrays[maxDoc] to hold the native values needed for comparison, but 1) they are transient (only alive while sorting this one\n   *  segment), and 2) in the typical index sorting case, they are only used to sort newly flushed segments, which will be smaller than\n   *  merged segments.  */\n  static DocComparator getDocComparator(int maxDoc,\n                                        SortField sortField,\n                                        SortedDocValuesSupplier sortedProvider,\n                                        NumericDocValuesSupplier numericProvider) throws IOException {\n\n    final int reverseMul = sortField.getReverse() ? -1 : 1;\n    final SortField.Type sortType = getSortFieldType(sortField);\n\n    switch(sortType) {\n\n      case STRING:\n      {\n        final SortedDocValues sorted = sortedProvider.get();\n        final int missingOrd;\n        if (sortField.getMissingValue() == SortField.STRING_LAST) {\n          missingOrd = Integer.MAX_VALUE;\n        } else {\n          missingOrd = Integer.MIN_VALUE;\n        }\n\n        final int[] ords = new int[maxDoc];\n        Arrays.fill(ords, missingOrd);\n        int docID;\n        while ((docID = sorted.nextDoc()) != NO_MORE_DOCS) {\n          ords[docID] = sorted.ordValue();\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(ords[docID1], ords[docID2]);\n          }\n        };\n      }\n\n      case LONG:\n      {\n        final NumericDocValues dvs = numericProvider.get();\n        long[] values = new long[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Long) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = dvs.longValue();\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Long.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n      case INT:\n      {\n        final NumericDocValues dvs = numericProvider.get();\n        int[] values = new int[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Integer) sortField.getMissingValue());\n        }\n\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = (int) dvs.longValue();\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Integer.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n      case DOUBLE:\n      {\n        final NumericDocValues dvs = numericProvider.get();\n        double[] values = new double[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Double) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Double.longBitsToDouble(dvs.longValue());\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Double.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n      case FLOAT:\n      {\n        final NumericDocValues dvs = numericProvider.get();\n        float[] values = new float[maxDoc];\n        if (sortField.getMissingValue() != null) {\n          Arrays.fill(values, (Float) sortField.getMissingValue());\n        }\n        while (true) {\n          int docID = dvs.nextDoc();\n          if (docID == NO_MORE_DOCS) {\n            break;\n          }\n          values[docID] = Float.intBitsToFloat((int) dvs.longValue());\n        }\n\n        return new DocComparator() {\n          @Override\n          public int compare(int docID1, int docID2) {\n            return reverseMul * Float.compare(values[docID1], values[docID2]);\n          }\n        };\n      }\n\n      default:\n        throw new IllegalArgumentException(\"unhandled SortField.getType()=\" + sortField.getType());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"773bf150032d3ef6c95997a154fb914b82875cb8":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["773bf150032d3ef6c95997a154fb914b82875cb8"]},"commit2Childs":{"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"773bf150032d3ef6c95997a154fb914b82875cb8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","773bf150032d3ef6c95997a154fb914b82875cb8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}