{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#writeNewIndexProps(Directory,String,String).mjava","commits":[{"id":"b39b1b02e442aaf736cc87417e93552cbd8ef1da","date":1484786722,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#writeNewIndexProps(Directory,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Write the index.properties file with the new index sub directory name\n   * @param dir a data directory (containing an index.properties file)\n   * @param tmpFileName the file name to write the new index.properties to\n   * @param tmpIdxDirName new index directory name\n   */\n  private static void writeNewIndexProps(Directory dir, String tmpFileName, String tmpIdxDirName) {\n    if (tmpFileName == null) {\n      tmpFileName = IndexFetcher.INDEX_PROPERTIES;\n    }\n    final Properties p = new Properties();\n    \n    // Read existing properties\n    try {\n      final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      final InputStream is = new PropertiesInputStream(input);\n      try {\n        p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n      } catch (Exception e) {\n        log.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    } catch (IOException e) {\n      // ignore; file does not exist\n    }\n    \n    p.put(\"index\", tmpIdxDirName);\n\n    // Write new properties\n    Writer os = null;\n    try {\n      IndexOutput out = dir.createOutput(tmpFileName, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n      p.store(os, IndexFetcher.INDEX_PROPERTIES);\n      dir.sync(Collections.singleton(tmpFileName));\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#writeNewIndexProps(Directory,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Write the index.properties file with the new index sub directory name\n   * @param dir a data directory (containing an index.properties file)\n   * @param tmpFileName the file name to write the new index.properties to\n   * @param tmpIdxDirName new index directory name\n   */\n  private static void writeNewIndexProps(Directory dir, String tmpFileName, String tmpIdxDirName) {\n    if (tmpFileName == null) {\n      tmpFileName = IndexFetcher.INDEX_PROPERTIES;\n    }\n    final Properties p = new Properties();\n    \n    // Read existing properties\n    try {\n      final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      final InputStream is = new PropertiesInputStream(input);\n      try {\n        p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n      } catch (Exception e) {\n        log.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    } catch (IOException e) {\n      // ignore; file does not exist\n    }\n    \n    p.put(\"index\", tmpIdxDirName);\n\n    // Write new properties\n    Writer os = null;\n    try {\n      IndexOutput out = dir.createOutput(tmpFileName, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n      p.store(os, IndexFetcher.INDEX_PROPERTIES);\n      dir.sync(Collections.singleton(tmpFileName));\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96e0d4494fe54b31c7f0151f3a632124ab806351","date":1512410218,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#writeNewIndexProps(Directory,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#writeNewIndexProps(Directory,String,String).mjava","sourceNew":"  /**\n   * Write the index.properties file with the new index sub directory name\n   * @param dir a data directory (containing an index.properties file)\n   * @param tmpFileName the file name to write the new index.properties to\n   * @param tmpIdxDirName new index directory name\n   */\n  private static void writeNewIndexProps(Directory dir, String tmpFileName, String tmpIdxDirName) {\n    if (tmpFileName == null) {\n      tmpFileName = IndexFetcher.INDEX_PROPERTIES;\n    }\n    final Properties p = new Properties();\n    \n    // Read existing properties\n    try {\n      final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      final InputStream is = new PropertiesInputStream(input);\n      try {\n        p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n      } catch (Exception e) {\n        log.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    } catch (IOException e) {\n      // ignore; file does not exist\n    }\n    \n    p.put(\"index\", tmpIdxDirName);\n\n    // Write new properties\n    Writer os = null;\n    try {\n      IndexOutput out = dir.createOutput(tmpFileName, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n      p.store(os, IndexFetcher.INDEX_PROPERTIES);\n      dir.sync(Collections.singleton(tmpFileName));\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n  }\n\n","sourceOld":"  /**\n   * Write the index.properties file with the new index sub directory name\n   * @param dir a data directory (containing an index.properties file)\n   * @param tmpFileName the file name to write the new index.properties to\n   * @param tmpIdxDirName new index directory name\n   */\n  private static void writeNewIndexProps(Directory dir, String tmpFileName, String tmpIdxDirName) {\n    if (tmpFileName == null) {\n      tmpFileName = IndexFetcher.INDEX_PROPERTIES;\n    }\n    final Properties p = new Properties();\n    \n    // Read existing properties\n    try {\n      final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      final InputStream is = new PropertiesInputStream(input);\n      try {\n        p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n      } catch (Exception e) {\n        log.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    } catch (IOException e) {\n      // ignore; file does not exist\n    }\n    \n    p.put(\"index\", tmpIdxDirName);\n\n    // Write new properties\n    Writer os = null;\n    try {\n      IndexOutput out = dir.createOutput(tmpFileName, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n      p.store(os, IndexFetcher.INDEX_PROPERTIES);\n      dir.sync(Collections.singleton(tmpFileName));\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n  }\n\n","bugFix":["b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24792720c893049d53a1807bd0ae9b64d1cd7be5","date":1527536585,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#writeNewIndexProps(Directory,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#writeNewIndexProps(Directory,String,String).mjava","sourceNew":"  /**\n   * Write the index.properties file with the new index sub directory name\n   * @param dir a data directory (containing an index.properties file)\n   * @param tmpFileName the file name to write the new index.properties to\n   * @param tmpIdxDirName new index directory name\n   */\n  private static void writeNewIndexProps(Directory dir, String tmpFileName, String tmpIdxDirName) {\n    if (tmpFileName == null) {\n      tmpFileName = IndexFetcher.INDEX_PROPERTIES;\n    }\n    final Properties p = new Properties();\n    \n    // Read existing properties\n    try {\n      final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      final InputStream is = new PropertiesInputStream(input);\n      try {\n        p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n      } catch (Exception e) {\n        log.error(\"Unable to load {}\", IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    } catch (IOException e) {\n      // ignore; file does not exist\n    }\n    \n    p.put(\"index\", tmpIdxDirName);\n\n    // Write new properties\n    Writer os = null;\n    try {\n      IndexOutput out = dir.createOutput(tmpFileName, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n      p.store(os, IndexFetcher.INDEX_PROPERTIES);\n      dir.sync(Collections.singleton(tmpFileName));\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n  }\n\n","sourceOld":"  /**\n   * Write the index.properties file with the new index sub directory name\n   * @param dir a data directory (containing an index.properties file)\n   * @param tmpFileName the file name to write the new index.properties to\n   * @param tmpIdxDirName new index directory name\n   */\n  private static void writeNewIndexProps(Directory dir, String tmpFileName, String tmpIdxDirName) {\n    if (tmpFileName == null) {\n      tmpFileName = IndexFetcher.INDEX_PROPERTIES;\n    }\n    final Properties p = new Properties();\n    \n    // Read existing properties\n    try {\n      final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      final InputStream is = new PropertiesInputStream(input);\n      try {\n        p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n      } catch (Exception e) {\n        log.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    } catch (IOException e) {\n      // ignore; file does not exist\n    }\n    \n    p.put(\"index\", tmpIdxDirName);\n\n    // Write new properties\n    Writer os = null;\n    try {\n      IndexOutput out = dir.createOutput(tmpFileName, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n      p.store(os, IndexFetcher.INDEX_PROPERTIES);\n      dir.sync(Collections.singleton(tmpFileName));\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#writeNewIndexProps(Directory,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#writeNewIndexProps(Directory,String,String).mjava","sourceNew":"  /**\n   * Write the index.properties file with the new index sub directory name\n   *\n   * @param dir           a data directory (containing an index.properties file)\n   * @param tmpFileName   the file name to write the new index.properties to\n   * @param tmpIdxDirName new index directory name\n   */\n  private static void writeNewIndexProps(Directory dir, String tmpFileName, String tmpIdxDirName) {\n    if (tmpFileName == null) {\n      tmpFileName = IndexFetcher.INDEX_PROPERTIES;\n    }\n    final Properties p = new Properties();\n\n    // Read existing properties\n    try {\n      final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      final InputStream is = new PropertiesInputStream(input);\n      try {\n        p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n      } catch (Exception e) {\n        log.error(\"Unable to load {}\", IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    } catch (IOException e) {\n      // ignore; file does not exist\n    }\n\n    p.put(\"index\", tmpIdxDirName);\n\n    // Write new properties\n    Writer os = null;\n    try {\n      IndexOutput out = dir.createOutput(tmpFileName, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n      p.store(os, IndexFetcher.INDEX_PROPERTIES);\n      dir.sync(Collections.singleton(tmpFileName));\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n  }\n\n","sourceOld":"  /**\n   * Write the index.properties file with the new index sub directory name\n   * @param dir a data directory (containing an index.properties file)\n   * @param tmpFileName the file name to write the new index.properties to\n   * @param tmpIdxDirName new index directory name\n   */\n  private static void writeNewIndexProps(Directory dir, String tmpFileName, String tmpIdxDirName) {\n    if (tmpFileName == null) {\n      tmpFileName = IndexFetcher.INDEX_PROPERTIES;\n    }\n    final Properties p = new Properties();\n    \n    // Read existing properties\n    try {\n      final IndexInput input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      final InputStream is = new PropertiesInputStream(input);\n      try {\n        p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n      } catch (Exception e) {\n        log.error(\"Unable to load {}\", IndexFetcher.INDEX_PROPERTIES, e);\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n    } catch (IOException e) {\n      // ignore; file does not exist\n    }\n    \n    p.put(\"index\", tmpIdxDirName);\n\n    // Write new properties\n    Writer os = null;\n    try {\n      IndexOutput out = dir.createOutput(tmpFileName, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      os = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n      p.store(os, IndexFetcher.INDEX_PROPERTIES);\n      dir.sync(Collections.singleton(tmpFileName));\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to write \" + IndexFetcher.INDEX_PROPERTIES, e);\n    } finally {\n      IOUtils.closeQuietly(os);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96e0d4494fe54b31c7f0151f3a632124ab806351":["b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["24792720c893049d53a1807bd0ae9b64d1cd7be5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24792720c893049d53a1807bd0ae9b64d1cd7be5":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"b39b1b02e442aaf736cc87417e93552cbd8ef1da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"96e0d4494fe54b31c7f0151f3a632124ab806351":["24792720c893049d53a1807bd0ae9b64d1cd7be5"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b39b1b02e442aaf736cc87417e93552cbd8ef1da","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"24792720c893049d53a1807bd0ae9b64d1cd7be5":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"b39b1b02e442aaf736cc87417e93552cbd8ef1da":["96e0d4494fe54b31c7f0151f3a632124ab806351","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}