{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrMerge().mjava","commits":[{"id":"c533b201163bd7b15aa8881f922f9289a7668187","date":1452268593,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrMerge().mjava","pathOld":"/dev/null","sourceNew":"  private void testJDBCSolrMerge() throws Exception {\n    clearData();\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('AL', 'Algeria')\");\n    statement.close();\n    connection.close();\n    \n    // Load Solr\n    indexr(id, \"0\", \"code_s\", \"GB\", \"name_s\", \"Great Britian\");\n    indexr(id, \"1\", \"code_s\", \"CA\", \"name_s\", \"Canada\");\n    commit();\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class);\n    \n    List<Tuple> tuples;\n    \n    // Simple 1\n    TupleStream jdbcStream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    TupleStream selectStream = new SelectStream(jdbcStream, new HashMap<String, String>(){{ put(\"CODE\", \"code_s\"); put(\"COUNTRY_NAME\", \"name_s\"); }});\n    TupleStream searchStream = factory.constructStream(\"search(collection1, fl=\\\"code_s,name_s\\\",q=\\\"*:*\\\",sort=\\\"code_s asc\\\")\");\n    TupleStream mergeStream = new MergeStream(new FieldComparator(\"code_s\", ComparatorOrder.ASCENDING), new TupleStream[]{selectStream,searchStream});\n    \n    tuples = getTuples(mergeStream);\n    \n    assertEquals(7, tuples.size());\n    assertOrderOf(tuples, \"code_s\", \"AL\",\"CA\",\"GB\",\"NL\",\"NO\",\"NP\",\"US\");\n    assertOrderOf(tuples, \"name_s\", \"Algeria\", \"Canada\", \"Great Britian\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrMerge().mjava","sourceNew":"  @Test\n  public void testJDBCSolrMerge() throws Exception {\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('AL', 'Algeria')\");\n    }\n    \n    // Load Solr\n    new UpdateRequest()\n        .add(id, \"0\", \"code_s\", \"GB\", \"name_s\", \"Great Britian\")\n        .add(id, \"1\", \"code_s\", \"CA\", \"name_s\", \"Canada\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class);\n    \n    List<Tuple> tuples;\n    \n    // Simple 1\n    TupleStream jdbcStream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    TupleStream selectStream = new SelectStream(jdbcStream, new HashMap<String, String>(){{ put(\"CODE\", \"code_s\"); put(\"COUNTRY_NAME\", \"name_s\"); }});\n    TupleStream searchStream = factory.constructStream(\"search(\" + COLLECTION + \", fl=\\\"code_s,name_s\\\",q=\\\"*:*\\\",sort=\\\"code_s asc\\\")\");\n    TupleStream mergeStream = new MergeStream(new FieldComparator(\"code_s\", ComparatorOrder.ASCENDING), new TupleStream[]{selectStream,searchStream});\n    \n    tuples = getTuples(mergeStream);\n    \n    assertEquals(7, tuples.size());\n    assertOrderOf(tuples, \"code_s\", \"AL\",\"CA\",\"GB\",\"NL\",\"NO\",\"NP\",\"US\");\n    assertOrderOf(tuples, \"name_s\", \"Algeria\", \"Canada\", \"Great Britian\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n  }\n\n","sourceOld":"  private void testJDBCSolrMerge() throws Exception {\n    clearData();\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('AL', 'Algeria')\");\n    statement.close();\n    connection.close();\n    \n    // Load Solr\n    indexr(id, \"0\", \"code_s\", \"GB\", \"name_s\", \"Great Britian\");\n    indexr(id, \"1\", \"code_s\", \"CA\", \"name_s\", \"Canada\");\n    commit();\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class);\n    \n    List<Tuple> tuples;\n    \n    // Simple 1\n    TupleStream jdbcStream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    TupleStream selectStream = new SelectStream(jdbcStream, new HashMap<String, String>(){{ put(\"CODE\", \"code_s\"); put(\"COUNTRY_NAME\", \"name_s\"); }});\n    TupleStream searchStream = factory.constructStream(\"search(collection1, fl=\\\"code_s,name_s\\\",q=\\\"*:*\\\",sort=\\\"code_s asc\\\")\");\n    TupleStream mergeStream = new MergeStream(new FieldComparator(\"code_s\", ComparatorOrder.ASCENDING), new TupleStream[]{selectStream,searchStream});\n    \n    tuples = getTuples(mergeStream);\n    \n    assertEquals(7, tuples.size());\n    assertOrderOf(tuples, \"code_s\", \"AL\",\"CA\",\"GB\",\"NL\",\"NO\",\"NP\",\"US\");\n    assertOrderOf(tuples, \"name_s\", \"Algeria\", \"Canada\", \"Great Britian\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrMerge().mjava","sourceNew":"  @Test\n  public void testJDBCSolrMerge() throws Exception {\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('AL', 'Algeria')\");\n    }\n    \n    // Load Solr\n    new UpdateRequest()\n        .add(id, \"0\", \"code_s\", \"GB\", \"name_s\", \"Great Britian\")\n        .add(id, \"1\", \"code_s\", \"CA\", \"name_s\", \"Canada\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class);\n    \n    List<Tuple> tuples;\n    \n    // Simple 1\n    TupleStream jdbcStream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    TupleStream selectStream = new SelectStream(jdbcStream, new HashMap<String, String>(){{ put(\"CODE\", \"code_s\"); put(\"COUNTRY_NAME\", \"name_s\"); }});\n    TupleStream searchStream = factory.constructStream(\"search(\" + COLLECTION + \", fl=\\\"code_s,name_s\\\",q=\\\"*:*\\\",sort=\\\"code_s asc\\\")\");\n    TupleStream mergeStream = new MergeStream(new FieldComparator(\"code_s\", ComparatorOrder.ASCENDING), new TupleStream[]{selectStream,searchStream});\n    \n    tuples = getTuples(mergeStream);\n    \n    assertEquals(7, tuples.size());\n    assertOrderOf(tuples, \"code_s\", \"AL\",\"CA\",\"GB\",\"NL\",\"NO\",\"NP\",\"US\");\n    assertOrderOf(tuples, \"name_s\", \"Algeria\", \"Canada\", \"Great Britian\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n  }\n\n","sourceOld":"  private void testJDBCSolrMerge() throws Exception {\n    clearData();\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('AL', 'Algeria')\");\n    statement.close();\n    connection.close();\n    \n    // Load Solr\n    indexr(id, \"0\", \"code_s\", \"GB\", \"name_s\", \"Great Britian\");\n    indexr(id, \"1\", \"code_s\", \"CA\", \"name_s\", \"Canada\");\n    commit();\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class);\n    \n    List<Tuple> tuples;\n    \n    // Simple 1\n    TupleStream jdbcStream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    TupleStream selectStream = new SelectStream(jdbcStream, new HashMap<String, String>(){{ put(\"CODE\", \"code_s\"); put(\"COUNTRY_NAME\", \"name_s\"); }});\n    TupleStream searchStream = factory.constructStream(\"search(collection1, fl=\\\"code_s,name_s\\\",q=\\\"*:*\\\",sort=\\\"code_s asc\\\")\");\n    TupleStream mergeStream = new MergeStream(new FieldComparator(\"code_s\", ComparatorOrder.ASCENDING), new TupleStream[]{selectStream,searchStream});\n    \n    tuples = getTuples(mergeStream);\n    \n    assertEquals(7, tuples.size());\n    assertOrderOf(tuples, \"code_s\", \"AL\",\"CA\",\"GB\",\"NL\",\"NO\",\"NP\",\"US\");\n    assertOrderOf(tuples, \"name_s\", \"Algeria\", \"Canada\", \"Great Britian\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrMerge().mjava","sourceNew":"  @Test\n  public void testJDBCSolrMerge() throws Exception {\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('AL', 'Algeria')\");\n    }\n    \n    // Load Solr\n    new UpdateRequest()\n        .add(id, \"0\", \"code_s\", \"GB\", \"name_s\", \"Great Britian\")\n        .add(id, \"1\", \"code_s\", \"CA\", \"name_s\", \"Canada\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class);\n    \n    List<Tuple> tuples;\n    \n    // Simple 1\n    TupleStream jdbcStream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    TupleStream selectStream = new SelectStream(jdbcStream, new HashMap<String, String>(){{ put(\"CODE\", \"code_s\"); put(\"COUNTRY_NAME\", \"name_s\"); }});\n    TupleStream searchStream = factory.constructStream(\"search(\" + COLLECTION + \", fl=\\\"code_s,name_s\\\",q=\\\"*:*\\\",sort=\\\"code_s asc\\\")\");\n    TupleStream mergeStream = new MergeStream(new FieldComparator(\"code_s\", ComparatorOrder.ASCENDING), new TupleStream[]{selectStream,searchStream});\n    \n    tuples = getTuples(mergeStream);\n    \n    assertEquals(7, tuples.size());\n    assertOrderOf(tuples, \"code_s\", \"AL\",\"CA\",\"GB\",\"NL\",\"NO\",\"NP\",\"US\");\n    assertOrderOf(tuples, \"name_s\", \"Algeria\", \"Canada\", \"Great Britian\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n  }\n\n","sourceOld":"  private void testJDBCSolrMerge() throws Exception {\n    clearData();\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('AL', 'Algeria')\");\n    statement.close();\n    connection.close();\n    \n    // Load Solr\n    indexr(id, \"0\", \"code_s\", \"GB\", \"name_s\", \"Great Britian\");\n    indexr(id, \"1\", \"code_s\", \"CA\", \"name_s\", \"Canada\");\n    commit();\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class);\n    \n    List<Tuple> tuples;\n    \n    // Simple 1\n    TupleStream jdbcStream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    TupleStream selectStream = new SelectStream(jdbcStream, new HashMap<String, String>(){{ put(\"CODE\", \"code_s\"); put(\"COUNTRY_NAME\", \"name_s\"); }});\n    TupleStream searchStream = factory.constructStream(\"search(collection1, fl=\\\"code_s,name_s\\\",q=\\\"*:*\\\",sort=\\\"code_s asc\\\")\");\n    TupleStream mergeStream = new MergeStream(new FieldComparator(\"code_s\", ComparatorOrder.ASCENDING), new TupleStream[]{selectStream,searchStream});\n    \n    tuples = getTuples(mergeStream);\n    \n    assertEquals(7, tuples.size());\n    assertOrderOf(tuples, \"code_s\", \"AL\",\"CA\",\"GB\",\"NL\",\"NO\",\"NP\",\"US\");\n    assertOrderOf(tuples, \"name_s\", \"Algeria\", \"Canada\", \"Great Britian\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrMerge().mjava","sourceNew":"  @Test\n  public void testJDBCSolrMerge() throws Exception {\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('AL', 'Algeria')\");\n    }\n    \n    // Load Solr\n    new UpdateRequest()\n        .add(id, \"0\", \"code_s\", \"GB\", \"name_s\", \"Great Britian\")\n        .add(id, \"1\", \"code_s\", \"CA\", \"name_s\", \"Canada\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class);\n    \n    List<Tuple> tuples;\n    \n    // Simple 1\n    TupleStream jdbcStream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    TupleStream selectStream = new SelectStream(jdbcStream, new HashMap<String, String>(){{ put(\"CODE\", \"code_s\"); put(\"COUNTRY_NAME\", \"name_s\"); }});\n    TupleStream searchStream = factory.constructStream(\"search(\" + COLLECTION + \", fl=\\\"code_s,name_s\\\",q=\\\"*:*\\\",sort=\\\"code_s asc\\\")\");\n    TupleStream mergeStream = new MergeStream(new FieldComparator(\"code_s\", ComparatorOrder.ASCENDING), new TupleStream[]{selectStream,searchStream});\n    \n    tuples = getTuples(mergeStream);\n    \n    assertEquals(7, tuples.size());\n    assertOrderOf(tuples, \"code_s\", \"AL\",\"CA\",\"GB\",\"NL\",\"NO\",\"NP\",\"US\");\n    assertOrderOf(tuples, \"name_s\", \"Algeria\", \"Canada\", \"Great Britian\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n  }\n\n","sourceOld":"  private void testJDBCSolrMerge() throws Exception {\n    clearData();\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('AL', 'Algeria')\");\n    statement.close();\n    connection.close();\n    \n    // Load Solr\n    indexr(id, \"0\", \"code_s\", \"GB\", \"name_s\", \"Great Britian\");\n    indexr(id, \"1\", \"code_s\", \"CA\", \"name_s\", \"Canada\");\n    commit();\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class);\n    \n    List<Tuple> tuples;\n    \n    // Simple 1\n    TupleStream jdbcStream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    TupleStream selectStream = new SelectStream(jdbcStream, new HashMap<String, String>(){{ put(\"CODE\", \"code_s\"); put(\"COUNTRY_NAME\", \"name_s\"); }});\n    TupleStream searchStream = factory.constructStream(\"search(collection1, fl=\\\"code_s,name_s\\\",q=\\\"*:*\\\",sort=\\\"code_s asc\\\")\");\n    TupleStream mergeStream = new MergeStream(new FieldComparator(\"code_s\", ComparatorOrder.ASCENDING), new TupleStream[]{selectStream,searchStream});\n    \n    tuples = getTuples(mergeStream);\n    \n    assertEquals(7, tuples.size());\n    assertOrderOf(tuples, \"code_s\", \"AL\",\"CA\",\"GB\",\"NL\",\"NO\",\"NP\",\"US\");\n    assertOrderOf(tuples, \"name_s\", \"Algeria\", \"Canada\", \"Great Britian\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrMerge().mjava","sourceNew":"  @Test\n  public void testJDBCSolrMerge() throws Exception {\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('AL', 'Algeria')\");\n    }\n    \n    // Load Solr\n    new UpdateRequest()\n        .add(id, \"0\", \"code_s\", \"GB\", \"name_s\", \"Great Britian\")\n        .add(id, \"1\", \"code_s\", \"CA\", \"name_s\", \"Canada\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class);\n    \n    List<Tuple> tuples;\n    \n    // Simple 1\n    TupleStream jdbcStream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    TupleStream selectStream = new SelectStream(jdbcStream, new HashMap<String, String>(){{ put(\"CODE\", \"code_s\"); put(\"COUNTRY_NAME\", \"name_s\"); }});\n    TupleStream searchStream = factory.constructStream(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"code_s,name_s\\\",q=\\\"*:*\\\",sort=\\\"code_s asc\\\")\");\n    TupleStream mergeStream = new MergeStream(new FieldComparator(\"code_s\", ComparatorOrder.ASCENDING), new TupleStream[]{selectStream,searchStream});\n    \n    tuples = getTuples(mergeStream);\n    \n    assertEquals(7, tuples.size());\n    assertOrderOf(tuples, \"code_s\", \"AL\",\"CA\",\"GB\",\"NL\",\"NO\",\"NP\",\"US\");\n    assertOrderOf(tuples, \"name_s\", \"Algeria\", \"Canada\", \"Great Britian\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n  }\n\n","sourceOld":"  @Test\n  public void testJDBCSolrMerge() throws Exception {\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('AL', 'Algeria')\");\n    }\n    \n    // Load Solr\n    new UpdateRequest()\n        .add(id, \"0\", \"code_s\", \"GB\", \"name_s\", \"Great Britian\")\n        .add(id, \"1\", \"code_s\", \"CA\", \"name_s\", \"Canada\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class);\n    \n    List<Tuple> tuples;\n    \n    // Simple 1\n    TupleStream jdbcStream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    TupleStream selectStream = new SelectStream(jdbcStream, new HashMap<String, String>(){{ put(\"CODE\", \"code_s\"); put(\"COUNTRY_NAME\", \"name_s\"); }});\n    TupleStream searchStream = factory.constructStream(\"search(\" + COLLECTION + \", fl=\\\"code_s,name_s\\\",q=\\\"*:*\\\",sort=\\\"code_s asc\\\")\");\n    TupleStream mergeStream = new MergeStream(new FieldComparator(\"code_s\", ComparatorOrder.ASCENDING), new TupleStream[]{selectStream,searchStream});\n    \n    tuples = getTuples(mergeStream);\n    \n    assertEquals(7, tuples.size());\n    assertOrderOf(tuples, \"code_s\", \"AL\",\"CA\",\"GB\",\"NL\",\"NO\",\"NP\",\"US\");\n    assertOrderOf(tuples, \"name_s\", \"Algeria\", \"Canada\", \"Great Britian\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrMerge().mjava","sourceNew":"  @Test\n  public void testJDBCSolrMerge() throws Exception {\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('AL', 'Algeria')\");\n    }\n    \n    // Load Solr\n    new UpdateRequest()\n        .add(id, \"0\", \"code_s\", \"GB\", \"name_s\", \"Great Britian\")\n        .add(id, \"1\", \"code_s\", \"CA\", \"name_s\", \"Canada\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class);\n    \n    List<Tuple> tuples;\n    \n    // Simple 1\n    TupleStream jdbcStream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    TupleStream selectStream = new SelectStream(jdbcStream, new HashMap<String, String>(){{ put(\"CODE\", \"code_s\"); put(\"COUNTRY_NAME\", \"name_s\"); }});\n    TupleStream searchStream = factory.constructStream(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"code_s,name_s\\\",q=\\\"*:*\\\",sort=\\\"code_s asc\\\")\");\n    TupleStream mergeStream = new MergeStream(new FieldComparator(\"code_s\", ComparatorOrder.ASCENDING), new TupleStream[]{selectStream,searchStream});\n    \n    tuples = getTuples(mergeStream);\n    \n    assertEquals(7, tuples.size());\n    assertOrderOf(tuples, \"code_s\", \"AL\",\"CA\",\"GB\",\"NL\",\"NO\",\"NP\",\"US\");\n    assertOrderOf(tuples, \"name_s\", \"Algeria\", \"Canada\", \"Great Britian\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n  }\n\n","sourceOld":"  @Test\n  public void testJDBCSolrMerge() throws Exception {\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('AL', 'Algeria')\");\n    }\n    \n    // Load Solr\n    new UpdateRequest()\n        .add(id, \"0\", \"code_s\", \"GB\", \"name_s\", \"Great Britian\")\n        .add(id, \"1\", \"code_s\", \"CA\", \"name_s\", \"Canada\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class);\n    \n    List<Tuple> tuples;\n    \n    // Simple 1\n    TupleStream jdbcStream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    TupleStream selectStream = new SelectStream(jdbcStream, new HashMap<String, String>(){{ put(\"CODE\", \"code_s\"); put(\"COUNTRY_NAME\", \"name_s\"); }});\n    TupleStream searchStream = factory.constructStream(\"search(\" + COLLECTION + \", fl=\\\"code_s,name_s\\\",q=\\\"*:*\\\",sort=\\\"code_s asc\\\")\");\n    TupleStream mergeStream = new MergeStream(new FieldComparator(\"code_s\", ComparatorOrder.ASCENDING), new TupleStream[]{selectStream,searchStream});\n    \n    tuples = getTuples(mergeStream);\n    \n    assertEquals(7, tuples.size());\n    assertOrderOf(tuples, \"code_s\", \"AL\",\"CA\",\"GB\",\"NL\",\"NO\",\"NP\",\"US\");\n    assertOrderOf(tuples, \"name_s\", \"Algeria\", \"Canada\", \"Great Britian\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrMerge().mjava","sourceNew":"  @Test\n  public void testJDBCSolrMerge() throws Exception {\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('AL', 'Algeria')\");\n    }\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    // Load Solr\n    new UpdateRequest()\n        .add(id, \"0\", \"code_s\", \"GB\", \"name_s\", \"Great Britian\")\n        .add(id, \"1\", \"code_s\", \"CA\", \"name_s\", \"Canada\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class);\n    \n    List<Tuple> tuples;\n\n    try {\n      // Simple 1\n      TupleStream jdbcStream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n      TupleStream selectStream = new SelectStream(jdbcStream, new HashMap<String, String>() {{\n        put(\"CODE\", \"code_s\");\n        put(\"COUNTRY_NAME\", \"name_s\");\n      }});\n      TupleStream searchStream = factory.constructStream(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"code_s,name_s\\\",q=\\\"*:*\\\",sort=\\\"code_s asc\\\")\");\n      TupleStream mergeStream = new MergeStream(new FieldComparator(\"code_s\", ComparatorOrder.ASCENDING), new TupleStream[]{selectStream, searchStream});\n      mergeStream.setStreamContext(streamContext);\n      tuples = getTuples(mergeStream);\n\n      assertEquals(7, tuples.size());\n      assertOrderOf(tuples, \"code_s\", \"AL\", \"CA\", \"GB\", \"NL\", \"NO\", \"NP\", \"US\");\n      assertOrderOf(tuples, \"name_s\", \"Algeria\", \"Canada\", \"Great Britian\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJDBCSolrMerge() throws Exception {\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('AL', 'Algeria')\");\n    }\n    \n    // Load Solr\n    new UpdateRequest()\n        .add(id, \"0\", \"code_s\", \"GB\", \"name_s\", \"Great Britian\")\n        .add(id, \"1\", \"code_s\", \"CA\", \"name_s\", \"Canada\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class);\n    \n    List<Tuple> tuples;\n    \n    // Simple 1\n    TupleStream jdbcStream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    TupleStream selectStream = new SelectStream(jdbcStream, new HashMap<String, String>(){{ put(\"CODE\", \"code_s\"); put(\"COUNTRY_NAME\", \"name_s\"); }});\n    TupleStream searchStream = factory.constructStream(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"code_s,name_s\\\",q=\\\"*:*\\\",sort=\\\"code_s asc\\\")\");\n    TupleStream mergeStream = new MergeStream(new FieldComparator(\"code_s\", ComparatorOrder.ASCENDING), new TupleStream[]{selectStream,searchStream});\n    \n    tuples = getTuples(mergeStream);\n    \n    assertEquals(7, tuples.size());\n    assertOrderOf(tuples, \"code_s\", \"AL\",\"CA\",\"GB\",\"NL\",\"NO\",\"NP\",\"US\");\n    assertOrderOf(tuples, \"name_s\", \"Algeria\", \"Canada\", \"Great Britian\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrMerge().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrMerge().mjava","sourceNew":"  @Test\n  public void testJDBCSolrMerge() throws Exception {\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('AL', 'Algeria')\");\n    }\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    \n    // Load Solr\n    new UpdateRequest()\n        .add(id, \"0\", \"code_s\", \"GB\", \"name_s\", \"Great Britian\")\n        .add(id, \"1\", \"code_s\", \"CA\", \"name_s\", \"Canada\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class);\n    \n    List<Tuple> tuples;\n\n    try {\n      // Simple 1\n      TupleStream jdbcStream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n      TupleStream selectStream = new SelectStream(jdbcStream, new HashMap<String, String>() {{\n        put(\"CODE\", \"code_s\");\n        put(\"COUNTRY_NAME\", \"name_s\");\n      }});\n      TupleStream searchStream = factory.constructStream(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"code_s,name_s\\\",q=\\\"*:*\\\",sort=\\\"code_s asc\\\")\");\n      TupleStream mergeStream = new MergeStream(new FieldComparator(\"code_s\", ComparatorOrder.ASCENDING), new TupleStream[]{selectStream, searchStream});\n      mergeStream.setStreamContext(streamContext);\n      tuples = getTuples(mergeStream);\n\n      assertEquals(7, tuples.size());\n      assertOrderOf(tuples, \"code_s\", \"AL\", \"CA\", \"GB\", \"NL\", \"NO\", \"NP\", \"US\");\n      assertOrderOf(tuples, \"name_s\", \"Algeria\", \"Canada\", \"Great Britian\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJDBCSolrMerge() throws Exception {\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('AL', 'Algeria')\");\n    }\n    \n    // Load Solr\n    new UpdateRequest()\n        .add(id, \"0\", \"code_s\", \"GB\", \"name_s\", \"Great Britian\")\n        .add(id, \"1\", \"code_s\", \"CA\", \"name_s\", \"Canada\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class);\n    \n    List<Tuple> tuples;\n    \n    // Simple 1\n    TupleStream jdbcStream = new JDBCStream(\"jdbc:hsqldb:mem:.\", \"select CODE,COUNTRY_NAME from COUNTRIES order by CODE\", new FieldComparator(\"CODE\", ComparatorOrder.ASCENDING));\n    TupleStream selectStream = new SelectStream(jdbcStream, new HashMap<String, String>(){{ put(\"CODE\", \"code_s\"); put(\"COUNTRY_NAME\", \"name_s\"); }});\n    TupleStream searchStream = factory.constructStream(\"search(\" + COLLECTIONORALIAS + \", fl=\\\"code_s,name_s\\\",q=\\\"*:*\\\",sort=\\\"code_s asc\\\")\");\n    TupleStream mergeStream = new MergeStream(new FieldComparator(\"code_s\", ComparatorOrder.ASCENDING), new TupleStream[]{selectStream,searchStream});\n    \n    tuples = getTuples(mergeStream);\n    \n    assertEquals(7, tuples.size());\n    assertOrderOf(tuples, \"code_s\", \"AL\",\"CA\",\"GB\",\"NL\",\"NO\",\"NP\",\"US\");\n    assertOrderOf(tuples, \"name_s\", \"Algeria\", \"Canada\", \"Great Britian\", \"Netherlands\", \"Norway\", \"Nepal\", \"United States\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["c533b201163bd7b15aa8881f922f9289a7668187","b940572a59da1b42b6c20ab5278155b12816807a"],"73450c0955930295d34703e7ddbfc6973b7a121a":["c533b201163bd7b15aa8881f922f9289a7668187","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["c533b201163bd7b15aa8881f922f9289a7668187","73450c0955930295d34703e7ddbfc6973b7a121a"],"c533b201163bd7b15aa8881f922f9289a7668187":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","8c969f15cd04d31e520319c619a445ae21f02d72"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["73450c0955930295d34703e7ddbfc6973b7a121a"],"b940572a59da1b42b6c20ab5278155b12816807a":["c533b201163bd7b15aa8881f922f9289a7668187"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","8c969f15cd04d31e520319c619a445ae21f02d72"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"c533b201163bd7b15aa8881f922f9289a7668187":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","b940572a59da1b42b6c20ab5278155b12816807a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c533b201163bd7b15aa8881f922f9289a7668187"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"b940572a59da1b42b6c20ab5278155b12816807a":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}