{"path":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"ed2c4ed5c29fe660a8439d197834decc1649a057","date":1216696633,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * TODO -- in the future, this could perhaps transform the NamedList without serializing it\n   * then parsing it from the serialized form.\n   * \n   * @param req\n   * @param rsp\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents\n   * become SolrDocuments, DocList becomes SolrDocumentList etc.\n   */\n  public NamedList<Object> getParsedResponse( SolrQueryRequest req, SolrQueryResponse rsp )\n  {\n    try {\n      BinaryResponseWriter writer = new BinaryResponseWriter();\n      ByteArrayOutputStream bos = new ByteArrayOutputStream();\n      writer.write( bos, req, rsp );\n      BinaryResponseParser parser = new BinaryResponseParser();\n      return parser.processResponse( new ByteArrayInputStream( bos.toByteArray() ), \"UTF-8\" );\n    }\n    catch( Exception ex ) {\n      throw new RuntimeException( ex );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c21420626551d54226c2de2888bfab0e0b0e72e6","date":1226958241,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * @param req\n   * @param rsp\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents\n   * become SolrDocuments, DocList becomes SolrDocumentList etc.\n   * \n   * @deprecated use {@link BinaryResponseWriter#getParsedResponse(SolrQueryRequest, SolrQueryResponse)}\n   */\n  public NamedList<Object> getParsedResponse( SolrQueryRequest req, SolrQueryResponse rsp )\n  {\n    return BinaryResponseWriter.getParsedResponse(req, rsp);\n  }\n\n","sourceOld":"  /**\n   * TODO -- in the future, this could perhaps transform the NamedList without serializing it\n   * then parsing it from the serialized form.\n   * \n   * @param req\n   * @param rsp\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents\n   * become SolrDocuments, DocList becomes SolrDocumentList etc.\n   */\n  public NamedList<Object> getParsedResponse( SolrQueryRequest req, SolrQueryResponse rsp )\n  {\n    try {\n      BinaryResponseWriter writer = new BinaryResponseWriter();\n      ByteArrayOutputStream bos = new ByteArrayOutputStream();\n      writer.write( bos, req, rsp );\n      BinaryResponseParser parser = new BinaryResponseParser();\n      return parser.processResponse( new ByteArrayInputStream( bos.toByteArray() ), \"UTF-8\" );\n    }\n    catch( Exception ex ) {\n      throw new RuntimeException( ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * @param req\n   * @param rsp\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents\n   * become SolrDocuments, DocList becomes SolrDocumentList etc.\n   * \n   * @deprecated use {@link BinaryResponseWriter#getParsedResponse(SolrQueryRequest, SolrQueryResponse)}\n   */\n  public NamedList<Object> getParsedResponse( SolrQueryRequest req, SolrQueryResponse rsp )\n  {\n    return BinaryResponseWriter.getParsedResponse(req, rsp);\n  }\n\n","sourceOld":"  /**\n   * @param req\n   * @param rsp\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents\n   * become SolrDocuments, DocList becomes SolrDocumentList etc.\n   * \n   * @deprecated use {@link BinaryResponseWriter#getParsedResponse(SolrQueryRequest, SolrQueryResponse)}\n   */\n  public NamedList<Object> getParsedResponse( SolrQueryRequest req, SolrQueryResponse rsp )\n  {\n    return BinaryResponseWriter.getParsedResponse(req, rsp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["c21420626551d54226c2de2888bfab0e0b0e72e6"],"c21420626551d54226c2de2888bfab0e0b0e72e6":["ed2c4ed5c29fe660a8439d197834decc1649a057"],"ed2c4ed5c29fe660a8439d197834decc1649a057":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"c21420626551d54226c2de2888bfab0e0b0e72e6":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"ed2c4ed5c29fe660a8439d197834decc1649a057":["c21420626551d54226c2de2888bfab0e0b0e72e6"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ed2c4ed5c29fe660a8439d197834decc1649a057"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}