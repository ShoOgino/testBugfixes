{"path":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","commits":[{"id":"20be168d828ac40d262f85364d02f15b491dd88b","date":1469725145,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    // HttpClient 4.4.x throws NPE if query string is null and parsed through URLEncodedUtils.\n    // See HTTPCLIENT-1746 and HADOOP-12767\n    HttpServletRequest httpRequest = (HttpServletRequest)request;\n    String queryString = httpRequest.getQueryString();\n    final String nonNullQueryString = queryString == null ? \"\" : queryString;\n    HttpServletRequest requestNonNullQueryString = new HttpServletRequestWrapper(httpRequest){\n      @Override\n      public String getQueryString() {\n        return nonNullQueryString;\n      }\n    };\n    super.doFilter(requestNonNullQueryString, response, filterChain);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3d73ce4049cb1520abaaae57fe8267639bda1d","date":1470181330,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    // HttpClient 4.4.x throws NPE if query string is null and parsed through URLEncodedUtils.\n    // See HTTPCLIENT-1746 and HADOOP-12767\n    HttpServletRequest httpRequest = (HttpServletRequest)request;\n    String queryString = httpRequest.getQueryString();\n    final String nonNullQueryString = queryString == null ? \"\" : queryString;\n    HttpServletRequest requestNonNullQueryString = new HttpServletRequestWrapper(httpRequest){\n      @Override\n      public String getQueryString() {\n        return nonNullQueryString;\n      }\n    };\n\n    // include Impersonator User Name in case someone (e.g. logger) wants it\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    super.doFilter(requestNonNullQueryString, response, filterChainWrapper);\n  }\n\n","sourceOld":"  @Override\n  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    // HttpClient 4.4.x throws NPE if query string is null and parsed through URLEncodedUtils.\n    // See HTTPCLIENT-1746 and HADOOP-12767\n    HttpServletRequest httpRequest = (HttpServletRequest)request;\n    String queryString = httpRequest.getQueryString();\n    final String nonNullQueryString = queryString == null ? \"\" : queryString;\n    HttpServletRequest requestNonNullQueryString = new HttpServletRequestWrapper(httpRequest){\n      @Override\n      public String getQueryString() {\n        return nonNullQueryString;\n      }\n    };\n    super.doFilter(requestNonNullQueryString, response, filterChain);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    // HttpClient 4.4.x throws NPE if query string is null and parsed through URLEncodedUtils.\n    // See HTTPCLIENT-1746 and HADOOP-12767\n    HttpServletRequest httpRequest = (HttpServletRequest)request;\n    String queryString = httpRequest.getQueryString();\n    final String nonNullQueryString = queryString == null ? \"\" : queryString;\n    HttpServletRequest requestNonNullQueryString = new HttpServletRequestWrapper(httpRequest){\n      @Override\n      public String getQueryString() {\n        return nonNullQueryString;\n      }\n    };\n\n    // include Impersonator User Name in case someone (e.g. logger) wants it\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    super.doFilter(requestNonNullQueryString, response, filterChainWrapper);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    // HttpClient 4.4.x throws NPE if query string is null and parsed through URLEncodedUtils.\n    // See HTTPCLIENT-1746 and HADOOP-12767\n    HttpServletRequest httpRequest = (HttpServletRequest)request;\n    String queryString = httpRequest.getQueryString();\n    final String nonNullQueryString = queryString == null ? \"\" : queryString;\n    HttpServletRequest requestNonNullQueryString = new HttpServletRequestWrapper(httpRequest){\n      @Override\n      public String getQueryString() {\n        return nonNullQueryString;\n      }\n    };\n\n    // include Impersonator User Name in case someone (e.g. logger) wants it\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    super.doFilter(requestNonNullQueryString, response, filterChainWrapper);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    // HttpClient 4.4.x throws NPE if query string is null and parsed through URLEncodedUtils.\n    // See HTTPCLIENT-1746 and HADOOP-12767\n    HttpServletRequest httpRequest = (HttpServletRequest)request;\n    String queryString = httpRequest.getQueryString();\n    final String nonNullQueryString = queryString == null ? \"\" : queryString;\n    HttpServletRequest requestNonNullQueryString = new HttpServletRequestWrapper(httpRequest){\n      @Override\n      public String getQueryString() {\n        return nonNullQueryString;\n      }\n    };\n\n    // include Impersonator User Name in case someone (e.g. logger) wants it\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        Locale.setDefault(defaultLocale);\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    // A hack until HADOOP-15681 get committed\n    Locale.setDefault(Locale.US);\n    super.doFilter(requestNonNullQueryString, response, filterChainWrapper);\n  }\n\n","sourceOld":"  @Override\n  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    // HttpClient 4.4.x throws NPE if query string is null and parsed through URLEncodedUtils.\n    // See HTTPCLIENT-1746 and HADOOP-12767\n    HttpServletRequest httpRequest = (HttpServletRequest)request;\n    String queryString = httpRequest.getQueryString();\n    final String nonNullQueryString = queryString == null ? \"\" : queryString;\n    HttpServletRequest requestNonNullQueryString = new HttpServletRequestWrapper(httpRequest){\n      @Override\n      public String getQueryString() {\n        return nonNullQueryString;\n      }\n    };\n\n    // include Impersonator User Name in case someone (e.g. logger) wants it\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    super.doFilter(requestNonNullQueryString, response, filterChainWrapper);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1a50a91e95e682dfbb9d918e8b1fdd7bb895303","date":1551036207,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    // include Impersonator User Name in case someone (e.g. logger) wants it\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        Locale.setDefault(defaultLocale);\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    // A hack until HADOOP-15681 get committed\n    Locale.setDefault(Locale.US);\n    super.doFilter(request, response, filterChainWrapper);\n  }\n\n","sourceOld":"  @Override\n  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    // HttpClient 4.4.x throws NPE if query string is null and parsed through URLEncodedUtils.\n    // See HTTPCLIENT-1746 and HADOOP-12767\n    HttpServletRequest httpRequest = (HttpServletRequest)request;\n    String queryString = httpRequest.getQueryString();\n    final String nonNullQueryString = queryString == null ? \"\" : queryString;\n    HttpServletRequest requestNonNullQueryString = new HttpServletRequestWrapper(httpRequest){\n      @Override\n      public String getQueryString() {\n        return nonNullQueryString;\n      }\n    };\n\n    // include Impersonator User Name in case someone (e.g. logger) wants it\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        Locale.setDefault(defaultLocale);\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    // A hack until HADOOP-15681 get committed\n    Locale.setDefault(Locale.US);\n    super.doFilter(requestNonNullQueryString, response, filterChainWrapper);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","date":1551083645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter#doFilter(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    // include Impersonator User Name in case someone (e.g. logger) wants it\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        Locale.setDefault(defaultLocale);\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    // A hack until HADOOP-15681 get committed\n    Locale.setDefault(Locale.US);\n    super.doFilter(request, response, filterChainWrapper);\n  }\n\n","sourceOld":"  @Override\n  public void doFilter(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws IOException, ServletException {\n    // HttpClient 4.4.x throws NPE if query string is null and parsed through URLEncodedUtils.\n    // See HTTPCLIENT-1746 and HADOOP-12767\n    HttpServletRequest httpRequest = (HttpServletRequest)request;\n    String queryString = httpRequest.getQueryString();\n    final String nonNullQueryString = queryString == null ? \"\" : queryString;\n    HttpServletRequest requestNonNullQueryString = new HttpServletRequestWrapper(httpRequest){\n      @Override\n      public String getQueryString() {\n        return nonNullQueryString;\n      }\n    };\n\n    // include Impersonator User Name in case someone (e.g. logger) wants it\n    FilterChain filterChainWrapper = new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse)\n          throws IOException, ServletException {\n        Locale.setDefault(defaultLocale);\n        HttpServletRequest httpRequest = (HttpServletRequest) servletRequest;\n\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\n        if (ugi != null && ugi.getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) {\n          UserGroupInformation realUserUgi = ugi.getRealUser();\n          if (realUserUgi != null) {\n            httpRequest.setAttribute(KerberosPlugin.IMPERSONATOR_USER_NAME, realUserUgi.getShortUserName());\n          }\n        }\n        filterChain.doFilter(servletRequest, servletResponse);\n      }\n    };\n\n    // A hack until HADOOP-15681 get committed\n    Locale.setDefault(Locale.US);\n    super.doFilter(requestNonNullQueryString, response, filterChainWrapper);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"cc3d73ce4049cb1520abaaae57fe8267639bda1d":["20be168d828ac40d262f85364d02f15b491dd88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b1a50a91e95e682dfbb9d918e8b1fdd7bb895303":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"20be168d828ac40d262f85364d02f15b491dd88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["1a77e5e21cbd575a8240b0e3926164f15295f4e8","b1a50a91e95e682dfbb9d918e8b1fdd7bb895303"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["b1a50a91e95e682dfbb9d918e8b1fdd7bb895303","0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"cc3d73ce4049cb1520abaaae57fe8267639bda1d":["1a77e5e21cbd575a8240b0e3926164f15295f4e8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20be168d828ac40d262f85364d02f15b491dd88b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"b1a50a91e95e682dfbb9d918e8b1fdd7bb895303":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"20be168d828ac40d262f85364d02f15b491dd88b":["cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}