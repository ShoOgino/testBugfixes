{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#compareTo(FacetLabel).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#compareTo(FacetLabel).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#compareTo(CategoryPath).mjava","sourceNew":"  /**\n   * Compares this path with another {@link FacetLabel} for lexicographic\n   * order.\n   */\n  @Override\n  public int compareTo(FacetLabel other) {\n    final int len = length < other.length ? length : other.length;\n    for (int i = 0, j = 0; i < len; i++, j++) {\n      int cmp = components[i].compareTo(other.components[j]);\n      if (cmp < 0) return -1; // this is 'before'\n      if (cmp > 0) return 1; // this is 'after'\n    }\n    \n    // one is a prefix of the other\n    return length - other.length;\n  }\n\n","sourceOld":"  /**\n   * Compares this path with another {@link CategoryPath} for lexicographic\n   * order.\n   */\n  @Override\n  public int compareTo(CategoryPath other) {\n    final int len = length < other.length ? length : other.length;\n    for (int i = 0, j = 0; i < len; i++, j++) {\n      int cmp = components[i].compareTo(other.components[j]);\n      if (cmp < 0) return -1; // this is 'before'\n      if (cmp > 0) return 1; // this is 'after'\n    }\n    \n    // one is a prefix of the other\n    return length - other.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9264c0cc71ca63967ca4c832e5d3514c000b55e6","date":1386094934,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#compareTo(FacetLabel).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#compareTo(FacetLabel).mjava","sourceNew":"  /**\n   * Compares this path with another {@link FacetLabel} for lexicographic\n   * order.\n   */\n  @Override\n  public int compareTo(FacetLabel other) {\n    final int len = length < other.length ? length : other.length;\n    for (int i = 0, j = 0; i < len; i++, j++) {\n      int cmp = components[i].compareTo(other.components[j]);\n      if (cmp < 0) {\n        return -1; // this is 'before'\n      }\n      if (cmp > 0) {\n        return 1; // this is 'after'\n      }\n    }\n    \n    // one is a prefix of the other\n    return length - other.length;\n  }\n\n","sourceOld":"  /**\n   * Compares this path with another {@link FacetLabel} for lexicographic\n   * order.\n   */\n  @Override\n  public int compareTo(FacetLabel other) {\n    final int len = length < other.length ? length : other.length;\n    for (int i = 0, j = 0; i < len; i++, j++) {\n      int cmp = components[i].compareTo(other.components[j]);\n      if (cmp < 0) return -1; // this is 'before'\n      if (cmp > 0) return 1; // this is 'after'\n    }\n    \n    // one is a prefix of the other\n    return length - other.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/FacetLabel#compareTo(FacetLabel).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compares this path with another {@link FacetLabel} for lexicographic\n   * order.\n   */\n  @Override\n  public int compareTo(FacetLabel other) {\n    final int len = length < other.length ? length : other.length;\n    for (int i = 0, j = 0; i < len; i++, j++) {\n      int cmp = components[i].compareTo(other.components[j]);\n      if (cmp < 0) {\n        return -1; // this is 'before'\n      }\n      if (cmp > 0) {\n        return 1; // this is 'after'\n      }\n    }\n    \n    // one is a prefix of the other\n    return length - other.length;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9264c0cc71ca63967ca4c832e5d3514c000b55e6":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9264c0cc71ca63967ca4c832e5d3514c000b55e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9264c0cc71ca63967ca4c832e5d3514c000b55e6":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["9264c0cc71ca63967ca4c832e5d3514c000b55e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}