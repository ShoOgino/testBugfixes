{"path":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","commits":[{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockRAMOutputStream#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name);\n    } else {\n      delegate.writeBytes(b, offset, len);\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name);\n    } else {\n      super.writeBytes(b, offset, len);\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name);\n    } else {\n      delegate.writeBytes(b, offset, len);\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name);\n    } else {\n      delegate.writeBytes(b, offset, len);\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6395eaae7ec8e80087f6325dce5ed5f4b095ca42","date":1290335319,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e1cbd7e289dc1243c7a59e1a83d078163a147fe","date":1292268032,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize == 0 ? 0 : dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0) {\n        realUsage += freeSpace;\n        delegate.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      String message = \"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name + \" (file length=\" + delegate.length();\n      if (freeSpace > 0) {\n        message += \"; wrote \" + freeSpace + \" of \" + len + \" bytes\";\n      }\n      message += \")\";\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": MDW: now throw fake disk full\");\n        new Throwable().printStackTrace(System.out);\n      }\n      throw new IOException(message);\n    } else {\n      if (dir.randomState.nextBoolean()) {\n        final int half = len/2;\n        delegate.writeBytes(b, offset, half);\n        Thread.yield();\n        delegate.writeBytes(b, offset+half, len-half);\n      } else {\n        delegate.writeBytes(b, offset, len);\n      }\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["6395eaae7ec8e80087f6325dce5ed5f4b095ca42"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a05409176bd65129d67a785ee70e881e238a9aef","53a31399f2471493d67b19a95c028a74e0113b6a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3bb13258feba31ab676502787ab2e1779f129b7a","7e1cbd7e289dc1243c7a59e1a83d078163a147fe"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7e1cbd7e289dc1243c7a59e1a83d078163a147fe"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["7e1cbd7e289dc1243c7a59e1a83d078163a147fe"],"6395eaae7ec8e80087f6325dce5ed5f4b095ca42":["53a31399f2471493d67b19a95c028a74e0113b6a"],"53a31399f2471493d67b19a95c028a74e0113b6a":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7e1cbd7e289dc1243c7a59e1a83d078163a147fe":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","6395eaae7ec8e80087f6325dce5ed5f4b095ca42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["7e1cbd7e289dc1243c7a59e1a83d078163a147fe"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3bb13258feba31ab676502787ab2e1779f129b7a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"6395eaae7ec8e80087f6325dce5ed5f4b095ca42":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","3bb13258feba31ab676502787ab2e1779f129b7a"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","6395eaae7ec8e80087f6325dce5ed5f4b095ca42"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a05409176bd65129d67a785ee70e881e238a9aef"],"a05409176bd65129d67a785ee70e881e238a9aef":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","53a31399f2471493d67b19a95c028a74e0113b6a"],"7e1cbd7e289dc1243c7a59e1a83d078163a147fe":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"3bb13258feba31ab676502787ab2e1779f129b7a":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}