{"path":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","commits":[{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream != null) {\n      message(\"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).gen >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream != null) {\n      message(\"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).gen >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream != null) {\n      message(\"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).gen >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","sourceNew":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream != null) {\n      message(\"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","sourceOld":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream != null) {\n      message(\"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).gen >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","sourceNew":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream != null) {\n      message(\"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","sourceOld":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream != null) {\n      message(\"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).gen >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","sourceNew":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream != null) {\n      message(\"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","sourceOld":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream != null) {\n      message(\"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).gen >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","sourceNew":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream != null) {\n      message(\"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","sourceOld":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream != null) {\n      message(\"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).gen >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","sourceNew":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream != null) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","sourceOld":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream != null) {\n      message(\"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","sourceNew":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","sourceOld":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream != null) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletesStream#prune(SegmentInfos).mjava","sourceNew":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","sourceOld":"  // Lock order IW -> BD\n  /* Removes any BufferedDeletes that we no longer need to\n   * store because all segments in the index have had the\n   * deletes applied. */\n  public synchronized void prune(SegmentInfos segmentInfos) {\n    assert checkDeleteStats();\n    long minGen = Long.MAX_VALUE;\n    for(SegmentInfo info : segmentInfos) {\n      minGen = Math.min(info.getBufferedDeletesGen(), minGen);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"prune sis=\" + segmentInfos + \" minGen=\" + minGen + \" packetCount=\" + deletes.size());\n    }\n    final int limit = deletes.size();\n    for(int delIDX=0;delIDX<limit;delIDX++) {\n      if (deletes.get(delIDX).delGen() >= minGen) {\n        prune(delIDX);\n        assert checkDeleteStats();\n        return;\n      }\n    }\n\n    // All deletes pruned\n    prune(limit);\n    assert !any();\n    assert checkDeleteStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"06584e6e98d592b34e1329b384182f368d2025e8":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["c19f985e36a65cc969e8e564fe337a0d41512075","327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","c19f985e36a65cc969e8e564fe337a0d41512075","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["06584e6e98d592b34e1329b384182f368d2025e8","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c19f985e36a65cc969e8e564fe337a0d41512075":["a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}