{"path":"lucene/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDISI(Filter,AtomicReaderContext).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDISI(Filter,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDISI(Filter,AtomicReaderContext).mjava","sourceNew":"  private static DocIdSetIterator getDISI(Filter filter, AtomicReaderContext context)\n      throws IOException {\n    // we dont pass acceptDocs, we will filter at the end using an additional filter\n    final DocIdSet set = filter.getDocIdSet(context, null);\n    return (set == null || set == DocIdSet.EMPTY_DOCIDSET) ? null : set.iterator();\n  }\n\n","sourceOld":"  private static DocIdSetIterator getDISI(Filter filter, AtomicReaderContext context)\n      throws IOException {\n    // we dont pass acceptDocs, we will filter at the end using an additional filter\n    final DocIdSet set = filter.getDocIdSet(context, null);\n    return (set == null || set == DocIdSet.EMPTY_DOCIDSET) ? null : set.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc06632ede7e48a5ddc6917badec25c8336feedc","date":1366983006,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDISI(Filter,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDISI(Filter,AtomicReaderContext).mjava","sourceNew":"  private static DocIdSetIterator getDISI(Filter filter, AtomicReaderContext context)\n      throws IOException {\n    // we dont pass acceptDocs, we will filter at the end using an additional filter\n    final DocIdSet set = filter.getDocIdSet(context, null);\n    return set == null ? null : set.iterator();\n  }\n\n","sourceOld":"  private static DocIdSetIterator getDISI(Filter filter, AtomicReaderContext context)\n      throws IOException {\n    // we dont pass acceptDocs, we will filter at the end using an additional filter\n    final DocIdSet set = filter.getDocIdSet(context, null);\n    return (set == null || set == DocIdSet.EMPTY_DOCIDSET) ? null : set.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDISI(Filter,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  private static DocIdSetIterator getDISI(Filter filter, AtomicReaderContext context)\n      throws IOException {\n    // we dont pass acceptDocs, we will filter at the end using an additional filter\n    final DocIdSet set = filter.getDocIdSet(context, null);\n    return set == null ? null : set.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}