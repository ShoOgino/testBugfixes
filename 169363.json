{"path":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","commits":[{"id":"5020da750a71655fe1dad8a3a51f7fa3562d14fb","date":1121597234,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(new String[]{}), true);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    Hits hits = searcher.search(q);\n    assertEquals(\"Wrong number of hits\", 0, hits.length());\n    searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(new String[]{}), true, IndexWriter.MaxFieldLength.LIMITED);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    Hits hits = searcher.search(q);\n    assertEquals(\"Wrong number of hits\", 0, hits.length());\n    searcher.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(new String[]{}), true);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    Hits hits = searcher.search(q);\n    assertEquals(\"Wrong number of hits\", 0, hits.length());\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(new String[]{}), true, IndexWriter.MaxFieldLength.LIMITED);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(new String[]{}), true, IndexWriter.MaxFieldLength.LIMITED);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    Hits hits = searcher.search(q);\n    assertEquals(\"Wrong number of hits\", 0, hits.length());\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c881464041e282c06fdb34e91f883b83b8d97968","date":1247607562,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(new HashSet(0)), true, IndexWriter.MaxFieldLength.LIMITED);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(new String[]{}), true, IndexWriter.MaxFieldLength.LIMITED);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(new HashSet(0)), true, IndexWriter.MaxFieldLength.LIMITED);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(new HashSet(0)), true, IndexWriter.MaxFieldLength.LIMITED);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(new HashSet(0)), true, IndexWriter.MaxFieldLength.LIMITED);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(new HashSet(0)), true, IndexWriter.MaxFieldLength.LIMITED);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet()), true, IndexWriter.MaxFieldLength.LIMITED);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(new HashSet(0)), true, IndexWriter.MaxFieldLength.LIMITED);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet()), true, IndexWriter.MaxFieldLength.LIMITED);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet()), true, IndexWriter.MaxFieldLength.LIMITED);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(\n        TEST_VERSION_CURRENT, Collections.emptySet())));\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet()), true, IndexWriter.MaxFieldLength.LIMITED);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet()), true, IndexWriter.MaxFieldLength.LIMITED);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(\n        TEST_VERSION_CURRENT, Collections.emptySet())));\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT, Collections.emptySet())));\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet()), true, IndexWriter.MaxFieldLength.LIMITED);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT, Collections.emptySet())));\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT, Collections.emptySet())));\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n\n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble.add(new Term[] { new Term(\"body\", \"test\"), new Term(\"body\", \"this\") });\n    q.add(trouble, BooleanClause.Occur.MUST);\n\n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"0a046c0c310bc77931fc8441bd920053b607dd14":["c881464041e282c06fdb34e91f883b83b8d97968","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"c881464041e282c06fdb34e91f883b83b8d97968":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5020da750a71655fe1dad8a3a51f7fa3562d14fb"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["c881464041e282c06fdb34e91f883b83b8d97968"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["0a046c0c310bc77931fc8441bd920053b607dd14"],"5020da750a71655fe1dad8a3a51f7fa3562d14fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"c881464041e282c06fdb34e91f883b83b8d97968":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5020da750a71655fe1dad8a3a51f7fa3562d14fb"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["c881464041e282c06fdb34e91f883b83b8d97968"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"5020da750a71655fe1dad8a3a51f7fa3562d14fb":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}