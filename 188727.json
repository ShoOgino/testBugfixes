{"path":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer,boolean).mjava","commits":[{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer).mjava","sourceNew":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SimScorer docScorer, boolean needsScores) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    // min(cost)\n    cost = postings[0].postings.cost();\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    if (postings.length > 0) {\n      min = new PhrasePositions(postings[0].postings, postings[0].position, 0, postings[0].terms);\n      max = min;\n      max.doc = -1;\n      for (int i = 1; i < postings.length; i++) {\n        PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n        max.next = pp;\n        max = pp;\n        max.doc = -1;\n      }\n      max.next = min; // make it cyclic for easier manipulation\n    }\n  }\n\n","sourceOld":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SimScorer docScorer) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    // min(cost)\n    cost = postings[0].postings.cost();\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    if (postings.length > 0) {\n      min = new PhrasePositions(postings[0].postings, postings[0].position, 0, postings[0].terms);\n      max = min;\n      max.doc = -1;\n      for (int i = 1; i < postings.length; i++) {\n        PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n        max.next = pp;\n        max = pp;\n        max.doc = -1;\n      }\n      max.next = min; // make it cyclic for easier manipulation\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54562c0e8e43530c289ddd16a9d75bc1901fd7b0","date":1424714129,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer,boolean).mjava","sourceNew":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SimScorer docScorer, boolean needsScores) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    DocIdSetIterator[] iterators = new DocIdSetIterator[postings.length];\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      iterators[i] = postings[i].postings;\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n    conjunction = ConjunctionDISI.intersect(Arrays.asList(iterators));\n  }\n\n","sourceOld":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SimScorer docScorer, boolean needsScores) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    // min(cost)\n    cost = postings[0].postings.cost();\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    if (postings.length > 0) {\n      min = new PhrasePositions(postings[0].postings, postings[0].position, 0, postings[0].terms);\n      max = min;\n      max.doc = -1;\n      for (int i = 1; i < postings.length; i++) {\n        PhrasePositions pp = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n        max.next = pp;\n        max = pp;\n        max.doc = -1;\n      }\n      max.next = min; // make it cyclic for easier manipulation\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#SloppyPhraseScorer(Weight,PhraseQuery.PostingsAndFreq[],int,Similarity.SimScorer,boolean).mjava","sourceNew":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SimScorer docScorer, boolean needsScores,\n      float matchCost) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    DocIdSetIterator[] iterators = new DocIdSetIterator[postings.length];\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      iterators[i] = postings[i].postings;\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n    conjunction = ConjunctionDISI.intersect(Arrays.asList(iterators));\n    this.matchCost = matchCost;\n  }\n\n","sourceOld":"  SloppyPhraseScorer(Weight weight, PhraseQuery.PostingsAndFreq[] postings,\n      int slop, Similarity.SimScorer docScorer, boolean needsScores) {\n    super(weight);\n    this.docScorer = docScorer;\n    this.needsScores = needsScores;\n    this.slop = slop;\n    this.numPostings = postings==null ? 0 : postings.length;\n    pq = new PhraseQueue(postings.length);\n    DocIdSetIterator[] iterators = new DocIdSetIterator[postings.length];\n    phrasePositions = new PhrasePositions[postings.length];\n    for (int i = 0; i < postings.length; ++i) {\n      iterators[i] = postings[i].postings;\n      phrasePositions[i] = new PhrasePositions(postings[i].postings, postings[i].position, i, postings[i].terms);\n    }\n    conjunction = ConjunctionDISI.intersect(Arrays.asList(iterators));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["54562c0e8e43530c289ddd16a9d75bc1901fd7b0"],"54562c0e8e43530c289ddd16a9d75bc1901fd7b0":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d277693481ea6007c1d83cd503d0859bb3b64d20"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54562c0e8e43530c289ddd16a9d75bc1901fd7b0":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["54562c0e8e43530c289ddd16a9d75bc1901fd7b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}