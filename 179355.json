{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","sourceNew":"  /** Calendar utility method:\n   * Formats the calendar to ISO-8601 format, to include proper BC handling (1BC is \"0000\", 2BC is \"-0001\", etc.);\n   * and WITHOUT a trailing 'Z'.\n   * A fully cleared calendar will yield the string \"*\".\n   * The isSet() state of the Calendar is re-instated when done. */\n   @SuppressWarnings(\"fallthrough\")\n  public String toString(Calendar cal) {\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    if (calPrecField == -1)\n      return \"*\";\n    try {\n      //TODO not fully optimized; but it's at least not used in 'search'.\n      //TODO maybe borrow code from Solr DateUtil (put in Lucene util somewhere), and have it reference this back?\n      String pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n      int ptnLen = 0;\n      switch (calPrecField) {//switch fall-through is deliberate\n        case Calendar.MILLISECOND: ptnLen += 4;\n        case Calendar.SECOND: ptnLen += 3;\n        case Calendar.MINUTE: ptnLen += 3;\n        case Calendar.HOUR_OF_DAY: ptnLen += 5;\n        case Calendar.DAY_OF_MONTH: ptnLen += 3;\n        case Calendar.MONTH: ptnLen += 3;\n        case Calendar.YEAR: ptnLen += 4;\n        break;\n        default: throw new IllegalStateException(\"\"+calPrecField);\n      }\n      pattern = pattern.substring(0, ptnLen);\n      SimpleDateFormat format = new SimpleDateFormat(pattern, Locale.ROOT);\n      format.setTimeZone(cal.getTimeZone());\n      if (cal.get(Calendar.ERA) == 0) {//BC\n        //SDF doesn't do this properly according to ISO-8601\n        // Example: 1BC == \"0000\" (actually 0 AD), 2BC == \"-0001\", 3BC == \"-0002\", ...\n        final int yearOrig = cal.get(Calendar.YEAR);\n        cal.set(Calendar.YEAR, yearOrig-1);\n        String str;\n        try {\n          str = format.format(cal.getTime());\n        } finally {\n          //reset to what it was\n          cal.set(Calendar.ERA, 0);//necessary!\n          cal.set(Calendar.YEAR, yearOrig);\n        }\n        if (yearOrig > 1)\n          return \"-\" + str;\n        else\n          return \"0000\" + str.substring(4);\n      }\n      return format.format(cal.getTime());\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * Formats the calendar to ISO-8601 format, to include proper BC handling (1BC is \"0000\", 2BC is \"-0001\", etc.);\n   * and WITHOUT a trailing 'Z'.\n   * A fully cleared calendar will yield the string \"*\".\n   * The isSet() state of the Calendar is re-instated when done. */\n   @SuppressWarnings(\"fallthrough\")\n  public String toString(Calendar cal) {\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    if (calPrecField == -1)\n      return \"*\";\n    try {\n      //TODO not fully optimized; but it's at least not used in 'search'.\n      //TODO maybe borrow code from Solr DateUtil (put in Lucene util somewhere), and have it reference this back?\n      String pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n      int ptnLen = 0;\n      switch (calPrecField) {//switch fall-through is deliberate\n        case Calendar.MILLISECOND: ptnLen += 4;\n        case Calendar.SECOND: ptnLen += 3;\n        case Calendar.MINUTE: ptnLen += 3;\n        case Calendar.HOUR_OF_DAY: ptnLen += 5;\n        case Calendar.DAY_OF_MONTH: ptnLen += 3;\n        case Calendar.MONTH: ptnLen += 3;\n        case Calendar.YEAR: ptnLen += 4;\n        break;\n        default: throw new IllegalStateException(\"\"+calPrecField);\n      }\n      pattern = pattern.substring(0, ptnLen);\n      SimpleDateFormat format = new SimpleDateFormat(pattern, Locale.ROOT);\n      format.setTimeZone(cal.getTimeZone());\n      if (cal.get(Calendar.ERA) == 0) {//BC\n        //SDF doesn't do this properly according to ISO-8601\n        // Example: 1BC == \"0000\" (actually 0 AD), 2BC == \"-0001\", 3BC == \"-0002\", ...\n        final int yearOrig = cal.get(Calendar.YEAR);\n        cal.set(Calendar.YEAR, yearOrig-1);\n        String str;\n        try {\n          str = format.format(cal.getTime());\n        } finally {\n          //reset to what it was\n          cal.set(Calendar.ERA, 0);//necessary!\n          cal.set(Calendar.YEAR, yearOrig);\n        }\n        if (yearOrig > 1)\n          return \"-\" + str;\n        else\n          return \"0000\" + str.substring(4);\n      }\n      return format.format(cal.getTime());\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","sourceNew":"  /** Calendar utility method:\n   * Formats the calendar to ISO-8601 format, to include proper BC handling (1BC is \"0000\", 2BC is \"-0001\", etc.);\n   * and WITHOUT a trailing 'Z'.\n   * A fully cleared calendar will yield the string \"*\".\n   * The isSet() state of the Calendar is re-instated when done. */\n   @SuppressWarnings(\"fallthrough\")\n  public String toString(Calendar cal) {\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    if (calPrecField == -1)\n      return \"*\";\n    try {\n      //TODO not fully optimized; but it's at least not used in 'search'.\n      //TODO maybe borrow code from Solr DateUtil (put in Lucene util somewhere), and have it reference this back?\n      String pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n      int ptnLen = 0;\n      switch (calPrecField) {//switch fall-through is deliberate\n        case Calendar.MILLISECOND: ptnLen += 4;\n        case Calendar.SECOND: ptnLen += 3;\n        case Calendar.MINUTE: ptnLen += 3;\n        case Calendar.HOUR_OF_DAY: ptnLen += 5;\n        case Calendar.DAY_OF_MONTH: ptnLen += 3;\n        case Calendar.MONTH: ptnLen += 3;\n        case Calendar.YEAR: ptnLen += 4;\n        break;\n        default: throw new IllegalStateException(\"\"+calPrecField);\n      }\n      pattern = pattern.substring(0, ptnLen);\n      SimpleDateFormat format = new SimpleDateFormat(pattern, Locale.ROOT);\n      format.setTimeZone(cal.getTimeZone());\n      if (cal.get(Calendar.ERA) == 0) {//BC\n        //SDF doesn't do this properly according to ISO-8601\n        // Example: 1BC == \"0000\" (actually 0 AD), 2BC == \"-0001\", 3BC == \"-0002\", ...\n        final int yearOrig = cal.get(Calendar.YEAR);\n        cal.set(Calendar.YEAR, yearOrig-1);\n        String str;\n        try {\n          str = format.format(cal.getTime());\n        } finally {\n          //reset to what it was\n          cal.set(Calendar.ERA, 0);//necessary!\n          cal.set(Calendar.YEAR, yearOrig);\n        }\n        if (yearOrig > 1)\n          return \"-\" + str;\n        else\n          return \"0000\" + str.substring(4);\n      }\n      return format.format(cal.getTime());\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * Formats the calendar to ISO-8601 format, to include proper BC handling (1BC is \"0000\", 2BC is \"-0001\", etc.);\n   * and WITHOUT a trailing 'Z'.\n   * A fully cleared calendar will yield the string \"*\".\n   * The isSet() state of the Calendar is re-instated when done. */\n   @SuppressWarnings(\"fallthrough\")\n  public String toString(Calendar cal) {\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    if (calPrecField == -1)\n      return \"*\";\n    try {\n      //TODO not fully optimized; but it's at least not used in 'search'.\n      //TODO maybe borrow code from Solr DateUtil (put in Lucene util somewhere), and have it reference this back?\n      String pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n      int ptnLen = 0;\n      switch (calPrecField) {//switch fall-through is deliberate\n        case Calendar.MILLISECOND: ptnLen += 4;\n        case Calendar.SECOND: ptnLen += 3;\n        case Calendar.MINUTE: ptnLen += 3;\n        case Calendar.HOUR_OF_DAY: ptnLen += 5;\n        case Calendar.DAY_OF_MONTH: ptnLen += 3;\n        case Calendar.MONTH: ptnLen += 3;\n        case Calendar.YEAR: ptnLen += 4;\n        break;\n        default: throw new IllegalStateException(\"\"+calPrecField);\n      }\n      pattern = pattern.substring(0, ptnLen);\n      SimpleDateFormat format = new SimpleDateFormat(pattern, Locale.ROOT);\n      format.setTimeZone(cal.getTimeZone());\n      if (cal.get(Calendar.ERA) == 0) {//BC\n        //SDF doesn't do this properly according to ISO-8601\n        // Example: 1BC == \"0000\" (actually 0 AD), 2BC == \"-0001\", 3BC == \"-0002\", ...\n        final int yearOrig = cal.get(Calendar.YEAR);\n        cal.set(Calendar.YEAR, yearOrig-1);\n        String str;\n        try {\n          str = format.format(cal.getTime());\n        } finally {\n          //reset to what it was\n          cal.set(Calendar.ERA, 0);//necessary!\n          cal.set(Calendar.YEAR, yearOrig);\n        }\n        if (yearOrig > 1)\n          return \"-\" + str;\n        else\n          return \"0000\" + str.substring(4);\n      }\n      return format.format(cal.getTime());\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17bb09a766d49e4c0bb1049cebc1cf10236004f7","date":1463076873,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","sourceNew":"  /** Calendar utility method consistent with {@link java.time.format.DateTimeFormatter#ISO_INSTANT} except\n   * has no trailing 'Z', and will be truncated to the units given according to\n   * {@link Calendar#isSet(int)}.\n   * A fully cleared calendar will yield the string \"*\".\n   * The isSet() state of the Calendar is re-instated when done. */\n  public String toString(Calendar cal) {\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    if (calPrecField == -1)\n      return \"*\";\n    try {\n      StringBuilder builder = new StringBuilder(\"yyyy-MM-dd'T'HH:mm:ss.SSS\".length());//typical\n      int year = cal.get(Calendar.YEAR); // within the era (thus always positve).  >= 1.\n      if (cal.get(Calendar.ERA) == 0) { // BC\n        year -= 1; // 1BC should be \"0000\", so shift by one\n        if (year > 0) {\n          builder.append('-');\n        }\n      } else if (year > 9999) {\n        builder.append('+');\n      }\n      appendPadded(builder, year, (short) 4);\n      if (calPrecField >= Calendar.MONTH) {\n        builder.append('-');\n        appendPadded(builder, cal.get(Calendar.MONTH) + 1, (short) 2); // +1 since first is 0\n      }\n      if (calPrecField >= Calendar.DAY_OF_MONTH) {\n        builder.append('-');\n        appendPadded(builder, cal.get(Calendar.DAY_OF_MONTH), (short) 2);\n      }\n      if (calPrecField >= Calendar.HOUR_OF_DAY) {\n        builder.append('T');\n        appendPadded(builder, cal.get(Calendar.HOUR_OF_DAY), (short) 2);\n      }\n      if (calPrecField >= Calendar.MINUTE) {\n        builder.append(':');\n        appendPadded(builder, cal.get(Calendar.MINUTE), (short) 2);\n      }\n      if (calPrecField >= Calendar.SECOND) {\n        builder.append(':');\n        appendPadded(builder, cal.get(Calendar.SECOND), (short) 2);\n      }\n      if (calPrecField >= Calendar.MILLISECOND && cal.get(Calendar.MILLISECOND) > 0) { // only if non-zero\n        builder.append('.');\n        appendPadded(builder,  cal.get(Calendar.MILLISECOND), (short) 3);\n      }\n\n      return builder.toString();\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * Formats the calendar to ISO-8601 format, to include proper BC handling (1BC is \"0000\", 2BC is \"-0001\", etc.);\n   * and WITHOUT a trailing 'Z'.\n   * A fully cleared calendar will yield the string \"*\".\n   * The isSet() state of the Calendar is re-instated when done. */\n   @SuppressWarnings(\"fallthrough\")\n  public String toString(Calendar cal) {\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    if (calPrecField == -1)\n      return \"*\";\n    try {\n      //TODO not fully optimized; but it's at least not used in 'search'.\n      //TODO maybe borrow code from Solr DateUtil (put in Lucene util somewhere), and have it reference this back?\n      String pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n      int ptnLen = 0;\n      switch (calPrecField) {//switch fall-through is deliberate\n        case Calendar.MILLISECOND: ptnLen += 4;\n        case Calendar.SECOND: ptnLen += 3;\n        case Calendar.MINUTE: ptnLen += 3;\n        case Calendar.HOUR_OF_DAY: ptnLen += 5;\n        case Calendar.DAY_OF_MONTH: ptnLen += 3;\n        case Calendar.MONTH: ptnLen += 3;\n        case Calendar.YEAR: ptnLen += 4;\n        break;\n        default: throw new IllegalStateException(\"\"+calPrecField);\n      }\n      pattern = pattern.substring(0, ptnLen);\n      SimpleDateFormat format = new SimpleDateFormat(pattern, Locale.ROOT);\n      format.setTimeZone(cal.getTimeZone());\n      if (cal.get(Calendar.ERA) == 0) {//BC\n        //SDF doesn't do this properly according to ISO-8601\n        // Example: 1BC == \"0000\" (actually 0 AD), 2BC == \"-0001\", 3BC == \"-0002\", ...\n        final int yearOrig = cal.get(Calendar.YEAR);\n        cal.set(Calendar.YEAR, yearOrig-1);\n        String str;\n        try {\n          str = format.format(cal.getTime());\n        } finally {\n          //reset to what it was\n          cal.set(Calendar.ERA, 0);//necessary!\n          cal.set(Calendar.YEAR, yearOrig);\n        }\n        if (yearOrig > 1)\n          return \"-\" + str;\n        else\n          return \"0000\" + str.substring(4);\n      }\n      return format.format(cal.getTime());\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","sourceNew":"  /** Calendar utility method consistent with {@link java.time.format.DateTimeFormatter#ISO_INSTANT} except\n   * has no trailing 'Z', and will be truncated to the units given according to\n   * {@link Calendar#isSet(int)}.\n   * A fully cleared calendar will yield the string \"*\".\n   * The isSet() state of the Calendar is re-instated when done. */\n  public String toString(Calendar cal) {\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    if (calPrecField == -1)\n      return \"*\";\n    try {\n      StringBuilder builder = new StringBuilder(\"yyyy-MM-dd'T'HH:mm:ss.SSS\".length());//typical\n      int year = cal.get(Calendar.YEAR); // within the era (thus always positve).  >= 1.\n      if (cal.get(Calendar.ERA) == 0) { // BC\n        year -= 1; // 1BC should be \"0000\", so shift by one\n        if (year > 0) {\n          builder.append('-');\n        }\n      } else if (year > 9999) {\n        builder.append('+');\n      }\n      appendPadded(builder, year, (short) 4);\n      if (calPrecField >= Calendar.MONTH) {\n        builder.append('-');\n        appendPadded(builder, cal.get(Calendar.MONTH) + 1, (short) 2); // +1 since first is 0\n      }\n      if (calPrecField >= Calendar.DAY_OF_MONTH) {\n        builder.append('-');\n        appendPadded(builder, cal.get(Calendar.DAY_OF_MONTH), (short) 2);\n      }\n      if (calPrecField >= Calendar.HOUR_OF_DAY) {\n        builder.append('T');\n        appendPadded(builder, cal.get(Calendar.HOUR_OF_DAY), (short) 2);\n      }\n      if (calPrecField >= Calendar.MINUTE) {\n        builder.append(':');\n        appendPadded(builder, cal.get(Calendar.MINUTE), (short) 2);\n      }\n      if (calPrecField >= Calendar.SECOND) {\n        builder.append(':');\n        appendPadded(builder, cal.get(Calendar.SECOND), (short) 2);\n      }\n      if (calPrecField >= Calendar.MILLISECOND && cal.get(Calendar.MILLISECOND) > 0) { // only if non-zero\n        builder.append('.');\n        appendPadded(builder,  cal.get(Calendar.MILLISECOND), (short) 3);\n      }\n\n      return builder.toString();\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * Formats the calendar to ISO-8601 format, to include proper BC handling (1BC is \"0000\", 2BC is \"-0001\", etc.);\n   * and WITHOUT a trailing 'Z'.\n   * A fully cleared calendar will yield the string \"*\".\n   * The isSet() state of the Calendar is re-instated when done. */\n   @SuppressWarnings(\"fallthrough\")\n  public String toString(Calendar cal) {\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    if (calPrecField == -1)\n      return \"*\";\n    try {\n      //TODO not fully optimized; but it's at least not used in 'search'.\n      //TODO maybe borrow code from Solr DateUtil (put in Lucene util somewhere), and have it reference this back?\n      String pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n      int ptnLen = 0;\n      switch (calPrecField) {//switch fall-through is deliberate\n        case Calendar.MILLISECOND: ptnLen += 4;\n        case Calendar.SECOND: ptnLen += 3;\n        case Calendar.MINUTE: ptnLen += 3;\n        case Calendar.HOUR_OF_DAY: ptnLen += 5;\n        case Calendar.DAY_OF_MONTH: ptnLen += 3;\n        case Calendar.MONTH: ptnLen += 3;\n        case Calendar.YEAR: ptnLen += 4;\n        break;\n        default: throw new IllegalStateException(\"\"+calPrecField);\n      }\n      pattern = pattern.substring(0, ptnLen);\n      SimpleDateFormat format = new SimpleDateFormat(pattern, Locale.ROOT);\n      format.setTimeZone(cal.getTimeZone());\n      if (cal.get(Calendar.ERA) == 0) {//BC\n        //SDF doesn't do this properly according to ISO-8601\n        // Example: 1BC == \"0000\" (actually 0 AD), 2BC == \"-0001\", 3BC == \"-0002\", ...\n        final int yearOrig = cal.get(Calendar.YEAR);\n        cal.set(Calendar.YEAR, yearOrig-1);\n        String str;\n        try {\n          str = format.format(cal.getTime());\n        } finally {\n          //reset to what it was\n          cal.set(Calendar.ERA, 0);//necessary!\n          cal.set(Calendar.YEAR, yearOrig);\n        }\n        if (yearOrig > 1)\n          return \"-\" + str;\n        else\n          return \"0000\" + str.substring(4);\n      }\n      return format.format(cal.getTime());\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","sourceNew":"  /** Calendar utility method consistent with {@link java.time.format.DateTimeFormatter#ISO_INSTANT} except\n   * has no trailing 'Z', and will be truncated to the units given according to\n   * {@link Calendar#isSet(int)}.\n   * A fully cleared calendar will yield the string \"*\".\n   * The isSet() state of the Calendar is re-instated when done. */\n  public String toString(Calendar cal) {\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    if (calPrecField == -1)\n      return \"*\";\n    try {\n      StringBuilder builder = new StringBuilder(\"yyyy-MM-dd'T'HH:mm:ss.SSS\".length());//typical\n      int year = cal.get(Calendar.YEAR); // within the era (thus always positve).  >= 1.\n      if (cal.get(Calendar.ERA) == 0) { // BC\n        year -= 1; // 1BC should be \"0000\", so shift by one\n        if (year > 0) {\n          builder.append('-');\n        }\n      } else if (year > 9999) {\n        builder.append('+');\n      }\n      appendPadded(builder, year, (short) 4);\n      if (calPrecField >= Calendar.MONTH) {\n        builder.append('-');\n        appendPadded(builder, cal.get(Calendar.MONTH) + 1, (short) 2); // +1 since first is 0\n      }\n      if (calPrecField >= Calendar.DAY_OF_MONTH) {\n        builder.append('-');\n        appendPadded(builder, cal.get(Calendar.DAY_OF_MONTH), (short) 2);\n      }\n      if (calPrecField >= Calendar.HOUR_OF_DAY) {\n        builder.append('T');\n        appendPadded(builder, cal.get(Calendar.HOUR_OF_DAY), (short) 2);\n      }\n      if (calPrecField >= Calendar.MINUTE) {\n        builder.append(':');\n        appendPadded(builder, cal.get(Calendar.MINUTE), (short) 2);\n      }\n      if (calPrecField >= Calendar.SECOND) {\n        builder.append(':');\n        appendPadded(builder, cal.get(Calendar.SECOND), (short) 2);\n      }\n      if (calPrecField >= Calendar.MILLISECOND && cal.get(Calendar.MILLISECOND) > 0) { // only if non-zero\n        builder.append('.');\n        appendPadded(builder,  cal.get(Calendar.MILLISECOND), (short) 3);\n      }\n\n      return builder.toString();\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * Formats the calendar to ISO-8601 format, to include proper BC handling (1BC is \"0000\", 2BC is \"-0001\", etc.);\n   * and WITHOUT a trailing 'Z'.\n   * A fully cleared calendar will yield the string \"*\".\n   * The isSet() state of the Calendar is re-instated when done. */\n   @SuppressWarnings(\"fallthrough\")\n  public String toString(Calendar cal) {\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    if (calPrecField == -1)\n      return \"*\";\n    try {\n      //TODO not fully optimized; but it's at least not used in 'search'.\n      //TODO maybe borrow code from Solr DateUtil (put in Lucene util somewhere), and have it reference this back?\n      String pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n      int ptnLen = 0;\n      switch (calPrecField) {//switch fall-through is deliberate\n        case Calendar.MILLISECOND: ptnLen += 4;\n        case Calendar.SECOND: ptnLen += 3;\n        case Calendar.MINUTE: ptnLen += 3;\n        case Calendar.HOUR_OF_DAY: ptnLen += 5;\n        case Calendar.DAY_OF_MONTH: ptnLen += 3;\n        case Calendar.MONTH: ptnLen += 3;\n        case Calendar.YEAR: ptnLen += 4;\n        break;\n        default: throw new IllegalStateException(\"\"+calPrecField);\n      }\n      pattern = pattern.substring(0, ptnLen);\n      SimpleDateFormat format = new SimpleDateFormat(pattern, Locale.ROOT);\n      format.setTimeZone(cal.getTimeZone());\n      if (cal.get(Calendar.ERA) == 0) {//BC\n        //SDF doesn't do this properly according to ISO-8601\n        // Example: 1BC == \"0000\" (actually 0 AD), 2BC == \"-0001\", 3BC == \"-0002\", ...\n        final int yearOrig = cal.get(Calendar.YEAR);\n        cal.set(Calendar.YEAR, yearOrig-1);\n        String str;\n        try {\n          str = format.format(cal.getTime());\n        } finally {\n          //reset to what it was\n          cal.set(Calendar.ERA, 0);//necessary!\n          cal.set(Calendar.YEAR, yearOrig);\n        }\n        if (yearOrig > 1)\n          return \"-\" + str;\n        else\n          return \"0000\" + str.substring(4);\n      }\n      return format.format(cal.getTime());\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#toString(Calendar).mjava","sourceNew":"  /** Calendar utility method consistent with {@link java.time.format.DateTimeFormatter#ISO_INSTANT} except\n   * has no trailing 'Z', and will be truncated to the units given according to\n   * {@link Calendar#isSet(int)}.\n   * A fully cleared calendar will yield the string \"*\".\n   * The isSet() state of the Calendar is re-instated when done. */\n  public String toString(Calendar cal) {\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    if (calPrecField == -1)\n      return \"*\";\n    try {\n      StringBuilder builder = new StringBuilder(\"yyyy-MM-dd'T'HH:mm:ss.SSS\".length());//typical\n      int year = cal.get(Calendar.YEAR); // within the era (thus always positve).  >= 1.\n      if (cal.get(Calendar.ERA) == 0) { // BC\n        year -= 1; // 1BC should be \"0000\", so shift by one\n        if (year > 0) {\n          builder.append('-');\n        }\n      } else if (year > 9999) {\n        builder.append('+');\n      }\n      appendPadded(builder, year, (short) 4);\n      if (calPrecField >= Calendar.MONTH) {\n        builder.append('-');\n        appendPadded(builder, cal.get(Calendar.MONTH) + 1, (short) 2); // +1 since first is 0\n      }\n      if (calPrecField >= Calendar.DAY_OF_MONTH) {\n        builder.append('-');\n        appendPadded(builder, cal.get(Calendar.DAY_OF_MONTH), (short) 2);\n      }\n      if (calPrecField >= Calendar.HOUR_OF_DAY) {\n        builder.append('T');\n        appendPadded(builder, cal.get(Calendar.HOUR_OF_DAY), (short) 2);\n      }\n      if (calPrecField >= Calendar.MINUTE) {\n        builder.append(':');\n        appendPadded(builder, cal.get(Calendar.MINUTE), (short) 2);\n      }\n      if (calPrecField >= Calendar.SECOND) {\n        builder.append(':');\n        appendPadded(builder, cal.get(Calendar.SECOND), (short) 2);\n      }\n      if (calPrecField >= Calendar.MILLISECOND && cal.get(Calendar.MILLISECOND) > 0) { // only if non-zero\n        builder.append('.');\n        appendPadded(builder,  cal.get(Calendar.MILLISECOND), (short) 3);\n      }\n\n      return builder.toString();\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * Formats the calendar to ISO-8601 format, to include proper BC handling (1BC is \"0000\", 2BC is \"-0001\", etc.);\n   * and WITHOUT a trailing 'Z'.\n   * A fully cleared calendar will yield the string \"*\".\n   * The isSet() state of the Calendar is re-instated when done. */\n   @SuppressWarnings(\"fallthrough\")\n  public String toString(Calendar cal) {\n    final int calPrecField = getCalPrecisionField(cal);//must call first; getters set all fields\n    if (calPrecField == -1)\n      return \"*\";\n    try {\n      //TODO not fully optimized; but it's at least not used in 'search'.\n      //TODO maybe borrow code from Solr DateUtil (put in Lucene util somewhere), and have it reference this back?\n      String pattern = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n      int ptnLen = 0;\n      switch (calPrecField) {//switch fall-through is deliberate\n        case Calendar.MILLISECOND: ptnLen += 4;\n        case Calendar.SECOND: ptnLen += 3;\n        case Calendar.MINUTE: ptnLen += 3;\n        case Calendar.HOUR_OF_DAY: ptnLen += 5;\n        case Calendar.DAY_OF_MONTH: ptnLen += 3;\n        case Calendar.MONTH: ptnLen += 3;\n        case Calendar.YEAR: ptnLen += 4;\n        break;\n        default: throw new IllegalStateException(\"\"+calPrecField);\n      }\n      pattern = pattern.substring(0, ptnLen);\n      SimpleDateFormat format = new SimpleDateFormat(pattern, Locale.ROOT);\n      format.setTimeZone(cal.getTimeZone());\n      if (cal.get(Calendar.ERA) == 0) {//BC\n        //SDF doesn't do this properly according to ISO-8601\n        // Example: 1BC == \"0000\" (actually 0 AD), 2BC == \"-0001\", 3BC == \"-0002\", ...\n        final int yearOrig = cal.get(Calendar.YEAR);\n        cal.set(Calendar.YEAR, yearOrig-1);\n        String str;\n        try {\n          str = format.format(cal.getTime());\n        } finally {\n          //reset to what it was\n          cal.set(Calendar.ERA, 0);//necessary!\n          cal.set(Calendar.YEAR, yearOrig);\n        }\n        if (yearOrig > 1)\n          return \"-\" + str;\n        else\n          return \"0000\" + str.substring(4);\n      }\n      return format.format(cal.getTime());\n    } finally {\n      clearFieldsAfter(cal, calPrecField);//restore precision state modified by get()\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0ad30c6a479e764150a3316e57263319775f1df2":["af2638813028b254a88b418ebeafb541afb49653","17bb09a766d49e4c0bb1049cebc1cf10236004f7"],"17bb09a766d49e4c0bb1049cebc1cf10236004f7":["af2638813028b254a88b418ebeafb541afb49653"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["af2638813028b254a88b418ebeafb541afb49653","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["0ad30c6a479e764150a3316e57263319775f1df2","17bb09a766d49e4c0bb1049cebc1cf10236004f7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"17bb09a766d49e4c0bb1049cebc1cf10236004f7":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}