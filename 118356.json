{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testMergeStream().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testMergeStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMergeStream().mjava","sourceNew":"  @Test\n  public void testMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"merge\", MergeStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"merge(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"),\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"),\"\n        + \"on=\\\"a_f asc\\\")\");\n\n    stream = new MergeStream(expression, factory);\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 0, 1, 3, 4);\n\n      // Basic test desc\n      expression = StreamExpressionParser.parse(\"merge(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n          + \"on=\\\"a_f desc\\\")\");\n      stream = new MergeStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 4, 3, 1, 0);\n\n      // Basic w/multi comp\n      expression = StreamExpressionParser.parse(\"merge(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n          + \"on=\\\"a_f asc, a_s asc\\\")\");\n      stream = new MergeStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      // full factory w/multi comp\n      stream = factory.constructStream(\"merge(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n          + \"on=\\\"a_f asc, a_s asc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      // full factory w/multi streams\n      stream = factory.constructStream(\"merge(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n          + \"on=\\\"a_f asc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 0, 2, 1, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"merge\", MergeStream.class);\n    \n    // Basic test\n    expression = StreamExpressionParser.parse(\"merge(\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"),\"\n        + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc\\\"),\"\n        + \"on=\\\"a_f asc\\\")\");\n\n    stream = new MergeStream(expression, factory);\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 0, 1, 3, 4);\n\n      // Basic test desc\n      expression = StreamExpressionParser.parse(\"merge(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc\\\"),\"\n          + \"on=\\\"a_f desc\\\")\");\n      stream = new MergeStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 4, 3, 1, 0);\n\n      // Basic w/multi comp\n      expression = StreamExpressionParser.parse(\"merge(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n          + \"on=\\\"a_f asc, a_s asc\\\")\");\n      stream = new MergeStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      // full factory w/multi comp\n      stream = factory.constructStream(\"merge(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 3 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(1 2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n          + \"on=\\\"a_f asc, a_s asc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      // full factory w/multi streams\n      stream = factory.constructStream(\"merge(\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(0 4)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(1)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n          + \"search(\" + COLLECTIONORALIAS + \", q=\\\"id:(2)\\\", fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_s asc\\\"),\"\n          + \"on=\\\"a_f asc\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 0, 2, 1, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}