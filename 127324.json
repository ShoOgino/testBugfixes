{"path":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","sourceNew":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    if (sfield.isPolyField()) {\n      Fieldable[] fields = sfield.createFields(val, boost);\n      if (fields.length > 0) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n        // Add each field\n        for (Fieldable field : fields) {\n          doc.add(field);\n        }\n      }\n    } else {\n      Fieldable field = sfield.createField(val, boost);\n      if (field != null) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n      }\n      doc.add(field);\n    }\n\n  }\n\n","sourceOld":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    if (sfield.isPolyField()) {\n      Fieldable[] fields = sfield.createFields(val, boost);\n      if (fields.length > 0) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n        // Add each field\n        for (Fieldable field : fields) {\n          doc.add(field);\n        }\n      }\n    } else {\n      Fieldable field = sfield.createField(val, boost);\n      if (field != null) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n      }\n      doc.add(field);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","sourceNew":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    if (sfield.isPolyField()) {\n      Fieldable[] fields = sfield.createFields(val, boost);\n      if (fields.length > 0) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n        // Add each field\n        for (Fieldable field : fields) {\n          doc.add(field);\n        }\n      }\n    } else {\n      Fieldable field = sfield.createField(val, boost);\n      if (field != null) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n      }\n      doc.add(field);\n    }\n\n  }\n\n","sourceOld":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    if (sfield.isPolyField()) {\n      Fieldable[] fields = sfield.createFields(val, boost);\n      if (fields.length > 0) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n        // Add each field\n        for (Fieldable field : fields) {\n          doc.add(field);\n        }\n      }\n    } else {\n      Fieldable field = sfield.createField(val, boost);\n      if (field != null) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n      }\n      doc.add(field);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","pathOld":"solr/src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","sourceNew":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    if (sfield.isPolyField()) {\n      Fieldable[] fields = sfield.createFields(val, boost);\n      if (fields.length > 0) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n        // Add each field\n        for (Fieldable field : fields) {\n          doc.add(field);\n        }\n      }\n    } else {\n      Fieldable field = sfield.createField(val, boost);\n      if (field != null) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n      }\n      doc.add(field);\n    }\n\n  }\n\n","sourceOld":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    if (sfield.isPolyField()) {\n      Fieldable[] fields = sfield.createFields(val, boost);\n      if (fields.length > 0) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n        // Add each field\n        for (Fieldable field : fields) {\n          doc.add(field);\n        }\n      }\n    } else {\n      Fieldable field = sfield.createField(val, boost);\n      if (field != null) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n      }\n      doc.add(field);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","sourceNew":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    if (sfield.isPolyField()) {\n      IndexableField[] fields = sfield.createFields(val, boost);\n      if (fields.length > 0) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n        // Add each field\n        for (IndexableField field : fields) {\n          doc.add(field);\n        }\n      }\n    } else {\n      IndexableField field = sfield.createField(val, boost);\n      if (field != null) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n      }\n      doc.add(field);\n    }\n\n  }\n\n","sourceOld":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    if (sfield.isPolyField()) {\n      Fieldable[] fields = sfield.createFields(val, boost);\n      if (fields.length > 0) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n        // Add each field\n        for (Fieldable field : fields) {\n          doc.add(field);\n        }\n      }\n    } else {\n      Fieldable field = sfield.createField(val, boost);\n      if (field != null) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n      }\n      doc.add(field);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","sourceNew":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    if (sfield.isPolyField()) {\n      StorableField[] fields = sfield.createFields(val, boost);\n      if (fields.length > 0) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n        // Add each field\n        for (StorableField field : fields) {\n          doc.add((Field) field);\n        }\n      }\n    } else {\n      StorableField field = sfield.createField(val, boost);\n      if (field != null) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n      }\n      doc.add((Field) field);\n    }\n\n  }\n\n","sourceOld":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    if (sfield.isPolyField()) {\n      IndexableField[] fields = sfield.createFields(val, boost);\n      if (fields.length > 0) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n        // Add each field\n        for (IndexableField field : fields) {\n          doc.add(field);\n        }\n      }\n    } else {\n      IndexableField field = sfield.createField(val, boost);\n      if (field != null) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n      }\n      doc.add(field);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","sourceNew":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    if (sfield.isPolyField()) {\n      StorableField[] fields = sfield.createFields(val, boost);\n      if (fields.length > 0) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n        // Add each field\n        for (StorableField field : fields) {\n          doc.add((Field) field);\n        }\n      }\n    } else {\n      StorableField field = sfield.createField(val, boost);\n      if (field != null) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n      }\n      doc.add((Field) field);\n    }\n\n  }\n\n","sourceOld":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    if (sfield.isPolyField()) {\n      IndexableField[] fields = sfield.createFields(val, boost);\n      if (fields.length > 0) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n        // Add each field\n        for (IndexableField field : fields) {\n          doc.add(field);\n        }\n      }\n    } else {\n      IndexableField field = sfield.createField(val, boost);\n      if (field != null) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n      }\n      doc.add(field);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","sourceNew":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    List<StorableField> fields = sfield.createFields(val, boost);\n    if (!fields.isEmpty()) {\n      if (!sfield.multiValued()) {\n        String oldValue = map.put(sfield.getName(), val);\n        if (oldValue != null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                  + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n        }\n      }\n      // Add each field\n      for (StorableField field : fields) {\n        doc.add((Field) field);\n      }\n    }\n\n  }\n\n","sourceOld":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    if (sfield.isPolyField()) {\n      StorableField[] fields = sfield.createFields(val, boost);\n      if (fields.length > 0) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n        // Add each field\n        for (StorableField field : fields) {\n          doc.add((Field) field);\n        }\n      }\n    } else {\n      StorableField field = sfield.createField(val, boost);\n      if (field != null) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n      }\n      doc.add((Field) field);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","sourceNew":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    List<StorableField> fields = sfield.createFields(val, boost);\n    if (!fields.isEmpty()) {\n      if (!sfield.multiValued()) {\n        String oldValue = map.put(sfield.getName(), val);\n        if (oldValue != null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                  + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n        }\n      }\n      // Add each field\n      for (StorableField field : fields) {\n        doc.add((Field) field);\n      }\n    }\n\n  }\n\n","sourceOld":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    if (sfield.isPolyField()) {\n      StorableField[] fields = sfield.createFields(val, boost);\n      if (fields.length > 0) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n        // Add each field\n        for (StorableField field : fields) {\n          doc.add((Field) field);\n        }\n      }\n    } else {\n      StorableField field = sfield.createField(val, boost);\n      if (field != null) {\n        if (!sfield.multiValued()) {\n          String oldValue = map.put(sfield.getName(), val);\n          if (oldValue != null) {\n            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                    + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n          }\n        }\n      }\n      doc.add((Field) field);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/DocumentBuilder#addSingleField(SchemaField,String,float).mjava","sourceNew":null,"sourceOld":"  protected void addSingleField(SchemaField sfield, String val, float boost) {\n    //System.out.println(\"###################ADDING FIELD \"+sfield+\"=\"+val);\n\n    // we don't check for a null val ourselves because a solr.FieldType\n    // might actually want to map it to something.  If createField()\n    // returns null, then we don't store the field.\n    List<StorableField> fields = sfield.createFields(val, boost);\n    if (!fields.isEmpty()) {\n      if (!sfield.multiValued()) {\n        String oldValue = map.put(sfield.getName(), val);\n        if (oldValue != null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"ERROR: multiple values encountered for non multiValued field \" + sfield.getName()\n                  + \": first='\" + oldValue + \"' second='\" + val + \"'\");\n        }\n      }\n      // Add each field\n      for (StorableField field : fields) {\n        doc.add((Field) field);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409324b31a1419d7c05a38211168cf317e39be77":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1d028314cced5858683a1bb4741423d0f934257b":["1509f151d7692d84fae414b2b799ac06ba60fcb4","409324b31a1419d7c05a38211168cf317e39be77"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["1d028314cced5858683a1bb4741423d0f934257b","73bb5a57dc75b54a39494f99986599cae7dff417"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["73bb5a57dc75b54a39494f99986599cae7dff417"],"73bb5a57dc75b54a39494f99986599cae7dff417":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["409324b31a1419d7c05a38211168cf317e39be77","1d028314cced5858683a1bb4741423d0f934257b"],"73bb5a57dc75b54a39494f99986599cae7dff417":["95303ff3749680c743b9425f9cf99e6e4065e8a8","08970e5b8411182a29412c177eff67ec1110095b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"08970e5b8411182a29412c177eff67ec1110095b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}