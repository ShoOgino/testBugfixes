{"path":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#bits2words(long).mjava","commits":[{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#bits2words(long).mjava","pathOld":"/dev/null","sourceNew":"  /** returns the number of 64 bit words it would take to hold numBits */\n  public static int bits2words(long numBits) {\n    int numLong = (int) (numBits >>> 6);\n    if ((numBits & 63) != 0) {\n      numLong++;\n    }\n    return numLong;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48a00d99ab5d2304d5699e78fdfdbda520687e3e","date":1428909239,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#bits2words(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#bits2words(long).mjava","sourceNew":"  /** returns the number of 64 bit words it would take to hold numBits */\n  public static int bits2words(long numBits) {\n    return (int)((numBits - 1) >> 6) + 1; // I.e.: get the word-offset of the last bit and add one (make sure to use >> so 0 returns 0!)\n  }\n\n","sourceOld":"  /** returns the number of 64 bit words it would take to hold numBits */\n  public static int bits2words(long numBits) {\n    int numLong = (int) (numBits >>> 6);\n    if ((numBits & 63) != 0) {\n      numLong++;\n    }\n    return numLong;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0928240f49ec17419b86cc8df48087ea42980fba","date":1504271720,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#bits2words(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#bits2words(long).mjava","sourceNew":"  /** Returns the number of 64 bit words it would take to hold numBits */\n  public static int bits2words(long numBits) {\n    if (numBits < 0 || numBits > MAX_NUM_BITS) {\n      throw new IllegalArgumentException(\"numBits must be 0 .. \" + MAX_NUM_BITS + \"; got: \" + numBits);\n    }\n    return (int)((numBits - 1) >> 6) + 1; // I.e.: get the word-offset of the last bit and add one (make sure to use >> so 0 returns 0!)\n  }\n\n","sourceOld":"  /** returns the number of 64 bit words it would take to hold numBits */\n  public static int bits2words(long numBits) {\n    return (int)((numBits - 1) >> 6) + 1; // I.e.: get the word-offset of the last bit and add one (make sure to use >> so 0 returns 0!)\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#bits2words(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#bits2words(long).mjava","sourceNew":"  /** Returns the number of 64 bit words it would take to hold numBits */\n  public static int bits2words(long numBits) {\n    if (numBits < 0 || numBits > MAX_NUM_BITS) {\n      throw new IllegalArgumentException(\"numBits must be 0 .. \" + MAX_NUM_BITS + \"; got: \" + numBits);\n    }\n    return (int)((numBits - 1) >> 6) + 1; // I.e.: get the word-offset of the last bit and add one (make sure to use >> so 0 returns 0!)\n  }\n\n","sourceOld":"  /** returns the number of 64 bit words it would take to hold numBits */\n  public static int bits2words(long numBits) {\n    return (int)((numBits - 1) >> 6) + 1; // I.e.: get the word-offset of the last bit and add one (make sure to use >> so 0 returns 0!)\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#bits2words(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#bits2words(long).mjava","sourceNew":"  /** Returns the number of 64 bit words it would take to hold numBits */\n  public static int bits2words(long numBits) {\n    if (numBits < 0 || numBits > MAX_NUM_BITS) {\n      throw new IllegalArgumentException(\"numBits must be 0 .. \" + MAX_NUM_BITS + \"; got: \" + numBits);\n    }\n    return (int)((numBits - 1) >> 6) + 1; // I.e.: get the word-offset of the last bit and add one (make sure to use >> so 0 returns 0!)\n  }\n\n","sourceOld":"  /** returns the number of 64 bit words it would take to hold numBits */\n  public static int bits2words(long numBits) {\n    return (int)((numBits - 1) >> 6) + 1; // I.e.: get the word-offset of the last bit and add one (make sure to use >> so 0 returns 0!)\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#bits2words(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LongBitSet#bits2words(long).mjava","sourceNew":"  /** Returns the number of 64 bit words it would take to hold numBits */\n  public static int bits2words(long numBits) {\n    if (numBits < 0 || numBits > MAX_NUM_BITS) {\n      throw new IllegalArgumentException(\"numBits must be 0 .. \" + MAX_NUM_BITS + \"; got: \" + numBits);\n    }\n    return (int)((numBits - 1) >> 6) + 1; // I.e.: get the word-offset of the last bit and add one (make sure to use >> so 0 returns 0!)\n  }\n\n","sourceOld":"  /** returns the number of 64 bit words it would take to hold numBits */\n  public static int bits2words(long numBits) {\n    return (int)((numBits - 1) >> 6) + 1; // I.e.: get the word-offset of the last bit and add one (make sure to use >> so 0 returns 0!)\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["48a00d99ab5d2304d5699e78fdfdbda520687e3e","0928240f49ec17419b86cc8df48087ea42980fba"],"48a00d99ab5d2304d5699e78fdfdbda520687e3e":["3995f83351082af8ae83bb017e63c56818fc1568"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["48a00d99ab5d2304d5699e78fdfdbda520687e3e","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["48a00d99ab5d2304d5699e78fdfdbda520687e3e","0928240f49ec17419b86cc8df48087ea42980fba"],"0928240f49ec17419b86cc8df48087ea42980fba":["48a00d99ab5d2304d5699e78fdfdbda520687e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3995f83351082af8ae83bb017e63c56818fc1568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"]},"commit2Childs":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"48a00d99ab5d2304d5699e78fdfdbda520687e3e":["b21283ed01203901a7257aa4b7f0a0899c86e56e","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","3a7809d1d753b67f48b1a706e17034bf8b624ea3","0928240f49ec17419b86cc8df48087ea42980fba"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"0928240f49ec17419b86cc8df48087ea42980fba":["b21283ed01203901a7257aa4b7f0a0899c86e56e","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3995f83351082af8ae83bb017e63c56818fc1568"],"3995f83351082af8ae83bb017e63c56818fc1568":["48a00d99ab5d2304d5699e78fdfdbda520687e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}