{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","commits":[{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744b111b17d15d490a648eb021bfa240e7f11556","date":1487008069,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","sourceNew":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n//    assertU(commit());\n//    assertQ(req(\"q\", \"id:0\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField, \"facet.mincount\", \"0\"), \n//        \"//*[@numFound='1']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[0] + \"'][.='1']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='0']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='0']\",\n//        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int))==10\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","sourceNew":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n//    assertU(commit());\n//    assertQ(req(\"q\", \"id:0\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField, \"facet.mincount\", \"0\"), \n//        \"//*[@numFound='1']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[0] + \"'][.='1']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='0']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='0']\",\n//        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int))==10\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","sourceNew":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n//    assertU(commit());\n//    assertQ(req(\"q\", \"id:0\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField, \"facet.mincount\", \"0\"), \n//        \"//*[@numFound='1']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[0] + \"'][.='1']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='0']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='0']\",\n//        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int))==10\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","sourceNew":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n//    assertU(commit());\n//    assertQ(req(\"q\", \"id:0\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField, \"facet.mincount\", \"0\"), \n//        \"//*[@numFound='1']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[0] + \"'][.='1']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='0']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='0']\",\n//        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int))==10\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa","date":1496877670,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","sourceNew":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n//    assertU(commit());\n//    assertQ(req(\"q\", \"id:0\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField, \"facet.mincount\", \"0\"), \n//        \"//*[@numFound='1']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[0] + \"'][.='1']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='0']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='0']\",\n//        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int))==10\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f344bb33ca91f48e99c061980115b46fa84fc8f5","date":1496903283,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","sourceNew":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n//    assertU(commit());\n//    assertQ(req(\"q\", \"id:0\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField, \"facet.mincount\", \"0\"), \n//        \"//*[@numFound='1']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[0] + \"'][.='1']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='0']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='0']\",\n//        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int))==10\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","sourceNew":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n//    assertU(commit());\n//    assertQ(req(\"q\", \"id:0\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField, \"facet.mincount\", \"0\"), \n//        \"//*[@numFound='1']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[0] + \"'][.='1']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='0']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='0']\",\n//        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int))==10\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","sourceNew":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n//    assertU(commit());\n//    assertQ(req(\"q\", \"id:0\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField, \"facet.mincount\", \"0\"), \n//        \"//*[@numFound='1']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[0] + \"'][.='1']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='0']\",\n//        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='0']\",\n//        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int))==10\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldFacetField(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":5,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldFacetField(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldFacetField(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","sourceOld":"  private void testPointFieldFacetField(String nonDocValuesField, String docValuesField, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 10;\n    \n    assertFalse(h.getCore().getLatestSchema().getField(docValuesField).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), docValuesField, numbers[i], nonDocValuesField, numbers[i]));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", docValuesField, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + docValuesField, \"facet\", \"true\", \"facet.field\", docValuesField), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + docValuesField +\"']/int[@name='\" + numbers[3] + \"'][.='1']\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"46dc9ac8b3e748407baaef82453138ff3974480c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["897b06b1364bd1f658a8be7591e43f0851458e7f","b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["897b06b1364bd1f658a8be7591e43f0851458e7f","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46dc9ac8b3e748407baaef82453138ff3974480c"],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["46dc9ac8b3e748407baaef82453138ff3974480c","744b111b17d15d490a648eb021bfa240e7f11556"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"744b111b17d15d490a648eb021bfa240e7f11556":["46dc9ac8b3e748407baaef82453138ff3974480c"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["897b06b1364bd1f658a8be7591e43f0851458e7f","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"]},"commit2Childs":{"897b06b1364bd1f658a8be7591e43f0851458e7f":["b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa","f344bb33ca91f48e99c061980115b46fa84fc8f5","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"46dc9ac8b3e748407baaef82453138ff3974480c":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","022a4de90e0479b604264ca9c2e134c996454ab3","744b111b17d15d490a648eb021bfa240e7f11556"],"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"744b111b17d15d490a648eb021bfa240e7f11556":["022a4de90e0479b604264ca9c2e134c996454ab3"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}