{"path":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[LeafReader],SegmentInfo,InfoStream).mjava","commits":[{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[LeafReader],SegmentInfo,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[LeafReader],SegmentInfo,InfoStream,CheckAbort).mjava","sourceNew":"  /** Sole constructor. */\n  MergeState(List<LeafReader> readers, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final LeafReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      NormsProducer normsProducer;\n      DocValuesProducer docValuesProducer;\n      StoredFieldsReader storedFieldsReader;\n      TermVectorsReader termVectorsReader;\n      FieldsProducer fieldsProducer;\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        normsProducer = segmentReader.getNormsReader();\n        if (normsProducer != null) {\n          normsProducer = normsProducer.getMergeInstance();\n        }\n        docValuesProducer = segmentReader.getDocValuesReader();\n        if (docValuesProducer != null) {\n          docValuesProducer = docValuesProducer.getMergeInstance();\n        }\n        storedFieldsReader = segmentReader.getFieldsReader();\n        if (storedFieldsReader != null) {\n          storedFieldsReader = storedFieldsReader.getMergeInstance();\n        }\n        termVectorsReader = segmentReader.getTermVectorsReader();\n        if (termVectorsReader != null) {\n          termVectorsReader = termVectorsReader.getMergeInstance();\n        }\n        fieldsProducer = segmentReader.fields().getMergeInstance();\n      } else {\n        // A \"foreign\" reader\n        normsProducer = readerToNormsProducer(reader);\n        docValuesProducer = readerToDocValuesProducer(reader);\n        storedFieldsReader = readerToStoredFieldsReader(reader);\n        termVectorsReader = readerToTermVectorsReader(reader);\n        fieldsProducer = readerToFieldsProducer(reader);\n      }\n\n      normsProducers[i] = normsProducer;\n      docValuesProducers[i] = docValuesProducer;\n      storedFieldsReaders[i] = storedFieldsReader;\n      termVectorsReaders[i] = termVectorsReader;\n      fieldsProducers[i] = fieldsProducer;\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n\n    setDocMaps(readers);\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  MergeState(List<LeafReader> readers, SegmentInfo segmentInfo, InfoStream infoStream, CheckAbort checkAbort) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final LeafReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      NormsProducer normsProducer;\n      DocValuesProducer docValuesProducer;\n      StoredFieldsReader storedFieldsReader;\n      TermVectorsReader termVectorsReader;\n      FieldsProducer fieldsProducer;\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        normsProducer = segmentReader.getNormsReader();\n        if (normsProducer != null) {\n          normsProducer = normsProducer.getMergeInstance();\n        }\n        docValuesProducer = segmentReader.getDocValuesReader();\n        if (docValuesProducer != null) {\n          docValuesProducer = docValuesProducer.getMergeInstance();\n        }\n        storedFieldsReader = segmentReader.getFieldsReader();\n        if (storedFieldsReader != null) {\n          storedFieldsReader = storedFieldsReader.getMergeInstance();\n        }\n        termVectorsReader = segmentReader.getTermVectorsReader();\n        if (termVectorsReader != null) {\n          termVectorsReader = termVectorsReader.getMergeInstance();\n        }\n        fieldsProducer = segmentReader.fields().getMergeInstance();\n      } else {\n        // A \"foreign\" reader\n        normsProducer = readerToNormsProducer(reader);\n        docValuesProducer = readerToDocValuesProducer(reader);\n        storedFieldsReader = readerToStoredFieldsReader(reader);\n        termVectorsReader = readerToTermVectorsReader(reader);\n        fieldsProducer = readerToFieldsProducer(reader);\n      }\n\n      normsProducers[i] = normsProducer;\n      docValuesProducers[i] = docValuesProducer;\n      storedFieldsReaders[i] = storedFieldsReader;\n      termVectorsReaders[i] = termVectorsReader;\n      fieldsProducers[i] = fieldsProducer;\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n    this.checkAbort = checkAbort;\n\n    setDocMaps(readers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[CodecReader],SegmentInfo,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeState#MergeState(List[LeafReader],SegmentInfo,InfoStream).mjava","sourceNew":"  /** Sole constructor. */\n  MergeState(List<CodecReader> readers, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final CodecReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      normsProducers[i] = reader.getNormsReader();\n      if (normsProducers[i] != null) {\n        normsProducers[i] = normsProducers[i].getMergeInstance();\n      }\n      \n      docValuesProducers[i] = reader.getDocValuesReader();\n      if (docValuesProducers[i] != null) {\n        docValuesProducers[i] = docValuesProducers[i].getMergeInstance();\n      }\n      \n      storedFieldsReaders[i] = reader.getFieldsReader();\n      if (storedFieldsReaders[i] != null) {\n        storedFieldsReaders[i] = storedFieldsReaders[i].getMergeInstance();\n      }\n      \n      termVectorsReaders[i] = reader.getTermVectorsReader();\n      if (termVectorsReaders[i] != null) {\n        termVectorsReaders[i] = termVectorsReaders[i].getMergeInstance();\n      }\n      \n      fieldsProducers[i] = reader.getPostingsReader().getMergeInstance();\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n\n    setDocMaps(readers);\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  MergeState(List<LeafReader> readers, SegmentInfo segmentInfo, InfoStream infoStream) throws IOException {\n\n    int numReaders = readers.size();\n    docMaps = new DocMap[numReaders];\n    docBase = new int[numReaders];\n    maxDocs = new int[numReaders];\n    fieldsProducers = new FieldsProducer[numReaders];\n    normsProducers = new NormsProducer[numReaders];\n    storedFieldsReaders = new StoredFieldsReader[numReaders];\n    termVectorsReaders = new TermVectorsReader[numReaders];\n    docValuesProducers = new DocValuesProducer[numReaders];\n    fieldInfos = new FieldInfos[numReaders];\n    liveDocs = new Bits[numReaders];\n\n    for(int i=0;i<numReaders;i++) {\n      final LeafReader reader = readers.get(i);\n\n      maxDocs[i] = reader.maxDoc();\n      liveDocs[i] = reader.getLiveDocs();\n      fieldInfos[i] = reader.getFieldInfos();\n\n      NormsProducer normsProducer;\n      DocValuesProducer docValuesProducer;\n      StoredFieldsReader storedFieldsReader;\n      TermVectorsReader termVectorsReader;\n      FieldsProducer fieldsProducer;\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        normsProducer = segmentReader.getNormsReader();\n        if (normsProducer != null) {\n          normsProducer = normsProducer.getMergeInstance();\n        }\n        docValuesProducer = segmentReader.getDocValuesReader();\n        if (docValuesProducer != null) {\n          docValuesProducer = docValuesProducer.getMergeInstance();\n        }\n        storedFieldsReader = segmentReader.getFieldsReader();\n        if (storedFieldsReader != null) {\n          storedFieldsReader = storedFieldsReader.getMergeInstance();\n        }\n        termVectorsReader = segmentReader.getTermVectorsReader();\n        if (termVectorsReader != null) {\n          termVectorsReader = termVectorsReader.getMergeInstance();\n        }\n        fieldsProducer = segmentReader.fields().getMergeInstance();\n      } else {\n        // A \"foreign\" reader\n        normsProducer = readerToNormsProducer(reader);\n        docValuesProducer = readerToDocValuesProducer(reader);\n        storedFieldsReader = readerToStoredFieldsReader(reader);\n        termVectorsReader = readerToTermVectorsReader(reader);\n        fieldsProducer = readerToFieldsProducer(reader);\n      }\n\n      normsProducers[i] = normsProducer;\n      docValuesProducers[i] = docValuesProducer;\n      storedFieldsReaders[i] = storedFieldsReader;\n      termVectorsReaders[i] = termVectorsReader;\n      fieldsProducers[i] = fieldsProducer;\n    }\n\n    this.segmentInfo = segmentInfo;\n    this.infoStream = infoStream;\n\n    setDocMaps(readers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5faf65b6692f15cca0f87bf8666c87899afc619f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["505bff044e47a553f461b6f4484d1d08faf4ac85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}