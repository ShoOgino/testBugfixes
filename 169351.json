{"path":"sandbox/contributions/webcrawler-LARM/src/HTTPClient/HTTPResponse#getHeaderAsDate(String).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/HTTPClient/HTTPResponse#getHeaderAsDate(String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Retrieves the value for a given header. The value is parsed as a date; if\n     * this fails it is parsed as a long representing the number of seconds\n     * since 12:00 AM, Jan 1st, 1970. If this also fails an exception is thrown.\n     * <br>\n     * Note: When sending dates use Util.httpDate().\n     *\n     * @param hdr                           the header name.\n     * @return                              the value for the header, or null if\n     *      non-existent.\n     * @exception IllegalArgumentException  if the header's value is neither a\n     *      legal date nor a number.\n     * @exception IOException               if any exception occurs on the\n     *      socket.\n     * @exception ModuleException           if any module encounters an\n     *      exception.\n     */\n    public Date getHeaderAsDate(String hdr)\n        throws IOException, IllegalArgumentException, ModuleException\n    {\n        String raw_date = getHeader(hdr);\n        if (raw_date == null)\n        {\n            return null;\n        }\n\n        // asctime() format is missing an explicit GMT specifier\n        if (raw_date.toUpperCase().indexOf(\"GMT\") == -1 &&\n                raw_date.indexOf(' ') > 0)\n        {\n            raw_date += \" GMT\";\n        }\n\n        Date date;\n\n        try\n        {\n            date = Util.parseHttpDate(raw_date);\n        }\n        catch (IllegalArgumentException iae)\n        {\n            // some servers erroneously send a number, so let's try that\n            long time;\n            try\n            {\n                time = Long.parseLong(raw_date);\n            }\n            catch (NumberFormatException nfe)\n            {\n                throw iae;\n            }\n            // give up\n            if (time < 0)\n            {\n                time = 0;\n            }\n            date = new Date(time * 1000L);\n        }\n\n        return date;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/HTTPClient/HTTPResponse#getHeaderAsDate(String).mjava","sourceNew":null,"sourceOld":"    /**\n     * Retrieves the value for a given header. The value is parsed as a date; if\n     * this fails it is parsed as a long representing the number of seconds\n     * since 12:00 AM, Jan 1st, 1970. If this also fails an exception is thrown.\n     * <br>\n     * Note: When sending dates use Util.httpDate().\n     *\n     * @param hdr                           the header name.\n     * @return                              the value for the header, or null if\n     *      non-existent.\n     * @exception IllegalArgumentException  if the header's value is neither a\n     *      legal date nor a number.\n     * @exception IOException               if any exception occurs on the\n     *      socket.\n     * @exception ModuleException           if any module encounters an\n     *      exception.\n     */\n    public Date getHeaderAsDate(String hdr)\n        throws IOException, IllegalArgumentException, ModuleException\n    {\n        String raw_date = getHeader(hdr);\n        if (raw_date == null)\n        {\n            return null;\n        }\n\n        // asctime() format is missing an explicit GMT specifier\n        if (raw_date.toUpperCase().indexOf(\"GMT\") == -1 &&\n                raw_date.indexOf(' ') > 0)\n        {\n            raw_date += \" GMT\";\n        }\n\n        Date date;\n\n        try\n        {\n            date = Util.parseHttpDate(raw_date);\n        }\n        catch (IllegalArgumentException iae)\n        {\n            // some servers erroneously send a number, so let's try that\n            long time;\n            try\n            {\n                time = Long.parseLong(raw_date);\n            }\n            catch (NumberFormatException nfe)\n            {\n                throw iae;\n            }\n            // give up\n            if (time < 0)\n            {\n                time = 0;\n            }\n            date = new Date(time * 1000L);\n        }\n\n        return date;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["05d36e0b328ec96237035fbcca240e73631396e5"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["afc16d717d9ed1a8e45371668ca6de674164d624"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}