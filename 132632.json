{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlushedSegment(SegmentInfo).mjava","commits":[{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlushedSegment(SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  void finishFlushedSegment(SegmentInfo newSegment) throws IOException {\n    if (indexWriter.useCompoundFile(newSegment)) {\n      String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n      message(\"creating compound file \" + compoundFileName);\n      // Now build compound file\n      boolean success = false;\n      try {\n        createCompoundFile(compoundFileName, newSegment.files());\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream != null) {\n            message(\"hit exception \" +\n                \"reating compound file for newly flushed segment \" + newSegment.name);\n          }\n\n          indexWriter.deleter.deleteFile(IndexFileNames.segmentFileName(newSegment.name, \"\",\n              IndexFileNames.COMPOUND_FILE_EXTENSION));\n          for (String file : newSegment.files()) {\n            indexWriter.deleter.deleteFile(file);\n          }\n\n        }\n      }\n\n      for (String file : newSegment.files()) {\n        indexWriter.deleter.deleteFile(file);\n      }\n\n      newSegment.setUseCompoundFile(true);\n\n    }\n\n    indexWriter.addNewSegment(newSegment);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3161e3ffcf20c09a22504a589d4d9bd273e11e33","date":1295142360,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlushedSegment(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlushedSegment(SegmentInfo).mjava","sourceNew":"  void finishFlushedSegment(SegmentInfo newSegment) throws IOException {\n    if (indexWriter.useCompoundFile(newSegment)) {\n      String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n      message(\"creating compound file \" + compoundFileName);\n      // Now build compound file\n      boolean success = false;\n      try {\n        createCompoundFile(compoundFileName, newSegment.files());\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream != null) {\n            message(\"hit exception \" +\n                \"reating compound file for newly flushed segment \" + newSegment.name);\n          }\n\n          indexWriter.deleter.refresh(newSegment.name);\n        }\n      }\n\n      indexWriter.deleter.deleteNewFiles(newSegment.files());\n      newSegment.setUseCompoundFile(true);\n\n    }\n\n    indexWriter.addNewSegment(newSegment);\n  }\n\n","sourceOld":"  void finishFlushedSegment(SegmentInfo newSegment) throws IOException {\n    if (indexWriter.useCompoundFile(newSegment)) {\n      String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n      message(\"creating compound file \" + compoundFileName);\n      // Now build compound file\n      boolean success = false;\n      try {\n        createCompoundFile(compoundFileName, newSegment.files());\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream != null) {\n            message(\"hit exception \" +\n                \"reating compound file for newly flushed segment \" + newSegment.name);\n          }\n\n          indexWriter.deleter.deleteFile(IndexFileNames.segmentFileName(newSegment.name, \"\",\n              IndexFileNames.COMPOUND_FILE_EXTENSION));\n          for (String file : newSegment.files()) {\n            indexWriter.deleter.deleteFile(file);\n          }\n\n        }\n      }\n\n      for (String file : newSegment.files()) {\n        indexWriter.deleter.deleteFile(file);\n      }\n\n      newSegment.setUseCompoundFile(true);\n\n    }\n\n    indexWriter.addNewSegment(newSegment);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14975dba6846360ff627c6797726fa4899a3413d","date":1295174738,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlushedSegment(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlushedSegment(SegmentInfo).mjava","sourceNew":"  void finishFlushedSegment(SegmentInfo newSegment) throws IOException {\n    assert newSegment != null;\n\n    IndexWriter.setDiagnostics(newSegment, \"flush\");\n\n    if (indexWriter.useCompoundFile(newSegment)) {\n      String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n      message(\"creating compound file \" + compoundFileName);\n      // Now build compound file\n      boolean success = false;\n      try {\n        createCompoundFile(compoundFileName, newSegment.files());\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream != null) {\n            message(\"hit exception \" +\n                \"reating compound file for newly flushed segment \" + newSegment.name);\n          }\n\n          indexWriter.deleter.refresh(newSegment.name);\n        }\n      }\n\n      indexWriter.deleter.deleteNewFiles(newSegment.files());\n      newSegment.setUseCompoundFile(true);\n\n    }\n\n    indexWriter.addNewSegment(newSegment);\n  }\n\n","sourceOld":"  void finishFlushedSegment(SegmentInfo newSegment) throws IOException {\n    if (indexWriter.useCompoundFile(newSegment)) {\n      String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n      message(\"creating compound file \" + compoundFileName);\n      // Now build compound file\n      boolean success = false;\n      try {\n        createCompoundFile(compoundFileName, newSegment.files());\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream != null) {\n            message(\"hit exception \" +\n                \"reating compound file for newly flushed segment \" + newSegment.name);\n          }\n\n          indexWriter.deleter.refresh(newSegment.name);\n        }\n      }\n\n      indexWriter.deleter.deleteNewFiles(newSegment.files());\n      newSegment.setUseCompoundFile(true);\n\n    }\n\n    indexWriter.addNewSegment(newSegment);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86c34ea6a885f625f2e464756450d45b72653ef3","date":1295256222,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#addFlushedSegment(SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#finishFlushedSegment(SegmentInfo).mjava","sourceNew":"  void addFlushedSegment(SegmentInfo newSegment) throws IOException {\n    assert newSegment != null;\n\n    setDiagnostics(newSegment, \"flush\");\n\n    if (useCompoundFile(newSegment)) {\n      String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n      message(\"creating compound file \" + compoundFileName);\n      // Now build compound file\n      boolean success = false;\n      try {\n        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);\n        for(String fileName : newSegment.files()) {\n          cfsWriter.addFile(fileName);\n        }\n\n        // Perform the merge\n        cfsWriter.close();\n        synchronized(this) {\n          deleter.deleteNewFiles(newSegment.files());\n        }\n\n        newSegment.setUseCompoundFile(true);\n\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream != null) {\n            message(\"hit exception \" +\n                \"reating compound file for newly flushed segment \" + newSegment.name);\n          }\n\n          synchronized(this) {\n            deleter.refresh(newSegment.name);\n          }\n        }\n      }\n\n\n    }\n\n    synchronized(this) {\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  void finishFlushedSegment(SegmentInfo newSegment) throws IOException {\n    assert newSegment != null;\n\n    IndexWriter.setDiagnostics(newSegment, \"flush\");\n\n    if (indexWriter.useCompoundFile(newSegment)) {\n      String compoundFileName = IndexFileNames.segmentFileName(newSegment.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION);\n      message(\"creating compound file \" + compoundFileName);\n      // Now build compound file\n      boolean success = false;\n      try {\n        createCompoundFile(compoundFileName, newSegment.files());\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream != null) {\n            message(\"hit exception \" +\n                \"reating compound file for newly flushed segment \" + newSegment.name);\n          }\n\n          indexWriter.deleter.refresh(newSegment.name);\n        }\n      }\n\n      indexWriter.deleter.deleteNewFiles(newSegment.files());\n      newSegment.setUseCompoundFile(true);\n\n    }\n\n    indexWriter.addNewSegment(newSegment);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3161e3ffcf20c09a22504a589d4d9bd273e11e33":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"86c34ea6a885f625f2e464756450d45b72653ef3":["14975dba6846360ff627c6797726fa4899a3413d"],"14975dba6846360ff627c6797726fa4899a3413d":["3161e3ffcf20c09a22504a589d4d9bd273e11e33"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3161e3ffcf20c09a22504a589d4d9bd273e11e33":["14975dba6846360ff627c6797726fa4899a3413d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86c34ea6a885f625f2e464756450d45b72653ef3":[],"14975dba6846360ff627c6797726fa4899a3413d":["86c34ea6a885f625f2e464756450d45b72653ef3"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["3161e3ffcf20c09a22504a589d4d9bd273e11e33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["86c34ea6a885f625f2e464756450d45b72653ef3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}