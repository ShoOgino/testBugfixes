{"path":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","pathOld":"/dev/null","sourceNew":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, defaultFieldList, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, defaultFieldList);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, defaultFieldList);  \n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","sourceNew":null,"sourceOld":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, defaultFieldList, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, defaultFieldList);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, defaultFieldList);  \n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","pathOld":"src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","sourceNew":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, defaultFieldList, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, defaultFieldList);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, defaultFieldList);  \n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString());\n    }\n  }\n\n","sourceOld":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, defaultFieldList, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, defaultFieldList);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, defaultFieldList);  \n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","pathOld":"/dev/null","sourceNew":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, defaultFieldList, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, defaultFieldList);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, defaultFieldList);  \n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2","date":1293213108,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","sourceNew":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val, true);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields, null);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, defaultFieldList, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, defaultFieldList);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, defaultFieldList);  \n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","sourceNew":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val, true);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields, null);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, defaultFieldList, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, defaultFieldList);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, defaultFieldList);  \n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","sourceNew":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val, true);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields, null);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, defaultFieldList, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, defaultFieldList);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, defaultFieldList);  \n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","sourceNew":"  @Override\n  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val, true);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields, null);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val, true);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields, null);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","sourceNew":"  @Override\n  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val, true);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields, null);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val, true);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields, null);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","sourceNew":"  @Override\n  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val, true);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields, null);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val, true);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields, null);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f860e70f9624e5f04c00b71bd4c42b57ba482e2d","date":1299690771,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val, true);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields, null);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val, true);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields, null);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeVal(String,Object).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, (String)val, true);\n    } else if (val instanceof Integer) {\n      // it would be slower to pass the int ((Integer)val).intValue()\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      // could be optimized... only two vals\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields, null);\n    }else if (val instanceof SolrDocumentList) {\n        // requires access to IndexReader\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    }else if (val instanceof DocSet) {\n      // how do we know what fields to read?\n      // todo: have a DocList/DocSet wrapper that\n      // restricts the fields to write...?\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default...\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f860e70f9624e5f04c00b71bd4c42b57ba482e2d":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["1da8d55113b689b06716246649de6f62430f15c0","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f860e70f9624e5f04c00b71bd4c42b57ba482e2d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f860e70f9624e5f04c00b71bd4c42b57ba482e2d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f860e70f9624e5f04c00b71bd4c42b57ba482e2d"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["f860e70f9624e5f04c00b71bd4c42b57ba482e2d","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"f860e70f9624e5f04c00b71bd4c42b57ba482e2d":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}