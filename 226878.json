{"path":"src/java/org/apache/solr/request/PythonWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","commits":[{"id":"434ff4225627b937a533128f8746eb1e9009fc95","date":1153247240,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/PythonWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /* optionally use a unicode python string if necessary */\r\n  @Override\r\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\r\n    if (!needsEscaping) {\r\n      writer.write('\\'');\r\n      writer.write(val);\r\n      writer.write('\\'');\r\n      return;\r\n    }\r\n\r\n    // use python unicode strings...\r\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\r\n\r\n    StringBuilder sb = new StringBuilder(val.length());\r\n    boolean needUnicode=false;\r\n\r\n    for (int i=0; i<val.length(); i++) {\r\n      char ch = val.charAt(i);\r\n      switch(ch) {\r\n        case '\\'':\r\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\r\n        case '\\r': sb.append(\"\\\\r\"); break;\r\n        case '\\n': sb.append(\"\\\\n\"); break;\r\n          default:\r\n            // we don't strictly have to escape these chars, but it will probably increase\r\n            // portability to stick to visible ascii\r\n            if (ch<' ' || ch>127) {\r\n              unicodeEscape(sb, ch);\r\n              needUnicode=true;\r\n            } else {\r\n              sb.append(ch);\r\n            }\r\n        }\r\n      }\r\n\r\n    writer.write( needUnicode ? \"u'\" : \"'\");\r\n    writer.append(sb);\r\n    writer.write('\\'');\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c0e301b711811c6aaee90440cc1a7925fdd1a1e","date":1153259525,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/PythonWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/PythonWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  /* optionally use a unicode python string if necessary */\n  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    if (!needsEscaping) {\n      writer.write('\\'');\n      writer.write(val);\n      writer.write('\\'');\n      return;\n    }\n\n    // use python unicode strings...\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\n\n    StringBuilder sb = new StringBuilder(val.length());\n    boolean needUnicode=false;\n\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      switch(ch) {\n        case '\\'':\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n          default:\n            // we don't strictly have to escape these chars, but it will probably increase\n            // portability to stick to visible ascii\n            if (ch<' ' || ch>127) {\n              unicodeEscape(sb, ch);\n              needUnicode=true;\n            } else {\n              sb.append(ch);\n            }\n        }\n      }\n\n    writer.write( needUnicode ? \"u'\" : \"'\");\n    writer.append(sb);\n    writer.write('\\'');\n  }\n\n","sourceOld":"  /* optionally use a unicode python string if necessary */\r\n  @Override\r\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\r\n    if (!needsEscaping) {\r\n      writer.write('\\'');\r\n      writer.write(val);\r\n      writer.write('\\'');\r\n      return;\r\n    }\r\n\r\n    // use python unicode strings...\r\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\r\n\r\n    StringBuilder sb = new StringBuilder(val.length());\r\n    boolean needUnicode=false;\r\n\r\n    for (int i=0; i<val.length(); i++) {\r\n      char ch = val.charAt(i);\r\n      switch(ch) {\r\n        case '\\'':\r\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\r\n        case '\\r': sb.append(\"\\\\r\"); break;\r\n        case '\\n': sb.append(\"\\\\n\"); break;\r\n          default:\r\n            // we don't strictly have to escape these chars, but it will probably increase\r\n            // portability to stick to visible ascii\r\n            if (ch<' ' || ch>127) {\r\n              unicodeEscape(sb, ch);\r\n              needUnicode=true;\r\n            } else {\r\n              sb.append(ch);\r\n            }\r\n        }\r\n      }\r\n\r\n    writer.write( needUnicode ? \"u'\" : \"'\");\r\n    writer.append(sb);\r\n    writer.write('\\'');\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"130536983a01e473ed77f2d5d579cf256a9b8acf","date":1154878143,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/PythonWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/PythonWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  /* optionally use a unicode python string if necessary */\n  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    if (!needsEscaping) {\n      writer.write('\\'');\n      writer.write(val);\n      writer.write('\\'');\n      return;\n    }\n\n    // use python unicode strings...\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\n\n    StringBuilder sb = new StringBuilder(val.length());\n    boolean needUnicode=false;\n\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      switch(ch) {\n        case '\\'':\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        default:\n          // we don't strictly have to escape these chars, but it will probably increase\n          // portability to stick to visible ascii\n          if (ch<' ' || ch>127) {\n            unicodeEscape(sb, ch);\n            needUnicode=true;\n          } else {\n            sb.append(ch);\n          }\n      }\n    }\n\n    writer.write( needUnicode ? \"u'\" : \"'\");\n    writer.append(sb);\n    writer.write('\\'');\n  }\n\n","sourceOld":"  /* optionally use a unicode python string if necessary */\n  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    if (!needsEscaping) {\n      writer.write('\\'');\n      writer.write(val);\n      writer.write('\\'');\n      return;\n    }\n\n    // use python unicode strings...\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\n\n    StringBuilder sb = new StringBuilder(val.length());\n    boolean needUnicode=false;\n\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      switch(ch) {\n        case '\\'':\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n          default:\n            // we don't strictly have to escape these chars, but it will probably increase\n            // portability to stick to visible ascii\n            if (ch<' ' || ch>127) {\n              unicodeEscape(sb, ch);\n              needUnicode=true;\n            } else {\n              sb.append(ch);\n            }\n        }\n      }\n\n    writer.write( needUnicode ? \"u'\" : \"'\");\n    writer.append(sb);\n    writer.write('\\'');\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13baf5514709a27de4ff67151d35b715138d158d","date":1186803122,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/PythonWriter[PythonResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/PythonWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  /* optionally use a unicode python string if necessary */\n  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    if (!needsEscaping) {\n      writer.write('\\'');\n      writer.write(val);\n      writer.write('\\'');\n      return;\n    }\n\n    // use python unicode strings...\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\n\n    StringBuilder sb = new StringBuilder(val.length());\n    boolean needUnicode=false;\n\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      switch(ch) {\n        case '\\'':\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        default:\n          // we don't strictly have to escape these chars, but it will probably increase\n          // portability to stick to visible ascii\n          if (ch<' ' || ch>127) {\n            unicodeEscape(sb, ch);\n            needUnicode=true;\n          } else {\n            sb.append(ch);\n          }\n      }\n    }\n\n    writer.write( needUnicode ? \"u'\" : \"'\");\n    writer.append(sb);\n    writer.write('\\'');\n  }\n\n","sourceOld":"  /* optionally use a unicode python string if necessary */\n  @Override\n  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    if (!needsEscaping) {\n      writer.write('\\'');\n      writer.write(val);\n      writer.write('\\'');\n      return;\n    }\n\n    // use python unicode strings...\n    // python doesn't tolerate newlines in strings in it's eval(), so we must escape them.\n\n    StringBuilder sb = new StringBuilder(val.length());\n    boolean needUnicode=false;\n\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      switch(ch) {\n        case '\\'':\n        case '\\\\': sb.append('\\\\'); sb.append(ch); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        default:\n          // we don't strictly have to escape these chars, but it will probably increase\n          // portability to stick to visible ascii\n          if (ch<' ' || ch>127) {\n            unicodeEscape(sb, ch);\n            needUnicode=true;\n          } else {\n            sb.append(ch);\n          }\n      }\n    }\n\n    writer.write( needUnicode ? \"u'\" : \"'\");\n    writer.append(sb);\n    writer.write('\\'');\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c0e301b711811c6aaee90440cc1a7925fdd1a1e":["434ff4225627b937a533128f8746eb1e9009fc95"],"434ff4225627b937a533128f8746eb1e9009fc95":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13baf5514709a27de4ff67151d35b715138d158d":["130536983a01e473ed77f2d5d579cf256a9b8acf"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"130536983a01e473ed77f2d5d579cf256a9b8acf":["0c0e301b711811c6aaee90440cc1a7925fdd1a1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c0e301b711811c6aaee90440cc1a7925fdd1a1e":["130536983a01e473ed77f2d5d579cf256a9b8acf"],"434ff4225627b937a533128f8746eb1e9009fc95":["0c0e301b711811c6aaee90440cc1a7925fdd1a1e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["434ff4225627b937a533128f8746eb1e9009fc95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"13baf5514709a27de4ff67151d35b715138d158d":[],"130536983a01e473ed77f2d5d579cf256a9b8acf":["13baf5514709a27de4ff67151d35b715138d158d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["13baf5514709a27de4ff67151d35b715138d158d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}