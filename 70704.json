{"path":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","commits":[{"id":"cb767289784b682dea51f9e6d7222add811edb77","date":1362902138,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    // build the mapping from the reader, since we deleted documents, some of\n    // them might have disappeared from the index (e.g. if an entire segment is\n    // dropped b/c all its docs are deleted)\n    Integer[] values = new Integer[reader.maxDoc()];\n    int[] docs = new int[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      docs[i] = i;\n      values[i] = Integer.valueOf(reader.document(i).get(ID_FIELD));\n    }\n\n    final int[] oldToNew = Sorter.compute(docs, Collections.unmodifiableList(Arrays.asList(values)));\n    // Sorter.compute also sorts the values\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[oldToNew[i]] = values[i];\n    }\n    if (VERBOSE) {\n      System.out.println(\"oldToNew: \" + Arrays.toString(oldToNew));\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    reader = new SortingAtomicReader(reader, new Sorter() {\n      @Override\n      public int[] oldToNew(AtomicReader reader) throws IOException {\n        return oldToNew;\n      }\n    });\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    _TestUtil.checkReader(reader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec","date":1363331426,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    // build the mapping from the reader, since we deleted documents, some of\n    // them might have disappeared from the index (e.g. if an entire segment is\n    // dropped b/c all its docs are deleted)\n    final int[] values = new int[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      values[i] = Integer.valueOf(reader.document(i).get(ID_FIELD));\n    }\n    final Sorter.DocComparator comparator = new Sorter.DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        final int v1 = values[docID1];\n        final int v2 = values[docID2];\n        return v1 < v2 ? -1 : v1 == v2 ? 0 : 1;\n      }\n    };\n\n    final Sorter.DocMap docMap = Sorter.sort(reader.maxDoc(), comparator);\n    // Sorter.compute also sorts the values\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[docMap.oldToNew(i)] = values[i];\n    }\n    if (VERBOSE) {\n      System.out.println(\"docMap: \" + docMap);\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    reader = SortingAtomicReader.sort(reader, new Sorter() {\n      @Override\n      public Sorter.DocMap sort(AtomicReader reader) throws IOException {\n        return docMap;\n      }\n    });\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    _TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    // build the mapping from the reader, since we deleted documents, some of\n    // them might have disappeared from the index (e.g. if an entire segment is\n    // dropped b/c all its docs are deleted)\n    Integer[] values = new Integer[reader.maxDoc()];\n    int[] docs = new int[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      docs[i] = i;\n      values[i] = Integer.valueOf(reader.document(i).get(ID_FIELD));\n    }\n\n    final int[] oldToNew = Sorter.compute(docs, Collections.unmodifiableList(Arrays.asList(values)));\n    // Sorter.compute also sorts the values\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[oldToNew[i]] = values[i];\n    }\n    if (VERBOSE) {\n      System.out.println(\"oldToNew: \" + Arrays.toString(oldToNew));\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    reader = new SortingAtomicReader(reader, new Sorter() {\n      @Override\n      public int[] oldToNew(AtomicReader reader) throws IOException {\n        return oldToNew;\n      }\n    });\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    _TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    // build the mapping from the reader, since we deleted documents, some of\n    // them might have disappeared from the index (e.g. if an entire segment is\n    // dropped b/c all its docs are deleted)\n    final int[] values = new int[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      values[i] = Integer.valueOf(reader.document(i).get(ID_FIELD));\n    }\n    final Sorter.DocComparator comparator = new Sorter.DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        final int v1 = values[docID1];\n        final int v2 = values[docID2];\n        return v1 < v2 ? -1 : v1 == v2 ? 0 : 1;\n      }\n    };\n\n    final Sorter.DocMap docMap = Sorter.sort(reader.maxDoc(), comparator);\n    // Sorter.compute also sorts the values\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[docMap.oldToNew(i)] = values[i];\n    }\n    if (VERBOSE) {\n      System.out.println(\"docMap: \" + docMap);\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    reader = SortingAtomicReader.wrap(reader, new Sorter() {\n      @Override\n      public Sorter.DocMap sort(AtomicReader reader) throws IOException {\n        return docMap;\n      }\n    });\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    _TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    // build the mapping from the reader, since we deleted documents, some of\n    // them might have disappeared from the index (e.g. if an entire segment is\n    // dropped b/c all its docs are deleted)\n    final int[] values = new int[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      values[i] = Integer.valueOf(reader.document(i).get(ID_FIELD));\n    }\n    final Sorter.DocComparator comparator = new Sorter.DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        final int v1 = values[docID1];\n        final int v2 = values[docID2];\n        return v1 < v2 ? -1 : v1 == v2 ? 0 : 1;\n      }\n    };\n\n    final Sorter.DocMap docMap = Sorter.sort(reader.maxDoc(), comparator);\n    // Sorter.compute also sorts the values\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[docMap.oldToNew(i)] = values[i];\n    }\n    if (VERBOSE) {\n      System.out.println(\"docMap: \" + docMap);\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    reader = SortingAtomicReader.sort(reader, new Sorter() {\n      @Override\n      public Sorter.DocMap sort(AtomicReader reader) throws IOException {\n        return docMap;\n      }\n    });\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    _TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d1c249f01722fe2de6d60de2f0aade417fbb638","date":1365517193,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    // build the mapping from the reader, since we deleted documents, some of\n    // them might have disappeared from the index (e.g. if an entire segment is\n    // dropped b/c all its docs are deleted)\n    final int[] values = new int[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      values[i] = Integer.valueOf(reader.document(i).get(ID_FIELD));\n    }\n    final Sorter.DocComparator comparator = new Sorter.DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        final int v1 = values[docID1];\n        final int v2 = values[docID2];\n        return v1 < v2 ? -1 : v1 == v2 ? 0 : 1;\n      }\n    };\n\n    final Sorter.DocMap docMap = Sorter.sort(reader.maxDoc(), comparator);\n    // Sorter.compute also sorts the values\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[docMap.oldToNew(i)] = values[i];\n    }\n    if (VERBOSE) {\n      System.out.println(\"docMap: \" + docMap);\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    reader = SortingAtomicReader.wrap(reader, new Sorter() {\n      @Override\n      public Sorter.DocMap sort(AtomicReader reader) throws IOException {\n        return docMap;\n      }\n      @Override\n      public String getID() {\n        return ID_FIELD;\n      }\n    });\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    _TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    // build the mapping from the reader, since we deleted documents, some of\n    // them might have disappeared from the index (e.g. if an entire segment is\n    // dropped b/c all its docs are deleted)\n    final int[] values = new int[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      values[i] = Integer.valueOf(reader.document(i).get(ID_FIELD));\n    }\n    final Sorter.DocComparator comparator = new Sorter.DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        final int v1 = values[docID1];\n        final int v2 = values[docID2];\n        return v1 < v2 ? -1 : v1 == v2 ? 0 : 1;\n      }\n    };\n\n    final Sorter.DocMap docMap = Sorter.sort(reader.maxDoc(), comparator);\n    // Sorter.compute also sorts the values\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[docMap.oldToNew(i)] = values[i];\n    }\n    if (VERBOSE) {\n      System.out.println(\"docMap: \" + docMap);\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    reader = SortingAtomicReader.wrap(reader, new Sorter() {\n      @Override\n      public Sorter.DocMap sort(AtomicReader reader) throws IOException {\n        return docMap;\n      }\n    });\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    _TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    // build the mapping from the reader, since we deleted documents, some of\n    // them might have disappeared from the index (e.g. if an entire segment is\n    // dropped b/c all its docs are deleted)\n    final int[] values = new int[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      values[i] = Integer.valueOf(reader.document(i).get(ID_FIELD));\n    }\n    final Sorter.DocComparator comparator = new Sorter.DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        final int v1 = values[docID1];\n        final int v2 = values[docID2];\n        return v1 < v2 ? -1 : v1 == v2 ? 0 : 1;\n      }\n    };\n\n    final Sorter.DocMap docMap = Sorter.sort(reader.maxDoc(), comparator);\n    // Sorter.compute also sorts the values\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[docMap.oldToNew(i)] = values[i];\n    }\n    if (VERBOSE) {\n      System.out.println(\"docMap: \" + docMap);\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    reader = SortingAtomicReader.wrap(reader, new Sorter() {\n      @Override\n      public Sorter.DocMap sort(AtomicReader reader) throws IOException {\n        return docMap;\n      }\n      @Override\n      public String getID() {\n        return ID_FIELD;\n      }\n    });\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    // build the mapping from the reader, since we deleted documents, some of\n    // them might have disappeared from the index (e.g. if an entire segment is\n    // dropped b/c all its docs are deleted)\n    final int[] values = new int[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      values[i] = Integer.valueOf(reader.document(i).get(ID_FIELD));\n    }\n    final Sorter.DocComparator comparator = new Sorter.DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        final int v1 = values[docID1];\n        final int v2 = values[docID2];\n        return v1 < v2 ? -1 : v1 == v2 ? 0 : 1;\n      }\n    };\n\n    final Sorter.DocMap docMap = Sorter.sort(reader.maxDoc(), comparator);\n    // Sorter.compute also sorts the values\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[docMap.oldToNew(i)] = values[i];\n    }\n    if (VERBOSE) {\n      System.out.println(\"docMap: \" + docMap);\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    reader = SortingAtomicReader.wrap(reader, new Sorter() {\n      @Override\n      public Sorter.DocMap sort(AtomicReader reader) throws IOException {\n        return docMap;\n      }\n      @Override\n      public String getID() {\n        return ID_FIELD;\n      }\n    });\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    _TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b060a9c887ff2c6f4280953afc6fb6000934dae5","date":1394119540,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    // build the mapping from the reader, since we deleted documents, some of\n    // them might have disappeared from the index (e.g. if an entire segment is\n    // dropped b/c all its docs are deleted)\n    final int[] values = new int[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      values[i] = Integer.valueOf(reader.document(i).get(ID_FIELD));\n    }\n    final Sorter.DocComparator comparator = new Sorter.DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        final int v1 = values[docID1];\n        final int v2 = values[docID2];\n        return v1 < v2 ? -1 : v1 == v2 ? 0 : 1;\n      }\n    };\n\n    final Sorter.DocMap docMap = Sorter.sort(reader.maxDoc(), comparator);\n    // Sorter.compute also sorts the values\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[docMap.oldToNew(i)] = values[i];\n    }\n    if (VERBOSE) {\n      System.out.println(\"docMap: \" + docMap);\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    // TODO: what is this doing? like a no-op sort?\n    reader = SortingAtomicReader.wrap(reader, docMap);\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    // build the mapping from the reader, since we deleted documents, some of\n    // them might have disappeared from the index (e.g. if an entire segment is\n    // dropped b/c all its docs are deleted)\n    final int[] values = new int[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      values[i] = Integer.valueOf(reader.document(i).get(ID_FIELD));\n    }\n    final Sorter.DocComparator comparator = new Sorter.DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        final int v1 = values[docID1];\n        final int v2 = values[docID2];\n        return v1 < v2 ? -1 : v1 == v2 ? 0 : 1;\n      }\n    };\n\n    final Sorter.DocMap docMap = Sorter.sort(reader.maxDoc(), comparator);\n    // Sorter.compute also sorts the values\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[docMap.oldToNew(i)] = values[i];\n    }\n    if (VERBOSE) {\n      System.out.println(\"docMap: \" + docMap);\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    reader = SortingAtomicReader.wrap(reader, new Sorter() {\n      @Override\n      public Sorter.DocMap sort(AtomicReader reader) throws IOException {\n        return docMap;\n      }\n      @Override\n      public String getID() {\n        return ID_FIELD;\n      }\n    });\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ab25e69f00c6fcfcc18887d25b8110084667b3","date":1394122932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    \n    // sort the index by id (as integer, in NUMERIC_DV_FIELD)\n    Sort sort = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.INT));\n    final Sorter.DocMap docMap = new SortSorter(sort).sort(reader);\n \n    // Sorter.compute also sorts the values\n    NumericDocValues dv = reader.getNumericDocValues(NUMERIC_DV_FIELD);\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[docMap.oldToNew(i)] = (int)dv.get(i);\n    }\n    if (VERBOSE) {\n      System.out.println(\"docMap: \" + docMap);\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    // sort the index by id (as integer, in NUMERIC_DV_FIELD)\n    reader = SortingAtomicReader.wrap(reader, sort);\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    // build the mapping from the reader, since we deleted documents, some of\n    // them might have disappeared from the index (e.g. if an entire segment is\n    // dropped b/c all its docs are deleted)\n    final int[] values = new int[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      values[i] = Integer.valueOf(reader.document(i).get(ID_FIELD));\n    }\n    final Sorter.DocComparator comparator = new Sorter.DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        final int v1 = values[docID1];\n        final int v2 = values[docID2];\n        return v1 < v2 ? -1 : v1 == v2 ? 0 : 1;\n      }\n    };\n\n    final Sorter.DocMap docMap = Sorter.sort(reader.maxDoc(), comparator);\n    // Sorter.compute also sorts the values\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[docMap.oldToNew(i)] = values[i];\n    }\n    if (VERBOSE) {\n      System.out.println(\"docMap: \" + docMap);\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    // TODO: what is this doing? like a no-op sort?\n    reader = SortingAtomicReader.wrap(reader, docMap);\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e4cbd3e4a2b5f0b9cfcac79bfbccd35a0de5036","date":1394123292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    \n    // sort the index by id (as integer, in NUMERIC_DV_FIELD)\n    Sort sort = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.INT));\n    final Sorter.DocMap docMap = new Sorter(sort).sort(reader);\n \n    // Sorter.compute also sorts the values\n    NumericDocValues dv = reader.getNumericDocValues(NUMERIC_DV_FIELD);\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[docMap.oldToNew(i)] = (int)dv.get(i);\n    }\n    if (VERBOSE) {\n      System.out.println(\"docMap: \" + docMap);\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    // sort the index by id (as integer, in NUMERIC_DV_FIELD)\n    reader = SortingAtomicReader.wrap(reader, sort);\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    \n    // sort the index by id (as integer, in NUMERIC_DV_FIELD)\n    Sort sort = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.INT));\n    final Sorter.DocMap docMap = new SortSorter(sort).sort(reader);\n \n    // Sorter.compute also sorts the values\n    NumericDocValues dv = reader.getNumericDocValues(NUMERIC_DV_FIELD);\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[docMap.oldToNew(i)] = (int)dv.get(i);\n    }\n    if (VERBOSE) {\n      System.out.println(\"docMap: \" + docMap);\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    // sort the index by id (as integer, in NUMERIC_DV_FIELD)\n    reader = SortingAtomicReader.wrap(reader, sort);\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4637747f71df783fc2014ef1f1e0418466e3bed6","date":1394196311,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    \n    // sort the index by id (as integer, in NUMERIC_DV_FIELD)\n    Sort sort = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.INT));\n    final Sorter.DocMap docMap = new Sorter(sort).sort(reader);\n \n    // Sorter.compute also sorts the values\n    NumericDocValues dv = reader.getNumericDocValues(NUMERIC_DV_FIELD);\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[docMap.oldToNew(i)] = (int)dv.get(i);\n    }\n    if (VERBOSE) {\n      System.out.println(\"docMap: \" + docMap);\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    // sort the index by id (as integer, in NUMERIC_DV_FIELD)\n    reader = SortingAtomicReader.wrap(reader, sort);\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    // build the mapping from the reader, since we deleted documents, some of\n    // them might have disappeared from the index (e.g. if an entire segment is\n    // dropped b/c all its docs are deleted)\n    final int[] values = new int[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      values[i] = Integer.valueOf(reader.document(i).get(ID_FIELD));\n    }\n    final Sorter.DocComparator comparator = new Sorter.DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        final int v1 = values[docID1];\n        final int v2 = values[docID2];\n        return v1 < v2 ? -1 : v1 == v2 ? 0 : 1;\n      }\n    };\n\n    final Sorter.DocMap docMap = Sorter.sort(reader.maxDoc(), comparator);\n    // Sorter.compute also sorts the values\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[docMap.oldToNew(i)] = values[i];\n    }\n    if (VERBOSE) {\n      System.out.println(\"docMap: \" + docMap);\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    reader = SortingAtomicReader.wrap(reader, new Sorter() {\n      @Override\n      public Sorter.DocMap sort(AtomicReader reader) throws IOException {\n        return docMap;\n      }\n      @Override\n      public String getID() {\n        return ID_FIELD;\n      }\n    });\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    TestUtil.checkReader(reader);\n  }\n\n","bugFix":["4d1c249f01722fe2de6d60de2f0aade417fbb638","87ac1f6aeca005a4532bea348c9a2c416eb0b4ec","cb767289784b682dea51f9e6d7222add811edb77","51c8450b3b616b6777f722ff4083c0bf946381a2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    \n    // sort the index by id (as integer, in NUMERIC_DV_FIELD)\n    Sort sort = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.INT));\n    final Sorter.DocMap docMap = new Sorter(sort).sort(reader);\n \n    // Sorter.compute also sorts the values\n    NumericDocValues dv = reader.getNumericDocValues(NUMERIC_DV_FIELD);\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[docMap.oldToNew(i)] = (int)dv.get(i);\n    }\n    if (VERBOSE) {\n      System.out.println(\"docMap: \" + docMap);\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    // sort the index by id (as integer, in NUMERIC_DV_FIELD)\n    reader = SortingAtomicReader.wrap(reader, sort);\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    // build the mapping from the reader, since we deleted documents, some of\n    // them might have disappeared from the index (e.g. if an entire segment is\n    // dropped b/c all its docs are deleted)\n    final int[] values = new int[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      values[i] = Integer.valueOf(reader.document(i).get(ID_FIELD));\n    }\n    final Sorter.DocComparator comparator = new Sorter.DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        final int v1 = values[docID1];\n        final int v2 = values[docID2];\n        return v1 < v2 ? -1 : v1 == v2 ? 0 : 1;\n      }\n    };\n\n    final Sorter.DocMap docMap = Sorter.sort(reader.maxDoc(), comparator);\n    // Sorter.compute also sorts the values\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[docMap.oldToNew(i)] = values[i];\n    }\n    if (VERBOSE) {\n      System.out.println(\"docMap: \" + docMap);\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    reader = SortingAtomicReader.wrap(reader, new Sorter() {\n      @Override\n      public Sorter.DocMap sort(AtomicReader reader) throws IOException {\n        return docMap;\n      }\n      @Override\n      public String getID() {\n        return ID_FIELD;\n      }\n    });\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SortingAtomicReaderTest#beforeClassSortingAtomicReaderTest().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void beforeClassSortingAtomicReaderTest() throws Exception {\n    \n    // sort the index by id (as integer, in NUMERIC_DV_FIELD)\n    Sort sort = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.INT));\n    final Sorter.DocMap docMap = new Sorter(sort).sort(reader);\n \n    // Sorter.compute also sorts the values\n    NumericDocValues dv = reader.getNumericDocValues(NUMERIC_DV_FIELD);\n    sortedValues = new Integer[reader.maxDoc()];\n    for (int i = 0; i < reader.maxDoc(); ++i) {\n      sortedValues[docMap.oldToNew(i)] = (int)dv.get(i);\n    }\n    if (VERBOSE) {\n      System.out.println(\"docMap: \" + docMap);\n      System.out.println(\"sortedValues: \" + Arrays.toString(sortedValues));\n    }\n    \n    // sort the index by id (as integer, in NUMERIC_DV_FIELD)\n    reader = SortingAtomicReader.wrap(reader, sort);\n    \n    if (VERBOSE) {\n      System.out.print(\"mapped-deleted-docs: \");\n      Bits mappedLiveDocs = reader.getLiveDocs();\n      for (int i = 0; i < mappedLiveDocs.length(); i++) {\n        if (!mappedLiveDocs.get(i)) {\n          System.out.print(i + \" \");\n        }\n      }\n      System.out.println();\n    }\n    \n    TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["6613659748fe4411a7dcf85266e55db1f95f7315","4637747f71df783fc2014ef1f1e0418466e3bed6"],"6613659748fe4411a7dcf85266e55db1f95f7315":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"4d1c249f01722fe2de6d60de2f0aade417fbb638":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"],"3e4cbd3e4a2b5f0b9cfcac79bfbccd35a0de5036":["a9ab25e69f00c6fcfcc18887d25b8110084667b3"],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb767289784b682dea51f9e6d7222add811edb77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["cb767289784b682dea51f9e6d7222add811edb77"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["6613659748fe4411a7dcf85266e55db1f95f7315","3e4cbd3e4a2b5f0b9cfcac79bfbccd35a0de5036"],"a9ab25e69f00c6fcfcc18887d25b8110084667b3":["b060a9c887ff2c6f4280953afc6fb6000934dae5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["96ea64d994d340044e0d57aeb6a5871539d10ca5","b060a9c887ff2c6f4280953afc6fb6000934dae5","4637747f71df783fc2014ef1f1e0418466e3bed6"],"4d1c249f01722fe2de6d60de2f0aade417fbb638":["6613659748fe4411a7dcf85266e55db1f95f7315"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e4cbd3e4a2b5f0b9cfcac79bfbccd35a0de5036":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["a9ab25e69f00c6fcfcc18887d25b8110084667b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb767289784b682dea51f9e6d7222add811edb77"],"cb767289784b682dea51f9e6d7222add811edb77":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["96ea64d994d340044e0d57aeb6a5871539d10ca5","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"a9ab25e69f00c6fcfcc18887d25b8110084667b3":["3e4cbd3e4a2b5f0b9cfcac79bfbccd35a0de5036"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}