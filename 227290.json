{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DescribeEvaluator#evaluate(Tuple).mjava","commits":[{"id":"ea18ed1e4681b4ce672ca80f943642f049c2b140","date":1495492929,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DescribeEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"describe expects 1 column as a parameters\");\n    }\n\n    StreamEvaluator colEval = subEvaluators.get(0);\n\n    List<Number> numbers = (List<Number>)colEval.evaluate(tuple);\n    DescriptiveStatistics descriptiveStatistics = new DescriptiveStatistics();\n\n    for(Number n : numbers) {\n      descriptiveStatistics.addValue(n.doubleValue());\n    }\n\n\n    Map map = new HashMap();\n\n    map.put(\"max\", descriptiveStatistics.getMax());\n    map.put(\"mean\", descriptiveStatistics.getMean());\n    map.put(\"min\", descriptiveStatistics.getMin());\n    map.put(\"stdev\", descriptiveStatistics.getStandardDeviation());\n    map.put(\"sum\", descriptiveStatistics.getSum());\n    map.put(\"N\", descriptiveStatistics.getN());\n    map.put(\"var\", descriptiveStatistics.getVariance());\n    map.put(\"kurtosis\", descriptiveStatistics.getKurtosis());\n    map.put(\"skewness\", descriptiveStatistics.getSkewness());\n    map.put(\"popVar\", descriptiveStatistics.getPopulationVariance());\n    map.put(\"geometricMean\", descriptiveStatistics.getGeometricMean());\n    map.put(\"sumsq\", descriptiveStatistics.getSumsq());\n\n    return new Tuple(map);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12cb83a3f761dc612e1ece020f46e1886fc2550e","date":1495722768,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DescribeEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DescribeEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"describe expects 1 column as a parameters\");\n    }\n\n    StreamEvaluator colEval = subEvaluators.get(0);\n\n    List<Number> numbers = (List<Number>)colEval.evaluate(tuple);\n    DescriptiveStatistics descriptiveStatistics = new DescriptiveStatistics();\n\n    for(Number n : numbers) {\n      descriptiveStatistics.addValue(n.doubleValue());\n    }\n\n\n    Map map = new HashMap();\n\n    map.put(\"max\", descriptiveStatistics.getMax());\n    map.put(\"mean\", descriptiveStatistics.getMean());\n    map.put(\"min\", descriptiveStatistics.getMin());\n    map.put(\"stdev\", descriptiveStatistics.getStandardDeviation());\n    map.put(\"sum\", descriptiveStatistics.getSum());\n    map.put(\"N\", descriptiveStatistics.getN());\n    map.put(\"var\", descriptiveStatistics.getVariance());\n    map.put(\"kurtosis\", descriptiveStatistics.getKurtosis());\n    map.put(\"skewness\", descriptiveStatistics.getSkewness());\n    map.put(\"popVar\", descriptiveStatistics.getPopulationVariance());\n    map.put(\"geometricMean\", descriptiveStatistics.getGeometricMean());\n    map.put(\"sumsq\", descriptiveStatistics.getSumsq());\n\n    return new Tuple(map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"describe expects 1 column as a parameters\");\n    }\n\n    StreamEvaluator colEval = subEvaluators.get(0);\n\n    List<Number> numbers = (List<Number>)colEval.evaluate(tuple);\n    DescriptiveStatistics descriptiveStatistics = new DescriptiveStatistics();\n\n    for(Number n : numbers) {\n      descriptiveStatistics.addValue(n.doubleValue());\n    }\n\n\n    Map map = new HashMap();\n\n    map.put(\"max\", descriptiveStatistics.getMax());\n    map.put(\"mean\", descriptiveStatistics.getMean());\n    map.put(\"min\", descriptiveStatistics.getMin());\n    map.put(\"stdev\", descriptiveStatistics.getStandardDeviation());\n    map.put(\"sum\", descriptiveStatistics.getSum());\n    map.put(\"N\", descriptiveStatistics.getN());\n    map.put(\"var\", descriptiveStatistics.getVariance());\n    map.put(\"kurtosis\", descriptiveStatistics.getKurtosis());\n    map.put(\"skewness\", descriptiveStatistics.getSkewness());\n    map.put(\"popVar\", descriptiveStatistics.getPopulationVariance());\n    map.put(\"geometricMean\", descriptiveStatistics.getGeometricMean());\n    map.put(\"sumsq\", descriptiveStatistics.getSumsq());\n\n    return new Tuple(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DescribeEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DescribeEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"describe expects 1 column as a parameters\");\n    }\n\n    StreamEvaluator colEval = subEvaluators.get(0);\n\n    List<Number> numbers = (List<Number>)colEval.evaluate(tuple);\n    DescriptiveStatistics descriptiveStatistics = new DescriptiveStatistics();\n\n    for(Number n : numbers) {\n      descriptiveStatistics.addValue(n.doubleValue());\n    }\n\n\n    Map map = new HashMap();\n\n    map.put(\"max\", descriptiveStatistics.getMax());\n    map.put(\"mean\", descriptiveStatistics.getMean());\n    map.put(\"min\", descriptiveStatistics.getMin());\n    map.put(\"stdev\", descriptiveStatistics.getStandardDeviation());\n    map.put(\"sum\", descriptiveStatistics.getSum());\n    map.put(\"N\", descriptiveStatistics.getN());\n    map.put(\"var\", descriptiveStatistics.getVariance());\n    map.put(\"kurtosis\", descriptiveStatistics.getKurtosis());\n    map.put(\"skewness\", descriptiveStatistics.getSkewness());\n    map.put(\"popVar\", descriptiveStatistics.getPopulationVariance());\n    map.put(\"geometricMean\", descriptiveStatistics.getGeometricMean());\n    map.put(\"sumsq\", descriptiveStatistics.getSumsq());\n\n    return new Tuple(map);\n  }\n\n","sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 1) {\n      throw new IOException(\"describe expects 1 column as a parameters\");\n    }\n\n    StreamEvaluator colEval = subEvaluators.get(0);\n\n    List<Number> numbers = (List<Number>)colEval.evaluate(tuple);\n    DescriptiveStatistics descriptiveStatistics = new DescriptiveStatistics();\n\n    for(Number n : numbers) {\n      descriptiveStatistics.addValue(n.doubleValue());\n    }\n\n\n    Map map = new HashMap();\n\n    map.put(\"max\", descriptiveStatistics.getMax());\n    map.put(\"mean\", descriptiveStatistics.getMean());\n    map.put(\"min\", descriptiveStatistics.getMin());\n    map.put(\"stdev\", descriptiveStatistics.getStandardDeviation());\n    map.put(\"sum\", descriptiveStatistics.getSum());\n    map.put(\"N\", descriptiveStatistics.getN());\n    map.put(\"var\", descriptiveStatistics.getVariance());\n    map.put(\"kurtosis\", descriptiveStatistics.getKurtosis());\n    map.put(\"skewness\", descriptiveStatistics.getSkewness());\n    map.put(\"popVar\", descriptiveStatistics.getPopulationVariance());\n    map.put(\"geometricMean\", descriptiveStatistics.getGeometricMean());\n    map.put(\"sumsq\", descriptiveStatistics.getSumsq());\n\n    return new Tuple(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12cb83a3f761dc612e1ece020f46e1886fc2550e":["ea18ed1e4681b4ce672ca80f943642f049c2b140"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea18ed1e4681b4ce672ca80f943642f049c2b140":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["ea18ed1e4681b4ce672ca80f943642f049c2b140","12cb83a3f761dc612e1ece020f46e1886fc2550e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"12cb83a3f761dc612e1ece020f46e1886fc2550e":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea18ed1e4681b4ce672ca80f943642f049c2b140"],"ea18ed1e4681b4ce672ca80f943642f049c2b140":["12cb83a3f761dc612e1ece020f46e1886fc2550e","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}