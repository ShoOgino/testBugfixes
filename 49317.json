{"path":"modules/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testAlgorithms().mjava","commits":[{"id":"45e349695223fccf7b1b9d08ba85a1c919b06f7c","date":1277292317,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testAlgorithms().mjava","pathOld":"/dev/null","sourceNew":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(new Metaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(new Metaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(new DoubleMetaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(new DoubleMetaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(new Soundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(new Soundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(new RefinedSoundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(new RefinedSoundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(new Caverphone(), true, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(new Caverphone(), false, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testAlgorithms().mjava","pathOld":"/dev/null","sourceNew":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(new Metaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(new Metaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(new DoubleMetaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(new DoubleMetaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(new Soundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(new Soundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(new RefinedSoundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(new RefinedSoundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(new Caverphone(), true, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(new Caverphone(), false, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testAlgorithms().mjava","pathOld":"modules/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testAlgorithms().mjava","sourceNew":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(new Metaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(new Metaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(new DoubleMetaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(new DoubleMetaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(new Soundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(new Soundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(new RefinedSoundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(new RefinedSoundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(new Caverphone(), true, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(new Caverphone(), false, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n  }\n\n","sourceOld":"  public void testAlgorithms() throws Exception {\n    assertAlgorithm(new Metaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"B\", \"bbb\", \"KKK\", \"ccc\", \"ESKS\", \"easgasg\" });\n    assertAlgorithm(new Metaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"B\", \"KKK\", \"ESKS\" });\n    \n    assertAlgorithm(new DoubleMetaphone(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"aaa\", \"PP\", \"bbb\", \"KK\", \"ccc\", \"ASKS\", \"easgasg\" });\n    assertAlgorithm(new DoubleMetaphone(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A\", \"PP\", \"KK\", \"ASKS\" });\n    \n    assertAlgorithm(new Soundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"aaa\", \"B000\", \"bbb\", \"C000\", \"ccc\", \"E220\", \"easgasg\" });\n    assertAlgorithm(new Soundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A000\", \"B000\", \"C000\", \"E220\" });\n    \n    assertAlgorithm(new RefinedSoundex(), true, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"aaa\", \"B1\", \"bbb\", \"C3\", \"ccc\", \"E034034\", \"easgasg\" });\n    assertAlgorithm(new RefinedSoundex(), false, \"aaa bbb ccc easgasg\",\n        new String[] { \"A0\", \"B1\", \"C3\", \"E034034\" });\n    \n    assertAlgorithm(new Caverphone(), true, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"Darda\", \"KLN1111111\", \"Karleen\", \n          \"TTA1111111\", \"Datha\", \"KLN1111111\", \"Carlene\" });\n    assertAlgorithm(new Caverphone(), false, \"Darda Karleen Datha Carlene\",\n        new String[] { \"TTA1111111\", \"KLN1111111\", \"TTA1111111\", \"KLN1111111\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["45e349695223fccf7b1b9d08ba85a1c919b06f7c"],"45e349695223fccf7b1b9d08ba85a1c919b06f7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45e349695223fccf7b1b9d08ba85a1c919b06f7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"45e349695223fccf7b1b9d08ba85a1c919b06f7c":["b89678825b68eccaf09e6ab71675fc0b0af1e099","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45e349695223fccf7b1b9d08ba85a1c919b06f7c","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}