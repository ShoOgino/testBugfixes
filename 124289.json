{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","sourceNew":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"index\", q.setFacetSort(\"index\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n\n      assertEquals( \"x,y\", q.setFields(\"x\",\"y\").getFields() );    \n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() );\n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() ); // set twice on purpose\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() );\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() ); // remove twice on purpose\n\n  }\n\n","sourceOld":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"index\", q.setFacetSort(\"index\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n\n      assertEquals( \"x,y\", q.setFields(\"x\",\"y\").getFields() );    \n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() );\n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() ); // set twice on purpose\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() );\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() ); // remove twice on purpose\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","sourceNew":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"index\", q.setFacetSort(\"index\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n\n      assertEquals( \"x,y\", q.setFields(\"x\",\"y\").getFields() );    \n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() );\n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() ); // set twice on purpose\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() );\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() ); // remove twice on purpose\n\n  }\n\n","sourceOld":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"index\", q.setFacetSort(\"index\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n\n      assertEquals( \"x,y\", q.setFields(\"x\",\"y\").getFields() );    \n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() );\n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() ); // set twice on purpose\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() );\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() ); // remove twice on purpose\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","sourceNew":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"index\", q.setFacetSort(\"index\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n\n      assertEquals( \"x,y\", q.setFields(\"x\",\"y\").getFields() );    \n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() );\n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() ); // set twice on purpose\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() );\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() ); // remove twice on purpose\n\n  }\n\n","sourceOld":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"index\", q.setFacetSort(\"index\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n\n      assertEquals( \"x,y\", q.setFields(\"x\",\"y\").getFields() );    \n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() );\n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() ); // set twice on purpose\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() );\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() ); // remove twice on purpose\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a8954ce7749d4df8d7288d333126e079af73f12","date":1340166187,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","sourceNew":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"index\", q.setFacetSort(\"index\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setRequestHandler(\"foo\").getRequestHandler());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n\n      assertEquals( \"x,y\", q.setFields(\"x\",\"y\").getFields() );    \n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() );\n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() ); // set twice on purpose\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() );\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() ); // remove twice on purpose\n\n  }\n\n","sourceOld":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"index\", q.setFacetSort(\"index\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n\n      assertEquals( \"x,y\", q.setFields(\"x\",\"y\").getFields() );    \n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() );\n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() ); // set twice on purpose\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() );\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() ); // remove twice on purpose\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fc9f4a33c8fefeb1260aea04273a36b0d32378e","date":1421852764,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","sourceNew":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"index\", q.setFacetSort(\"index\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setRequestHandler(\"foo\").getRequestHandler());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setFacetMissing(Boolean.TRUE).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n\n      assertEquals( \"x,y\", q.setFields(\"x\",\"y\").getFields() );    \n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() );\n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() ); // set twice on purpose\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() );\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() ); // remove twice on purpose\n\n  }\n\n","sourceOld":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"index\", q.setFacetSort(\"index\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setRequestHandler(\"foo\").getRequestHandler());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n\n      assertEquals( \"x,y\", q.setFields(\"x\",\"y\").getFields() );    \n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() );\n      assertEquals( \"x,y,score\", q.setIncludeScore(true).getFields() ); // set twice on purpose\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() );\n      assertEquals( \"x,y\", q.setIncludeScore(false).getFields() ); // remove twice on purpose\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["7a8954ce7749d4df8d7288d333126e079af73f12"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a8954ce7749d4df8d7288d333126e079af73f12":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"]},"commit2Childs":{"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"7a8954ce7749d4df8d7288d333126e079af73f12":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"c26f00b574427b55127e869b935845554afde1fa":["7a8954ce7749d4df8d7288d333126e079af73f12"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}