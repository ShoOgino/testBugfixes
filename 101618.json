{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","commits":[{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","pathOld":"/dev/null","sourceNew":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getShards().containsKey(nodeName + \"_\" + coreName))\n          ;\n          return slice.getName();\n        }\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","pathOld":"/dev/null","sourceNew":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getShards().containsKey(nodeName + \"_\" + coreName))\n          ;\n          return slice.getName();\n        }\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd83761c0ebfa7eb75ab39b49f4a2d80811590bb","date":1334054651,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","sourceNew":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getShards().containsKey(nodeName + \"_\" + coreName)) {\n            return slice.getName();\n          }\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getShards().containsKey(nodeName + \"_\" + coreName))\n          ;\n          return slice.getName();\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","sourceNew":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getShards().containsKey(nodeName + \"_\" + coreName)) {\n            return slice.getName();\n          }\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getShards().containsKey(nodeName + \"_\" + coreName))\n          ;\n          return slice.getName();\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","sourceNew":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlices(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getShards().containsKey(nodeName + \"_\" + coreName)) {\n            return slice.getName();\n          }\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getShards().containsKey(nodeName + \"_\" + coreName)) {\n            return slice.getName();\n          }\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","sourceNew":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlices(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getShards().containsKey(nodeName + \"_\" + coreName)) {\n            return slice.getName();\n          }\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getShards().containsKey(nodeName + \"_\" + coreName)) {\n            return slice.getName();\n          }\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","sourceNew":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlices(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getShards().containsKey(nodeName + \"_\" + coreName)) {\n            return slice.getName();\n          }\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getShards().containsKey(nodeName + \"_\" + coreName)) {\n            return slice.getName();\n          }\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","sourceNew":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlices(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getReplicasMap().containsKey(nodeName + \"_\" + coreName)) {\n            return slice.getName();\n          }\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlices(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getShards().containsKey(nodeName + \"_\" + coreName)) {\n            return slice.getName();\n          }\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","sourceNew":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlicesMap(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getReplicasMap().containsKey(nodeName + \"_\" + coreName)) {\n            return slice.getName();\n          }\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlices(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getReplicasMap().containsKey(nodeName + \"_\" + coreName)) {\n            return slice.getName();\n          }\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","sourceNew":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlicesMap(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getReplicasMap().containsKey(nodeName + \"_\" + coreName)) {\n            return slice.getName();\n          }\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlices(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getReplicasMap().containsKey(nodeName + \"_\" + coreName)) {\n            return slice.getName();\n          }\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","sourceNew":"    private String getShardId(final String baseUrl, final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlicesMap(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n            String rbaseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);\n            String rcore = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            if (baseUrl.equals(rbaseUrl) && coreName.equals(rcore)) {\n              return slice.getName();\n            }\n          }\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlicesMap(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getReplicasMap().containsKey(nodeName + \"_\" + coreName)) {\n            return slice.getName();\n          }\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest.MockZKController#getShardId(String).mjava","sourceNew":null,"sourceOld":"    private String getShardId(final String coreName) {\n      Map<String,Slice> slices = zkStateReader.getClusterState().getSlicesMap(\n          collection);\n      if (slices != null) {\n        for (Slice slice : slices.values()) {\n          if (slice.getReplicasMap().containsKey(nodeName + \"_\" + coreName)) {\n            return slice.getName();\n          }\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cd83761c0ebfa7eb75ab39b49f4a2d80811590bb":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["c5a558d54519c651068ddb202f03befefb1514a7","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"5a238fc456663f685a9db1ed8d680e348bb45171":["c51a2dcb8b4e1820a44f35f11961110201e06cdb","cd83761c0ebfa7eb75ab39b49f4a2d80811590bb"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"fa64435b5902ce266c23755a4a00691a3285dab8":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"407687e67faf6e1f02a211ca078d8e3eed631027":["fa64435b5902ce266c23755a4a00691a3285dab8","c5a558d54519c651068ddb202f03befefb1514a7"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["cd83761c0ebfa7eb75ab39b49f4a2d80811590bb","3f767f8c99eaedb984df754fe61f21c5de260f94"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["c5a558d54519c651068ddb202f03befefb1514a7"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["cd83761c0ebfa7eb75ab39b49f4a2d80811590bb"],"c5a558d54519c651068ddb202f03befefb1514a7":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["cd83761c0ebfa7eb75ab39b49f4a2d80811590bb","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["849494cf2f3a96af5c8c84995108ddd8456fcd04"]},"commit2Childs":{"cd83761c0ebfa7eb75ab39b49f4a2d80811590bb":["5a238fc456663f685a9db1ed8d680e348bb45171","8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["cd83761c0ebfa7eb75ab39b49f4a2d80811590bb","5a238fc456663f685a9db1ed8d680e348bb45171","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["fa64435b5902ce266c23755a4a00691a3285dab8","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c5a558d54519c651068ddb202f03befefb1514a7":["37a0f60745e53927c4c876cfe5b5a58170f0646c","407687e67faf6e1f02a211ca078d8e3eed631027","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","5a238fc456663f685a9db1ed8d680e348bb45171","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","407687e67faf6e1f02a211ca078d8e3eed631027","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}