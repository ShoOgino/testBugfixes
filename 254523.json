{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#assertVersions(SolrServer,SolrServer).mjava","commits":[{"id":"bd8bc29700397ec1886e73bae0a67ff536bad223","date":1362159450,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#assertVersions(SolrServer,SolrServer).mjava","pathOld":"/dev/null","sourceNew":"  private void assertVersions(SolrServer client1, SolrServer client2) throws Exception {\n    NamedList<Object> details = getDetails(client1);\n    ArrayList<NamedList<Object>> commits = (ArrayList<NamedList<Object>>) details.get(\"commits\");\n    Long maxVersionClient1 = getVersion(client1);\n    Long maxVersionClient2 = getVersion(client2);\n\n    assertEquals(maxVersionClient1, maxVersionClient2);\n    \n    // check vs /replication?command=indexverion call\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/replication\");\n    params.set(\"command\", \"indexversion\");\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client1.request(req);\n    \n    Long version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient1, version);\n    \n    // check vs /replication?command=indexversion call\n    resp = client2.request(req);\n    version = (Long) resp.get(\"indexversion\");\n    \n    assertEquals(maxVersionClient2, version);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["058801f8673d53a5abac8088204860ec29a40f0d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"35b85bcb9f4029b10b1fcd20934d760755940bb2","date":1363925237,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#assertVersions(SolrServer,SolrServer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#assertVersions(SolrServer,SolrServer).mjava","sourceNew":"  private void assertVersions(SolrServer client1, SolrServer client2) throws Exception {\n    NamedList<Object> details = getDetails(client1);\n    ArrayList<NamedList<Object>> commits = (ArrayList<NamedList<Object>>) details.get(\"commits\");\n    Long maxVersionClient1 = getVersion(client1);\n    Long maxVersionClient2 = getVersion(client2);\n\n    if (maxVersionClient1 > 0 && maxVersionClient2 > 0) {\n      assertEquals(maxVersionClient1, maxVersionClient2);\n    }\n    \n    // check vs /replication?command=indexversion call\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/replication\");\n    params.set(\"command\", \"indexversion\");\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client1.request(req);\n    \n    Long version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient1, version);\n    \n    // check vs /replication?command=indexversion call\n    resp = client2.request(req);\n    version = (Long) resp.get(\"indexversion\");\n    \n    assertEquals(maxVersionClient2, version);\n  }\n\n","sourceOld":"  private void assertVersions(SolrServer client1, SolrServer client2) throws Exception {\n    NamedList<Object> details = getDetails(client1);\n    ArrayList<NamedList<Object>> commits = (ArrayList<NamedList<Object>>) details.get(\"commits\");\n    Long maxVersionClient1 = getVersion(client1);\n    Long maxVersionClient2 = getVersion(client2);\n\n    assertEquals(maxVersionClient1, maxVersionClient2);\n    \n    // check vs /replication?command=indexverion call\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/replication\");\n    params.set(\"command\", \"indexversion\");\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client1.request(req);\n    \n    Long version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient1, version);\n    \n    // check vs /replication?command=indexversion call\n    resp = client2.request(req);\n    version = (Long) resp.get(\"indexversion\");\n    \n    assertEquals(maxVersionClient2, version);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"058801f8673d53a5abac8088204860ec29a40f0d","date":1364178882,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#assertVersions(SolrServer,SolrServer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#assertVersions(SolrServer,SolrServer).mjava","sourceNew":"  private void assertVersions(SolrServer client1, SolrServer client2) throws Exception {\n    NamedList<Object> details = getDetails(client1);\n    ArrayList<NamedList<Object>> commits = (ArrayList<NamedList<Object>>) details.get(\"commits\");\n    Long maxVersionClient1 = getVersion(client1);\n    Long maxVersionClient2 = getVersion(client2);\n\n    if (maxVersionClient1 > 0 && maxVersionClient2 > 0) {\n      assertEquals(maxVersionClient1, maxVersionClient2);\n    }\n    \n    // check vs /replication?command=indexversion call\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/replication\");\n    params.set(\"command\", \"indexversion\");\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client1.request(req);\n    \n    Long version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient1, version);\n    \n    // check vs /replication?command=indexversion call\n    resp = client2.request(req);\n    version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient2, version);\n  }\n\n","sourceOld":"  private void assertVersions(SolrServer client1, SolrServer client2) throws Exception {\n    NamedList<Object> details = getDetails(client1);\n    ArrayList<NamedList<Object>> commits = (ArrayList<NamedList<Object>>) details.get(\"commits\");\n    Long maxVersionClient1 = getVersion(client1);\n    Long maxVersionClient2 = getVersion(client2);\n\n    if (maxVersionClient1 > 0 && maxVersionClient2 > 0) {\n      assertEquals(maxVersionClient1, maxVersionClient2);\n    }\n    \n    // check vs /replication?command=indexversion call\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/replication\");\n    params.set(\"command\", \"indexversion\");\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client1.request(req);\n    \n    Long version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient1, version);\n    \n    // check vs /replication?command=indexversion call\n    resp = client2.request(req);\n    version = (Long) resp.get(\"indexversion\");\n    \n    assertEquals(maxVersionClient2, version);\n  }\n\n","bugFix":["bd8bc29700397ec1886e73bae0a67ff536bad223"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25bbd8e76cd29f2d4b262a24d6a42c754706b143","date":1365910543,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#assertVersions(SolrServer,SolrServer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#assertVersions(SolrServer,SolrServer).mjava","sourceNew":"  private void assertVersions(SolrServer client1, SolrServer client2) throws Exception {\n    NamedList<Object> details = getDetails(client1);\n    ArrayList<NamedList<Object>> commits = (ArrayList<NamedList<Object>>) details.get(\"commits\");\n    Long maxVersionClient1 = getVersion(client1);\n    Long maxVersionClient2 = getVersion(client2);\n\n    if (maxVersionClient1 > 0 && maxVersionClient2 > 0) {\n      assertEquals(maxVersionClient1, maxVersionClient2);\n    }\n    \n    // check vs /replication?command=indexversion call\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/replication\");\n    params.set(\"_trace\", \"assertVersions\");\n    params.set(\"command\", \"indexversion\");\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client1.request(req);\n    \n    Long version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient1, version);\n    \n    // check vs /replication?command=indexversion call\n    resp = client2.request(req);\n    version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient2, version);\n  }\n\n","sourceOld":"  private void assertVersions(SolrServer client1, SolrServer client2) throws Exception {\n    NamedList<Object> details = getDetails(client1);\n    ArrayList<NamedList<Object>> commits = (ArrayList<NamedList<Object>>) details.get(\"commits\");\n    Long maxVersionClient1 = getVersion(client1);\n    Long maxVersionClient2 = getVersion(client2);\n\n    if (maxVersionClient1 > 0 && maxVersionClient2 > 0) {\n      assertEquals(maxVersionClient1, maxVersionClient2);\n    }\n    \n    // check vs /replication?command=indexversion call\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/replication\");\n    params.set(\"command\", \"indexversion\");\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client1.request(req);\n    \n    Long version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient1, version);\n    \n    // check vs /replication?command=indexversion call\n    resp = client2.request(req);\n    version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient2, version);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#assertVersions(SolrClient,SolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#assertVersions(SolrServer,SolrServer).mjava","sourceNew":"  private void assertVersions(SolrClient client1, SolrClient client2) throws Exception {\n    NamedList<Object> details = getDetails(client1);\n    ArrayList<NamedList<Object>> commits = (ArrayList<NamedList<Object>>) details.get(\"commits\");\n    Long maxVersionClient1 = getVersion(client1);\n    Long maxVersionClient2 = getVersion(client2);\n\n    if (maxVersionClient1 > 0 && maxVersionClient2 > 0) {\n      assertEquals(maxVersionClient1, maxVersionClient2);\n    }\n    \n    // check vs /replication?command=indexversion call\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/replication\");\n    params.set(\"_trace\", \"assertVersions\");\n    params.set(\"command\", \"indexversion\");\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client1.request(req);\n    \n    Long version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient1, version);\n    \n    // check vs /replication?command=indexversion call\n    resp = client2.request(req);\n    version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient2, version);\n  }\n\n","sourceOld":"  private void assertVersions(SolrServer client1, SolrServer client2) throws Exception {\n    NamedList<Object> details = getDetails(client1);\n    ArrayList<NamedList<Object>> commits = (ArrayList<NamedList<Object>>) details.get(\"commits\");\n    Long maxVersionClient1 = getVersion(client1);\n    Long maxVersionClient2 = getVersion(client2);\n\n    if (maxVersionClient1 > 0 && maxVersionClient2 > 0) {\n      assertEquals(maxVersionClient1, maxVersionClient2);\n    }\n    \n    // check vs /replication?command=indexversion call\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/replication\");\n    params.set(\"_trace\", \"assertVersions\");\n    params.set(\"command\", \"indexversion\");\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = client1.request(req);\n    \n    Long version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient1, version);\n    \n    // check vs /replication?command=indexversion call\n    resp = client2.request(req);\n    version = (Long) resp.get(\"indexversion\");\n    assertEquals(maxVersionClient2, version);\n  }\n\n","bugFix":null,"bugIntro":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"35b85bcb9f4029b10b1fcd20934d760755940bb2":["bd8bc29700397ec1886e73bae0a67ff536bad223"],"058801f8673d53a5abac8088204860ec29a40f0d":["35b85bcb9f4029b10b1fcd20934d760755940bb2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["058801f8673d53a5abac8088204860ec29a40f0d"],"bd8bc29700397ec1886e73bae0a67ff536bad223":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"35b85bcb9f4029b10b1fcd20934d760755940bb2":["058801f8673d53a5abac8088204860ec29a40f0d"],"058801f8673d53a5abac8088204860ec29a40f0d":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd8bc29700397ec1886e73bae0a67ff536bad223"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bd8bc29700397ec1886e73bae0a67ff536bad223":["35b85bcb9f4029b10b1fcd20934d760755940bb2"],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}