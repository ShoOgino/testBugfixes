{"path":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#KNearestNeighborClassifier(LeafReader,Similarity,Analyzer,Query,int,int,int,String,String...).mjava","commits":[{"id":"7161a776f504e35697e4bcb672862f679a4c2a9d","date":1439207410,"type":1,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#KNearestNeighborClassifier(LeafReader,Similarity,Analyzer,Query,int,int,int,String,String...).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#KNearestNeighborClassifier(LeafReader,Analyzer,Query,int,int,int,String,String...).mjava","sourceNew":"  /**\n   * Creates a {@link KNearestNeighborClassifier}.\n   *\n   * @param leafReader     the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param similarity     the {@link Similarity} to be used by the underlying {@link IndexSearcher} or {@code null}\n   *                       (defaults to {@link org.apache.lucene.search.similarities.DefaultSimilarity})\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param k              the no. of docs to select in the MLT results to find the nearest neighbor\n   * @param minDocsFreq    {@link MoreLikeThis#minDocFreq} parameter\n   * @param minTermFreq    {@link MoreLikeThis#minTermFreq} parameter\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, they can contain boosting indication e.g. title^10\n   */\n  public KNearestNeighborClassifier(LeafReader leafReader, Similarity similarity, Analyzer analyzer, Query query, int k, int minDocsFreq,\n                                    int minTermFreq, String classFieldName, String... textFieldNames) {\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.mlt = new MoreLikeThis(leafReader);\n    this.mlt.setAnalyzer(analyzer);\n    this.mlt.setFieldNames(textFieldNames);\n    this.indexSearcher = new IndexSearcher(leafReader);\n    if (similarity != null) {\n      this.indexSearcher.setSimilarity(similarity);\n    } else {\n      this.indexSearcher.setSimilarity(new DefaultSimilarity());\n    }\n    if (minDocsFreq > 0) {\n      mlt.setMinDocFreq(minDocsFreq);\n    }\n    if (minTermFreq > 0) {\n      mlt.setMinTermFreq(minTermFreq);\n    }\n    this.query = query;\n    this.k = k;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link KNearestNeighborClassifier}.\n   *\n   * @param leafReader     the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param k              the no. of docs to select in the MLT results to find the nearest neighbor\n   * @param minDocsFreq    {@link MoreLikeThis#minDocFreq} parameter\n   * @param minTermFreq    {@link MoreLikeThis#minTermFreq} parameter\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, they can contain boosting indication e.g. title^10\n   */\n  public KNearestNeighborClassifier(LeafReader leafReader, Analyzer analyzer, Query query, int k, int minDocsFreq,\n                                    int minTermFreq, String classFieldName, String... textFieldNames) {\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.mlt = new MoreLikeThis(leafReader);\n    this.mlt.setAnalyzer(analyzer);\n    this.mlt.setFieldNames(textFieldNames);\n    this.indexSearcher = new IndexSearcher(leafReader);\n    if (minDocsFreq > 0) {\n      mlt.setMinDocFreq(minDocsFreq);\n    }\n    if (minTermFreq > 0) {\n      mlt.setMinTermFreq(minTermFreq);\n    }\n    this.query = query;\n    this.k = k;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#KNearestNeighborClassifier(LeafReader,Similarity,Analyzer,Query,int,int,int,String,String...).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#KNearestNeighborClassifier(LeafReader,Similarity,Analyzer,Query,int,int,int,String,String...).mjava","sourceNew":"  /**\n   * Creates a {@link KNearestNeighborClassifier}.\n   *\n   * @param leafReader     the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param similarity     the {@link Similarity} to be used by the underlying {@link IndexSearcher} or {@code null}\n   *                       (defaults to {@link org.apache.lucene.search.similarities.ClassicSimilarity})\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param k              the no. of docs to select in the MLT results to find the nearest neighbor\n   * @param minDocsFreq    {@link MoreLikeThis#minDocFreq} parameter\n   * @param minTermFreq    {@link MoreLikeThis#minTermFreq} parameter\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, they can contain boosting indication e.g. title^10\n   */\n  public KNearestNeighborClassifier(LeafReader leafReader, Similarity similarity, Analyzer analyzer, Query query, int k, int minDocsFreq,\n                                    int minTermFreq, String classFieldName, String... textFieldNames) {\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.mlt = new MoreLikeThis(leafReader);\n    this.mlt.setAnalyzer(analyzer);\n    this.mlt.setFieldNames(textFieldNames);\n    this.indexSearcher = new IndexSearcher(leafReader);\n    if (similarity != null) {\n      this.indexSearcher.setSimilarity(similarity);\n    } else {\n      this.indexSearcher.setSimilarity(new ClassicSimilarity());\n    }\n    if (minDocsFreq > 0) {\n      mlt.setMinDocFreq(minDocsFreq);\n    }\n    if (minTermFreq > 0) {\n      mlt.setMinTermFreq(minTermFreq);\n    }\n    this.query = query;\n    this.k = k;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link KNearestNeighborClassifier}.\n   *\n   * @param leafReader     the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param similarity     the {@link Similarity} to be used by the underlying {@link IndexSearcher} or {@code null}\n   *                       (defaults to {@link org.apache.lucene.search.similarities.DefaultSimilarity})\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param k              the no. of docs to select in the MLT results to find the nearest neighbor\n   * @param minDocsFreq    {@link MoreLikeThis#minDocFreq} parameter\n   * @param minTermFreq    {@link MoreLikeThis#minTermFreq} parameter\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, they can contain boosting indication e.g. title^10\n   */\n  public KNearestNeighborClassifier(LeafReader leafReader, Similarity similarity, Analyzer analyzer, Query query, int k, int minDocsFreq,\n                                    int minTermFreq, String classFieldName, String... textFieldNames) {\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.mlt = new MoreLikeThis(leafReader);\n    this.mlt.setAnalyzer(analyzer);\n    this.mlt.setFieldNames(textFieldNames);\n    this.indexSearcher = new IndexSearcher(leafReader);\n    if (similarity != null) {\n      this.indexSearcher.setSimilarity(similarity);\n    } else {\n      this.indexSearcher.setSimilarity(new DefaultSimilarity());\n    }\n    if (minDocsFreq > 0) {\n      mlt.setMinDocFreq(minDocsFreq);\n    }\n    if (minTermFreq > 0) {\n      mlt.setMinTermFreq(minTermFreq);\n    }\n    this.query = query;\n    this.k = k;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"444d4b906d0e3398f87d6a5c4967c508f11a7f0b","date":1466507434,"type":5,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#KNearestNeighborClassifier(IndexReader,Similarity,Analyzer,Query,int,int,int,String,String...).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#KNearestNeighborClassifier(LeafReader,Similarity,Analyzer,Query,int,int,int,String,String...).mjava","sourceNew":"  /**\n   * Creates a {@link KNearestNeighborClassifier}.\n   *\n   * @param indexReader     the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param similarity     the {@link Similarity} to be used by the underlying {@link IndexSearcher} or {@code null}\n   *                       (defaults to {@link org.apache.lucene.search.similarities.ClassicSimilarity})\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param k              the no. of docs to select in the MLT results to find the nearest neighbor\n   * @param minDocsFreq    {@link MoreLikeThis#minDocFreq} parameter\n   * @param minTermFreq    {@link MoreLikeThis#minTermFreq} parameter\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, they can contain boosting indication e.g. title^10\n   */\n  public KNearestNeighborClassifier(IndexReader indexReader, Similarity similarity, Analyzer analyzer, Query query, int k, int minDocsFreq,\n                                    int minTermFreq, String classFieldName, String... textFieldNames) {\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.mlt = new MoreLikeThis(indexReader);\n    this.mlt.setAnalyzer(analyzer);\n    this.mlt.setFieldNames(textFieldNames);\n    this.indexSearcher = new IndexSearcher(indexReader);\n    if (similarity != null) {\n      this.indexSearcher.setSimilarity(similarity);\n    } else {\n      this.indexSearcher.setSimilarity(new ClassicSimilarity());\n    }\n    if (minDocsFreq > 0) {\n      mlt.setMinDocFreq(minDocsFreq);\n    }\n    if (minTermFreq > 0) {\n      mlt.setMinTermFreq(minTermFreq);\n    }\n    this.query = query;\n    this.k = k;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link KNearestNeighborClassifier}.\n   *\n   * @param leafReader     the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param similarity     the {@link Similarity} to be used by the underlying {@link IndexSearcher} or {@code null}\n   *                       (defaults to {@link org.apache.lucene.search.similarities.ClassicSimilarity})\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param k              the no. of docs to select in the MLT results to find the nearest neighbor\n   * @param minDocsFreq    {@link MoreLikeThis#minDocFreq} parameter\n   * @param minTermFreq    {@link MoreLikeThis#minTermFreq} parameter\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, they can contain boosting indication e.g. title^10\n   */\n  public KNearestNeighborClassifier(LeafReader leafReader, Similarity similarity, Analyzer analyzer, Query query, int k, int minDocsFreq,\n                                    int minTermFreq, String classFieldName, String... textFieldNames) {\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.mlt = new MoreLikeThis(leafReader);\n    this.mlt.setAnalyzer(analyzer);\n    this.mlt.setFieldNames(textFieldNames);\n    this.indexSearcher = new IndexSearcher(leafReader);\n    if (similarity != null) {\n      this.indexSearcher.setSimilarity(similarity);\n    } else {\n      this.indexSearcher.setSimilarity(new ClassicSimilarity());\n    }\n    if (minDocsFreq > 0) {\n      mlt.setMinDocFreq(minDocsFreq);\n    }\n    if (minTermFreq > 0) {\n      mlt.setMinTermFreq(minTermFreq);\n    }\n    this.query = query;\n    this.k = k;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/KNearestNeighborClassifier#KNearestNeighborClassifier(LeafReader,Similarity,Analyzer,Query,int,int,int,String,String...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a {@link KNearestNeighborClassifier}.\n   *\n   * @param leafReader     the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param similarity     the {@link Similarity} to be used by the underlying {@link IndexSearcher} or {@code null}\n   *                       (defaults to {@link org.apache.lucene.search.similarities.ClassicSimilarity})\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param k              the no. of docs to select in the MLT results to find the nearest neighbor\n   * @param minDocsFreq    {@link MoreLikeThis#minDocFreq} parameter\n   * @param minTermFreq    {@link MoreLikeThis#minTermFreq} parameter\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, they can contain boosting indication e.g. title^10\n   */\n  public KNearestNeighborClassifier(LeafReader leafReader, Similarity similarity, Analyzer analyzer, Query query, int k, int minDocsFreq,\n                                    int minTermFreq, String classFieldName, String... textFieldNames) {\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.mlt = new MoreLikeThis(leafReader);\n    this.mlt.setAnalyzer(analyzer);\n    this.mlt.setFieldNames(textFieldNames);\n    this.indexSearcher = new IndexSearcher(leafReader);\n    if (similarity != null) {\n      this.indexSearcher.setSimilarity(similarity);\n    } else {\n      this.indexSearcher.setSimilarity(new ClassicSimilarity());\n    }\n    if (minDocsFreq > 0) {\n      mlt.setMinDocFreq(minDocsFreq);\n    }\n    if (minTermFreq > 0) {\n      mlt.setMinTermFreq(minTermFreq);\n    }\n    this.query = query;\n    this.k = k;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7161a776f504e35697e4bcb672862f679a4c2a9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["7161a776f504e35697e4bcb672862f679a4c2a9d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["81d0720146de53dd3a4a023d2a3d1089d86d748d","444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b"]},"commit2Childs":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7161a776f504e35697e4bcb672862f679a4c2a9d"],"7161a776f504e35697e4bcb672862f679a4c2a9d":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}