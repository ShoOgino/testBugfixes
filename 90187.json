{"path":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/prefix/Node#getSubCells(Shape).mjava","commits":[{"id":"b17c5c53627893d93f9261826cc6d9c447c5ee3a","date":1329777932,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/prefix/Node#getSubCells(Shape).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If that shape is a {@link org.apache.lucene.spatial.base.shape.Point} then it\n   * must call {@link #getSubCell(org.apache.lucene.spatial.base.shape.Point)};\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Node> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      return Collections.singleton(getSubCell((Point) shapeFilter));\n    }\n    Collection<Node> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n    List<Node> copy = new ArrayList<Node>(cells.size());//copy since cells contractually isn't modifiable\n    for (Node cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter, spatialPrefixTree.ctx);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      copy.add(cell);\n    }\n    cells = copy;\n    return cells;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/prefix/Node#getSubCells(Shape).mjava","pathOld":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/prefix/Node#getSubCells(Shape).mjava","sourceNew":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If that shape is a {@link org.apache.lucene.spatial.base.shape.Point} then it\n   * must call {@link #getSubCell(org.apache.lucene.spatial.base.shape.Point)};\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Node> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      return Collections.singleton(getSubCell((Point) shapeFilter));\n    }\n    Collection<Node> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n    List<Node> copy = new ArrayList<Node>(cells.size());//copy since cells contractually isn't modifiable\n    for (Node cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter, spatialPrefixTree.ctx);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      copy.add(cell);\n    }\n    cells = copy;\n    return cells;\n  }\n\n","sourceOld":"  /**\n   * Like {@link #getSubCells()} but with the results filtered by a shape. If that shape is a {@link org.apache.lucene.spatial.base.shape.Point} then it\n   * must call {@link #getSubCell(org.apache.lucene.spatial.base.shape.Point)};\n   * Precondition: Never called when getLevel() == maxLevel.\n   *\n   * @param shapeFilter an optional filter for the returned cells.\n   * @return A set of cells (no dups), sorted. Not Modifiable.\n   */\n  public Collection<Node> getSubCells(Shape shapeFilter) {\n    //Note: Higher-performing subclasses might override to consider the shape filter to generate fewer cells.\n    if (shapeFilter instanceof Point) {\n      return Collections.singleton(getSubCell((Point) shapeFilter));\n    }\n    Collection<Node> cells = getSubCells();\n\n    if (shapeFilter == null) {\n      return cells;\n    }\n    List<Node> copy = new ArrayList<Node>(cells.size());//copy since cells contractually isn't modifiable\n    for (Node cell : cells) {\n      SpatialRelation rel = cell.getShape().relate(shapeFilter, spatialPrefixTree.ctx);\n      if (rel == SpatialRelation.DISJOINT)\n        continue;\n      cell.shapeRel = rel;\n      copy.add(cell);\n    }\n    cells = copy;\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["b17c5c53627893d93f9261826cc6d9c447c5ee3a"],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b17c5c53627893d93f9261826cc6d9c447c5ee3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":[],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}