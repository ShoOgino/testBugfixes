{"path":"solr/core/src/test/org/apache/solr/update/UpdateLogTest#testApplyPartialUpdatesOnMultipleInPlaceUpdatesInSequence().mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/UpdateLogTest#testApplyPartialUpdatesOnMultipleInPlaceUpdatesInSequence().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  /**\n   * @see org.apache.solr.update.UpdateLog#applyPartialUpdates(BytesRef,long,long,SolrDocumentBase)\n   */\n  public void testApplyPartialUpdatesOnMultipleInPlaceUpdatesInSequence() {    \n    // Add a full update, two in-place updates and verify applying partial updates is working\n    ulogAdd(ulog, null, sdoc(\"id\", \"1\", \"title_s\", \"title1\", \"val1_i_dvo\", \"1\", \"_version_\", \"100\"));\n    ulogAdd(ulog, 100L, sdoc(\"id\", \"1\", \"price\", \"1000\", \"val1_i_dvo\", \"2\", \"_version_\", \"101\"));\n    ulogAdd(ulog, 101L, sdoc(\"id\", \"1\", \"val1_i_dvo\", \"3\", \"_version_\", \"102\"));\n\n    Object partialUpdate = ulog.lookup(DOC_1_INDEXED_ID);\n    SolrDocument partialDoc = RealTimeGetComponent.toSolrDoc((SolrInputDocument)((List)partialUpdate).get(4), \n        h.getCore().getLatestSchema());\n    long prevVersion = (Long)((List)partialUpdate).get(3);\n    long prevPointer = (Long)((List)partialUpdate).get(2);\n\n    assertEquals(3L, ((NumericDocValuesField)partialDoc.getFieldValue(\"val1_i_dvo\")).numericValue());\n    assertFalse(partialDoc.containsKey(\"title_s\"));\n\n    long returnVal = ulog.applyPartialUpdates(DOC_1_INDEXED_ID, prevPointer, prevVersion, null, partialDoc);\n\n    assertEquals(0, returnVal);\n    assertEquals(1000, Integer.parseInt(partialDoc.getFieldValue(\"price\").toString()));\n    assertEquals(3L, ((NumericDocValuesField)partialDoc.getFieldValue(\"val1_i_dvo\")).numericValue());\n    assertEquals(\"title1\", partialDoc.getFieldValue(\"title_s\"));\n\n    // Add a full update, commit, then two in-place updates, and verify that applying partial updates is working (since\n    // the prevTlog and prevTlog2 are retained after a commit\n    ulogCommit(ulog);\n    if (random().nextBoolean()) { // sometimes also try a second commit\n      ulogCommit(ulog);\n    }\n    ulogAdd(ulog, 102L, sdoc(\"id\", \"1\", \"price\", \"2000\", \"val1_i_dvo\", \"4\", \"_version_\", \"200\"));\n    ulogAdd(ulog, 200L, sdoc(\"id\", \"1\", \"val1_i_dvo\", \"5\", \"_version_\", \"201\"));\n\n    partialUpdate = ulog.lookup(DOC_1_INDEXED_ID);\n    partialDoc = RealTimeGetComponent.toSolrDoc((SolrInputDocument)((List)partialUpdate).get(4), h.getCore().getLatestSchema());\n    prevVersion = (Long)((List)partialUpdate).get(3);\n    prevPointer = (Long)((List)partialUpdate).get(2);\n\n    assertEquals(5L, ((NumericDocValuesField)partialDoc.getFieldValue(\"val1_i_dvo\")).numericValue());\n    assertFalse(partialDoc.containsKey(\"title_s\"));\n\n    returnVal = ulog.applyPartialUpdates(DOC_1_INDEXED_ID, prevPointer, prevVersion, null, partialDoc);\n\n    assertEquals(0, returnVal);\n    assertEquals(2000, Integer.parseInt(partialDoc.getFieldValue(\"price\").toString()));\n    assertEquals(5L, ((NumericDocValuesField)partialDoc.getFieldValue(\"val1_i_dvo\")).numericValue());\n    assertEquals(\"title1\", partialDoc.getFieldValue(\"title_s\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/UpdateLogTest#testApplyPartialUpdatesOnMultipleInPlaceUpdatesInSequence().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  /**\n   * @see org.apache.solr.update.UpdateLog#applyPartialUpdates(BytesRef,long,long,SolrDocumentBase)\n   */\n  public void testApplyPartialUpdatesOnMultipleInPlaceUpdatesInSequence() {    \n    // Add a full update, two in-place updates and verify applying partial updates is working\n    ulogAdd(ulog, null, sdoc(\"id\", \"1\", \"title_s\", \"title1\", \"val1_i_dvo\", \"1\", \"_version_\", \"100\"));\n    ulogAdd(ulog, 100L, sdoc(\"id\", \"1\", \"price\", \"1000\", \"val1_i_dvo\", \"2\", \"_version_\", \"101\"));\n    ulogAdd(ulog, 101L, sdoc(\"id\", \"1\", \"val1_i_dvo\", \"3\", \"_version_\", \"102\"));\n\n    Object partialUpdate = ulog.lookup(DOC_1_INDEXED_ID);\n    SolrDocument partialDoc = RealTimeGetComponent.toSolrDoc((SolrInputDocument)((List)partialUpdate).get(4), \n        h.getCore().getLatestSchema());\n    long prevVersion = (Long)((List)partialUpdate).get(3);\n    long prevPointer = (Long)((List)partialUpdate).get(2);\n\n    assertEquals(3L, ((NumericDocValuesField)partialDoc.getFieldValue(\"val1_i_dvo\")).numericValue());\n    assertFalse(partialDoc.containsKey(\"title_s\"));\n\n    long returnVal = ulog.applyPartialUpdates(DOC_1_INDEXED_ID, prevPointer, prevVersion, null, partialDoc);\n\n    assertEquals(0, returnVal);\n    assertEquals(1000, Integer.parseInt(partialDoc.getFieldValue(\"price\").toString()));\n    assertEquals(3L, ((NumericDocValuesField)partialDoc.getFieldValue(\"val1_i_dvo\")).numericValue());\n    assertEquals(\"title1\", partialDoc.getFieldValue(\"title_s\"));\n\n    // Add a full update, commit, then two in-place updates, and verify that applying partial updates is working (since\n    // the prevTlog and prevTlog2 are retained after a commit\n    ulogCommit(ulog);\n    if (random().nextBoolean()) { // sometimes also try a second commit\n      ulogCommit(ulog);\n    }\n    ulogAdd(ulog, 102L, sdoc(\"id\", \"1\", \"price\", \"2000\", \"val1_i_dvo\", \"4\", \"_version_\", \"200\"));\n    ulogAdd(ulog, 200L, sdoc(\"id\", \"1\", \"val1_i_dvo\", \"5\", \"_version_\", \"201\"));\n\n    partialUpdate = ulog.lookup(DOC_1_INDEXED_ID);\n    partialDoc = RealTimeGetComponent.toSolrDoc((SolrInputDocument)((List)partialUpdate).get(4), h.getCore().getLatestSchema());\n    prevVersion = (Long)((List)partialUpdate).get(3);\n    prevPointer = (Long)((List)partialUpdate).get(2);\n\n    assertEquals(5L, ((NumericDocValuesField)partialDoc.getFieldValue(\"val1_i_dvo\")).numericValue());\n    assertFalse(partialDoc.containsKey(\"title_s\"));\n\n    returnVal = ulog.applyPartialUpdates(DOC_1_INDEXED_ID, prevPointer, prevVersion, null, partialDoc);\n\n    assertEquals(0, returnVal);\n    assertEquals(2000, Integer.parseInt(partialDoc.getFieldValue(\"price\").toString()));\n    assertEquals(5L, ((NumericDocValuesField)partialDoc.getFieldValue(\"val1_i_dvo\")).numericValue());\n    assertEquals(\"title1\", partialDoc.getFieldValue(\"title_s\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["415bbbe7da8065dd3c477bdc3c703c6425622998"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}