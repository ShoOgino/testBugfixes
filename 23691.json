{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase#make1dmfIndexNA(String...).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase#make1dmfIndexNA(String...).mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase#make1dmfIndexNA(String...).mjava","sourceNew":"  // make 1 doc with multi valued & not analyzed field\n  protected void make1dmfIndexNA( String... values ) throws Exception {\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzerK).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n    for( String value: values ) {\n      doc.add( new Field( F, value, customType));\n      //doc.add( new Field( F, value, Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS ) );\n    }\n    writer.addDocument( doc );\n    writer.close();\n    if (reader != null) reader.close();\n    reader = IndexReader.open(dir);\n  }\n\n","sourceOld":"  // make 1 doc with multi valued & not analyzed field\n  protected void make1dmfIndexNA( String... values ) throws Exception {\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzerK).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n    for( String value: values ) {\n      doc.add( new Field( F, value, customType));\n      //doc.add( new Field( F, value, Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS ) );\n    }\n    writer.addDocument( doc );\n    writer.close();\n    if (reader != null) reader.close();\n    reader = IndexReader.open(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase#make1dmfIndexNA(String...).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase#make1dmfIndexNA(String...).mjava","sourceNew":"  // make 1 doc with multi valued & not analyzed field\n  protected void make1dmfIndexNA( String... values ) throws Exception {\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzerK).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n    for( String value: values ) {\n      doc.add( new Field( F, value, customType));\n      //doc.add( new Field( F, value, Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS ) );\n    }\n    writer.addDocument( doc );\n    writer.close();\n    if (reader != null) reader.close();\n    reader = DirectoryReader.open(dir);\n  }\n\n","sourceOld":"  // make 1 doc with multi valued & not analyzed field\n  protected void make1dmfIndexNA( String... values ) throws Exception {\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzerK).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n    for( String value: values ) {\n      doc.add( new Field( F, value, customType));\n      //doc.add( new Field( F, value, Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS ) );\n    }\n    writer.addDocument( doc );\n    writer.close();\n    if (reader != null) reader.close();\n    reader = IndexReader.open(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase#make1dmfIndexNA(String...).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase#make1dmfIndexNA(String...).mjava","sourceNew":"  // make 1 doc with multi valued & not analyzed field\n  protected void make1dmfIndexNA( String... values ) throws Exception {\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzerK).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n    for( String value: values ) {\n      doc.add( new Field( F, value, customType));\n      //doc.add( new Field( F, value, Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS ) );\n    }\n    writer.addDocument( doc );\n    writer.shutdown();\n    if (reader != null) reader.close();\n    reader = DirectoryReader.open(dir);\n  }\n\n","sourceOld":"  // make 1 doc with multi valued & not analyzed field\n  protected void make1dmfIndexNA( String... values ) throws Exception {\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzerK).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n    for( String value: values ) {\n      doc.add( new Field( F, value, customType));\n      //doc.add( new Field( F, value, Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS ) );\n    }\n    writer.addDocument( doc );\n    writer.close();\n    if (reader != null) reader.close();\n    reader = DirectoryReader.open(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase#make1dmfIndexNA(String...).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/AbstractTestCase#make1dmfIndexNA(String...).mjava","sourceNew":"  // make 1 doc with multi valued & not analyzed field\n  protected void make1dmfIndexNA( String... values ) throws Exception {\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(analyzerK).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n    for( String value: values ) {\n      doc.add( new Field( F, value, customType));\n      //doc.add( new Field( F, value, Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS ) );\n    }\n    writer.addDocument( doc );\n    writer.close();\n    if (reader != null) reader.close();\n    reader = DirectoryReader.open(dir);\n  }\n\n","sourceOld":"  // make 1 doc with multi valued & not analyzed field\n  protected void make1dmfIndexNA( String... values ) throws Exception {\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzerK).setOpenMode(OpenMode.CREATE));\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorOffsets(true);\n    customType.setStoreTermVectorPositions(true);\n    for( String value: values ) {\n      doc.add( new Field( F, value, customType));\n      //doc.add( new Field( F, value, Store.YES, Index.NOT_ANALYZED, TermVector.WITH_POSITIONS_OFFSETS ) );\n    }\n    writer.addDocument( doc );\n    writer.shutdown();\n    if (reader != null) reader.close();\n    reader = DirectoryReader.open(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}