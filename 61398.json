{"path":"contrib/analyzers/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest#test().mjava","commits":[{"id":"8ed61ec7f37eae0b7b6545998048315202379e05","date":1197899746,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TokenOffsetPayloadTokenFilter nptf = new TokenOffsetPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    Token tok = new Token();\n    int count = 0;\n    while ((tok = nptf.next(tok)) != null){\n      assertTrue(\"tok is null and it shouldn't be\", tok != null);\n      Payload pay = tok.getPayload();\n      assertTrue(\"pay is null and it shouldn't be\", pay != null);\n      byte [] data = pay.getData();\n      int start = PayloadHelper.decodeInt(data, 0);\n      assertTrue(start + \" does not equal: \" + tok.startOffset(), start == tok.startOffset());\n      int end = PayloadHelper.decodeInt(data, 4);\n      assertTrue(end + \" does not equal: \" + tok.endOffset(), end == tok.endOffset());\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest#test().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TokenOffsetPayloadTokenFilter nptf = new TokenOffsetPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    int count = 0;\n    final Token reusableToken = new Token();\n    for (Token nextToken = nptf.next(reusableToken); nextToken != null; nextToken = nptf.next(reusableToken)) {\n      assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n      Payload pay = nextToken.getPayload();\n      assertTrue(\"pay is null and it shouldn't be\", pay != null);\n      byte [] data = pay.getData();\n      int start = PayloadHelper.decodeInt(data, 0);\n      assertTrue(start + \" does not equal: \" + nextToken.startOffset(), start == nextToken.startOffset());\n      int end = PayloadHelper.decodeInt(data, 4);\n      assertTrue(end + \" does not equal: \" + nextToken.endOffset(), end == nextToken.endOffset());\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TokenOffsetPayloadTokenFilter nptf = new TokenOffsetPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    Token tok = new Token();\n    int count = 0;\n    while ((tok = nptf.next(tok)) != null){\n      assertTrue(\"tok is null and it shouldn't be\", tok != null);\n      Payload pay = tok.getPayload();\n      assertTrue(\"pay is null and it shouldn't be\", pay != null);\n      byte [] data = pay.getData();\n      int start = PayloadHelper.decodeInt(data, 0);\n      assertTrue(start + \" does not equal: \" + tok.startOffset(), start == tok.startOffset());\n      int end = PayloadHelper.decodeInt(data, 4);\n      assertTrue(end + \" does not equal: \" + tok.endOffset(), end == tok.endOffset());\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest#test().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TokenOffsetPayloadTokenFilter nptf = new TokenOffsetPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    int count = 0;\n    final Token reusableToken = new Token();\n    for (Token nextToken = nptf.next(reusableToken); nextToken != null; nextToken = nptf.next(reusableToken)) {\n      assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n      Payload pay = nextToken.getPayload();\n      assertTrue(\"pay is null and it shouldn't be\", pay != null);\n      byte [] data = pay.getData();\n      int start = PayloadHelper.decodeInt(data, 0);\n      assertTrue(start + \" does not equal: \" + nextToken.startOffset(), start == nextToken.startOffset());\n      int end = PayloadHelper.decodeInt(data, 4);\n      assertTrue(end + \" does not equal: \" + nextToken.endOffset(), end == nextToken.endOffset());\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    String test = \"The quick red fox jumped over the lazy brown dogs\";\n\n    TokenOffsetPayloadTokenFilter nptf = new TokenOffsetPayloadTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    int count = 0;\n    final Token reusableToken = new Token();\n    for (Token nextToken = nptf.next(reusableToken); nextToken != null; nextToken = nptf.next(reusableToken)) {\n      assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n      Payload pay = nextToken.getPayload();\n      assertTrue(\"pay is null and it shouldn't be\", pay != null);\n      byte [] data = pay.getData();\n      int start = PayloadHelper.decodeInt(data, 0);\n      assertTrue(start + \" does not equal: \" + nextToken.startOffset(), start == nextToken.startOffset());\n      int end = PayloadHelper.decodeInt(data, 4);\n      assertTrue(end + \" does not equal: \" + nextToken.endOffset(), end == nextToken.endOffset());\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 10, count == 10);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["8ed61ec7f37eae0b7b6545998048315202379e05"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8ed61ec7f37eae0b7b6545998048315202379e05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ed61ec7f37eae0b7b6545998048315202379e05"],"8ed61ec7f37eae0b7b6545998048315202379e05":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}