{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/WordnetSynonymParser#parse(Reader).mjava","commits":[{"id":"85f3a2d749715373feb8529516e92d3538103525","date":1379624134,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/WordnetSynonymParser#parse(Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/WordnetSynonymParser#add(Reader).mjava","sourceNew":"  @Override\n  public void parse(Reader in) throws IOException, ParseException {\n    LineNumberReader br = new LineNumberReader(in);\n    try {\n      String line = null;\n      String lastSynSetID = \"\";\n      CharsRef synset[] = new CharsRef[8];\n      int synsetSize = 0;\n      \n      while ((line = br.readLine()) != null) {\n        String synSetID = line.substring(2, 11);\n\n        if (!synSetID.equals(lastSynSetID)) {\n          addInternal(synset, synsetSize);\n          synsetSize = 0;\n        }\n\n        if (synset.length <= synsetSize+1) {\n          CharsRef larger[] = new CharsRef[synset.length * 2];\n          System.arraycopy(synset, 0, larger, 0, synsetSize);\n          synset = larger;\n        }\n        \n        synset[synsetSize] = parseSynonym(line, synset[synsetSize]);\n        synsetSize++;\n        lastSynSetID = synSetID;\n      }\n      \n      // final synset in the file\n      addInternal(synset, synsetSize);\n    } catch (IllegalArgumentException e) {\n      ParseException ex = new ParseException(\"Invalid synonym rule at line \" + br.getLineNumber(), 0);\n      ex.initCause(e);\n      throw ex;\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  public void add(Reader in) throws IOException, ParseException {\n    LineNumberReader br = new LineNumberReader(in);\n    try {\n      String line = null;\n      String lastSynSetID = \"\";\n      CharsRef synset[] = new CharsRef[8];\n      int synsetSize = 0;\n      \n      while ((line = br.readLine()) != null) {\n        String synSetID = line.substring(2, 11);\n\n        if (!synSetID.equals(lastSynSetID)) {\n          addInternal(synset, synsetSize);\n          synsetSize = 0;\n        }\n\n        if (synset.length <= synsetSize+1) {\n          CharsRef larger[] = new CharsRef[synset.length * 2];\n          System.arraycopy(synset, 0, larger, 0, synsetSize);\n          synset = larger;\n        }\n        \n        synset[synsetSize] = parseSynonym(line, synset[synsetSize]);\n        synsetSize++;\n        lastSynSetID = synSetID;\n      }\n      \n      // final synset in the file\n      addInternal(synset, synsetSize);\n    } catch (IllegalArgumentException e) {\n      ParseException ex = new ParseException(\"Invalid synonym rule at line \" + br.getLineNumber(), 0);\n      ex.initCause(e);\n      throw ex;\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/WordnetSynonymParser#parse(Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/WordnetSynonymParser#parse(Reader).mjava","sourceNew":"  @Override\n  public void parse(Reader in) throws IOException, ParseException {\n    LineNumberReader br = new LineNumberReader(in);\n    try {\n      String line = null;\n      String lastSynSetID = \"\";\n      CharsRef synset[] = new CharsRef[8];\n      int synsetSize = 0;\n      \n      while ((line = br.readLine()) != null) {\n        String synSetID = line.substring(2, 11);\n\n        if (!synSetID.equals(lastSynSetID)) {\n          addInternal(synset, synsetSize);\n          synsetSize = 0;\n        }\n\n        if (synset.length <= synsetSize+1) {\n          synset = Arrays.copyOf(synset, synset.length * 2);\n        }\n        \n        synset[synsetSize] = parseSynonym(line, new CharsRefBuilder());\n        synsetSize++;\n        lastSynSetID = synSetID;\n      }\n      \n      // final synset in the file\n      addInternal(synset, synsetSize);\n    } catch (IllegalArgumentException e) {\n      ParseException ex = new ParseException(\"Invalid synonym rule at line \" + br.getLineNumber(), 0);\n      ex.initCause(e);\n      throw ex;\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void parse(Reader in) throws IOException, ParseException {\n    LineNumberReader br = new LineNumberReader(in);\n    try {\n      String line = null;\n      String lastSynSetID = \"\";\n      CharsRef synset[] = new CharsRef[8];\n      int synsetSize = 0;\n      \n      while ((line = br.readLine()) != null) {\n        String synSetID = line.substring(2, 11);\n\n        if (!synSetID.equals(lastSynSetID)) {\n          addInternal(synset, synsetSize);\n          synsetSize = 0;\n        }\n\n        if (synset.length <= synsetSize+1) {\n          CharsRef larger[] = new CharsRef[synset.length * 2];\n          System.arraycopy(synset, 0, larger, 0, synsetSize);\n          synset = larger;\n        }\n        \n        synset[synsetSize] = parseSynonym(line, synset[synsetSize]);\n        synsetSize++;\n        lastSynSetID = synSetID;\n      }\n      \n      // final synset in the file\n      addInternal(synset, synsetSize);\n    } catch (IllegalArgumentException e) {\n      ParseException ex = new ParseException(\"Invalid synonym rule at line \" + br.getLineNumber(), 0);\n      ex.initCause(e);\n      throw ex;\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/WordnetSynonymParser#parse(Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/WordnetSynonymParser#parse(Reader).mjava","sourceNew":"  @Override\n  public void parse(Reader in) throws IOException, ParseException {\n    LineNumberReader br = new LineNumberReader(in);\n    try {\n      String line = null;\n      String lastSynSetID = \"\";\n      CharsRef synset[] = new CharsRef[8];\n      int synsetSize = 0;\n      \n      while ((line = br.readLine()) != null) {\n        String synSetID = line.substring(2, 11);\n\n        if (!synSetID.equals(lastSynSetID)) {\n          addInternal(synset, synsetSize);\n          synsetSize = 0;\n        }\n\n        synset = ArrayUtil.grow(synset, synsetSize + 1);\n        synset[synsetSize] = parseSynonym(line, new CharsRefBuilder());\n        synsetSize++;\n        lastSynSetID = synSetID;\n      }\n      \n      // final synset in the file\n      addInternal(synset, synsetSize);\n    } catch (IllegalArgumentException e) {\n      ParseException ex = new ParseException(\"Invalid synonym rule at line \" + br.getLineNumber(), 0);\n      ex.initCause(e);\n      throw ex;\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void parse(Reader in) throws IOException, ParseException {\n    LineNumberReader br = new LineNumberReader(in);\n    try {\n      String line = null;\n      String lastSynSetID = \"\";\n      CharsRef synset[] = new CharsRef[8];\n      int synsetSize = 0;\n      \n      while ((line = br.readLine()) != null) {\n        String synSetID = line.substring(2, 11);\n\n        if (!synSetID.equals(lastSynSetID)) {\n          addInternal(synset, synsetSize);\n          synsetSize = 0;\n        }\n\n        if (synset.length <= synsetSize+1) {\n          synset = Arrays.copyOf(synset, synset.length * 2);\n        }\n        \n        synset[synsetSize] = parseSynonym(line, new CharsRefBuilder());\n        synsetSize++;\n        lastSynSetID = synSetID;\n      }\n      \n      // final synset in the file\n      addInternal(synset, synsetSize);\n    } catch (IllegalArgumentException e) {\n      ParseException ex = new ParseException(\"Invalid synonym rule at line \" + br.getLineNumber(), 0);\n      ex.initCause(e);\n      throw ex;\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/WordnetSynonymParser#parse(Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/WordnetSynonymParser#parse(Reader).mjava","sourceNew":"  @Override\n  public void parse(Reader in) throws IOException, ParseException {\n    LineNumberReader br = new LineNumberReader(in);\n    try {\n      String line = null;\n      String lastSynSetID = \"\";\n      CharsRef synset[] = new CharsRef[8];\n      int synsetSize = 0;\n      \n      while ((line = br.readLine()) != null) {\n        String synSetID = line.substring(2, 11);\n\n        if (!synSetID.equals(lastSynSetID)) {\n          addInternal(synset, synsetSize);\n          synsetSize = 0;\n        }\n\n        synset = ArrayUtil.grow(synset, synsetSize + 1);\n        synset[synsetSize] = parseSynonym(line, new CharsRefBuilder());\n        synsetSize++;\n        lastSynSetID = synSetID;\n      }\n      \n      // final synset in the file\n      addInternal(synset, synsetSize);\n    } catch (IllegalArgumentException e) {\n      ParseException ex = new ParseException(\"Invalid synonym rule at line \" + br.getLineNumber(), 0);\n      ex.initCause(e);\n      throw ex;\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void parse(Reader in) throws IOException, ParseException {\n    LineNumberReader br = new LineNumberReader(in);\n    try {\n      String line = null;\n      String lastSynSetID = \"\";\n      CharsRef synset[] = new CharsRef[8];\n      int synsetSize = 0;\n      \n      while ((line = br.readLine()) != null) {\n        String synSetID = line.substring(2, 11);\n\n        if (!synSetID.equals(lastSynSetID)) {\n          addInternal(synset, synsetSize);\n          synsetSize = 0;\n        }\n\n        if (synset.length <= synsetSize+1) {\n          synset = Arrays.copyOf(synset, synset.length * 2);\n        }\n        \n        synset[synsetSize] = parseSynonym(line, new CharsRefBuilder());\n        synsetSize++;\n        lastSynSetID = synSetID;\n      }\n      \n      // final synset in the file\n      addInternal(synset, synsetSize);\n    } catch (IllegalArgumentException e) {\n      ParseException ex = new ParseException(\"Invalid synonym rule at line \" + br.getLineNumber(), 0);\n      ex.initCause(e);\n      throw ex;\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/WordnetSynonymParser#parse(Reader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/WordnetSynonymParser#parse(Reader).mjava","sourceNew":"  @Override\n  public void parse(Reader in) throws IOException, ParseException {\n    LineNumberReader br = new LineNumberReader(in);\n    try {\n      String line = null;\n      String lastSynSetID = \"\";\n      CharsRef synset[] = new CharsRef[8];\n      int synsetSize = 0;\n      \n      while ((line = br.readLine()) != null) {\n        String synSetID = line.substring(2, 11);\n\n        if (!synSetID.equals(lastSynSetID)) {\n          addInternal(synset, synsetSize);\n          synsetSize = 0;\n        }\n\n        synset = ArrayUtil.grow(synset, synsetSize + 1);\n        synset[synsetSize] = parseSynonym(line, new CharsRefBuilder());\n        synsetSize++;\n        lastSynSetID = synSetID;\n      }\n      \n      // final synset in the file\n      addInternal(synset, synsetSize);\n    } catch (IllegalArgumentException e) {\n      ParseException ex = new ParseException(\"Invalid synonym rule at line \" + br.getLineNumber(), 0);\n      ex.initCause(e);\n      throw ex;\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void parse(Reader in) throws IOException, ParseException {\n    LineNumberReader br = new LineNumberReader(in);\n    try {\n      String line = null;\n      String lastSynSetID = \"\";\n      CharsRef synset[] = new CharsRef[8];\n      int synsetSize = 0;\n      \n      while ((line = br.readLine()) != null) {\n        String synSetID = line.substring(2, 11);\n\n        if (!synSetID.equals(lastSynSetID)) {\n          addInternal(synset, synsetSize);\n          synsetSize = 0;\n        }\n\n        if (synset.length <= synsetSize+1) {\n          synset = Arrays.copyOf(synset, synset.length * 2);\n        }\n        \n        synset[synsetSize] = parseSynonym(line, new CharsRefBuilder());\n        synsetSize++;\n        lastSynSetID = synSetID;\n      }\n      \n      // final synset in the file\n      addInternal(synset, synsetSize);\n    } catch (IllegalArgumentException e) {\n      ParseException ex = new ParseException(\"Invalid synonym rule at line \" + br.getLineNumber(), 0);\n      ex.initCause(e);\n      throw ex;\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","9798d0818e7a880546802b509792d3f3d57babd2"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["85f3a2d749715373feb8529516e92d3538103525"],"9798d0818e7a880546802b509792d3f3d57babd2":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"85f3a2d749715373feb8529516e92d3538103525":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85f3a2d749715373feb8529516e92d3538103525"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"85f3a2d749715373feb8529516e92d3538103525":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}