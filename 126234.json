{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/CompactLabelToOrdinal#addLabel(FacetLabel,int).mjava","commits":[{"id":"5cad50ed6659649a0edef71b8cf56280b0bdadd7","date":1385496862,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/CompactLabelToOrdinal#addLabel(FacetLabel,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/cl2o/CompactLabelToOrdinal#addLabel(FacetLabel,int).mjava","sourceNew":"  @Override\n  public void addLabel(FacetLabel label, int ordinal) {\n    if (collisionMap.size() > threshold) {\n      grow();\n    }\n\n    int hash = CompactLabelToOrdinal.stringHashCode(label);\n    for (int i = 0; i < this.hashArrays.length; i++) {\n      if (addLabel(this.hashArrays[i], label, hash, ordinal)) {\n        return;\n      }\n    }\n\n    int prevVal = collisionMap.addLabel(label, hash, ordinal);\n    if (prevVal != ordinal) {\n      throw new IllegalArgumentException(\"Label already exists: \" + label.toString('/') + \" prev ordinal \" + prevVal);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addLabel(FacetLabel label, int ordinal) {\n    if (collisionMap.size() > threshold) {\n      grow();\n    }\n\n    int hash = CompactLabelToOrdinal.stringHashCode(label);\n    for (int i = 0; i < this.hashArrays.length; i++) {\n      if (addLabel(this.hashArrays[i], label, hash, ordinal)) {\n        return;\n      }\n    }\n\n    int prevVal = collisionMap.addLabel(label, hash, ordinal);\n    if (prevVal != ordinal) {\n      throw new IllegalArgumentException(\"Label already exists: \" + label.toString('/') + \" prev ordinal \" + prevVal);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe9946d3cd818d329255e4c325597ac3480503e","date":1385580921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/CompactLabelToOrdinal#addLabel(FacetLabel,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/CompactLabelToOrdinal#addLabel(FacetLabel,int).mjava","sourceNew":"  @Override\n  public void addLabel(FacetLabel label, int ordinal) {\n    if (collisionMap.size() > threshold) {\n      grow();\n    }\n\n    int hash = CompactLabelToOrdinal.stringHashCode(label);\n    for (int i = 0; i < this.hashArrays.length; i++) {\n      if (addLabel(this.hashArrays[i], label, hash, ordinal)) {\n        return;\n      }\n    }\n\n    int prevVal = collisionMap.addLabel(label, hash, ordinal);\n    if (prevVal != ordinal) {\n      throw new IllegalArgumentException(\"Label already exists: \" + label + \" prev ordinal \" + prevVal);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addLabel(FacetLabel label, int ordinal) {\n    if (collisionMap.size() > threshold) {\n      grow();\n    }\n\n    int hash = CompactLabelToOrdinal.stringHashCode(label);\n    for (int i = 0; i < this.hashArrays.length; i++) {\n      if (addLabel(this.hashArrays[i], label, hash, ordinal)) {\n        return;\n      }\n    }\n\n    int prevVal = collisionMap.addLabel(label, hash, ordinal);\n    if (prevVal != ordinal) {\n      throw new IllegalArgumentException(\"Label already exists: \" + label.toString('/') + \" prev ordinal \" + prevVal);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/CompactLabelToOrdinal#addLabel(FacetLabel,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addLabel(FacetLabel label, int ordinal) {\n    if (collisionMap.size() > threshold) {\n      grow();\n    }\n\n    int hash = CompactLabelToOrdinal.stringHashCode(label);\n    for (int i = 0; i < this.hashArrays.length; i++) {\n      if (addLabel(this.hashArrays[i], label, hash, ordinal)) {\n        return;\n      }\n    }\n\n    int prevVal = collisionMap.addLabel(label, hash, ordinal);\n    if (prevVal != ordinal) {\n      throw new IllegalArgumentException(\"Label already exists: \" + label + \" prev ordinal \" + prevVal);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ae0982c0457fa3cfe0cda93a327c573fbe6f874","date":1507039114,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/CompactLabelToOrdinal#addLabel(FacetLabel,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addLabel(FacetLabel label, int ordinal) {\n    if (collisionMap.size() > threshold) {\n      grow();\n    }\n\n    int hash = CompactLabelToOrdinal.stringHashCode(label);\n    for (int i = 0; i < this.hashArrays.length; i++) {\n      if (addLabel(this.hashArrays[i], label, hash, ordinal)) {\n        return;\n      }\n    }\n\n    int prevVal = collisionMap.addLabel(label, hash, ordinal);\n    if (prevVal != ordinal) {\n      throw new IllegalArgumentException(\"Label already exists: \" + label + \" prev ordinal \" + prevVal);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ae0982c0457fa3cfe0cda93a327c573fbe6f874":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bbe9946d3cd818d329255e4c325597ac3480503e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ae0982c0457fa3cfe0cda93a327c573fbe6f874"],"bbe9946d3cd818d329255e4c325597ac3480503e":["5cad50ed6659649a0edef71b8cf56280b0bdadd7"]},"commit2Childs":{"2ae0982c0457fa3cfe0cda93a327c573fbe6f874":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5cad50ed6659649a0edef71b8cf56280b0bdadd7","3cc728b07df73b197e6d940d27f9b08b63918f13"],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["bbe9946d3cd818d329255e4c325597ac3480503e"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["2ae0982c0457fa3cfe0cda93a327c573fbe6f874"],"bbe9946d3cd818d329255e4c325597ac3480503e":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}