{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTDirectAddressing#measureFSTOversizing(String).mjava","commits":[{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":1,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTDirectAddressing#measureFSTOversizing(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#measureFSTOversizing(String).mjava","sourceNew":"  private static void measureFSTOversizing(String wordsFilePath) throws Exception {\n    final int MAX_NUM_WORDS = 1000000;\n\n    // Read real english words.\n    List<BytesRef> wordList = new ArrayList<>();\n    try (BufferedReader reader = Files.newBufferedReader(Paths.get(wordsFilePath))) {\n      while (wordList.size() < MAX_NUM_WORDS) {\n        String word = reader.readLine();\n        if (word == null) {\n          break;\n        }\n        wordList.add(new BytesRef(word));\n      }\n    }\n    Collections.sort(wordList);\n\n    // Disable direct addressing and measure the FST size.\n    FSTCompiler<Object> fstCompiler = createFSTCompiler(-1f);\n    FST<Object> fst = buildFST(wordList, fstCompiler);\n    long ramBytesUsedNoDirectAddressing = fst.ramBytesUsed();\n\n    // Enable direct addressing and measure the FST size.\n    fstCompiler = createFSTCompiler(FSTCompiler.DIRECT_ADDRESSING_MAX_OVERSIZING_FACTOR);\n    fst = buildFST(wordList, fstCompiler);\n    long ramBytesUsed = fst.ramBytesUsed();\n\n    // Compute the size increase in percents.\n    double directAddressingMemoryIncreasePercent = ((double) ramBytesUsed / ramBytesUsedNoDirectAddressing - 1) * 100;\n\n    printStats(fstCompiler, ramBytesUsed, directAddressingMemoryIncreasePercent);\n  }\n\n","sourceOld":"  private static void measureFSTOversizing(String wordsFilePath) throws Exception {\n    final int MAX_NUM_WORDS = 1000000;\n\n    // Read real english words.\n    List<BytesRef> wordList = new ArrayList<>();\n    try (BufferedReader reader = Files.newBufferedReader(Paths.get(wordsFilePath))) {\n      while (wordList.size() < MAX_NUM_WORDS) {\n        String word = reader.readLine();\n        if (word == null) {\n          break;\n        }\n        wordList.add(new BytesRef(word));\n      }\n    }\n    Collections.sort(wordList);\n\n    // Disable direct addressing and measure the FST size.\n    Builder<Object> builder = createBuilder(-1f);\n    FST<Object> fst = buildFST(wordList, builder);\n    long ramBytesUsedNoDirectAddressing = fst.ramBytesUsed();\n\n    // Enable direct addressing and measure the FST size.\n    builder = createBuilder(Builder.DIRECT_ADDRESSING_MAX_OVERSIZING_FACTOR);\n    fst = buildFST(wordList, builder);\n    long ramBytesUsed = fst.ramBytesUsed();\n\n    // Compute the size increase in percents.\n    double directAddressingMemoryIncreasePercent = ((double) ramBytesUsed / ramBytesUsedNoDirectAddressing - 1) * 100;\n\n    printStats(builder, ramBytesUsed, directAddressingMemoryIncreasePercent);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTDirectAddressing#measureFSTOversizing(String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFstDirectAddressing#measureFSTOversizing(String).mjava","sourceNew":"  private static void measureFSTOversizing(String wordsFilePath) throws Exception {\n    final int MAX_NUM_WORDS = 1000000;\n\n    // Read real english words.\n    List<BytesRef> wordList = new ArrayList<>();\n    try (BufferedReader reader = Files.newBufferedReader(Paths.get(wordsFilePath))) {\n      while (wordList.size() < MAX_NUM_WORDS) {\n        String word = reader.readLine();\n        if (word == null) {\n          break;\n        }\n        wordList.add(new BytesRef(word));\n      }\n    }\n    Collections.sort(wordList);\n\n    // Disable direct addressing and measure the FST size.\n    FSTCompiler<Object> fstCompiler = createFSTCompiler(-1f);\n    FST<Object> fst = buildFST(wordList, fstCompiler);\n    long ramBytesUsedNoDirectAddressing = fst.ramBytesUsed();\n\n    // Enable direct addressing and measure the FST size.\n    fstCompiler = createFSTCompiler(FSTCompiler.DIRECT_ADDRESSING_MAX_OVERSIZING_FACTOR);\n    fst = buildFST(wordList, fstCompiler);\n    long ramBytesUsed = fst.ramBytesUsed();\n\n    // Compute the size increase in percents.\n    double directAddressingMemoryIncreasePercent = ((double) ramBytesUsed / ramBytesUsedNoDirectAddressing - 1) * 100;\n\n    printStats(fstCompiler, ramBytesUsed, directAddressingMemoryIncreasePercent);\n  }\n\n","sourceOld":"  private static void measureFSTOversizing(String wordsFilePath) throws Exception {\n    final int MAX_NUM_WORDS = 1000000;\n\n    // Read real english words.\n    List<BytesRef> wordList = new ArrayList<>();\n    try (BufferedReader reader = Files.newBufferedReader(Paths.get(wordsFilePath))) {\n      while (wordList.size() < MAX_NUM_WORDS) {\n        String word = reader.readLine();\n        if (word == null) {\n          break;\n        }\n        wordList.add(new BytesRef(word));\n      }\n    }\n    Collections.sort(wordList);\n\n    // Disable direct addressing and measure the FST size.\n    Builder<Object> builder = createBuilder(-1f);\n    FST<Object> fst = buildFST(wordList, builder);\n    long ramBytesUsedNoDirectAddressing = fst.ramBytesUsed();\n\n    // Enable direct addressing and measure the FST size.\n    builder = createBuilder(Builder.DIRECT_ADDRESSING_MAX_OVERSIZING_FACTOR);\n    fst = buildFST(wordList, builder);\n    long ramBytesUsed = fst.ramBytesUsed();\n\n    // Compute the size increase in percents.\n    double directAddressingMemoryIncreasePercent = ((double) ramBytesUsed / ramBytesUsedNoDirectAddressing - 1) * 100;\n\n    printStats(builder, ramBytesUsed, directAddressingMemoryIncreasePercent);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}