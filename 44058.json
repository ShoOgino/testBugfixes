{"path":"src/java/org/apache/lucene/search/Similarity#floatToByte(float).mjava","commits":[{"id":"14aec0a40da5a9c26f8752701a5aa10f78f5017d","date":1027969875,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#floatToByte(float).mjava","pathOld":"/dev/null","sourceNew":"  private static byte floatToByte(float f) {\n    if (f < 0.0f)                                 // round negatives up to zero\n      f = 0.0f;\n\n    if (f == 0.0f)                                // zero is a special case\n      return 0;\n\n    int bits = Float.floatToIntBits(f);           // parse float into parts\n    int mantissa = (bits & 0xffffff) >> 21;\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\n\n    if (exponent > 31) {                          // overflow: use max value\n      exponent = 31;\n      mantissa = 7;\n    }\n\n    if (exponent < 1) {                           // underflow: use min value\n      exponent = 1;\n      mantissa = 0;\n    }\n\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6ae14c6ffa67b4f3db357560ff994e16336e997","date":1043433207,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#floatToByte(float).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#floatToByte(float).mjava","sourceNew":"  private static byte floatToByte(float f) {\n    if (f < 0.0f)                                 // round negatives up to zero\n      f = 0.0f;\n\n    if (f == 0.0f)                                // zero is a special case\n      return 0;\n\n    int bits = Float.floatToIntBits(f);           // parse float into parts\n    int mantissa = (bits & 0xffffff) >> 21;\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\n\n    if (exponent > 31) {                          // overflow: use max value\n      exponent = 31;\n      mantissa = 7;\n    }\n\n    if (exponent < 0) {                           // underflow: use min value\n      exponent = 0;\n      mantissa = 1;\n    }\n\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\n   }\n\n","sourceOld":"  private static byte floatToByte(float f) {\n    if (f < 0.0f)                                 // round negatives up to zero\n      f = 0.0f;\n\n    if (f == 0.0f)                                // zero is a special case\n      return 0;\n\n    int bits = Float.floatToIntBits(f);           // parse float into parts\n    int mantissa = (bits & 0xffffff) >> 21;\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\n\n    if (exponent > 31) {                          // overflow: use max value\n      exponent = 31;\n      mantissa = 7;\n    }\n\n    if (exponent < 1) {                           // underflow: use min value\n      exponent = 1;\n      mantissa = 0;\n    }\n\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a236b7fed4411660186d60e31936b14fd52f003c","date":1132978628,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/Similarity#floatToByte(float).mjava","sourceNew":null,"sourceOld":"  private static byte floatToByte(float f) {\n    if (f < 0.0f)                                 // round negatives up to zero\n      f = 0.0f;\n\n    if (f == 0.0f)                                // zero is a special case\n      return 0;\n\n    int bits = Float.floatToIntBits(f);           // parse float into parts\n    int mantissa = (bits & 0xffffff) >> 21;\n    int exponent = (((bits >> 24) & 0x7f) - 63) + 15;\n\n    if (exponent > 31) {                          // overflow: use max value\n      exponent = 31;\n      mantissa = 7;\n    }\n\n    if (exponent < 0) {                           // underflow: use min value\n      exponent = 0;\n      mantissa = 1;\n    }\n\n    return (byte)((exponent << 3) | mantissa);    // pack into a byte\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"14aec0a40da5a9c26f8752701a5aa10f78f5017d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f6ae14c6ffa67b4f3db357560ff994e16336e997":["14aec0a40da5a9c26f8752701a5aa10f78f5017d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a236b7fed4411660186d60e31936b14fd52f003c":["f6ae14c6ffa67b4f3db357560ff994e16336e997"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a236b7fed4411660186d60e31936b14fd52f003c"]},"commit2Childs":{"14aec0a40da5a9c26f8752701a5aa10f78f5017d":["f6ae14c6ffa67b4f3db357560ff994e16336e997"],"f6ae14c6ffa67b4f3db357560ff994e16336e997":["a236b7fed4411660186d60e31936b14fd52f003c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["14aec0a40da5a9c26f8752701a5aa10f78f5017d"],"a236b7fed4411660186d60e31936b14fd52f003c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}