{"path":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","commits":[{"id":"c2635332d49f7c5a0b484950462a01775512628e","date":1331332806,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<String, Map<String, Double>>();\n    try {\n      log.info(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (java.util.Currency.getInstance(fromCurrency) == null ||\n              java.util.Currency.getInstance(toCurrency) == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find from currency specified in exchange rate: \" + rateNode);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing currency config.\", e);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing currency config.\", e);\n      } catch (ParserConfigurationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing currency config.\", e);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["12dafe10e13e4a09ad16f617b6c5013460fd7c58"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<String, Map<String, Double>>();\n    try {\n      log.info(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (java.util.Currency.getInstance(fromCurrency) == null ||\n              java.util.Currency.getInstance(toCurrency) == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find from currency specified in exchange rate: \" + rateNode);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing currency config.\", e);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing currency config.\", e);\n      } catch (ParserConfigurationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing currency config.\", e);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12dafe10e13e4a09ad16f617b6c5013460fd7c58","date":1362255003,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","sourceNew":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<String, Map<String, Double>>();\n    try {\n      log.info(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyField.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyField.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      } catch (ParserConfigurationException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<String, Map<String, Double>>();\n    try {\n      log.info(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (java.util.Currency.getInstance(fromCurrency) == null ||\n              java.util.Currency.getInstance(toCurrency) == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not find from currency specified in exchange rate: \" + rateNode);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing currency config.\", e);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing currency config.\", e);\n      } catch (ParserConfigurationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing currency config.\", e);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","bugFix":["c2635332d49f7c5a0b484950462a01775512628e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","sourceNew":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.info(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyField.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyField.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      } catch (ParserConfigurationException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<String, Map<String, Double>>();\n    try {\n      log.info(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyField.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyField.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      } catch (ParserConfigurationException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","sourceNew":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.info(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyField.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyField.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.info(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyField.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyField.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      } catch (ParserConfigurationException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","sourceNew":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.debug(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyField.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyField.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.info(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyField.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyField.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","sourceNew":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.debug(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyField.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyField.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.info(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyField.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyField.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","sourceNew":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.debug(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyField.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyField.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.info(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyField.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyField.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","sourceNew":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.debug(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyField.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyField.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.info(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyField.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyField.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider#reload().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","sourceNew":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.debug(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyFieldType.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyFieldType.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.debug(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyField.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyField.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider#reload().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","sourceNew":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.debug(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyFieldType.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyFieldType.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.debug(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyField.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyField.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/FileExchangeRateProvider[CurrencyField]#reload().mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean reload() throws SolrException {\n    InputStream is = null;\n    Map<String, Map<String, Double>> tmpRates = new HashMap<>();\n    try {\n      log.debug(\"Reloading exchange rates from file \"+this.currencyConfigFile);\n\n      is = loader.openResource(currencyConfigFile);\n      javax.xml.parsers.DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n      try {\n        dbf.setXIncludeAware(true);\n        dbf.setNamespaceAware(true);\n      } catch (UnsupportedOperationException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"XML parser doesn't support XInclude option\", e);\n      }\n      \n      try {\n        Document doc = dbf.newDocumentBuilder().parse(is);\n        XPathFactory xpathFactory = XPathFactory.newInstance();\n        XPath xpath = xpathFactory.newXPath();\n        \n        // Parse exchange rates.\n        NodeList nodes = (NodeList) xpath.evaluate(\"/currencyConfig/rates/rate\", doc, XPathConstants.NODESET);\n        \n        for (int i = 0; i < nodes.getLength(); i++) {\n          Node rateNode = nodes.item(i);\n          NamedNodeMap attributes = rateNode.getAttributes();\n          Node from = attributes.getNamedItem(\"from\");\n          Node to = attributes.getNamedItem(\"to\");\n          Node rate = attributes.getNamedItem(\"rate\");\n          \n          if (from == null || to == null || rate == null) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exchange rate missing attributes (required: from, to, rate) \" + rateNode);\n          }\n          \n          String fromCurrency = from.getNodeValue();\n          String toCurrency = to.getNodeValue();\n          Double exchangeRate;\n          \n          if (null == CurrencyField.getCurrency(fromCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'from' currency not supported in this JVM: \" + fromCurrency);\n          }\n          if (null == CurrencyField.getCurrency(toCurrency)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Specified 'to' currency not supported in this JVM: \" + toCurrency);\n          }\n          \n          try {\n            exchangeRate = Double.parseDouble(rate.getNodeValue());\n          } catch (NumberFormatException e) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not parse exchange rate: \" + rateNode, e);\n          }\n          \n          addRate(tmpRates, fromCurrency, toCurrency, exchangeRate);\n        }\n      } catch (SAXException | XPathExpressionException | ParserConfigurationException | IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error parsing currency config.\", e);\n      }\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error while opening Currency configuration file \"+currencyConfigFile, e);\n    } finally {\n      try {\n        if (is != null) {\n          is.close();\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    // Atomically swap in the new rates map, if it loaded successfully\n    this.rates = tmpRates;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2635332d49f7c5a0b484950462a01775512628e"],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["12dafe10e13e4a09ad16f617b6c5013460fd7c58"],"12dafe10e13e4a09ad16f617b6c5013460fd7c58":["c2635332d49f7c5a0b484950462a01775512628e"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f107636c2cc82350a2607d774c092da5b73152e5"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f107636c2cc82350a2607d774c092da5b73152e5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c6e1dc1bb4254226c8d7151b596cc1be40671751","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f107636c2cc82350a2607d774c092da5b73152e5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"126d6ad24eed13163ba0959435d5a80e5672837c":["c6e1dc1bb4254226c8d7151b596cc1be40671751","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"c2635332d49f7c5a0b484950462a01775512628e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c6e1dc1bb4254226c8d7151b596cc1be40671751","126d6ad24eed13163ba0959435d5a80e5672837c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"12dafe10e13e4a09ad16f617b6c5013460fd7c58":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","c2635332d49f7c5a0b484950462a01775512628e"],"c2635332d49f7c5a0b484950462a01775512628e":["38e3b736c7ca086d61b7dbb841c905ee115490da","12dafe10e13e4a09ad16f617b6c5013460fd7c58"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f107636c2cc82350a2607d774c092da5b73152e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}