{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","commits":[{"id":"ad252c98ff183bc59bd0617be14fa46f9696d6fc","date":1363962178,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public List<AtomicReader> getMergeReaders() throws IOException {\n      final List<AtomicReader> readers =  super.getMergeReaders();\n      switch (readers.size()) {\n        case 0:\n          return readers;\n        case 1:\n          return Collections.singletonList(SortingAtomicReader.wrap(readers.get(0), sorter));\n        default:\n          final IndexReader multiReader = new MultiReader(readers.toArray(new AtomicReader[readers.size()]));\n          final AtomicReader atomicReader = SlowCompositeReaderWrapper.wrap(multiReader);\n          final AtomicReader sortingReader = SortingAtomicReader.wrap(atomicReader, sorter);\n          if (sortingReader == atomicReader) {\n            // already sorted, return the original list of readers so that\n            // codec-specific bulk-merge methods can be used\n            return readers;\n          }\n          return Collections.singletonList(sortingReader);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b61ab77ab36893d701d693f1b6df2a383bb7b5","date":1364405461,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","sourceNew":"    @Override\n    public List<AtomicReader> getMergeReaders() throws IOException {\n      if (unsortedReaders == null) {\n        unsortedReaders = super.getMergeReaders();\n        final AtomicReader atomicView;\n        if (unsortedReaders.size() == 1) {\n          atomicView = unsortedReaders.get(0);\n        } else {\n          final IndexReader multiReader = new MultiReader(unsortedReaders.toArray(new AtomicReader[unsortedReaders.size()]));\n          atomicView = SlowCompositeReaderWrapper.wrap(multiReader);\n        }\n        docMap = sorter.sort(atomicView);\n        sortedView = SortingAtomicReader.wrap(atomicView, docMap);\n      }\n      // a null doc map means that the readers are already sorted\n      return docMap == null ? unsortedReaders : Collections.singletonList(sortedView);\n    }\n\n","sourceOld":"    @Override\n    public List<AtomicReader> getMergeReaders() throws IOException {\n      final List<AtomicReader> readers =  super.getMergeReaders();\n      switch (readers.size()) {\n        case 0:\n          return readers;\n        case 1:\n          return Collections.singletonList(SortingAtomicReader.wrap(readers.get(0), sorter));\n        default:\n          final IndexReader multiReader = new MultiReader(readers.toArray(new AtomicReader[readers.size()]));\n          final AtomicReader atomicReader = SlowCompositeReaderWrapper.wrap(multiReader);\n          final AtomicReader sortingReader = SortingAtomicReader.wrap(atomicReader, sorter);\n          if (sortingReader == atomicReader) {\n            // already sorted, return the original list of readers so that\n            // codec-specific bulk-merge methods can be used\n            return readers;\n          }\n          return Collections.singletonList(sortingReader);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","sourceNew":"    @Override\n    public List<LeafReader> getMergeReaders() throws IOException {\n      if (unsortedReaders == null) {\n        unsortedReaders = super.getMergeReaders();\n        final LeafReader atomicView;\n        if (unsortedReaders.size() == 1) {\n          atomicView = unsortedReaders.get(0);\n        } else {\n          final IndexReader multiReader = new MultiReader(unsortedReaders.toArray(new LeafReader[unsortedReaders.size()]));\n          atomicView = SlowCompositeReaderWrapper.wrap(multiReader);\n        }\n        docMap = sorter.sort(atomicView);\n        sortedView = SortingLeafReader.wrap(atomicView, docMap);\n      }\n      // a null doc map means that the readers are already sorted\n      return docMap == null ? unsortedReaders : Collections.singletonList(sortedView);\n    }\n\n","sourceOld":"    @Override\n    public List<AtomicReader> getMergeReaders() throws IOException {\n      if (unsortedReaders == null) {\n        unsortedReaders = super.getMergeReaders();\n        final AtomicReader atomicView;\n        if (unsortedReaders.size() == 1) {\n          atomicView = unsortedReaders.get(0);\n        } else {\n          final IndexReader multiReader = new MultiReader(unsortedReaders.toArray(new AtomicReader[unsortedReaders.size()]));\n          atomicView = SlowCompositeReaderWrapper.wrap(multiReader);\n        }\n        docMap = sorter.sort(atomicView);\n        sortedView = SortingAtomicReader.wrap(atomicView, docMap);\n      }\n      // a null doc map means that the readers are already sorted\n      return docMap == null ? unsortedReaders : Collections.singletonList(sortedView);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getMergeReaders().mjava","sourceNew":"    @Override\n    public List<LeafReader> getMergeReaders() throws IOException {\n      if (unsortedReaders == null) {\n        unsortedReaders = super.getMergeReaders();\n        // wrap readers, to be optimal for merge;\n        List<LeafReader> wrapped = new ArrayList<>(unsortedReaders.size());\n        for (LeafReader leaf : unsortedReaders) {\n          if (leaf instanceof SegmentReader) {\n            leaf = new MergeReaderWrapper((SegmentReader)leaf);\n          }\n          wrapped.add(leaf);\n        }\n        final LeafReader atomicView;\n        if (wrapped.size() == 1) {\n          atomicView = wrapped.get(0);\n        } else {\n          final CompositeReader multiReader = new MultiReader(wrapped.toArray(new LeafReader[wrapped.size()]));\n          atomicView = new SlowCompositeReaderWrapper(multiReader, true);\n        }\n        docMap = sorter.sort(atomicView);\n        sortedView = SortingLeafReader.wrap(atomicView, docMap);\n      }\n      // a null doc map means that the readers are already sorted\n      return docMap == null ? unsortedReaders : Collections.singletonList(sortedView);\n    }\n\n","sourceOld":"    @Override\n    public List<LeafReader> getMergeReaders() throws IOException {\n      if (unsortedReaders == null) {\n        unsortedReaders = super.getMergeReaders();\n        final LeafReader atomicView;\n        if (unsortedReaders.size() == 1) {\n          atomicView = unsortedReaders.get(0);\n        } else {\n          final IndexReader multiReader = new MultiReader(unsortedReaders.toArray(new LeafReader[unsortedReaders.size()]));\n          atomicView = SlowCompositeReaderWrapper.wrap(multiReader);\n        }\n        docMap = sorter.sort(atomicView);\n        sortedView = SortingLeafReader.wrap(atomicView, docMap);\n      }\n      // a null doc map means that the readers are already sorted\n      return docMap == null ? unsortedReaders : Collections.singletonList(sortedView);\n    }\n\n","bugFix":null,"bugIntro":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ad252c98ff183bc59bd0617be14fa46f9696d6fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"66b61ab77ab36893d701d693f1b6df2a383bb7b5":["ad252c98ff183bc59bd0617be14fa46f9696d6fc"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"]},"commit2Childs":{"ad252c98ff183bc59bd0617be14fa46f9696d6fc":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad252c98ff183bc59bd0617be14fa46f9696d6fc"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66b61ab77ab36893d701d693f1b6df2a383bb7b5":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}