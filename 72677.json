{"path":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI#validateFiles(List[String],boolean,Consumer[String]).mjava","commits":[{"id":"849dbf8570155b8e5fd03d8c2274a0a60491051c","date":1570859954,"type":0,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI#validateFiles(List[String],boolean,Consumer[String]).mjava","pathOld":"/dev/null","sourceNew":"  public void validateFiles(List<String> files, boolean validateSignatures, Consumer<String> errs) {\n    for (String path : files) {\n      try {\n        PackageStore.FileType type = packageStore.getType(path, true);\n        if (type != PackageStore.FileType.FILE) {\n          errs.accept(\"No such file : \" + path);\n          continue;\n        }\n\n        packageStore.get(path, entry -> {\n          if (entry.getMetaData().signatures == null ||\n              entry.getMetaData().signatures.isEmpty()) {\n            errs.accept(path + \" has no signature\");\n            return;\n          }\n          if (validateSignatures) {\n            try {\n              validate(entry.meta.signatures, entry);\n            } catch (SolrException e) {\n              log.error(\"error validating package artifact\", e);\n              errs.accept(e.getMessage());\n            }\n          }\n        }, false);\n      } catch (Exception e) {\n        log.error(\"Error reading file \", e);\n        errs.accept(\"Error reading file \" + path + \" \" + e.getMessage());\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d218decf811b7a0a4d86218c54c79c74a962374b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI#validateFiles(List[String],boolean,Consumer[String]).mjava","pathOld":"/dev/null","sourceNew":"  public void validateFiles(List<String> files, boolean validateSignatures, Consumer<String> errs) {\n    for (String path : files) {\n      try {\n        PackageStore.FileType type = packageStore.getType(path, true);\n        if (type != PackageStore.FileType.FILE) {\n          errs.accept(\"No such file : \" + path);\n          continue;\n        }\n\n        packageStore.get(path, entry -> {\n          if (entry.getMetaData().signatures == null ||\n              entry.getMetaData().signatures.isEmpty()) {\n            errs.accept(path + \" has no signature\");\n            return;\n          }\n          if (validateSignatures) {\n            try {\n              validate(entry.meta.signatures, entry);\n            } catch (SolrException e) {\n              log.error(\"error validating package artifact\", e);\n              errs.accept(e.getMessage());\n            }\n          }\n        }, false);\n      } catch (Exception e) {\n        log.error(\"Error reading file \", e);\n        errs.accept(\"Error reading file \" + path + \" \" + e.getMessage());\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d218decf811b7a0a4d86218c54c79c74a962374b","date":1578632144,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI#validateFiles(List[String],boolean,Consumer[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI#validateFiles(List[String],boolean,Consumer[String]).mjava","sourceNew":"  public void validateFiles(List<String> files, boolean validateSignatures, Consumer<String> errs) {\n    for (String path : files) {\n      try {\n        PackageStore.FileType type = packageStore.getType(path, true);\n        if (type != PackageStore.FileType.FILE) {\n          errs.accept(\"No such file: \" + path);\n          continue;\n        }\n\n        packageStore.get(path, entry -> {\n          if (entry.getMetaData().signatures == null ||\n              entry.getMetaData().signatures.isEmpty()) {\n            errs.accept(path + \" has no signature\");\n            return;\n          }\n          if (validateSignatures) {\n            try {\n              packageStore.refresh(KEYS_DIR);\n              validate(entry.meta.signatures, entry, false);\n            } catch (Exception e) {\n              log.error(\"Error validating package artifact\", e);\n              errs.accept(e.getMessage());\n            }\n          }\n        }, false);\n      } catch (Exception e) {\n        log.error(\"Error reading file \", e);\n        errs.accept(\"Error reading file \" + path + \" \" + e.getMessage());\n      }\n    }\n\n  }\n\n","sourceOld":"  public void validateFiles(List<String> files, boolean validateSignatures, Consumer<String> errs) {\n    for (String path : files) {\n      try {\n        PackageStore.FileType type = packageStore.getType(path, true);\n        if (type != PackageStore.FileType.FILE) {\n          errs.accept(\"No such file : \" + path);\n          continue;\n        }\n\n        packageStore.get(path, entry -> {\n          if (entry.getMetaData().signatures == null ||\n              entry.getMetaData().signatures.isEmpty()) {\n            errs.accept(path + \" has no signature\");\n            return;\n          }\n          if (validateSignatures) {\n            try {\n              validate(entry.meta.signatures, entry);\n            } catch (SolrException e) {\n              log.error(\"error validating package artifact\", e);\n              errs.accept(e.getMessage());\n            }\n          }\n        }, false);\n      } catch (Exception e) {\n        log.error(\"Error reading file \", e);\n        errs.accept(\"Error reading file \" + path + \" \" + e.getMessage());\n      }\n    }\n\n  }\n\n","bugFix":["849dbf8570155b8e5fd03d8c2274a0a60491051c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8f0a7504661c8e51be5c63e87f9d79a36d9116c","date":1578657638,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI#validateFiles(List[String],boolean,Consumer[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/PackageStoreAPI#validateFiles(List[String],boolean,Consumer[String]).mjava","sourceNew":"  public void validateFiles(List<String> files, boolean validateSignatures, Consumer<String> errs) {\n    for (String path : files) {\n      try {\n        PackageStore.FileType type = packageStore.getType(path, true);\n        if (type != PackageStore.FileType.FILE) {\n          errs.accept(\"No such file: \" + path);\n          continue;\n        }\n\n        packageStore.get(path, entry -> {\n          if (entry.getMetaData().signatures == null ||\n              entry.getMetaData().signatures.isEmpty()) {\n            errs.accept(path + \" has no signature\");\n            return;\n          }\n          if (validateSignatures) {\n            try {\n              packageStore.refresh(KEYS_DIR);\n              validate(entry.meta.signatures, entry, false);\n            } catch (Exception e) {\n              log.error(\"Error validating package artifact\", e);\n              errs.accept(e.getMessage());\n            }\n          }\n        }, false);\n      } catch (Exception e) {\n        log.error(\"Error reading file \", e);\n        errs.accept(\"Error reading file \" + path + \" \" + e.getMessage());\n      }\n    }\n\n  }\n\n","sourceOld":"  public void validateFiles(List<String> files, boolean validateSignatures, Consumer<String> errs) {\n    for (String path : files) {\n      try {\n        PackageStore.FileType type = packageStore.getType(path, true);\n        if (type != PackageStore.FileType.FILE) {\n          errs.accept(\"No such file : \" + path);\n          continue;\n        }\n\n        packageStore.get(path, entry -> {\n          if (entry.getMetaData().signatures == null ||\n              entry.getMetaData().signatures.isEmpty()) {\n            errs.accept(path + \" has no signature\");\n            return;\n          }\n          if (validateSignatures) {\n            try {\n              validate(entry.meta.signatures, entry);\n            } catch (SolrException e) {\n              log.error(\"error validating package artifact\", e);\n              errs.accept(e.getMessage());\n            }\n          }\n        }, false);\n      } catch (Exception e) {\n        log.error(\"Error reading file \", e);\n        errs.accept(\"Error reading file \" + path + \" \" + e.getMessage());\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":["849dbf8570155b8e5fd03d8c2274a0a60491051c","d218decf811b7a0a4d86218c54c79c74a962374b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d218decf811b7a0a4d86218c54c79c74a962374b":["849dbf8570155b8e5fd03d8c2274a0a60491051c"],"849dbf8570155b8e5fd03d8c2274a0a60491051c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d218decf811b7a0a4d86218c54c79c74a962374b"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849dbf8570155b8e5fd03d8c2274a0a60491051c"]},"commit2Childs":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849dbf8570155b8e5fd03d8c2274a0a60491051c","b0b597c65628ca9e73913a07e81691f8229bae35"],"d218decf811b7a0a4d86218c54c79c74a962374b":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"849dbf8570155b8e5fd03d8c2274a0a60491051c":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","d218decf811b7a0a4d86218c54c79c74a962374b","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}