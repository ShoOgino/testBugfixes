{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer30().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer30().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer30().mjava","sourceNew":"\t/**\n\t * @deprecated (3.1) remove this test for Lucene 5.0\n\t */\n\t@Deprecated\n\tpublic void testAnalyzer30() throws Exception {\n\t    FrenchAnalyzer fa = new FrenchAnalyzer(Version.LUCENE_30);\n\t  \n\t    assertAnalyzesTo(fa, \"\", new String[] {\n\t    });\n\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"chien chat cheval\",\n\t      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"chien CHAT CHEVAL\",\n\t      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"  chien  ,? + = -  CHAT /: > CHEVAL\",\n\t      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t    assertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"mot \\\"entreguillemet\\\"\",\n\t      new String[] { \"mot\", \"entreguillemet\" });\n\n\t    // let's do some french specific tests now  \n\n\t    /* 1. couldn't resist\n\t     I would expect this to stay one term as in French the minus \n\t    sign is often used for composing words */\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"Jean-François\",\n\t      new String[] { \"jean\", \"françois\" });\n\n\t    // 2. stopwords\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"le la chien les aux chat du des à cheval\",\n\t      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t    // some nouns and adjectives\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"lances chismes habitable chiste éléments captifs\",\n\t      new String[] {\n\t        \"lanc\",\n\t        \"chism\",\n\t        \"habit\",\n\t        \"chist\",\n\t        \"élément\",\n\t        \"captif\" });\n\n\t    // some verbs\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"finissions souffrirent rugissante\",\n\t      new String[] { \"fin\", \"souffr\", \"rug\" });\n\n\t    // some everything else\n\t    // aujourd'hui stays one term which is OK\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n\t      new String[] {\n\t        \"c3po\",\n\t        \"aujourd'hui\",\n\t        \"oeuf\",\n\t        \"ïâöûàä\",\n\t        \"anticonstitutionnel\",\n\t        \"jav\" });\n\n\t    // some more everything else\n\t    // here 1940-1945 stays as one term, 1940:1945 not ?\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"33Bis 1940-1945 1940:1945 (---i+++)*\",\n\t      new String[] { \"33bis\", \"1940-1945\", \"1940\", \"1945\", \"i\" });\n\n\t  }\n\n","sourceOld":"\t/**\n\t * @deprecated (3.1) remove this test for Lucene 5.0\n\t */\n\t@Deprecated\n\tpublic void testAnalyzer30() throws Exception {\n\t    FrenchAnalyzer fa = new FrenchAnalyzer(Version.LUCENE_30);\n\t  \n\t    assertAnalyzesTo(fa, \"\", new String[] {\n\t    });\n\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"chien chat cheval\",\n\t      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"chien CHAT CHEVAL\",\n\t      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"  chien  ,? + = -  CHAT /: > CHEVAL\",\n\t      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t    assertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"mot \\\"entreguillemet\\\"\",\n\t      new String[] { \"mot\", \"entreguillemet\" });\n\n\t    // let's do some french specific tests now  \n\n\t    /* 1. couldn't resist\n\t     I would expect this to stay one term as in French the minus \n\t    sign is often used for composing words */\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"Jean-François\",\n\t      new String[] { \"jean\", \"françois\" });\n\n\t    // 2. stopwords\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"le la chien les aux chat du des à cheval\",\n\t      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t    // some nouns and adjectives\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"lances chismes habitable chiste éléments captifs\",\n\t      new String[] {\n\t        \"lanc\",\n\t        \"chism\",\n\t        \"habit\",\n\t        \"chist\",\n\t        \"élément\",\n\t        \"captif\" });\n\n\t    // some verbs\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"finissions souffrirent rugissante\",\n\t      new String[] { \"fin\", \"souffr\", \"rug\" });\n\n\t    // some everything else\n\t    // aujourd'hui stays one term which is OK\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n\t      new String[] {\n\t        \"c3po\",\n\t        \"aujourd'hui\",\n\t        \"oeuf\",\n\t        \"ïâöûàä\",\n\t        \"anticonstitutionnel\",\n\t        \"jav\" });\n\n\t    // some more everything else\n\t    // here 1940-1945 stays as one term, 1940:1945 not ?\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"33Bis 1940-1945 1940:1945 (---i+++)*\",\n\t      new String[] { \"33bis\", \"1940-1945\", \"1940\", \"1945\", \"i\" });\n\n\t  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer30().mjava","sourceNew":null,"sourceOld":"\t/**\n\t * @deprecated (3.1) remove this test for Lucene 5.0\n\t */\n\t@Deprecated\n\tpublic void testAnalyzer30() throws Exception {\n\t    FrenchAnalyzer fa = new FrenchAnalyzer(Version.LUCENE_30);\n\t  \n\t    assertAnalyzesTo(fa, \"\", new String[] {\n\t    });\n\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"chien chat cheval\",\n\t      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"chien CHAT CHEVAL\",\n\t      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"  chien  ,? + = -  CHAT /: > CHEVAL\",\n\t      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t    assertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"mot \\\"entreguillemet\\\"\",\n\t      new String[] { \"mot\", \"entreguillemet\" });\n\n\t    // let's do some french specific tests now  \n\n\t    /* 1. couldn't resist\n\t     I would expect this to stay one term as in French the minus \n\t    sign is often used for composing words */\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"Jean-François\",\n\t      new String[] { \"jean\", \"françois\" });\n\n\t    // 2. stopwords\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"le la chien les aux chat du des à cheval\",\n\t      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t    // some nouns and adjectives\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"lances chismes habitable chiste éléments captifs\",\n\t      new String[] {\n\t        \"lanc\",\n\t        \"chism\",\n\t        \"habit\",\n\t        \"chist\",\n\t        \"élément\",\n\t        \"captif\" });\n\n\t    // some verbs\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"finissions souffrirent rugissante\",\n\t      new String[] { \"fin\", \"souffr\", \"rug\" });\n\n\t    // some everything else\n\t    // aujourd'hui stays one term which is OK\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n\t      new String[] {\n\t        \"c3po\",\n\t        \"aujourd'hui\",\n\t        \"oeuf\",\n\t        \"ïâöûàä\",\n\t        \"anticonstitutionnel\",\n\t        \"jav\" });\n\n\t    // some more everything else\n\t    // here 1940-1945 stays as one term, 1940:1945 not ?\n\t    assertAnalyzesTo(\n\t      fa,\n\t      \"33Bis 1940-1945 1940:1945 (---i+++)*\",\n\t      new String[] { \"33bis\", \"1940-1945\", \"1940\", \"1945\", \"i\" });\n\n\t  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}