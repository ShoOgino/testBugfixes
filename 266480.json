{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","sourceNew":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    long numberOfDocuments = collectionStats.maxDoc();\n    \n    long docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","sourceOld":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    long numberOfDocuments = collectionStats.maxDoc();\n    \n    long docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a259cdf9917ec38c8a812cc053f533b6e697a4a","date":1439487435,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","sourceNew":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    long numberOfDocuments = collectionStats.docCount() == -1 ? collectionStats.maxDoc() : collectionStats.docCount();\n    \n    long docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","sourceOld":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    long numberOfDocuments = collectionStats.maxDoc();\n    \n    long docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46","date":1508899684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","sourceNew":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    long numberOfDocuments = collectionStats.docCount() == -1 ? collectionStats.maxDoc() : collectionStats.docCount();\n    \n    long docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final double avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","sourceOld":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    long numberOfDocuments = collectionStats.docCount() == -1 ? collectionStats.maxDoc() : collectionStats.docCount();\n    \n    long docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ade74b5b1298025b81d3c45ae6713b47b9609152","date":1509579112,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","sourceNew":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    long numberOfDocuments = collectionStats.docCount() == -1 ? collectionStats.maxDoc() : collectionStats.docCount();\n    \n    long docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // frequencies are omitted, all postings have tf=1, so totalTermFreq = docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final double avgFieldLength;\n\n    if (collectionStats.sumTotalTermFreq() == -1) {\n      // frequencies are omitted, so sumTotalTermFreq = # postings\n      if (collectionStats.sumDocFreq() == -1) {\n        // theoretical case only: remove!\n        numberOfFieldTokens = docFreq;\n        avgFieldLength = 1f;\n      } else {\n        numberOfFieldTokens = collectionStats.sumDocFreq();\n        avgFieldLength = (float) (collectionStats.sumDocFreq() / (double)numberOfDocuments);\n      }\n    } else {\n      numberOfFieldTokens = collectionStats.sumTotalTermFreq();\n      avgFieldLength = (float) (collectionStats.sumTotalTermFreq() / (double)numberOfDocuments);\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","sourceOld":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    long numberOfDocuments = collectionStats.docCount() == -1 ? collectionStats.maxDoc() : collectionStats.docCount();\n    \n    long docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final double avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","sourceNew":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // TODO: validate this for real, somewhere else\n    assert termStats.totalTermFreq() <= collectionStats.sumTotalTermFreq();\n    assert termStats.docFreq() <= collectionStats.sumDocFreq();\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(collectionStats.docCount());\n    stats.setNumberOfFieldTokens(collectionStats.sumTotalTermFreq());\n    stats.setAvgFieldLength(collectionStats.sumTotalTermFreq() / (double) collectionStats.docCount());\n    stats.setDocFreq(termStats.docFreq());\n    stats.setTotalTermFreq(termStats.totalTermFreq());\n  }\n\n","sourceOld":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    long numberOfDocuments = collectionStats.docCount() == -1 ? collectionStats.maxDoc() : collectionStats.docCount();\n    \n    long docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // frequencies are omitted, all postings have tf=1, so totalTermFreq = docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final double avgFieldLength;\n\n    if (collectionStats.sumTotalTermFreq() == -1) {\n      // frequencies are omitted, so sumTotalTermFreq = # postings\n      if (collectionStats.sumDocFreq() == -1) {\n        // theoretical case only: remove!\n        numberOfFieldTokens = docFreq;\n        avgFieldLength = 1f;\n      } else {\n        numberOfFieldTokens = collectionStats.sumDocFreq();\n        avgFieldLength = (float) (collectionStats.sumDocFreq() / (double)numberOfDocuments);\n      }\n    } else {\n      numberOfFieldTokens = collectionStats.sumTotalTermFreq();\n      avgFieldLength = (float) (collectionStats.sumTotalTermFreq() / (double)numberOfDocuments);\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","sourceNew":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // TODO: validate this for real, somewhere else\n    assert termStats.totalTermFreq() <= collectionStats.sumTotalTermFreq();\n    assert termStats.docFreq() <= collectionStats.sumDocFreq();\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(collectionStats.docCount());\n    stats.setNumberOfFieldTokens(collectionStats.sumTotalTermFreq());\n    stats.setAvgFieldLength(collectionStats.sumTotalTermFreq() / (double) collectionStats.docCount());\n    stats.setDocFreq(termStats.docFreq());\n    stats.setTotalTermFreq(termStats.totalTermFreq());\n  }\n\n","sourceOld":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    long numberOfDocuments = collectionStats.docCount() == -1 ? collectionStats.maxDoc() : collectionStats.docCount();\n    \n    long docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // frequencies are omitted, all postings have tf=1, so totalTermFreq = docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final double avgFieldLength;\n\n    if (collectionStats.sumTotalTermFreq() == -1) {\n      // frequencies are omitted, so sumTotalTermFreq = # postings\n      if (collectionStats.sumDocFreq() == -1) {\n        // theoretical case only: remove!\n        numberOfFieldTokens = docFreq;\n        avgFieldLength = 1f;\n      } else {\n        numberOfFieldTokens = collectionStats.sumDocFreq();\n        avgFieldLength = (float) (collectionStats.sumDocFreq() / (double)numberOfDocuments);\n      }\n    } else {\n      numberOfFieldTokens = collectionStats.sumTotalTermFreq();\n      avgFieldLength = (float) (collectionStats.sumTotalTermFreq() / (double)numberOfDocuments);\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["5a259cdf9917ec38c8a812cc053f533b6e697a4a"],"086ffe31d8fba0110227db122974163709ecc1b4":["ade74b5b1298025b81d3c45ae6713b47b9609152"],"ade74b5b1298025b81d3c45ae6713b47b9609152":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"5a259cdf9917ec38c8a812cc053f533b6e697a4a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["ade74b5b1298025b81d3c45ae6713b47b9609152","086ffe31d8fba0110227db122974163709ecc1b4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["ade74b5b1298025b81d3c45ae6713b47b9609152"],"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"5a259cdf9917ec38c8a812cc053f533b6e697a4a":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"ade74b5b1298025b81d3c45ae6713b47b9609152":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5a259cdf9917ec38c8a812cc053f533b6e697a4a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}