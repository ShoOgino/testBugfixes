{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      String coll = hints.get(Hint.COLL);\n      String shard = hints.get(Hint.SHARD);\n      row = row.addReplica(coll, shard);\n      row.violations.clear();\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(row);\n      }\n      if (row.violations.isEmpty()) {// there are no rule violations\n        getMatrix().set(i, getMatrix().get(i).addReplica(coll, shard));\n        return Utils.makeMap(\"operation\", ADDREPLICA.toLower(),\n            COLLECTION_PROP, coll,\n            SHARD_ID_PROP, shard,\n            NODE, row.node);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      String coll = hints.get(Hint.COLL);\n      String shard = hints.get(Hint.SHARD);\n      row = row.addReplica(coll, shard);\n      row.violations.clear();\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(row);\n      }\n      if (row.violations.isEmpty()) {// there are no rule violations\n        getMatrix().set(i, getMatrix().get(i).addReplica(coll, shard));\n        return Utils.makeMap(\"operation\", ADDREPLICA.toLower(),\n            COLLECTION_PROP, coll,\n            SHARD_ID_PROP, shard,\n            NODE, row.node);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      String coll = hints.get(Hint.COLL);\n      String shard = hints.get(Hint.SHARD);\n      row = row.addReplica(coll, shard);\n      row.violations.clear();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) clause.test(row);\n      }\n      if (row.violations.isEmpty()) {// there are no rule violations\n        getMatrix().set(i, getMatrix().get(i).addReplica(coll, shard));\n        return Utils.makeMap(\"operation\", ADDREPLICA.toLower(),\n            COLLECTION_PROP, coll,\n            SHARD_ID_PROP, shard,\n            NODE, row.node);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      String coll = hints.get(Hint.COLL);\n      String shard = hints.get(Hint.SHARD);\n      row = row.addReplica(coll, shard);\n      row.violations.clear();\n      for (Clause clause : session.getPolicy().clauses) {\n        if (strict || clause.strict) clause.test(row);\n      }\n      if (row.violations.isEmpty()) {// there are no rule violations\n        getMatrix().set(i, getMatrix().get(i).addReplica(coll, shard));\n        return Utils.makeMap(\"operation\", ADDREPLICA.toLower(),\n            COLLECTION_PROP, coll,\n            SHARD_ID_PROP, shard,\n            NODE, row.node);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c51a42fa59b8539f35fd21ba7d88ee912af931d","date":1493700805,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  Map tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      row = row.addReplica(coll, shard);\n      row.violations.clear();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) clause.test(row);\n      }\n      if (row.violations.isEmpty()) {// there are no rule violations\n        getMatrix().set(i, getMatrix().get(i).addReplica(coll, shard));\n        return Utils.makeMap(\"operation\", ADDREPLICA.toLower(),\n            COLLECTION_PROP, coll,\n            SHARD_ID_PROP, shard,\n            NODE, row.node);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  Map tryEachNode(boolean strict) {\n    //iterate through elements and identify the least loaded\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      String coll = hints.get(Hint.COLL);\n      String shard = hints.get(Hint.SHARD);\n      row = row.addReplica(coll, shard);\n      row.violations.clear();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) clause.test(row);\n      }\n      if (row.violations.isEmpty()) {// there are no rule violations\n        getMatrix().set(i, getMatrix().get(i).addReplica(coll, shard));\n        return Utils.makeMap(\"operation\", ADDREPLICA.toLower(),\n            COLLECTION_PROP, coll,\n            SHARD_ID_PROP, shard,\n            NODE, row.node);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d14f4b04a5c752272b2f79fd6684fee8dff2808","date":1494821985,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      row = row.addReplica(coll, shard);\n      row.violations.clear();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) clause.test(row);\n      }\n      if (row.violations.isEmpty()) {// there are no rule violations\n        getMatrix().set(i, getMatrix().get(i).addReplica(coll, shard));\n        return CollectionAdminRequest\n            .addReplicaToShard(coll, shard)\n            .setNode(row.node);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  Map tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      row = row.addReplica(coll, shard);\n      row.violations.clear();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) clause.test(row);\n      }\n      if (row.violations.isEmpty()) {// there are no rule violations\n        getMatrix().set(i, getMatrix().get(i).addReplica(coll, shard));\n        return Utils.makeMap(\"operation\", ADDREPLICA.toLower(),\n            COLLECTION_PROP, coll,\n            SHARD_ID_PROP, shard,\n            NODE, row.node);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fca549db64ee4c87a83a94e7c224506fa20d396","date":1495433449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedRow(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n\n      if (!containsNewErrors(errs)) {// there are no rule violations\n        getMatrix().set(i, getMatrix().get(i).addReplica(coll, shard));\n        return CollectionAdminRequest\n            .addReplicaToShard(coll, shard)\n            .setNode(row.node);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      row = row.addReplica(coll, shard);\n      row.violations.clear();\n      for (Clause clause : session.expandedClauses) {\n        if (strict || clause.strict) clause.test(row);\n      }\n      if (row.violations.isEmpty()) {// there are no rule violations\n        getMatrix().set(i, getMatrix().get(i).addReplica(coll, shard));\n        return CollectionAdminRequest\n            .addReplicaToShard(coll, shard)\n            .setNode(row.node);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4","date":1495700700,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedRow(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedRow(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n\n      if (!containsNewErrors(errs)) {// there are no rule violations\n        getMatrix().set(i, getMatrix().get(i).addReplica(coll, shard));\n        return CollectionAdminRequest\n            .addReplicaToShard(coll, shard)\n            .setNode(row.node);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa61ea06d4d27acb465d77e15f20aae84531d73","date":1495784617,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedRow(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"/dev/null","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"/dev/null","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f6b20dc453cee198956989b90aa24bef0232bcf","date":1498221066,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if(!row.isLive) continue;\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852ff897aecd2f7c8376a02aedfd44104533f28","date":1498224361,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if(!row.isLive) continue;\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard, type);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard, type));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setType(type)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if(!row.isLive) continue;\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/AddReplicaSuggester#tryEachNode(boolean).mjava","sourceNew":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if(!row.isLive) continue;\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard, type);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard, type));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setType(type)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  SolrRequest tryEachNode(boolean strict) {\n    String coll = (String) hints.get(Hint.COLL);\n    String shard = (String) hints.get(Hint.SHARD);\n    Replica.Type type = Replica.Type.get((String) hints.get(Hint.REPLICATYPE));\n    if (coll == null || shard == null)\n      throw new RuntimeException(\"add-replica requires 'collection' and 'shard'\");\n    //iterate through elements and identify the least loaded\n\n    List<Clause.Violation> leastSeriousViolation = null;\n    Integer targetNodeIndex = null;\n    for (int i = getMatrix().size() - 1; i >= 0; i--) {\n      Row row = getMatrix().get(i);\n      if(!row.isLive) continue;\n      if (!isAllowed(row.node, Hint.TARGET_NODE)) continue;\n      Row tmpRow = row.addReplica(coll, shard, type);\n      tmpRow.violations.clear();\n\n      List<Clause.Violation> errs = testChangedMatrix(strict, getModifiedMatrix(getMatrix(), tmpRow, i));\n      if(!containsNewErrors(errs)) {\n        if(isLessSerious(errs, leastSeriousViolation)){\n          leastSeriousViolation = errs;\n          targetNodeIndex = i;\n        }\n      }\n    }\n\n    if (targetNodeIndex != null) {// there are no rule violations\n      getMatrix().set(targetNodeIndex, getMatrix().get(targetNodeIndex).addReplica(coll, shard, type));\n      return CollectionAdminRequest\n          .addReplicaToShard(coll, shard)\n          .setType(type)\n          .setNode(getMatrix().get(targetNodeIndex).node);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c51a42fa59b8539f35fd21ba7d88ee912af931d":["86fff6c123a5a1d38adb665dd045347219798da9"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"5d14f4b04a5c752272b2f79fd6684fee8dff2808":["0c51a42fa59b8539f35fd21ba7d88ee912af931d"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["5d14f4b04a5c752272b2f79fd6684fee8dff2808"],"86fff6c123a5a1d38adb665dd045347219798da9":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["1f6b20dc453cee198956989b90aa24bef0232bcf"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"98f11c416d30e556e0004a9a84960702d12d35b1":["1852ff897aecd2f7c8376a02aedfd44104533f28","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c51a42fa59b8539f35fd21ba7d88ee912af931d":["5d14f4b04a5c752272b2f79fd6684fee8dff2808"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"5d14f4b04a5c752272b2f79fd6684fee8dff2808":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"86fff6c123a5a1d38adb665dd045347219798da9":["0c51a42fa59b8539f35fd21ba7d88ee912af931d"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["98f11c416d30e556e0004a9a84960702d12d35b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["1f6b20dc453cee198956989b90aa24bef0232bcf"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["86fff6c123a5a1d38adb665dd045347219798da9"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}