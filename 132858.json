{"path":"lucene/facet/src/test/org/apache/lucene/facet/collections/ObjectToIntMapTest#test1().mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/collections/ObjectToIntMapTest#test1().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/collections/ObjectToIntMapTest#test1().mjava","sourceNew":"  @Test\n  public void test1() {\n    ObjectToIntMap<Integer> map = new ObjectToIntMap<Integer>();\n\n    for (int i = 0; i < 100; ++i) {\n      map.put(i, Integer.valueOf(100 + i));\n    }\n    \n    HashSet<Integer> set = new HashSet<Integer>();\n    \n    for (IntIterator iterator = map.iterator(); iterator.hasNext();) {\n      set.add(iterator.next());\n    }\n\n    assertEquals(set.size(), map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertTrue(set.contains(Integer.valueOf(100+i)));\n    }\n\n    set.clear();\n    for (IntIterator iterator = map.iterator(); iterator.hasNext();) {\n      Integer value = iterator.next();\n      if (value % 2 == 1) {\n        iterator.remove();\n        continue;\n      }\n      set.add(value);\n    }\n    assertEquals(set.size(), map.size());\n    for (int i = 0; i < 100; i+=2) {\n      assertTrue(set.contains(Integer.valueOf(100+i)));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test1() {\n    ObjectToIntMap<Integer> map = new ObjectToIntMap<Integer>();\n\n    for (int i = 0; i < 100; ++i) {\n      map.put(i, Integer.valueOf(100 + i));\n    }\n    \n    HashSet<Integer> set = new HashSet<Integer>();\n    \n    for (IntIterator iterator = map.iterator(); iterator.hasNext();) {\n      set.add(iterator.next());\n    }\n\n    assertEquals(set.size(), map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertTrue(set.contains(Integer.valueOf(100+i)));\n    }\n\n    set.clear();\n    for (IntIterator iterator = map.iterator(); iterator.hasNext();) {\n      Integer value = iterator.next();\n      if (value % 2 == 1) {\n        iterator.remove();\n        continue;\n      }\n      set.add(value);\n    }\n    assertEquals(set.size(), map.size());\n    for (int i = 0; i < 100; i+=2) {\n      assertTrue(set.contains(Integer.valueOf(100+i)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/collections/ObjectToIntMapTest#test1().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void test1() {\n    ObjectToIntMap<Integer> map = new ObjectToIntMap<Integer>();\n\n    for (int i = 0; i < 100; ++i) {\n      map.put(i, Integer.valueOf(100 + i));\n    }\n    \n    HashSet<Integer> set = new HashSet<Integer>();\n    \n    for (IntIterator iterator = map.iterator(); iterator.hasNext();) {\n      set.add(iterator.next());\n    }\n\n    assertEquals(set.size(), map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertTrue(set.contains(Integer.valueOf(100+i)));\n    }\n\n    set.clear();\n    for (IntIterator iterator = map.iterator(); iterator.hasNext();) {\n      Integer value = iterator.next();\n      if (value % 2 == 1) {\n        iterator.remove();\n        continue;\n      }\n      set.add(value);\n    }\n    assertEquals(set.size(), map.size());\n    for (int i = 0; i < 100; i+=2) {\n      assertTrue(set.contains(Integer.valueOf(100+i)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/collections/ObjectToIntMapTest#test1().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void test1() {\n    ObjectToIntMap<Integer> map = new ObjectToIntMap<Integer>();\n\n    for (int i = 0; i < 100; ++i) {\n      map.put(i, Integer.valueOf(100 + i));\n    }\n    \n    HashSet<Integer> set = new HashSet<Integer>();\n    \n    for (IntIterator iterator = map.iterator(); iterator.hasNext();) {\n      set.add(iterator.next());\n    }\n\n    assertEquals(set.size(), map.size());\n    for (int i = 0; i < 100; ++i) {\n      assertTrue(set.contains(Integer.valueOf(100+i)));\n    }\n\n    set.clear();\n    for (IntIterator iterator = map.iterator(); iterator.hasNext();) {\n      Integer value = iterator.next();\n      if (value % 2 == 1) {\n        iterator.remove();\n        continue;\n      }\n      set.add(value);\n    }\n    assertEquals(set.size(), map.size());\n    for (int i = 0; i < 100; i+=2) {\n      assertTrue(set.contains(Integer.valueOf(100+i)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}