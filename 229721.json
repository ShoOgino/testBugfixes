{"path":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#printTree(String).mjava","commits":[{"id":"2faa4d8af1f20119ec0d38b5ae80ce9e78f10755","date":1329934000,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#printTree(String).mjava","pathOld":"/dev/null","sourceNew":"    void printTree(String path) throws IOException\r\n    {\r\n      String label = path;\r\n      if (!fullpath)\r\n      {\r\n        int idx = path.lastIndexOf('/');\r\n        label = idx > 0 ? path.substring(idx + 1) : path;\r\n      }\r\n  \r\n      //url(label, path, true);\r\n      out.println(\"{\");\r\n      out.println(\"\\\"data\\\" : \\\"\" + label + \"\\\"\");\r\n  \r\n      Stat stat = new Stat();\r\n      try\r\n      {\r\n        byte[] data = zkClient.getData(path, null, stat, true);\r\n  \r\n        if( stat.getEphemeralOwner() != 0 )\r\n        {\r\n          out.println(\", \\\"ephemeral\\\" : true\");\r\n          out.println(\", \\\"version\\\" : \\\"\" + stat.getVersion() + \"\\\"\");\r\n        }\r\n        \r\n        /*\r\n        if (stat.getNumChildren() != 0)\r\n        {\r\n          out.println(\", \\\"children_count\\\" : \\\"\" + stat.getNumChildren() + \"\\\"\");\r\n        }\r\n        */\r\n  \r\n        //if (data != null)\r\n        if( stat.getDataLength() != 0 )\r\n        {\r\n          String str;\r\n          try\r\n          {\r\n            str = new String(data, \"UTF-8\");\r\n            str = str.replaceAll(\"\\\\\\\"\", \"\\\\\\\\\\\"\");\r\n  \r\n            out.print(\", \\\"content\\\" : \\\"\");\r\n            //xmlescape(compress(str));\r\n            out.print(compress(str));\r\n            out.println(\"\\\"\");\r\n          }\r\n          catch (UnsupportedEncodingException e)\r\n          {\r\n            // not UTF8\r\n            StringBuilder sb = new StringBuilder(\"BIN(\");\r\n            sb.append(\"len=\" + data.length);\r\n            sb.append(\"hex=\");\r\n            int limit = Math.min(data.length, maxData / 2);\r\n            for (int i = 0; i < limit; i++)\r\n            {\r\n              byte b = data[i];\r\n              sb.append(StrUtils.HEX_DIGITS[(b >> 4) & 0xf]);\r\n              sb.append(StrUtils.HEX_DIGITS[b & 0xf]);\r\n            }\r\n            if (limit != data.length)\r\n            {\r\n              sb.append(\"...\");\r\n            }\r\n            sb.append(\")\");\r\n            str = sb.toString();\r\n            //out.print(str);\r\n          }\r\n        }\r\n      }\r\n      catch (IllegalArgumentException e)\r\n      {\r\n        // path doesn't exist (must have been removed)\r\n        out.println(\"(path gone)\");\r\n      }\r\n      catch (KeeperException e)\r\n      {\r\n        e.printStackTrace();\r\n      }\r\n      catch (InterruptedException e)\r\n      {\r\n        e.printStackTrace();\r\n      }\r\n  \r\n      if( stat.getNumChildren() > 0 )\r\n      {\r\n        out.print(\", \\\"children\\\" : [\");\r\n  \r\n        List<String> children = null;\r\n        try\r\n        {\r\n          children = zkClient.getChildren(path, null, true);\r\n        }\r\n        catch (KeeperException e)\r\n        {\r\n          exception(e);\r\n          return;\r\n        }\r\n        catch (InterruptedException e)\r\n        {\r\n          exception(e);\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n          // path doesn't exist (must have been removed)\r\n          out.println(\"(children gone)\");\r\n        }\r\n  \r\n        Integer i = 0;\r\n        for( String child : children )\r\n        {\r\n          if( 0 != i )\r\n          {\r\n            out.print(\", \");\r\n          }\r\n  \r\n          String childPath = path + (path.endsWith(\"/\") ? \"\" : \"/\") + child;\r\n          printTree( childPath );\r\n  \r\n          i++;\r\n        }\r\n  \r\n        out.println(\"]\");\r\n      }\r\n  \r\n      out.println(\"}\");\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd6ddd3da533988676f6ec21e7e4651a2b2e8345","date":1330043299,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#printTree(JSONWriter,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#printTree(String).mjava","sourceNew":"    boolean printTree(JSONWriter json, String path) throws IOException {\r\n      String label = path;\r\n      if (!fullpath) {\r\n        int idx = path.lastIndexOf('/');\r\n        label = idx > 0 ? path.substring(idx + 1) : path;\r\n      }\r\n      json.startObject();\r\n      //writeKeyValue(json, \"data\", label, true );\r\n      json.writeString(\"data\");\r\n      json.writeNameSeparator();\r\n\r\n      json.startObject();\r\n      writeKeyValue(json, \"title\", label, true);\r\n      json.writeValueSeparator();\r\n      json.writeString(\"attr\");\r\n      json.writeNameSeparator();\r\n      json.startObject();\r\n      writeKeyValue(json, \"href\", \"zookeeper?detail=true&path=\" + URLEncoder.encode(path, \"UTF-8\"), true);\r\n      json.endObject();\r\n      json.endObject();\r\n\r\n      Stat stat = new Stat();\r\n      try {\r\n        byte[] data = zkClient.getData(path, null, stat, true);\r\n\r\n        if (stat.getEphemeralOwner() != 0) {\r\n          writeKeyValue(json, \"ephemeral\", true, false);\r\n          writeKeyValue(json, \"version\", stat.getVersion(), false);\r\n        }\r\n\r\n        /*\r\n        if (stat.getNumChildren() != 0)\r\n        {\r\n          writeKeyValue(json, \"children_count\",  stat.getNumChildren(), false );\r\n          out.println(\", \\\"children_count\\\" : \\\"\" + stat.getNumChildren() + \"\\\"\");\r\n        }\r\n        */\r\n\r\n        //if (data != null)\r\n        if (stat.getDataLength() != 0) {\r\n          String str;\r\n          try {\r\n            str = new String(data, \"UTF-8\");\r\n            str = str.replaceAll(\"\\\\\\\"\", \"\\\\\\\\\\\"\");\r\n\r\n            //writeKeyValue(json, \"content\", str, false );\r\n          } catch (UnsupportedEncodingException e) {\r\n            // not UTF8\r\n            StringBuilder sb = new StringBuilder(\"BIN(\");\r\n            sb.append(\"len=\" + data.length);\r\n            sb.append(\"hex=\");\r\n            int limit = Math.min(data.length, maxData / 2);\r\n            for (int i = 0; i < limit; i++) {\r\n              byte b = data[i];\r\n              sb.append(StrUtils.HEX_DIGITS[(b >> 4) & 0xf]);\r\n              sb.append(StrUtils.HEX_DIGITS[b & 0xf]);\r\n            }\r\n            if (limit != data.length) {\r\n              sb.append(\"...\");\r\n            }\r\n            sb.append(\")\");\r\n            str = sb.toString();\r\n            //?? writeKeyValue(json, \"content\", str, false );\r\n          }\r\n        }\r\n      } catch (IllegalArgumentException e) {\r\n        // path doesn't exist (must have been removed)\r\n        writeKeyValue(json, \"warning\", \"(path gone)\", false);\r\n      } catch (KeeperException e) {\r\n        writeKeyValue(json, \"warning\", e.toString(), false);\r\n        log.warn(\"Keeper Exception\", e);\r\n      } catch (InterruptedException e) {\r\n        writeKeyValue(json, \"warning\", e.toString(), false);\r\n        log.warn(\"InterruptedException\", e);\r\n      }\r\n\r\n      if (stat.getNumChildren() > 0) {\r\n        json.writeValueSeparator();\r\n        if (indent) {\r\n          json.indent();\r\n        }\r\n        json.writeString(\"children\");\r\n        json.writeNameSeparator();\r\n        json.startArray();\r\n\r\n        try {\r\n          List<String> children = zkClient.getChildren(path, null, true);\r\n          java.util.Collections.sort(children);\r\n\r\n          boolean first = true;\r\n          for (String child : children) {\r\n            if (!first) {\r\n              json.writeValueSeparator();\r\n            }\r\n\r\n            String childPath = path + (path.endsWith(\"/\") ? \"\" : \"/\") + child;\r\n            if (!printTree(json, childPath)) {\r\n              return false;\r\n            }\r\n            first = false;\r\n          }\r\n        } catch (KeeperException e) {\r\n          writeError(500, e.toString());\r\n          return false;\r\n        } catch (InterruptedException e) {\r\n          writeError(500, e.toString());\r\n          return false;\r\n        } catch (IllegalArgumentException e) {\r\n          // path doesn't exist (must have been removed)\r\n          json.writeString(\"(children gone)\");\r\n        }\r\n\r\n        json.endArray();\r\n      }\r\n\r\n      json.endObject();\r\n      return true;\r\n    }\r\n\n","sourceOld":"    void printTree(String path) throws IOException\r\n    {\r\n      String label = path;\r\n      if (!fullpath)\r\n      {\r\n        int idx = path.lastIndexOf('/');\r\n        label = idx > 0 ? path.substring(idx + 1) : path;\r\n      }\r\n  \r\n      //url(label, path, true);\r\n      out.println(\"{\");\r\n      out.println(\"\\\"data\\\" : \\\"\" + label + \"\\\"\");\r\n  \r\n      Stat stat = new Stat();\r\n      try\r\n      {\r\n        byte[] data = zkClient.getData(path, null, stat, true);\r\n  \r\n        if( stat.getEphemeralOwner() != 0 )\r\n        {\r\n          out.println(\", \\\"ephemeral\\\" : true\");\r\n          out.println(\", \\\"version\\\" : \\\"\" + stat.getVersion() + \"\\\"\");\r\n        }\r\n        \r\n        /*\r\n        if (stat.getNumChildren() != 0)\r\n        {\r\n          out.println(\", \\\"children_count\\\" : \\\"\" + stat.getNumChildren() + \"\\\"\");\r\n        }\r\n        */\r\n  \r\n        //if (data != null)\r\n        if( stat.getDataLength() != 0 )\r\n        {\r\n          String str;\r\n          try\r\n          {\r\n            str = new String(data, \"UTF-8\");\r\n            str = str.replaceAll(\"\\\\\\\"\", \"\\\\\\\\\\\"\");\r\n  \r\n            out.print(\", \\\"content\\\" : \\\"\");\r\n            //xmlescape(compress(str));\r\n            out.print(compress(str));\r\n            out.println(\"\\\"\");\r\n          }\r\n          catch (UnsupportedEncodingException e)\r\n          {\r\n            // not UTF8\r\n            StringBuilder sb = new StringBuilder(\"BIN(\");\r\n            sb.append(\"len=\" + data.length);\r\n            sb.append(\"hex=\");\r\n            int limit = Math.min(data.length, maxData / 2);\r\n            for (int i = 0; i < limit; i++)\r\n            {\r\n              byte b = data[i];\r\n              sb.append(StrUtils.HEX_DIGITS[(b >> 4) & 0xf]);\r\n              sb.append(StrUtils.HEX_DIGITS[b & 0xf]);\r\n            }\r\n            if (limit != data.length)\r\n            {\r\n              sb.append(\"...\");\r\n            }\r\n            sb.append(\")\");\r\n            str = sb.toString();\r\n            //out.print(str);\r\n          }\r\n        }\r\n      }\r\n      catch (IllegalArgumentException e)\r\n      {\r\n        // path doesn't exist (must have been removed)\r\n        out.println(\"(path gone)\");\r\n      }\r\n      catch (KeeperException e)\r\n      {\r\n        e.printStackTrace();\r\n      }\r\n      catch (InterruptedException e)\r\n      {\r\n        e.printStackTrace();\r\n      }\r\n  \r\n      if( stat.getNumChildren() > 0 )\r\n      {\r\n        out.print(\", \\\"children\\\" : [\");\r\n  \r\n        List<String> children = null;\r\n        try\r\n        {\r\n          children = zkClient.getChildren(path, null, true);\r\n        }\r\n        catch (KeeperException e)\r\n        {\r\n          exception(e);\r\n          return;\r\n        }\r\n        catch (InterruptedException e)\r\n        {\r\n          exception(e);\r\n        }\r\n        catch (IllegalArgumentException e)\r\n        {\r\n          // path doesn't exist (must have been removed)\r\n          out.println(\"(children gone)\");\r\n        }\r\n  \r\n        Integer i = 0;\r\n        for( String child : children )\r\n        {\r\n          if( 0 != i )\r\n          {\r\n            out.print(\", \");\r\n          }\r\n  \r\n          String childPath = path + (path.endsWith(\"/\") ? \"\" : \"/\") + child;\r\n          printTree( childPath );\r\n  \r\n          i++;\r\n        }\r\n  \r\n        out.println(\"]\");\r\n      }\r\n  \r\n      out.println(\"}\");\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd6ddd3da533988676f6ec21e7e4651a2b2e8345":["2faa4d8af1f20119ec0d38b5ae80ce9e78f10755"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2faa4d8af1f20119ec0d38b5ae80ce9e78f10755":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd6ddd3da533988676f6ec21e7e4651a2b2e8345"]},"commit2Childs":{"dd6ddd3da533988676f6ec21e7e4651a2b2e8345":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2faa4d8af1f20119ec0d38b5ae80ce9e78f10755"],"2faa4d8af1f20119ec0d38b5ae80ce9e78f10755":["dd6ddd3da533988676f6ec21e7e4651a2b2e8345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}