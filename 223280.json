{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getComparator(int,int).mjava","commits":[{"id":"e27b99259bc542853bfc42f809014f56aad988fb","date":1366018447,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getComparator(int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public FieldComparator<?> getComparator(int numHits, int sortPos) throws IOException {\n    FieldComparator<Object> wrappedFieldComparator = (FieldComparator) super.getComparator(numHits + 1, sortPos);\n    if (order) {\n      return new ToParentBlockJoinFieldComparator.Highest(wrappedFieldComparator, parentFilter, childFilter, numHits);\n    } else {\n      return new ToParentBlockJoinFieldComparator.Lowest(wrappedFieldComparator, parentFilter, childFilter, numHits);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db447c88c3c3367999a54f10d9a207f3e63db201","date":1435740861,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getComparator(int,int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getComparator(int,int).mjava","sourceNew":"  @Override\n  public FieldComparator<?> getComparator(int numHits, int sortPos) throws IOException {\n    switch (getType()) {\n      case STRING:\n        return getStringComparator(numHits);\n      case DOUBLE:\n        return getDoubleComparator(numHits);\n      case FLOAT:\n        return getFloatComparator(numHits);\n      case LONG:\n        return getLongComparator(numHits);\n      case INT:\n        return getIntComparator(numHits);\n      default:\n        throw new UnsupportedOperationException(\"Sort type \" + getType() + \" is not supported\");\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public FieldComparator<?> getComparator(int numHits, int sortPos) throws IOException {\n    FieldComparator<Object> wrappedFieldComparator = (FieldComparator) super.getComparator(numHits + 1, sortPos);\n    if (order) {\n      return new ToParentBlockJoinFieldComparator.Highest(wrappedFieldComparator, parentFilter, childFilter, numHits);\n    } else {\n      return new ToParentBlockJoinFieldComparator.Lowest(wrappedFieldComparator, parentFilter, childFilter, numHits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e38c6374c23083c93e212a9498ff0a9c255476","date":1484767039,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getComparator(int,int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getComparator(int,int).mjava","sourceNew":"  @Override\n  public FieldComparator<?> getComparator(int numHits, int sortPos) {\n    switch (getType()) {\n      case STRING:\n        return getStringComparator(numHits);\n      case DOUBLE:\n        return getDoubleComparator(numHits);\n      case FLOAT:\n        return getFloatComparator(numHits);\n      case LONG:\n        return getLongComparator(numHits);\n      case INT:\n        return getIntComparator(numHits);\n      default:\n        throw new UnsupportedOperationException(\"Sort type \" + getType() + \" is not supported\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldComparator<?> getComparator(int numHits, int sortPos) throws IOException {\n    switch (getType()) {\n      case STRING:\n        return getStringComparator(numHits);\n      case DOUBLE:\n        return getDoubleComparator(numHits);\n      case FLOAT:\n        return getFloatComparator(numHits);\n      case LONG:\n        return getLongComparator(numHits);\n      case INT:\n        return getIntComparator(numHits);\n      default:\n        throw new UnsupportedOperationException(\"Sort type \" + getType() + \" is not supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getComparator(int,int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getComparator(int,int).mjava","sourceNew":"  @Override\n  public FieldComparator<?> getComparator(int numHits, int sortPos) {\n    switch (getType()) {\n      case STRING:\n        return getStringComparator(numHits);\n      case DOUBLE:\n        return getDoubleComparator(numHits);\n      case FLOAT:\n        return getFloatComparator(numHits);\n      case LONG:\n        return getLongComparator(numHits);\n      case INT:\n        return getIntComparator(numHits);\n      default:\n        throw new UnsupportedOperationException(\"Sort type \" + getType() + \" is not supported\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldComparator<?> getComparator(int numHits, int sortPos) throws IOException {\n    switch (getType()) {\n      case STRING:\n        return getStringComparator(numHits);\n      case DOUBLE:\n        return getDoubleComparator(numHits);\n      case FLOAT:\n        return getFloatComparator(numHits);\n      case LONG:\n        return getLongComparator(numHits);\n      case INT:\n        return getIntComparator(numHits);\n      default:\n        throw new UnsupportedOperationException(\"Sort type \" + getType() + \" is not supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241","date":1599588987,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getComparator(int,int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinSortField#getComparator(int,int).mjava","sourceNew":"  @Override\n  public FieldComparator<?> getComparator(int numHits, int sortPos) {\n    switch (getType()) {\n      case STRING:\n        return getStringComparator(numHits);\n      case DOUBLE:\n        return getDoubleComparator(numHits, sortPos);\n      case FLOAT:\n        return getFloatComparator(numHits, sortPos);\n      case LONG:\n        return getLongComparator(numHits, sortPos);\n      case INT:\n        return getIntComparator(numHits, sortPos);\n      default:\n        throw new UnsupportedOperationException(\"Sort type \" + getType() + \" is not supported\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldComparator<?> getComparator(int numHits, int sortPos) {\n    switch (getType()) {\n      case STRING:\n        return getStringComparator(numHits);\n      case DOUBLE:\n        return getDoubleComparator(numHits);\n      case FLOAT:\n        return getFloatComparator(numHits);\n      case LONG:\n        return getLongComparator(numHits);\n      case INT:\n        return getIntComparator(numHits);\n      default:\n        throw new UnsupportedOperationException(\"Sort type \" + getType() + \" is not supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db447c88c3c3367999a54f10d9a207f3e63db201":["e27b99259bc542853bfc42f809014f56aad988fb"],"03e38c6374c23083c93e212a9498ff0a9c255476":["db447c88c3c3367999a54f10d9a207f3e63db201"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e27b99259bc542853bfc42f809014f56aad988fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["db447c88c3c3367999a54f10d9a207f3e63db201","03e38c6374c23083c93e212a9498ff0a9c255476"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["03e38c6374c23083c93e212a9498ff0a9c255476"]},"commit2Childs":{"db447c88c3c3367999a54f10d9a207f3e63db201":["03e38c6374c23083c93e212a9498ff0a9c255476","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"03e38c6374c23083c93e212a9498ff0a9c255476":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e27b99259bc542853bfc42f809014f56aad988fb"],"e27b99259bc542853bfc42f809014f56aad988fb":["db447c88c3c3367999a54f10d9a207f3e63db201"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}