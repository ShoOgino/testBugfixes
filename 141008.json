{"path":"lucene/luke/src/java/org/apache/lucene/luke/app/desktop/components/CommitsPanelProvider#showSegmentDetails().mjava","commits":[{"id":"f554f2d9b5456248ab6467b9d4f6015686797a6c","date":1554891357,"type":0,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/app/desktop/components/CommitsPanelProvider#showSegmentDetails().mjava","pathOld":"/dev/null","sourceNew":"  private void showSegmentDetails() {\n    int selectedRow = segmentsTable.getSelectedRow();\n    if (commitGenCombo.getSelectedItem() == null ||\n        selectedRow < 0 || selectedRow >= segmentsTable.getRowCount()) {\n      return;\n    }\n\n    diagRB.setEnabled(true);\n    attrRB.setEnabled(true);\n    codecRB.setEnabled(true);\n\n    long commitGen = (long) commitGenCombo.getSelectedItem();\n    String segName = (String) segmentsTable.getValueAt(selectedRow, SegmentsTableModel.Column.NAME.getIndex());\n    ActionCommand command = ActionCommand.valueOf(rbGroup.getSelection().getActionCommand());\n\n    final DefaultListModel<String> detailsModel = new DefaultListModel<>();\n    switch (command) {\n      case DIAGNOSTICS:\n        commitsModel.getSegmentDiagnostics(commitGen, segName).entrySet().stream()\n            .map(entry -> entry.getKey() + \" = \" + entry.getValue())\n            .forEach(detailsModel::addElement);\n        break;\n      case ATTRIBUTES:\n        commitsModel.getSegmentAttributes(commitGen, segName).entrySet().stream()\n            .map(entry -> entry.getKey() + \" = \" + entry.getValue())\n            .forEach(detailsModel::addElement);\n        break;\n      case CODEC:\n        commitsModel.getSegmentCodec(commitGen, segName).ifPresent(codec -> {\n          Map<String, String> map = new HashMap<>();\n          map.put(\"Codec name\", codec.getName());\n          map.put(\"Codec class name\", codec.getClass().getName());\n          map.put(\"Compound format\", codec.compoundFormat().getClass().getName());\n          map.put(\"DocValues format\", codec.docValuesFormat().getClass().getName());\n          map.put(\"FieldInfos format\", codec.fieldInfosFormat().getClass().getName());\n          map.put(\"LiveDocs format\", codec.liveDocsFormat().getClass().getName());\n          map.put(\"Norms format\", codec.normsFormat().getClass().getName());\n          map.put(\"Points format\", codec.pointsFormat().getClass().getName());\n          map.put(\"Postings format\", codec.postingsFormat().getClass().getName());\n          map.put(\"SegmentInfo format\", codec.segmentInfoFormat().getClass().getName());\n          map.put(\"StoredFields format\", codec.storedFieldsFormat().getClass().getName());\n          map.put(\"TermVectors format\", codec.termVectorsFormat().getClass().getName());\n          map.entrySet().stream()\n              .map(entry -> entry.getKey() + \" = \" + entry.getValue()).forEach(detailsModel::addElement);\n        });\n        break;\n    }\n    segDetailList.setModel(detailsModel);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f554f2d9b5456248ab6467b9d4f6015686797a6c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}