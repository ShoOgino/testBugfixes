{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","commits":[{"id":"c9a0deca56efc5191d6b3c41047fd538f3fae1d8","date":1198156049,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, analyzer);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected = 20+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5a251aa47d1808cbae42c0e172d698c377430e60","5a251aa47d1808cbae42c0e172d698c377430e60"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a251aa47d1808cbae42c0e172d698c377430e60","date":1199375390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else\n          reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else\n          reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, analyzer);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected = 20+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":["c9a0deca56efc5191d6b3c41047fd538f3fae1d8"],"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33","date":1201260752,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else\n          reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else\n          reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDocumentsWriterExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","sourceNew":"  public void xxxtestDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void xxxtestDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(analyzer));\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n          .setAnalyzer(analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(analyzer));\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT)\n          .setAnalyzer(analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, analyzer, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(new Field(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(new Field(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(new Field(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (reader.isDeleted(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33":["5a251aa47d1808cbae42c0e172d698c377430e60"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["09c482d1e63332617181729a225b215c452d8a79","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["0a046c0c310bc77931fc8441bd920053b607dd14"],"c9a0deca56efc5191d6b3c41047fd538f3fae1d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["09c482d1e63332617181729a225b215c452d8a79"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a251aa47d1808cbae42c0e172d698c377430e60":["c9a0deca56efc5191d6b3c41047fd538f3fae1d8"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"b3d08461c77d39c25ea6ff0cd05b32f948fa2a33":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"c9a0deca56efc5191d6b3c41047fd538f3fae1d8":["5a251aa47d1808cbae42c0e172d698c377430e60"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9a0deca56efc5191d6b3c41047fd538f3fae1d8"],"5a251aa47d1808cbae42c0e172d698c377430e60":["b3d08461c77d39c25ea6ff0cd05b32f948fa2a33"],"09c482d1e63332617181729a225b215c452d8a79":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}