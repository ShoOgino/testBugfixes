{"path":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#getIndexCommitByName(String).mjava","commits":[{"id":"91e2345fb81b6c1c7faefa550ee5eaafadc54486","date":1469730189,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#getIndexCommitByName(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method returns the {@linkplain IndexCommit} associated with the specified\n   * <code>commitName</code>. A snapshot with specified <code>commitName</code> must\n   * be created before invoking this method.\n   *\n   * @param commitName The name of persisted commit\n   * @return the {@linkplain IndexCommit}\n   * @throws IOException in case of I/O error.\n   */\n  public Optional<IndexCommit> getIndexCommitByName(String commitName) throws IOException {\n    Optional<IndexCommit> result = Optional.empty();\n    Optional<SnapshotMetaData> metaData = getSnapshotMetaData(commitName);\n    if (metaData.isPresent()) {\n      String indexDirPath = metaData.get().getIndexDirPath();\n      long gen = metaData.get().getGenerationNumber();\n\n      Directory d = solrCore.getDirectoryFactory().get(indexDirPath, DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_NONE);\n      try {\n        result = DirectoryReader.listCommits(d)\n                                .stream()\n                                .filter(ic -> ic.getGeneration() == gen)\n                                .findAny();\n\n        if (!result.isPresent()) {\n          log.warn(\"Unable to find commit with generation {} in the directory {}\", gen, indexDirPath);\n        }\n\n      } finally {\n        solrCore.getDirectoryFactory().release(d);\n      }\n    } else {\n      log.warn(\"Commit with name {} is not persisted for core {}\", commitName, solrCore.getName());\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#getIndexCommitByName(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method returns the {@linkplain IndexCommit} associated with the specified\n   * <code>commitName</code>. A snapshot with specified <code>commitName</code> must\n   * be created before invoking this method.\n   *\n   * @param commitName The name of persisted commit\n   * @return the {@linkplain IndexCommit}\n   * @throws IOException in case of I/O error.\n   */\n  public Optional<IndexCommit> getIndexCommitByName(String commitName) throws IOException {\n    Optional<IndexCommit> result = Optional.empty();\n    Optional<SnapshotMetaData> metaData = getSnapshotMetaData(commitName);\n    if (metaData.isPresent()) {\n      String indexDirPath = metaData.get().getIndexDirPath();\n      long gen = metaData.get().getGenerationNumber();\n\n      Directory d = solrCore.getDirectoryFactory().get(indexDirPath, DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_NONE);\n      try {\n        result = DirectoryReader.listCommits(d)\n                                .stream()\n                                .filter(ic -> ic.getGeneration() == gen)\n                                .findAny();\n\n        if (!result.isPresent()) {\n          log.warn(\"Unable to find commit with generation {} in the directory {}\", gen, indexDirPath);\n        }\n\n      } finally {\n        solrCore.getDirectoryFactory().release(d);\n      }\n    } else {\n      log.warn(\"Commit with name {} is not persisted for core {}\", commitName, solrCore.getName());\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#getIndexCommitByName(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method returns the {@linkplain IndexCommit} associated with the specified\n   * <code>commitName</code>. A snapshot with specified <code>commitName</code> must\n   * be created before invoking this method.\n   *\n   * @param commitName The name of persisted commit\n   * @return the {@linkplain IndexCommit}\n   * @throws IOException in case of I/O error.\n   */\n  public Optional<IndexCommit> getIndexCommitByName(String commitName) throws IOException {\n    Optional<IndexCommit> result = Optional.empty();\n    Optional<SnapshotMetaData> metaData = getSnapshotMetaData(commitName);\n    if (metaData.isPresent()) {\n      String indexDirPath = metaData.get().getIndexDirPath();\n      long gen = metaData.get().getGenerationNumber();\n\n      Directory d = solrCore.getDirectoryFactory().get(indexDirPath, DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_NONE);\n      try {\n        result = DirectoryReader.listCommits(d)\n                                .stream()\n                                .filter(ic -> ic.getGeneration() == gen)\n                                .findAny();\n\n        if (!result.isPresent()) {\n          log.warn(\"Unable to find commit with generation {} in the directory {}\", gen, indexDirPath);\n        }\n\n      } finally {\n        solrCore.getDirectoryFactory().release(d);\n      }\n    } else {\n      log.warn(\"Commit with name {} is not persisted for core {}\", commitName, solrCore.getName());\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#getIndexCommitByName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#getIndexCommitByName(String).mjava","sourceNew":"  /**\n   * This method returns the {@linkplain IndexCommit} associated with the specified\n   * <code>commitName</code>. A snapshot with specified <code>commitName</code> must\n   * be created before invoking this method.\n   *\n   * @param commitName The name of persisted commit\n   * @return the {@linkplain IndexCommit}\n   * @throws IOException in case of I/O error.\n   */\n  public Optional<IndexCommit> getIndexCommitByName(String commitName) throws IOException {\n    Optional<IndexCommit> result = Optional.empty();\n    Optional<SnapshotMetaData> metaData = getSnapshotMetaData(commitName);\n    if (metaData.isPresent()) {\n      String indexDirPath = metaData.get().getIndexDirPath();\n      long gen = metaData.get().getGenerationNumber();\n\n      Directory d = solrCore.getDirectoryFactory().get(indexDirPath, DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_NONE);\n      try {\n        result = DirectoryReader.listCommits(d)\n                                .stream()\n                                .filter(ic -> ic.getGeneration() == gen)\n                                .findAny();\n\n        if (!result.isPresent()) {\n          log.warn(\"Unable to find commit with generation {} in the directory {}\", gen, indexDirPath);\n        }\n\n      } finally {\n        solrCore.getDirectoryFactory().release(d);\n      }\n    } else {\n      if (log.isWarnEnabled()) {\n        log.warn(\"Commit with name {} is not persisted for core {}\", commitName, solrCore.getName());\n      }\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * This method returns the {@linkplain IndexCommit} associated with the specified\n   * <code>commitName</code>. A snapshot with specified <code>commitName</code> must\n   * be created before invoking this method.\n   *\n   * @param commitName The name of persisted commit\n   * @return the {@linkplain IndexCommit}\n   * @throws IOException in case of I/O error.\n   */\n  public Optional<IndexCommit> getIndexCommitByName(String commitName) throws IOException {\n    Optional<IndexCommit> result = Optional.empty();\n    Optional<SnapshotMetaData> metaData = getSnapshotMetaData(commitName);\n    if (metaData.isPresent()) {\n      String indexDirPath = metaData.get().getIndexDirPath();\n      long gen = metaData.get().getGenerationNumber();\n\n      Directory d = solrCore.getDirectoryFactory().get(indexDirPath, DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_NONE);\n      try {\n        result = DirectoryReader.listCommits(d)\n                                .stream()\n                                .filter(ic -> ic.getGeneration() == gen)\n                                .findAny();\n\n        if (!result.isPresent()) {\n          log.warn(\"Unable to find commit with generation {} in the directory {}\", gen, indexDirPath);\n        }\n\n      } finally {\n        solrCore.getDirectoryFactory().release(d);\n      }\n    } else {\n      log.warn(\"Commit with name {} is not persisted for core {}\", commitName, solrCore.getName());\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#getIndexCommitByName(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#getIndexCommitByName(String).mjava","sourceNew":"  /**\n   * This method returns the {@linkplain IndexCommit} associated with the specified\n   * <code>commitName</code>. A snapshot with specified <code>commitName</code> must\n   * be created before invoking this method.\n   *\n   * @param commitName The name of persisted commit\n   * @return the {@linkplain IndexCommit}\n   * @throws IOException in case of I/O error.\n   */\n  public Optional<IndexCommit> getIndexCommitByName(String commitName) throws IOException {\n    Optional<IndexCommit> result = Optional.empty();\n    Optional<SnapshotMetaData> metaData = getSnapshotMetaData(commitName);\n    if (metaData.isPresent()) {\n      String indexDirPath = metaData.get().getIndexDirPath();\n      long gen = metaData.get().getGenerationNumber();\n\n      Directory d = solrCore.getDirectoryFactory().get(indexDirPath, DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_NONE);\n      try {\n        result = DirectoryReader.listCommits(d)\n                                .stream()\n                                .filter(ic -> ic.getGeneration() == gen)\n                                .findAny();\n\n        if (!result.isPresent()) {\n          log.warn(\"Unable to find commit with generation {} in the directory {}\", gen, indexDirPath);\n        }\n\n      } finally {\n        solrCore.getDirectoryFactory().release(d);\n      }\n    } else {\n      log.warn(\"Commit with name {} is not persisted for core {}\", commitName, solrCore.getName());\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * This method returns the {@linkplain IndexCommit} associated with the specified\n   * <code>commitName</code>. A snapshot with specified <code>commitName</code> must\n   * be created before invoking this method.\n   *\n   * @param commitName The name of persisted commit\n   * @return the {@linkplain IndexCommit}\n   * @throws IOException in case of I/O error.\n   */\n  public Optional<IndexCommit> getIndexCommitByName(String commitName) throws IOException {\n    Optional<IndexCommit> result = Optional.empty();\n    Optional<SnapshotMetaData> metaData = getSnapshotMetaData(commitName);\n    if (metaData.isPresent()) {\n      String indexDirPath = metaData.get().getIndexDirPath();\n      long gen = metaData.get().getGenerationNumber();\n\n      Directory d = solrCore.getDirectoryFactory().get(indexDirPath, DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_NONE);\n      try {\n        result = DirectoryReader.listCommits(d)\n                                .stream()\n                                .filter(ic -> ic.getGeneration() == gen)\n                                .findAny();\n\n        if (!result.isPresent()) {\n          log.warn(\"Unable to find commit with generation {} in the directory {}\", gen, indexDirPath);\n        }\n\n      } finally {\n        solrCore.getDirectoryFactory().release(d);\n      }\n    } else {\n      if (log.isWarnEnabled()) {\n        log.warn(\"Commit with name {} is not persisted for core {}\", commitName, solrCore.getName());\n      }\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"140be51d03394488536f4aacedace29f9b318347":["91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["140be51d03394488536f4aacedace29f9b318347"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"140be51d03394488536f4aacedace29f9b318347":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["140be51d03394488536f4aacedace29f9b318347","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}