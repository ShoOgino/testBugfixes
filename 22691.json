{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertAggregateMetric(String,AggregateMetric,PropertyFilter,boolean,boolean,String,BiConsumer[String,Object]).mjava","commits":[{"id":"e75e40c2252a5624016ad28ba7e8d3354c4d9c86","date":1502965942,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertAggregateMetric(String,AggregateMetric,PropertyFilter,boolean,boolean,String,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertAggregateMetric(String,AggregateMetric,PropertyFilter,boolean,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert an instance of {@link AggregateMetric}.\n   * @param name metric name\n   * @param metric an instance of {@link AggregateMetric}\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertAggregateMetric(String name, AggregateMetric metric,\n      PropertyFilter propertyFilter,\n      boolean skipAggregateValues, boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      if (propertyFilter.accept(MEAN)) {\n        consumer.accept(name + separator + MEAN, metric.getMean());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String, Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", metric.size());\n      filter.accept(MAX, metric.getMax());\n      filter.accept(MIN, metric.getMin());\n      filter.accept(MEAN, metric.getMean());\n      filter.accept(STDDEV, metric.getStdDev());\n      filter.accept(SUM, metric.getSum());\n      if (!(metric.isEmpty() || skipAggregateValues)) {\n        Map<String, Object> values = new LinkedHashMap<>();\n        response.put(VALUES, values);\n        metric.getValues().forEach((k, v) -> {\n          Map<String, Object> map = new LinkedHashMap<>();\n          map.put(\"value\", v.value);\n          map.put(\"updateCount\", v.updateCount.get());\n          values.put(k, map);\n        });\n      }\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Convert an instance of {@link AggregateMetric}.\n   * @param name metric name\n   * @param metric an instance of {@link AggregateMetric}\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertAggregateMetric(String name, AggregateMetric metric,\n      PropertyFilter propertyFilter,\n      boolean skipAggregateValues, boolean simple, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      if (propertyFilter.accept(MEAN)) {\n        consumer.accept(name + \".\" + MEAN, metric.getMean());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String, Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", metric.size());\n      filter.accept(MAX, metric.getMax());\n      filter.accept(MIN, metric.getMin());\n      filter.accept(MEAN, metric.getMean());\n      filter.accept(STDDEV, metric.getStdDev());\n      filter.accept(SUM, metric.getSum());\n      if (!(metric.isEmpty() || skipAggregateValues)) {\n        Map<String, Object> values = new LinkedHashMap<>();\n        response.put(VALUES, values);\n        metric.getValues().forEach((k, v) -> {\n          Map<String, Object> map = new LinkedHashMap<>();\n          map.put(\"value\", v.value);\n          map.put(\"updateCount\", v.updateCount.get());\n          values.put(k, map);\n        });\n      }\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68541eebed1904d72a1ab713fc1afcec49e3f466","date":1502966016,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertAggregateMetric(String,AggregateMetric,PropertyFilter,boolean,boolean,String,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertAggregateMetric(String,AggregateMetric,PropertyFilter,boolean,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert an instance of {@link AggregateMetric}.\n   * @param name metric name\n   * @param metric an instance of {@link AggregateMetric}\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertAggregateMetric(String name, AggregateMetric metric,\n      PropertyFilter propertyFilter,\n      boolean skipAggregateValues, boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      if (propertyFilter.accept(MEAN)) {\n        consumer.accept(name + separator + MEAN, metric.getMean());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String, Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", metric.size());\n      filter.accept(MAX, metric.getMax());\n      filter.accept(MIN, metric.getMin());\n      filter.accept(MEAN, metric.getMean());\n      filter.accept(STDDEV, metric.getStdDev());\n      filter.accept(SUM, metric.getSum());\n      if (!(metric.isEmpty() || skipAggregateValues)) {\n        Map<String, Object> values = new LinkedHashMap<>();\n        response.put(VALUES, values);\n        metric.getValues().forEach((k, v) -> {\n          Map<String, Object> map = new LinkedHashMap<>();\n          map.put(\"value\", v.value);\n          map.put(\"updateCount\", v.updateCount.get());\n          values.put(k, map);\n        });\n      }\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Convert an instance of {@link AggregateMetric}.\n   * @param name metric name\n   * @param metric an instance of {@link AggregateMetric}\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertAggregateMetric(String name, AggregateMetric metric,\n      PropertyFilter propertyFilter,\n      boolean skipAggregateValues, boolean simple, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      if (propertyFilter.accept(MEAN)) {\n        consumer.accept(name + \".\" + MEAN, metric.getMean());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String, Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", metric.size());\n      filter.accept(MAX, metric.getMax());\n      filter.accept(MIN, metric.getMin());\n      filter.accept(MEAN, metric.getMean());\n      filter.accept(STDDEV, metric.getStdDev());\n      filter.accept(SUM, metric.getSum());\n      if (!(metric.isEmpty() || skipAggregateValues)) {\n        Map<String, Object> values = new LinkedHashMap<>();\n        response.put(VALUES, values);\n        metric.getValues().forEach((k, v) -> {\n          Map<String, Object> map = new LinkedHashMap<>();\n          map.put(\"value\", v.value);\n          map.put(\"updateCount\", v.updateCount.get());\n          values.put(k, map);\n        });\n      }\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"233211c3dbff6f367588be5bbb4ac77f72eae193","date":1602085975,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertAggregateMetric(String,AggregateMetric,Predicate[CharSequence],boolean,boolean,String,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertAggregateMetric(String,AggregateMetric,PropertyFilter,boolean,boolean,String,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert an instance of {@link AggregateMetric}.\n   * @param name metric name\n   * @param metric an instance of {@link AggregateMetric}\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertAggregateMetric(String name, AggregateMetric metric,\n      Predicate<CharSequence> propertyFilter,\n      boolean skipAggregateValues, boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      if (propertyFilter.test(MEAN)) {\n        consumer.accept(name + separator + MEAN, metric.getMean());\n      }\n    } else {\n      MapWriter writer = ew -> {\n        BiConsumer<String, Object> filter = (k, v) -> {\n          if (propertyFilter.test(k)) {\n            ew.putNoEx(k, v);\n          }\n        };\n        filter.accept(\"count\", metric.size());\n        filter.accept(MAX, metric.getMax());\n        filter.accept(MIN, metric.getMin());\n        filter.accept(MEAN, metric.getMean());\n        filter.accept(STDDEV, metric.getStdDev());\n        filter.accept(SUM, metric.getSum());\n        if (!(metric.isEmpty() || skipAggregateValues)) {\n          ew.putNoEx(VALUES, (MapWriter) ew1 -> {\n            metric.getValues().forEach((k, v) -> {\n              ew1.putNoEx(k, (MapWriter) ew2 -> {\n                ew2.putNoEx(\"value\", v.value);\n                ew2.putNoEx(\"updateCount\", v.updateCount.get());\n              });\n            });\n          });\n        }\n      };\n      if (writer._size() > 0) {\n        consumer.accept(name, writer);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Convert an instance of {@link AggregateMetric}.\n   * @param name metric name\n   * @param metric an instance of {@link AggregateMetric}\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertAggregateMetric(String name, AggregateMetric metric,\n      PropertyFilter propertyFilter,\n      boolean skipAggregateValues, boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      if (propertyFilter.accept(MEAN)) {\n        consumer.accept(name + separator + MEAN, metric.getMean());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String, Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", metric.size());\n      filter.accept(MAX, metric.getMax());\n      filter.accept(MIN, metric.getMin());\n      filter.accept(MEAN, metric.getMean());\n      filter.accept(STDDEV, metric.getStdDev());\n      filter.accept(SUM, metric.getSum());\n      if (!(metric.isEmpty() || skipAggregateValues)) {\n        Map<String, Object> values = new LinkedHashMap<>();\n        response.put(VALUES, values);\n        metric.getValues().forEach((k, v) -> {\n          Map<String, Object> map = new LinkedHashMap<>();\n          map.put(\"value\", v.value);\n          map.put(\"updateCount\", v.updateCount.get());\n          values.put(k, map);\n        });\n      }\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"68541eebed1904d72a1ab713fc1afcec49e3f466":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["68541eebed1904d72a1ab713fc1afcec49e3f466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["233211c3dbff6f367588be5bbb4ac77f72eae193"]},"commit2Childs":{"68541eebed1904d72a1ab713fc1afcec49e3f466":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68541eebed1904d72a1ab713fc1afcec49e3f466","e75e40c2252a5624016ad28ba7e8d3354c4d9c86"],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":[],"233211c3dbff6f367588be5bbb4ac77f72eae193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e75e40c2252a5624016ad28ba7e8d3354c4d9c86","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}