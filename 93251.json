{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,DocsEnum,boolean,Sorter.DocMap).mjava","commits":[{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,DocsEnum,boolean,Sorter.DocMap).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsEnum#SortingDocsEnum(SortingDocsEnum,DocsEnum,boolean,Sorter.DocMap).mjava","sourceNew":"    SortingDocsEnum(int maxDoc, SortingDocsEnum reuse, final DocsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocFreqSorter(maxDoc);\n        }\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n        sorter = new DocFreqSorter(maxDoc);\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      sorter.reset(docs, freqs);\n      sorter.sort(0, i);\n      upto = i;\n    }\n\n","sourceOld":"    SortingDocsEnum(SortingDocsEnum reuse, final DocsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      new DocFreqSorterTemplate(docs, freqs).timSort(0, i - 1);\n      upto = i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingLeafReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,DocsEnum,boolean,Sorter.DocMap).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader.SortingDocsEnum#SortingDocsEnum(int,SortingDocsEnum,DocsEnum,boolean,Sorter.DocMap).mjava","sourceNew":"    SortingDocsEnum(int maxDoc, SortingDocsEnum reuse, final DocsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocFreqSorter(maxDoc);\n        }\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n        sorter = new DocFreqSorter(maxDoc);\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      sorter.reset(docs, freqs);\n      sorter.sort(0, i);\n      upto = i;\n    }\n\n","sourceOld":"    SortingDocsEnum(int maxDoc, SortingDocsEnum reuse, final DocsEnum in, boolean withFreqs, final Sorter.DocMap docMap) throws IOException {\n      super(in);\n      this.maxDoc = maxDoc;\n      this.withFreqs = withFreqs;\n      if (reuse != null) {\n        if (reuse.maxDoc == maxDoc) {\n          sorter = reuse.sorter;\n        } else {\n          sorter = new DocFreqSorter(maxDoc);\n        }\n        docs = reuse.docs;\n        freqs = reuse.freqs; // maybe null\n      } else {\n        docs = new int[64];\n        sorter = new DocFreqSorter(maxDoc);\n      }\n      docIt = -1;\n      int i = 0;\n      int doc;\n      if (withFreqs) {\n        if (freqs == null || freqs.length < docs.length) {\n          freqs = new int[docs.length];\n        }\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n            freqs = ArrayUtil.grow(freqs, freqs.length + 1);\n          }\n          docs[i] = docMap.oldToNew(doc);\n          freqs[i] = in.freq();\n          ++i;\n        }\n      } else {\n        freqs = null;\n        while ((doc = in.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS){\n          if (i >= docs.length) {\n            docs = ArrayUtil.grow(docs, docs.length + 1);\n          }\n          docs[i++] = docMap.oldToNew(doc);\n        }\n      }\n      // TimSort can save much time compared to other sorts in case of\n      // reverse sorting, or when sorting a concatenation of sorted readers\n      sorter.reset(docs, freqs);\n      sorter.sort(0, i);\n      upto = i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}