{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","sourceNew":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    TokenStream filter = new SnowballFilter(tokenizer, snowballLanguage);\n    InputStream voc = zipFile.getInputStream(zipFile.getEntry(dataDirectory + \"/voc.txt\"));\n    InputStream out = zipFile.getInputStream(zipFile.getEntry(dataDirectory + \"/output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        voc, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        out, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] {expectedWord});\n    }\n    vocReader.close();\n    outputReader.close();\n  }\n\n","sourceOld":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    TokenStream filter = new SnowballFilter(tokenizer, snowballLanguage);\n    InputStream voc = zipFile.getInputStream(zipFile.getEntry(dataDirectory + \"/voc.txt\"));\n    InputStream out = zipFile.getInputStream(zipFile.getEntry(dataDirectory + \"/output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        voc, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        out, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] {expectedWord});\n    }\n    vocReader.close();\n    outputReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8864af8de677008c534d14fc77568b83a6c1361","date":1279109434,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","sourceNew":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(final String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    \n    Analyzer a = new ReusableAnalyzerBase() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName,\n          Reader reader) {\n        Tokenizer t = new KeywordTokenizer(reader);\n        return new TokenStreamComponents(t, new SnowballFilter(t, snowballLanguage));\n      }  \n    };\n    \n    assertVocabulary(a, getDataFile(\"TestSnowballVocabData.zip\"), \n        dataDirectory + \"/voc.txt\", dataDirectory + \"/output.txt\");\n  }\n\n","sourceOld":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    TokenStream filter = new SnowballFilter(tokenizer, snowballLanguage);\n    InputStream voc = zipFile.getInputStream(zipFile.getEntry(dataDirectory + \"/voc.txt\"));\n    InputStream out = zipFile.getInputStream(zipFile.getEntry(dataDirectory + \"/output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        voc, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        out, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] {expectedWord});\n    }\n    vocReader.close();\n    outputReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","sourceNew":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(final String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    \n    Analyzer a = new ReusableAnalyzerBase() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName,\n          Reader reader) {\n        Tokenizer t = new KeywordTokenizer(reader);\n        return new TokenStreamComponents(t, new SnowballFilter(t, snowballLanguage));\n      }  \n    };\n    \n    assertVocabulary(a, getDataFile(\"TestSnowballVocabData.zip\"), \n        dataDirectory + \"/voc.txt\", dataDirectory + \"/output.txt\");\n  }\n\n","sourceOld":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    TokenStream filter = new SnowballFilter(tokenizer, snowballLanguage);\n    InputStream voc = zipFile.getInputStream(zipFile.getEntry(dataDirectory + \"/voc.txt\"));\n    InputStream out = zipFile.getInputStream(zipFile.getEntry(dataDirectory + \"/output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        voc, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        out, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] {expectedWord});\n    }\n    vocReader.close();\n    outputReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","sourceNew":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(final String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    \n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName,\n          Reader reader) {\n        Tokenizer t = new KeywordTokenizer(reader);\n        return new TokenStreamComponents(t, new SnowballFilter(t, snowballLanguage));\n      }  \n    };\n    \n    assertVocabulary(a, getDataFile(\"TestSnowballVocabData.zip\"), \n        dataDirectory + \"/voc.txt\", dataDirectory + \"/output.txt\");\n  }\n\n","sourceOld":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(final String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    \n    Analyzer a = new ReusableAnalyzerBase() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName,\n          Reader reader) {\n        Tokenizer t = new KeywordTokenizer(reader);\n        return new TokenStreamComponents(t, new SnowballFilter(t, snowballLanguage));\n      }  \n    };\n    \n    assertVocabulary(a, getDataFile(\"TestSnowballVocabData.zip\"), \n        dataDirectory + \"/voc.txt\", dataDirectory + \"/output.txt\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","sourceNew":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(final String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    \n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName,\n          Reader reader) {\n        Tokenizer t = new KeywordTokenizer(reader);\n        return new TokenStreamComponents(t, new SnowballFilter(t, snowballLanguage));\n      }  \n    };\n    \n    assertVocabulary(a, getDataFile(\"TestSnowballVocabData.zip\"), \n        dataDirectory + \"/voc.txt\", dataDirectory + \"/output.txt\");\n  }\n\n","sourceOld":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(final String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    \n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName,\n          Reader reader) {\n        Tokenizer t = new KeywordTokenizer(reader);\n        return new TokenStreamComponents(t, new SnowballFilter(t, snowballLanguage));\n      }  \n    };\n    \n    assertVocabulary(a, getDataFile(\"TestSnowballVocabData.zip\"), \n        dataDirectory + \"/voc.txt\", dataDirectory + \"/output.txt\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2f49143da0a5d278a72f741432047fcfa6da996e"],"d8864af8de677008c534d14fc77568b83a6c1361":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f49143da0a5d278a72f741432047fcfa6da996e":["d8864af8de677008c534d14fc77568b83a6c1361"],"5f4e87790277826a2aea119328600dfb07761f32":["0f080986da691a3bba7b757f43ab72cdc82b57ce","d8864af8de677008c534d14fc77568b83a6c1361"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8864af8de677008c534d14fc77568b83a6c1361":["2f49143da0a5d278a72f741432047fcfa6da996e","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"2f49143da0a5d278a72f741432047fcfa6da996e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5f4e87790277826a2aea119328600dfb07761f32":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["d8864af8de677008c534d14fc77568b83a6c1361","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}