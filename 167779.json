{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchema(boolean).mjava","commits":[{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchema(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Persist the schema to local storage or to ZooKeeper */\n  boolean persistManagedSchema(boolean createOnly) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      return persistManagedSchemaToZooKeeper(createOnly);\n    }\n    // Persist locally\n    File managedSchemaFile = new File(loader.getConfigDir(), managedSchemaResourceName);\n    OutputStreamWriter writer = null;\n    try {\n      File parentDir = managedSchemaFile.getParentFile();\n      if ( ! parentDir.isDirectory()) {\n        if ( ! parentDir.mkdirs()) {\n          final String msg = \"Can't create managed schema directory \" + parentDir.getAbsolutePath();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n      final FileOutputStream out = new FileOutputStream(managedSchemaFile);\n      writer = new OutputStreamWriter(out, \"UTF-8\");\n      persist(writer);\n      log.info(\"Upgraded to managed schema at \" + managedSchemaFile.getPath());\n    } catch (IOException e) {\n      final String msg = \"Error persisting managed schema \" + managedSchemaFile;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    } finally {\n      IOUtils.closeQuietly(writer);\n      try {\n        FileUtils.sync(managedSchemaFile);\n      } catch (IOException e) {\n        final String msg = \"Error syncing the managed schema file \" + managedSchemaFile;\n        log.error(msg, e);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchema(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchema(boolean).mjava","sourceNew":"  /** Persist the schema to local storage or to ZooKeeper */\n  boolean persistManagedSchema(boolean createOnly) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      return persistManagedSchemaToZooKeeper(createOnly);\n    }\n    // Persist locally\n    File managedSchemaFile = new File(loader.getConfigDir(), managedSchemaResourceName);\n    OutputStreamWriter writer = null;\n    try {\n      File parentDir = managedSchemaFile.getParentFile();\n      if ( ! parentDir.isDirectory()) {\n        if ( ! parentDir.mkdirs()) {\n          final String msg = \"Can't create managed schema directory \" + parentDir.getAbsolutePath();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n      final FileOutputStream out = new FileOutputStream(managedSchemaFile);\n      writer = new OutputStreamWriter(out, StandardCharsets.UTF_8);\n      persist(writer);\n      log.info(\"Upgraded to managed schema at \" + managedSchemaFile.getPath());\n    } catch (IOException e) {\n      final String msg = \"Error persisting managed schema \" + managedSchemaFile;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    } finally {\n      IOUtils.closeQuietly(writer);\n      try {\n        FileUtils.sync(managedSchemaFile);\n      } catch (IOException e) {\n        final String msg = \"Error syncing the managed schema file \" + managedSchemaFile;\n        log.error(msg, e);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Persist the schema to local storage or to ZooKeeper */\n  boolean persistManagedSchema(boolean createOnly) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      return persistManagedSchemaToZooKeeper(createOnly);\n    }\n    // Persist locally\n    File managedSchemaFile = new File(loader.getConfigDir(), managedSchemaResourceName);\n    OutputStreamWriter writer = null;\n    try {\n      File parentDir = managedSchemaFile.getParentFile();\n      if ( ! parentDir.isDirectory()) {\n        if ( ! parentDir.mkdirs()) {\n          final String msg = \"Can't create managed schema directory \" + parentDir.getAbsolutePath();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n      final FileOutputStream out = new FileOutputStream(managedSchemaFile);\n      writer = new OutputStreamWriter(out, \"UTF-8\");\n      persist(writer);\n      log.info(\"Upgraded to managed schema at \" + managedSchemaFile.getPath());\n    } catch (IOException e) {\n      final String msg = \"Error persisting managed schema \" + managedSchemaFile;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    } finally {\n      IOUtils.closeQuietly(writer);\n      try {\n        FileUtils.sync(managedSchemaFile);\n      } catch (IOException e) {\n        final String msg = \"Error syncing the managed schema file \" + managedSchemaFile;\n        log.error(msg, e);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchema(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchema(boolean).mjava","sourceNew":"  /** Persist the schema to local storage or to ZooKeeper */\n  boolean persistManagedSchema(boolean createOnly) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      return persistManagedSchemaToZooKeeper(createOnly);\n    }\n    // Persist locally\n    File managedSchemaFile = new File(loader.getConfigDir(), managedSchemaResourceName);\n    OutputStreamWriter writer = null;\n    try {\n      File parentDir = managedSchemaFile.getParentFile();\n      if ( ! parentDir.isDirectory()) {\n        if ( ! parentDir.mkdirs()) {\n          final String msg = \"Can't create managed schema directory \" + parentDir.getAbsolutePath();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n      final FileOutputStream out = new FileOutputStream(managedSchemaFile);\n      writer = new OutputStreamWriter(out, StandardCharsets.UTF_8);\n      persist(writer);\n      log.info(\"Upgraded to managed schema at \" + managedSchemaFile.getPath());\n    } catch (IOException e) {\n      final String msg = \"Error persisting managed schema \" + managedSchemaFile;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    } finally {\n      IOUtils.closeQuietly(writer);\n      try {\n        FileUtils.sync(managedSchemaFile);\n      } catch (IOException e) {\n        final String msg = \"Error syncing the managed schema file \" + managedSchemaFile;\n        log.error(msg, e);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Persist the schema to local storage or to ZooKeeper */\n  boolean persistManagedSchema(boolean createOnly) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      return persistManagedSchemaToZooKeeper(createOnly);\n    }\n    // Persist locally\n    File managedSchemaFile = new File(loader.getConfigDir(), managedSchemaResourceName);\n    OutputStreamWriter writer = null;\n    try {\n      File parentDir = managedSchemaFile.getParentFile();\n      if ( ! parentDir.isDirectory()) {\n        if ( ! parentDir.mkdirs()) {\n          final String msg = \"Can't create managed schema directory \" + parentDir.getAbsolutePath();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n      final FileOutputStream out = new FileOutputStream(managedSchemaFile);\n      writer = new OutputStreamWriter(out, \"UTF-8\");\n      persist(writer);\n      log.info(\"Upgraded to managed schema at \" + managedSchemaFile.getPath());\n    } catch (IOException e) {\n      final String msg = \"Error persisting managed schema \" + managedSchemaFile;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    } finally {\n      IOUtils.closeQuietly(writer);\n      try {\n        FileUtils.sync(managedSchemaFile);\n      } catch (IOException e) {\n        final String msg = \"Error syncing the managed schema file \" + managedSchemaFile;\n        log.error(msg, e);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b377fd91b7578d0c02b259b5112d667e4d5f8e6","date":1499349411,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchema(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchema(boolean).mjava","sourceNew":"  /**\n   * Persist the schema to local storage or to ZooKeeper\n   * @param createOnly set to false to allow update of existing schema\n   */\n  public boolean persistManagedSchema(boolean createOnly) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      return persistManagedSchemaToZooKeeper(createOnly);\n    }\n    // Persist locally\n    File managedSchemaFile = new File(loader.getConfigDir(), managedSchemaResourceName);\n    OutputStreamWriter writer = null;\n    try {\n      File parentDir = managedSchemaFile.getParentFile();\n      if ( ! parentDir.isDirectory()) {\n        if ( ! parentDir.mkdirs()) {\n          final String msg = \"Can't create managed schema directory \" + parentDir.getAbsolutePath();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n      final FileOutputStream out = new FileOutputStream(managedSchemaFile);\n      writer = new OutputStreamWriter(out, StandardCharsets.UTF_8);\n      persist(writer);\n      log.info(\"Upgraded to managed schema at \" + managedSchemaFile.getPath());\n    } catch (IOException e) {\n      final String msg = \"Error persisting managed schema \" + managedSchemaFile;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    } finally {\n      IOUtils.closeQuietly(writer);\n      try {\n        FileUtils.sync(managedSchemaFile);\n      } catch (IOException e) {\n        final String msg = \"Error syncing the managed schema file \" + managedSchemaFile;\n        log.error(msg, e);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Persist the schema to local storage or to ZooKeeper */\n  boolean persistManagedSchema(boolean createOnly) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      return persistManagedSchemaToZooKeeper(createOnly);\n    }\n    // Persist locally\n    File managedSchemaFile = new File(loader.getConfigDir(), managedSchemaResourceName);\n    OutputStreamWriter writer = null;\n    try {\n      File parentDir = managedSchemaFile.getParentFile();\n      if ( ! parentDir.isDirectory()) {\n        if ( ! parentDir.mkdirs()) {\n          final String msg = \"Can't create managed schema directory \" + parentDir.getAbsolutePath();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n      final FileOutputStream out = new FileOutputStream(managedSchemaFile);\n      writer = new OutputStreamWriter(out, StandardCharsets.UTF_8);\n      persist(writer);\n      log.info(\"Upgraded to managed schema at \" + managedSchemaFile.getPath());\n    } catch (IOException e) {\n      final String msg = \"Error persisting managed schema \" + managedSchemaFile;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    } finally {\n      IOUtils.closeQuietly(writer);\n      try {\n        FileUtils.sync(managedSchemaFile);\n      } catch (IOException e) {\n        final String msg = \"Error syncing the managed schema file \" + managedSchemaFile;\n        log.error(msg, e);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchema(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchema(boolean).mjava","sourceNew":"  /**\n   * Persist the schema to local storage or to ZooKeeper\n   * @param createOnly set to false to allow update of existing schema\n   */\n  public boolean persistManagedSchema(boolean createOnly) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      return persistManagedSchemaToZooKeeper(createOnly);\n    }\n    // Persist locally\n    File managedSchemaFile = new File(loader.getConfigDir(), managedSchemaResourceName);\n    OutputStreamWriter writer = null;\n    try {\n      File parentDir = managedSchemaFile.getParentFile();\n      if ( ! parentDir.isDirectory()) {\n        if ( ! parentDir.mkdirs()) {\n          final String msg = \"Can't create managed schema directory \" + parentDir.getAbsolutePath();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n      final FileOutputStream out = new FileOutputStream(managedSchemaFile);\n      writer = new OutputStreamWriter(out, StandardCharsets.UTF_8);\n      persist(writer);\n      log.info(\"Upgraded to managed schema at \" + managedSchemaFile.getPath());\n    } catch (IOException e) {\n      final String msg = \"Error persisting managed schema \" + managedSchemaFile;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    } finally {\n      IOUtils.closeQuietly(writer);\n      try {\n        FileUtils.sync(managedSchemaFile);\n      } catch (IOException e) {\n        final String msg = \"Error syncing the managed schema file \" + managedSchemaFile;\n        log.error(msg, e);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Persist the schema to local storage or to ZooKeeper */\n  boolean persistManagedSchema(boolean createOnly) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      return persistManagedSchemaToZooKeeper(createOnly);\n    }\n    // Persist locally\n    File managedSchemaFile = new File(loader.getConfigDir(), managedSchemaResourceName);\n    OutputStreamWriter writer = null;\n    try {\n      File parentDir = managedSchemaFile.getParentFile();\n      if ( ! parentDir.isDirectory()) {\n        if ( ! parentDir.mkdirs()) {\n          final String msg = \"Can't create managed schema directory \" + parentDir.getAbsolutePath();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n      final FileOutputStream out = new FileOutputStream(managedSchemaFile);\n      writer = new OutputStreamWriter(out, StandardCharsets.UTF_8);\n      persist(writer);\n      log.info(\"Upgraded to managed schema at \" + managedSchemaFile.getPath());\n    } catch (IOException e) {\n      final String msg = \"Error persisting managed schema \" + managedSchemaFile;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    } finally {\n      IOUtils.closeQuietly(writer);\n      try {\n        FileUtils.sync(managedSchemaFile);\n      } catch (IOException e) {\n        final String msg = \"Error syncing the managed schema file \" + managedSchemaFile;\n        log.error(msg, e);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchema(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#persistManagedSchema(boolean).mjava","sourceNew":"  /**\n   * Persist the schema to local storage or to ZooKeeper\n   * @param createOnly set to false to allow update of existing schema\n   */\n  public boolean persistManagedSchema(boolean createOnly) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      return persistManagedSchemaToZooKeeper(createOnly);\n    }\n    // Persist locally\n    File managedSchemaFile = new File(loader.getConfigDir(), managedSchemaResourceName);\n    OutputStreamWriter writer = null;\n    try {\n      File parentDir = managedSchemaFile.getParentFile();\n      if ( ! parentDir.isDirectory()) {\n        if ( ! parentDir.mkdirs()) {\n          final String msg = \"Can't create managed schema directory \" + parentDir.getAbsolutePath();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n      final FileOutputStream out = new FileOutputStream(managedSchemaFile);\n      writer = new OutputStreamWriter(out, StandardCharsets.UTF_8);\n      persist(writer);\n      if (log.isInfoEnabled()) {\n        log.info(\"Upgraded to managed schema at {}\", managedSchemaFile.getPath());\n      }\n    } catch (IOException e) {\n      final String msg = \"Error persisting managed schema \" + managedSchemaFile;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    } finally {\n      IOUtils.closeQuietly(writer);\n      try {\n        FileUtils.sync(managedSchemaFile);\n      } catch (IOException e) {\n        final String msg = \"Error syncing the managed schema file \" + managedSchemaFile;\n        log.error(msg, e);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Persist the schema to local storage or to ZooKeeper\n   * @param createOnly set to false to allow update of existing schema\n   */\n  public boolean persistManagedSchema(boolean createOnly) {\n    if (loader instanceof ZkSolrResourceLoader) {\n      return persistManagedSchemaToZooKeeper(createOnly);\n    }\n    // Persist locally\n    File managedSchemaFile = new File(loader.getConfigDir(), managedSchemaResourceName);\n    OutputStreamWriter writer = null;\n    try {\n      File parentDir = managedSchemaFile.getParentFile();\n      if ( ! parentDir.isDirectory()) {\n        if ( ! parentDir.mkdirs()) {\n          final String msg = \"Can't create managed schema directory \" + parentDir.getAbsolutePath();\n          log.error(msg);\n          throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n        }\n      }\n      final FileOutputStream out = new FileOutputStream(managedSchemaFile);\n      writer = new OutputStreamWriter(out, StandardCharsets.UTF_8);\n      persist(writer);\n      log.info(\"Upgraded to managed schema at \" + managedSchemaFile.getPath());\n    } catch (IOException e) {\n      final String msg = \"Error persisting managed schema \" + managedSchemaFile;\n      log.error(msg, e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg, e);\n    } finally {\n      IOUtils.closeQuietly(writer);\n      try {\n        FileUtils.sync(managedSchemaFile);\n      } catch (IOException e) {\n        final String msg = \"Error syncing the managed schema file \" + managedSchemaFile;\n        log.error(msg, e);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["08970e5b8411182a29412c177eff67ec1110095b","7d89d7e4e5101347833eea558851bf4209218619"],"4b377fd91b7578d0c02b259b5112d667e4d5f8e6":["7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e73d8d559120669b47658108d818b637df5456ea":["7d89d7e4e5101347833eea558851bf4209218619","4b377fd91b7578d0c02b259b5112d667e4d5f8e6"],"7d89d7e4e5101347833eea558851bf4209218619":["08970e5b8411182a29412c177eff67ec1110095b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["4b377fd91b7578d0c02b259b5112d667e4d5f8e6"],"08970e5b8411182a29412c177eff67ec1110095b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"4b377fd91b7578d0c02b259b5112d667e4d5f8e6":["e73d8d559120669b47658108d818b637df5456ea","9df8125ba9193a2e2e285ed92157810b1952a244"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08970e5b8411182a29412c177eff67ec1110095b"],"e73d8d559120669b47658108d818b637df5456ea":[],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","4b377fd91b7578d0c02b259b5112d667e4d5f8e6","e73d8d559120669b47658108d818b637df5456ea"],"08970e5b8411182a29412c177eff67ec1110095b":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}