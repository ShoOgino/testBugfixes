{"path":"src/java/org/apache/lucene/index/PositionBasedTermVectorMapper#setExpectations(String,int,boolean,boolean).mjava","commits":[{"id":"b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d","date":1187140494,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/PositionBasedTermVectorMapper#setExpectations(String,int,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Callback mechanism used by the TermVectorReader\n   * @param field  The field being read\n   * @param numTerms The number of terms in the vector\n   * @param storeOffsets Whether offsets are available\n   * @param storePositions Whether positions are available\n   */\n  public void setExpectations(String field, int numTerms, boolean storeOffsets, boolean storePositions) {\n    if (storePositions == false)\n    {\n      throw new RuntimeException(\"You must store positions in order to use this Mapper\");\n    }\n    if (storeOffsets == true)\n    {\n      //ignoring offsets\n    }\n    fieldToTerms = new HashMap(numTerms);\n    this.storeOffsets = storeOffsets;\n    currentField = field;\n    currentPositions = new HashMap();\n    fieldToTerms.put(currentField, currentPositions);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/PositionBasedTermVectorMapper#setExpectations(String,int,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/PositionBasedTermVectorMapper#setExpectations(String,int,boolean,boolean).mjava","sourceNew":"  /**\n   * Callback mechanism used by the TermVectorReader\n   * @param field  The field being read\n   * @param numTerms The number of terms in the vector\n   * @param storeOffsets Whether offsets are available\n   * @param storePositions Whether positions are available\n   */\n  public void setExpectations(String field, int numTerms, boolean storeOffsets, boolean storePositions) {\n    if (storePositions == false)\n    {\n      throw new RuntimeException(\"You must store positions in order to use this Mapper\");\n    }\n    if (storeOffsets == true)\n    {\n      //ignoring offsets\n    }\n    fieldToTerms = new HashMap<String,Map<Integer,TVPositionInfo>>(numTerms);\n    this.storeOffsets = storeOffsets;\n    currentField = field;\n    currentPositions = new HashMap<Integer,TVPositionInfo>();\n    fieldToTerms.put(currentField, currentPositions);\n  }\n\n","sourceOld":"  /**\n   * Callback mechanism used by the TermVectorReader\n   * @param field  The field being read\n   * @param numTerms The number of terms in the vector\n   * @param storeOffsets Whether offsets are available\n   * @param storePositions Whether positions are available\n   */\n  public void setExpectations(String field, int numTerms, boolean storeOffsets, boolean storePositions) {\n    if (storePositions == false)\n    {\n      throw new RuntimeException(\"You must store positions in order to use this Mapper\");\n    }\n    if (storeOffsets == true)\n    {\n      //ignoring offsets\n    }\n    fieldToTerms = new HashMap(numTerms);\n    this.storeOffsets = storeOffsets;\n    currentField = field;\n    currentPositions = new HashMap();\n    fieldToTerms.put(currentField, currentPositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/PositionBasedTermVectorMapper#setExpectations(String,int,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/PositionBasedTermVectorMapper#setExpectations(String,int,boolean,boolean).mjava","sourceNew":"  /**\n   * Callback mechanism used by the TermVectorReader\n   * @param field  The field being read\n   * @param numTerms The number of terms in the vector\n   * @param storeOffsets Whether offsets are available\n   * @param storePositions Whether positions are available\n   */\n  @Override\n  public void setExpectations(String field, int numTerms, boolean storeOffsets, boolean storePositions) {\n    if (storePositions == false)\n    {\n      throw new RuntimeException(\"You must store positions in order to use this Mapper\");\n    }\n    if (storeOffsets == true)\n    {\n      //ignoring offsets\n    }\n    fieldToTerms = new HashMap<String,Map<Integer,TVPositionInfo>>(numTerms);\n    this.storeOffsets = storeOffsets;\n    currentField = field;\n    currentPositions = new HashMap<Integer,TVPositionInfo>();\n    fieldToTerms.put(currentField, currentPositions);\n  }\n\n","sourceOld":"  /**\n   * Callback mechanism used by the TermVectorReader\n   * @param field  The field being read\n   * @param numTerms The number of terms in the vector\n   * @param storeOffsets Whether offsets are available\n   * @param storePositions Whether positions are available\n   */\n  public void setExpectations(String field, int numTerms, boolean storeOffsets, boolean storePositions) {\n    if (storePositions == false)\n    {\n      throw new RuntimeException(\"You must store positions in order to use this Mapper\");\n    }\n    if (storeOffsets == true)\n    {\n      //ignoring offsets\n    }\n    fieldToTerms = new HashMap<String,Map<Integer,TVPositionInfo>>(numTerms);\n    this.storeOffsets = storeOffsets;\n    currentField = field;\n    currentPositions = new HashMap<Integer,TVPositionInfo>();\n    fieldToTerms.put(currentField, currentPositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/PositionBasedTermVectorMapper#setExpectations(String,int,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/PositionBasedTermVectorMapper#setExpectations(String,int,boolean,boolean).mjava","sourceNew":"  /**\n   * Callback mechanism used by the TermVectorReader\n   * @param field  The field being read\n   * @param numTerms The number of terms in the vector\n   * @param storeOffsets Whether offsets are available\n   * @param storePositions Whether positions are available\n   */\n  @Override\n  public void setExpectations(String field, int numTerms, boolean storeOffsets, boolean storePositions) {\n    if (storePositions == false)\n    {\n      throw new RuntimeException(\"You must store positions in order to use this Mapper\");\n    }\n    if (storeOffsets == true)\n    {\n      //ignoring offsets\n    }\n    fieldToTerms = new HashMap<String,Map<Integer,TVPositionInfo>>(numTerms);\n    this.storeOffsets = storeOffsets;\n    currentField = field;\n    currentPositions = new HashMap<Integer,TVPositionInfo>();\n    fieldToTerms.put(currentField, currentPositions);\n  }\n\n","sourceOld":"  /**\n   * Callback mechanism used by the TermVectorReader\n   * @param field  The field being read\n   * @param numTerms The number of terms in the vector\n   * @param storeOffsets Whether offsets are available\n   * @param storePositions Whether positions are available\n   */\n  @Override\n  public void setExpectations(String field, int numTerms, boolean storeOffsets, boolean storePositions) {\n    if (storePositions == false)\n    {\n      throw new RuntimeException(\"You must store positions in order to use this Mapper\");\n    }\n    if (storeOffsets == true)\n    {\n      //ignoring offsets\n    }\n    fieldToTerms = new HashMap<String,Map<Integer,TVPositionInfo>>(numTerms);\n    this.storeOffsets = storeOffsets;\n    currentField = field;\n    currentPositions = new HashMap<Integer,TVPositionInfo>();\n    fieldToTerms.put(currentField, currentPositions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d"],"8a9e385641d717e641408d8fbbc62be8fc766357":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d"],"b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}