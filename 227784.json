{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#another().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#another().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void another() {\n    String xml = \"<root>\\n\"\n            + \"       <contenido id=\\\"10097\\\" idioma=\\\"cat\\\">\\n\"\n            + \"       <antetitulo></antetitulo>\\n\" + \"       <titulo>\\n\"\n            + \"               This is my title\\n\" + \"       </titulo>\\n\"\n            + \"       <resumen>\\n\" + \"               This is my summary\\n\"\n            + \"       </resumen>\\n\" + \"       <texto>\\n\"\n            + \"               This is the body of my text\\n\" + \"       </texto>\\n\"\n            + \"       </contenido>\\n\" + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/contenido\");\n    rr.addField(\"id\", \"/root/contenido/@id\", false);\n    rr.addField(\"title\", \"/root/contenido/titulo\", false);\n    rr.addField(\"resume\", \"/root/contenido/resumen\", false);\n    rr.addField(\"text\", \"/root/contenido/texto\", false);\n\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    Assert.assertEquals(1, l.size());\n    Map<String, Object> m = l.get(0);\n    Assert.assertEquals(\"10097\", m.get(\"id\").toString().trim());\n    Assert.assertEquals(\"This is my title\", m.get(\"title\").toString().trim());\n    Assert\n            .assertEquals(\"This is my summary\", m.get(\"resume\").toString().trim());\n    Assert.assertEquals(\"This is the body of my text\", m.get(\"text\").toString()\n            .trim());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f2a93a28913071a0b713be1d4b8a1181388d550","date":1254814948,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#another().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#another().mjava","sourceNew":"  @Test\n  public void another() {\n    String xml=\"<root>\\n\"\n            + \"       <contenido id=\\\"10097\\\" idioma=\\\"cat\\\">\\n\"\n             + \"    <antetitulo></antetitulo>\\n\"\n             + \"    <titulo>    This is my title             </titulo>\\n\"\n             + \"    <resumen>   This is my summary           </resumen>\\n\"\n             + \"    <texto>     This is the body of my text  </texto>\\n\"\n             + \"    </contenido>\\n\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/contenido\");\n    rr.addField(\"id\", \"/root/contenido/@id\", false);\n    rr.addField(\"title\", \"/root/contenido/titulo\", false);\n    rr.addField(\"resume\",\"/root/contenido/resumen\",false);\n    rr.addField(\"text\", \"/root/contenido/texto\", false);\n\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    Assert.assertEquals(1, l.size());\n    Map<String, Object> m = l.get(0);\n    Assert.assertEquals(\"10097\", m.get(\"id\"));\n    Assert.assertEquals(\"This is my title\", m.get(\"title\").toString().trim());\n    Assert.assertEquals(\"This is my summary\", m.get(\"resume\").toString().trim());\n    Assert.assertEquals(\"This is the body of my text\", m.get(\"text\").toString()\n            .trim());\n  }\n\n","sourceOld":"  @Test\n  public void another() {\n    String xml = \"<root>\\n\"\n            + \"       <contenido id=\\\"10097\\\" idioma=\\\"cat\\\">\\n\"\n            + \"       <antetitulo></antetitulo>\\n\" + \"       <titulo>\\n\"\n            + \"               This is my title\\n\" + \"       </titulo>\\n\"\n            + \"       <resumen>\\n\" + \"               This is my summary\\n\"\n            + \"       </resumen>\\n\" + \"       <texto>\\n\"\n            + \"               This is the body of my text\\n\" + \"       </texto>\\n\"\n            + \"       </contenido>\\n\" + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/contenido\");\n    rr.addField(\"id\", \"/root/contenido/@id\", false);\n    rr.addField(\"title\", \"/root/contenido/titulo\", false);\n    rr.addField(\"resume\", \"/root/contenido/resumen\", false);\n    rr.addField(\"text\", \"/root/contenido/texto\", false);\n\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    Assert.assertEquals(1, l.size());\n    Map<String, Object> m = l.get(0);\n    Assert.assertEquals(\"10097\", m.get(\"id\").toString().trim());\n    Assert.assertEquals(\"This is my title\", m.get(\"title\").toString().trim());\n    Assert\n            .assertEquals(\"This is my summary\", m.get(\"resume\").toString().trim());\n    Assert.assertEquals(\"This is the body of my text\", m.get(\"text\").toString()\n            .trim());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#another().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathRecordReader#another().mjava","sourceNew":"  @Test\n  public void another() {\n    String xml=\"<root>\\n\"\n            + \"       <contenido id=\\\"10097\\\" idioma=\\\"cat\\\">\\n\"\n             + \"    <antetitulo></antetitulo>\\n\"\n             + \"    <titulo>    This is my title             </titulo>\\n\"\n             + \"    <resumen>   This is my summary           </resumen>\\n\"\n             + \"    <texto>     This is the body of my text  </texto>\\n\"\n             + \"    </contenido>\\n\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/contenido\");\n    rr.addField(\"id\", \"/root/contenido/@id\", false);\n    rr.addField(\"title\", \"/root/contenido/titulo\", false);\n    rr.addField(\"resume\",\"/root/contenido/resumen\",false);\n    rr.addField(\"text\", \"/root/contenido/texto\", false);\n\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    Assert.assertEquals(1, l.size());\n    Map<String, Object> m = l.get(0);\n    Assert.assertEquals(\"10097\", m.get(\"id\"));\n    Assert.assertEquals(\"This is my title\", m.get(\"title\").toString().trim());\n    Assert.assertEquals(\"This is my summary\", m.get(\"resume\").toString().trim());\n    Assert.assertEquals(\"This is the body of my text\", m.get(\"text\").toString()\n            .trim());\n  }\n\n","sourceOld":"  @Test\n  public void another() {\n    String xml=\"<root>\\n\"\n            + \"       <contenido id=\\\"10097\\\" idioma=\\\"cat\\\">\\n\"\n             + \"    <antetitulo></antetitulo>\\n\"\n             + \"    <titulo>    This is my title             </titulo>\\n\"\n             + \"    <resumen>   This is my summary           </resumen>\\n\"\n             + \"    <texto>     This is the body of my text  </texto>\\n\"\n             + \"    </contenido>\\n\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/contenido\");\n    rr.addField(\"id\", \"/root/contenido/@id\", false);\n    rr.addField(\"title\", \"/root/contenido/titulo\", false);\n    rr.addField(\"resume\",\"/root/contenido/resumen\",false);\n    rr.addField(\"text\", \"/root/contenido/texto\", false);\n\n    List<Map<String, Object>> l = rr.getAllRecords(new StringReader(xml));\n    Assert.assertEquals(1, l.size());\n    Map<String, Object> m = l.get(0);\n    Assert.assertEquals(\"10097\", m.get(\"id\"));\n    Assert.assertEquals(\"This is my title\", m.get(\"title\").toString().trim());\n    Assert.assertEquals(\"This is my summary\", m.get(\"resume\").toString().trim());\n    Assert.assertEquals(\"This is the body of my text\", m.get(\"text\").toString()\n            .trim());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["7f2a93a28913071a0b713be1d4b8a1181388d550"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f2a93a28913071a0b713be1d4b8a1181388d550":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["7f2a93a28913071a0b713be1d4b8a1181388d550"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"7f2a93a28913071a0b713be1d4b8a1181388d550":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}