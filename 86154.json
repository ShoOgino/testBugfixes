{"path":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","commits":[{"id":"b5a7546047ccde828684837fc8c2f6db49454355","date":1177870170,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // Set the instance directory\n    if( instanceDir != null ) {\n      if( Config.isInstanceDirInitialized() ) {\n        String dir = Config.getInstanceDir();\n        if( !dir.equals( instanceDir ) ) {\n          throw new SolrException( 500, \"already initalized: \"+dir  );\n        }\n      }\n      Config.setInstanceDir( instanceDir );\n    }\n    \n    // If a loggingPath is specified, try using that\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() ) {\n        loggingConfig = new File( new File(Config.getInstanceDir()), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( 500, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // If the Data directory is specified, initalize SolrCore directly\n    if( dataDir != null ) {\n      core = new SolrCore( dataDir, new IndexSchema(instanceDir+\"/conf/schema.xml\"));\n    }\n    else {\n      core = SolrCore.getSolrCore();\n    }\n    parser = new SolrRequestParsers( core, SolrConfig.config );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16959a382a74110bf628cf2e991e82e0000f106a","date":1178151824,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","sourceNew":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( 500, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // Set the instance directory\n    if( instanceDir != null ) {\n      if( Config.isInstanceDirInitialized() ) {\n        String dir = Config.getInstanceDir();\n        if( !dir.equals( instanceDir ) ) {\n          throw new SolrException( 500, \"already initalized: \"+dir  );\n        }\n      }\n      Config.setInstanceDir( instanceDir );\n    }\n    \n    // If the Data directory is specified, initalize SolrCore directly\n    if( dataDir != null ) {\n      core = new SolrCore( dataDir, new IndexSchema(instanceDir+\"/conf/schema.xml\"));\n    }\n    else {\n      core = SolrCore.getSolrCore();\n    }\n    parser = new SolrRequestParsers( core, SolrConfig.config );\n  }\n\n","sourceOld":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // Set the instance directory\n    if( instanceDir != null ) {\n      if( Config.isInstanceDirInitialized() ) {\n        String dir = Config.getInstanceDir();\n        if( !dir.equals( instanceDir ) ) {\n          throw new SolrException( 500, \"already initalized: \"+dir  );\n        }\n      }\n      Config.setInstanceDir( instanceDir );\n    }\n    \n    // If a loggingPath is specified, try using that\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() ) {\n        loggingConfig = new File( new File(Config.getInstanceDir()), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( 500, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // If the Data directory is specified, initalize SolrCore directly\n    if( dataDir != null ) {\n      core = new SolrCore( dataDir, new IndexSchema(instanceDir+\"/conf/schema.xml\"));\n    }\n    else {\n      core = SolrCore.getSolrCore();\n    }\n    parser = new SolrRequestParsers( core, SolrConfig.config );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","sourceNew":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // Set the instance directory\n    if( instanceDir != null ) {\n      if( Config.isInstanceDirInitialized() ) {\n        String dir = Config.getInstanceDir();\n        if( !dir.equals( instanceDir ) ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"already initalized: \"+dir  );\n        }\n      }\n      Config.setInstanceDir( instanceDir );\n    }\n    \n    // If the Data directory is specified, initalize SolrCore directly\n    if( dataDir != null ) {\n      core = new SolrCore( dataDir, new IndexSchema(instanceDir+\"/conf/schema.xml\"));\n    }\n    else {\n      core = SolrCore.getSolrCore();\n    }\n    parser = new SolrRequestParsers( core, SolrConfig.config );\n  }\n\n","sourceOld":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( 500, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // Set the instance directory\n    if( instanceDir != null ) {\n      if( Config.isInstanceDirInitialized() ) {\n        String dir = Config.getInstanceDir();\n        if( !dir.equals( instanceDir ) ) {\n          throw new SolrException( 500, \"already initalized: \"+dir  );\n        }\n      }\n      Config.setInstanceDir( instanceDir );\n    }\n    \n    // If the Data directory is specified, initalize SolrCore directly\n    if( dataDir != null ) {\n      core = new SolrCore( dataDir, new IndexSchema(instanceDir+\"/conf/schema.xml\"));\n    }\n    else {\n      core = SolrCore.getSolrCore();\n    }\n    parser = new SolrRequestParsers( core, SolrConfig.config );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","sourceNew":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // Set the instance directory\n    if( instanceDir != null ) {\n      if( Config.isInstanceDirInitialized() ) {\n        String dir = Config.getInstanceDir();\n        if( !dir.equals( instanceDir ) ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"already initalized: \"+dir  );\n        }\n      }\n      Config.setInstanceDir( instanceDir );\n    }\n    SolrConfig config = SolrConfig.createInstance(\"solrconfig.xml\");\n    \n    // If the Data directory is specified, initialize SolrCore directly\n    if( dataDir != null ) {\n      IndexSchema schema = new IndexSchema(config, instanceDir+\"/conf/schema.xml\");\n      core = new SolrCore( dataDir, config, schema );\n    }\n    else {\n      core = SolrCore.getSolrCore();\n    }\n    parser = new SolrRequestParsers( core );\n  }\n\n","sourceOld":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // Set the instance directory\n    if( instanceDir != null ) {\n      if( Config.isInstanceDirInitialized() ) {\n        String dir = Config.getInstanceDir();\n        if( !dir.equals( instanceDir ) ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"already initalized: \"+dir  );\n        }\n      }\n      Config.setInstanceDir( instanceDir );\n    }\n    \n    // If the Data directory is specified, initalize SolrCore directly\n    if( dataDir != null ) {\n      core = new SolrCore( dataDir, new IndexSchema(instanceDir+\"/conf/schema.xml\"));\n    }\n    else {\n      core = SolrCore.getSolrCore();\n    }\n    parser = new SolrRequestParsers( core, SolrConfig.config );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7","date":1189312484,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","sourceNew":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n// TODO! Set the instance directory\n//    if( instanceDir != null ) {\n//      if( Config.isInstanceDirInitialized() ) {\n//        String dir = Config.getInstanceDir();\n//        if( !dir.equals( instanceDir ) ) {\n//          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"already initalized: \"+dir  );\n//        }\n//      }\n//      Config.setInstanceDir( instanceDir );\n//    }\n    SolrConfig config = SolrConfig.createInstance(\"solrconfig.xml\");\n    \n    // If the Data directory is specified, initialize SolrCore directly\n    if( dataDir != null ) {\n      IndexSchema schema = new IndexSchema(config, instanceDir+\"/conf/schema.xml\");\n      core = new SolrCore( dataDir, config, schema );\n    }\n    else {\n      core = SolrCore.getSolrCore();\n    }\n    parser = new SolrRequestParsers( core );\n  }\n\n","sourceOld":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // Set the instance directory\n    if( instanceDir != null ) {\n      if( Config.isInstanceDirInitialized() ) {\n        String dir = Config.getInstanceDir();\n        if( !dir.equals( instanceDir ) ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"already initalized: \"+dir  );\n        }\n      }\n      Config.setInstanceDir( instanceDir );\n    }\n    SolrConfig config = SolrConfig.createInstance(\"solrconfig.xml\");\n    \n    // If the Data directory is specified, initialize SolrCore directly\n    if( dataDir != null ) {\n      IndexSchema schema = new IndexSchema(config, instanceDir+\"/conf/schema.xml\");\n      core = new SolrCore( dataDir, config, schema );\n    }\n    else {\n      core = SolrCore.getSolrCore();\n    }\n    parser = new SolrRequestParsers( core );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abbfb3ad1f90df8ebf4751c8e72b2756ace50699","date":1190497478,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","sourceNew":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // Initalize SolrConfig\n    SolrConfig config = null;\n    try {\n      config = new SolrConfig(instanceDir, SolrConfig.DEFAULT_CONF_FILE, null);\n      instanceDir = config.getInstanceDir();\n\n      // If the Data directory is specified, initialize SolrCore directly\n      IndexSchema schema = new IndexSchema(config, instanceDir+\"/conf/schema.xml\");\n      core = new SolrCore( dataDir, config, schema );\n      parser = new SolrRequestParsers( true, Long.MAX_VALUE );\n    } \n    catch (Exception ee) {\n      throw new RuntimeException(ee);\n    }\n  }\n\n","sourceOld":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n// TODO! Set the instance directory\n//    if( instanceDir != null ) {\n//      if( Config.isInstanceDirInitialized() ) {\n//        String dir = Config.getInstanceDir();\n//        if( !dir.equals( instanceDir ) ) {\n//          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"already initalized: \"+dir  );\n//        }\n//      }\n//      Config.setInstanceDir( instanceDir );\n//    }\n    SolrConfig config = SolrConfig.createInstance(\"solrconfig.xml\");\n    \n    // If the Data directory is specified, initialize SolrCore directly\n    if( dataDir != null ) {\n      IndexSchema schema = new IndexSchema(config, instanceDir+\"/conf/schema.xml\");\n      core = new SolrCore( dataDir, config, schema );\n    }\n    else {\n      core = SolrCore.getSolrCore();\n    }\n    parser = new SolrRequestParsers( core );\n  }\n\n","bugFix":null,"bugIntro":["52b13ba71dd6ee6763446ac657b380729a8af14e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","sourceNew":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // Initalize SolrConfig\n    SolrConfig config = null;\n    try {\n      config = new SolrConfig(instanceDir, SolrConfig.DEFAULT_CONF_FILE, null);\n      instanceDir = config.getResourceLoader().getInstanceDir();\n\n      // If the Data directory is specified, initialize SolrCore directly\n      IndexSchema schema = new IndexSchema(config, instanceDir+\"/conf/schema.xml\");\n      core = new SolrCore( dataDir, config, schema );\n      parser = new SolrRequestParsers( true, Long.MAX_VALUE );\n    } \n    catch (Exception ee) {\n      throw new RuntimeException(ee);\n    }\n  }\n\n","sourceOld":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // Initalize SolrConfig\n    SolrConfig config = null;\n    try {\n      config = new SolrConfig(instanceDir, SolrConfig.DEFAULT_CONF_FILE, null);\n      instanceDir = config.getInstanceDir();\n\n      // If the Data directory is specified, initialize SolrCore directly\n      IndexSchema schema = new IndexSchema(config, instanceDir+\"/conf/schema.xml\");\n      core = new SolrCore( dataDir, config, schema );\n      parser = new SolrRequestParsers( true, Long.MAX_VALUE );\n    } \n    catch (Exception ee) {\n      throw new RuntimeException(ee);\n    }\n  }\n\n","bugFix":null,"bugIntro":["52b13ba71dd6ee6763446ac657b380729a8af14e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"048361614025800e582bfc7a7b0329dc6fd6a95e","date":1196999392,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","sourceNew":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // Initalize SolrConfig\n    SolrConfig config = null;\n    try {\n      config = new SolrConfig(instanceDir, SolrConfig.DEFAULT_CONF_FILE, null);\n      instanceDir = config.getResourceLoader().getInstanceDir();\n\n      // If the Data directory is specified, initialize SolrCore directly\n      IndexSchema schema = new IndexSchema(config, instanceDir+\"/conf/schema.xml\");\n      core = new SolrCore( \"core\", dataDir, config, schema );\n      parser = new SolrRequestParsers( true, Long.MAX_VALUE );\n    } \n    catch (Exception ee) {\n      throw new RuntimeException(ee);\n    }\n  }\n\n","sourceOld":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // Initalize SolrConfig\n    SolrConfig config = null;\n    try {\n      config = new SolrConfig(instanceDir, SolrConfig.DEFAULT_CONF_FILE, null);\n      instanceDir = config.getResourceLoader().getInstanceDir();\n\n      // If the Data directory is specified, initialize SolrCore directly\n      IndexSchema schema = new IndexSchema(config, instanceDir+\"/conf/schema.xml\");\n      core = new SolrCore( dataDir, config, schema );\n      parser = new SolrRequestParsers( true, Long.MAX_VALUE );\n    } \n    catch (Exception ee) {\n      throw new RuntimeException(ee);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b46f0ccfb6b63c307ea901d48482630e3689042c","date":1198805331,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","sourceNew":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // Initalize SolrConfig\n    SolrConfig config = null;\n    try {\n      config = new SolrConfig(instanceDir, SolrConfig.DEFAULT_CONF_FILE, null);\n      instanceDir = config.getResourceLoader().getInstanceDir();\n\n      // If the Data directory is specified, initialize SolrCore directly\n      IndexSchema schema = new IndexSchema(config, instanceDir+\"/conf/schema.xml\");\n      core = new SolrCore( null, dataDir, config, schema );\n      parser = new SolrRequestParsers( true, Long.MAX_VALUE );\n    } \n    catch (Exception ee) {\n      throw new RuntimeException(ee);\n    }\n  }\n\n","sourceOld":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // Initalize SolrConfig\n    SolrConfig config = null;\n    try {\n      config = new SolrConfig(instanceDir, SolrConfig.DEFAULT_CONF_FILE, null);\n      instanceDir = config.getResourceLoader().getInstanceDir();\n\n      // If the Data directory is specified, initialize SolrCore directly\n      IndexSchema schema = new IndexSchema(config, instanceDir+\"/conf/schema.xml\");\n      core = new SolrCore( \"core\", dataDir, config, schema );\n      parser = new SolrRequestParsers( true, Long.MAX_VALUE );\n    } \n    catch (Exception ee) {\n      throw new RuntimeException(ee);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6dc6ab6902f8f70ae43365947ccf44c25986906d","date":1204603577,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","sourceNew":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // Initialize SolrConfig\n    SolrConfig config = null;\n    try {\n      config = new SolrConfig(instanceDir, SolrConfig.DEFAULT_CONF_FILE, null);\n      instanceDir = config.getResourceLoader().getInstanceDir();\n\n      // If the Data directory is specified, initialize SolrCore directly\n      IndexSchema schema = new IndexSchema(config, instanceDir+\"/conf/schema.xml\", null);\n      core = new SolrCore( null, dataDir, config, schema );\n      parser = new SolrRequestParsers( config );\n    } \n    catch (Exception ee) {\n      throw new RuntimeException(ee);\n    }\n  }\n\n","sourceOld":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // Initalize SolrConfig\n    SolrConfig config = null;\n    try {\n      config = new SolrConfig(instanceDir, SolrConfig.DEFAULT_CONF_FILE, null);\n      instanceDir = config.getResourceLoader().getInstanceDir();\n\n      // If the Data directory is specified, initialize SolrCore directly\n      IndexSchema schema = new IndexSchema(config, instanceDir+\"/conf/schema.xml\");\n      core = new SolrCore( null, dataDir, config, schema );\n      parser = new SolrRequestParsers( true, Long.MAX_VALUE );\n    } \n    catch (Exception ee) {\n      throw new RuntimeException(ee);\n    }\n  }\n\n","bugFix":null,"bugIntro":["52b13ba71dd6ee6763446ac657b380729a8af14e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d5151046764fb8d9662e02d6c5381b2adb69f96d","date":1216394962,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","sourceNew":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // Initialize SolrConfig\n    SolrConfig config = null;\n    try {\n      config = new SolrConfig(instanceDir, SolrConfig.DEFAULT_CONF_FILE, null);\n      instanceDir = config.getResourceLoader().getInstanceDir();\n\n      // If the Data directory is specified, initialize SolrCore directly\n      IndexSchema schema = new IndexSchema(config, instanceDir+\"/conf/schema.xml\", null);\n      core = new SolrCore( null, dataDir, config, schema, null );\n      parser = new SolrRequestParsers( config );\n    } \n    catch (Exception ee) {\n      throw new RuntimeException(ee);\n    }\n  }\n\n","sourceOld":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // Initialize SolrConfig\n    SolrConfig config = null;\n    try {\n      config = new SolrConfig(instanceDir, SolrConfig.DEFAULT_CONF_FILE, null);\n      instanceDir = config.getResourceLoader().getInstanceDir();\n\n      // If the Data directory is specified, initialize SolrCore directly\n      IndexSchema schema = new IndexSchema(config, instanceDir+\"/conf/schema.xml\", null);\n      core = new SolrCore( null, dataDir, config, schema );\n      parser = new SolrRequestParsers( config );\n    } \n    catch (Exception ee) {\n      throw new RuntimeException(ee);\n    }\n  }\n\n","bugFix":null,"bugIntro":["52b13ba71dd6ee6763446ac657b380729a8af14e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"52b13ba71dd6ee6763446ac657b380729a8af14e","date":1223501001,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","sourceNew":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    if( instanceDir == null ) {\n      instanceDir = SolrResourceLoader.locateInstanceDir();\n    }\n    \n    // Initialize \n    try {\n      CoreContainer cores = new CoreContainer(new SolrResourceLoader(instanceDir));\n      SolrConfig solrConfig = new SolrConfig(instanceDir, SolrConfig.DEFAULT_CONF_FILE, null);\n      CoreDescriptor dcore = new CoreDescriptor(cores, \"\", solrConfig.getResourceLoader().getInstanceDir());\n      IndexSchema indexSchema = new IndexSchema(solrConfig, instanceDir+\"/conf/schema.xml\", null);\n      core = new SolrCore( null, dataDir, solrConfig, indexSchema, dcore);\n      cores.register(\"\", core, false);\n      parser = new SolrRequestParsers( solrConfig );\n    } \n    catch (Exception ee) {\n      throw new RuntimeException(ee);\n    }\n  }\n\n","sourceOld":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    // Initialize SolrConfig\n    SolrConfig config = null;\n    try {\n      config = new SolrConfig(instanceDir, SolrConfig.DEFAULT_CONF_FILE, null);\n      instanceDir = config.getResourceLoader().getInstanceDir();\n\n      // If the Data directory is specified, initialize SolrCore directly\n      IndexSchema schema = new IndexSchema(config, instanceDir+\"/conf/schema.xml\", null);\n      core = new SolrCore( null, dataDir, config, schema, null );\n      parser = new SolrRequestParsers( config );\n    } \n    catch (Exception ee) {\n      throw new RuntimeException(ee);\n    }\n  }\n\n","bugFix":["6dc6ab6902f8f70ae43365947ccf44c25986906d","fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","d5151046764fb8d9662e02d6c5381b2adb69f96d","abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#DirectSolrConnection(String,String,String).mjava","sourceNew":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    if( instanceDir == null ) {\n      instanceDir = SolrResourceLoader.locateInstanceDir();\n    }\n    \n    // Initialize \n    try {\n      CoreContainer cores = new CoreContainer(new SolrResourceLoader(instanceDir));\n      SolrConfig solrConfig = new SolrConfig(instanceDir, SolrConfig.DEFAULT_CONF_FILE, null);\n      CoreDescriptor dcore = new CoreDescriptor(cores, \"\", solrConfig.getResourceLoader().getInstanceDir());\n      IndexSchema indexSchema = new IndexSchema(solrConfig, instanceDir+\"/conf/schema.xml\", null);\n      core = new SolrCore( null, dataDir, solrConfig, indexSchema, dcore);\n      cores.register(\"\", core, false);\n      parser = new SolrRequestParsers( solrConfig );\n    } \n    catch (Exception ee) {\n      throw new RuntimeException(ee);\n    }\n  }\n\n","sourceOld":"  /**\n   * This constructor is designed to make it easy for JNI embedded applications \n   * to setup the entire solr environment with a simple interface.  It takes three parameters:\n   * \n   * <code>instanceDir:</code> The solr instance directory.  If null, it will check the standard \n   * places first (JNDI,properties,\"solr\" directory)\n   * \n   * <code>dataDir:</code> where the index is stored. \n   * \n   * <code>loggingPath:</code> Path to a java.util.logging.config.file.  If the path represents\n   * an absolute path or is relative to the CWD, it will use that.  Next it will try a path \n   * relative to the instanceDir.  If none of these files exist, it will error.\n   */\n  public DirectSolrConnection( String instanceDir, String dataDir, String loggingPath )\n  {\n    // If a loggingPath is specified, try using that (this needs to happen first)\n    if( loggingPath != null ) {\n      File loggingConfig = new File( loggingPath );\n      if( !loggingConfig.exists() && instanceDir != null ) {\n        loggingConfig = new File( new File(instanceDir), loggingPath  );\n      }\n      if( loggingConfig.exists() ) {\n        System.setProperty(\"java.util.logging.config.file\", loggingConfig.getAbsolutePath() ); \n      }\n      else {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"can not find logging file: \"+loggingConfig );\n      }\n    }\n    \n    if( instanceDir == null ) {\n      instanceDir = SolrResourceLoader.locateInstanceDir();\n    }\n    \n    // Initialize \n    try {\n      CoreContainer cores = new CoreContainer(new SolrResourceLoader(instanceDir));\n      SolrConfig solrConfig = new SolrConfig(instanceDir, SolrConfig.DEFAULT_CONF_FILE, null);\n      CoreDescriptor dcore = new CoreDescriptor(cores, \"\", solrConfig.getResourceLoader().getInstanceDir());\n      IndexSchema indexSchema = new IndexSchema(solrConfig, instanceDir+\"/conf/schema.xml\", null);\n      core = new SolrCore( null, dataDir, solrConfig, indexSchema, dcore);\n      cores.register(\"\", core, false);\n      parser = new SolrRequestParsers( solrConfig );\n    } \n    catch (Exception ee) {\n      throw new RuntimeException(ee);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"d5151046764fb8d9662e02d6c5381b2adb69f96d":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["b46f0ccfb6b63c307ea901d48482630e3689042c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"52b13ba71dd6ee6763446ac657b380729a8af14e":["d5151046764fb8d9662e02d6c5381b2adb69f96d"],"16959a382a74110bf628cf2e991e82e0000f106a":["b5a7546047ccde828684837fc8c2f6db49454355"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7"],"b46f0ccfb6b63c307ea901d48482630e3689042c":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["16959a382a74110bf628cf2e991e82e0000f106a"],"b5a7546047ccde828684837fc8c2f6db49454355":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["52b13ba71dd6ee6763446ac657b380729a8af14e"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7"],"d5151046764fb8d9662e02d6c5381b2adb69f96d":["52b13ba71dd6ee6763446ac657b380729a8af14e"],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["d5151046764fb8d9662e02d6c5381b2adb69f96d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["b5a7546047ccde828684837fc8c2f6db49454355"],"52b13ba71dd6ee6763446ac657b380729a8af14e":["ad94625fb8d088209f46650c8097196fec67f00c"],"16959a382a74110bf628cf2e991e82e0000f106a":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"b46f0ccfb6b63c307ea901d48482630e3689042c":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["6d6338c87060be5f66757a94945975f3bbd377a9"],"b5a7546047ccde828684837fc8c2f6db49454355":["16959a382a74110bf628cf2e991e82e0000f106a"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["b46f0ccfb6b63c307ea901d48482630e3689042c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}