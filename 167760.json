{"path":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBoost(Query,Token).mjava","commits":[{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBoost(Query,Token).mjava","pathOld":"/dev/null","sourceNew":"  // called from parser\n  Query handleBoost(Query q, Token boost) {\n    if (boost != null) {\n      float boostVal = Float.parseFloat(boost.image);\n      // avoid boosting null queries, such as those caused by stop words\n      if (q != null) {\n        q.setBoost(boostVal);\n      }\n    }\n    return q;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["759d2c8462a6935ee9b8e23c16cc0a096fb329b7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBoost(Query,Token).mjava","pathOld":"/dev/null","sourceNew":"  // called from parser\n  Query handleBoost(Query q, Token boost) {\n    if (boost != null) {\n      float boostVal = Float.parseFloat(boost.image);\n      // avoid boosting null queries, such as those caused by stop words\n      if (q != null) {\n        q.setBoost(boostVal);\n      }\n    }\n    return q;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"759d2c8462a6935ee9b8e23c16cc0a096fb329b7","date":1363901479,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBoost(Query,Token).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBoost(Query,Token).mjava","sourceNew":"  // called from parser\n  Query handleBoost(Query q, Token boost) {\n    if (boost != null) {\n      float boostVal = Float.parseFloat(boost.image);\n      // avoid boosting null queries, such as those caused by stop words\n      if (q != null) {\n        q.setBoost(q.getBoost() * boostVal);\n      }\n    }\n    return q;\n  }\n\n","sourceOld":"  // called from parser\n  Query handleBoost(Query q, Token boost) {\n    if (boost != null) {\n      float boostVal = Float.parseFloat(boost.image);\n      // avoid boosting null queries, such as those caused by stop words\n      if (q != null) {\n        q.setBoost(boostVal);\n      }\n    }\n    return q;\n  }\n\n","bugFix":["3cdb67100dc016748799a77218aa409478372d79"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ef9afbd23e483ed1a80ed787f1640b353275980","date":1426166980,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBoost(Query,Token).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBoost(Query,Token).mjava","sourceNew":"  // called from parser\n  Query handleBoost(Query q, Token boost) {\n    // q==null check is to avoid boosting null queries, such as those caused by stop words\n    if (boost == null || boost.image.length()==0 || q == null) {\n      return q;\n    }\n\n    if (boost.image.charAt(0) == '=') {\n      // syntax looks like foo:x^=3\n      float val = Float.parseFloat(boost.image.substring(1));\n      Query newQ = q;\n      if (// q instanceof FilterQuery ||  // TODO: fix this when FilterQuery is introduced to avoid needless wrapping: SOLR-7219\n          q instanceof ConstantScoreQuery) {\n        newQ.setBoost(val);\n      } else {\n        newQ = new ConstantScoreQuery(q);\n        newQ.setBoost(val);\n      }\n      return newQ;\n    }\n\n    float boostVal = Float.parseFloat(boost.image);\n    q.setBoost(q.getBoost() * boostVal);\n\n    return q;\n  }\n\n","sourceOld":"  // called from parser\n  Query handleBoost(Query q, Token boost) {\n    if (boost != null) {\n      float boostVal = Float.parseFloat(boost.image);\n      // avoid boosting null queries, such as those caused by stop words\n      if (q != null) {\n        q.setBoost(q.getBoost() * boostVal);\n      }\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":["0a33f2146a1bb5ab36a02a7fd15ade021142ea88"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBoost(Query,Token).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBoost(Query,Token).mjava","sourceNew":"  // called from parser\n  Query handleBoost(Query q, Token boost) {\n    // q==null check is to avoid boosting null queries, such as those caused by stop words\n    if (boost == null || boost.image.length()==0 || q == null) {\n      return q;\n    }\n\n    if (boost.image.charAt(0) == '=') {\n      // syntax looks like foo:x^=3\n      float val = Float.parseFloat(boost.image.substring(1));\n      Query newQ = q;\n      if (// q instanceof FilterQuery ||  // TODO: fix this when FilterQuery is introduced to avoid needless wrapping: SOLR-7219\n          q instanceof ConstantScoreQuery) {\n        newQ.setBoost(val);\n      } else {\n        newQ = new ConstantScoreQuery(q);\n        newQ.setBoost(val);\n      }\n      return newQ;\n    }\n\n    float boostVal = Float.parseFloat(boost.image);\n    q.setBoost(q.getBoost() * boostVal);\n\n    return q;\n  }\n\n","sourceOld":"  // called from parser\n  Query handleBoost(Query q, Token boost) {\n    if (boost != null) {\n      float boostVal = Float.parseFloat(boost.image);\n      // avoid boosting null queries, such as those caused by stop words\n      if (q != null) {\n        q.setBoost(q.getBoost() * boostVal);\n      }\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c","date":1438964081,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBoost(Query,Token).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBoost(Query,Token).mjava","sourceNew":"  // called from parser\n  Query handleBoost(Query q, Token boost) {\n    // q==null check is to avoid boosting null queries, such as those caused by stop words\n    if (boost == null || boost.image.length()==0 || q == null) {\n      return q;\n    }\n    if (boost.image.charAt(0) == '=') {\n      // syntax looks like foo:x^=3\n      float val = Float.parseFloat(boost.image.substring(1));\n      Query newQ = q;\n      if (q instanceof FilterQuery || q instanceof ConstantScoreQuery || q instanceof SolrConstantScoreQuery) {\n        newQ.setBoost(val);\n      } else {\n        newQ = new ConstantScoreQuery(q);\n        newQ.setBoost(val);\n      }\n      return newQ;\n    }\n\n    float boostVal = Float.parseFloat(boost.image);\n    q.setBoost(q.getBoost() * boostVal);\n\n    return q;\n  }\n\n","sourceOld":"  // called from parser\n  Query handleBoost(Query q, Token boost) {\n    // q==null check is to avoid boosting null queries, such as those caused by stop words\n    if (boost == null || boost.image.length()==0 || q == null) {\n      return q;\n    }\n\n    if (boost.image.charAt(0) == '=') {\n      // syntax looks like foo:x^=3\n      float val = Float.parseFloat(boost.image.substring(1));\n      Query newQ = q;\n      if (// q instanceof FilterQuery ||  // TODO: fix this when FilterQuery is introduced to avoid needless wrapping: SOLR-7219\n          q instanceof ConstantScoreQuery) {\n        newQ.setBoost(val);\n      } else {\n        newQ = new ConstantScoreQuery(q);\n        newQ.setBoost(val);\n      }\n      return newQ;\n    }\n\n    float boostVal = Float.parseFloat(boost.image);\n    q.setBoost(q.getBoost() * boostVal);\n\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBoost(Query,Token).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBoost(Query,Token).mjava","sourceNew":"  // called from parser\n  Query handleBoost(Query q, Token boost) {\n    // q==null check is to avoid boosting null queries, such as those caused by stop words\n    if (boost == null || boost.image.length()==0 || q == null) {\n      return q;\n    }\n    if (boost.image.charAt(0) == '=') {\n      // syntax looks like foo:x^=3\n      float val = Float.parseFloat(boost.image.substring(1));\n      Query newQ = q;\n      if (q instanceof ConstantScoreQuery || q instanceof SolrConstantScoreQuery) {\n        // skip\n      } else {\n        newQ = new ConstantScoreQuery(q);\n      }\n      return new BoostQuery(newQ, val);\n    }\n\n    float boostVal = Float.parseFloat(boost.image);\n\n    return new BoostQuery(q, boostVal);\n  }\n\n","sourceOld":"  // called from parser\n  Query handleBoost(Query q, Token boost) {\n    // q==null check is to avoid boosting null queries, such as those caused by stop words\n    if (boost == null || boost.image.length()==0 || q == null) {\n      return q;\n    }\n    if (boost.image.charAt(0) == '=') {\n      // syntax looks like foo:x^=3\n      float val = Float.parseFloat(boost.image.substring(1));\n      Query newQ = q;\n      if (q instanceof FilterQuery || q instanceof ConstantScoreQuery || q instanceof SolrConstantScoreQuery) {\n        newQ.setBoost(val);\n      } else {\n        newQ = new ConstantScoreQuery(q);\n        newQ.setBoost(val);\n      }\n      return newQ;\n    }\n\n    float boostVal = Float.parseFloat(boost.image);\n    q.setBoost(q.getBoost() * boostVal);\n\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"68c354ba50abc8ed5c5fe98901e61d68f93952bb","date":1479836000,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBoost(Query,Token).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBoost(Query,Token).mjava","sourceNew":"  // Called from parser\n  // Raw queries are transformed to normal queries before wrapping in a BoostQuery\n  Query handleBoost(Query q, Token boost) {\n    // q==null check is to avoid boosting null queries, such as those caused by stop words\n    if (boost == null || boost.image.length()==0 || q == null) {\n      return q;\n    }\n    if (boost.image.charAt(0) == '=') {\n      // syntax looks like foo:x^=3\n      float val = Float.parseFloat(boost.image.substring(1));\n      Query newQ = q;\n      if (q instanceof ConstantScoreQuery || q instanceof SolrConstantScoreQuery) {\n        // skip\n      } else {\n        newQ = new ConstantScoreQuery( rawToNormal(q) );\n      }\n      return new BoostQuery(newQ, val);\n    }\n\n    float boostVal = Float.parseFloat(boost.image);\n\n    return new BoostQuery( rawToNormal(q), boostVal);\n  }\n\n","sourceOld":"  // called from parser\n  Query handleBoost(Query q, Token boost) {\n    // q==null check is to avoid boosting null queries, such as those caused by stop words\n    if (boost == null || boost.image.length()==0 || q == null) {\n      return q;\n    }\n    if (boost.image.charAt(0) == '=') {\n      // syntax looks like foo:x^=3\n      float val = Float.parseFloat(boost.image.substring(1));\n      Query newQ = q;\n      if (q instanceof ConstantScoreQuery || q instanceof SolrConstantScoreQuery) {\n        // skip\n      } else {\n        newQ = new ConstantScoreQuery(q);\n      }\n      return new BoostQuery(newQ, val);\n    }\n\n    float boostVal = Float.parseFloat(boost.image);\n\n    return new BoostQuery(q, boostVal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBoost(Query,Token).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBoost(Query,Token).mjava","sourceNew":"  // Called from parser\n  // Raw queries are transformed to normal queries before wrapping in a BoostQuery\n  Query handleBoost(Query q, Token boost) {\n    // q==null check is to avoid boosting null queries, such as those caused by stop words\n    if (boost == null || boost.image.length()==0 || q == null) {\n      return q;\n    }\n    if (boost.image.charAt(0) == '=') {\n      // syntax looks like foo:x^=3\n      float val = Float.parseFloat(boost.image.substring(1));\n      Query newQ = q;\n      if (q instanceof ConstantScoreQuery || q instanceof SolrConstantScoreQuery) {\n        // skip\n      } else {\n        newQ = new ConstantScoreQuery( rawToNormal(q) );\n      }\n      return new BoostQuery(newQ, val);\n    }\n\n    float boostVal = Float.parseFloat(boost.image);\n\n    return new BoostQuery( rawToNormal(q), boostVal);\n  }\n\n","sourceOld":"  // called from parser\n  Query handleBoost(Query q, Token boost) {\n    // q==null check is to avoid boosting null queries, such as those caused by stop words\n    if (boost == null || boost.image.length()==0 || q == null) {\n      return q;\n    }\n    if (boost.image.charAt(0) == '=') {\n      // syntax looks like foo:x^=3\n      float val = Float.parseFloat(boost.image.substring(1));\n      Query newQ = q;\n      if (q instanceof ConstantScoreQuery || q instanceof SolrConstantScoreQuery) {\n        // skip\n      } else {\n        newQ = new ConstantScoreQuery(q);\n      }\n      return new BoostQuery(newQ, val);\n    }\n\n    float boostVal = Float.parseFloat(boost.image);\n\n    return new BoostQuery(q, boostVal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a33f2146a1bb5ab36a02a7fd15ade021142ea88","date":1595253088,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBoost(Query,Token).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBoost(Query,Token).mjava","sourceNew":"  // Called from parser\n  // Raw queries are transformed to normal queries before wrapping in a BoostQuery\n  Query handleBoost(Query q, Token boost) {\n    // q==null check is to avoid boosting null queries, such as those caused by stop words\n    if (boost == null || boost.image.length()==0 || q == null) {\n      return q;\n    }\n    if (boost.image.startsWith(\"=\")) {\n      // syntax looks like foo:x^=3\n      float val = Float.parseFloat(boost.image.substring(1));\n      Query newQ = q;\n      if (q instanceof ConstantScoreQuery || q instanceof SolrConstantScoreQuery) {\n        // skip\n      } else {\n        newQ = new ConstantScoreQuery( rawToNormal(q) );\n      }\n      return new BoostQuery(newQ, val);\n    }\n\n    float boostVal = Float.parseFloat(boost.image);\n\n    return new BoostQuery( rawToNormal(q), boostVal);\n  }\n\n","sourceOld":"  // Called from parser\n  // Raw queries are transformed to normal queries before wrapping in a BoostQuery\n  Query handleBoost(Query q, Token boost) {\n    // q==null check is to avoid boosting null queries, such as those caused by stop words\n    if (boost == null || boost.image.length()==0 || q == null) {\n      return q;\n    }\n    if (boost.image.charAt(0) == '=') {\n      // syntax looks like foo:x^=3\n      float val = Float.parseFloat(boost.image.substring(1));\n      Query newQ = q;\n      if (q instanceof ConstantScoreQuery || q instanceof SolrConstantScoreQuery) {\n        // skip\n      } else {\n        newQ = new ConstantScoreQuery( rawToNormal(q) );\n      }\n      return new BoostQuery(newQ, val);\n    }\n\n    float boostVal = Float.parseFloat(boost.image);\n\n    return new BoostQuery( rawToNormal(q), boostVal);\n  }\n\n","bugFix":["7ef9afbd23e483ed1a80ed787f1640b353275980"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a33f2146a1bb5ab36a02a7fd15ade021142ea88":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c":["7ef9afbd23e483ed1a80ed787f1640b353275980"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["759d2c8462a6935ee9b8e23c16cc0a096fb329b7","7ef9afbd23e483ed1a80ed787f1640b353275980"],"727bb765ff2542275f6d31f67be18d7104bae148":["2dfdf766e55e943d942055d7de53c7ad6bc45283","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"3cdb67100dc016748799a77218aa409478372d79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb67100dc016748799a77218aa409478372d79"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c"],"7ef9afbd23e483ed1a80ed787f1640b353275980":["759d2c8462a6935ee9b8e23c16cc0a096fb329b7"],"759d2c8462a6935ee9b8e23c16cc0a096fb329b7":["3cdb67100dc016748799a77218aa409478372d79"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a33f2146a1bb5ab36a02a7fd15ade021142ea88"]},"commit2Childs":{"0a33f2146a1bb5ab36a02a7fd15ade021142ea88":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"727bb765ff2542275f6d31f67be18d7104bae148":[],"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","759d2c8462a6935ee9b8e23c16cc0a096fb329b7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["727bb765ff2542275f6d31f67be18d7104bae148","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"7ef9afbd23e483ed1a80ed787f1640b353275980":["b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"759d2c8462a6935ee9b8e23c16cc0a096fb329b7":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7ef9afbd23e483ed1a80ed787f1640b353275980"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["0a33f2146a1bb5ab36a02a7fd15ade021142ea88","727bb765ff2542275f6d31f67be18d7104bae148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","727bb765ff2542275f6d31f67be18d7104bae148","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}