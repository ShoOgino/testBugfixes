{"path":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#createRandomIndexes().mjava","commits":[{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#createRandomIndexes().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#createRandomIndexes().mjava","sourceNew":"  private void createRandomIndexes() throws IOException {\n    dir1 = newDirectory();\n    dir2 = newDirectory();\n    final int numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc1 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    final IndexWriterConfig iwc2 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    iwc2.setMergePolicy(newSortingMergePolicy(sort));\n    final RandomIndexWriter iw1 = new RandomIndexWriter(new Random(seed), dir1, iwc1);\n    final RandomIndexWriter iw2 = new RandomIndexWriter(new Random(seed), dir2, iwc2);\n    for (int i = 0; i < numDocs; ++i) {\n      if (random().nextInt(5) == 0 && i != numDocs - 1) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw1.deleteDocuments(new Term(\"s\", term));\n        iw2.deleteDocuments(new Term(\"s\", term));\n      }\n      final Document doc = randomDocument();\n      iw1.addDocument(doc);\n      iw2.addDocument(doc);\n      if (random().nextInt(8) == 0) {\n        iw1.commit();\n        iw2.commit();\n      }\n    }\n    // Make sure we have something to merge\n    iw1.commit();\n    iw2.commit();\n    final Document doc = randomDocument();\n    // NOTE: don't use RIW.addDocument directly, since it sometimes commits\n    // which may trigger a merge, at which case forceMerge may not do anything.\n    // With field updates this is a problem, since the updates can go into the\n    // single segment in the index, and threefore the index won't be sorted.\n    // This hurts the assumption of the test later on, that the index is sorted\n    // by SortingMP.\n    iw1.w.addDocument(doc);\n    iw2.w.addDocument(doc);\n\n    // update NDV of docs belonging to one term (covers many documents)\n    final long value = random().nextLong();\n    final String term = RandomPicks.randomFrom(random(), terms);\n    iw1.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    iw2.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    \n    iw1.forceMerge(1);\n    iw2.forceMerge(1);\n    iw1.close();\n    iw2.close();\n    reader = DirectoryReader.open(dir1);\n    sortedReader = DirectoryReader.open(dir2);\n  }\n\n","sourceOld":"  private void createRandomIndexes() throws IOException {\n    dir1 = newDirectory();\n    dir2 = newDirectory();\n    final int numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc1 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    final IndexWriterConfig iwc2 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    iwc2.setMergePolicy(newSortingMergePolicy(sort));\n    final RandomIndexWriter iw1 = new RandomIndexWriter(new Random(seed), dir1, iwc1);\n    final RandomIndexWriter iw2 = new RandomIndexWriter(new Random(seed), dir2, iwc2);\n    for (int i = 0; i < numDocs; ++i) {\n      if (random().nextInt(5) == 0 && i != numDocs - 1) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw1.deleteDocuments(new Term(\"s\", term));\n        iw2.deleteDocuments(new Term(\"s\", term));\n      }\n      final Document doc = randomDocument();\n      iw1.addDocument(doc);\n      iw2.addDocument(doc);\n      if (random().nextInt(8) == 0) {\n        iw1.commit();\n        iw2.commit();\n      }\n    }\n    // Make sure we have something to merge\n    iw1.commit();\n    iw2.commit();\n    final Document doc = randomDocument();\n    // NOTE: don't use RIW.addDocument directly, since it sometimes commits\n    // which may trigger a merge, at which case forceMerge may not do anything.\n    // With field updates this is a problem, since the updates can go into the\n    // single segment in the index, and threefore the index won't be sorted.\n    // This hurts the assumption of the test later on, that the index is sorted\n    // by SortingMP.\n    iw1.w.addDocument(doc);\n    iw2.w.addDocument(doc);\n\n    // update NDV of docs belonging to one term (covers many documents)\n    final long value = random().nextLong();\n    final String term = RandomPicks.randomFrom(random(), terms);\n    iw1.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    iw2.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    \n    iw1.forceMerge(1);\n    iw2.forceMerge(1);\n    iw1.close();\n    iw2.close();\n    reader = DirectoryReader.open(dir1);\n    sortedReader = DirectoryReader.open(dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a8461944a2fa90888fc4e598e5c02ac5338d03f","date":1454349069,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#createRandomIndexes().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#createRandomIndexes().mjava","sourceNew":"  private void createRandomIndexes() throws IOException {\n    dir1 = newDirectory();\n    dir2 = newDirectory();\n    final int numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc1 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    final IndexWriterConfig iwc2 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    iwc2.setMergePolicy(mergePolicy());\n    final RandomIndexWriter iw1 = new RandomIndexWriter(new Random(seed), dir1, iwc1);\n    final RandomIndexWriter iw2 = new RandomIndexWriter(new Random(seed), dir2, iwc2);\n    for (int i = 0; i < numDocs; ++i) {\n      if (random().nextInt(5) == 0 && i != numDocs - 1) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw1.deleteDocuments(new Term(\"s\", term));\n        iw2.deleteDocuments(new Term(\"s\", term));\n      }\n      final Document doc = randomDocument();\n      iw1.addDocument(doc);\n      iw2.addDocument(doc);\n      if (random().nextInt(8) == 0) {\n        iw1.commit();\n        iw2.commit();\n      }\n    }\n    // Make sure we have something to merge\n    iw1.commit();\n    iw2.commit();\n    final Document doc = randomDocument();\n    // NOTE: don't use RIW.addDocument directly, since it sometimes commits\n    // which may trigger a merge, at which case forceMerge may not do anything.\n    // With field updates this is a problem, since the updates can go into the\n    // single segment in the index, and threefore the index won't be sorted.\n    // This hurts the assumption of the test later on, that the index is sorted\n    // by SortingMP.\n    iw1.w.addDocument(doc);\n    iw2.w.addDocument(doc);\n\n    // update NDV of docs belonging to one term (covers many documents)\n    final long value = random().nextLong();\n    final String term = RandomPicks.randomFrom(random(), terms);\n    iw1.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    iw2.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    \n    iw1.forceMerge(1);\n    iw2.forceMerge(1);\n    iw1.close();\n    iw2.close();\n    reader = DirectoryReader.open(dir1);\n    sortedReader = DirectoryReader.open(dir2);\n  }\n\n","sourceOld":"  private void createRandomIndexes() throws IOException {\n    dir1 = newDirectory();\n    dir2 = newDirectory();\n    final int numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc1 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    final IndexWriterConfig iwc2 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    iwc2.setMergePolicy(newSortingMergePolicy(sort));\n    final RandomIndexWriter iw1 = new RandomIndexWriter(new Random(seed), dir1, iwc1);\n    final RandomIndexWriter iw2 = new RandomIndexWriter(new Random(seed), dir2, iwc2);\n    for (int i = 0; i < numDocs; ++i) {\n      if (random().nextInt(5) == 0 && i != numDocs - 1) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw1.deleteDocuments(new Term(\"s\", term));\n        iw2.deleteDocuments(new Term(\"s\", term));\n      }\n      final Document doc = randomDocument();\n      iw1.addDocument(doc);\n      iw2.addDocument(doc);\n      if (random().nextInt(8) == 0) {\n        iw1.commit();\n        iw2.commit();\n      }\n    }\n    // Make sure we have something to merge\n    iw1.commit();\n    iw2.commit();\n    final Document doc = randomDocument();\n    // NOTE: don't use RIW.addDocument directly, since it sometimes commits\n    // which may trigger a merge, at which case forceMerge may not do anything.\n    // With field updates this is a problem, since the updates can go into the\n    // single segment in the index, and threefore the index won't be sorted.\n    // This hurts the assumption of the test later on, that the index is sorted\n    // by SortingMP.\n    iw1.w.addDocument(doc);\n    iw2.w.addDocument(doc);\n\n    // update NDV of docs belonging to one term (covers many documents)\n    final long value = random().nextLong();\n    final String term = RandomPicks.randomFrom(random(), terms);\n    iw1.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    iw2.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    \n    iw1.forceMerge(1);\n    iw2.forceMerge(1);\n    iw1.close();\n    iw2.close();\n    reader = DirectoryReader.open(dir1);\n    sortedReader = DirectoryReader.open(dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#createRandomIndexes().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#createRandomIndexes().mjava","sourceNew":"  private void createRandomIndexes() throws IOException {\n    dir1 = newDirectory();\n    dir2 = newDirectory();\n    final int numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc1 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    final IndexWriterConfig iwc2 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    iwc2.setMergePolicy(mergePolicy());\n    final RandomIndexWriter iw1 = new RandomIndexWriter(new Random(seed), dir1, iwc1);\n    final RandomIndexWriter iw2 = new RandomIndexWriter(new Random(seed), dir2, iwc2);\n    for (int i = 0; i < numDocs; ++i) {\n      if (random().nextInt(5) == 0 && i != numDocs - 1) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw1.deleteDocuments(new Term(\"s\", term));\n        iw2.deleteDocuments(new Term(\"s\", term));\n      }\n      final Document doc = randomDocument();\n      iw1.addDocument(doc);\n      iw2.addDocument(doc);\n      if (random().nextInt(8) == 0) {\n        iw1.commit();\n        iw2.commit();\n      }\n    }\n    // Make sure we have something to merge\n    iw1.commit();\n    iw2.commit();\n    final Document doc = randomDocument();\n    // NOTE: don't use RIW.addDocument directly, since it sometimes commits\n    // which may trigger a merge, at which case forceMerge may not do anything.\n    // With field updates this is a problem, since the updates can go into the\n    // single segment in the index, and threefore the index won't be sorted.\n    // This hurts the assumption of the test later on, that the index is sorted\n    // by SortingMP.\n    iw1.w.addDocument(doc);\n    iw2.w.addDocument(doc);\n\n    // update NDV of docs belonging to one term (covers many documents)\n    final long value = random().nextLong();\n    final String term = RandomPicks.randomFrom(random(), terms);\n    iw1.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    iw2.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    \n    iw1.forceMerge(1);\n    iw2.forceMerge(1);\n    iw1.close();\n    iw2.close();\n    reader = DirectoryReader.open(dir1);\n    sortedReader = DirectoryReader.open(dir2);\n  }\n\n","sourceOld":"  private void createRandomIndexes() throws IOException {\n    dir1 = newDirectory();\n    dir2 = newDirectory();\n    final int numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc1 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    final IndexWriterConfig iwc2 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    iwc2.setMergePolicy(newSortingMergePolicy(sort));\n    final RandomIndexWriter iw1 = new RandomIndexWriter(new Random(seed), dir1, iwc1);\n    final RandomIndexWriter iw2 = new RandomIndexWriter(new Random(seed), dir2, iwc2);\n    for (int i = 0; i < numDocs; ++i) {\n      if (random().nextInt(5) == 0 && i != numDocs - 1) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw1.deleteDocuments(new Term(\"s\", term));\n        iw2.deleteDocuments(new Term(\"s\", term));\n      }\n      final Document doc = randomDocument();\n      iw1.addDocument(doc);\n      iw2.addDocument(doc);\n      if (random().nextInt(8) == 0) {\n        iw1.commit();\n        iw2.commit();\n      }\n    }\n    // Make sure we have something to merge\n    iw1.commit();\n    iw2.commit();\n    final Document doc = randomDocument();\n    // NOTE: don't use RIW.addDocument directly, since it sometimes commits\n    // which may trigger a merge, at which case forceMerge may not do anything.\n    // With field updates this is a problem, since the updates can go into the\n    // single segment in the index, and threefore the index won't be sorted.\n    // This hurts the assumption of the test later on, that the index is sorted\n    // by SortingMP.\n    iw1.w.addDocument(doc);\n    iw2.w.addDocument(doc);\n\n    // update NDV of docs belonging to one term (covers many documents)\n    final long value = random().nextLong();\n    final String term = RandomPicks.randomFrom(random(), terms);\n    iw1.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    iw2.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    \n    iw1.forceMerge(1);\n    iw2.forceMerge(1);\n    iw1.close();\n    iw2.close();\n    reader = DirectoryReader.open(dir1);\n    sortedReader = DirectoryReader.open(dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#createRandomIndexes().mjava","sourceNew":null,"sourceOld":"  private void createRandomIndexes() throws IOException {\n    dir1 = newDirectory();\n    dir2 = newDirectory();\n    final int numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc1 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    final IndexWriterConfig iwc2 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    iwc2.setMergePolicy(mergePolicy());\n    final RandomIndexWriter iw1 = new RandomIndexWriter(new Random(seed), dir1, iwc1);\n    final RandomIndexWriter iw2 = new RandomIndexWriter(new Random(seed), dir2, iwc2);\n    for (int i = 0; i < numDocs; ++i) {\n      if (random().nextInt(5) == 0 && i != numDocs - 1) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw1.deleteDocuments(new Term(\"s\", term));\n        iw2.deleteDocuments(new Term(\"s\", term));\n      }\n      final Document doc = randomDocument();\n      iw1.addDocument(doc);\n      iw2.addDocument(doc);\n      if (random().nextInt(8) == 0) {\n        iw1.commit();\n        iw2.commit();\n      }\n    }\n    // Make sure we have something to merge\n    iw1.commit();\n    iw2.commit();\n    final Document doc = randomDocument();\n    // NOTE: don't use RIW.addDocument directly, since it sometimes commits\n    // which may trigger a merge, at which case forceMerge may not do anything.\n    // With field updates this is a problem, since the updates can go into the\n    // single segment in the index, and threefore the index won't be sorted.\n    // This hurts the assumption of the test later on, that the index is sorted\n    // by SortingMP.\n    iw1.w.addDocument(doc);\n    iw2.w.addDocument(doc);\n\n    // update NDV of docs belonging to one term (covers many documents)\n    final long value = random().nextLong();\n    final String term = RandomPicks.randomFrom(random(), terms);\n    iw1.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    iw2.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    \n    iw1.forceMerge(1);\n    iw2.forceMerge(1);\n    iw1.close();\n    iw2.close();\n    reader = DirectoryReader.open(dir1);\n    sortedReader = DirectoryReader.open(dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#createRandomIndexes().mjava","sourceNew":null,"sourceOld":"  private void createRandomIndexes() throws IOException {\n    dir1 = newDirectory();\n    dir2 = newDirectory();\n    final int numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc1 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    final IndexWriterConfig iwc2 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    iwc2.setMergePolicy(mergePolicy());\n    final RandomIndexWriter iw1 = new RandomIndexWriter(new Random(seed), dir1, iwc1);\n    final RandomIndexWriter iw2 = new RandomIndexWriter(new Random(seed), dir2, iwc2);\n    for (int i = 0; i < numDocs; ++i) {\n      if (random().nextInt(5) == 0 && i != numDocs - 1) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw1.deleteDocuments(new Term(\"s\", term));\n        iw2.deleteDocuments(new Term(\"s\", term));\n      }\n      final Document doc = randomDocument();\n      iw1.addDocument(doc);\n      iw2.addDocument(doc);\n      if (random().nextInt(8) == 0) {\n        iw1.commit();\n        iw2.commit();\n      }\n    }\n    // Make sure we have something to merge\n    iw1.commit();\n    iw2.commit();\n    final Document doc = randomDocument();\n    // NOTE: don't use RIW.addDocument directly, since it sometimes commits\n    // which may trigger a merge, at which case forceMerge may not do anything.\n    // With field updates this is a problem, since the updates can go into the\n    // single segment in the index, and threefore the index won't be sorted.\n    // This hurts the assumption of the test later on, that the index is sorted\n    // by SortingMP.\n    iw1.w.addDocument(doc);\n    iw2.w.addDocument(doc);\n\n    // update NDV of docs belonging to one term (covers many documents)\n    final long value = random().nextLong();\n    final String term = RandomPicks.randomFrom(random(), terms);\n    iw1.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    iw2.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    \n    iw1.forceMerge(1);\n    iw2.forceMerge(1);\n    iw1.close();\n    iw2.close();\n    reader = DirectoryReader.open(dir1);\n    sortedReader = DirectoryReader.open(dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#createRandomIndexes().mjava","sourceNew":null,"sourceOld":"  private void createRandomIndexes() throws IOException {\n    dir1 = newDirectory();\n    dir2 = newDirectory();\n    final int numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc1 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    final IndexWriterConfig iwc2 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    iwc2.setMergePolicy(mergePolicy());\n    final RandomIndexWriter iw1 = new RandomIndexWriter(new Random(seed), dir1, iwc1);\n    final RandomIndexWriter iw2 = new RandomIndexWriter(new Random(seed), dir2, iwc2);\n    for (int i = 0; i < numDocs; ++i) {\n      if (random().nextInt(5) == 0 && i != numDocs - 1) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw1.deleteDocuments(new Term(\"s\", term));\n        iw2.deleteDocuments(new Term(\"s\", term));\n      }\n      final Document doc = randomDocument();\n      iw1.addDocument(doc);\n      iw2.addDocument(doc);\n      if (random().nextInt(8) == 0) {\n        iw1.commit();\n        iw2.commit();\n      }\n    }\n    // Make sure we have something to merge\n    iw1.commit();\n    iw2.commit();\n    final Document doc = randomDocument();\n    // NOTE: don't use RIW.addDocument directly, since it sometimes commits\n    // which may trigger a merge, at which case forceMerge may not do anything.\n    // With field updates this is a problem, since the updates can go into the\n    // single segment in the index, and threefore the index won't be sorted.\n    // This hurts the assumption of the test later on, that the index is sorted\n    // by SortingMP.\n    iw1.w.addDocument(doc);\n    iw2.w.addDocument(doc);\n\n    // update NDV of docs belonging to one term (covers many documents)\n    final long value = random().nextLong();\n    final String term = RandomPicks.randomFrom(random(), terms);\n    iw1.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    iw2.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    \n    iw1.forceMerge(1);\n    iw2.forceMerge(1);\n    iw1.close();\n    iw2.close();\n    reader = DirectoryReader.open(dir1);\n    sortedReader = DirectoryReader.open(dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#createRandomIndexes().mjava","sourceNew":null,"sourceOld":"  private void createRandomIndexes() throws IOException {\n    dir1 = newDirectory();\n    dir2 = newDirectory();\n    final int numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc1 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    final IndexWriterConfig iwc2 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    iwc2.setMergePolicy(mergePolicy());\n    final RandomIndexWriter iw1 = new RandomIndexWriter(new Random(seed), dir1, iwc1);\n    final RandomIndexWriter iw2 = new RandomIndexWriter(new Random(seed), dir2, iwc2);\n    for (int i = 0; i < numDocs; ++i) {\n      if (random().nextInt(5) == 0 && i != numDocs - 1) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw1.deleteDocuments(new Term(\"s\", term));\n        iw2.deleteDocuments(new Term(\"s\", term));\n      }\n      final Document doc = randomDocument();\n      iw1.addDocument(doc);\n      iw2.addDocument(doc);\n      if (random().nextInt(8) == 0) {\n        iw1.commit();\n        iw2.commit();\n      }\n    }\n    // Make sure we have something to merge\n    iw1.commit();\n    iw2.commit();\n    final Document doc = randomDocument();\n    // NOTE: don't use RIW.addDocument directly, since it sometimes commits\n    // which may trigger a merge, at which case forceMerge may not do anything.\n    // With field updates this is a problem, since the updates can go into the\n    // single segment in the index, and threefore the index won't be sorted.\n    // This hurts the assumption of the test later on, that the index is sorted\n    // by SortingMP.\n    iw1.w.addDocument(doc);\n    iw2.w.addDocument(doc);\n\n    // update NDV of docs belonging to one term (covers many documents)\n    final long value = random().nextLong();\n    final String term = RandomPicks.randomFrom(random(), terms);\n    iw1.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    iw2.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    \n    iw1.forceMerge(1);\n    iw2.forceMerge(1);\n    iw1.close();\n    iw2.close();\n    reader = DirectoryReader.open(dir1);\n    sortedReader = DirectoryReader.open(dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#createRandomIndexes().mjava","sourceNew":null,"sourceOld":"  private void createRandomIndexes() throws IOException {\n    dir1 = newDirectory();\n    dir2 = newDirectory();\n    final int numDocs = atLeast(150);\n    final int numTerms = TestUtil.nextInt(random(), 1, numDocs / 5);\n    Set<String> randomTerms = new HashSet<>();\n    while (randomTerms.size() < numTerms) {\n      randomTerms.add(TestUtil.randomSimpleString(random()));\n    }\n    terms = new ArrayList<>(randomTerms);\n    final long seed = random().nextLong();\n    final IndexWriterConfig iwc1 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    final IndexWriterConfig iwc2 = newIndexWriterConfig(new MockAnalyzer(new Random(seed)));\n    iwc2.setMergePolicy(mergePolicy());\n    final RandomIndexWriter iw1 = new RandomIndexWriter(new Random(seed), dir1, iwc1);\n    final RandomIndexWriter iw2 = new RandomIndexWriter(new Random(seed), dir2, iwc2);\n    for (int i = 0; i < numDocs; ++i) {\n      if (random().nextInt(5) == 0 && i != numDocs - 1) {\n        final String term = RandomPicks.randomFrom(random(), terms);\n        iw1.deleteDocuments(new Term(\"s\", term));\n        iw2.deleteDocuments(new Term(\"s\", term));\n      }\n      final Document doc = randomDocument();\n      iw1.addDocument(doc);\n      iw2.addDocument(doc);\n      if (random().nextInt(8) == 0) {\n        iw1.commit();\n        iw2.commit();\n      }\n    }\n    // Make sure we have something to merge\n    iw1.commit();\n    iw2.commit();\n    final Document doc = randomDocument();\n    // NOTE: don't use RIW.addDocument directly, since it sometimes commits\n    // which may trigger a merge, at which case forceMerge may not do anything.\n    // With field updates this is a problem, since the updates can go into the\n    // single segment in the index, and threefore the index won't be sorted.\n    // This hurts the assumption of the test later on, that the index is sorted\n    // by SortingMP.\n    iw1.w.addDocument(doc);\n    iw2.w.addDocument(doc);\n\n    // update NDV of docs belonging to one term (covers many documents)\n    final long value = random().nextLong();\n    final String term = RandomPicks.randomFrom(random(), terms);\n    iw1.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    iw2.w.updateNumericDocValue(new Term(\"s\", term), \"ndv\", value);\n    \n    iw1.forceMerge(1);\n    iw2.forceMerge(1);\n    iw1.close();\n    iw2.close();\n    reader = DirectoryReader.open(dir1);\n    sortedReader = DirectoryReader.open(dir2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["9a8461944a2fa90888fc4e598e5c02ac5338d03f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","9a8461944a2fa90888fc4e598e5c02ac5338d03f"],"0ad30c6a479e764150a3316e57263319775f1df2":["9a8461944a2fa90888fc4e598e5c02ac5338d03f","3d33e731a93d4b57e662ff094f64f94a745422d4"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a8461944a2fa90888fc4e598e5c02ac5338d03f":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["9a8461944a2fa90888fc4e598e5c02ac5338d03f","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9a8461944a2fa90888fc4e598e5c02ac5338d03f","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["9a8461944a2fa90888fc4e598e5c02ac5338d03f","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","9a8461944a2fa90888fc4e598e5c02ac5338d03f"],"9a8461944a2fa90888fc4e598e5c02ac5338d03f":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","1e6acbaae7af722f17204ceccf0f7db5753eccf3","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}