{"path":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (final AtomicReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (int i = 0; i < subReaders.length; i++) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        subReaders[i].decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea09c4c2cbc83c576ce4574f0a1b57376e9a92e1","date":1347448687,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected void doClose() throws IOException {\n    IOException ioe = null;\n    for (final AtomicReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","sourceOld":"  @Override\n  protected synchronized void doClose() throws IOException {\n    IOException ioe = null;\n    for (final AtomicReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58eb362eb0e188f5589b07d54f83341e4d853f15","date":1349277773,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final AtomicReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (t == null) firstExc = t;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    if (firstExc != null) {\n      if (firstExc instanceof IOException) throw (IOException) firstExc;\n      if (firstExc instanceof RuntimeException) throw (RuntimeException) firstExc;\n      if (firstExc instanceof Error) throw (Error) firstExc;\n      throw new RuntimeException(firstExc);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doClose() throws IOException {\n    IOException ioe = null;\n    for (final AtomicReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1e8b3369cb0169630bfadbcf2d16a26260bc967","date":1349304984,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final AtomicReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (t == null) firstExc = t;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    if (firstExc != null) {\n      if (firstExc instanceof IOException) throw (IOException) firstExc;\n      if (firstExc instanceof RuntimeException) throw (RuntimeException) firstExc;\n      if (firstExc instanceof Error) throw (Error) firstExc;\n      throw new RuntimeException(firstExc);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doClose() throws IOException {\n    IOException ioe = null;\n    for (final AtomicReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (IOException e) {\n        if (ioe == null) ioe = e;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    if (ioe != null) throw ioe;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f24f21e70a092329fc6f920115592dc9529d379","date":1349391034,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final AtomicReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (firstExc == null) firstExc = t;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    if (firstExc != null) {\n      if (firstExc instanceof IOException) throw (IOException) firstExc;\n      if (firstExc instanceof RuntimeException) throw (RuntimeException) firstExc;\n      if (firstExc instanceof Error) throw (Error) firstExc;\n      throw new RuntimeException(firstExc);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final AtomicReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (t == null) firstExc = t;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    if (firstExc != null) {\n      if (firstExc instanceof IOException) throw (IOException) firstExc;\n      if (firstExc instanceof RuntimeException) throw (RuntimeException) firstExc;\n      if (firstExc instanceof Error) throw (Error) firstExc;\n      throw new RuntimeException(firstExc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666","date":1381263930,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final AtomicReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (firstExc == null) {\n          firstExc = t;\n        }\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    IOUtils.reThrow(firstExc);\n  }\n\n","sourceOld":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final AtomicReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (firstExc == null) firstExc = t;\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    if (firstExc != null) {\n      if (firstExc instanceof IOException) throw (IOException) firstExc;\n      if (firstExc instanceof RuntimeException) throw (RuntimeException) firstExc;\n      if (firstExc instanceof Error) throw (Error) firstExc;\n      throw new RuntimeException(firstExc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527cc14542789f47d75da436cb4287d1ab887e34","date":1391705548,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final AtomicReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (firstExc == null) {\n          firstExc = t;\n        }\n      }\n    }\n\n    if (writer != null) {\n      writer.decRefDeleter(segmentInfos);\n      \n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    IOUtils.reThrow(firstExc);\n  }\n\n","sourceOld":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final AtomicReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (firstExc == null) {\n          firstExc = t;\n        }\n      }\n    }\n\n    if (writer != null) {\n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    IOUtils.reThrow(firstExc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bda0fc5c3d9b2f54f3539261daa7fe9c789bac5c","date":1396634612,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final AtomicReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (firstExc == null) {\n          firstExc = t;\n        }\n      }\n    }\n\n    if (writer != null) {\n      try {\n        writer.decRefDeleter(segmentInfos);\n      } catch (AlreadyClosedException ex) {\n        // This is OK, it just means our original writer was\n        // closed before we were, and this may leave some\n        // un-referenced files in the index, which is\n        // harmless.  The next time IW is opened on the\n        // index, it will delete them.\n      }\n    }\n\n    // throw the first exception\n    IOUtils.reThrow(firstExc);\n  }\n\n","sourceOld":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final AtomicReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (firstExc == null) {\n          firstExc = t;\n        }\n      }\n    }\n\n    if (writer != null) {\n      writer.decRefDeleter(segmentInfos);\n      \n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    IOUtils.reThrow(firstExc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final AtomicReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (firstExc == null) {\n          firstExc = t;\n        }\n      }\n    }\n\n    if (writer != null) {\n      try {\n        writer.decRefDeleter(segmentInfos);\n      } catch (AlreadyClosedException ex) {\n        // This is OK, it just means our original writer was\n        // closed before we were, and this may leave some\n        // un-referenced files in the index, which is\n        // harmless.  The next time IW is opened on the\n        // index, it will delete them.\n      }\n    }\n\n    // throw the first exception\n    IOUtils.reThrow(firstExc);\n  }\n\n","sourceOld":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final AtomicReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (firstExc == null) {\n          firstExc = t;\n        }\n      }\n    }\n\n    if (writer != null) {\n      writer.decRefDeleter(segmentInfos);\n      \n      // Since we just closed, writer may now be able to\n      // delete unused files:\n      writer.deletePendingFiles();\n    }\n\n    // throw the first exception\n    IOUtils.reThrow(firstExc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final LeafReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (firstExc == null) {\n          firstExc = t;\n        }\n      }\n    }\n\n    if (writer != null) {\n      try {\n        writer.decRefDeleter(segmentInfos);\n      } catch (AlreadyClosedException ex) {\n        // This is OK, it just means our original writer was\n        // closed before we were, and this may leave some\n        // un-referenced files in the index, which is\n        // harmless.  The next time IW is opened on the\n        // index, it will delete them.\n      }\n    }\n\n    // throw the first exception\n    IOUtils.reThrow(firstExc);\n  }\n\n","sourceOld":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final AtomicReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (firstExc == null) {\n          firstExc = t;\n        }\n      }\n    }\n\n    if (writer != null) {\n      try {\n        writer.decRefDeleter(segmentInfos);\n      } catch (AlreadyClosedException ex) {\n        // This is OK, it just means our original writer was\n        // closed before we were, and this may leave some\n        // un-referenced files in the index, which is\n        // harmless.  The next time IW is opened on the\n        // index, it will delete them.\n      }\n    }\n\n    // throw the first exception\n    IOUtils.reThrow(firstExc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final LeafReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (firstExc == null) {\n          firstExc = t;\n        }\n      }\n    }\n\n    if (writer != null) {\n      try {\n        writer.decRefDeleter(segmentInfos);\n      } catch (AlreadyClosedException ex) {\n        // This is OK, it just means our original writer was\n        // closed before we were, and this may leave some\n        // un-referenced files in the index, which is\n        // harmless.  The next time IW is opened on the\n        // index, it will delete them.\n      }\n    }\n\n    // throw the first exception\n    if (firstExc != null) {\n      throw IOUtils.rethrowAlways(firstExc);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final LeafReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (firstExc == null) {\n          firstExc = t;\n        }\n      }\n    }\n\n    if (writer != null) {\n      try {\n        writer.decRefDeleter(segmentInfos);\n      } catch (AlreadyClosedException ex) {\n        // This is OK, it just means our original writer was\n        // closed before we were, and this may leave some\n        // un-referenced files in the index, which is\n        // harmless.  The next time IW is opened on the\n        // index, it will delete them.\n      }\n    }\n\n    // throw the first exception\n    IOUtils.reThrow(firstExc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","sourceNew":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final LeafReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (firstExc == null) {\n          firstExc = t;\n        }\n      }\n    }\n\n    if (writer != null) {\n      try {\n        writer.decRefDeleter(segmentInfos);\n      } catch (AlreadyClosedException ex) {\n        // This is OK, it just means our original writer was\n        // closed before we were, and this may leave some\n        // un-referenced files in the index, which is\n        // harmless.  The next time IW is opened on the\n        // index, it will delete them.\n      }\n    }\n\n    // throw the first exception\n    if (firstExc != null) {\n      throw IOUtils.rethrowAlways(firstExc);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final LeafReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (firstExc == null) {\n          firstExc = t;\n        }\n      }\n    }\n\n    if (writer != null) {\n      try {\n        writer.decRefDeleter(segmentInfos);\n      } catch (AlreadyClosedException ex) {\n        // This is OK, it just means our original writer was\n        // closed before we were, and this may leave some\n        // un-referenced files in the index, which is\n        // harmless.  The next time IW is opened on the\n        // index, it will delete them.\n      }\n    }\n\n    // throw the first exception\n    IOUtils.reThrow(firstExc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14d66d86a8b184a86bcaebcf6e15fcef486e0876","date":1521539412,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"try\")\n  protected void doClose() throws IOException {\n    Closeable decRefDeleter = () -> {\n      if (writer != null) {\n        try {\n          writer.decRefDeleter(segmentInfos);\n        } catch (AlreadyClosedException ex) {\n          // This is OK, it just means our original writer was\n          // closed before we were, and this may leave some\n          // un-referenced files in the index, which is\n          // harmless.  The next time IW is opened on the\n          // index, it will delete them.\n        }\n      }\n    };\n    try (Closeable finalizer = decRefDeleter) {\n      // try to close each reader, even if an exception is thrown\n      final List<? extends LeafReader> sequentialSubReaders = getSequentialSubReaders();\n      IOUtils.applyToAll(sequentialSubReaders, LeafReader::decRef);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final LeafReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (firstExc == null) {\n          firstExc = t;\n        }\n      }\n    }\n\n    if (writer != null) {\n      try {\n        writer.decRefDeleter(segmentInfos);\n      } catch (AlreadyClosedException ex) {\n        // This is OK, it just means our original writer was\n        // closed before we were, and this may leave some\n        // un-referenced files in the index, which is\n        // harmless.  The next time IW is opened on the\n        // index, it will delete them.\n      }\n    }\n\n    // throw the first exception\n    if (firstExc != null) {\n      throw IOUtils.rethrowAlways(firstExc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#doClose().mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"try\")\n  protected void doClose() throws IOException {\n    Closeable decRefDeleter = () -> {\n      if (writer != null) {\n        try {\n          writer.decRefDeleter(segmentInfos);\n        } catch (AlreadyClosedException ex) {\n          // This is OK, it just means our original writer was\n          // closed before we were, and this may leave some\n          // un-referenced files in the index, which is\n          // harmless.  The next time IW is opened on the\n          // index, it will delete them.\n        }\n      }\n    };\n    try (Closeable finalizer = decRefDeleter) {\n      // try to close each reader, even if an exception is thrown\n      final List<? extends LeafReader> sequentialSubReaders = getSequentialSubReaders();\n      IOUtils.applyToAll(sequentialSubReaders, LeafReader::decRef);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doClose() throws IOException {\n    Throwable firstExc = null;\n    for (final LeafReader r : getSequentialSubReaders()) {\n      // try to close each reader, even if an exception is thrown\n      try {\n        r.decRef();\n      } catch (Throwable t) {\n        if (firstExc == null) {\n          firstExc = t;\n        }\n      }\n    }\n\n    if (writer != null) {\n      try {\n        writer.decRefDeleter(segmentInfos);\n      } catch (AlreadyClosedException ex) {\n        // This is OK, it just means our original writer was\n        // closed before we were, and this may leave some\n        // un-referenced files in the index, which is\n        // harmless.  The next time IW is opened on the\n        // index, it will delete them.\n      }\n    }\n\n    // throw the first exception\n    if (firstExc != null) {\n      throw IOUtils.rethrowAlways(firstExc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"527cc14542789f47d75da436cb4287d1ab887e34":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["5f24f21e70a092329fc6f920115592dc9529d379"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","14d66d86a8b184a86bcaebcf6e15fcef486e0876"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ea09c4c2cbc83c576ce4574f0a1b57376e9a92e1":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bda0fc5c3d9b2f54f3539261daa7fe9c789bac5c":["527cc14542789f47d75da436cb4287d1ab887e34"],"58eb362eb0e188f5589b07d54f83341e4d853f15":["ea09c4c2cbc83c576ce4574f0a1b57376e9a92e1"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["bda0fc5c3d9b2f54f3539261daa7fe9c789bac5c"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["c9fb5f46e264daf5ba3860defe623a89d202dd87","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"e1e8b3369cb0169630bfadbcf2d16a26260bc967":["ea09c4c2cbc83c576ce4574f0a1b57376e9a92e1","58eb362eb0e188f5589b07d54f83341e4d853f15"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["527cc14542789f47d75da436cb4287d1ab887e34","bda0fc5c3d9b2f54f3539261daa7fe9c789bac5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f24f21e70a092329fc6f920115592dc9529d379":["e1e8b3369cb0169630bfadbcf2d16a26260bc967"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"14d66d86a8b184a86bcaebcf6e15fcef486e0876":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"]},"commit2Childs":{"527cc14542789f47d75da436cb4287d1ab887e34":["bda0fc5c3d9b2f54f3539261daa7fe9c789bac5c","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666":["527cc14542789f47d75da436cb4287d1ab887e34"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","e9017cf144952056066919f1ebc7897ff9bd71b1","14d66d86a8b184a86bcaebcf6e15fcef486e0876"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["ea09c4c2cbc83c576ce4574f0a1b57376e9a92e1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"ea09c4c2cbc83c576ce4574f0a1b57376e9a92e1":["58eb362eb0e188f5589b07d54f83341e4d853f15","e1e8b3369cb0169630bfadbcf2d16a26260bc967"],"bda0fc5c3d9b2f54f3539261daa7fe9c789bac5c":["c9fb5f46e264daf5ba3860defe623a89d202dd87","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"58eb362eb0e188f5589b07d54f83341e4d853f15":["e1e8b3369cb0169630bfadbcf2d16a26260bc967"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"e1e8b3369cb0169630bfadbcf2d16a26260bc967":["5f24f21e70a092329fc6f920115592dc9529d379"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5f24f21e70a092329fc6f920115592dc9529d379":["8da3c22a3b1a00ae6e2664f3ac0d82cfa3a8f666"],"14d66d86a8b184a86bcaebcf6e15fcef486e0876":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}