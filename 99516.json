{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Temp40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","commits":[{"id":"38f154048324ef4d19e56e818d0621cafb4fd453","date":1377246558,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Temp40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (storePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (storeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Temp40PostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":null,"sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    //if (DEBUG) System.out.println(\"SPW:     addPos pos=\" + position + \" payload=\" + (payload == null ? \"null\" : (payload.length + \" bytes\")) + \" proxFP=\" + proxOut.getFilePointer());\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 : \"invalid indexOptions: \" + indexOptions;\n    assert proxOut != null;\n\n    final int delta = position - lastPosition;\n    \n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n\n    lastPosition = position;\n\n    int payloadLength = 0;\n\n    if (storePayloads) {\n      payloadLength = payload == null ? 0 : payload.length;\n\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        proxOut.writeVInt((delta<<1)|1);\n        proxOut.writeVInt(payloadLength);\n      } else {\n        proxOut.writeVInt(delta << 1);\n      }\n    } else {\n      proxOut.writeVInt(delta);\n    }\n    \n    if (storeOffsets) {\n      // don't use startOffset - lastEndOffset, because this creates lots of negative vints for synonyms,\n      // and the numbers aren't that much smaller anyways.\n      int offsetDelta = startOffset - lastOffset;\n      int offsetLength = endOffset - startOffset;\n      assert offsetDelta >= 0 && offsetLength >= 0 : \"startOffset=\" + startOffset + \",lastOffset=\" + lastOffset + \",endOffset=\" + endOffset;\n      if (offsetLength != lastOffsetLength) {\n        proxOut.writeVInt(offsetDelta << 1 | 1);\n        proxOut.writeVInt(offsetLength);\n      } else {\n        proxOut.writeVInt(offsetDelta << 1);\n      }\n      lastOffset = startOffset;\n      lastOffsetLength = offsetLength;\n    }\n    \n    if (payloadLength > 0) {\n      proxOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38f154048324ef4d19e56e818d0621cafb4fd453":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["38f154048324ef4d19e56e818d0621cafb4fd453"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"38f154048324ef4d19e56e818d0621cafb4fd453":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38f154048324ef4d19e56e818d0621cafb4fd453","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}