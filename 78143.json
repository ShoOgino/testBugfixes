{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestPhraseWildcardQuery#searchAndCheckSameResults(Query,Query,Query,boolean).mjava","commits":[{"id":"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e","date":1574848425,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestPhraseWildcardQuery#searchAndCheckSameResults(Query,Query,Query,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void searchAndCheckSameResults(Query testQuery, Query multiPhraseQuery, Query spanNearQuery, boolean segmentOptimizationEnabled) throws IOException {\n    // Search and compare results with MultiPhraseQuery.\n    // Do not compare the scores if the segment optimization is enabled because\n    // it changes the score (but not the result ranking).\n    boolean sameScoreExpected = !segmentOptimizationEnabled;\n    searchAndCheckSameResults(testQuery, multiPhraseQuery, sameScoreExpected);\n\n    // Clear the test stats to verify them only with the last test query execution.\n    clearTestCounters();\n    // Search and compare results with SpanNearQuery.\n    sameScoreExpected = !segmentOptimizationEnabled && !differentScoreExpectedForSpanNearQuery;\n    searchAndCheckSameResults(testQuery, spanNearQuery, sameScoreExpected);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fbbbb4892d97137c84d62762ee9283c8f32f247","date":1574942156,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestPhraseWildcardQuery#searchAndCheckSameResults(Query,Query,Query,boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestPhraseWildcardQuery#searchAndCheckSameResults(Query,Query,Query,boolean).mjava","sourceNew":"  protected void searchAndCheckSameResults(Query testQuery, Query multiPhraseQuery, Query spanNearQuery, boolean segmentOptimizationEnabled) throws IOException {\n    // Search and compare results with MultiPhraseQuery.\n    // Do not compare the scores if the segment optimization is enabled because\n    // it changes the score (but not the result ranking).\n    boolean sameScoreExpected = !segmentOptimizationEnabled;\n    searchAndCheckSameResults(testQuery, multiPhraseQuery, sameScoreExpected);\n\n    // Clear the test stats to verify them only with the last test query execution.\n    assertCounters().clear();\n    // Search and compare results with SpanNearQuery.\n    sameScoreExpected = !segmentOptimizationEnabled && !differentScoreExpectedForSpanNearQuery;\n    searchAndCheckSameResults(testQuery, spanNearQuery, sameScoreExpected);\n  }\n\n","sourceOld":"  protected void searchAndCheckSameResults(Query testQuery, Query multiPhraseQuery, Query spanNearQuery, boolean segmentOptimizationEnabled) throws IOException {\n    // Search and compare results with MultiPhraseQuery.\n    // Do not compare the scores if the segment optimization is enabled because\n    // it changes the score (but not the result ranking).\n    boolean sameScoreExpected = !segmentOptimizationEnabled;\n    searchAndCheckSameResults(testQuery, multiPhraseQuery, sameScoreExpected);\n\n    // Clear the test stats to verify them only with the last test query execution.\n    clearTestCounters();\n    // Search and compare results with SpanNearQuery.\n    sameScoreExpected = !segmentOptimizationEnabled && !differentScoreExpectedForSpanNearQuery;\n    searchAndCheckSameResults(testQuery, spanNearQuery, sameScoreExpected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4fbbbb4892d97137c84d62762ee9283c8f32f247":["b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e"],"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4fbbbb4892d97137c84d62762ee9283c8f32f247"]},"commit2Childs":{"4fbbbb4892d97137c84d62762ee9283c8f32f247":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e":["4fbbbb4892d97137c84d62762ee9283c8f32f247"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5d819373a1ee4f8d8c858aecdb04c4b724b8e5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}