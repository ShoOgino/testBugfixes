{"path":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","commits":[{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getConfigName(String,ZkNodeProps).mjava","sourceNew":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if (configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return configName;\n  }\n\n","sourceOld":"  private String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n    \n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if (configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getConfigName(String,ZkNodeProps).mjava","sourceNew":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if (configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return configName;\n  }\n\n","sourceOld":"  private String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n    \n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if (configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if (configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return configName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","sourceNew":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (!\".system\".equals(coll)) {\n            copyDefaultConfigSetTo(configNames, coll);\n          }\n          return coll;\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","sourceOld":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if (configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":["ca55a3e50e219d5a29f5cf027c67b3891c57d5b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","sourceNew":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (!\".system\".equals(coll)) {\n            copyDefaultConfigSetTo(configNames, coll);\n          }\n          return coll;\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","sourceOld":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if (configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","sourceNew":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (!\".system\".equals(coll)) {\n            copyDefaultConfigSetTo(configNames, coll);\n          }\n          return coll;\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","sourceOld":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        } else if (configNames.contains(coll)) {\n          configName = coll;\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","sourceNew":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (!CollectionAdminParams.SYSTEM_COLL.equals(coll)) {\n            copyDefaultConfigSetTo(configNames, coll);\n          }\n          return coll;\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","sourceOld":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (!\".system\".equals(coll)) {\n            copyDefaultConfigSetTo(configNames, coll);\n          }\n          return coll;\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","bugFix":null,"bugIntro":["ca55a3e50e219d5a29f5cf027c67b3891c57d5b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","sourceNew":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (!CollectionAdminParams.SYSTEM_COLL.equals(coll)) {\n            copyDefaultConfigSetTo(configNames, coll);\n          }\n          return coll;\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","sourceOld":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (!\".system\".equals(coll)) {\n            copyDefaultConfigSetTo(configNames, coll);\n          }\n          return coll;\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","sourceNew":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (!CollectionAdminParams.SYSTEM_COLL.equals(coll)) {\n            copyDefaultConfigSetTo(configNames, coll);\n          }\n          return coll;\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","sourceOld":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (!\".system\".equals(coll)) {\n            copyDefaultConfigSetTo(configNames, coll);\n          }\n          return coll;\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","sourceNew":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (!CollectionAdminParams.SYSTEM_COLL.equals(coll)) {\n            copyDefaultConfigSetTo(configNames, coll);\n          }\n          return coll;\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","sourceOld":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (!CollectionAdminParams.SYSTEM_COLL.equals(coll)) {\n            copyDefaultConfigSetTo(configNames, coll);\n          }\n          return coll;\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfigName(String,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"  String getConfigName(String coll, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String configName = message.getStr(COLL_CONF);\n\n    if (configName == null) {\n      // if there is only one conf, use that\n      List<String> configNames = null;\n      try {\n        configNames = ocmh.zkStateReader.getZkClient().getChildren(ZkConfigManager.CONFIGS_ZKNODE, null, true);\n        if (configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n          if (!CollectionAdminParams.SYSTEM_COLL.equals(coll)) {\n            copyDefaultConfigSetTo(configNames, coll);\n          }\n          return coll;\n        } else if (configNames != null && configNames.size() == 1) {\n          configName = configNames.get(0);\n          // no config set named, but there is only 1 - use it\n          log.info(\"Only one config set found in zk - using it:\" + configName);\n        }\n      } catch (KeeperException.NoNodeException e) {\n\n      }\n    }\n    return \"\".equals(configName)? null: configName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["560c18d71dad43d675158783c3840f8c80d6d39c","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","55ed5a78f8a4b37108ac73a894a105db562d303e"],"197bbedf08450ade98a11f4a0001448059666bec":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["560c18d71dad43d675158783c3840f8c80d6d39c"],"28288370235ed02234a64753cdbf0c6ec096304a":["403d05f7f8d69b65659157eff1bc1d2717f04c66","197bbedf08450ade98a11f4a0001448059666bec"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["403d05f7f8d69b65659157eff1bc1d2717f04c66","197bbedf08450ade98a11f4a0001448059666bec"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["197bbedf08450ade98a11f4a0001448059666bec","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"197bbedf08450ade98a11f4a0001448059666bec":["28288370235ed02234a64753cdbf0c6ec096304a","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"55ed5a78f8a4b37108ac73a894a105db562d303e":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"560c18d71dad43d675158783c3840f8c80d6d39c":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}