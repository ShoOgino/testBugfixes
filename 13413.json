{"path":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPrepare().mjava","commits":[{"id":"d9d424bd039937b4125152b454b3a32754b06f6c","date":1384391321,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPrepare().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPrepare() throws IOException {\n    DebugComponent component = new DebugComponent();\n    List<SearchComponent> components = new ArrayList<SearchComponent>(1);\n    components.add(component);\n    SolrQueryRequest req;\n    ResponseBuilder rb;\n    for(int i = 0; i < 10; i++) {\n      req = req(\"q\", \"test query\", \"distrib\", \"true\");\n      rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n      rb.isDistrib = true;\n      //expecting the same results with debugQuery=true or debug=track\n      if(random().nextBoolean()) {\n        rb.setDebug(true);\n      } else {\n        rb.setDebug(false);\n        rb.setDebugTrack(true);\n        //should not depend on other debug options\n        rb.setDebugQuery(random().nextBoolean());\n        rb.setDebugTimings(random().nextBoolean());\n        rb.setDebugResults(random().nextBoolean());\n      }\n      component.prepare(rb);\n      ensureRidPresent(rb, null);\n    }\n   \n    req = req(\"q\", \"test query\", \"distrib\", \"true\", CommonParams.REQUEST_ID, \"123\");\n    rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n    rb.isDistrib = true;\n    rb.setDebug(true);\n    component.prepare(rb);\n    ensureRidPresent(rb, \"123\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPrepare().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPrepare().mjava","sourceNew":"  @Test\n  public void testPrepare() throws IOException {\n    DebugComponent component = new DebugComponent();\n    List<SearchComponent> components = new ArrayList<>(1);\n    components.add(component);\n    SolrQueryRequest req;\n    ResponseBuilder rb;\n    for(int i = 0; i < 10; i++) {\n      req = req(\"q\", \"test query\", \"distrib\", \"true\");\n      rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n      rb.isDistrib = true;\n      //expecting the same results with debugQuery=true or debug=track\n      if(random().nextBoolean()) {\n        rb.setDebug(true);\n      } else {\n        rb.setDebug(false);\n        rb.setDebugTrack(true);\n        //should not depend on other debug options\n        rb.setDebugQuery(random().nextBoolean());\n        rb.setDebugTimings(random().nextBoolean());\n        rb.setDebugResults(random().nextBoolean());\n      }\n      component.prepare(rb);\n      ensureRidPresent(rb, null);\n    }\n   \n    req = req(\"q\", \"test query\", \"distrib\", \"true\", CommonParams.REQUEST_ID, \"123\");\n    rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n    rb.isDistrib = true;\n    rb.setDebug(true);\n    component.prepare(rb);\n    ensureRidPresent(rb, \"123\");\n  }\n\n","sourceOld":"  @Test\n  public void testPrepare() throws IOException {\n    DebugComponent component = new DebugComponent();\n    List<SearchComponent> components = new ArrayList<SearchComponent>(1);\n    components.add(component);\n    SolrQueryRequest req;\n    ResponseBuilder rb;\n    for(int i = 0; i < 10; i++) {\n      req = req(\"q\", \"test query\", \"distrib\", \"true\");\n      rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n      rb.isDistrib = true;\n      //expecting the same results with debugQuery=true or debug=track\n      if(random().nextBoolean()) {\n        rb.setDebug(true);\n      } else {\n        rb.setDebug(false);\n        rb.setDebugTrack(true);\n        //should not depend on other debug options\n        rb.setDebugQuery(random().nextBoolean());\n        rb.setDebugTimings(random().nextBoolean());\n        rb.setDebugResults(random().nextBoolean());\n      }\n      component.prepare(rb);\n      ensureRidPresent(rb, null);\n    }\n   \n    req = req(\"q\", \"test query\", \"distrib\", \"true\", CommonParams.REQUEST_ID, \"123\");\n    rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n    rb.isDistrib = true;\n    rb.setDebug(true);\n    component.prepare(rb);\n    ensureRidPresent(rb, \"123\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b5b21ccc1d52b794ed961763fbef107dc2c8b9f","date":1594211903,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPrepare().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPrepare().mjava","sourceNew":"  @Test\n  public void testPrepare() throws IOException {\n    DebugComponent component = new DebugComponent();\n    List<SearchComponent> components = new ArrayList<>(1);\n    components.add(component);\n    SolrQueryRequest req;\n    ResponseBuilder rb;\n    for(int i = 0; i < 10; i++) {\n      req = req(\"q\", \"test query\", \"distrib\", \"true\");\n      rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n      rb.isDistrib = true;\n      addRequestId(rb, ANY_RID);\n\n      //expecting the same results with debugQuery=true or debug=track\n      if(random().nextBoolean()) {\n        rb.setDebug(true);\n      } else {\n        rb.setDebug(false);\n        rb.setDebugTrack(true);\n        //should not depend on other debug options\n        rb.setDebugQuery(random().nextBoolean());\n        rb.setDebugTimings(random().nextBoolean());\n        rb.setDebugResults(random().nextBoolean());\n      }\n      component.prepare(rb);\n      ensureTrackRecordsRid(rb, ANY_RID);\n    }\n   \n    req = req(\"q\", \"test query\", \"distrib\", \"true\", CommonParams.REQUEST_ID, \"123\");\n    rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n    rb.isDistrib = true;\n    rb.setDebug(true);\n    component.prepare(rb);\n    ensureTrackRecordsRid(rb, \"123\");\n  }\n\n","sourceOld":"  @Test\n  public void testPrepare() throws IOException {\n    DebugComponent component = new DebugComponent();\n    List<SearchComponent> components = new ArrayList<>(1);\n    components.add(component);\n    SolrQueryRequest req;\n    ResponseBuilder rb;\n    for(int i = 0; i < 10; i++) {\n      req = req(\"q\", \"test query\", \"distrib\", \"true\");\n      rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n      rb.isDistrib = true;\n      //expecting the same results with debugQuery=true or debug=track\n      if(random().nextBoolean()) {\n        rb.setDebug(true);\n      } else {\n        rb.setDebug(false);\n        rb.setDebugTrack(true);\n        //should not depend on other debug options\n        rb.setDebugQuery(random().nextBoolean());\n        rb.setDebugTimings(random().nextBoolean());\n        rb.setDebugResults(random().nextBoolean());\n      }\n      component.prepare(rb);\n      ensureRidPresent(rb, null);\n    }\n   \n    req = req(\"q\", \"test query\", \"distrib\", \"true\", CommonParams.REQUEST_ID, \"123\");\n    rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n    rb.isDistrib = true;\n    rb.setDebug(true);\n    component.prepare(rb);\n    ensureRidPresent(rb, \"123\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d9d424bd039937b4125152b454b3a32754b06f6c"],"d9d424bd039937b4125152b454b3a32754b06f6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b5b21ccc1d52b794ed961763fbef107dc2c8b9f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b5b21ccc1d52b794ed961763fbef107dc2c8b9f"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4b5b21ccc1d52b794ed961763fbef107dc2c8b9f"],"d9d424bd039937b4125152b454b3a32754b06f6c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9d424bd039937b4125152b454b3a32754b06f6c"],"4b5b21ccc1d52b794ed961763fbef107dc2c8b9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}