{"path":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","commits":[{"id":"5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc","date":1295002842,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    config.setSimilarity(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    config.setSimilarity(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    config.setSimilarityProvider(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    config.setSimilarity(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    config.setSimilarityProvider(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    config.setSimilarity(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(MockTokenizer.SIMPLE, true)).setMergePolicy(newInOrderLogMergePolicy());\n    config.setSimilarityProvider(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    config.setSimilarityProvider(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(MockTokenizer.SIMPLE, true)).setMergePolicy(newInOrderLogMergePolicy());\n    config.setSimilarityProvider(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(MockTokenizer.SIMPLE, true)).setMergePolicy(newInOrderLogMergePolicy());\n    config.setSimilarityProvider(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(MockTokenizer.SIMPLE, true));\n    config.setSimilarityProvider(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"160d004a0e8f5361a446f9d01456aee1c1af20dc","date":1301061642,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(MockTokenizer.SIMPLE, true)).setMergePolicy(newInOrderLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(MockTokenizer.SIMPLE, true)).setMergePolicy(newInOrderLogMergePolicy());\n    config.setSimilarityProvider(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(MockTokenizer.SIMPLE, true)).setMergePolicy(newInOrderLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(MockTokenizer.SIMPLE, true)).setMergePolicy(newInOrderLogMergePolicy());\n    config.setSimilarityProvider(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(MockTokenizer.SIMPLE, true)).setMergePolicy(newInOrderLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(MockTokenizer.SIMPLE, true)).setMergePolicy(newInOrderLogMergePolicy());\n    config.setSimilarityProvider(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(MockTokenizer.SIMPLE, true)).setMergePolicy(newInOrderLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(MockTokenizer.SIMPLE, true)).setMergePolicy(newInOrderLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(MockTokenizer.SIMPLE, true)).setMergePolicy(newInOrderLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(MockTokenizer.SIMPLE, true)).setMergePolicy(newInOrderLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarity(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarityProvider(new DefaultSimilarityProvider() {\n      @Override\n      public Similarity get(String field) {\n        return new TestSimilarity();\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMaxTermFrequency#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarity(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n                                                    new MockAnalyzer(random, MockTokenizer.SIMPLE, true)).setMergePolicy(newLogMergePolicy());\n    config.setSimilarity(new TestSimilarity());\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, config);\n    Document doc = new Document();\n    Field foo = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(foo);\n    for (int i = 0; i < 100; i++) {\n      foo.setValue(addValue());\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"16843358872ed92ba92888ab99df297550b9a36a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"c19f985e36a65cc969e8e564fe337a0d41512075":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["16843358872ed92ba92888ab99df297550b9a36a","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["160d004a0e8f5361a446f9d01456aee1c1af20dc"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","160d004a0e8f5361a446f9d01456aee1c1af20dc"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"160d004a0e8f5361a446f9d01456aee1c1af20dc":["c19f985e36a65cc969e8e564fe337a0d41512075"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","160d004a0e8f5361a446f9d01456aee1c1af20dc"],"a3776dccca01c11e7046323cfad46a3b4a471233":["160d004a0e8f5361a446f9d01456aee1c1af20dc","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"45669a651c970812a680841b97a77cce06af559f":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","01e5948db9a07144112d2f08f28ca2e3cd880348"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"16843358872ed92ba92888ab99df297550b9a36a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"962d04139994fce5193143ef35615499a9a96d78":[],"c19f985e36a65cc969e8e564fe337a0d41512075":["160d004a0e8f5361a446f9d01456aee1c1af20dc","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["c19f985e36a65cc969e8e564fe337a0d41512075","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["45669a651c970812a680841b97a77cce06af559f"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"160d004a0e8f5361a446f9d01456aee1c1af20dc":["01e5948db9a07144112d2f08f28ca2e3cd880348","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16843358872ed92ba92888ab99df297550b9a36a","29ef99d61cda9641b6250bf9567329a6e65f901d","5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc"],"5e9ee82a511a2ff4aad3e0bd7a3ab820c03ce6fc":["16843358872ed92ba92888ab99df297550b9a36a","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}