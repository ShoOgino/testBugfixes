{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#randomPattern(Random).mjava","commits":[{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":1,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#randomPattern(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#randomPattern(Random).mjava","sourceNew":"  /**\n   * Returns a valid (compiling) Pattern instance with random stuff inside. Be careful\n   * when applying random patterns to longer strings as certain types of patterns\n   * may explode into exponential times in backtracking implementations (such as Java's).\n   */\n  public static Pattern randomPattern(Random random) {\n    final String nonBmpString = \"AB\\uD840\\uDC00C\";\n    while (true) {\n      try {\n        Pattern p = Pattern.compile(TestUtil.randomRegexpishString(random));\n        String replacement = null;\n        // ignore bugs in Sun's regex impl\n        try {\n          replacement = p.matcher(nonBmpString).replaceAll(\"_\");\n        } catch (StringIndexOutOfBoundsException jdkBug) {\n          System.out.println(\"WARNING: your jdk is buggy!\");\n          System.out.println(\"Pattern.compile(\\\"\" + p.pattern() + \n              \"\\\").matcher(\\\"AB\\\\uD840\\\\uDC00C\\\").replaceAll(\\\"_\\\"); should not throw IndexOutOfBounds!\");\n        }\n        // Make sure the result of applying the pattern to a string with extended\n        // unicode characters is a valid utf16 string. See LUCENE-4078 for discussion.\n        if (replacement != null && UnicodeUtil.validUTF16String(replacement)) {\n          return p;\n        }\n      } catch (PatternSyntaxException ignored) {\n        // Loop trying until we hit something that compiles.\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a valid (compiling) Pattern instance with random stuff inside. Be careful\n   * when applying random patterns to longer strings as certain types of patterns\n   * may explode into exponential times in backtracking implementations (such as Java's).\n   */\n  public static Pattern randomPattern(Random random) {\n    final String nonBmpString = \"AB\\uD840\\uDC00C\";\n    while (true) {\n      try {\n        Pattern p = Pattern.compile(_TestUtil.randomRegexpishString(random));\n        String replacement = null;\n        // ignore bugs in Sun's regex impl\n        try {\n          replacement = p.matcher(nonBmpString).replaceAll(\"_\");\n        } catch (StringIndexOutOfBoundsException jdkBug) {\n          System.out.println(\"WARNING: your jdk is buggy!\");\n          System.out.println(\"Pattern.compile(\\\"\" + p.pattern() + \n              \"\\\").matcher(\\\"AB\\\\uD840\\\\uDC00C\\\").replaceAll(\\\"_\\\"); should not throw IndexOutOfBounds!\");\n        }\n        // Make sure the result of applying the pattern to a string with extended\n        // unicode characters is a valid utf16 string. See LUCENE-4078 for discussion.\n        if (replacement != null && UnicodeUtil.validUTF16String(replacement)) {\n          return p;\n        }\n      } catch (PatternSyntaxException ignored) {\n        // Loop trying until we hit something that compiles.\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}