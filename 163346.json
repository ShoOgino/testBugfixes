{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#internalTryCheckOutForFlush(ThreadState).mjava","commits":[{"id":"6ab0e311d00c794eac70d67151d50cbb45ff810b","date":1304664391,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#internalTryCheckOutForFlush(ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#internalTryCheckOutForFlush(ThreadState,boolean).mjava","sourceNew":"  private DocumentsWriterPerThread internalTryCheckOutForFlush(\n      ThreadState perThread) {\n    if (perThread.flushPending) {\n      // We are pending so all memory is already moved to flushBytes\n      if (perThread.tryLock()) {\n        try {\n          if (perThread.isActive()) {\n            assert perThread.isHeldByCurrentThread();\n            final DocumentsWriterPerThread dwpt;\n            final long bytes = perThread.bytesUsed; // do that before\n                                                         // replace!\n            dwpt = perThreadPool.replaceForFlush(perThread, closed);\n            assert !flushingWriters.containsKey(dwpt) : \"DWPT is already flushing\";\n            // Record the flushing DWPT to reduce flushBytes in doAfterFlush\n            flushingWriters.put(dwpt, Long.valueOf(bytes));\n            numPending--; // write access synced\n            numFlushing++;\n            return dwpt;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private DocumentsWriterPerThread internalTryCheckOutForFlush(\n      ThreadState perThread, boolean setPending) {\n    if (setPending && !perThread.flushPending) {\n      setFlushPending(perThread);\n    }\n    if (perThread.flushPending) {\n      // We are pending so all memory is already moved to flushBytes\n      if (perThread.tryLock()) {\n        try {\n          if (perThread.isActive()) {\n            assert perThread.isHeldByCurrentThread();\n            final DocumentsWriterPerThread dwpt;\n            final long bytes = perThread.bytesUsed; // do that before\n                                                         // replace!\n            dwpt = perThreadPool.replaceForFlush(perThread, closed);\n            assert !flushingWriters.containsKey(dwpt) : \"DWPT is already flushing\";\n            // Record the flushing DWPT to reduce flushBytes in doAfterFlush\n            flushingWriters.put(dwpt, Long.valueOf(bytes));\n            numPending--; // write access synced\n            numFlushing++;\n            return dwpt;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#internalTryCheckOutForFlush(ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#internalTryCheckOutForFlush(ThreadState,boolean).mjava","sourceNew":"  private DocumentsWriterPerThread internalTryCheckOutForFlush(\n      ThreadState perThread) {\n    if (perThread.flushPending) {\n      // We are pending so all memory is already moved to flushBytes\n      if (perThread.tryLock()) {\n        try {\n          if (perThread.isActive()) {\n            assert perThread.isHeldByCurrentThread();\n            final DocumentsWriterPerThread dwpt;\n            final long bytes = perThread.bytesUsed; // do that before\n                                                         // replace!\n            dwpt = perThreadPool.replaceForFlush(perThread, closed);\n            assert !flushingWriters.containsKey(dwpt) : \"DWPT is already flushing\";\n            // Record the flushing DWPT to reduce flushBytes in doAfterFlush\n            flushingWriters.put(dwpt, Long.valueOf(bytes));\n            numPending--; // write access synced\n            numFlushing++;\n            return dwpt;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private DocumentsWriterPerThread internalTryCheckOutForFlush(\n      ThreadState perThread, boolean setPending) {\n    if (setPending && !perThread.flushPending) {\n      setFlushPending(perThread);\n    }\n    if (perThread.flushPending) {\n      // We are pending so all memory is already moved to flushBytes\n      if (perThread.tryLock()) {\n        try {\n          if (perThread.isActive()) {\n            assert perThread.isHeldByCurrentThread();\n            final DocumentsWriterPerThread dwpt;\n            final long bytes = perThread.bytesUsed; // do that before\n                                                         // replace!\n            dwpt = perThreadPool.replaceForFlush(perThread, closed);\n            assert !flushingWriters.containsKey(dwpt) : \"DWPT is already flushing\";\n            // Record the flushing DWPT to reduce flushBytes in doAfterFlush\n            flushingWriters.put(dwpt, Long.valueOf(bytes));\n            numPending--; // write access synced\n            numFlushing++;\n            return dwpt;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32f306edd62f81390a6e263e8b913f089f3e98a1","date":1305615519,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#internalTryCheckOutForFlush(ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#internalTryCheckOutForFlush(ThreadState).mjava","sourceNew":"  private DocumentsWriterPerThread internalTryCheckOutForFlush(\n      ThreadState perThread) {\n    assert Thread.holdsLock(this);\n    assert perThread.flushPending;\n    try {\n      // We are pending so all memory is already moved to flushBytes\n      if (perThread.tryLock()) {\n        try {\n          if (perThread.isActive()) {\n            assert perThread.isHeldByCurrentThread();\n            final DocumentsWriterPerThread dwpt;\n            final long bytes = perThread.bytesUsed; // do that before\n                                                         // replace!\n            dwpt = perThreadPool.replaceForFlush(perThread, closed);\n            assert !flushingWriters.containsKey(dwpt) : \"DWPT is already flushing\";\n            // Record the flushing DWPT to reduce flushBytes in doAfterFlush\n            flushingWriters.put(dwpt, Long.valueOf(bytes));\n            numPending--; // write access synced\n            return dwpt;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      return null;\n    } finally {\n      stallControl.updateStalled(this);\n    }\n  }\n\n","sourceOld":"  private DocumentsWriterPerThread internalTryCheckOutForFlush(\n      ThreadState perThread) {\n    if (perThread.flushPending) {\n      // We are pending so all memory is already moved to flushBytes\n      if (perThread.tryLock()) {\n        try {\n          if (perThread.isActive()) {\n            assert perThread.isHeldByCurrentThread();\n            final DocumentsWriterPerThread dwpt;\n            final long bytes = perThread.bytesUsed; // do that before\n                                                         // replace!\n            dwpt = perThreadPool.replaceForFlush(perThread, closed);\n            assert !flushingWriters.containsKey(dwpt) : \"DWPT is already flushing\";\n            // Record the flushing DWPT to reduce flushBytes in doAfterFlush\n            flushingWriters.put(dwpt, Long.valueOf(bytes));\n            numPending--; // write access synced\n            numFlushing++;\n            return dwpt;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#internalTryCheckOutForFlush(ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#internalTryCheckOutForFlush(ThreadState).mjava","sourceNew":"  private DocumentsWriterPerThread internalTryCheckOutForFlush(\n      ThreadState perThread) {\n    assert Thread.holdsLock(this);\n    assert perThread.flushPending;\n    try {\n      // We are pending so all memory is already moved to flushBytes\n      if (perThread.tryLock()) {\n        try {\n          if (perThread.isActive()) {\n            assert perThread.isHeldByCurrentThread();\n            final DocumentsWriterPerThread dwpt;\n            final long bytes = perThread.bytesUsed; // do that before\n                                                         // replace!\n            dwpt = perThreadPool.replaceForFlush(perThread, closed);\n            assert !flushingWriters.containsKey(dwpt) : \"DWPT is already flushing\";\n            // Record the flushing DWPT to reduce flushBytes in doAfterFlush\n            flushingWriters.put(dwpt, Long.valueOf(bytes));\n            numPending--; // write access synced\n            return dwpt;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      return null;\n    } finally {\n      stallControl.updateStalled(this);\n    }\n  }\n\n","sourceOld":"  private DocumentsWriterPerThread internalTryCheckOutForFlush(\n      ThreadState perThread) {\n    if (perThread.flushPending) {\n      // We are pending so all memory is already moved to flushBytes\n      if (perThread.tryLock()) {\n        try {\n          if (perThread.isActive()) {\n            assert perThread.isHeldByCurrentThread();\n            final DocumentsWriterPerThread dwpt;\n            final long bytes = perThread.bytesUsed; // do that before\n                                                         // replace!\n            dwpt = perThreadPool.replaceForFlush(perThread, closed);\n            assert !flushingWriters.containsKey(dwpt) : \"DWPT is already flushing\";\n            // Record the flushing DWPT to reduce flushBytes in doAfterFlush\n            flushingWriters.put(dwpt, Long.valueOf(bytes));\n            numPending--; // write access synced\n            numFlushing++;\n            return dwpt;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#internalTryCheckOutForFlush(ThreadState).mjava","pathOld":"/dev/null","sourceNew":"  private DocumentsWriterPerThread internalTryCheckOutForFlush(\n      ThreadState perThread) {\n    assert Thread.holdsLock(this);\n    assert perThread.flushPending;\n    try {\n      // We are pending so all memory is already moved to flushBytes\n      if (perThread.tryLock()) {\n        try {\n          if (perThread.isActive()) {\n            assert perThread.isHeldByCurrentThread();\n            final DocumentsWriterPerThread dwpt;\n            final long bytes = perThread.bytesUsed; // do that before\n                                                         // replace!\n            dwpt = perThreadPool.replaceForFlush(perThread, closed);\n            assert !flushingWriters.containsKey(dwpt) : \"DWPT is already flushing\";\n            // Record the flushing DWPT to reduce flushBytes in doAfterFlush\n            flushingWriters.put(dwpt, Long.valueOf(bytes));\n            numPending--; // write access synced\n            return dwpt;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      return null;\n    } finally {\n      stallControl.updateStalled(this);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#internalTryCheckOutForFlush(ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#internalTryCheckOutForFlush(ThreadState).mjava","sourceNew":"  private DocumentsWriterPerThread internalTryCheckOutForFlush(\n      ThreadState perThread) {\n    assert Thread.holdsLock(this);\n    assert perThread.flushPending;\n    try {\n      // We are pending so all memory is already moved to flushBytes\n      if (perThread.tryLock()) {\n        try {\n          if (perThread.isActive()) {\n            assert perThread.isHeldByCurrentThread();\n            final DocumentsWriterPerThread dwpt;\n            final long bytes = perThread.bytesUsed; // do that before\n                                                         // replace!\n            dwpt = perThreadPool.replaceForFlush(perThread, closed);\n            assert !flushingWriters.containsKey(dwpt) : \"DWPT is already flushing\";\n            // Record the flushing DWPT to reduce flushBytes in doAfterFlush\n            flushingWriters.put(dwpt, Long.valueOf(bytes));\n            numPending--; // write access synced\n            return dwpt;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      return null;\n    } finally {\n      stallControl.updateStalled(this);\n    }\n  }\n\n","sourceOld":"  private DocumentsWriterPerThread internalTryCheckOutForFlush(\n      ThreadState perThread) {\n    assert Thread.holdsLock(this);\n    assert perThread.flushPending;\n    try {\n      // We are pending so all memory is already moved to flushBytes\n      if (perThread.tryLock()) {\n        try {\n          if (perThread.isActive()) {\n            assert perThread.isHeldByCurrentThread();\n            final DocumentsWriterPerThread dwpt;\n            final long bytes = perThread.bytesUsed; // do that before\n                                                         // replace!\n            dwpt = perThreadPool.replaceForFlush(perThread, closed);\n            assert !flushingWriters.containsKey(dwpt) : \"DWPT is already flushing\";\n            // Record the flushing DWPT to reduce flushBytes in doAfterFlush\n            flushingWriters.put(dwpt, Long.valueOf(bytes));\n            numPending--; // write access synced\n            return dwpt;\n          }\n        } finally {\n          perThread.unlock();\n        }\n      }\n      return null;\n    } finally {\n      stallControl.updateStalled(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","32f306edd62f81390a6e263e8b913f089f3e98a1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["32f306edd62f81390a6e263e8b913f089f3e98a1"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32f306edd62f81390a6e263e8b913f089f3e98a1"],"32f306edd62f81390a6e263e8b913f089f3e98a1":["6ab0e311d00c794eac70d67151d50cbb45ff810b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ab0e311d00c794eac70d67151d50cbb45ff810b"],"6ab0e311d00c794eac70d67151d50cbb45ff810b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"32f306edd62f81390a6e263e8b913f089f3e98a1":["c3a8a449466c1ff7ce2274fe73dab487256964b4","3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","6ab0e311d00c794eac70d67151d50cbb45ff810b"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"6ab0e311d00c794eac70d67151d50cbb45ff810b":["32f306edd62f81390a6e263e8b913f089f3e98a1","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}