{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(LeafReaderContext,Bits).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: we cannot pass acceptDocs here because this\n      // will (most likely, justifiably) cause the filter to\n      // not return a FixedBitSet but rather a\n      // BitsFilteredDocIdSet.  Instead, we filter by\n      // acceptDocs when we score:\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, null);\n\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, (FixedBitSet) parents, doScores, acceptDocs);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: we cannot pass acceptDocs here because this\n      // will (most likely, justifiably) cause the filter to\n      // not return a FixedBitSet but rather a\n      // BitsFilteredDocIdSet.  Instead, we filter by\n      // acceptDocs when we score:\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, null);\n\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitDocIdSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, ((FixedBitDocIdSet) parents).bits(), doScores, acceptDocs);\n    }\n\n","sourceOld":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: we cannot pass acceptDocs here because this\n      // will (most likely, justifiably) cause the filter to\n      // not return a FixedBitSet but rather a\n      // BitsFilteredDocIdSet.  Instead, we filter by\n      // acceptDocs when we score:\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, null);\n\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, (FixedBitSet) parents, doScores, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: we cannot pass acceptDocs here because this\n      // will (most likely, justifiably) cause the filter to\n      // not return a FixedBitSet but rather a\n      // BitsFilteredDocIdSet.  Instead, we filter by\n      // acceptDocs when we score:\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, null);\n\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents.bits() instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents.bits());\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, (FixedBitSet) parents.bits(), doScores, acceptDocs);\n    }\n\n","sourceOld":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: we cannot pass acceptDocs here because this\n      // will (most likely, justifiably) cause the filter to\n      // not return a FixedBitSet but rather a\n      // BitsFilteredDocIdSet.  Instead, we filter by\n      // acceptDocs when we score:\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, null);\n\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitDocIdSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, ((FixedBitDocIdSet) parents).bits(), doScores, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b012914a8110b2ff1d075ed1ef72aa57084d4897","date":1414685177,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: this doesn't take acceptDocs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitDocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      if (parents == null) {\n        // No parents\n        return null;\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, parents.bits(), doScores, acceptDocs);\n    }\n\n","sourceOld":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: we cannot pass acceptDocs here because this\n      // will (most likely, justifiably) cause the filter to\n      // not return a FixedBitSet but rather a\n      // BitsFilteredDocIdSet.  Instead, we filter by\n      // acceptDocs when we score:\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, null);\n\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents.bits() instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents.bits());\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, (FixedBitSet) parents.bits(), doScores, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(LeafReaderContext,Bits,boolean).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(LeafReaderContext readerContext, Bits acceptDocs, boolean needsScores) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext, null, needsScores);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: this doesn't take acceptDocs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitDocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      if (parents == null) {\n        // No parents\n        return null;\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, parents.bits(), doScores, acceptDocs);\n    }\n\n","sourceOld":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: this doesn't take acceptDocs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitDocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      if (parents == null) {\n        // No parents\n        return null;\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, parents.bits(), doScores, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(LeafReaderContext,Bits).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(LeafReaderContext,Bits,boolean).mjava","sourceNew":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: this doesn't take acceptDocs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitDocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      if (parents == null) {\n        // No parents\n        return null;\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, parents.bits(), doScores, acceptDocs);\n    }\n\n","sourceOld":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(LeafReaderContext readerContext, Bits acceptDocs, boolean needsScores) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext, null, needsScores);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: this doesn't take acceptDocs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitDocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      if (parents == null) {\n        // No parents\n        return null;\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, parents.bits(), doScores, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(LeafReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(LeafReaderContext,Bits).mjava","sourceNew":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(LeafReaderContext readerContext) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: this doesn't take acceptDocs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitDocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      if (parents == null) {\n        // No parents\n        return null;\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, parents.bits(), doScores);\n    }\n\n","sourceOld":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(LeafReaderContext readerContext, Bits acceptDocs) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: this doesn't take acceptDocs into account, the responsibility\n      // to not match deleted docs is on the scorer\n      final BitDocIdSet parents = parentsFilter.getDocIdSet(readerContext);\n      if (parents == null) {\n        // No parents\n        return null;\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, parents.bits(), doScores, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["fb17639909a369c1e64866842e5c213440acc17e"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80c55596a764e2d397e982828e75fcac5ce430a0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["80c55596a764e2d397e982828e75fcac5ce430a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}