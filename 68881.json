{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#addReplicaHints(String,String,double,int,List[Pair[String,String]]).mjava","commits":[{"id":"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a","date":1524514741,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#addReplicaHints(String,String,double,int,List[Pair[String,String]]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method implements a primitive form of proportional controller with a limiter.\n   */\n  private void addReplicaHints(String collection, String shard, double r, int replicationFactor, List<Pair<String, String>> hints) {\n    int numReplicas = (int)Math.round((r - aboveRate) / (double) replicationFactor);\n    // in one event add at least 1 replica\n    if (numReplicas < 1) {\n      numReplicas = 1;\n    }\n    // ... and at most maxOps replicas\n    if (numReplicas > maxOps) {\n      numReplicas = maxOps;\n    }\n    for (int i = 0; i < numReplicas; i++) {\n      hints.add(new Pair(collection, shard));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#addReplicaHints(String,String,double,int,List[Pair[String,String]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#addReplicaHints(String,String,double,int,List[Pair[String,String]]).mjava","sourceNew":"  /**\n   * This method implements a primitive form of proportional controller with a limiter.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void addReplicaHints(String collection, String shard, double r, int replicationFactor, List<Pair<String, String>> hints) {\n    int numReplicas = (int)Math.round((r - aboveRate) / (double) replicationFactor);\n    // in one event add at least 1 replica\n    if (numReplicas < 1) {\n      numReplicas = 1;\n    }\n    // ... and at most maxOps replicas\n    if (numReplicas > maxOps) {\n      numReplicas = maxOps;\n    }\n    for (int i = 0; i < numReplicas; i++) {\n      hints.add(new Pair(collection, shard));\n    }\n  }\n\n","sourceOld":"  /**\n   * This method implements a primitive form of proportional controller with a limiter.\n   */\n  private void addReplicaHints(String collection, String shard, double r, int replicationFactor, List<Pair<String, String>> hints) {\n    int numReplicas = (int)Math.round((r - aboveRate) / (double) replicationFactor);\n    // in one event add at least 1 replica\n    if (numReplicas < 1) {\n      numReplicas = 1;\n    }\n    // ... and at most maxOps replicas\n    if (numReplicas > maxOps) {\n      numReplicas = maxOps;\n    }\n    for (int i = 0; i < numReplicas; i++) {\n      hints.add(new Pair(collection, shard));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#addReplicaHints(String,String,double,int,List[Pair[String,String]]).mjava","sourceNew":null,"sourceOld":"  /**\n   * This method implements a primitive form of proportional controller with a limiter.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void addReplicaHints(String collection, String shard, double r, int replicationFactor, List<Pair<String, String>> hints) {\n    int numReplicas = (int)Math.round((r - aboveRate) / (double) replicationFactor);\n    // in one event add at least 1 replica\n    if (numReplicas < 1) {\n      numReplicas = 1;\n    }\n    // ... and at most maxOps replicas\n    if (numReplicas > maxOps) {\n      numReplicas = maxOps;\n    }\n    for (int i = 0; i < numReplicas; i++) {\n      hints.add(new Pair(collection, shard));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}