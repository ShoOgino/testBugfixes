{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !this.storePayloads;\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !this.storePayloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.indexed != indexed) {\n      this.indexed = true;                      // once indexed, always index\n    }\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !this.storePayloads;\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !this.storePayloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf09c02272f823c216c96545af03876602d27996","date":1337363554,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.indexed != indexed) {\n      this.indexed = true;                      // once indexed, always index\n    }\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !this.storePayloads;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.indexed != indexed) {\n      this.indexed = true;                      // once indexed, always index\n    }\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !this.storePayloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19e1fda71fec5a2a0d0fd11eccb5b7cd50cfd059","date":1337694380,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.indexed != indexed) {\n      this.indexed = true;                      // once indexed, always index\n    }\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n        this.normType = null;\n      }\n      if (this.indexOptions != indexOptions) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !this.storePayloads;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.indexed != indexed) {\n      this.indexed = true;                      // once indexed, always index\n    }\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !this.storePayloads;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.indexed != indexed) {\n      this.indexed = true;                      // once indexed, always index\n    }\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n        this.normType = null;\n      }\n      if (this.indexOptions != indexOptions) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !this.storePayloads;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean isIndexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.isIndexed != isIndexed) {\n      this.isIndexed = true;                      // once indexed, always index\n    }\n    if (isIndexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !this.storePayloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83ede60c0b5bb96ad193414bbd663193b56689b3","date":1338331478,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.indexed != indexed) {\n      this.indexed = true;                      // once indexed, always index\n    }\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n        this.normType = null;\n      }\n      if (this.indexOptions != indexOptions) {\n        if (this.indexOptions == null) {\n          this.indexOptions = indexOptions;\n        } else {\n          // downgrade\n          this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        }\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert checkConsistency();\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.indexed != indexed) {\n      this.indexed = true;                      // once indexed, always index\n    }\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n        this.normType = null;\n      }\n      if (this.indexOptions != indexOptions) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !this.storePayloads;\n    assert checkConsistency();\n  }\n\n","bugFix":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","31f025ae60076ae95274433f3fe8e6ace2857a87"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55eeb2534cd53d2a985669829df942468ebf5314","date":1354409119,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    if (this.indexed != indexed) {\n      this.indexed = true;                      // once indexed, always index\n    }\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n        this.normType = null;\n      }\n      if (this.indexOptions != indexOptions) {\n        if (this.indexOptions == null) {\n          this.indexOptions = indexOptions;\n        } else {\n          // downgrade\n          this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        }\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert checkConsistency();\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.indexed != indexed) {\n      this.indexed = true;                      // once indexed, always index\n    }\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n        this.normType = null;\n      }\n      if (this.indexOptions != indexOptions) {\n        if (this.indexOptions == null) {\n          this.indexOptions = indexOptions;\n        } else {\n          // downgrade\n          this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        }\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    if (this.indexed != indexed) {\n      this.indexed = true;                      // once indexed, always index\n    }\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n        this.normType = null;\n      }\n      if (this.indexOptions != indexOptions) {\n        if (this.indexOptions == null) {\n          this.indexOptions = indexOptions;\n        } else {\n          // downgrade\n          this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        }\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert checkConsistency();\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n\n    if (this.indexed != indexed) {\n      this.indexed = true;                      // once indexed, always index\n    }\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n        this.normType = null;\n      }\n      if (this.indexOptions != indexOptions) {\n        if (this.indexOptions == null) {\n          this.indexOptions = indexOptions;\n        } else {\n          // downgrade\n          this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        }\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert checkConsistency();\n  }\n\n","bugFix":["e19ec8535092055101db3ede419e136b73d235ac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    this.indexed |= indexed;  // once indexed, always indexed\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n        this.normType = null;\n      }\n      if (this.indexOptions != indexOptions) {\n        if (this.indexOptions == null) {\n          this.indexOptions = indexOptions;\n        } else {\n          // downgrade\n          this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        }\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert checkConsistency();\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    if (this.indexed != indexed) {\n      this.indexed = true;                      // once indexed, always index\n    }\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n        this.normType = null;\n      }\n      if (this.indexOptions != indexOptions) {\n        if (this.indexOptions == null) {\n          this.indexOptions = indexOptions;\n        } else {\n          // downgrade\n          this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        }\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    this.indexed |= indexed;  // once indexed, always indexed\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n        this.normType = null;\n      }\n      if (this.indexOptions != indexOptions) {\n        if (this.indexOptions == null) {\n          this.indexOptions = indexOptions;\n        } else {\n          // downgrade\n          this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        }\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert checkConsistency();\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    if (this.indexed != indexed) {\n      this.indexed = true;                      // once indexed, always index\n    }\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n        this.normType = null;\n      }\n      if (this.indexOptions != indexOptions) {\n        if (this.indexOptions == null) {\n          this.indexOptions = indexOptions;\n        } else {\n          // downgrade\n          this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        }\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    this.indexed |= indexed;  // once indexed, always indexed\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n        this.normType = null;\n      }\n      if (this.indexOptions != indexOptions) {\n        if (this.indexOptions == null) {\n          this.indexOptions = indexOptions;\n        } else {\n          // downgrade\n          this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        }\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert checkConsistency();\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    if (this.indexed != indexed) {\n      this.indexed = true;                      // once indexed, always index\n    }\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      if (this.storeTermVector != storeTermVector) {\n        this.storeTermVector = true;                // once vector, always vector\n      }\n      if (this.storePayloads != storePayloads) {\n        this.storePayloads = true;\n      }\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n        this.normType = null;\n      }\n      if (this.indexOptions != indexOptions) {\n        if (this.indexOptions == null) {\n          this.indexOptions = indexOptions;\n        } else {\n          // downgrade\n          this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        }\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05da2d758a6089e737cdfc230e57a51b472b94b6","date":1413392310,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    this.indexed |= indexed;  // once indexed, always indexed\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        if (this.indexOptions == null) {\n          this.indexOptions = indexOptions;\n        } else {\n          // downgrade\n          this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        }\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert checkConsistency();\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    this.indexed |= indexed;  // once indexed, always indexed\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n        this.normType = null;\n      }\n      if (this.indexOptions != indexOptions) {\n        if (this.indexOptions == null) {\n          this.indexOptions = indexOptions;\n        } else {\n          // downgrade\n          this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        }\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    this.indexed |= indexed;  // once indexed, always indexed\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        if (this.indexOptions == null) {\n          this.indexOptions = indexOptions;\n        } else {\n          // downgrade\n          this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        }\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert checkConsistency();\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    this.indexed |= indexed;  // once indexed, always indexed\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n        this.normType = null;\n      }\n      if (this.indexOptions != indexOptions) {\n        if (this.indexOptions == null) {\n          this.indexOptions = indexOptions;\n        } else {\n          // downgrade\n          this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        }\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    if (this.indexOptions != indexOptions) {\n      if (this.indexOptions == null) {\n        this.indexOptions = indexOptions;\n      } else if (indexOptions != null) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n      }\n    }\n\n    if (this.indexOptions != null) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n\n      // Awkward: only drop norms if incoming update is indexed:\n      if (indexOptions != null && this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n    }\n    if (this.indexOptions == null || this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      // cannot store payloads if we don't store positions:\n      this.storePayloads = false;\n    }\n    assert checkConsistency();\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    this.indexed |= indexed;  // once indexed, always indexed\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        if (this.indexOptions == null) {\n          this.indexOptions = indexOptions;\n        } else {\n          // downgrade\n          this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        }\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#update(boolean,boolean,boolean,boolean,IndexOptions).mjava","sourceNew":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    if (this.indexOptions != indexOptions) {\n      if (this.indexOptions == null) {\n        this.indexOptions = indexOptions;\n      } else if (indexOptions != null) {\n        // downgrade\n        this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n      }\n    }\n\n    if (this.indexOptions != null) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n\n      // Awkward: only drop norms if incoming update is indexed:\n      if (indexOptions != null && this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n    }\n    if (this.indexOptions == null || this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      // cannot store payloads if we don't store positions:\n      this.storePayloads = false;\n    }\n    assert checkConsistency();\n  }\n\n","sourceOld":"  // should only be called by FieldInfos#addOrUpdate\n  void update(boolean indexed, boolean storeTermVector, boolean omitNorms, boolean storePayloads, IndexOptions indexOptions) {\n    //System.out.println(\"FI.update field=\" + name + \" indexed=\" + indexed + \" omitNorms=\" + omitNorms + \" this.omitNorms=\" + this.omitNorms);\n    this.indexed |= indexed;  // once indexed, always indexed\n    if (indexed) { // if updated field data is not for indexing, leave the updates out\n      this.storeTermVector |= storeTermVector;                // once vector, always vector\n      this.storePayloads |= storePayloads;\n      if (this.omitNorms != omitNorms) {\n        this.omitNorms = true;                // if one require omitNorms at least once, it remains off for life\n      }\n      if (this.indexOptions != indexOptions) {\n        if (this.indexOptions == null) {\n          this.indexOptions = indexOptions;\n        } else {\n          // downgrade\n          this.indexOptions = this.indexOptions.compareTo(indexOptions) < 0 ? this.indexOptions : indexOptions;\n        }\n        if (this.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          // cannot store payloads if we don't store positions:\n          this.storePayloads = false;\n        }\n      }\n    }\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["3394716f52b34ab259ad5247e7595d9f9db6e935","05da2d758a6089e737cdfc230e57a51b472b94b6"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["d4d69c535930b5cce125cff868d40f6373dc27d4","3394716f52b34ab259ad5247e7595d9f9db6e935"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83ede60c0b5bb96ad193414bbd663193b56689b3":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"55eeb2534cd53d2a985669829df942468ebf5314":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"cf09c02272f823c216c96545af03876602d27996":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"3184874f7f3aca850248483485b4995343066875":["05da2d758a6089e737cdfc230e57a51b472b94b6"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["d4d69c535930b5cce125cff868d40f6373dc27d4","52c7e49be259508735752fba88085255014a6ecf"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","19e1fda71fec5a2a0d0fd11eccb5b7cd50cfd059"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","3184874f7f3aca850248483485b4995343066875"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["83ede60c0b5bb96ad193414bbd663193b56689b3","55eeb2534cd53d2a985669829df942468ebf5314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19e1fda71fec5a2a0d0fd11eccb5b7cd50cfd059":["cf09c02272f823c216c96545af03876602d27996"],"52c7e49be259508735752fba88085255014a6ecf":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3184874f7f3aca850248483485b4995343066875"]},"commit2Childs":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","3184874f7f3aca850248483485b4995343066875"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"83ede60c0b5bb96ad193414bbd663193b56689b3":["55eeb2534cd53d2a985669829df942468ebf5314","d4d69c535930b5cce125cff868d40f6373dc27d4"],"55eeb2534cd53d2a985669829df942468ebf5314":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cf09c02272f823c216c96545af03876602d27996":["19e1fda71fec5a2a0d0fd11eccb5b7cd50cfd059"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["05da2d758a6089e737cdfc230e57a51b472b94b6","c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["cf09c02272f823c216c96545af03876602d27996"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3394716f52b34ab259ad5247e7595d9f9db6e935","52c7e49be259508735752fba88085255014a6ecf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"19e1fda71fec5a2a0d0fd11eccb5b7cd50cfd059":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}