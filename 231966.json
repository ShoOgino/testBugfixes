{"path":"src/common/org/apache/solr/common/util/XML#escape(char[],int,int,Writer,String[]).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/XML#escape(char[],int,int,Writer,String[]).mjava","pathOld":"src/java/org/apache/solr/common/util/XML#escape(char[],int,int,Writer,String[]).mjava","sourceNew":"  private static void escape(char [] chars, int offset, int length, Writer out, String [] escapes) throws IOException{\n     for (int i=offset; i<length; i++) {\n      char ch = chars[i];\n      if (ch<escapes.length) {\n        String replacement = escapes[ch];\n        if (replacement != null) {\n          out.write(replacement);\n          continue;\n        }\n      }\n      out.write(ch);\n    }\n  }\n\n","sourceOld":"  private static void escape(char [] chars, int offset, int length, Writer out, String [] escapes) throws IOException{\n     for (int i=offset; i<length; i++) {\n      char ch = chars[i];\n      if (ch<escapes.length) {\n        String replacement = escapes[ch];\n        if (replacement != null) {\n          out.write(replacement);\n          continue;\n        }\n      }\n      out.write(ch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/XML#escape(char[],int,int,Writer,String[]).mjava","pathOld":"src/common/org/apache/solr/common/util/XML#escape(char[],int,int,Writer,String[]).mjava","sourceNew":"  private static void escape(char [] chars, int offset, int length, Writer out, String [] escapes) throws IOException{\n     for (int i=offset; i<length; i++) {\n      char ch = chars[i];\n      if (ch<escapes.length) {\n        String replacement = escapes[ch];\n        if (replacement != null) {\n          out.write(replacement);\n          continue;\n        }\n      }\n      out.write(ch);\n    }\n  }\n\n","sourceOld":"  private static void escape(char [] chars, int offset, int length, Writer out, String [] escapes) throws IOException{\n     for (int i=offset; i<length; i++) {\n      char ch = chars[i];\n      if (ch<escapes.length) {\n        String replacement = escapes[ch];\n        if (replacement != null) {\n          out.write(replacement);\n          continue;\n        }\n      }\n      out.write(ch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}