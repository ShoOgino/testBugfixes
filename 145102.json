{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadTlogFiles(File,long).mjava","commits":[{"id":"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","date":1446841099,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadTlogFiles(File,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Download all the tlog files to the temp tlog directory.\n   */\n  private long downloadTlogFiles(File tmpTlogDir, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of tlog files from master: \" + tlogFilesToDownload);\n    tlogFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    long bytesDownloaded = 0;\n\n    boolean status = tmpTlogDir.mkdirs();\n    if (!status) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to create temporary tlog folder: \" + tmpTlogDir.getName());\n    }\n    for (Map<String, Object> file : tlogFilesToDownload) {\n      String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n      localFileFetcher = new LocalFsFileFetcher(tmpTlogDir, file, saveAs, TLOG_FILE, latestGeneration);\n      currentFile = file;\n      localFileFetcher.fetchFile();\n      bytesDownloaded += localFileFetcher.getBytesDownloaded();\n      tlogFilesDownloaded.add(new HashMap<>(file));\n    }\n    return bytesDownloaded;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadTlogFiles(File,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadTlogFiles(File,long).mjava","sourceNew":"  /**\n   * Download all the tlog files to the temp tlog directory.\n   */\n  private long downloadTlogFiles(File tmpTlogDir, long latestGeneration) throws Exception {\n    log.info(\"Starting download of tlog files from master: \" + tlogFilesToDownload);\n    tlogFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    long bytesDownloaded = 0;\n\n    boolean status = tmpTlogDir.mkdirs();\n    if (!status) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to create temporary tlog folder: \" + tmpTlogDir.getName());\n    }\n    for (Map<String, Object> file : tlogFilesToDownload) {\n      String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n      localFileFetcher = new LocalFsFileFetcher(tmpTlogDir, file, saveAs, TLOG_FILE, latestGeneration);\n      currentFile = file;\n      localFileFetcher.fetchFile();\n      bytesDownloaded += localFileFetcher.getBytesDownloaded();\n      tlogFilesDownloaded.add(new HashMap<>(file));\n    }\n    return bytesDownloaded;\n  }\n\n","sourceOld":"  /**\n   * Download all the tlog files to the temp tlog directory.\n   */\n  private long downloadTlogFiles(File tmpTlogDir, long latestGeneration) throws Exception {\n    LOG.info(\"Starting download of tlog files from master: \" + tlogFilesToDownload);\n    tlogFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    long bytesDownloaded = 0;\n\n    boolean status = tmpTlogDir.mkdirs();\n    if (!status) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to create temporary tlog folder: \" + tmpTlogDir.getName());\n    }\n    for (Map<String, Object> file : tlogFilesToDownload) {\n      String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n      localFileFetcher = new LocalFsFileFetcher(tmpTlogDir, file, saveAs, TLOG_FILE, latestGeneration);\n      currentFile = file;\n      localFileFetcher.fetchFile();\n      bytesDownloaded += localFileFetcher.getBytesDownloaded();\n      tlogFilesDownloaded.add(new HashMap<>(file));\n    }\n    return bytesDownloaded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadTlogFiles(File,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadTlogFiles(File,long).mjava","sourceNew":"  /**\n   * Download all the tlog files to the temp tlog directory.\n   */\n  private long downloadTlogFiles(File tmpTlogDir, long latestGeneration) throws Exception {\n    log.info(\"Starting download of tlog files from master: {}\", tlogFilesToDownload);\n    tlogFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    long bytesDownloaded = 0;\n\n    boolean status = tmpTlogDir.mkdirs();\n    if (!status) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to create temporary tlog folder: \" + tmpTlogDir.getName());\n    }\n    for (Map<String, Object> file : tlogFilesToDownload) {\n      String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n      localFileFetcher = new LocalFsFileFetcher(tmpTlogDir, file, saveAs, TLOG_FILE, latestGeneration);\n      currentFile = file;\n      localFileFetcher.fetchFile();\n      bytesDownloaded += localFileFetcher.getBytesDownloaded();\n      tlogFilesDownloaded.add(new HashMap<>(file));\n    }\n    return bytesDownloaded;\n  }\n\n","sourceOld":"  /**\n   * Download all the tlog files to the temp tlog directory.\n   */\n  private long downloadTlogFiles(File tmpTlogDir, long latestGeneration) throws Exception {\n    log.info(\"Starting download of tlog files from master: \" + tlogFilesToDownload);\n    tlogFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    long bytesDownloaded = 0;\n\n    boolean status = tmpTlogDir.mkdirs();\n    if (!status) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to create temporary tlog folder: \" + tmpTlogDir.getName());\n    }\n    for (Map<String, Object> file : tlogFilesToDownload) {\n      String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n      localFileFetcher = new LocalFsFileFetcher(tmpTlogDir, file, saveAs, TLOG_FILE, latestGeneration);\n      currentFile = file;\n      localFileFetcher.fetchFile();\n      bytesDownloaded += localFileFetcher.getBytesDownloaded();\n      tlogFilesDownloaded.add(new HashMap<>(file));\n    }\n    return bytesDownloaded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadTlogFiles(File,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadTlogFiles(File,long).mjava","sourceNew":"  /**\n   * Download all the tlog files to the temp tlog directory.\n   */\n  private long downloadTlogFiles(File tmpTlogDir, long latestGeneration) throws Exception {\n    log.info(\"Starting download of tlog files from leader: {}\", tlogFilesToDownload);\n    tlogFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    long bytesDownloaded = 0;\n\n    boolean status = tmpTlogDir.mkdirs();\n    if (!status) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to create temporary tlog folder: \" + tmpTlogDir.getName());\n    }\n    for (Map<String, Object> file : tlogFilesToDownload) {\n      String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n      localFileFetcher = new LocalFsFileFetcher(tmpTlogDir, file, saveAs, TLOG_FILE, latestGeneration);\n      currentFile = file;\n      localFileFetcher.fetchFile();\n      bytesDownloaded += localFileFetcher.getBytesDownloaded();\n      tlogFilesDownloaded.add(new HashMap<>(file));\n    }\n    return bytesDownloaded;\n  }\n\n","sourceOld":"  /**\n   * Download all the tlog files to the temp tlog directory.\n   */\n  private long downloadTlogFiles(File tmpTlogDir, long latestGeneration) throws Exception {\n    log.info(\"Starting download of tlog files from master: {}\", tlogFilesToDownload);\n    tlogFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    long bytesDownloaded = 0;\n\n    boolean status = tmpTlogDir.mkdirs();\n    if (!status) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to create temporary tlog folder: \" + tmpTlogDir.getName());\n    }\n    for (Map<String, Object> file : tlogFilesToDownload) {\n      String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n      localFileFetcher = new LocalFsFileFetcher(tmpTlogDir, file, saveAs, TLOG_FILE, latestGeneration);\n      currentFile = file;\n      localFileFetcher.fetchFile();\n      bytesDownloaded += localFileFetcher.getBytesDownloaded();\n      tlogFilesDownloaded.add(new HashMap<>(file));\n    }\n    return bytesDownloaded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadTlogFiles(File,long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Download all the tlog files to the temp tlog directory.\n   */\n  private long downloadTlogFiles(File tmpTlogDir, long latestGeneration) throws Exception {\n    log.info(\"Starting download of tlog files from leader: {}\", tlogFilesToDownload);\n    tlogFilesDownloaded = Collections.synchronizedList(new ArrayList<>());\n    long bytesDownloaded = 0;\n\n    boolean status = tmpTlogDir.mkdirs();\n    if (!status) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to create temporary tlog folder: \" + tmpTlogDir.getName());\n    }\n    for (Map<String, Object> file : tlogFilesToDownload) {\n      String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n      localFileFetcher = new LocalFsFileFetcher(tmpTlogDir, file, saveAs, TLOG_FILE, latestGeneration);\n      currentFile = file;\n      localFileFetcher.fetchFile();\n      bytesDownloaded += localFileFetcher.getBytesDownloaded();\n      tlogFilesDownloaded.add(new HashMap<>(file));\n    }\n    return bytesDownloaded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"]},"commit2Childs":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}