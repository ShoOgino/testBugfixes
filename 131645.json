{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#getFrame(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#getFrame(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#getFrame(int).mjava","sourceNew":"      private Frame getFrame(int ord) throws IOException {\n        if (ord >= stack.length) {\n          final Frame[] next = new Frame[ArrayUtil.oversize(1+ord, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(stack, 0, next, 0, stack.length);\n          for(int stackOrd=stack.length;stackOrd<next.length;stackOrd++) {\n            next[stackOrd] = new Frame(stackOrd);\n          }\n          stack = next;\n        }\n        assert stack[ord].ord == ord;\n        return stack[ord];\n      }\n\n","sourceOld":"      private Frame getFrame(int ord) throws IOException {\n        if (ord >= stack.length) {\n          final Frame[] next = new Frame[ArrayUtil.oversize(1+ord, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(stack, 0, next, 0, stack.length);\n          for(int stackOrd=stack.length;stackOrd<next.length;stackOrd++) {\n            next[stackOrd] = new Frame(stackOrd);\n          }\n          stack = next;\n        }\n        assert stack[ord].ord == ord;\n        return stack[ord];\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.FieldReader.IntersectEnum#getFrame(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#getFrame(int).mjava","sourceNew":"      private Frame getFrame(int ord) throws IOException {\n        if (ord >= stack.length) {\n          final Frame[] next = new Frame[ArrayUtil.oversize(1+ord, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(stack, 0, next, 0, stack.length);\n          for(int stackOrd=stack.length;stackOrd<next.length;stackOrd++) {\n            next[stackOrd] = new Frame(stackOrd);\n          }\n          stack = next;\n        }\n        assert stack[ord].ord == ord;\n        return stack[ord];\n      }\n\n","sourceOld":"      private Frame getFrame(int ord) throws IOException {\n        if (ord >= stack.length) {\n          final Frame[] next = new Frame[ArrayUtil.oversize(1+ord, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(stack, 0, next, 0, stack.length);\n          for(int stackOrd=stack.length;stackOrd<next.length;stackOrd++) {\n            next[stackOrd] = new Frame(stackOrd);\n          }\n          stack = next;\n        }\n        assert stack[ord].ord == ord;\n        return stack[ord];\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#getFrame(int).mjava","sourceNew":null,"sourceOld":"      private Frame getFrame(int ord) throws IOException {\n        if (ord >= stack.length) {\n          final Frame[] next = new Frame[ArrayUtil.oversize(1+ord, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          System.arraycopy(stack, 0, next, 0, stack.length);\n          for(int stackOrd=stack.length;stackOrd<next.length;stackOrd++) {\n            next[stackOrd] = new Frame(stackOrd);\n          }\n          stack = next;\n        }\n        assert stack[ord].ord == ord;\n        return stack[ord];\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d637064d608752565d4f9f41b2497dfdfdde50e"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4d637064d608752565d4f9f41b2497dfdfdde50e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}