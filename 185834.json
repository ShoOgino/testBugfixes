{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadTlogFiles(String,long).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadTlogFiles(String,long).mjava","pathOld":"/dev/null","sourceNew":"  private void downloadTlogFiles(String timestamp, long latestGeneration) throws Exception {\n    UpdateLog ulog = solrCore.getUpdateHandler().getUpdateLog();\n\n    LOG.info(\"Starting download of tlog files from master: \" + tlogFilesToDownload);\n    tlogFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpTlogDir = new File(ulog.getLogDir(), \"tlog.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpTlogDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Failed to create temporary tlog folder: \" + tmpTlogDir.getName());\n      }\n      for (Map<String, Object> file : tlogFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpTlogDir, file, saveAs, TLOG_FILE, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        tlogFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpTlogFiles2Tlog(tmpTlogDir, timestamp);\n    } finally {\n      delTree(tmpTlogDir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4241c44998effab9382acfd7f0b042f3fe9c25","date":1432671323,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadTlogFiles(String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadTlogFiles(String,long).mjava","sourceNew":"  private void downloadTlogFiles(String timestamp, long latestGeneration) throws Exception {\n    UpdateLog ulog = solrCore.getUpdateHandler().getUpdateLog();\n\n    LOG.info(\"Starting download of tlog files from master: \" + tlogFilesToDownload);\n    tlogFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpTlogDir = new File(ulog.getLogDir(), \"tlog.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpTlogDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Failed to create temporary tlog folder: \" + tmpTlogDir.getName());\n      }\n      for (Map<String, Object> file : tlogFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpTlogDir, file, saveAs, TLOG_FILE, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        tlogFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      ((CdcrUpdateLog) ulog).reset(); // reset the update log before copying the new tlog directory\n      copyTmpTlogFiles2Tlog(tmpTlogDir, timestamp);\n      ulog.init(solrCore.getUpdateHandler(), solrCore); // re-initialise the update log with the new directory\n    } finally {\n      delTree(tmpTlogDir);\n    }\n  }\n\n","sourceOld":"  private void downloadTlogFiles(String timestamp, long latestGeneration) throws Exception {\n    UpdateLog ulog = solrCore.getUpdateHandler().getUpdateLog();\n\n    LOG.info(\"Starting download of tlog files from master: \" + tlogFilesToDownload);\n    tlogFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpTlogDir = new File(ulog.getLogDir(), \"tlog.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpTlogDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Failed to create temporary tlog folder: \" + tmpTlogDir.getName());\n      }\n      for (Map<String, Object> file : tlogFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpTlogDir, file, saveAs, TLOG_FILE, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        tlogFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpTlogFiles2Tlog(tmpTlogDir, timestamp);\n    } finally {\n      delTree(tmpTlogDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ad16d9bdc03ec6adfd5d4b7b6ea14b256ce3998","date":1445881418,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadTlogFiles(String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadTlogFiles(String,long).mjava","sourceNew":"  private long downloadTlogFiles(String timestamp, long latestGeneration) throws Exception {\n    UpdateLog ulog = solrCore.getUpdateHandler().getUpdateLog();\n\n    LOG.info(\"Starting download of tlog files from master: \" + tlogFilesToDownload);\n    tlogFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    long bytesDownloaded = 0;\n    File tmpTlogDir = new File(ulog.getLogDir(), \"tlog.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpTlogDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Failed to create temporary tlog folder: \" + tmpTlogDir.getName());\n      }\n      for (Map<String, Object> file : tlogFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpTlogDir, file, saveAs, TLOG_FILE, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        bytesDownloaded += localFileFetcher.getBytesDownloaded();\n        tlogFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      ((CdcrUpdateLog) ulog).reset(); // reset the update log before copying the new tlog directory\n      copyTmpTlogFiles2Tlog(tmpTlogDir, timestamp);\n      ulog.init(solrCore.getUpdateHandler(), solrCore); // re-initialise the update log with the new directory\n    } finally {\n      delTree(tmpTlogDir);\n    }\n    return bytesDownloaded;\n  }\n\n","sourceOld":"  private void downloadTlogFiles(String timestamp, long latestGeneration) throws Exception {\n    UpdateLog ulog = solrCore.getUpdateHandler().getUpdateLog();\n\n    LOG.info(\"Starting download of tlog files from master: \" + tlogFilesToDownload);\n    tlogFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpTlogDir = new File(ulog.getLogDir(), \"tlog.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpTlogDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Failed to create temporary tlog folder: \" + tmpTlogDir.getName());\n      }\n      for (Map<String, Object> file : tlogFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpTlogDir, file, saveAs, TLOG_FILE, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        tlogFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      ((CdcrUpdateLog) ulog).reset(); // reset the update log before copying the new tlog directory\n      copyTmpTlogFiles2Tlog(tmpTlogDir, timestamp);\n      ulog.init(solrCore.getUpdateHandler(), solrCore); // re-initialise the update log with the new directory\n    } finally {\n      delTree(tmpTlogDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","date":1446841099,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadTlogFiles(String,long).mjava","sourceNew":null,"sourceOld":"  private long downloadTlogFiles(String timestamp, long latestGeneration) throws Exception {\n    UpdateLog ulog = solrCore.getUpdateHandler().getUpdateLog();\n\n    LOG.info(\"Starting download of tlog files from master: \" + tlogFilesToDownload);\n    tlogFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    long bytesDownloaded = 0;\n    File tmpTlogDir = new File(ulog.getLogDir(), \"tlog.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpTlogDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Failed to create temporary tlog folder: \" + tmpTlogDir.getName());\n      }\n      for (Map<String, Object> file : tlogFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        localFileFetcher = new LocalFsFileFetcher(tmpTlogDir, file, saveAs, TLOG_FILE, latestGeneration);\n        currentFile = file;\n        localFileFetcher.fetchFile();\n        bytesDownloaded += localFileFetcher.getBytesDownloaded();\n        tlogFilesDownloaded.add(new HashMap<>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      ((CdcrUpdateLog) ulog).reset(); // reset the update log before copying the new tlog directory\n      copyTmpTlogFiles2Tlog(tmpTlogDir, timestamp);\n      ulog.init(solrCore.getUpdateHandler(), solrCore); // re-initialise the update log with the new directory\n    } finally {\n      delTree(tmpTlogDir);\n    }\n    return bytesDownloaded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["6ad16d9bdc03ec6adfd5d4b7b6ea14b256ce3998"],"7f4241c44998effab9382acfd7f0b042f3fe9c25":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"6ad16d9bdc03ec6adfd5d4b7b6ea14b256ce3998":["7f4241c44998effab9382acfd7f0b042f3fe9c25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["7f4241c44998effab9382acfd7f0b042f3fe9c25"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f4241c44998effab9382acfd7f0b042f3fe9c25":["6ad16d9bdc03ec6adfd5d4b7b6ea14b256ce3998"],"6ad16d9bdc03ec6adfd5d4b7b6ea14b256ce3998":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}