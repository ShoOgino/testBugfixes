{"path":"lucene/src/java/org/apache/lucene/index/values/FixedSortedBytesImpl.Writer#finishInternal(int).mjava","commits":[{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedSortedBytesImpl.Writer#finishInternal(int).mjava","pathOld":"/dev/null","sourceNew":"    // Important that we get docCount, in case there were\n    // some last docs that we didn't see\n    @Override\n    public void finishInternal(int docCount) throws IOException {\n      final IndexOutput datOut = getOrCreateDataOut();\n      final int count = hash.size();\n      final int[] address = new int[count+1]; // addr 0 is default values\n      datOut.writeInt(size);\n      if (size != -1) {\n        final int[] sortedEntries = hash.sort(comp);\n        // first dump bytes data, recording address as we go\n        final BytesRef bytesRef = new BytesRef(size);\n        for (int i = 0; i < count; i++) {\n          final int e = sortedEntries[i];\n          final BytesRef bytes = hash.get(e, bytesRef);\n          assert bytes.length == size;\n          datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n          address[e + 1] = 1 + i;\n        }\n      }\n      final IndexOutput idxOut = getOrCreateIndexOut();\n      idxOut.writeInt(count);\n      writeIndex(idxOut, docCount, count, address, docToEntry);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedSortedBytesImpl.Writer#finishInternal(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedSortedBytesImpl.Writer#finishInternal(int).mjava","sourceNew":"    // Important that we get docCount, in case there were\n    // some last docs that we didn't see\n    @Override\n    public void finishInternal(int docCount) throws IOException {\n      fillDefault(docCount);\n      final IndexOutput datOut = getOrCreateDataOut();\n      final int count = hash.size();\n      final int[] address = new int[count]; // addr 0 is default values\n      datOut.writeInt(size);\n      if (size != -1) {\n        final int[] sortedEntries = hash.sort(comp);\n        // first dump bytes data, recording address as we go\n        final BytesRef bytesRef = new BytesRef(size);\n        for (int i = 0; i < count; i++) {\n          final int e = sortedEntries[i];\n          final BytesRef bytes = hash.get(e, bytesRef);\n          assert bytes.length == size;\n          datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n          address[e] = i;\n        }\n      }\n      final IndexOutput idxOut = getOrCreateIndexOut();\n      idxOut.writeInt(count);\n      writeIndex(idxOut, docCount, count, address, docToEntry);\n    }\n\n","sourceOld":"    // Important that we get docCount, in case there were\n    // some last docs that we didn't see\n    @Override\n    public void finishInternal(int docCount) throws IOException {\n      final IndexOutput datOut = getOrCreateDataOut();\n      final int count = hash.size();\n      final int[] address = new int[count+1]; // addr 0 is default values\n      datOut.writeInt(size);\n      if (size != -1) {\n        final int[] sortedEntries = hash.sort(comp);\n        // first dump bytes data, recording address as we go\n        final BytesRef bytesRef = new BytesRef(size);\n        for (int i = 0; i < count; i++) {\n          final int e = sortedEntries[i];\n          final BytesRef bytes = hash.get(e, bytesRef);\n          assert bytes.length == size;\n          datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n          address[e + 1] = 1 + i;\n        }\n      }\n      final IndexOutput idxOut = getOrCreateIndexOut();\n      idxOut.writeInt(count);\n      writeIndex(idxOut, docCount, count, address, docToEntry);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1346e81f172438a4f28d91266cdd03851f94b831","date":1318404834,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedSortedBytesImpl.Writer#finishInternal(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedSortedBytesImpl.Writer#finishInternal(int).mjava","sourceNew":"    // Important that we get docCount, in case there were\n    // some last docs that we didn't see\n    @Override\n    public void finishInternal(int docCount) throws IOException {\n      fillDefault(docCount);\n      final IndexOutput datOut = getOrCreateDataOut();\n      final int count = hash.size();\n      final int[] address = new int[count];\n      datOut.writeInt(size);\n      if (size != -1) {\n        final int[] sortedEntries = hash.sort(comp);\n        // first dump bytes data, recording address as we go\n        final BytesRef spare = new BytesRef(size);\n        for (int i = 0; i < count; i++) {\n          final int e = sortedEntries[i];\n          final BytesRef bytes = hash.get(e, spare);\n          assert bytes.length == size;\n          datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n          address[e] = i;\n        }\n      }\n      final IndexOutput idxOut = getOrCreateIndexOut();\n      idxOut.writeInt(count);\n      writeIndex(idxOut, docCount, count, address, docToEntry);\n    }\n\n","sourceOld":"    // Important that we get docCount, in case there were\n    // some last docs that we didn't see\n    @Override\n    public void finishInternal(int docCount) throws IOException {\n      fillDefault(docCount);\n      final IndexOutput datOut = getOrCreateDataOut();\n      final int count = hash.size();\n      final int[] address = new int[count]; // addr 0 is default values\n      datOut.writeInt(size);\n      if (size != -1) {\n        final int[] sortedEntries = hash.sort(comp);\n        // first dump bytes data, recording address as we go\n        final BytesRef bytesRef = new BytesRef(size);\n        for (int i = 0; i < count; i++) {\n          final int e = sortedEntries[i];\n          final BytesRef bytes = hash.get(e, bytesRef);\n          assert bytes.length == size;\n          datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n          address[e] = i;\n        }\n      }\n      final IndexOutput idxOut = getOrCreateIndexOut();\n      idxOut.writeInt(count);\n      writeIndex(idxOut, docCount, count, address, docToEntry);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/FixedSortedBytesImpl.Writer#finishInternal(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedSortedBytesImpl.Writer#finishInternal(int).mjava","sourceNew":"    // Important that we get docCount, in case there were\n    // some last docs that we didn't see\n    @Override\n    public void finishInternal(int docCount) throws IOException {\n      fillDefault(docCount);\n      final IndexOutput datOut = getOrCreateDataOut();\n      final int count = hash.size();\n      final int[] address = new int[count];\n      datOut.writeInt(size);\n      if (size != -1) {\n        final int[] sortedEntries = hash.sort(comp);\n        // first dump bytes data, recording address as we go\n        final BytesRef spare = new BytesRef(size);\n        for (int i = 0; i < count; i++) {\n          final int e = sortedEntries[i];\n          final BytesRef bytes = hash.get(e, spare);\n          assert bytes.length == size;\n          datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n          address[e] = i;\n        }\n      }\n      final IndexOutput idxOut = getOrCreateIndexOut();\n      idxOut.writeInt(count);\n      writeIndex(idxOut, docCount, count, address, docToEntry);\n    }\n\n","sourceOld":"    // Important that we get docCount, in case there were\n    // some last docs that we didn't see\n    @Override\n    public void finishInternal(int docCount) throws IOException {\n      fillDefault(docCount);\n      final IndexOutput datOut = getOrCreateDataOut();\n      final int count = hash.size();\n      final int[] address = new int[count];\n      datOut.writeInt(size);\n      if (size != -1) {\n        final int[] sortedEntries = hash.sort(comp);\n        // first dump bytes data, recording address as we go\n        final BytesRef spare = new BytesRef(size);\n        for (int i = 0; i < count; i++) {\n          final int e = sortedEntries[i];\n          final BytesRef bytes = hash.get(e, spare);\n          assert bytes.length == size;\n          datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n          address[e] = i;\n        }\n      }\n      final IndexOutput idxOut = getOrCreateIndexOut();\n      idxOut.writeInt(count);\n      writeIndex(idxOut, docCount, count, address, docToEntry);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/FixedSortedBytesImpl.Writer#finishInternal(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedSortedBytesImpl.Writer#finishInternal(int).mjava","sourceNew":"    // Important that we get docCount, in case there were\n    // some last docs that we didn't see\n    @Override\n    public void finishInternal(int docCount) throws IOException {\n      fillDefault(docCount);\n      final IndexOutput datOut = getOrCreateDataOut();\n      final int count = hash.size();\n      final int[] address = new int[count];\n      datOut.writeInt(size);\n      if (size != -1) {\n        final int[] sortedEntries = hash.sort(comp);\n        // first dump bytes data, recording address as we go\n        final BytesRef spare = new BytesRef(size);\n        for (int i = 0; i < count; i++) {\n          final int e = sortedEntries[i];\n          final BytesRef bytes = hash.get(e, spare);\n          assert bytes.length == size;\n          datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n          address[e] = i;\n        }\n      }\n      final IndexOutput idxOut = getOrCreateIndexOut();\n      idxOut.writeInt(count);\n      writeIndex(idxOut, docCount, count, address, docToEntry);\n    }\n\n","sourceOld":"    // Important that we get docCount, in case there were\n    // some last docs that we didn't see\n    @Override\n    public void finishInternal(int docCount) throws IOException {\n      fillDefault(docCount);\n      final IndexOutput datOut = getOrCreateDataOut();\n      final int count = hash.size();\n      final int[] address = new int[count];\n      datOut.writeInt(size);\n      if (size != -1) {\n        final int[] sortedEntries = hash.sort(comp);\n        // first dump bytes data, recording address as we go\n        final BytesRef spare = new BytesRef(size);\n        for (int i = 0; i < count; i++) {\n          final int e = sortedEntries[i];\n          final BytesRef bytes = hash.get(e, spare);\n          assert bytes.length == size;\n          datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n          address[e] = i;\n        }\n      }\n      final IndexOutput idxOut = getOrCreateIndexOut();\n      idxOut.writeInt(count);\n      writeIndex(idxOut, docCount, count, address, docToEntry);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1346e81f172438a4f28d91266cdd03851f94b831":["e128967bca58657bc0039d4bfe631e63e81f1977"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["1346e81f172438a4f28d91266cdd03851f94b831"],"e128967bca58657bc0039d4bfe631e63e81f1977":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["1346e81f172438a4f28d91266cdd03851f94b831","f9efc72acdea22f5285be0a808f8bba51bb8e367"]},"commit2Childs":{"1346e81f172438a4f28d91266cdd03851f94b831":["f9efc72acdea22f5285be0a808f8bba51bb8e367","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["e128967bca58657bc0039d4bfe631e63e81f1977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"e128967bca58657bc0039d4bfe631e63e81f1977":["1346e81f172438a4f28d91266cdd03851f94b831"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}