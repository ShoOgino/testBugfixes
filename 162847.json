{"path":"src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1afc23adf8af4aa2dfc781b02b63710546b33","date":1227622754,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","sourceOld":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9","date":1239612124,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HTTP_CONN_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HTTP_READ_TIMEOUT);\n    myHttpClient = createHttpClient(connTimeout, readTimeout);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","sourceOld":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ee79b198d8f17b8e3feeef354b15aa77e51125c","date":1244198203,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HTTP_CONN_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HTTP_READ_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HTTP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HTTP_BASIC_AUTH_PASSWORD);\n    myHttpClient = createHttpClient(connTimeout, readTimeout);\n    if (httpBasicAuthUser != null && httpBasicAuthPassword != null) {\n      myHttpClient.getState().setCredentials(AuthScope.ANY,\n              new UsernamePasswordCredentials(httpBasicAuthUser, httpBasicAuthPassword));\n    }\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","sourceOld":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HTTP_CONN_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HTTP_READ_TIMEOUT);\n    myHttpClient = createHttpClient(connTimeout, readTimeout);\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#SnapPuller(NamedList,ReplicationHandler,SolrCore).mjava","sourceNew":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HTTP_CONN_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HTTP_READ_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HTTP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HTTP_BASIC_AUTH_PASSWORD);\n    myHttpClient = createHttpClient(connTimeout, readTimeout);\n    if (httpBasicAuthUser != null && httpBasicAuthPassword != null) {\n      myHttpClient.getState().setCredentials(AuthScope.ANY,\n              new UsernamePasswordCredentials(httpBasicAuthUser, httpBasicAuthPassword));\n    }\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","sourceOld":"  public SnapPuller(NamedList initArgs, ReplicationHandler handler, SolrCore sc) {\n    solrCore = sc;\n    masterUrl = (String) initArgs.get(MASTER_URL);\n    if (masterUrl == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"'masterUrl' is required for a slave\");\n    this.replicationHandler = handler;\n    pollIntervalStr = (String) initArgs.get(POLL_INTERVAL);\n    pollInterval = readInterval(pollIntervalStr);\n    String compress = (String) initArgs.get(COMPRESSION);\n    useInternal = INTERNAL.equals(compress);\n    useExternal = EXTERNAL.equals(compress);\n    String connTimeout = (String) initArgs.get(HTTP_CONN_TIMEOUT);\n    String readTimeout = (String) initArgs.get(HTTP_READ_TIMEOUT);\n    String httpBasicAuthUser = (String) initArgs.get(HTTP_BASIC_AUTH_USER);\n    String httpBasicAuthPassword = (String) initArgs.get(HTTP_BASIC_AUTH_PASSWORD);\n    myHttpClient = createHttpClient(connTimeout, readTimeout);\n    if (httpBasicAuthUser != null && httpBasicAuthPassword != null) {\n      myHttpClient.getState().setCredentials(AuthScope.ANY,\n              new UsernamePasswordCredentials(httpBasicAuthUser, httpBasicAuthPassword));\n    }\n    if (pollInterval != null && pollInterval > 0) {\n      startExecutorService();\n    } else {\n      LOG.info(\" No value set for 'pollInterval'. Timer Task not started.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"6ee79b198d8f17b8e3feeef354b15aa77e51125c":["7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["6ee79b198d8f17b8e3feeef354b15aa77e51125c"],"7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"6ee79b198d8f17b8e3feeef354b15aa77e51125c":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9":["6ee79b198d8f17b8e3feeef354b15aa77e51125c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["7cd3e01c5aa98dea644d4a6ef36c777b80f9e0f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}