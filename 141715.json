{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#getTriggerState(String).mjava","commits":[{"id":"914270355efc1f9583010cb165bb031a1e698f84","date":1546908784,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#getTriggerState(String).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Helper method for getting a copy of the current (internal) trigger state of a scheduled trigger. \n   */\n  private Map<String, Object> getTriggerState(final String name) {\n    final Overseer overseer = cluster.getOpenOverseer();\n    final ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread) overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    final AutoScaling.Trigger t = scheduledTriggers.getTrigger(name);\n    assertNotNull(name + \" is not a currently scheduled trigger\", t);\n    assertTrue(name + \" is not a TriggerBase w/state: \" + t.getClass(),\n               t instanceof TriggerBase);\n    return ((TriggerBase)t).deepCopyState();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#getTriggerState(String).mjava","sourceNew":null,"sourceOld":"  /** \n   * Helper method for getting a copy of the current (internal) trigger state of a scheduled trigger. \n   */\n  private Map<String, Object> getTriggerState(final String name) {\n    final Overseer overseer = cluster.getOpenOverseer();\n    final ScheduledTriggers scheduledTriggers = ((OverseerTriggerThread) overseer.getTriggerThread().getThread()).getScheduledTriggers();\n    final AutoScaling.Trigger t = scheduledTriggers.getTrigger(name);\n    assertNotNull(name + \" is not a currently scheduled trigger\", t);\n    assertTrue(name + \" is not a TriggerBase w/state: \" + t.getClass(),\n               t instanceof TriggerBase);\n    return ((TriggerBase)t).deepCopyState();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"914270355efc1f9583010cb165bb031a1e698f84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["914270355efc1f9583010cb165bb031a1e698f84"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"914270355efc1f9583010cb165bb031a1e698f84":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["914270355efc1f9583010cb165bb031a1e698f84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}