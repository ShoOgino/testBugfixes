{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.PositionsTokenStream#incrementToken().mjava","commits":[{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.PositionsTokenStream#incrementToken().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase.PositionsTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (pos == 0) {\n        return false;\n      }\n      \n      clearAttributes();\n      term.append(DOC_POSITIONS_TERM);\n      payload.setPayload(new BytesRef(Integer.toString(pos)));\n      offset.setOffset(off, off);\n      --pos;\n      ++off;\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (pos == 0) {\n        return false;\n      }\n      \n      clearAttributes();\n      term.append(DOC_POSITIONS_TERM);\n      payload.setPayload(new BytesRef(Integer.toString(pos)));\n      offset.setOffset(off, off);\n      --pos;\n      ++off;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ff25cb7bb787cbe9d05740c89a527ddd2617c16","date":1462702859,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.PositionsTokenStream#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.PositionsTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (pos == 0) {\n        return false;\n      }\n      \n      clearAttributes();\n      term.append(\"#all#\");\n      payload.setPayload(new BytesRef(Integer.toString(pos)));\n      offset.setOffset(off, off);\n      --pos;\n      ++off;\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (pos == 0) {\n        return false;\n      }\n      \n      clearAttributes();\n      term.append(DOC_POSITIONS_TERM);\n      payload.setPayload(new BytesRef(Integer.toString(pos)));\n      offset.setOffset(off, off);\n      --pos;\n      ++off;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.PositionsTokenStream#incrementToken().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase.PositionsTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (pos == 0) {\n        return false;\n      }\n      \n      clearAttributes();\n      term.append(\"#all#\");\n      payload.setPayload(new BytesRef(Integer.toString(pos)));\n      offset.setOffset(off, off);\n      --pos;\n      ++off;\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (pos == 0) {\n        return false;\n      }\n      \n      clearAttributes();\n      term.append(DOC_POSITIONS_TERM);\n      payload.setPayload(new BytesRef(Integer.toString(pos)));\n      offset.setOffset(off, off);\n      --pos;\n      ++off;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.PositionsTokenStream#incrementToken().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase.PositionsTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (pos == 0) {\n        return false;\n      }\n      \n      clearAttributes();\n      term.append(\"#all#\");\n      payload.setPayload(new BytesRef(Integer.toString(pos)));\n      offset.setOffset(off, off);\n      --pos;\n      ++off;\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (pos == 0) {\n        return false;\n      }\n      \n      clearAttributes();\n      term.append(DOC_POSITIONS_TERM);\n      payload.setPayload(new BytesRef(Integer.toString(pos)));\n      offset.setOffset(off, off);\n      --pos;\n      ++off;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.PositionsTokenStream#incrementToken().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase.PositionsTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (pos == 0) {\n        return false;\n      }\n      \n      clearAttributes();\n      term.append(\"#all#\");\n      payload.setPayload(new BytesRef(Integer.toString(pos)));\n      offset.setOffset(off, off);\n      --pos;\n      ++off;\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (pos == 0) {\n        return false;\n      }\n      \n      clearAttributes();\n      term.append(DOC_POSITIONS_TERM);\n      payload.setPayload(new BytesRef(Integer.toString(pos)));\n      offset.setOffset(off, off);\n      --pos;\n      ++off;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.PositionsTokenStream#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (pos == 0) {\n        return false;\n      }\n      \n      clearAttributes();\n      term.append(\"#all#\");\n      payload.setPayload(new BytesRef(Integer.toString(pos)));\n      offset.setOffset(off, off);\n      --pos;\n      ++off;\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e065cebbdee472a02bde38052717a8cd7ee8ab3b","date":1479244971,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.PositionsTokenStream#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.PositionsTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (pos == 0) {\n        return false;\n      }\n\n      clearAttributes();\n      term.append(\"#all#\");\n      payload.setPayload(new BytesRef(Integer.toString(pos)));\n      offset.setOffset(off, off);\n      --pos;\n      ++off;\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (pos == 0) {\n        return false;\n      }\n      \n      clearAttributes();\n      term.append(\"#all#\");\n      payload.setPayload(new BytesRef(Integer.toString(pos)));\n      offset.setOffset(off, off);\n      --pos;\n      ++off;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.PositionsTokenStream#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.PositionsTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (pos == 0) {\n        return false;\n      }\n\n      clearAttributes();\n      term.append(\"#all#\");\n      payload.setPayload(new BytesRef(Integer.toString(pos)));\n      offset.setOffset(off, off);\n      --pos;\n      ++off;\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (pos == 0) {\n        return false;\n      }\n      \n      clearAttributes();\n      term.append(\"#all#\");\n      payload.setPayload(new BytesRef(Integer.toString(pos)));\n      offset.setOffset(off, off);\n      --pos;\n      ++off;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"4ff25cb7bb787cbe9d05740c89a527ddd2617c16":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ff25cb7bb787cbe9d05740c89a527ddd2617c16"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["4ff25cb7bb787cbe9d05740c89a527ddd2617c16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4ff25cb7bb787cbe9d05740c89a527ddd2617c16":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["e065cebbdee472a02bde38052717a8cd7ee8ab3b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}