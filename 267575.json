{"path":"lucene/facet/src/java/org/apache/lucene/facet/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","sourceNew":"  private final FacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      dv.lookupOrd(ordAndValue.ord, scratch);\n      String[] parts = FacetsConfig.stringToPath(scratch.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new FacetResult(dimCount, labelValues, childCount);\n  }\n\n","sourceOld":"  private final SimpleFacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      dv.lookupOrd(ordAndValue.ord, scratch);\n      String[] parts = FacetsConfig.stringToPath(scratch.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(dimCount, labelValues, childCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56d44586f4c409c6c6c5942b9f0227df806b7300","date":1386027853,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","sourceNew":"  private final FacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      dv.lookupOrd(ordAndValue.ord, scratch);\n      String[] parts = FacetsConfig.stringToPath(scratch.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new FacetResult(dim, new String[0], dimCount, labelValues, childCount);\n  }\n\n","sourceOld":"  private final FacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      dv.lookupOrd(ordAndValue.ord, scratch);\n      String[] parts = FacetsConfig.stringToPath(scratch.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new FacetResult(dimCount, labelValues, childCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sortedset/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","sourceNew":"  private final FacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      dv.lookupOrd(ordAndValue.ord, scratch);\n      String[] parts = FacetsConfig.stringToPath(scratch.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new FacetResult(dim, new String[0], dimCount, labelValues, childCount);\n  }\n\n","sourceOld":"  private final FacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      dv.lookupOrd(ordAndValue.ord, scratch);\n      String[] parts = FacetsConfig.stringToPath(scratch.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new FacetResult(dim, new String[0], dimCount, labelValues, childCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["21d36d0db865f7b84026b447bec653469a6e66df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["56d44586f4c409c6c6c5942b9f0227df806b7300"],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["4edc984f0f4ac77c37e48ace2932f780f888453c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":["56d44586f4c409c6c6c5942b9f0227df806b7300"],"4edc984f0f4ac77c37e48ace2932f780f888453c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4edc984f0f4ac77c37e48ace2932f780f888453c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}