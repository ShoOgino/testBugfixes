{"path":"solr/solrj/src/test/org/apache/solr/common/util/Utf8CharSequenceTest#testUnMarshal().mjava","commits":[{"id":"b7b5b9bd55a953275a0efc3c5272ed76129541fb","date":1546921668,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/Utf8CharSequenceTest#testUnMarshal().mjava","pathOld":"/dev/null","sourceNew":"  public void testUnMarshal() throws IOException {\n    NamedList nl = new NamedList();\n    String str = \" The value!\";\n    for (int i = 0; i < 5; i++) {\n      StringBuffer sb = new StringBuffer();\n      sb.append(i);\n      for (int j = 0; j < i; j++) {\n        sb.append(str);\n      }\n      nl.add(\"key\" + i, sb.toString());\n    }\n    StringBuffer sb = new StringBuffer();\n    for (; ; ) {\n      sb.append(str);\n      if (sb.length() > 1024 * 4) break;\n    }\n    nl.add(\"key_long\", sb.toString());\n    nl.add(\"key5\", \"5\" + str);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(nl, baos);\n    byte[] bytes = baos.toByteArray();\n\n    NamedList nl1 = (NamedList) new JavaBinCodec()\n        .setReadStringAsCharSeq(true)\n        .unmarshal(new FastInputStream(null, bytes, 0, bytes.length));\n    byte[] buf = ((ByteArrayUtf8CharSequence) nl1.getVal(0)).getBuf();\n    ByteArrayUtf8CharSequence valLong = (ByteArrayUtf8CharSequence) nl1.get(\"key_long\");\n    assertFalse(valLong.getBuf() == buf);\n\n    for (int i = 1; i < 6; i++) {\n      ByteArrayUtf8CharSequence val = (ByteArrayUtf8CharSequence) nl1.get(\"key\" + i);\n      assertEquals(buf, val.getBuf());\n      String s = val.toString();\n      assertTrue(s.startsWith(\"\" + i));\n      assertTrue(s, s.endsWith(str));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"220577719e3753e52195ed66dc9af6c4e65e2873","date":1550042623,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/Utf8CharSequenceTest#testUnMarshal().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/Utf8CharSequenceTest#testUnMarshal().mjava","sourceNew":"  public void testUnMarshal() throws IOException {\n    NamedList nl = new NamedList();\n    String str = \" The value!\";\n    for (int i = 0; i < 5; i++) {\n      StringBuffer sb = new StringBuffer();\n      sb.append(i);\n      for (int j = 0; j < i; j++) {\n        sb.append(str);\n      }\n      nl.add(\"key\" + i, sb.toString());\n    }\n    StringBuffer sb = new StringBuffer();\n    for (; ; ) {\n      sb.append(str);\n      if (sb.length() > 1024 * 4) break;\n    }\n    nl.add(\"key_long\", sb.toString());\n    nl.add(\"key5\", \"5\" + str);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(nl, baos);\n    byte[] bytes = baos.toByteArray();\n\n    NamedList nl1 = (NamedList) new JavaBinCodec()\n        .setReadStringAsCharSeq(true)\n        .unmarshal(new ByteArrayInputStream( bytes, 0, bytes.length));\n    byte[] buf = ((ByteArrayUtf8CharSequence) nl1.getVal(0)).getBuf();\n    ByteArrayUtf8CharSequence valLong = (ByteArrayUtf8CharSequence) nl1.get(\"key_long\");\n    assertFalse(valLong.getBuf() == buf);\n\n    for (int i = 1; i < 6; i++) {\n      ByteArrayUtf8CharSequence val = (ByteArrayUtf8CharSequence) nl1.get(\"key\" + i);\n      assertEquals(buf, val.getBuf());\n      String s = val.toString();\n      assertTrue(s.startsWith(\"\" + i));\n      assertTrue(s, s.endsWith(str));\n    }\n\n  }\n\n","sourceOld":"  public void testUnMarshal() throws IOException {\n    NamedList nl = new NamedList();\n    String str = \" The value!\";\n    for (int i = 0; i < 5; i++) {\n      StringBuffer sb = new StringBuffer();\n      sb.append(i);\n      for (int j = 0; j < i; j++) {\n        sb.append(str);\n      }\n      nl.add(\"key\" + i, sb.toString());\n    }\n    StringBuffer sb = new StringBuffer();\n    for (; ; ) {\n      sb.append(str);\n      if (sb.length() > 1024 * 4) break;\n    }\n    nl.add(\"key_long\", sb.toString());\n    nl.add(\"key5\", \"5\" + str);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(nl, baos);\n    byte[] bytes = baos.toByteArray();\n\n    NamedList nl1 = (NamedList) new JavaBinCodec()\n        .setReadStringAsCharSeq(true)\n        .unmarshal(new FastInputStream(null, bytes, 0, bytes.length));\n    byte[] buf = ((ByteArrayUtf8CharSequence) nl1.getVal(0)).getBuf();\n    ByteArrayUtf8CharSequence valLong = (ByteArrayUtf8CharSequence) nl1.get(\"key_long\");\n    assertFalse(valLong.getBuf() == buf);\n\n    for (int i = 1; i < 6; i++) {\n      ByteArrayUtf8CharSequence val = (ByteArrayUtf8CharSequence) nl1.get(\"key\" + i);\n      assertEquals(buf, val.getBuf());\n      String s = val.toString();\n      assertTrue(s.startsWith(\"\" + i));\n      assertTrue(s, s.endsWith(str));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c5cdabe00d4d433e6a831e18f68201284973eef","date":1578510992,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/Utf8CharSequenceTest#testUnMarshal().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/Utf8CharSequenceTest#testUnMarshal().mjava","sourceNew":"  public void testUnMarshal() throws IOException {\n    NamedList nl = new NamedList();\n    String str = \" The value!\";\n    for (int i = 0; i < 5; i++) {\n      StringBuffer sb = new StringBuffer();\n      sb.append(i);\n      for (int j = 0; j < i; j++) {\n        sb.append(str);\n      }\n      nl.add(\"key\" + i, sb.toString());\n    }\n    StringBuffer sb = new StringBuffer();\n    for (; ; ) {\n      sb.append(str);\n      if (sb.length() > 1024 * 4) break;\n    }\n    nl.add(\"key_long\", sb.toString());\n    nl.add(\"key5\", \"5\" + str);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(nl, baos);\n    }\n    byte[] bytes = baos.toByteArray();\n\n    NamedList nl1;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      nl1 = (NamedList) jbc\n          .setReadStringAsCharSeq(true)\n          .unmarshal(new ByteArrayInputStream(bytes, 0, bytes.length));\n    }\n    byte[] buf = ((ByteArrayUtf8CharSequence) nl1.getVal(0)).getBuf();\n    ByteArrayUtf8CharSequence valLong = (ByteArrayUtf8CharSequence) nl1.get(\"key_long\");\n    assertFalse(valLong.getBuf() == buf);\n\n\n    for (int i = 1; i < 6; i++) {\n      ByteArrayUtf8CharSequence val = (ByteArrayUtf8CharSequence) nl1.get(\"key\" + i);\n      assertEquals(buf, val.getBuf());\n      String s = val.toString();\n      assertTrue(s.startsWith(\"\" + i));\n      assertTrue(s, s.endsWith(str));\n    }\n\n  }\n\n","sourceOld":"  public void testUnMarshal() throws IOException {\n    NamedList nl = new NamedList();\n    String str = \" The value!\";\n    for (int i = 0; i < 5; i++) {\n      StringBuffer sb = new StringBuffer();\n      sb.append(i);\n      for (int j = 0; j < i; j++) {\n        sb.append(str);\n      }\n      nl.add(\"key\" + i, sb.toString());\n    }\n    StringBuffer sb = new StringBuffer();\n    for (; ; ) {\n      sb.append(str);\n      if (sb.length() > 1024 * 4) break;\n    }\n    nl.add(\"key_long\", sb.toString());\n    nl.add(\"key5\", \"5\" + str);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(nl, baos);\n    byte[] bytes = baos.toByteArray();\n\n    NamedList nl1 = (NamedList) new JavaBinCodec()\n        .setReadStringAsCharSeq(true)\n        .unmarshal(new ByteArrayInputStream( bytes, 0, bytes.length));\n    byte[] buf = ((ByteArrayUtf8CharSequence) nl1.getVal(0)).getBuf();\n    ByteArrayUtf8CharSequence valLong = (ByteArrayUtf8CharSequence) nl1.get(\"key_long\");\n    assertFalse(valLong.getBuf() == buf);\n\n    for (int i = 1; i < 6; i++) {\n      ByteArrayUtf8CharSequence val = (ByteArrayUtf8CharSequence) nl1.get(\"key\" + i);\n      assertEquals(buf, val.getBuf());\n      String s = val.toString();\n      assertTrue(s.startsWith(\"\" + i));\n      assertTrue(s, s.endsWith(str));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/Utf8CharSequenceTest#testUnMarshal().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/Utf8CharSequenceTest#testUnMarshal().mjava","sourceNew":"  public void testUnMarshal() throws IOException {\n    NamedList nl = new NamedList();\n    String str = \" The value!\";\n    for (int i = 0; i < 5; i++) {\n      StringBuffer sb = new StringBuffer();\n      sb.append(i);\n      for (int j = 0; j < i; j++) {\n        sb.append(str);\n      }\n      nl.add(\"key\" + i, sb.toString());\n    }\n    StringBuffer sb = new StringBuffer();\n    for (; ; ) {\n      sb.append(str);\n      if (sb.length() > 1024 * 4) break;\n    }\n    nl.add(\"key_long\", sb.toString());\n    nl.add(\"key5\", \"5\" + str);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(nl, baos);\n    }\n    byte[] bytes = baos.toByteArray();\n\n    NamedList nl1;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      nl1 = (NamedList) jbc\n          .setReadStringAsCharSeq(true)\n          .unmarshal(new ByteArrayInputStream(bytes, 0, bytes.length));\n    }\n    byte[] buf = ((ByteArrayUtf8CharSequence) nl1.getVal(0)).getBuf();\n    ByteArrayUtf8CharSequence valLong = (ByteArrayUtf8CharSequence) nl1.get(\"key_long\");\n    assertFalse(valLong.getBuf() == buf);\n\n\n    for (int i = 1; i < 6; i++) {\n      ByteArrayUtf8CharSequence val = (ByteArrayUtf8CharSequence) nl1.get(\"key\" + i);\n      assertEquals(buf, val.getBuf());\n      String s = val.toString();\n      assertTrue(s.startsWith(\"\" + i));\n      assertTrue(s, s.endsWith(str));\n    }\n\n  }\n\n","sourceOld":"  public void testUnMarshal() throws IOException {\n    NamedList nl = new NamedList();\n    String str = \" The value!\";\n    for (int i = 0; i < 5; i++) {\n      StringBuffer sb = new StringBuffer();\n      sb.append(i);\n      for (int j = 0; j < i; j++) {\n        sb.append(str);\n      }\n      nl.add(\"key\" + i, sb.toString());\n    }\n    StringBuffer sb = new StringBuffer();\n    for (; ; ) {\n      sb.append(str);\n      if (sb.length() > 1024 * 4) break;\n    }\n    nl.add(\"key_long\", sb.toString());\n    nl.add(\"key5\", \"5\" + str);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    new JavaBinCodec().marshal(nl, baos);\n    byte[] bytes = baos.toByteArray();\n\n    NamedList nl1 = (NamedList) new JavaBinCodec()\n        .setReadStringAsCharSeq(true)\n        .unmarshal(new ByteArrayInputStream( bytes, 0, bytes.length));\n    byte[] buf = ((ByteArrayUtf8CharSequence) nl1.getVal(0)).getBuf();\n    ByteArrayUtf8CharSequence valLong = (ByteArrayUtf8CharSequence) nl1.get(\"key_long\");\n    assertFalse(valLong.getBuf() == buf);\n\n    for (int i = 1; i < 6; i++) {\n      ByteArrayUtf8CharSequence val = (ByteArrayUtf8CharSequence) nl1.get(\"key\" + i);\n      assertEquals(buf, val.getBuf());\n      String s = val.toString();\n      assertTrue(s.startsWith(\"\" + i));\n      assertTrue(s, s.endsWith(str));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/Utf8CharSequenceTest#testUnMarshal().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/Utf8CharSequenceTest#testUnMarshal().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testUnMarshal() throws IOException {\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList nl = new NamedList();\n    String str = \" The value!\";\n    for (int i = 0; i < 5; i++) {\n      StringBuffer sb = new StringBuffer();\n      sb.append(i);\n      for (int j = 0; j < i; j++) {\n        sb.append(str);\n      }\n      nl.add(\"key\" + i, sb.toString());\n    }\n    StringBuffer sb = new StringBuffer();\n    for (; ; ) {\n      sb.append(str);\n      if (sb.length() > 1024 * 4) break;\n    }\n    nl.add(\"key_long\", sb.toString());\n    nl.add(\"key5\", \"5\" + str);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(nl, baos);\n    }\n    byte[] bytes = baos.toByteArray();\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList nl1;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      nl1 = (NamedList) jbc\n          .setReadStringAsCharSeq(true)\n          .unmarshal(new ByteArrayInputStream(bytes, 0, bytes.length));\n    }\n    byte[] buf = ((ByteArrayUtf8CharSequence) nl1.getVal(0)).getBuf();\n    ByteArrayUtf8CharSequence valLong = (ByteArrayUtf8CharSequence) nl1.get(\"key_long\");\n    assertFalse(valLong.getBuf() == buf);\n\n\n    for (int i = 1; i < 6; i++) {\n      ByteArrayUtf8CharSequence val = (ByteArrayUtf8CharSequence) nl1.get(\"key\" + i);\n      assertEquals(buf, val.getBuf());\n      String s = val.toString();\n      assertTrue(s.startsWith(\"\" + i));\n      assertTrue(s, s.endsWith(str));\n    }\n\n  }\n\n","sourceOld":"  public void testUnMarshal() throws IOException {\n    NamedList nl = new NamedList();\n    String str = \" The value!\";\n    for (int i = 0; i < 5; i++) {\n      StringBuffer sb = new StringBuffer();\n      sb.append(i);\n      for (int j = 0; j < i; j++) {\n        sb.append(str);\n      }\n      nl.add(\"key\" + i, sb.toString());\n    }\n    StringBuffer sb = new StringBuffer();\n    for (; ; ) {\n      sb.append(str);\n      if (sb.length() > 1024 * 4) break;\n    }\n    nl.add(\"key_long\", sb.toString());\n    nl.add(\"key5\", \"5\" + str);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(nl, baos);\n    }\n    byte[] bytes = baos.toByteArray();\n\n    NamedList nl1;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      nl1 = (NamedList) jbc\n          .setReadStringAsCharSeq(true)\n          .unmarshal(new ByteArrayInputStream(bytes, 0, bytes.length));\n    }\n    byte[] buf = ((ByteArrayUtf8CharSequence) nl1.getVal(0)).getBuf();\n    ByteArrayUtf8CharSequence valLong = (ByteArrayUtf8CharSequence) nl1.get(\"key_long\");\n    assertFalse(valLong.getBuf() == buf);\n\n\n    for (int i = 1; i < 6; i++) {\n      ByteArrayUtf8CharSequence val = (ByteArrayUtf8CharSequence) nl1.get(\"key\" + i);\n      assertEquals(buf, val.getBuf());\n      String s = val.toString();\n      assertTrue(s.startsWith(\"\" + i));\n      assertTrue(s, s.endsWith(str));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8c5cdabe00d4d433e6a831e18f68201284973eef"],"b7b5b9bd55a953275a0efc3c5272ed76129541fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"220577719e3753e52195ed66dc9af6c4e65e2873":["b7b5b9bd55a953275a0efc3c5272ed76129541fb"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["220577719e3753e52195ed66dc9af6c4e65e2873"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1da93834e39ce341a13e42b611d0a83bd3114bba":["220577719e3753e52195ed66dc9af6c4e65e2873","8c5cdabe00d4d433e6a831e18f68201284973eef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7b5b9bd55a953275a0efc3c5272ed76129541fb":["220577719e3753e52195ed66dc9af6c4e65e2873"],"220577719e3753e52195ed66dc9af6c4e65e2873":["8c5cdabe00d4d433e6a831e18f68201284973eef","1da93834e39ce341a13e42b611d0a83bd3114bba"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["9ba1b632c041956c93c41aa1143d16a567014891","1da93834e39ce341a13e42b611d0a83bd3114bba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7b5b9bd55a953275a0efc3c5272ed76129541fb"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}