{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.Builder#build().mjava","commits":[{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.Builder#build().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Create a {@link HttpSolrClient} based on provided configuration.\n     */\n    public HttpSolrClient build() {\n      if (baseSolrUrl == null) {\n        throw new IllegalArgumentException(\"Cannot create HttpSolrClient without a valid baseSolrUrl!\");\n      }\n      return new HttpSolrClient(baseSolrUrl, httpClient, responseParser, compression);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.Builder#build().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Create a {@link HttpSolrClient} based on provided configuration.\n     */\n    public HttpSolrClient build() {\n      if (baseSolrUrl == null) {\n        throw new IllegalArgumentException(\"Cannot create HttpSolrClient without a valid baseSolrUrl!\");\n      }\n      return new HttpSolrClient(baseSolrUrl, httpClient, responseParser, compression);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20be168d828ac40d262f85364d02f15b491dd88b","date":1469725145,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.Builder#build().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.Builder#build().mjava","sourceNew":"    /**\n     * Create a {@link HttpSolrClient} based on provided configuration.\n     */\n    public HttpSolrClient build() {\n      if (baseSolrUrl == null) {\n        throw new IllegalArgumentException(\"Cannot create HttpSolrClient without a valid baseSolrUrl!\");\n      }\n      if (delegationToken == null) {\n        return new HttpSolrClient(baseSolrUrl, httpClient, responseParser, compression);\n      } else {\n        return new DelegationTokenHttpSolrClient(baseSolrUrl, httpClient, responseParser, compression, delegationToken);\n      }\n    }\n\n","sourceOld":"    /**\n     * Create a {@link HttpSolrClient} based on provided configuration.\n     */\n    public HttpSolrClient build() {\n      if (baseSolrUrl == null) {\n        throw new IllegalArgumentException(\"Cannot create HttpSolrClient without a valid baseSolrUrl!\");\n      }\n      return new HttpSolrClient(baseSolrUrl, httpClient, responseParser, compression);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.Builder#build().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.Builder#build().mjava","sourceNew":"    /**\n     * Create a {@link HttpSolrClient} based on provided configuration.\n     */\n    public HttpSolrClient build() {\n      if (baseSolrUrl == null) {\n        throw new IllegalArgumentException(\"Cannot create HttpSolrClient without a valid baseSolrUrl!\");\n      }\n      if (delegationToken == null) {\n        return new HttpSolrClient(baseSolrUrl, httpClient, responseParser, compression);\n      } else {\n        return new DelegationTokenHttpSolrClient(baseSolrUrl, httpClient, responseParser, compression, delegationToken);\n      }\n    }\n\n","sourceOld":"    /**\n     * Create a {@link HttpSolrClient} based on provided configuration.\n     */\n    public HttpSolrClient build() {\n      if (baseSolrUrl == null) {\n        throw new IllegalArgumentException(\"Cannot create HttpSolrClient without a valid baseSolrUrl!\");\n      }\n      return new HttpSolrClient(baseSolrUrl, httpClient, responseParser, compression);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.Builder#build().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.Builder#build().mjava","sourceNew":"    /**\n     * Create a {@link HttpSolrClient} based on provided configuration.\n     */\n    public HttpSolrClient build() {\n      if (baseSolrUrl == null) {\n        throw new IllegalArgumentException(\"Cannot create HttpSolrClient without a valid baseSolrUrl!\");\n      }\n      if (delegationToken == null) {\n        return new HttpSolrClient(baseSolrUrl, httpClient, responseParser, compression);\n      } else {\n        return new DelegationTokenHttpSolrClient(baseSolrUrl, httpClient, responseParser, compression, delegationToken);\n      }\n    }\n\n","sourceOld":"    /**\n     * Create a {@link HttpSolrClient} based on provided configuration.\n     */\n    public HttpSolrClient build() {\n      if (baseSolrUrl == null) {\n        throw new IllegalArgumentException(\"Cannot create HttpSolrClient without a valid baseSolrUrl!\");\n      }\n      return new HttpSolrClient(baseSolrUrl, httpClient, responseParser, compression);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8cfe32f552b7e4776be5098105cbd3e11e93792","date":1482161480,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.Builder#build().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.Builder#build().mjava","sourceNew":"    /**\n     * Create a {@link HttpSolrClient} based on provided configuration.\n     */\n    public HttpSolrClient build() {\n      if (baseSolrUrl == null) {\n        throw new IllegalArgumentException(\"Cannot create HttpSolrClient without a valid baseSolrUrl!\");\n      }\n\n      if (this.invariantParams.get(DelegationTokenHttpSolrClient.DELEGATION_TOKEN_PARAM) == null) {\n        return new HttpSolrClient(baseSolrUrl, httpClient, responseParser, compression, invariantParams);\n      } else {\n        return new DelegationTokenHttpSolrClient(baseSolrUrl, httpClient, responseParser, compression, invariantParams);\n      }\n    }\n\n","sourceOld":"    /**\n     * Create a {@link HttpSolrClient} based on provided configuration.\n     */\n    public HttpSolrClient build() {\n      if (baseSolrUrl == null) {\n        throw new IllegalArgumentException(\"Cannot create HttpSolrClient without a valid baseSolrUrl!\");\n      }\n      if (delegationToken == null) {\n        return new HttpSolrClient(baseSolrUrl, httpClient, responseParser, compression);\n      } else {\n        return new DelegationTokenHttpSolrClient(baseSolrUrl, httpClient, responseParser, compression, delegationToken);\n      }\n    }\n\n","bugFix":null,"bugIntro":["c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.Builder#build().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.Builder#build().mjava","sourceNew":"    /**\n     * Create a {@link HttpSolrClient} based on provided configuration.\n     */\n    public HttpSolrClient build() {\n      if (baseSolrUrl == null) {\n        throw new IllegalArgumentException(\"Cannot create HttpSolrClient without a valid baseSolrUrl!\");\n      }\n\n      if (this.invariantParams.get(DelegationTokenHttpSolrClient.DELEGATION_TOKEN_PARAM) == null) {\n        return new HttpSolrClient(baseSolrUrl, httpClient, responseParser, compression, invariantParams);\n      } else {\n        return new DelegationTokenHttpSolrClient(baseSolrUrl, httpClient, responseParser, compression, invariantParams);\n      }\n    }\n\n","sourceOld":"    /**\n     * Create a {@link HttpSolrClient} based on provided configuration.\n     */\n    public HttpSolrClient build() {\n      if (baseSolrUrl == null) {\n        throw new IllegalArgumentException(\"Cannot create HttpSolrClient without a valid baseSolrUrl!\");\n      }\n      if (delegationToken == null) {\n        return new HttpSolrClient(baseSolrUrl, httpClient, responseParser, compression);\n      } else {\n        return new DelegationTokenHttpSolrClient(baseSolrUrl, httpClient, responseParser, compression, delegationToken);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c07dc645ff236a7d51da2a5ef49a948dfbf8610c","date":1498242650,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.Builder#build().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.Builder#build().mjava","sourceNew":"    /**\n     * Create a {@link HttpSolrClient} based on provided configuration.\n     */\n    public HttpSolrClient build() {\n      if (baseSolrUrl == null) {\n        throw new IllegalArgumentException(\"Cannot create HttpSolrClient without a valid baseSolrUrl!\");\n      }\n\n      if (this.invariantParams.get(DelegationTokenHttpSolrClient.DELEGATION_TOKEN_PARAM) == null) {\n        return new HttpSolrClient(this);\n      } else {\n        return new DelegationTokenHttpSolrClient(this);\n      }\n    }\n\n","sourceOld":"    /**\n     * Create a {@link HttpSolrClient} based on provided configuration.\n     */\n    public HttpSolrClient build() {\n      if (baseSolrUrl == null) {\n        throw new IllegalArgumentException(\"Cannot create HttpSolrClient without a valid baseSolrUrl!\");\n      }\n\n      if (this.invariantParams.get(DelegationTokenHttpSolrClient.DELEGATION_TOKEN_PARAM) == null) {\n        return new HttpSolrClient(baseSolrUrl, httpClient, responseParser, compression, invariantParams);\n      } else {\n        return new DelegationTokenHttpSolrClient(baseSolrUrl, httpClient, responseParser, compression, invariantParams);\n      }\n    }\n\n","bugFix":["a8cfe32f552b7e4776be5098105cbd3e11e93792"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.Builder#build().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.Builder#build().mjava","sourceNew":"    /**\n     * Create a {@link HttpSolrClient} based on provided configuration.\n     */\n    public HttpSolrClient build() {\n      if (baseSolrUrl == null) {\n        throw new IllegalArgumentException(\"Cannot create HttpSolrClient without a valid baseSolrUrl!\");\n      }\n\n      if (this.invariantParams.get(DelegationTokenHttpSolrClient.DELEGATION_TOKEN_PARAM) == null) {\n        return new HttpSolrClient(this);\n      } else {\n        return new DelegationTokenHttpSolrClient(this);\n      }\n    }\n\n","sourceOld":"    /**\n     * Create a {@link HttpSolrClient} based on provided configuration.\n     */\n    public HttpSolrClient build() {\n      if (baseSolrUrl == null) {\n        throw new IllegalArgumentException(\"Cannot create HttpSolrClient without a valid baseSolrUrl!\");\n      }\n\n      if (this.invariantParams.get(DelegationTokenHttpSolrClient.DELEGATION_TOKEN_PARAM) == null) {\n        return new HttpSolrClient(baseSolrUrl, httpClient, responseParser, compression, invariantParams);\n      } else {\n        return new DelegationTokenHttpSolrClient(baseSolrUrl, httpClient, responseParser, compression, invariantParams);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.Builder#build().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient.Builder#build().mjava","sourceNew":"    /**\n     * Create a {@link HttpSolrClient} based on provided configuration.\n     */\n    public HttpSolrClient build() {\n      if (baseSolrUrl == null) {\n        throw new IllegalArgumentException(\"Cannot create HttpSolrClient without a valid baseSolrUrl!\");\n      }\n\n      if (this.invariantParams.get(DelegationTokenHttpSolrClient.DELEGATION_TOKEN_PARAM) == null) {\n        return new HttpSolrClient(this);\n      } else {\n        return new DelegationTokenHttpSolrClient(this);\n      }\n    }\n\n","sourceOld":"    /**\n     * Create a {@link HttpSolrClient} based on provided configuration.\n     */\n    public HttpSolrClient build() {\n      if (baseSolrUrl == null) {\n        throw new IllegalArgumentException(\"Cannot create HttpSolrClient without a valid baseSolrUrl!\");\n      }\n\n      if (this.invariantParams.get(DelegationTokenHttpSolrClient.DELEGATION_TOKEN_PARAM) == null) {\n        return new HttpSolrClient(baseSolrUrl, httpClient, responseParser, compression, invariantParams);\n      } else {\n        return new DelegationTokenHttpSolrClient(baseSolrUrl, httpClient, responseParser, compression, invariantParams);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a8cfe32f552b7e4776be5098105cbd3e11e93792":["20be168d828ac40d262f85364d02f15b491dd88b"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a8cfe32f552b7e4776be5098105cbd3e11e93792"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"20be168d828ac40d262f85364d02f15b491dd88b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a8cfe32f552b7e4776be5098105cbd3e11e93792","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"28288370235ed02234a64753cdbf0c6ec096304a":["a8cfe32f552b7e4776be5098105cbd3e11e93792","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","20be168d828ac40d262f85364d02f15b491dd88b"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","20be168d828ac40d262f85364d02f15b491dd88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["a8cfe32f552b7e4776be5098105cbd3e11e93792"]},"commit2Childs":{"a8cfe32f552b7e4776be5098105cbd3e11e93792":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["20be168d828ac40d262f85364d02f15b491dd88b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"20be168d828ac40d262f85364d02f15b491dd88b":["a8cfe32f552b7e4776be5098105cbd3e11e93792","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}