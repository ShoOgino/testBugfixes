{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testCellTraverse().mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testCellTraverse().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testCellTraverse().mjava","sourceNew":"  @Test\n  public void testCellTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Cell prevC = null;\n    Cell c = trie.getWorldCell();\n    assertEquals(0, c.getLevel());\n    assertEquals(ctx.getWorldBounds(), c.getShape());\n    while (c.getLevel() < trie.getMaxLevels()) {\n      prevC = c;\n      List<Cell> subCells = new ArrayList<>();\n      CellIterator subCellsIter = c.getNextLevelCells(null);\n      while (subCellsIter.hasNext()) {\n        subCells.add(subCellsIter.next());\n      }\n      c = subCells.get(random().nextInt(subCells.size()-1));\n\n      assertEquals(prevC.getLevel()+1,c.getLevel());\n      Rectangle prevNShape = (Rectangle) prevC.getShape();\n      Shape s = c.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCellTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Cell prevC = null;\n    Cell c = trie.getWorldCell();\n    assertEquals(0, c.getLevel());\n    assertEquals(ctx.getWorldBounds(), c.getShape());\n    while (c.getLevel() < trie.getMaxLevels()) {\n      prevC = c;\n      List<Cell> subCells = new ArrayList<>();\n      CellIterator subCellsIter = c.getNextLevelCells(null);\n      while (subCellsIter.hasNext()) {\n        subCells.add(subCellsIter.next());\n      }\n      c = subCells.get(random().nextInt(subCells.size()-1));\n      \n      assertEquals(prevC.getLevel()+1,c.getLevel());\n      Rectangle prevNShape = (Rectangle) prevC.getShape();\n      Shape s = c.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testCellTraverse().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTreeTest#testCellTraverse().mjava","sourceNew":"  @Test\n  public void testCellTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Cell prevC = null;\n    Cell c = trie.getWorldCell();\n    assertEquals(0, c.getLevel());\n    assertEquals(ctx.getWorldBounds(), c.getShape());\n    while (c.getLevel() < trie.getMaxLevels()) {\n      prevC = c;\n      List<Cell> subCells = new ArrayList<>();\n      CellIterator subCellsIter = c.getNextLevelCells(null);\n      while (subCellsIter.hasNext()) {\n        subCells.add(subCellsIter.next());\n      }\n      c = subCells.get(random().nextInt(subCells.size()-1));\n\n      assertEquals(prevC.getLevel()+1,c.getLevel());\n      Rectangle prevNShape = (Rectangle) prevC.getShape();\n      Shape s = c.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCellTraverse() {\n    trie = new GeohashPrefixTree(ctx,4);\n\n    Cell prevC = null;\n    Cell c = trie.getWorldCell();\n    assertEquals(0, c.getLevel());\n    assertEquals(ctx.getWorldBounds(), c.getShape());\n    while (c.getLevel() < trie.getMaxLevels()) {\n      prevC = c;\n      List<Cell> subCells = new ArrayList<>();\n      CellIterator subCellsIter = c.getNextLevelCells(null);\n      while (subCellsIter.hasNext()) {\n        subCells.add(subCellsIter.next());\n      }\n      c = subCells.get(random().nextInt(subCells.size()-1));\n      \n      assertEquals(prevC.getLevel()+1,c.getLevel());\n      Rectangle prevNShape = (Rectangle) prevC.getShape();\n      Shape s = c.getShape();\n      Rectangle sbox = s.getBoundingBox();\n      assertTrue(prevNShape.getWidth() > sbox.getWidth());\n      assertTrue(prevNShape.getHeight() > sbox.getHeight());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}