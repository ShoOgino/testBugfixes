{"path":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","commits":[{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["23550189554f52bad1625fceab84a71d20a4df3f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58db9ee7d88a7b7c23d77436675c11bcb755c8f9","date":1249451023,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","sourceOld":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","sourceOld":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","sourceOld":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","sourceOld":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","sourceOld":"  /**\n   * initializes searcher with a document set\n   */\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a5f8d969ec7ec6d93b9e941a2e2cc9f1e7b337","date":1257763246,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    // start from 1, so that the 0th doc never matches\n    for (int i = 1; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","sourceOld":"  /**\n   * initializes searcher with a document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    for (int i = 0; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    // start from 1, so that the 0th doc never matches\n    for (int i = 1; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new WhitespaceAnalyzer(Version.LUCENE_CURRENT));\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","sourceOld":"  /**\n   * initializes searcher with a document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    // start from 1, so that the 0th doc never matches\n    for (int i = 1; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new WhitespaceAnalyzer());\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    // start from 1, so that the 0th doc never matches\n    for (int i = 1; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","sourceOld":"  /**\n   * initializes searcher with a document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    // start from 1, so that the 0th doc never matches\n    for (int i = 1; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new WhitespaceAnalyzer(Version.LUCENE_CURRENT));\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    // start from 1, so that the 0th doc never matches\n    for (int i = 1; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","sourceOld":"  /**\n   * initializes searcher with a document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    // start from 1, so that the 0th doc never matches\n    for (int i = 1; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    // start from 1, so that the 0th doc never matches\n    for (int i = 1; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","sourceOld":"  /**\n   * initializes searcher with a document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    // start from 1, so that the 0th doc never matches\n    for (int i = 1; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    // start from 1, so that the 0th doc never matches\n    for (int i = 1; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","sourceOld":"  /**\n   * initializes searcher with a document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, MaxFieldLength.UNLIMITED);\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    // start from 1, so that the 0th doc never matches\n    for (int i = 1; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#setUp().mjava","sourceNew":"  /**\n   * initializes searcher with a document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    // start from 1, so that the 0th doc never matches\n    for (int i = 1; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","sourceOld":"  /**\n   * initializes searcher with a document set\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    final String docText[] = {\n        \"docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero\",\n        \"one blah three\",\n        \"one foo three multiOne\",\n        \"one foobar three multiThree\",\n        \"blueberry pancakes\",\n        \"blueberry pie\",\n        \"blueberry strudel\",\n        \"blueberry pizza\",\n    };\n    Directory directory = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    for (int i=0; i<N_DOCS; i++) {\n      add(docText[i%docText.length], iw);\n    }\n    iw.close();\n    searcher = new IndexSearcher(directory, true);\n\n    String qtxt = \"one\";\n    // start from 1, so that the 0th doc never matches\n    for (int i = 1; i < docText.length; i++) {\n      qtxt += ' ' + docText[i]; // large query so that search will be longer\n    }\n    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    query = queryParser.parse(qtxt);\n    \n    // warm the searcher\n    searcher.search(query, null, 1000);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["58db9ee7d88a7b7c23d77436675c11bcb755c8f9","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"ba1116b3450a9c1642c89445d131b37344055245":["0a046c0c310bc77931fc8441bd920053b607dd14"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["ba1116b3450a9c1642c89445d131b37344055245"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"58db9ee7d88a7b7c23d77436675c11bcb755c8f9":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["58db9ee7d88a7b7c23d77436675c11bcb755c8f9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["d9a5f8d969ec7ec6d93b9e941a2e2cc9f1e7b337"],"d9a5f8d969ec7ec6d93b9e941a2e2cc9f1e7b337":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["58db9ee7d88a7b7c23d77436675c11bcb755c8f9"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["ba1116b3450a9c1642c89445d131b37344055245"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"ba1116b3450a9c1642c89445d131b37344055245":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["d9a5f8d969ec7ec6d93b9e941a2e2cc9f1e7b337"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"58db9ee7d88a7b7c23d77436675c11bcb755c8f9":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"d9a5f8d969ec7ec6d93b9e941a2e2cc9f1e7b337":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}