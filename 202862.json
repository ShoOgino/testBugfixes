{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MultiTermIntervalsSource#matches(String,LeafReaderContext,int).mjava","commits":[{"id":"e3c9188b2bff41b228f06f721e7da193b96f895b","date":1548164162,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MultiTermIntervalsSource#matches(String,LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null) {\n      return null;\n    }\n    List<MatchesIterator> subMatches = new ArrayList<>();\n    TermsEnum te = automaton.getTermsEnum(terms);\n    BytesRef term;\n    int count = 0;\n    while ((term = te.next()) != null) {\n      MatchesIterator mi = TermIntervalsSource.matches(te, doc);\n      if (mi != null) {\n        subMatches.add(mi);\n        if (count++ > maxExpansions) {\n          throw new IllegalStateException(\"Automaton \" + term + \" expanded to too many terms (limit \" + maxExpansions + \")\");\n        }\n      }\n    }\n    return MatchesUtils.disjunction(subMatches);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MultiTermIntervalsSource#matches(String,LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null) {\n      return null;\n    }\n    List<MatchesIterator> subMatches = new ArrayList<>();\n    TermsEnum te = automaton.getTermsEnum(terms);\n    BytesRef term;\n    int count = 0;\n    while ((term = te.next()) != null) {\n      MatchesIterator mi = TermIntervalsSource.matches(te, doc);\n      if (mi != null) {\n        subMatches.add(mi);\n        if (count++ > maxExpansions) {\n          throw new IllegalStateException(\"Automaton \" + term + \" expanded to too many terms (limit \" + maxExpansions + \")\");\n        }\n      }\n    }\n    return MatchesUtils.disjunction(subMatches);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/MultiTermIntervalsSource#matches(String,LeafReaderContext,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MultiTermIntervalsSource#matches(String,LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null) {\n      return null;\n    }\n    List<MatchesIterator> subMatches = new ArrayList<>();\n    TermsEnum te = automaton.getTermsEnum(terms);\n    BytesRef term;\n    int count = 0;\n    while ((term = te.next()) != null) {\n      MatchesIterator mi = TermIntervalsSource.matches(te, doc);\n      if (mi != null) {\n        subMatches.add(mi);\n        if (count++ > maxExpansions) {\n          throw new IllegalStateException(\"Automaton \" + term + \" expanded to too many terms (limit \" + maxExpansions + \")\");\n        }\n      }\n    }\n    return MatchesUtils.disjunction(subMatches);\n  }\n\n","sourceOld":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    Terms terms = ctx.reader().terms(field);\n    if (terms == null) {\n      return null;\n    }\n    List<MatchesIterator> subMatches = new ArrayList<>();\n    TermsEnum te = automaton.getTermsEnum(terms);\n    BytesRef term;\n    int count = 0;\n    while ((term = te.next()) != null) {\n      MatchesIterator mi = TermIntervalsSource.matches(te, doc);\n      if (mi != null) {\n        subMatches.add(mi);\n        if (count++ > maxExpansions) {\n          throw new IllegalStateException(\"Automaton \" + term + \" expanded to too many terms (limit \" + maxExpansions + \")\");\n        }\n      }\n    }\n    return MatchesUtils.disjunction(subMatches);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["e3c9188b2bff41b228f06f721e7da193b96f895b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3c9188b2bff41b228f06f721e7da193b96f895b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3c9188b2bff41b228f06f721e7da193b96f895b"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3c9188b2bff41b228f06f721e7da193b96f895b","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"e3c9188b2bff41b228f06f721e7da193b96f895b":["97ee2282ff806e9bc9d705f389cf40451ab81c3e","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}