{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#initializeMetrics(SolrMetricManager,String,String).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    super.initializeMetrics(manager, registryName, scope);\n    metrics = new MetricsMap((detailed, map) -> {\n      if (importer != null) {\n        DocBuilder.Statistics cumulative = importer.cumulativeStatistics;\n\n        map.put(\"Status\", importer.getStatus().toString());\n\n        if (importer.docBuilder != null) {\n          DocBuilder.Statistics running = importer.docBuilder.importStatistics;\n          map.put(\"Documents Processed\", running.docCount);\n          map.put(\"Requests made to DataSource\", running.queryCount);\n          map.put(\"Rows Fetched\", running.rowsCount);\n          map.put(\"Documents Deleted\", running.deletedDocCount);\n          map.put(\"Documents Skipped\", running.skipDocCount);\n        }\n\n        map.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, cumulative.docCount);\n        map.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED, cumulative.queryCount);\n        map.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED, cumulative.rowsCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_DELETED, cumulative.deletedDocCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED, cumulative.skipDocCount);\n      }\n    });\n    manager.registerGauge(this, registryName, metrics, true, \"importer\", getCategory().toString(), scope);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    super.initializeMetrics(manager, registryName, scope);\n    metrics = new MetricsMap((detailed, map) -> {\n      if (importer != null) {\n        DocBuilder.Statistics cumulative = importer.cumulativeStatistics;\n\n        map.put(\"Status\", importer.getStatus().toString());\n\n        if (importer.docBuilder != null) {\n          DocBuilder.Statistics running = importer.docBuilder.importStatistics;\n          map.put(\"Documents Processed\", running.docCount);\n          map.put(\"Requests made to DataSource\", running.queryCount);\n          map.put(\"Rows Fetched\", running.rowsCount);\n          map.put(\"Documents Deleted\", running.deletedDocCount);\n          map.put(\"Documents Skipped\", running.skipDocCount);\n        }\n\n        map.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, cumulative.docCount);\n        map.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED, cumulative.queryCount);\n        map.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED, cumulative.rowsCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_DELETED, cumulative.deletedDocCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED, cumulative.skipDocCount);\n      }\n    });\n    manager.registerGauge(this, registryName, metrics, true, \"importer\", getCategory().toString(), scope);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    super.initializeMetrics(manager, registryName, tag, scope);\n    metrics = new MetricsMap((detailed, map) -> {\n      if (importer != null) {\n        DocBuilder.Statistics cumulative = importer.cumulativeStatistics;\n\n        map.put(\"Status\", importer.getStatus().toString());\n\n        if (importer.docBuilder != null) {\n          DocBuilder.Statistics running = importer.docBuilder.importStatistics;\n          map.put(\"Documents Processed\", running.docCount);\n          map.put(\"Requests made to DataSource\", running.queryCount);\n          map.put(\"Rows Fetched\", running.rowsCount);\n          map.put(\"Documents Deleted\", running.deletedDocCount);\n          map.put(\"Documents Skipped\", running.skipDocCount);\n        }\n\n        map.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, cumulative.docCount);\n        map.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED, cumulative.queryCount);\n        map.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED, cumulative.rowsCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_DELETED, cumulative.deletedDocCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED, cumulative.skipDocCount);\n      }\n    });\n    manager.registerGauge(this, registryName, metrics, tag, true, \"importer\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    super.initializeMetrics(manager, registryName, scope);\n    metrics = new MetricsMap((detailed, map) -> {\n      if (importer != null) {\n        DocBuilder.Statistics cumulative = importer.cumulativeStatistics;\n\n        map.put(\"Status\", importer.getStatus().toString());\n\n        if (importer.docBuilder != null) {\n          DocBuilder.Statistics running = importer.docBuilder.importStatistics;\n          map.put(\"Documents Processed\", running.docCount);\n          map.put(\"Requests made to DataSource\", running.queryCount);\n          map.put(\"Rows Fetched\", running.rowsCount);\n          map.put(\"Documents Deleted\", running.deletedDocCount);\n          map.put(\"Documents Skipped\", running.skipDocCount);\n        }\n\n        map.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, cumulative.docCount);\n        map.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED, cumulative.queryCount);\n        map.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED, cumulative.rowsCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_DELETED, cumulative.deletedDocCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED, cumulative.skipDocCount);\n      }\n    });\n    manager.registerGauge(this, registryName, metrics, true, \"importer\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    super.initializeMetrics(manager, registryName, tag, scope);\n    metrics = new MetricsMap((detailed, map) -> {\n      if (importer != null) {\n        DocBuilder.Statistics cumulative = importer.cumulativeStatistics;\n\n        map.put(\"Status\", importer.getStatus().toString());\n\n        if (importer.docBuilder != null) {\n          DocBuilder.Statistics running = importer.docBuilder.importStatistics;\n          map.put(\"Documents Processed\", running.docCount);\n          map.put(\"Requests made to DataSource\", running.queryCount);\n          map.put(\"Rows Fetched\", running.rowsCount);\n          map.put(\"Documents Deleted\", running.deletedDocCount);\n          map.put(\"Documents Skipped\", running.skipDocCount);\n        }\n\n        map.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, cumulative.docCount);\n        map.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED, cumulative.queryCount);\n        map.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED, cumulative.rowsCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_DELETED, cumulative.deletedDocCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED, cumulative.skipDocCount);\n      }\n    });\n    manager.registerGauge(this, registryName, metrics, tag, true, \"importer\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    super.initializeMetrics(manager, registryName, scope);\n    metrics = new MetricsMap((detailed, map) -> {\n      if (importer != null) {\n        DocBuilder.Statistics cumulative = importer.cumulativeStatistics;\n\n        map.put(\"Status\", importer.getStatus().toString());\n\n        if (importer.docBuilder != null) {\n          DocBuilder.Statistics running = importer.docBuilder.importStatistics;\n          map.put(\"Documents Processed\", running.docCount);\n          map.put(\"Requests made to DataSource\", running.queryCount);\n          map.put(\"Rows Fetched\", running.rowsCount);\n          map.put(\"Documents Deleted\", running.deletedDocCount);\n          map.put(\"Documents Skipped\", running.skipDocCount);\n        }\n\n        map.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, cumulative.docCount);\n        map.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED, cumulative.queryCount);\n        map.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED, cumulative.rowsCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_DELETED, cumulative.deletedDocCount);\n        map.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED, cumulative.skipDocCount);\n      }\n    });\n    manager.registerGauge(this, registryName, metrics, true, \"importer\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43564cbb30b064675027cfb569564e8531096e97"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}