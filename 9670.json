{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","commits":[{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","pathOld":"/dev/null","sourceNew":"    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n      this.planeBoundingOffset = planeBoundingOffset;\n\n      fullDistance = start.arcDistance(end);\n      fullNormalDistance = start.normalDistance(end);\n      fullLinearDistance = start.linearDistance(end);\n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9908748d960ccb7706a20e81289a656237780b6c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","pathOld":"/dev/null","sourceNew":"    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n      this.planeBoundingOffset = planeBoundingOffset;\n\n      fullDistance = start.arcDistance(end);\n      fullNormalDistance = start.normalDistance(end);\n      fullLinearDistance = start.linearDistance(end);\n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9908748d960ccb7706a20e81289a656237780b6c","date":1435716223,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","sourceNew":"    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n      this.planeBoundingOffset = planeBoundingOffset;\n\n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","sourceOld":"    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n      this.planeBoundingOffset = planeBoundingOffset;\n\n      fullDistance = start.arcDistance(end);\n      fullNormalDistance = start.normalDistance(end);\n      fullLinearDistance = start.linearDistance(end);\n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","bugFix":["f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPath.PathSegment#PathSegment(PlanetModel,GeoPoint,GeoPoint,Plane,double).mjava","sourceNew":"    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n      this.planeBoundingOffset = planeBoundingOffset;\n\n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","sourceOld":"    public PathSegment(final PlanetModel planetModel, final GeoPoint start, final GeoPoint end,\n      final Plane normalizedConnectingPlane, final double planeBoundingOffset) {\n      this.start = start;\n      this.end = end;\n      this.normalizedConnectingPlane = normalizedConnectingPlane;\n      this.planeBoundingOffset = planeBoundingOffset;\n\n      // Either start or end should be on the correct side\n      upperConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, -planeBoundingOffset);\n      lowerConnectingPlane = new SidedPlane(start, normalizedConnectingPlane, planeBoundingOffset);\n      // Cutoff planes use opposite endpoints as correct side examples\n      startCutoffPlane = new SidedPlane(end, normalizedConnectingPlane, start);\n      endCutoffPlane = new SidedPlane(start, normalizedConnectingPlane, end);\n      final Membership[] upperSide = new Membership[]{upperConnectingPlane};\n      final Membership[] lowerSide = new Membership[]{lowerConnectingPlane};\n      final Membership[] startSide = new Membership[]{startCutoffPlane};\n      final Membership[] endSide = new Membership[]{endCutoffPlane};\n      GeoPoint[] points;\n      points = upperConnectingPlane.findIntersections(planetModel, startCutoffPlane, lowerSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.ULHC = points[0];\n      points = upperConnectingPlane.findIntersections(planetModel, endCutoffPlane, lowerSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.URHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, startCutoffPlane, upperSide, endSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LLHC = points[0];\n      points = lowerConnectingPlane.findIntersections(planetModel, endCutoffPlane, upperSide, startSide);\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"Some segment boundary points are off the ellipsoid; path too wide\");\n      }\n      this.LRHC = points[0];\n      upperConnectingPlanePoints = new GeoPoint[]{ULHC, URHC};\n      lowerConnectingPlanePoints = new GeoPoint[]{LLHC, LRHC};\n      startCutoffPlanePoints = new GeoPoint[]{ULHC, LLHC};\n      endCutoffPlanePoints = new GeoPoint[]{URHC, LRHC};\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["9908748d960ccb7706a20e81289a656237780b6c"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9908748d960ccb7706a20e81289a656237780b6c":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"fec06d6753751ae302c7d35866763e6cb414112d":["9908748d960ccb7706a20e81289a656237780b6c"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"9908748d960ccb7706a20e81289a656237780b6c":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}