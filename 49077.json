{"path":"solr/core/src/test/org/apache/solr/handler/component/DummyCustomParamSpellChecker#getSuggestions(SpellingOptions).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DummyCustomParamSpellChecker#getSuggestions(SpellingOptions).mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/DummyCustomParamSpellChecker#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n\n    SpellingResult result = new SpellingResult();\n    //just spit back out the results\n    Iterator<String> iterator = options.customParams.getParameterNamesIterator();\n    int i = 0;\n    while (iterator.hasNext()){\n      String name = iterator.next();\n      String value = options.customParams.get(name);\n      result.add(new Token(name, i++, i++),  Collections.singletonList(value));\n    }    \n    return result;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n\n    SpellingResult result = new SpellingResult();\n    //just spit back out the results\n    Iterator<String> iterator = options.customParams.getParameterNamesIterator();\n    int i = 0;\n    while (iterator.hasNext()){\n      String name = iterator.next();\n      String value = options.customParams.get(name);\n      result.add(new Token(name, i++, i++),  Collections.singletonList(value));\n    }    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DummyCustomParamSpellChecker#getSuggestions(SpellingOptions).mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/DummyCustomParamSpellChecker#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n\n    SpellingResult result = new SpellingResult();\n    //just spit back out the results\n    Iterator<String> iterator = options.customParams.getParameterNamesIterator();\n    int i = 0;\n    while (iterator.hasNext()){\n      String name = iterator.next();\n      String value = options.customParams.get(name);\n      result.add(new Token(name, i++, i++),  Collections.singletonList(value));\n    }    \n    return result;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n\n    SpellingResult result = new SpellingResult();\n    //just spit back out the results\n    Iterator<String> iterator = options.customParams.getParameterNamesIterator();\n    int i = 0;\n    while (iterator.hasNext()){\n      String name = iterator.next();\n      String value = options.customParams.get(name);\n      result.add(new Token(name, i++, i++),  Collections.singletonList(value));\n    }    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DummyCustomParamSpellChecker#getSuggestions(SpellingOptions).mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/DummyCustomParamSpellChecker#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n\n    SpellingResult result = new SpellingResult();\n    //just spit back out the results\n    Iterator<String> iterator = options.customParams.getParameterNamesIterator();\n    int i = 0;\n    while (iterator.hasNext()){\n      String name = iterator.next();\n      String value = options.customParams.get(name);\n      result.add(new Token(name, i++, i++),  Collections.singletonList(value));\n    }    \n    return result;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n\n    SpellingResult result = new SpellingResult();\n    //just spit back out the results\n    Iterator<String> iterator = options.customParams.getParameterNamesIterator();\n    int i = 0;\n    while (iterator.hasNext()){\n      String name = iterator.next();\n      String value = options.customParams.get(name);\n      result.add(new Token(name, i++, i++),  Collections.singletonList(value));\n    }    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"193ea6c90aa0b2ce1fe469e36e6b950432bfca28","date":1343662811,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DummyCustomParamSpellChecker#getSuggestions(SpellingOptions).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DummyCustomParamSpellChecker#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n\n    SpellingResult result = new SpellingResult();\n    //just spit back out the results\n\n    // sort the keys to make ordering predictable\n    Iterator<String> iterator = options.customParams.getParameterNamesIterator();\n    List<String> lst = new ArrayList<String>();\n    while (iterator.hasNext()) {\n      lst.add(iterator.next());\n    }\n    Collections.sort(lst);\n\n    int i = 0;\n    for (String name : lst) {\n      String value = options.customParams.get(name);\n      result.add(new Token(name, i, i+1),  Collections.singletonList(value));\n      i += 2;\n    }    \n    return result;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n\n    SpellingResult result = new SpellingResult();\n    //just spit back out the results\n    Iterator<String> iterator = options.customParams.getParameterNamesIterator();\n    int i = 0;\n    while (iterator.hasNext()){\n      String name = iterator.next();\n      String value = options.customParams.get(name);\n      result.add(new Token(name, i++, i++),  Collections.singletonList(value));\n    }    \n    return result;\n  }\n\n","bugFix":["d76ab9983349b199b0e6f65776c0087b0c08a10d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DummyCustomParamSpellChecker#getSuggestions(SpellingOptions).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DummyCustomParamSpellChecker#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n\n    SpellingResult result = new SpellingResult();\n    //just spit back out the results\n\n    // sort the keys to make ordering predictable\n    Iterator<String> iterator = options.customParams.getParameterNamesIterator();\n    List<String> lst = new ArrayList<String>();\n    while (iterator.hasNext()) {\n      lst.add(iterator.next());\n    }\n    Collections.sort(lst);\n\n    int i = 0;\n    for (String name : lst) {\n      String value = options.customParams.get(name);\n      result.add(new Token(name, i, i+1),  Collections.singletonList(value));\n      i += 2;\n    }    \n    return result;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n\n    SpellingResult result = new SpellingResult();\n    //just spit back out the results\n    Iterator<String> iterator = options.customParams.getParameterNamesIterator();\n    int i = 0;\n    while (iterator.hasNext()){\n      String name = iterator.next();\n      String value = options.customParams.get(name);\n      result.add(new Token(name, i++, i++),  Collections.singletonList(value));\n    }    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DummyCustomParamSpellChecker#getSuggestions(SpellingOptions).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DummyCustomParamSpellChecker#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n\n    SpellingResult result = new SpellingResult();\n    //just spit back out the results\n\n    // sort the keys to make ordering predictable\n    Iterator<String> iterator = options.customParams.getParameterNamesIterator();\n    List<String> lst = new ArrayList<String>();\n    while (iterator.hasNext()) {\n      lst.add(iterator.next());\n    }\n    Collections.sort(lst);\n\n    int i = 0;\n    for (String name : lst) {\n      String value = options.customParams.get(name);\n      result.add(new Token(name, i, i+1),  Collections.singletonList(value));\n      i += 2;\n    }    \n    return result;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n\n    SpellingResult result = new SpellingResult();\n    //just spit back out the results\n    Iterator<String> iterator = options.customParams.getParameterNamesIterator();\n    int i = 0;\n    while (iterator.hasNext()){\n      String name = iterator.next();\n      String value = options.customParams.get(name);\n      result.add(new Token(name, i++, i++),  Collections.singletonList(value));\n    }    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DummyCustomParamSpellChecker#getSuggestions(SpellingOptions).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DummyCustomParamSpellChecker#getSuggestions(SpellingOptions).mjava","sourceNew":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n\n    SpellingResult result = new SpellingResult();\n    //just spit back out the results\n\n    // sort the keys to make ordering predictable\n    Iterator<String> iterator = options.customParams.getParameterNamesIterator();\n    List<String> lst = new ArrayList<>();\n    while (iterator.hasNext()) {\n      lst.add(iterator.next());\n    }\n    Collections.sort(lst);\n\n    int i = 0;\n    for (String name : lst) {\n      String value = options.customParams.get(name);\n      result.add(new Token(name, i, i+1),  Collections.singletonList(value));\n      i += 2;\n    }    \n    return result;\n  }\n\n","sourceOld":"  @Override\n  public SpellingResult getSuggestions(SpellingOptions options) throws IOException {\n\n    SpellingResult result = new SpellingResult();\n    //just spit back out the results\n\n    // sort the keys to make ordering predictable\n    Iterator<String> iterator = options.customParams.getParameterNamesIterator();\n    List<String> lst = new ArrayList<String>();\n    while (iterator.hasNext()) {\n      lst.add(iterator.next());\n    }\n    Collections.sort(lst);\n\n    int i = 0;\n    for (String name : lst) {\n      String value = options.customParams.get(name);\n      result.add(new Token(name, i, i+1),  Collections.singletonList(value));\n      i += 2;\n    }    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["193ea6c90aa0b2ce1fe469e36e6b950432bfca28"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c26f00b574427b55127e869b935845554afde1fa","193ea6c90aa0b2ce1fe469e36e6b950432bfca28"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["c26f00b574427b55127e869b935845554afde1fa","193ea6c90aa0b2ce1fe469e36e6b950432bfca28"],"193ea6c90aa0b2ce1fe469e36e6b950432bfca28":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","193ea6c90aa0b2ce1fe469e36e6b950432bfca28"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"193ea6c90aa0b2ce1fe469e36e6b950432bfca28":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}