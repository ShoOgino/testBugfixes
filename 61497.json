{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#exec(String[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#exec(String[]).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#exec(String[]).mjava","sourceNew":"  /**\n   * Utility: execute benchmark from command line\n   * @param args single argument is expected: algorithm-file\n   */\n  public static void exec(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(new FileReader(algFile));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n  }\n\n","sourceOld":"  /**\n   * Utility: execute benchmark from command line\n   * @param args single argument is expected: algorithm-file\n   */\n  public static void exec(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(new FileReader(algFile));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e2d1edb0d4b63db0ffa514a529fb559609dbcd2","date":1341667852,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#exec(String[]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#exec(String[]).mjava","sourceNew":"  /**\n   * Utility: execute benchmark from command line\n   * @param args single argument is expected: algorithm-file\n   */\n  public static void exec(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(IOUtils.getDecodingReader(algFile, IOUtils.CHARSET_UTF_8));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n  }\n\n","sourceOld":"  /**\n   * Utility: execute benchmark from command line\n   * @param args single argument is expected: algorithm-file\n   */\n  public static void exec(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(new FileReader(algFile));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#exec(String[]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#exec(String[]).mjava","sourceNew":"  /**\n   * Utility: execute benchmark from command line\n   * @param args single argument is expected: algorithm-file\n   */\n  public static void exec(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(IOUtils.getDecodingReader(algFile, IOUtils.CHARSET_UTF_8));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n  }\n\n","sourceOld":"  /**\n   * Utility: execute benchmark from command line\n   * @param args single argument is expected: algorithm-file\n   */\n  public static void exec(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(new FileReader(algFile));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#exec(String[]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#exec(String[]).mjava","sourceNew":"  /**\n   * Utility: execute benchmark from command line\n   * @param args single argument is expected: algorithm-file\n   */\n  public static void exec(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(IOUtils.getDecodingReader(algFile, IOUtils.CHARSET_UTF_8));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n  }\n\n","sourceOld":"  /**\n   * Utility: execute benchmark from command line\n   * @param args single argument is expected: algorithm-file\n   */\n  public static void exec(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(new FileReader(algFile));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#exec(String[]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#exec(String[]).mjava","sourceNew":"  /**\n   * Utility: execute benchmark from command line\n   * @param args single argument is expected: algorithm-file\n   */\n  public static void exec(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(IOUtils.getDecodingReader(algFile, IOUtils.CHARSET_UTF_8));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n  }\n\n","sourceOld":"  /**\n   * Utility: execute benchmark from command line\n   * @param args single argument is expected: algorithm-file\n   */\n  public static void exec(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(new FileReader(algFile));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#exec(String[]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#exec(String[]).mjava","sourceNew":"  /**\n   * Utility: execute benchmark from command line\n   * @param args single argument is expected: algorithm-file\n   */\n  public static void exec(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(IOUtils.getDecodingReader(algFile, StandardCharsets.UTF_8));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n  }\n\n","sourceOld":"  /**\n   * Utility: execute benchmark from command line\n   * @param args single argument is expected: algorithm-file\n   */\n  public static void exec(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(IOUtils.getDecodingReader(algFile, IOUtils.CHARSET_UTF_8));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#exec(String[]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#exec(String[]).mjava","sourceNew":"  /**\n   * Utility: execute benchmark from command line\n   * @param args single argument is expected: algorithm-file\n   */\n  public static void exec(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(IOUtils.getDecodingReader(algFile, StandardCharsets.UTF_8));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n  }\n\n","sourceOld":"  /**\n   * Utility: execute benchmark from command line\n   * @param args single argument is expected: algorithm-file\n   */\n  public static void exec(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(IOUtils.getDecodingReader(algFile, IOUtils.CHARSET_UTF_8));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#exec(String[]).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#exec(String[]).mjava","sourceNew":"  /**\n   * Utility: execute benchmark from command line\n   * @param args single argument is expected: algorithm-file\n   */\n  public static void exec(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    Path algFile = Paths.get(args[0]);\n    if (!Files.isReadable(algFile)) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.toAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.toAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(Files.newBufferedReader(algFile, StandardCharsets.UTF_8));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n  }\n\n","sourceOld":"  /**\n   * Utility: execute benchmark from command line\n   * @param args single argument is expected: algorithm-file\n   */\n  public static void exec(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(IOUtils.getDecodingReader(algFile, StandardCharsets.UTF_8));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["2acf500f78aa12b92e371fd89c719291986b6b90","7d89d7e4e5101347833eea558851bf4209218619"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e2d1edb0d4b63db0ffa514a529fb559609dbcd2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","1e2d1edb0d4b63db0ffa514a529fb559609dbcd2"],"f4abec28b874149a7223e32cc7a01704c27790de":["7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["2acf500f78aa12b92e371fd89c719291986b6b90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1e2d1edb0d4b63db0ffa514a529fb559609dbcd2","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"1e2d1edb0d4b63db0ffa514a529fb559609dbcd2":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424","7d89d7e4e5101347833eea558851bf4209218619","46d8ada1fff8d18cb197c38c7983225162599948"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}