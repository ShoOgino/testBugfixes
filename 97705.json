{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","sourceNew":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.toString();\n\n\t    // Check the exclusion table\n\t    if (!keywordAttr.isKeyword()) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setEmpty().append(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","sourceOld":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.toString();\n\n\t    // Check the exclusion table\n\t    if (!keywordAttr.isKeyword()) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setEmpty().append(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/fr/FrenchStemFilter#incrementToken().mjava","sourceNew":null,"sourceOld":"\t/**\n\t * @return  Returns true for the next token in the stream, or false at EOS\n\t */\n\t@Override\n\tpublic boolean incrementToken() throws IOException {\n\t  if (input.incrementToken()) {\n\t    String term = termAtt.toString();\n\n\t    // Check the exclusion table\n\t    if (!keywordAttr.isKeyword()) {\n\t      String s = stemmer.stem( term );\n\t      // If not stemmed, don't waste the time  adjusting the token.\n\t      if ((s != null) && !s.equals( term ) )\n\t        termAtt.setEmpty().append(s);\n\t    }\n\t    return true;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}