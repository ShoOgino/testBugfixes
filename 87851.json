{"path":"lucene/queries/src/java/org/apache/lucene/queries/intervals/Intervals#multiterm(Automaton,int,String).mjava","commits":[{"id":"ae02f522d16c113ae5eda62c28a7d70ba8451419","date":1572646125,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/Intervals#multiterm(Automaton,int,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Return an {@link IntervalsSource} over the disjunction of all terms that's accepted by the given automaton \n   *\n   * WARNING: Setting {@code maxExpansions} to higher than the default value of 128\n   * can be both slow and memory-intensive\n   *\n   * @param automaton accepts terms for to expand to\n   * @param maxExpansions the maximum number of terms to expand to\n   * @param pattern string representation of the given automaton, mostly used in exception messages  \n   *\n   * @throws IllegalStateException if the automaton accepts more than {@code maxExpansions} terms\n   */\n  public static IntervalsSource multiterm(Automaton automaton, int maxExpansions, String pattern) {\n    CompiledAutomaton ca = new CompiledAutomaton(automaton);\n    return new MultiTermIntervalsSource(ca, maxExpansions, pattern);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa011839030cb3186a8d21617499865cfdcdfe3","date":1582542528,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/Intervals#multiterm(Automaton,int,String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/intervals/Intervals#multiterm(Automaton,int,String).mjava","sourceNew":"  /**\n   * Expert: Return an {@link IntervalsSource} over the disjunction of all terms that's accepted by the given automaton \n   *\n   * WARNING: Setting {@code maxExpansions} to higher than the default value of 128\n   * can be both slow and memory-intensive\n   *\n   * @param automaton accepts terms for to expand to\n   * @param maxExpansions the maximum number of terms to expand to\n   * @param pattern string representation of the given automaton, mostly used in exception messages  \n   *\n   * @throws IllegalStateException if the automaton accepts more than {@code maxExpansions} terms\n   *\n   * @deprecated use {@link #multiterm(CompiledAutomaton, int, String)}\n   */\n  @Deprecated\n  public static IntervalsSource multiterm(Automaton automaton, int maxExpansions, String pattern) {\n    CompiledAutomaton ca = new CompiledAutomaton(automaton);\n    return new MultiTermIntervalsSource(ca, maxExpansions, pattern);\n  }\n\n","sourceOld":"  /**\n   * Expert: Return an {@link IntervalsSource} over the disjunction of all terms that's accepted by the given automaton \n   *\n   * WARNING: Setting {@code maxExpansions} to higher than the default value of 128\n   * can be both slow and memory-intensive\n   *\n   * @param automaton accepts terms for to expand to\n   * @param maxExpansions the maximum number of terms to expand to\n   * @param pattern string representation of the given automaton, mostly used in exception messages  \n   *\n   * @throws IllegalStateException if the automaton accepts more than {@code maxExpansions} terms\n   */\n  public static IntervalsSource multiterm(Automaton automaton, int maxExpansions, String pattern) {\n    CompiledAutomaton ca = new CompiledAutomaton(automaton);\n    return new MultiTermIntervalsSource(ca, maxExpansions, pattern);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc7ec129a33487094b6d0a279c9f7abe3c4cff24","date":1582542997,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/intervals/Intervals#multiterm(Automaton,int,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert: Return an {@link IntervalsSource} over the disjunction of all terms that's accepted by the given automaton \n   *\n   * WARNING: Setting {@code maxExpansions} to higher than the default value of 128\n   * can be both slow and memory-intensive\n   *\n   * @param automaton accepts terms for to expand to\n   * @param maxExpansions the maximum number of terms to expand to\n   * @param pattern string representation of the given automaton, mostly used in exception messages  \n   *\n   * @throws IllegalStateException if the automaton accepts more than {@code maxExpansions} terms\n   *\n   * @deprecated use {@link #multiterm(CompiledAutomaton, int, String)}\n   */\n  @Deprecated\n  public static IntervalsSource multiterm(Automaton automaton, int maxExpansions, String pattern) {\n    CompiledAutomaton ca = new CompiledAutomaton(automaton);\n    return new MultiTermIntervalsSource(ca, maxExpansions, pattern);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fa011839030cb3186a8d21617499865cfdcdfe3":["ae02f522d16c113ae5eda62c28a7d70ba8451419"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae02f522d16c113ae5eda62c28a7d70ba8451419":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cc7ec129a33487094b6d0a279c9f7abe3c4cff24":["9fa011839030cb3186a8d21617499865cfdcdfe3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc7ec129a33487094b6d0a279c9f7abe3c4cff24"]},"commit2Childs":{"9fa011839030cb3186a8d21617499865cfdcdfe3":["cc7ec129a33487094b6d0a279c9f7abe3c4cff24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae02f522d16c113ae5eda62c28a7d70ba8451419"],"ae02f522d16c113ae5eda62c28a7d70ba8451419":["9fa011839030cb3186a8d21617499865cfdcdfe3"],"cc7ec129a33487094b6d0a279c9f7abe3c4cff24":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}