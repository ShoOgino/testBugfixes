{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricsContext,String).mjava","commits":[{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    super.initializeMetrics(parentContext, scope);\n    solrMetricsContext.gauge(this,  () -> (core != null && !core.isClosed() ? NumberUtils.readableSize(core.getIndexSize()) : \"\"),\n        true, \"indexSize\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n         true, \"indexVersion\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        true, GENERATION, getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> (core != null && !core.isClosed() ? core.getIndexDir() : \"\"),\n        true, \"indexPath\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> isMaster,\n         true, \"isMaster\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> isSlave,\n         true, \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    solrMetricsContext.gauge(this , fetcherMap, true, \"fetcher\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\",\n         true, \"confFilesToReplicate\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        true, REPLICATE_AFTER, getCategory().toString(), scope);\n    solrMetricsContext.gauge(this,  () -> isMaster && replicationEnabled.get(),\n        true, \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    super.initializeMetrics(manager, registry, tag, scope);\n\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? NumberUtils.readableSize(core.getIndexSize()) : \"\"),\n        tag, true, \"indexSize\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n        tag, true, \"indexVersion\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        tag, true, GENERATION, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? core.getIndexDir() : \"\"),\n        tag, true, \"indexPath\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster,\n        tag, true, \"isMaster\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isSlave,\n        tag, true, \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    manager.registerGauge(this, registry, fetcherMap, tag, true, \"fetcher\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\",\n        tag, true, \"confFilesToReplicate\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        tag, true, REPLICATE_AFTER, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && replicationEnabled.get(),\n        tag, true, \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c2af5a711bd6e2d33e0221ced0f47ac596ed275","date":1572877903,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricsContext,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    super.initializeMetrics(parentContext, scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? NumberUtils.readableSize(core.getIndexSize()) : \"\"),\n        true, \"indexSize\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n         true, \"indexVersion\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        true, GENERATION, getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? core.getIndexDir() : \"\"),\n        true, \"indexPath\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isMaster,\n         true, \"isMaster\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isSlave,\n         true, \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    solrMetricsContext.gauge(fetcherMap, true, \"fetcher\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isMaster && includeConfFiles != null ? includeConfFiles : \"\",\n         true, \"confFilesToReplicate\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        true, REPLICATE_AFTER, getCategory().toString(), scope);\n    solrMetricsContext.gauge( () -> isMaster && replicationEnabled.get(),\n        true, \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    super.initializeMetrics(parentContext, scope);\n    solrMetricsContext.gauge(this,  () -> (core != null && !core.isClosed() ? NumberUtils.readableSize(core.getIndexSize()) : \"\"),\n        true, \"indexSize\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n         true, \"indexVersion\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        true, GENERATION, getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> (core != null && !core.isClosed() ? core.getIndexDir() : \"\"),\n        true, \"indexPath\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> isMaster,\n         true, \"isMaster\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> isSlave,\n         true, \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    solrMetricsContext.gauge(this , fetcherMap, true, \"fetcher\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\",\n         true, \"confFilesToReplicate\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(this, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        true, REPLICATE_AFTER, getCategory().toString(), scope);\n    solrMetricsContext.gauge(this,  () -> isMaster && replicationEnabled.get(),\n        true, \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricsContext,String).mjava","sourceNew":"  //TODO: Handle compatibility in 8.x\n  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    super.initializeMetrics(parentContext, scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? NumberUtils.readableSize(core.getIndexSize()) : \"\"),\n        true, \"indexSize\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n         true, \"indexVersion\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        true, GENERATION, getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? core.getIndexDir() : \"\"),\n        true, \"indexPath\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isLeader,\n         true, \"isLeader\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isFollower,\n         true, \"isFollower\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(LEADER_URL, fetcher.getLeaderUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    solrMetricsContext.gauge(fetcherMap, true, \"fetcher\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isLeader && includeConfFiles != null ? includeConfFiles : \"\",\n         true, \"confFilesToReplicate\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isLeader ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        true, REPLICATE_AFTER, getCategory().toString(), scope);\n    solrMetricsContext.gauge( () -> isLeader && replicationEnabled.get(),\n        true, \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    super.initializeMetrics(parentContext, scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? NumberUtils.readableSize(core.getIndexSize()) : \"\"),\n        true, \"indexSize\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n         true, \"indexVersion\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        true, GENERATION, getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? core.getIndexDir() : \"\"),\n        true, \"indexPath\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isMaster,\n         true, \"isMaster\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isSlave,\n         true, \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    solrMetricsContext.gauge(fetcherMap, true, \"fetcher\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isMaster && includeConfFiles != null ? includeConfFiles : \"\",\n         true, \"confFilesToReplicate\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        true, REPLICATE_AFTER, getCategory().toString(), scope);\n    solrMetricsContext.gauge( () -> isMaster && replicationEnabled.get(),\n        true, \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"233211c3dbff6f367588be5bbb4ac77f72eae193","date":1602085975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricsContext,String).mjava","sourceNew":"  //TODO: Handle compatibility in 8.x\n  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    super.initializeMetrics(parentContext, scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? NumberUtils.readableSize(core.getIndexSize()) : \"\"),\n        true, \"indexSize\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n         true, \"indexVersion\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        true, GENERATION, getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? core.getIndexDir() : \"\"),\n        true, \"indexPath\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isLeader,\n         true, \"isLeader\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isFollower,\n         true, \"isFollower\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap(map -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(LEADER_URL, fetcher.getLeaderUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    solrMetricsContext.gauge(fetcherMap, true, \"fetcher\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isLeader && includeConfFiles != null ? includeConfFiles : \"\",\n         true, \"confFilesToReplicate\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isLeader ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        true, REPLICATE_AFTER, getCategory().toString(), scope);\n    solrMetricsContext.gauge( () -> isLeader && replicationEnabled.get(),\n        true, \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  //TODO: Handle compatibility in 8.x\n  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    super.initializeMetrics(parentContext, scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? NumberUtils.readableSize(core.getIndexSize()) : \"\"),\n        true, \"indexSize\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n         true, \"indexVersion\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        true, GENERATION, getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> (core != null && !core.isClosed() ? core.getIndexDir() : \"\"),\n        true, \"indexPath\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isLeader,\n         true, \"isLeader\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isFollower,\n         true, \"isFollower\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(LEADER_URL, fetcher.getLeaderUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    solrMetricsContext.gauge(fetcherMap, true, \"fetcher\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isLeader && includeConfFiles != null ? includeConfFiles : \"\",\n         true, \"confFilesToReplicate\", getCategory().toString(), scope);\n    solrMetricsContext.gauge(() -> isLeader ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        true, REPLICATE_AFTER, getCategory().toString(), scope);\n    solrMetricsContext.gauge( () -> isLeader && replicationEnabled.get(),\n        true, \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"233211c3dbff6f367588be5bbb4ac77f72eae193":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["233211c3dbff6f367588be5bbb4ac77f72eae193"]},"commit2Childs":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}