{"path":"src/java/org/apache/solr/search/DocSetBase[DocSet]#equals(Object).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/DocSetBase[DocSet]#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  // Not implemented efficiently... for testing purposes only\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=this.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    // if (this.size() != other.size()) return false;\n    return this.getBits().equals(other.getBits());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["80e24e1f719d953d25c3d18d956c733c53286ddc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80e24e1f719d953d25c3d18d956c733c53286ddc","date":1244428026,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/search/DocSetBase[DocSet]#equals(Object).mjava","pathOld":"src/java/org/apache/solr/search/DocSetBase[DocSet]#equals(Object).mjava","sourceNew":"  // Not implemented efficiently... for testing purposes only\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    // if (this.size() != other.size()) return false;\n    return this.getBits().equals(other.getBits());\n  }\n\n","sourceOld":"  // Not implemented efficiently... for testing purposes only\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=this.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    // if (this.size() != other.size()) return false;\n    return this.getBits().equals(other.getBits());\n  }\n\n","bugFix":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/DocSetBase[DocSet]#equals(Object).mjava","pathOld":"src/java/org/apache/solr/search/DocSetBase[DocSet]#equals(Object).mjava","sourceNew":"  // Not implemented efficiently... for testing purposes only\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    // if (this.size() != other.size()) return false;\n    return this.getBits().equals(other.getBits());\n  }\n\n","sourceOld":"  // Not implemented efficiently... for testing purposes only\n  public boolean equals(Object obj) {\n    if (!(obj instanceof DocSet)) return false;\n    DocSet other = (DocSet)obj;\n    if (this.size() != other.size()) return false;\n\n    if (this instanceof DocList && other instanceof DocList) {\n      // compare ordering\n      DocIterator i1=this.iterator();\n      DocIterator i2=other.iterator();\n      while(i1.hasNext() && i2.hasNext()) {\n        if (i1.nextDoc() != i2.nextDoc()) return false;\n      }\n      return true;\n      // don't compare matches\n    }\n\n    // if (this.size() != other.size()) return false;\n    return this.getBits().equals(other.getBits());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"80e24e1f719d953d25c3d18d956c733c53286ddc":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"ad94625fb8d088209f46650c8097196fec67f00c":["80e24e1f719d953d25c3d18d956c733c53286ddc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["80e24e1f719d953d25c3d18d956c733c53286ddc"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"80e24e1f719d953d25c3d18d956c733c53286ddc":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}