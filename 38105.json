{"path":"backwards/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Document,Analyzer,Term).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Document,Analyzer,Term).mjava","pathOld":"/dev/null","sourceNew":"  boolean updateDocument(Document doc, Analyzer analyzer, Term delTerm)\n    throws CorruptIndexException, IOException {\n\n    // This call is synchronized but fast\n    final DocumentsWriterThreadState state = getThreadState(doc, delTerm);\n\n    final DocState docState = state.docState;\n    docState.doc = doc;\n    docState.analyzer = analyzer;\n\n    boolean success = false;\n    try {\n      // This call is not synchronized and does all the\n      // work\n      final DocWriter perDoc = state.consumer.processDocument();\n        \n      // This call is synchronized but fast\n      finishDocument(state, perDoc);\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized(this) {\n\n          if (aborting) {\n            state.isIdle = true;\n            notifyAll();\n            abort();\n          } else {\n            skipDocWriter.docID = docState.docID;\n            boolean success2 = false;\n            try {\n              waitQueue.add(skipDocWriter);\n              success2 = true;\n            } finally {\n              if (!success2) {\n                state.isIdle = true;\n                notifyAll();\n                abort();\n                return false;\n              }\n            }\n\n            state.isIdle = true;\n            notifyAll();\n\n            // If this thread state had decided to flush, we\n            // must clear it so another thread can flush\n            if (state.doFlushAfter) {\n              state.doFlushAfter = false;\n              flushPending = false;\n              notifyAll();\n            }\n\n            // Immediately mark this document as deleted\n            // since likely it was partially added.  This\n            // keeps indexing as \"all or none\" (atomic) when\n            // adding a document:\n            addDeleteDocID(state.docState.docID);\n          }\n        }\n      }\n    }\n\n    return state.doFlushAfter || timeToFlushDeletes();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Document,Analyzer,Term).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/DocumentsWriter#updateDocument(Document,Analyzer,Term).mjava","sourceNew":"  boolean updateDocument(Document doc, Analyzer analyzer, Term delTerm)\n    throws CorruptIndexException, IOException {\n\n    // This call is synchronized but fast\n    final DocumentsWriterThreadState state = getThreadState(doc, delTerm);\n\n    final DocState docState = state.docState;\n    docState.doc = doc;\n    docState.analyzer = analyzer;\n\n    boolean success = false;\n    try {\n      // This call is not synchronized and does all the\n      // work\n      final DocWriter perDoc = state.consumer.processDocument();\n        \n      // This call is synchronized but fast\n      finishDocument(state, perDoc);\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized(this) {\n\n          if (aborting) {\n            state.isIdle = true;\n            notifyAll();\n            abort();\n          } else {\n            skipDocWriter.docID = docState.docID;\n            boolean success2 = false;\n            try {\n              waitQueue.add(skipDocWriter);\n              success2 = true;\n            } finally {\n              if (!success2) {\n                state.isIdle = true;\n                notifyAll();\n                abort();\n                return false;\n              }\n            }\n\n            state.isIdle = true;\n            notifyAll();\n\n            // If this thread state had decided to flush, we\n            // must clear it so another thread can flush\n            if (state.doFlushAfter) {\n              state.doFlushAfter = false;\n              flushPending = false;\n              notifyAll();\n            }\n\n            // Immediately mark this document as deleted\n            // since likely it was partially added.  This\n            // keeps indexing as \"all or none\" (atomic) when\n            // adding a document:\n            addDeleteDocID(state.docState.docID);\n          }\n        }\n      }\n    }\n\n    return state.doFlushAfter || timeToFlushDeletes();\n  }\n\n","sourceOld":"  boolean updateDocument(Document doc, Analyzer analyzer, Term delTerm)\n    throws CorruptIndexException, IOException {\n\n    // This call is synchronized but fast\n    final DocumentsWriterThreadState state = getThreadState(doc, delTerm);\n\n    final DocState docState = state.docState;\n    docState.doc = doc;\n    docState.analyzer = analyzer;\n\n    boolean success = false;\n    try {\n      // This call is not synchronized and does all the\n      // work\n      final DocWriter perDoc = state.consumer.processDocument();\n        \n      // This call is synchronized but fast\n      finishDocument(state, perDoc);\n      success = true;\n    } finally {\n      if (!success) {\n        synchronized(this) {\n\n          if (aborting) {\n            state.isIdle = true;\n            notifyAll();\n            abort();\n          } else {\n            skipDocWriter.docID = docState.docID;\n            boolean success2 = false;\n            try {\n              waitQueue.add(skipDocWriter);\n              success2 = true;\n            } finally {\n              if (!success2) {\n                state.isIdle = true;\n                notifyAll();\n                abort();\n                return false;\n              }\n            }\n\n            state.isIdle = true;\n            notifyAll();\n\n            // If this thread state had decided to flush, we\n            // must clear it so another thread can flush\n            if (state.doFlushAfter) {\n              state.doFlushAfter = false;\n              flushPending = false;\n              notifyAll();\n            }\n\n            // Immediately mark this document as deleted\n            // since likely it was partially added.  This\n            // keeps indexing as \"all or none\" (atomic) when\n            // adding a document:\n            addDeleteDocID(state.docState.docID);\n          }\n        }\n      }\n    }\n\n    return state.doFlushAfter || timeToFlushDeletes();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}