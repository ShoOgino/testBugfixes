{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","commits":[{"id":"a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a","date":1272922845,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}