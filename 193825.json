{"path":"src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextDoc().mjava","commits":[{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextDoc().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriterFieldMergeState#nextDoc().mjava","sourceNew":"  public boolean nextDoc() throws IOException {\n    if (freq.eof()) {\n      if (p.lastDocCode != -1) {\n        // Return last doc\n        docID = p.lastDocID;\n        termFreq = p.docFreq;\n        p.lastDocCode = -1;\n        return true;\n      } else \n        // EOF\n        return false;\n    }\n\n    final int code = freq.readVInt();\n    docID += code >>> 1;\n    if ((code & 1) != 0)\n      termFreq = 1;\n    else\n      termFreq = freq.readVInt();\n\n    return true;\n  }\n\n","sourceOld":"  public boolean nextDoc() throws IOException {\n    if (freq.bufferOffset + freq.upto == freq.endIndex) {\n      if (p.lastDocCode != -1) {\n        // Return last doc\n        docID = p.lastDocID;\n        termFreq = p.docFreq;\n        p.lastDocCode = -1;\n        return true;\n      } else \n        // EOF\n        return false;\n    }\n\n    final int code = freq.readVInt();\n    docID += code >>> 1;\n    if ((code & 1) != 0)\n      termFreq = 1;\n    else\n      termFreq = freq.readVInt();\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902ba79f4590a41c663c447756d2e5041cbbdda9","date":1217956662,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextDoc().mjava","pathOld":"src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextDoc().mjava","sourceNew":"  public boolean nextDoc() throws IOException {\n    if (freq.eof()) {\n      if (p.lastDocCode != -1) {\n        // Return last doc\n        docID = p.lastDocID;\n        if (!field.omitTf)\n          termFreq = p.docFreq;\n        p.lastDocCode = -1;\n        return true;\n      } else\n        // EOF\n        return false;\n    }\n\n    final int code = freq.readVInt();\n    if (field.omitTf)\n      docID += code;\n    else {\n      docID += code >>> 1;\n      if ((code & 1) != 0)\n        termFreq = 1;\n      else\n        termFreq = freq.readVInt();\n    }\n\n    assert docID != p.lastDocID;\n\n    return true;\n  }\n\n","sourceOld":"  public boolean nextDoc() throws IOException {\n    if (freq.eof()) {\n      if (p.lastDocCode != -1) {\n        // Return last doc\n        docID = p.lastDocID;\n        termFreq = p.docFreq;\n        p.lastDocCode = -1;\n        return true;\n      } else \n        // EOF\n        return false;\n    }\n\n    final int code = freq.readVInt();\n    docID += code >>> 1;\n    if ((code & 1) != 0)\n      termFreq = 1;\n    else\n      termFreq = freq.readVInt();\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"066b6ff5a08e35c3b6880e7c3ddda79526acdab1","date":1237569961,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextDoc().mjava","pathOld":"src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextDoc().mjava","sourceNew":"  public boolean nextDoc() throws IOException {\n    if (freq.eof()) {\n      if (p.lastDocCode != -1) {\n        // Return last doc\n        docID = p.lastDocID;\n        if (!field.omitTermFreqAndPositions)\n          termFreq = p.docFreq;\n        p.lastDocCode = -1;\n        return true;\n      } else\n        // EOF\n        return false;\n    }\n\n    final int code = freq.readVInt();\n    if (field.omitTermFreqAndPositions)\n      docID += code;\n    else {\n      docID += code >>> 1;\n      if ((code & 1) != 0)\n        termFreq = 1;\n      else\n        termFreq = freq.readVInt();\n    }\n\n    assert docID != p.lastDocID;\n\n    return true;\n  }\n\n","sourceOld":"  public boolean nextDoc() throws IOException {\n    if (freq.eof()) {\n      if (p.lastDocCode != -1) {\n        // Return last doc\n        docID = p.lastDocID;\n        if (!field.omitTf)\n          termFreq = p.docFreq;\n        p.lastDocCode = -1;\n        return true;\n      } else\n        // EOF\n        return false;\n    }\n\n    final int code = freq.readVInt();\n    if (field.omitTf)\n      docID += code;\n    else {\n      docID += code >>> 1;\n      if ((code & 1) != 0)\n        termFreq = 1;\n      else\n        termFreq = freq.readVInt();\n    }\n\n    assert docID != p.lastDocID;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextDoc().mjava","pathOld":"src/java/org/apache/lucene/index/FreqProxFieldMergeState#nextDoc().mjava","sourceNew":"  public boolean nextDoc() throws IOException {\n    if (freq.eof()) {\n      if (p.lastDocCode != -1) {\n        // Return last doc\n        docID = p.lastDocID;\n        if (!field.omitTermFreqAndPositions)\n          termFreq = p.docFreq;\n        p.lastDocCode = -1;\n        return true;\n      } else\n        // EOF\n        return false;\n    }\n\n    final int code = freq.readVInt();\n    if (field.omitTermFreqAndPositions)\n      docID += code;\n    else {\n      docID += code >>> 1;\n      if ((code & 1) != 0)\n        termFreq = 1;\n      else\n        termFreq = freq.readVInt();\n    }\n\n    assert docID != p.lastDocID;\n\n    return true;\n  }\n\n","sourceOld":"  public boolean nextDoc() throws IOException {\n    if (freq.eof()) {\n      if (p.lastDocCode != -1) {\n        // Return last doc\n        docID = p.lastDocID;\n        if (!field.omitTermFreqAndPositions)\n          termFreq = p.docFreq;\n        p.lastDocCode = -1;\n        return true;\n      } else\n        // EOF\n        return false;\n    }\n\n    final int code = freq.readVInt();\n    if (field.omitTermFreqAndPositions)\n      docID += code;\n    else {\n      docID += code >>> 1;\n      if ((code & 1) != 0)\n        termFreq = 1;\n      else\n        termFreq = freq.readVInt();\n    }\n\n    assert docID != p.lastDocID;\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5350389bf83287111f7760b9e3db3af8e3648474"],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"5350389bf83287111f7760b9e3db3af8e3648474":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}