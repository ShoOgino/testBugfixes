{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap#asPngBytes(int,int,int[],FacetDebugInfo).mjava","commits":[{"id":"2ab027bdfe663227636ccbeda13ae82add302939","date":1529980633,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap#asPngBytes(int,int,int[],FacetDebugInfo).mjava","pathOld":"/dev/null","sourceNew":"  @VisibleForTesting\n  static byte[] asPngBytes(final int columns, final int rows, final int[] counts, FacetDebugInfo debugInfo) {\n    long startTimeNano = System.nanoTime();\n    BufferedImage image = PngHelper.newImage(columns, rows);\n    for (int c = 0; c < columns; c++) {\n      for (int r = 0; r < rows; r++) {\n        PngHelper.writeCountAtColumnRow(image, rows, c, r, counts[c * rows + r]);\n      }\n    }\n    byte[] bytes = PngHelper.writeImage(image);\n    long durationMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTimeNano);\n    log.debug(\"heatmap nativeSize={} pngSize={} pngTime={}\", (counts.length * 4), bytes.length, durationMs);\n    if (debugInfo != null) {\n      debugInfo.putInfoItem(\"heatmap png timing\", durationMs);\n    }\n    return bytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap#asPngBytes(int,int,int[],FacetDebugInfo).mjava","pathOld":"/dev/null","sourceNew":"  @VisibleForTesting\n  static byte[] asPngBytes(final int columns, final int rows, final int[] counts, FacetDebugInfo debugInfo) {\n    long startTimeNano = System.nanoTime();\n    BufferedImage image = PngHelper.newImage(columns, rows);\n    for (int c = 0; c < columns; c++) {\n      for (int r = 0; r < rows; r++) {\n        PngHelper.writeCountAtColumnRow(image, rows, c, r, counts[c * rows + r]);\n      }\n    }\n    byte[] bytes = PngHelper.writeImage(image);\n    long durationMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTimeNano);\n    log.debug(\"heatmap nativeSize={} pngSize={} pngTime={}\", (counts.length * 4), bytes.length, durationMs);\n    if (debugInfo != null) {\n      debugInfo.putInfoItem(\"heatmap png timing\", durationMs);\n    }\n    return bytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap#asPngBytes(int,int,int[],FacetDebugInfo).mjava","pathOld":"/dev/null","sourceNew":"  @VisibleForTesting\n  static byte[] asPngBytes(final int columns, final int rows, final int[] counts, FacetDebugInfo debugInfo) {\n    long startTimeNano = System.nanoTime();\n    BufferedImage image = PngHelper.newImage(columns, rows);\n    for (int c = 0; c < columns; c++) {\n      for (int r = 0; r < rows; r++) {\n        PngHelper.writeCountAtColumnRow(image, rows, c, r, counts[c * rows + r]);\n      }\n    }\n    byte[] bytes = PngHelper.writeImage(image);\n    long durationMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTimeNano);\n    log.debug(\"heatmap nativeSize={} pngSize={} pngTime={}\", (counts.length * 4), bytes.length, durationMs);\n    if (debugInfo != null) {\n      debugInfo.putInfoItem(\"heatmap png timing\", durationMs);\n    }\n    return bytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap#asPngBytes(int,int,int[],FacetDebugInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetHeatmap#asPngBytes(int,int,int[],FacetDebugInfo).mjava","sourceNew":"  @VisibleForTesting\n  static byte[] asPngBytes(final int columns, final int rows, final int[] counts, FacetDebugInfo debugInfo) {\n    long startTimeNano = System.nanoTime();\n    BufferedImage image = PngHelper.newImage(columns, rows);\n    for (int c = 0; c < columns; c++) {\n      for (int r = 0; r < rows; r++) {\n        PngHelper.writeCountAtColumnRow(image, rows, c, r, counts[c * rows + r]);\n      }\n    }\n    byte[] bytes = PngHelper.writeImage(image);\n    long durationMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTimeNano);\n    if (log.isDebugEnabled()) {\n      log.debug(\"heatmap nativeSize={} pngSize={} pngTime={}\", (counts.length * 4), bytes.length, durationMs);\n    }\n    if (debugInfo != null) {\n      debugInfo.putInfoItem(\"heatmap png timing\", durationMs);\n    }\n    return bytes;\n  }\n\n","sourceOld":"  @VisibleForTesting\n  static byte[] asPngBytes(final int columns, final int rows, final int[] counts, FacetDebugInfo debugInfo) {\n    long startTimeNano = System.nanoTime();\n    BufferedImage image = PngHelper.newImage(columns, rows);\n    for (int c = 0; c < columns; c++) {\n      for (int r = 0; r < rows; r++) {\n        PngHelper.writeCountAtColumnRow(image, rows, c, r, counts[c * rows + r]);\n      }\n    }\n    byte[] bytes = PngHelper.writeImage(image);\n    long durationMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTimeNano);\n    log.debug(\"heatmap nativeSize={} pngSize={} pngTime={}\", (counts.length * 4), bytes.length, durationMs);\n    if (debugInfo != null) {\n      debugInfo.putInfoItem(\"heatmap png timing\", durationMs);\n    }\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ab027bdfe663227636ccbeda13ae82add302939":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["2ab027bdfe663227636ccbeda13ae82add302939"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ab027bdfe663227636ccbeda13ae82add302939"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ab027bdfe663227636ccbeda13ae82add302939"]},"commit2Childs":{"2ab027bdfe663227636ccbeda13ae82add302939":["54faedfb0e03479a38f5ee82f2dfaeea536e9404","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ab027bdfe663227636ccbeda13ae82add302939","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}