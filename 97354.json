{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","commits":[{"id":"1e89ac7460543b39f8de96654421e96790abaa26","date":1239329386,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setConstantScoreRewrite(true);\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME, (CachingTokenFilter) tokenStream, true);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e88427698ce39ca16c9ecc0ab9c414209ea98e04","date":1241304386,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","sourceNew":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setConstantScoreRewrite(true);\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME, (CachingTokenFilter) tokenStream, true);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new SpanScorer(query, null, (CachingTokenFilter) tokenStream, true);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new SpanScorer(query, \"random_field\", (CachingTokenFilter) tokenStream, HighlighterTest.FIELD_NAME, true);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setConstantScoreRewrite(true);\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME, (CachingTokenFilter) tokenStream, true);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","sourceNew":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME, (CachingTokenFilter) tokenStream, true);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new SpanScorer(query, null, (CachingTokenFilter) tokenStream, true);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new SpanScorer(query, \"random_field\", (CachingTokenFilter) tokenStream, HighlighterTest.FIELD_NAME, true);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setConstantScoreRewrite(true);\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME, (CachingTokenFilter) tokenStream, true);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new SpanScorer(query, null, (CachingTokenFilter) tokenStream, true);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new SpanScorer(query, \"random_field\", (CachingTokenFilter) tokenStream, HighlighterTest.FIELD_NAME, true);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","sourceNew":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME, (CachingTokenFilter) tokenStream, true);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new SpanScorer(query, null, (CachingTokenFilter) tokenStream, true);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      SpanScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new SpanScorer(query, \"random_field\", (CachingTokenFilter) tokenStream, HighlighterTest.FIELD_NAME, true);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      ((CachingTokenFilter) tokenStream).reset();\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c16ba100a31d292b7b4c893a3cdf1994e75a3201","date":1249608645,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","sourceNew":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,\n          new StringReader(text)));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","sourceNew":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","sourceNew":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query);\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","sourceNew":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testConstantScoreMultiTermQuery().mjava","sourceNew":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","sourceOld":"  public void testConstantScoreMultiTermQuery() throws Exception {\n\n    numHighlights = 0;\n\n    query = new WildcardQuery(new Term(FIELD_NAME, \"ken*\"));\n    ((WildcardQuery)query).setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n    searcher = new IndexSearcher(ramDir, true);\n    // can't rewrite ConstantScore if you want to highlight it -\n    // it rewrites to ConstantScoreQuery which cannot be highlighted\n    // query = unReWrittenQuery.rewrite(reader);\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    hits = searcher.search(query, null, 1000);\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try null field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, null);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n    \n    // try default field\n    \n    hits = searcher.search(query, null, 1000);\n    \n    numHighlights = 0;\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = searcher.doc(hits.scoreDocs[i].doc).get(HighlighterTest.FIELD_NAME);\n      int maxNumFragmentsRequired = 2;\n      String fragmentSeparator = \"...\";\n      QueryScorer scorer = null;\n      TokenStream tokenStream = null;\n\n      tokenStream = analyzer.tokenStream(HighlighterTest.FIELD_NAME, new StringReader(text));\n      \n      scorer = new QueryScorer(query, \"random_field\", HighlighterTest.FIELD_NAME);\n\n      Highlighter highlighter = new Highlighter(this, scorer);\n\n      highlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          fragmentSeparator);\n      if (VERBOSE) System.out.println(\"\\t\" + result);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c16ba100a31d292b7b4c893a3cdf1994e75a3201":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"e88427698ce39ca16c9ecc0ab9c414209ea98e04":["1e89ac7460543b39f8de96654421e96790abaa26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["e88427698ce39ca16c9ecc0ab9c414209ea98e04"],"1e89ac7460543b39f8de96654421e96790abaa26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["4256bc1b3c94786287ccdfc751230374521843cf"],"4256bc1b3c94786287ccdfc751230374521843cf":["c16ba100a31d292b7b4c893a3cdf1994e75a3201"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"c16ba100a31d292b7b4c893a3cdf1994e75a3201":["4256bc1b3c94786287ccdfc751230374521843cf"],"e88427698ce39ca16c9ecc0ab9c414209ea98e04":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e89ac7460543b39f8de96654421e96790abaa26"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"1e89ac7460543b39f8de96654421e96790abaa26":["e88427698ce39ca16c9ecc0ab9c414209ea98e04"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["c16ba100a31d292b7b4c893a3cdf1994e75a3201"],"4256bc1b3c94786287ccdfc751230374521843cf":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}