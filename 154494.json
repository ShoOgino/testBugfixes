{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestSort().mjava","commits":[{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestSort().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSort() {\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(1, bytesPerDim, maxDoc);\n    DummyPointsReader reader = new DummyPointsReader(points);\n    MutablePointsReaderUtils.sort(maxDoc, bytesPerDim, reader, 0, points.length);\n    Arrays.sort(points, new Comparator<Point>() {\n      @Override\n      public int compare(Point o1, Point o2) {\n        int cmp = StringHelper.compare(bytesPerDim, o1.packedValue, 0, o2.packedValue, 0);\n        if (cmp == 0) {\n          cmp = Integer.compare(o1.doc, o2.doc);\n        }\n        return cmp;\n      }\n    });\n    assertNotSame(points, reader.points);\n    assertArrayEquals(points, reader.points);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a20457919db052812998f60294d17daa883ff972","date":1470227748,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestSort().mjava","sourceNew":"  private void doTestSort() {\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(1, bytesPerDim, maxDoc);\n    DummyPointsReader reader = new DummyPointsReader(points);\n    MutablePointsReaderUtils.sort(maxDoc, bytesPerDim, reader, 0, points.length);\n    Arrays.sort(points, new Comparator<Point>() {\n      @Override\n      public int compare(Point o1, Point o2) {\n        int cmp = o1.packedValue.compareTo(o2.packedValue);\n        if (cmp == 0) {\n          cmp = Integer.compare(o1.doc, o2.doc);\n        }\n        return cmp;\n      }\n    });\n    assertNotSame(points, reader.points);\n    assertArrayEquals(points, reader.points);\n  }\n\n","sourceOld":"  private void doTestSort() {\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(1, bytesPerDim, maxDoc);\n    DummyPointsReader reader = new DummyPointsReader(points);\n    MutablePointsReaderUtils.sort(maxDoc, bytesPerDim, reader, 0, points.length);\n    Arrays.sort(points, new Comparator<Point>() {\n      @Override\n      public int compare(Point o1, Point o2) {\n        int cmp = StringHelper.compare(bytesPerDim, o1.packedValue, 0, o2.packedValue, 0);\n        if (cmp == 0) {\n          cmp = Integer.compare(o1.doc, o2.doc);\n        }\n        return cmp;\n      }\n    });\n    assertNotSame(points, reader.points);\n    assertArrayEquals(points, reader.points);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestSort().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSort() {\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(1, bytesPerDim, maxDoc);\n    DummyPointsReader reader = new DummyPointsReader(points);\n    MutablePointsReaderUtils.sort(maxDoc, bytesPerDim, reader, 0, points.length);\n    Arrays.sort(points, new Comparator<Point>() {\n      @Override\n      public int compare(Point o1, Point o2) {\n        int cmp = o1.packedValue.compareTo(o2.packedValue);\n        if (cmp == 0) {\n          cmp = Integer.compare(o1.doc, o2.doc);\n        }\n        return cmp;\n      }\n    });\n    assertNotSame(points, reader.points);\n    assertArrayEquals(points, reader.points);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestSort().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSort() {\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(1, bytesPerDim, maxDoc);\n    DummyPointsReader reader = new DummyPointsReader(points);\n    MutablePointsReaderUtils.sort(maxDoc, bytesPerDim, reader, 0, points.length);\n    Arrays.sort(points, new Comparator<Point>() {\n      @Override\n      public int compare(Point o1, Point o2) {\n        int cmp = o1.packedValue.compareTo(o2.packedValue);\n        if (cmp == 0) {\n          cmp = Integer.compare(o1.doc, o2.doc);\n        }\n        return cmp;\n      }\n    });\n    assertNotSame(points, reader.points);\n    assertArrayEquals(points, reader.points);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f06758793500ca773d0df1037290e6e404fb33","date":1562230223,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestSort().mjava","sourceNew":"  private void doTestSort() {\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(1, 1, bytesPerDim, maxDoc, new int[1]);\n    DummyPointsReader reader = new DummyPointsReader(points);\n    MutablePointsReaderUtils.sort(maxDoc, bytesPerDim, reader, 0, points.length);\n    Arrays.sort(points, new Comparator<Point>() {\n      @Override\n      public int compare(Point o1, Point o2) {\n        int cmp = o1.packedValue.compareTo(o2.packedValue);\n        if (cmp == 0) {\n          cmp = Integer.compare(o1.doc, o2.doc);\n        }\n        return cmp;\n      }\n    });\n    assertNotSame(points, reader.points);\n    assertArrayEquals(points, reader.points);\n  }\n\n","sourceOld":"  private void doTestSort() {\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(1, bytesPerDim, maxDoc);\n    DummyPointsReader reader = new DummyPointsReader(points);\n    MutablePointsReaderUtils.sort(maxDoc, bytesPerDim, reader, 0, points.length);\n    Arrays.sort(points, new Comparator<Point>() {\n      @Override\n      public int compare(Point o1, Point o2) {\n        int cmp = o1.packedValue.compareTo(o2.packedValue);\n        if (cmp == 0) {\n          cmp = Integer.compare(o1.doc, o2.doc);\n        }\n        return cmp;\n      }\n    });\n    assertNotSame(points, reader.points);\n    assertArrayEquals(points, reader.points);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#doTestSort().mjava","sourceNew":"  private void doTestSort() {\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    BKDConfig config = new BKDConfig(1, 1, bytesPerDim, BKDConfig.DEFAULT_MAX_POINTS_IN_LEAF_NODE);\n    Point[] points = createRandomPoints(config, maxDoc, new int[1]);\n    DummyPointsReader reader = new DummyPointsReader(points);\n    MutablePointsReaderUtils.sort(config, maxDoc, reader, 0, points.length);\n    Arrays.sort(points, new Comparator<Point>() {\n      @Override\n      public int compare(Point o1, Point o2) {\n        int cmp = o1.packedValue.compareTo(o2.packedValue);\n        if (cmp == 0) {\n          cmp = Integer.compare(o1.doc, o2.doc);\n        }\n        return cmp;\n      }\n    });\n    assertNotSame(points, reader.points);\n    assertArrayEquals(points, reader.points);\n  }\n\n","sourceOld":"  private void doTestSort() {\n    final int bytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    final int maxDoc = TestUtil.nextInt(random(), 1, 1 << random().nextInt(30));\n    Point[] points = createRandomPoints(1, 1, bytesPerDim, maxDoc, new int[1]);\n    DummyPointsReader reader = new DummyPointsReader(points);\n    MutablePointsReaderUtils.sort(maxDoc, bytesPerDim, reader, 0, points.length);\n    Arrays.sort(points, new Comparator<Point>() {\n      @Override\n      public int compare(Point o1, Point o2) {\n        int cmp = o1.packedValue.compareTo(o2.packedValue);\n        if (cmp == 0) {\n          cmp = Integer.compare(o1.doc, o2.doc);\n        }\n        return cmp;\n      }\n    });\n    assertNotSame(points, reader.points);\n    assertArrayEquals(points, reader.points);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7f06758793500ca773d0df1037290e6e404fb33":["a20457919db052812998f60294d17daa883ff972"],"a20457919db052812998f60294d17daa883ff972":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["c7f06758793500ca773d0df1037290e6e404fb33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a20457919db052812998f60294d17daa883ff972"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a20457919db052812998f60294d17daa883ff972"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"c7f06758793500ca773d0df1037290e6e404fb33":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"a20457919db052812998f60294d17daa883ff972":["c7f06758793500ca773d0df1037290e6e404fb33","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a20457919db052812998f60294d17daa883ff972"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}