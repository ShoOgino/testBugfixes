{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#atomicUpdate(String,Function[byte[],byte[]]).mjava","commits":[{"id":"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444","date":1527778252,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#atomicUpdate(String,Function[byte[],byte[]]).mjava","pathOld":"/dev/null","sourceNew":"  public void atomicUpdate(String path, Function<byte[], byte[]> editor) throws KeeperException, InterruptedException {\n    for (; ; ) {\n      byte[] modified = null;\n      byte[] zkData = null;\n      Stat s = new Stat();\n      try {\n        if (exists(path, true)) {\n          zkData = getData(path, null, s, true);\n          modified = editor.apply(zkData);\n          if (modified == null) {\n            //no change , no need to persist\n            return;\n          }\n          setData(path, modified, s.getVersion(), true);\n          break;\n        } else {\n          modified = editor.apply(null);\n          if (modified == null) {\n            //no change , no need to persist\n            return;\n          }\n          create(path, modified, CreateMode.PERSISTENT, true);\n          break;\n        }\n      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {\n        continue;\n      }\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#atomicUpdate(String,Function[byte[],byte[]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#atomicUpdate(String,Function[byte[],byte[]]).mjava","sourceNew":"  public void atomicUpdate(String path, Function<byte[], byte[]> editor) throws KeeperException, InterruptedException {\n   atomicUpdate(path, (stat, bytes) -> editor.apply(bytes));\n  }\n\n","sourceOld":"  public void atomicUpdate(String path, Function<byte[], byte[]> editor) throws KeeperException, InterruptedException {\n    for (; ; ) {\n      byte[] modified = null;\n      byte[] zkData = null;\n      Stat s = new Stat();\n      try {\n        if (exists(path, true)) {\n          zkData = getData(path, null, s, true);\n          modified = editor.apply(zkData);\n          if (modified == null) {\n            //no change , no need to persist\n            return;\n          }\n          setData(path, modified, s.getVersion(), true);\n          break;\n        } else {\n          modified = editor.apply(null);\n          if (modified == null) {\n            //no change , no need to persist\n            return;\n          }\n          create(path, modified, CreateMode.PERSISTENT, true);\n          break;\n        }\n      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {\n        continue;\n      }\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"954ae83b7dfacaa33d48ea056448ae11f7745a93":["9fa9cb6b109951110cc6d6a6a79c22ad6ee88444"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"954ae83b7dfacaa33d48ea056448ae11f7745a93":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fa9cb6b109951110cc6d6a6a79c22ad6ee88444"],"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}