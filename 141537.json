{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","commits":[{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnAbortOrFlush#eval(MockRAMDirectory).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"flushDocument\".equals(trace[i].getMethodName())) {\n            if (onlyOnce)\n              doFail = false;\n            //System.out.println(Thread.currentThread().getName() + \": now fail\");\n            //new Throwable().printStackTrace(System.out);\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"flushDocument\".equals(trace[i].getMethodName())) {\n            if (onlyOnce)\n              doFail = false;\n            //System.out.println(Thread.currentThread().getName() + \": now fail\");\n            //new Throwable().printStackTrace(System.out);\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84b590669deb3d3a471cec6cb13b104b2ee94418","date":1288889547,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"flushDocument\".equals(trace[i].getMethodName())) {\n            if (onlyOnce)\n              doFail = false;\n            //System.out.println(Thread.currentThread().getName() + \": now fail\");\n            //new Throwable().printStackTrace(System.out);\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"flushDocument\".equals(trace[i].getMethodName())) {\n            if (onlyOnce)\n              doFail = false;\n            //System.out.println(Thread.currentThread().getName() + \": now fail\");\n            //new Throwable().printStackTrace(System.out);\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnAbortOrFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"flushDocument\".equals(trace[i].getMethodName())) {\n            if (onlyOnce)\n              doFail = false;\n            //System.out.println(Thread.currentThread().getName() + \": now fail\");\n            //new Throwable().printStackTrace(System.out);\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"abort\".equals(trace[i].getMethodName()) ||\n              \"flushDocument\".equals(trace[i].getMethodName())) {\n            if (onlyOnce)\n              doFail = false;\n            //System.out.println(Thread.currentThread().getName() + \": now fail\");\n            //new Throwable().printStackTrace(System.out);\n            throw new IOException(\"now failing on purpose\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"84b590669deb3d3a471cec6cb13b104b2ee94418":["a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a05409176bd65129d67a785ee70e881e238a9aef","84b590669deb3d3a471cec6cb13b104b2ee94418"],"a05409176bd65129d67a785ee70e881e238a9aef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["84b590669deb3d3a471cec6cb13b104b2ee94418"]},"commit2Childs":{"84b590669deb3d3a471cec6cb13b104b2ee94418":["85a883878c0af761245ab048babc63d099f835f3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a05409176bd65129d67a785ee70e881e238a9aef"],"85a883878c0af761245ab048babc63d099f835f3":[],"a05409176bd65129d67a785ee70e881e238a9aef":["84b590669deb3d3a471cec6cb13b104b2ee94418","85a883878c0af761245ab048babc63d099f835f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}