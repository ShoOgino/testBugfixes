{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#internalAddCategory(FacetLabel).mjava","commits":[{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#internalAddCategory(FacetLabel).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#internalAddCategory(CategoryPath).mjava","sourceNew":"  /**\n   * Add a new category into the index (and the cache), and return its new\n   * ordinal.\n   * <p>\n   * Actually, we might also need to add some of the category's ancestors\n   * before we can add the category itself (while keeping the invariant that a\n   * parent is always added to the taxonomy before its child). We do this by\n   * recursion.\n   */\n  private int internalAddCategory(FacetLabel cp) throws IOException {\n    // Find our parent's ordinal (recursively adding the parent category\n    // to the taxonomy if it's not already there). Then add the parent\n    // ordinal as payloads (rather than a stored field; payloads can be\n    // more efficiently read into memory in bulk by LuceneTaxonomyReader)\n    int parent;\n    if (cp.length > 1) {\n      FacetLabel parentPath = cp.subpath(cp.length - 1);\n      parent = findCategory(parentPath);\n      if (parent < 0) {\n        parent = internalAddCategory(parentPath);\n      }\n    } else if (cp.length == 1) {\n      parent = TaxonomyReader.ROOT_ORDINAL;\n    } else {\n      parent = TaxonomyReader.INVALID_ORDINAL;\n    }\n    int id = addCategoryDocument(cp, parent);\n\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Add a new category into the index (and the cache), and return its new\n   * ordinal.\n   * <p>\n   * Actually, we might also need to add some of the category's ancestors\n   * before we can add the category itself (while keeping the invariant that a\n   * parent is always added to the taxonomy before its child). We do this by\n   * recursion.\n   */\n  private int internalAddCategory(CategoryPath cp) throws IOException {\n    // Find our parent's ordinal (recursively adding the parent category\n    // to the taxonomy if it's not already there). Then add the parent\n    // ordinal as payloads (rather than a stored field; payloads can be\n    // more efficiently read into memory in bulk by LuceneTaxonomyReader)\n    int parent;\n    if (cp.length > 1) {\n      CategoryPath parentPath = cp.subpath(cp.length - 1);\n      parent = findCategory(parentPath);\n      if (parent < 0) {\n        parent = internalAddCategory(parentPath);\n      }\n    } else if (cp.length == 1) {\n      parent = TaxonomyReader.ROOT_ORDINAL;\n    } else {\n      parent = TaxonomyReader.INVALID_ORDINAL;\n    }\n    int id = addCategoryDocument(cp, parent);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#internalAddCategory(FacetLabel).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a new category into the index (and the cache), and return its new\n   * ordinal.\n   * <p>\n   * Actually, we might also need to add some of the category's ancestors\n   * before we can add the category itself (while keeping the invariant that a\n   * parent is always added to the taxonomy before its child). We do this by\n   * recursion.\n   */\n  private int internalAddCategory(FacetLabel cp) throws IOException {\n    // Find our parent's ordinal (recursively adding the parent category\n    // to the taxonomy if it's not already there). Then add the parent\n    // ordinal as payloads (rather than a stored field; payloads can be\n    // more efficiently read into memory in bulk by LuceneTaxonomyReader)\n    int parent;\n    if (cp.length > 1) {\n      FacetLabel parentPath = cp.subpath(cp.length - 1);\n      parent = findCategory(parentPath);\n      if (parent < 0) {\n        parent = internalAddCategory(parentPath);\n      }\n    } else if (cp.length == 1) {\n      parent = TaxonomyReader.ROOT_ORDINAL;\n    } else {\n      parent = TaxonomyReader.INVALID_ORDINAL;\n    }\n    int id = addCategoryDocument(cp, parent);\n\n    return id;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}