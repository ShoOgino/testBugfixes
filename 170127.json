{"path":"lucene/src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean,int).mjava","commits":[{"id":"ab0e9f7ce724e6aea1fea746dded19e76d231cf8","date":1304774078,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean).mjava","sourceNew":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private int addFieldSize(Document doc, FieldInfo fi, boolean binary, int numeric) throws IOException {\n    final int bytesize, size;\n    switch(numeric) {\n      case 0:\n        size = fieldsStream.readVInt();\n        bytesize = binary ? size : 2*size;\n        break;\n      case FieldsWriter.FIELD_IS_NUMERIC_INT:\n      case FieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n        size = bytesize = 4;\n        break;\n      case FieldsWriter.FIELD_IS_NUMERIC_LONG:\n      case FieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n        size = bytesize = 8;\n        break;\n      default:\n        throw new FieldReaderException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n    }\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (bytesize>>>24);\n    sizebytes[1] = (byte) (bytesize>>>16);\n    sizebytes[2] = (byte) (bytesize>>> 8);\n    sizebytes[3] = (byte)  bytesize      ;\n    doc.add(new Field(fi.name, sizebytes));\n    return size;\n  }\n\n","sourceOld":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private int addFieldSize(Document doc, FieldInfo fi, boolean binary) throws IOException {\n    int size = fieldsStream.readVInt(), bytesize = binary ? size : 2*size;\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (bytesize>>>24);\n    sizebytes[1] = (byte) (bytesize>>>16);\n    sizebytes[2] = (byte) (bytesize>>> 8);\n    sizebytes[3] = (byte)  bytesize      ;\n    doc.add(new Field(fi.name, sizebytes));\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean).mjava","sourceNew":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private int addFieldSize(Document doc, FieldInfo fi, boolean binary, int numeric) throws IOException {\n    final int bytesize, size;\n    switch(numeric) {\n      case 0:\n        size = fieldsStream.readVInt();\n        bytesize = binary ? size : 2*size;\n        break;\n      case FieldsWriter.FIELD_IS_NUMERIC_INT:\n      case FieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n        size = bytesize = 4;\n        break;\n      case FieldsWriter.FIELD_IS_NUMERIC_LONG:\n      case FieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n        size = bytesize = 8;\n        break;\n      default:\n        throw new FieldReaderException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n    }\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (bytesize>>>24);\n    sizebytes[1] = (byte) (bytesize>>>16);\n    sizebytes[2] = (byte) (bytesize>>> 8);\n    sizebytes[3] = (byte)  bytesize      ;\n    doc.add(new Field(fi.name, sizebytes));\n    return size;\n  }\n\n","sourceOld":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private int addFieldSize(Document doc, FieldInfo fi, boolean binary) throws IOException {\n    int size = fieldsStream.readVInt(), bytesize = binary ? size : 2*size;\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (bytesize>>>24);\n    sizebytes[1] = (byte) (bytesize>>>16);\n    sizebytes[2] = (byte) (bytesize>>> 8);\n    sizebytes[3] = (byte)  bytesize      ;\n    doc.add(new Field(fi.name, sizebytes));\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private int addFieldSize(Document doc, FieldInfo fi, boolean binary, int numeric) throws IOException {\n    final int bytesize, size;\n    switch(numeric) {\n      case 0:\n        size = fieldsStream.readVInt();\n        bytesize = binary ? size : 2*size;\n        break;\n      case FieldsWriter.FIELD_IS_NUMERIC_INT:\n      case FieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n        size = bytesize = 4;\n        break;\n      case FieldsWriter.FIELD_IS_NUMERIC_LONG:\n      case FieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n        size = bytesize = 8;\n        break;\n      default:\n        throw new FieldReaderException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n    }\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (bytesize>>>24);\n    sizebytes[1] = (byte) (bytesize>>>16);\n    sizebytes[2] = (byte) (bytesize>>> 8);\n    sizebytes[3] = (byte)  bytesize      ;\n    doc.add(new Field(fi.name, sizebytes));\n    return size;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#addFieldSize(Document,FieldInfo,boolean,int).mjava","sourceNew":null,"sourceOld":"  // Add the size of field as a byte[] containing the 4 bytes of the integer byte size (high order byte first; char = 2 bytes)\n  // Read just the size -- caller must skip the field content to continue reading fields\n  // Return the size in bytes or chars, depending on field type\n  private int addFieldSize(Document doc, FieldInfo fi, boolean binary, int numeric) throws IOException {\n    final int bytesize, size;\n    switch(numeric) {\n      case 0:\n        size = fieldsStream.readVInt();\n        bytesize = binary ? size : 2*size;\n        break;\n      case FieldsWriter.FIELD_IS_NUMERIC_INT:\n      case FieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n        size = bytesize = 4;\n        break;\n      case FieldsWriter.FIELD_IS_NUMERIC_LONG:\n      case FieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n        size = bytesize = 8;\n        break;\n      default:\n        throw new FieldReaderException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n    }\n    byte[] sizebytes = new byte[4];\n    sizebytes[0] = (byte) (bytesize>>>24);\n    sizebytes[1] = (byte) (bytesize>>>16);\n    sizebytes[2] = (byte) (bytesize>>> 8);\n    sizebytes[3] = (byte)  bytesize      ;\n    doc.add(new Field(fi.name, sizebytes));\n    return size;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"]},"commit2Childs":{"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}