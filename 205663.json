{"path":"lucene/core/src/java/org/apache/lucene/index/Fields#getUniqueTermCount().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Fields#getUniqueTermCount().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Fields#getUniqueTermCount().mjava","sourceNew":"  /** Returns the number of terms for all fields, or -1 if this \n   *  measure isn't stored by the codec. Note that, just like \n   *  other term measures, this measure does not take deleted \n   *  documents into account. */\n  // TODO: deprecate?\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    FieldsEnum it = iterator();\n    while(true) {\n      String field = it.next();\n      if (field == null) {\n        break;\n      }\n      Terms terms = terms(field);\n      if (terms != null) {\n        final long termCount = terms.getUniqueTermCount();\n        if (termCount == -1) {\n          return -1;\n        }\n          \n        numTerms += termCount;\n      }\n    }\n    return numTerms;\n  }\n\n","sourceOld":"  /** Returns the number of terms for all fields, or -1 if this \n   *  measure isn't stored by the codec. Note that, just like \n   *  other term measures, this measure does not take deleted \n   *  documents into account. */\n  // TODO: deprecate?\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    FieldsEnum it = iterator();\n    while(true) {\n      String field = it.next();\n      if (field == null) {\n        break;\n      }\n      Terms terms = terms(field);\n      if (terms != null) {\n        final long termCount = terms.getUniqueTermCount();\n        if (termCount == -1) {\n          return -1;\n        }\n          \n        numTerms += termCount;\n      }\n    }\n    return numTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/InvertedFields#getUniqueTermCount().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Fields#getUniqueTermCount().mjava","sourceNew":"  /** Returns the number of terms for all fields, or -1 if this \n   *  measure isn't stored by the codec. Note that, just like \n   *  other term measures, this measure does not take deleted \n   *  documents into account. */\n  // TODO: deprecate?\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    FieldsEnum it = iterator();\n    while(true) {\n      String field = it.next();\n      if (field == null) {\n        break;\n      }\n      Terms terms = terms(field);\n      if (terms != null) {\n        final long termCount = terms.getUniqueTermCount();\n        if (termCount == -1) {\n          return -1;\n        }\n          \n        numTerms += termCount;\n      }\n    }\n    return numTerms;\n  }\n\n","sourceOld":"  /** Returns the number of terms for all fields, or -1 if this \n   *  measure isn't stored by the codec. Note that, just like \n   *  other term measures, this measure does not take deleted \n   *  documents into account. */\n  // TODO: deprecate?\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    FieldsEnum it = iterator();\n    while(true) {\n      String field = it.next();\n      if (field == null) {\n        break;\n      }\n      Terms terms = terms(field);\n      if (terms != null) {\n        final long termCount = terms.getUniqueTermCount();\n        if (termCount == -1) {\n          return -1;\n        }\n          \n        numTerms += termCount;\n      }\n    }\n    return numTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Fields#getUniqueTermCount().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/InvertedFields#getUniqueTermCount().mjava","sourceNew":"  /** Returns the number of terms for all fields, or -1 if this \n   *  measure isn't stored by the codec. Note that, just like \n   *  other term measures, this measure does not take deleted \n   *  documents into account. */\n  // TODO: deprecate?\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    FieldsEnum it = iterator();\n    while(true) {\n      String field = it.next();\n      if (field == null) {\n        break;\n      }\n      Terms terms = terms(field);\n      if (terms != null) {\n        final long termCount = terms.getUniqueTermCount();\n        if (termCount == -1) {\n          return -1;\n        }\n          \n        numTerms += termCount;\n      }\n    }\n    return numTerms;\n  }\n\n","sourceOld":"  /** Returns the number of terms for all fields, or -1 if this \n   *  measure isn't stored by the codec. Note that, just like \n   *  other term measures, this measure does not take deleted \n   *  documents into account. */\n  // TODO: deprecate?\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    FieldsEnum it = iterator();\n    while(true) {\n      String field = it.next();\n      if (field == null) {\n        break;\n      }\n      Terms terms = terms(field);\n      if (terms != null) {\n        final long termCount = terms.getUniqueTermCount();\n        if (termCount == -1) {\n          return -1;\n        }\n          \n        numTerms += termCount;\n      }\n    }\n    return numTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdb5e42b0cecd8dfb27767a02ada71899bf17917","date":1334100099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Fields#getUniqueTermCount().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Fields#getUniqueTermCount().mjava","sourceNew":"  /** Returns the number of terms for all fields, or -1 if this \n   *  measure isn't stored by the codec. Note that, just like \n   *  other term measures, this measure does not take deleted \n   *  documents into account. */\n  // TODO: deprecate?\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    FieldsEnum it = iterator();\n    while(true) {\n      String field = it.next();\n      if (field == null) {\n        break;\n      }\n      Terms terms = terms(field);\n      if (terms != null) {\n        final long termCount = terms.size();\n        if (termCount == -1) {\n          return -1;\n        }\n          \n        numTerms += termCount;\n      }\n    }\n    return numTerms;\n  }\n\n","sourceOld":"  /** Returns the number of terms for all fields, or -1 if this \n   *  measure isn't stored by the codec. Note that, just like \n   *  other term measures, this measure does not take deleted \n   *  documents into account. */\n  // TODO: deprecate?\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    FieldsEnum it = iterator();\n    while(true) {\n      String field = it.next();\n      if (field == null) {\n        break;\n      }\n      Terms terms = terms(field);\n      if (terms != null) {\n        final long termCount = terms.getUniqueTermCount();\n        if (termCount == -1) {\n          return -1;\n        }\n          \n        numTerms += termCount;\n      }\n    }\n    return numTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Fields#getUniqueTermCount().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Fields#getUniqueTermCount().mjava","sourceNew":"  /** Returns the number of terms for all fields, or -1 if this \n   *  measure isn't stored by the codec. Note that, just like \n   *  other term measures, this measure does not take deleted \n   *  documents into account. */\n  // TODO: deprecate?\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    FieldsEnum it = iterator();\n    while(true) {\n      String field = it.next();\n      if (field == null) {\n        break;\n      }\n      Terms terms = terms(field);\n      if (terms != null) {\n        final long termCount = terms.size();\n        if (termCount == -1) {\n          return -1;\n        }\n          \n        numTerms += termCount;\n      }\n    }\n    return numTerms;\n  }\n\n","sourceOld":"  /** Returns the number of terms for all fields, or -1 if this \n   *  measure isn't stored by the codec. Note that, just like \n   *  other term measures, this measure does not take deleted \n   *  documents into account. */\n  // TODO: deprecate?\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    FieldsEnum it = iterator();\n    while(true) {\n      String field = it.next();\n      if (field == null) {\n        break;\n      }\n      Terms terms = terms(field);\n      if (terms != null) {\n        final long termCount = terms.getUniqueTermCount();\n        if (termCount == -1) {\n          return -1;\n        }\n          \n        numTerms += termCount;\n      }\n    }\n    return numTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Fields#getUniqueTermCount().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Fields#getUniqueTermCount().mjava","sourceNew":"  /** Returns the number of terms for all fields, or -1 if this \n   *  measure isn't stored by the codec. Note that, just like \n   *  other term measures, this measure does not take deleted \n   *  documents into account. */\n  // TODO: deprecate?\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    for (String field : this) {\n      Terms terms = terms(field);\n      if (terms != null) {\n        final long termCount = terms.size();\n        if (termCount == -1) {\n          return -1;\n        }\n          \n        numTerms += termCount;\n      }\n    }\n    return numTerms;\n  }\n\n","sourceOld":"  /** Returns the number of terms for all fields, or -1 if this \n   *  measure isn't stored by the codec. Note that, just like \n   *  other term measures, this measure does not take deleted \n   *  documents into account. */\n  // TODO: deprecate?\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    FieldsEnum it = iterator();\n    while(true) {\n      String field = it.next();\n      if (field == null) {\n        break;\n      }\n      Terms terms = terms(field);\n      if (terms != null) {\n        final long termCount = terms.size();\n        if (termCount == -1) {\n          return -1;\n        }\n          \n        numTerms += termCount;\n      }\n    }\n    return numTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Fields#getUniqueTermCount().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Fields#getUniqueTermCount().mjava","sourceNew":"  /** Returns the number of terms for all fields, or -1 if this \n   *  measure isn't stored by the codec. Note that, just like \n   *  other term measures, this measure does not take deleted \n   *  documents into account. */\n  // TODO: deprecate?\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    for (String field : this) {\n      Terms terms = terms(field);\n      if (terms != null) {\n        final long termCount = terms.size();\n        if (termCount == -1) {\n          return -1;\n        }\n          \n        numTerms += termCount;\n      }\n    }\n    return numTerms;\n  }\n\n","sourceOld":"  /** Returns the number of terms for all fields, or -1 if this \n   *  measure isn't stored by the codec. Note that, just like \n   *  other term measures, this measure does not take deleted \n   *  documents into account. */\n  // TODO: deprecate?\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    FieldsEnum it = iterator();\n    while(true) {\n      String field = it.next();\n      if (field == null) {\n        break;\n      }\n      Terms terms = terms(field);\n      if (terms != null) {\n        final long termCount = terms.size();\n        if (termCount == -1) {\n          return -1;\n        }\n          \n        numTerms += termCount;\n      }\n    }\n    return numTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Fields#getUniqueTermCount().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Fields#getUniqueTermCount().mjava","sourceNew":"  /** Returns the number of terms for all fields, or -1 if this \n   *  measure isn't stored by the codec. Note that, just like \n   *  other term measures, this measure does not take deleted \n   *  documents into account. */\n  // TODO: deprecate?\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    for (String field : this) {\n      Terms terms = terms(field);\n      if (terms != null) {\n        final long termCount = terms.size();\n        if (termCount == -1) {\n          return -1;\n        }\n          \n        numTerms += termCount;\n      }\n    }\n    return numTerms;\n  }\n\n","sourceOld":"  /** Returns the number of terms for all fields, or -1 if this \n   *  measure isn't stored by the codec. Note that, just like \n   *  other term measures, this measure does not take deleted \n   *  documents into account. */\n  // TODO: deprecate?\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    FieldsEnum it = iterator();\n    while(true) {\n      String field = it.next();\n      if (field == null) {\n        break;\n      }\n      Terms terms = terms(field);\n      if (terms != null) {\n        final long termCount = terms.size();\n        if (termCount == -1) {\n          return -1;\n        }\n          \n        numTerms += termCount;\n      }\n    }\n    return numTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca5f6409bcf8211cae1732125479d212adb0acac","date":1345559953,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/Fields#getUniqueTermCount().mjava","sourceNew":null,"sourceOld":"  /** Returns the number of terms for all fields, or -1 if this \n   *  measure isn't stored by the codec. Note that, just like \n   *  other term measures, this measure does not take deleted \n   *  documents into account. */\n  // TODO: deprecate?\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    for (String field : this) {\n      Terms terms = terms(field);\n      if (terms != null) {\n        final long termCount = terms.size();\n        if (termCount == -1) {\n          return -1;\n        }\n          \n        numTerms += termCount;\n      }\n    }\n    return numTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/Fields#getUniqueTermCount().mjava","sourceNew":null,"sourceOld":"  /** Returns the number of terms for all fields, or -1 if this \n   *  measure isn't stored by the codec. Note that, just like \n   *  other term measures, this measure does not take deleted \n   *  documents into account. */\n  // TODO: deprecate?\n  public long getUniqueTermCount() throws IOException {\n    long numTerms = 0;\n    for (String field : this) {\n      Terms terms = terms(field);\n      if (terms != null) {\n        final long termCount = terms.size();\n        if (termCount == -1) {\n          return -1;\n        }\n          \n        numTerms += termCount;\n      }\n    }\n    return numTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","ca5f6409bcf8211cae1732125479d212adb0acac"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"5a238fc456663f685a9db1ed8d680e348bb45171":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ca5f6409bcf8211cae1732125479d212adb0acac":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ca5f6409bcf8211cae1732125479d212adb0acac"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["c7869f64c874ebf7f317d22c00baf2b6857797a6","5a238fc456663f685a9db1ed8d680e348bb45171","fb07ab105350b80ed9d63ca64b117084ed7391bc","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["c7869f64c874ebf7f317d22c00baf2b6857797a6","ca5f6409bcf8211cae1732125479d212adb0acac","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","5a238fc456663f685a9db1ed8d680e348bb45171"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"ca5f6409bcf8211cae1732125479d212adb0acac":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["001b25b42373b22a52f399dbf072f1224632e8e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","c7869f64c874ebf7f317d22c00baf2b6857797a6","5a238fc456663f685a9db1ed8d680e348bb45171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}