{"path":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#assertMatches(Searcher,Query,Sort,String).mjava","commits":[{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#assertMatches(Searcher,Query,Sort,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/collation/CollationTestBase#assertMatches(Searcher,Query,Sort,String).mjava","sourceNew":"  // Make sure the documents returned by the search match the expected list\n  // Copied from TestSort.java\n  private void assertMatches(Searcher searcher, Query query, Sort sort, \n                             String expectedResult) throws IOException {\n    ScoreDoc[] result = searcher.search(query, null, 1000, sort).scoreDocs;\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i = 0 ; i < n ; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j = 0 ; j < v.length ; ++j) {\n        buff.append(v[j]);\n      }\n    }\n    assertEquals(expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // Make sure the documents returned by the search match the expected list\n  // Copied from TestSort.java\n  private void assertMatches(Searcher searcher, Query query, Sort sort, \n                             String expectedResult) throws IOException {\n    ScoreDoc[] result = searcher.search(query, null, 1000, sort).scoreDocs;\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i = 0 ; i < n ; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j = 0 ; j < v.length ; ++j) {\n        buff.append(v[j]);\n      }\n    }\n    assertEquals(expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#assertMatches(IndexSearcher,Query,Sort,String).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#assertMatches(Searcher,Query,Sort,String).mjava","sourceNew":"  // Make sure the documents returned by the search match the expected list\n  // Copied from TestSort.java\n  private void assertMatches(IndexSearcher searcher, Query query, Sort sort, \n                             String expectedResult) throws IOException {\n    ScoreDoc[] result = searcher.search(query, null, 1000, sort).scoreDocs;\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i = 0 ; i < n ; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j = 0 ; j < v.length ; ++j) {\n        buff.append(v[j]);\n      }\n    }\n    assertEquals(expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // Make sure the documents returned by the search match the expected list\n  // Copied from TestSort.java\n  private void assertMatches(Searcher searcher, Query query, Sort sort, \n                             String expectedResult) throws IOException {\n    ScoreDoc[] result = searcher.search(query, null, 1000, sort).scoreDocs;\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i = 0 ; i < n ; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j = 0 ; j < v.length ; ++j) {\n        buff.append(v[j]);\n      }\n    }\n    assertEquals(expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#assertMatches(Searcher,Query,Sort,String).mjava","sourceNew":null,"sourceOld":"  // Make sure the documents returned by the search match the expected list\n  // Copied from TestSort.java\n  private void assertMatches(Searcher searcher, Query query, Sort sort, \n                             String expectedResult) throws IOException {\n    ScoreDoc[] result = searcher.search(query, null, 1000, sort).scoreDocs;\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i = 0 ; i < n ; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j = 0 ; j < v.length ; ++j) {\n        buff.append(v[j]);\n      }\n    }\n    assertEquals(expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#assertMatches(Searcher,Query,Sort,String).mjava","sourceNew":null,"sourceOld":"  // Make sure the documents returned by the search match the expected list\n  // Copied from TestSort.java\n  private void assertMatches(Searcher searcher, Query query, Sort sort, \n                             String expectedResult) throws IOException {\n    ScoreDoc[] result = searcher.search(query, null, 1000, sort).scoreDocs;\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i = 0 ; i < n ; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j = 0 ; j < v.length ; ++j) {\n        buff.append(v[j]);\n      }\n    }\n    assertEquals(expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}