{"path":"src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"/dev/null","sourceNew":"  public void testReader() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      TermFreqVector vector = reader.get(0, testFields[0]);\n      assertTrue(vector != null);\n      String [] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n      \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1229e4509cad6bf268c0fe18199b63a72216c66b","date":1120256033,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    TermFreqVector vector = reader.get(0, testFields[0]);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      //System.out.println(\"Term: \" + term);\n      assertTrue(term.equals(testTerms[i]));\n    }\n  }  \n\n","sourceOld":"  public void testReader() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      assertTrue(reader != null);\n      TermFreqVector vector = reader.get(0, testFields[0]);\n      assertTrue(vector != null);\n      String [] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n      \n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb","date":1185160645,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      String[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n\n\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    TermFreqVector vector = reader.get(0, testFields[0]);\n    assertTrue(vector != null);\n    String [] terms = vector.getTerms();\n    assertTrue(terms != null);\n    assertTrue(terms.length == testTerms.length);\n    for (int i = 0; i < terms.length; i++) {\n      String term = terms[i];\n      //System.out.println(\"Term: \" + term);\n      assertTrue(term.equals(testTerms[i]));\n    }\n  }  \n\n","bugFix":null,"bugIntro":["11764865fb318bf86302eab36bdf9cd00c50c110"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11764865fb318bf86302eab36bdf9cd00c50c110","date":1190109214,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      String[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      String[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n\n\n  }\n\n","bugFix":["352bfe1fae83b92d1562f01c057bfbe6f5af3ddb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      String[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    assertTrue(reader != null);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      String[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testReader().mjava","sourceNew":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      String[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n  }\n\n","sourceOld":"  public void testReader() throws IOException {\n    TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n    for (int j = 0; j < 5; j++) {\n      TermFreqVector vector = reader.get(j, testFields[0]);\n      assertTrue(vector != null);\n      String[] terms = vector.getTerms();\n      assertTrue(terms != null);\n      assertTrue(terms.length == testTerms.length);\n      for (int i = 0; i < terms.length; i++) {\n        String term = terms[i];\n        //System.out.println(\"Term: \" + term);\n        assertTrue(term.equals(testTerms[i]));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"11764865fb318bf86302eab36bdf9cd00c50c110":["352bfe1fae83b92d1562f01c057bfbe6f5af3ddb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["11764865fb318bf86302eab36bdf9cd00c50c110"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"352bfe1fae83b92d1562f01c057bfbe6f5af3ddb":["11764865fb318bf86302eab36bdf9cd00c50c110"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"11764865fb318bf86302eab36bdf9cd00c50c110":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["352bfe1fae83b92d1562f01c057bfbe6f5af3ddb"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}