{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#bulkScorer(LeafReaderContext).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#bulkScorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#bulkScorer(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n    final BooleanScorer bulkScorer = booleanScorer(context);\n    if (bulkScorer != null) { // BooleanScorer is applicable\n      // TODO: what is the right heuristic here?\n      final long costThreshold;\n      if (query.getMinimumNumberShouldMatch() <= 1) {\n        // when all clauses are optional, use BooleanScorer aggressively\n        // TODO: is there actually a threshold under which we should rather\n        // use the regular scorer?\n        costThreshold = -1;\n      } else {\n        // when a minimum number of clauses should match, BooleanScorer is\n        // going to score all windows that have at least minNrShouldMatch\n        // matches in the window. But there is no way to know if there is\n        // an intersection (all clauses might match a different doc ID and\n        // there will be no matches in the end) so we should only use\n        // BooleanScorer if matches are very dense\n        costThreshold = context.reader().maxDoc() / 3;\n      }\n\n      if (bulkScorer.cost() > costThreshold) {\n        return bulkScorer;\n      }\n    }\n    return super.bulkScorer(context);\n  }\n\n","sourceOld":"  @Override\n  public BulkScorer bulkScorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final BooleanScorer bulkScorer = booleanScorer(context, acceptDocs);\n    if (bulkScorer != null) { // BooleanScorer is applicable\n      // TODO: what is the right heuristic here?\n      final long costThreshold;\n      if (query.getMinimumNumberShouldMatch() <= 1) {\n        // when all clauses are optional, use BooleanScorer aggressively\n        // TODO: is there actually a threshold under which we should rather\n        // use the regular scorer?\n        costThreshold = -1;\n      } else {\n        // when a minimum number of clauses should match, BooleanScorer is\n        // going to score all windows that have at least minNrShouldMatch\n        // matches in the window. But there is no way to know if there is\n        // an intersection (all clauses might match a different doc ID and\n        // there will be no matches in the end) so we should only use\n        // BooleanScorer if matches are very dense\n        costThreshold = context.reader().maxDoc() / 3;\n      }\n\n      if (bulkScorer.cost() > costThreshold) {\n        return bulkScorer;\n      }\n    }\n    return super.bulkScorer(context, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c","date":1445865000,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#bulkScorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#bulkScorer(LeafReaderContext).mjava","sourceNew":"  @Override\n  public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n    final BulkScorer bulkScorer = booleanScorer(context);\n    if (bulkScorer != null) { // BooleanScorer is applicable\n      // TODO: what is the right heuristic here?\n      final long costThreshold;\n      if (query.getMinimumNumberShouldMatch() <= 1) {\n        // when all clauses are optional, use BooleanScorer aggressively\n        // TODO: is there actually a threshold under which we should rather\n        // use the regular scorer?\n        costThreshold = -1;\n      } else {\n        // when a minimum number of clauses should match, BooleanScorer is\n        // going to score all windows that have at least minNrShouldMatch\n        // matches in the window. But there is no way to know if there is\n        // an intersection (all clauses might match a different doc ID and\n        // there will be no matches in the end) so we should only use\n        // BooleanScorer if matches are very dense\n        costThreshold = context.reader().maxDoc() / 3;\n      }\n\n      if (bulkScorer.cost() > costThreshold) {\n        return bulkScorer;\n      }\n    }\n    return super.bulkScorer(context);\n  }\n\n","sourceOld":"  @Override\n  public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n    final BooleanScorer bulkScorer = booleanScorer(context);\n    if (bulkScorer != null) { // BooleanScorer is applicable\n      // TODO: what is the right heuristic here?\n      final long costThreshold;\n      if (query.getMinimumNumberShouldMatch() <= 1) {\n        // when all clauses are optional, use BooleanScorer aggressively\n        // TODO: is there actually a threshold under which we should rather\n        // use the regular scorer?\n        costThreshold = -1;\n      } else {\n        // when a minimum number of clauses should match, BooleanScorer is\n        // going to score all windows that have at least minNrShouldMatch\n        // matches in the window. But there is no way to know if there is\n        // an intersection (all clauses might match a different doc ID and\n        // there will be no matches in the end) so we should only use\n        // BooleanScorer if matches are very dense\n        costThreshold = context.reader().maxDoc() / 3;\n      }\n\n      if (bulkScorer.cost() > costThreshold) {\n        return bulkScorer;\n      }\n    }\n    return super.bulkScorer(context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2262f0d8ead49d04485950fba849e166dbe28fb","date":1451569279,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#bulkScorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#bulkScorer(LeafReaderContext).mjava","sourceNew":"  @Override\n  public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n    final BulkScorer bulkScorer = booleanScorer(context);\n    if (bulkScorer != null) {\n      // bulk scoring is applicable, use it\n      return bulkScorer;\n    } else {\n      // use a Scorer-based impl (BS2)\n      return super.bulkScorer(context);\n    }\n  }\n\n","sourceOld":"  @Override\n  public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n    final BulkScorer bulkScorer = booleanScorer(context);\n    if (bulkScorer != null) { // BooleanScorer is applicable\n      // TODO: what is the right heuristic here?\n      final long costThreshold;\n      if (query.getMinimumNumberShouldMatch() <= 1) {\n        // when all clauses are optional, use BooleanScorer aggressively\n        // TODO: is there actually a threshold under which we should rather\n        // use the regular scorer?\n        costThreshold = -1;\n      } else {\n        // when a minimum number of clauses should match, BooleanScorer is\n        // going to score all windows that have at least minNrShouldMatch\n        // matches in the window. But there is no way to know if there is\n        // an intersection (all clauses might match a different doc ID and\n        // there will be no matches in the end) so we should only use\n        // BooleanScorer if matches are very dense\n        costThreshold = context.reader().maxDoc() / 3;\n      }\n\n      if (bulkScorer.cost() > costThreshold) {\n        return bulkScorer;\n      }\n    }\n    return super.bulkScorer(context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#bulkScorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#bulkScorer(LeafReaderContext).mjava","sourceNew":"  @Override\n  public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n    if (scoreMode == ScoreMode.TOP_SCORES) {\n      // If only the top docs are requested, use the default bulk scorer\n      // so that we can dynamically prune non-competitive hits.\n      return super.bulkScorer(context);\n    }\n    final BulkScorer bulkScorer = booleanScorer(context);\n    if (bulkScorer != null) {\n      // bulk scoring is applicable, use it\n      return bulkScorer;\n    } else {\n      // use a Scorer-based impl (BS2)\n      return super.bulkScorer(context);\n    }\n  }\n\n","sourceOld":"  @Override\n  public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n    final BulkScorer bulkScorer = booleanScorer(context);\n    if (bulkScorer != null) {\n      // bulk scoring is applicable, use it\n      return bulkScorer;\n    } else {\n      // use a Scorer-based impl (BS2)\n      return super.bulkScorer(context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#bulkScorer(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#bulkScorer(LeafReaderContext).mjava","sourceNew":"  @Override\n  public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n    if (scoreMode == ScoreMode.TOP_SCORES) {\n      // If only the top docs are requested, use the default bulk scorer\n      // so that we can dynamically prune non-competitive hits.\n      return super.bulkScorer(context);\n    }\n    final BulkScorer bulkScorer = booleanScorer(context);\n    if (bulkScorer != null) {\n      // bulk scoring is applicable, use it\n      return bulkScorer;\n    } else {\n      // use a Scorer-based impl (BS2)\n      return super.bulkScorer(context);\n    }\n  }\n\n","sourceOld":"  @Override\n  public BulkScorer bulkScorer(LeafReaderContext context) throws IOException {\n    final BulkScorer bulkScorer = booleanScorer(context);\n    if (bulkScorer != null) {\n      // bulk scoring is applicable, use it\n      return bulkScorer;\n    } else {\n      // use a Scorer-based impl (BS2)\n      return super.bulkScorer(context);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["b2262f0d8ead49d04485950fba849e166dbe28fb"],"b2262f0d8ead49d04485950fba849e166dbe28fb":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["b2262f0d8ead49d04485950fba849e166dbe28fb","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c"],"5c83732c32d5a6ea6a1ca930daa241ddec2f4c9c":["b2262f0d8ead49d04485950fba849e166dbe28fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"b2262f0d8ead49d04485950fba849e166dbe28fb":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}