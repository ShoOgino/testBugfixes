{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getDocsWithField(FieldInfo).mjava","commits":[{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getDocsWithField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch(field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED_NUMERIC:\n        return DocValues.docsWithValue(getSortedNumeric(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        BinaryEntry be = binaries.get(field.name);\n        return getLiveBits(be.missingOffset, maxDoc);\n      case NUMERIC:\n        NumericEntry ne = numerics.get(field.name);\n        return getLiveBits(ne.missingOffset, maxDoc);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getDocsWithField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch(field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED_NUMERIC:\n        return DocValues.docsWithValue(getSortedNumeric(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        BinaryEntry be = binaries.get(field.name);\n        return getLiveBits(be.missingOffset, maxDoc);\n      case NUMERIC:\n        NumericEntry ne = numerics.get(field.name);\n        return getLiveBits(ne.missingOffset, maxDoc);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getDocsWithField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getDocsWithField(FieldInfo).mjava","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch(field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED_NUMERIC:\n        return DocValues.docsWithValue(getSortedNumeric(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        BinaryEntry be = binaries.get(field.name);\n        return getLiveBits(be.missingOffset, maxDoc);\n      case NUMERIC:\n        NumericEntry ne = numerics.get(field.name);\n        return getLiveBits(ne.missingOffset, maxDoc);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch(field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED_NUMERIC:\n        return DocValues.docsWithValue(getSortedNumeric(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        BinaryEntry be = binaries.get(field.name);\n        return getLiveBits(be.missingOffset, maxDoc);\n      case NUMERIC:\n        NumericEntry ne = numerics.get(field.name);\n        return getLiveBits(ne.missingOffset, maxDoc);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":6,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getDocsWithField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getDocsWithField(FieldInfo).mjava","sourceNew":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch(field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED_NUMERIC:\n        return DocValues.docsWithValue(getSortedNumeric(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        BinaryEntry be = binaries.get(field.name);\n        return getLiveBits(be.missingOffset, maxDoc);\n      case NUMERIC:\n        NumericEntry ne = numerics.get(field.name);\n        return getLiveBits(ne.missingOffset, maxDoc);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public Bits getDocsWithField(FieldInfo field) throws IOException {\n    switch(field.getDocValuesType()) {\n      case SORTED_SET:\n        return DocValues.docsWithValue(getSortedSet(field), maxDoc);\n      case SORTED_NUMERIC:\n        return DocValues.docsWithValue(getSortedNumeric(field), maxDoc);\n      case SORTED:\n        return DocValues.docsWithValue(getSorted(field), maxDoc);\n      case BINARY:\n        BinaryEntry be = binaries.get(field.name);\n        return getLiveBits(be.missingOffset, maxDoc);\n      case NUMERIC:\n        NumericEntry ne = numerics.get(field.name);\n        return getLiveBits(ne.missingOffset, maxDoc);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"a870f9917149dc600c4ad4417d615c1795de5864":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a870f9917149dc600c4ad4417d615c1795de5864"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}