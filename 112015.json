{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testToString().mjava","commits":[{"id":"78522aad83283ca58fae08fd89406b65429d0229","date":1385573562,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testToString().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testToString().mjava","sourceNew":"  @Test \n  public void testToString() {\n    // When the category is empty, we expect an empty string\n    assertEquals(\"\", FacetLabel.EMPTY.toString('/'));\n    // one category (so no delimiter needed)\n    assertEquals(\"hello\", new FacetLabel(\"hello\").toString('/'));\n    // more than one category (so no delimiter needed)\n    assertEquals(\"hello/world\", new FacetLabel(\"hello\", \"world\").toString('/'));\n  }\n\n","sourceOld":"  @Test \n  public void testToString() {\n    // When the category is empty, we expect an empty string\n    assertEquals(\"\", FacetLabel.EMPTY.toString('/'));\n    // one category (so no delimiter needed)\n    assertEquals(\"hello\", new FacetLabel(\"hello\").toString('/'));\n    // more than one category (so no delimiter needed)\n    assertEquals(\"hello/world\", new FacetLabel(\"hello\", \"world\").toString('/'));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe9946d3cd818d329255e4c325597ac3480503e","date":1385580921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testToString().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testToString().mjava","sourceNew":"  @Test \n  public void testToString() {\n    // When the category is empty, we expect an empty string\n    assertEquals(\"FacetLabel: []\", FacetLabel.EMPTY.toString());\n    // one category\n    assertEquals(\"FacetLabel: [hello]\", new FacetLabel(\"hello\").toString());\n    // more than one category\n    assertEquals(\"FacetLabel: [hello, world]\", new FacetLabel(\"hello\", \"world\").toString());\n  }\n\n","sourceOld":"  @Test \n  public void testToString() {\n    // When the category is empty, we expect an empty string\n    assertEquals(\"\", FacetLabel.EMPTY.toString('/'));\n    // one category (so no delimiter needed)\n    assertEquals(\"hello\", new FacetLabel(\"hello\").toString('/'));\n    // more than one category (so no delimiter needed)\n    assertEquals(\"hello/world\", new FacetLabel(\"hello\", \"world\").toString('/'));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56d44586f4c409c6c6c5942b9f0227df806b7300","date":1386027853,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testToString().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testToString().mjava","sourceNew":"  @Test \n  public void testToString() {\n    // When the category is empty, we expect an empty string\n    assertEquals(\"FacetLabel: []\", new FacetLabel().toString());\n    // one category\n    assertEquals(\"FacetLabel: [hello]\", new FacetLabel(\"hello\").toString());\n    // more than one category\n    assertEquals(\"FacetLabel: [hello, world]\", new FacetLabel(\"hello\", \"world\").toString());\n  }\n\n","sourceOld":"  @Test \n  public void testToString() {\n    // When the category is empty, we expect an empty string\n    assertEquals(\"FacetLabel: []\", FacetLabel.EMPTY.toString());\n    // one category\n    assertEquals(\"FacetLabel: [hello]\", new FacetLabel(\"hello\").toString());\n    // more than one category\n    assertEquals(\"FacetLabel: [hello, world]\", new FacetLabel(\"hello\", \"world\").toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testToString().mjava","pathOld":"/dev/null","sourceNew":"  @Test \n  public void testToString() {\n    // When the category is empty, we expect an empty string\n    assertEquals(\"FacetLabel: []\", new FacetLabel().toString());\n    // one category\n    assertEquals(\"FacetLabel: [hello]\", new FacetLabel(\"hello\").toString());\n    // more than one category\n    assertEquals(\"FacetLabel: [hello, world]\", new FacetLabel(\"hello\", \"world\").toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["bbe9946d3cd818d329255e4c325597ac3480503e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78522aad83283ca58fae08fd89406b65429d0229":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56d44586f4c409c6c6c5942b9f0227df806b7300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"bbe9946d3cd818d329255e4c325597ac3480503e":["78522aad83283ca58fae08fd89406b65429d0229"]},"commit2Childs":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78522aad83283ca58fae08fd89406b65429d0229","3cc728b07df73b197e6d940d27f9b08b63918f13"],"78522aad83283ca58fae08fd89406b65429d0229":["bbe9946d3cd818d329255e4c325597ac3480503e"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bbe9946d3cd818d329255e4c325597ac3480503e":["56d44586f4c409c6c6c5942b9f0227df806b7300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}