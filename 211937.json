{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanTopLevelScorers.ReqSingleOptScorer#score().mjava","commits":[{"id":"060a4836b54f1e7e79ea6493cda5dc3030d3fb0e","date":1400639845,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanTopLevelScorers.ReqSingleOptScorer#score().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer.ReqSingleOptScorer#score().mjava","sourceNew":"    @Override\n    public float score() throws IOException {\n      int curDoc = reqScorer.docID();\n      float reqScore = reqScorer.score();\n      if (optScorer == null) {\n        return reqScore * coordReq;\n      }\n      \n      int optScorerDoc = optScorer.docID();\n      if (optScorerDoc < curDoc && (optScorerDoc = optScorer.advance(curDoc)) == NO_MORE_DOCS) {\n        optScorer = null;\n        return reqScore * coordReq;\n      }\n      \n      return optScorerDoc == curDoc ? (reqScore + optScorer.score()) * coordBoth : reqScore * coordReq;\n    }\n\n","sourceOld":"    @Override\n    public float score() throws IOException {\n      int curDoc = reqScorer.docID();\n      float reqScore = reqScorer.score();\n      if (optScorer == null) {\n        return reqScore * coordReq;\n      }\n      \n      int optScorerDoc = optScorer.docID();\n      if (optScorerDoc < curDoc && (optScorerDoc = optScorer.advance(curDoc)) == NO_MORE_DOCS) {\n        optScorer = null;\n        return reqScore * coordReq;\n      }\n      \n      return optScorerDoc == curDoc ? (reqScore + optScorer.score()) * coordBoth : reqScore * coordReq;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d","date":1400696679,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanTopLevelScorers.ReqSingleOptScorer#score().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public float score() throws IOException {\n      int curDoc = reqScorer.docID();\n      float reqScore = reqScorer.score();\n      if (optScorer == null) {\n        return reqScore * coordReq;\n      }\n      \n      int optScorerDoc = optScorer.docID();\n      if (optScorerDoc < curDoc && (optScorerDoc = optScorer.advance(curDoc)) == NO_MORE_DOCS) {\n        optScorer = null;\n        return reqScore * coordReq;\n      }\n      \n      return optScorerDoc == curDoc ? (reqScore + optScorer.score()) * coordBoth : reqScore * coordReq;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanTopLevelScorers.ReqSingleOptScorer#score().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public float score() throws IOException {\n      int curDoc = reqScorer.docID();\n      float reqScore = reqScorer.score();\n      if (optScorer == null) {\n        return reqScore * coordReq;\n      }\n      \n      int optScorerDoc = optScorer.docID();\n      if (optScorerDoc < curDoc && (optScorerDoc = optScorer.advance(curDoc)) == NO_MORE_DOCS) {\n        optScorer = null;\n        return reqScore * coordReq;\n      }\n      \n      return optScorerDoc == curDoc ? (reqScore + optScorer.score()) * coordBoth : reqScore * coordReq;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanTopLevelScorers.ReqSingleOptScorer#score().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanTopLevelScorers.ReqSingleOptScorer#score().mjava","sourceNew":"    @Override\n    public float score() throws IOException {\n      // TODO: sum into a double and cast to float if we ever send required clauses to BS1\n      int curDoc = reqScorer.docID();\n      float score = reqScorer.score();\n\n      int optScorerDoc = optIterator.docID();\n      if (optScorerDoc < curDoc) {\n        optScorerDoc = optIterator.advance(curDoc);\n      }\n      \n      if (optScorerDoc == curDoc) {\n        score = (score + optScorer.score()) * coordBoth;\n      } else {\n        score = score * coordReq;\n      }\n      \n      return score;\n    }\n\n","sourceOld":"    @Override\n    public float score() throws IOException {\n      int curDoc = reqScorer.docID();\n      float reqScore = reqScorer.score();\n      if (optScorer == null) {\n        return reqScore * coordReq;\n      }\n      \n      int optScorerDoc = optScorer.docID();\n      if (optScorerDoc < curDoc && (optScorerDoc = optScorer.advance(curDoc)) == NO_MORE_DOCS) {\n        optScorer = null;\n        return reqScore * coordReq;\n      }\n      \n      return optScorerDoc == curDoc ? (reqScore + optScorer.score()) * coordBoth : reqScore * coordReq;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanTopLevelScorers.ReqSingleOptScorer#score().mjava","sourceNew":null,"sourceOld":"    @Override\n    public float score() throws IOException {\n      // TODO: sum into a double and cast to float if we ever send required clauses to BS1\n      int curDoc = reqScorer.docID();\n      float score = reqScorer.score();\n\n      int optScorerDoc = optIterator.docID();\n      if (optScorerDoc < curDoc) {\n        optScorerDoc = optIterator.advance(curDoc);\n      }\n      \n      if (optScorerDoc == curDoc) {\n        score = (score + optScorer.score()) * coordBoth;\n      } else {\n        score = score * coordReq;\n      }\n      \n      return score;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanTopLevelScorers.ReqSingleOptScorer#score().mjava","sourceNew":null,"sourceOld":"    @Override\n    public float score() throws IOException {\n      // TODO: sum into a double and cast to float if we ever send required clauses to BS1\n      int curDoc = reqScorer.docID();\n      float score = reqScorer.score();\n\n      int optScorerDoc = optIterator.docID();\n      if (optScorerDoc < curDoc) {\n        optScorerDoc = optIterator.advance(curDoc);\n      }\n      \n      if (optScorerDoc == curDoc) {\n        score = (score + optScorer.score()) * coordBoth;\n      } else {\n        score = score * coordReq;\n      }\n      \n      return score;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"060a4836b54f1e7e79ea6493cda5dc3030d3fb0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","060a4836b54f1e7e79ea6493cda5dc3030d3fb0e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7605579001505896d48b07160075a5c8b8e128e","060a4836b54f1e7e79ea6493cda5dc3030d3fb0e","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7605579001505896d48b07160075a5c8b8e128e":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"060a4836b54f1e7e79ea6493cda5dc3030d3fb0e":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["b7605579001505896d48b07160075a5c8b8e128e","7dd748bb245633a8195281556bb0e68a6ea97d18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}