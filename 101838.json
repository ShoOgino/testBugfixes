{"path":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","commits":[{"id":"c72bf2bc3472b7a18bcd6b95f91ccd4056a11774","date":1295386233,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    HashMap <String,Object> single = new HashMap<String, Object>();\n    HashMap <String,Object> multi = new HashMap<String, Object>();\n    int pseudoSize = pseudoFields != null ? pseudoFields.size() : 0;\n\n    for (String fname : doc.getFieldNames()) {\n      if(returnFields != null && !returnFields.contains(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if (sf != null && sf.multiValued()) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size() + pseudoSize);\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n\n    if (pseudoSize > 0) {\n      writeMap(null,pseudoFields,true, false);\n    }\n    writeMapCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9f1bb14a86a1d53b30fdfc242827ac38ef18d184"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f1bb14a86a1d53b30fdfc242827ac38ef18d184","date":1295398557,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n    int pseudoSize = pseudoFields != null ? pseudoFields.size() : 0;\n\n    for (String fname : doc.getFieldNames()) {\n      if(returnFields != null && !returnFields.contains(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if (sf != null && sf.multiValued()) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size() + pseudoSize);\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n\n    if (pseudoSize > 0) {\n      writeMap(null,pseudoFields,true, false);\n    }\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    HashMap <String,Object> single = new HashMap<String, Object>();\n    HashMap <String,Object> multi = new HashMap<String, Object>();\n    int pseudoSize = pseudoFields != null ? pseudoFields.size() : 0;\n\n    for (String fname : doc.getFieldNames()) {\n      if(returnFields != null && !returnFields.contains(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if (sf != null && sf.multiValued()) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size() + pseudoSize);\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n\n    if (pseudoSize > 0) {\n      writeMap(null,pseudoFields,true, false);\n    }\n    writeMapCloser();\n  }\n\n","bugFix":["c72bf2bc3472b7a18bcd6b95f91ccd4056a11774"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n    int pseudoSize = pseudoFields != null ? pseudoFields.size() : 0;\n\n    for (String fname : doc.getFieldNames()) {\n      if(returnFields != null && !returnFields.contains(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if (sf != null && sf.multiValued()) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size() + pseudoSize);\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n\n    if (pseudoSize > 0) {\n      writeMap(null,pseudoFields,true, false);\n    }\n    writeMapCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n    int pseudoSize = pseudoFields != null ? pseudoFields.size() : 0;\n\n    for (String fname : doc.getFieldNames()) {\n      if(returnFields != null && !returnFields.contains(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if (sf != null && sf.multiValued()) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size() + pseudoSize);\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n\n    if (pseudoSize > 0) {\n      writeMap(null,pseudoFields,true, false);\n    }\n    writeMapCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException \n  {\n    writeKey(idx, false);\n    \n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n\n    for (String fname : doc.getFieldNames()) {\n      if(!returnFields.contains(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      if (val instanceof Collection) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size());\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n    \n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n    int pseudoSize = pseudoFields != null ? pseudoFields.size() : 0;\n\n    for (String fname : doc.getFieldNames()) {\n      if(returnFields != null && !returnFields.contains(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if (sf != null && sf.multiValued()) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size() + pseudoSize);\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n\n    if (pseudoSize > 0) {\n      writeMap(null,pseudoFields,true, false);\n    }\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n    int pseudoSize = pseudoFields != null ? pseudoFields.size() : 0;\n\n    for (String fname : doc.getFieldNames()) {\n      if(returnFields != null && !returnFields.contains(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if (sf != null && sf.multiValued()) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size() + pseudoSize);\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n\n    if (pseudoSize > 0) {\n      writeMap(null,pseudoFields,true, false);\n    }\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeSolrDocument(String,SolrDocument,Set[String],Map).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, Set<String> returnFields, Map pseudoFields) throws IOException {\n    LinkedHashMap <String,Object> single = new LinkedHashMap<String, Object>();\n    LinkedHashMap <String,Object> multi = new LinkedHashMap<String, Object>();\n    int pseudoSize = pseudoFields != null ? pseudoFields.size() : 0;\n\n    for (String fname : doc.getFieldNames()) {\n      if(returnFields != null && !returnFields.contains(fname)){\n        continue;\n      }\n\n      Object val = doc.getFieldValue(fname);\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if (sf != null && sf.multiValued()) {\n        multi.put(fname, val);\n      }else{\n        single.put(fname, val);\n      }\n    }\n\n    writeMapOpener(single.size() + multi.size() + pseudoSize);\n    for(String fname: single.keySet()){\n      Object val = single.get(fname);\n      writeKey(fname, true);\n      writeVal(fname, val);\n    }\n    \n    for(String fname: multi.keySet()){\n      writeKey(fname, true);\n\n      Object val = multi.get(fname);\n      if (!(val instanceof Collection)) {\n        // should never be reached if multivalued fields are stored as a Collection\n        // so I'm assuming a size of 1 just to wrap the single value\n        writeArrayOpener(1);\n        writeVal(fname, val);\n        writeArrayCloser();\n      }else{\n        writeVal(fname, val);\n      }\n    }\n\n    if (pseudoSize > 0) {\n      writeMap(null,pseudoFields,true, false);\n    }\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["e79a6d080bdd5b2a8f56342cf571b5476de04180","6aedf81f068e430dec27d94310415cc6ff52731c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","6aedf81f068e430dec27d94310415cc6ff52731c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9f1bb14a86a1d53b30fdfc242827ac38ef18d184"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9f1bb14a86a1d53b30fdfc242827ac38ef18d184"],"6aedf81f068e430dec27d94310415cc6ff52731c":["9f1bb14a86a1d53b30fdfc242827ac38ef18d184"],"9f1bb14a86a1d53b30fdfc242827ac38ef18d184":["c72bf2bc3472b7a18bcd6b95f91ccd4056a11774"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6aedf81f068e430dec27d94310415cc6ff52731c"],"c72bf2bc3472b7a18bcd6b95f91ccd4056a11774":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","c72bf2bc3472b7a18bcd6b95f91ccd4056a11774"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"6aedf81f068e430dec27d94310415cc6ff52731c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9f1bb14a86a1d53b30fdfc242827ac38ef18d184":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","6aedf81f068e430dec27d94310415cc6ff52731c"],"c72bf2bc3472b7a18bcd6b95f91ccd4056a11774":["9f1bb14a86a1d53b30fdfc242827ac38ef18d184"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}