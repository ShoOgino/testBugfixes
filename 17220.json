{"path":"src/common/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"src/common/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p/>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.US);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}