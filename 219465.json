{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecurityNodeWatcher(Callable[Pair[byte[],Stat]]).mjava","commits":[{"id":"bc64dbaabfd45a3fe2533c0b7daace3bbe45772e","date":1519728399,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecurityNodeWatcher(Callable[Pair[byte[],Stat]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecuritynodeWatcher(Callable[Pair[byte[],Stat]]).mjava","sourceNew":"  private void addSecurityNodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                LOG.debug(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  LOG.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              LOG.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              LOG.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","sourceOld":"  private void addSecuritynodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                LOG.debug(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  LOG.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              LOG.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              LOG.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecurityNodeWatcher(Callable[Pair[byte[],Stat]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecurityNodeWatcher(Callable[Pair[byte[],Stat]]).mjava","sourceNew":"  private void addSecurityNodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                log.debug(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  log.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              log.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","sourceOld":"  private void addSecurityNodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                LOG.debug(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  LOG.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              LOG.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              LOG.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              LOG.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"980e438009cf855431bca6bfd5638a83b0d0ec5b","date":1591571516,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecurityNodeWatcher(Callable[Pair[byte[],Stat]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecurityNodeWatcher(Callable[Pair[byte[],Stat]]).mjava","sourceNew":"  private void addSecurityNodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                log.debug(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Stat stat = new Stat();\n                byte[] data = \"{}\".getBytes(StandardCharsets.UTF_8);\n                if (EventType.NodeDeleted.equals(event.getType())) {\n                  // Node deleted, just recreate watch without attempting a read - SOLR-9679\n                  getZkClient().exists(SOLR_SECURITY_CONF_PATH, this, true);\n                } else {\n                  data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, this, stat, true);\n                }\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  log.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              log.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","sourceOld":"  private void addSecurityNodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                log.debug(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Watcher thisWatch = this;\n                final Stat stat = new Stat();\n                final byte[] data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, thisWatch, stat, true);\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  log.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              log.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecurityNodeWatcher(Callable[Pair[byte[],Stat]]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#addSecurityNodeWatcher(Callable[Pair[byte[],Stat]]).mjava","sourceNew":"  private void addSecurityNodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                log.debug(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Stat stat = new Stat();\n                byte[] data = \"{}\".getBytes(StandardCharsets.UTF_8);\n                if (EventType.NodeDeleted.equals(event.getType())) {\n                  // Node deleted, just recreate watch without attempting a read - SOLR-9679\n                  getZkClient().exists(SOLR_SECURITY_CONF_PATH, this, true);\n                } else {\n                  data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, this, stat, true);\n                }\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  log.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: \", e);\n            } catch (KeeperException e) {\n              log.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","sourceOld":"  private void addSecurityNodeWatcher(final Callable<Pair<byte[], Stat>> callback)\n      throws KeeperException, InterruptedException {\n    zkClient.exists(SOLR_SECURITY_CONF_PATH,\n        new Watcher() {\n\n          @Override\n          public void process(WatchedEvent event) {\n            // session events are not change events, and do not remove the watcher\n            if (EventType.None.equals(event.getType())) {\n              return;\n            }\n            try {\n              synchronized (ZkStateReader.this.getUpdateLock()) {\n                log.debug(\"Updating [{}] ... \", SOLR_SECURITY_CONF_PATH);\n\n                // remake watch\n                final Stat stat = new Stat();\n                byte[] data = \"{}\".getBytes(StandardCharsets.UTF_8);\n                if (EventType.NodeDeleted.equals(event.getType())) {\n                  // Node deleted, just recreate watch without attempting a read - SOLR-9679\n                  getZkClient().exists(SOLR_SECURITY_CONF_PATH, this, true);\n                } else {\n                  data = getZkClient().getData(SOLR_SECURITY_CONF_PATH, this, stat, true);\n                }\n                try {\n                  callback.call(new Pair<>(data, stat));\n                } catch (Exception e) {\n                  log.error(\"Error running collections node listener\", e);\n                }\n              }\n            } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n              log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n            } catch (KeeperException e) {\n              log.error(\"A ZK error has occurred\", e);\n              throw new ZooKeeperException(ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.warn(\"Interrupted\", e);\n            }\n          }\n\n        }, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"980e438009cf855431bca6bfd5638a83b0d0ec5b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57c238f5fb83803b49b37b3a1a12224a64d47542":["980e438009cf855431bca6bfd5638a83b0d0ec5b"],"bc64dbaabfd45a3fe2533c0b7daace3bbe45772e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["bc64dbaabfd45a3fe2533c0b7daace3bbe45772e"]},"commit2Childs":{"980e438009cf855431bca6bfd5638a83b0d0ec5b":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc64dbaabfd45a3fe2533c0b7daace3bbe45772e"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc64dbaabfd45a3fe2533c0b7daace3bbe45772e":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["980e438009cf855431bca6bfd5638a83b0d0ec5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}