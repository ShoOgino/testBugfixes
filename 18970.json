{"path":"lucene/backwards/src/java/org/apache/lucene/index/SegmentTermDocs#next().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SegmentTermDocs#next().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SegmentTermDocs#next().mjava","sourceNew":"  public boolean next() throws IOException {\n    while (true) {\n      if (count == df)\n        return false;\n      final int docCode = freqStream.readVInt();\n      \n      if (currentFieldOmitTermFreqAndPositions) {\n        doc += docCode;\n        freq = 1;\n      } else {\n        doc += docCode >>> 1;       // shift off low bit\n        if ((docCode & 1) != 0)       // if low bit is set\n          freq = 1;         // freq is one\n        else\n          freq = freqStream.readVInt();     // else read freq\n      }\n      \n      count++;\n\n      if (deletedDocs == null || !deletedDocs.get(doc))\n        break;\n      skippingDoc();\n    }\n    return true;\n  }\n\n","sourceOld":"  public boolean next() throws IOException {\n    while (true) {\n      if (count == df)\n        return false;\n      final int docCode = freqStream.readVInt();\n      \n      if (currentFieldOmitTermFreqAndPositions) {\n        doc += docCode;\n        freq = 1;\n      } else {\n        doc += docCode >>> 1;       // shift off low bit\n        if ((docCode & 1) != 0)       // if low bit is set\n          freq = 1;         // freq is one\n        else\n          freq = freqStream.readVInt();     // else read freq\n      }\n      \n      count++;\n\n      if (deletedDocs == null || !deletedDocs.get(doc))\n        break;\n      skippingDoc();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/SegmentTermDocs#next().mjava","sourceNew":null,"sourceOld":"  public boolean next() throws IOException {\n    while (true) {\n      if (count == df)\n        return false;\n      final int docCode = freqStream.readVInt();\n      \n      if (currentFieldOmitTermFreqAndPositions) {\n        doc += docCode;\n        freq = 1;\n      } else {\n        doc += docCode >>> 1;       // shift off low bit\n        if ((docCode & 1) != 0)       // if low bit is set\n          freq = 1;         // freq is one\n        else\n          freq = freqStream.readVInt();     // else read freq\n      }\n      \n      count++;\n\n      if (deletedDocs == null || !deletedDocs.get(doc))\n        break;\n      skippingDoc();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}