{"path":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","commits":[{"id":"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a","date":1114594353,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    Vector v = new Vector();\n    org.apache.lucene.analysis.Token t;\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    while (true) {\n      try {\n        t = source.next();\n      }\n      catch (IOException e) {\n        t = null;\n      }\n      if (t == null)\n        break;\n      v.addElement(t);\n      if (t.getPositionIncrement() == 1)\n        positionCount++;\n      else\n        severalTokensAtSamePosition = true;\n    }\n    try {\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (v.size() == 0)\n      return null;\n    else if (v.size() == 1) {\n      t = (org.apache.lucene.analysis.Token) v.elementAt(0);\n      return new TermQuery(new Term(field, t.termText()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < v.size(); i++) {\n            t = (org.apache.lucene.analysis.Token) v.elementAt(i);\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, t.termText()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List multiTerms = new ArrayList();\n          for (int i = 0; i < v.size(); i++) {\n            t = (org.apache.lucene.analysis.Token) v.elementAt(i);\n            if (t.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, t.termText()));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < v.size(); i++) {\n          q.add(new Term(field, ((org.apache.lucene.analysis.Token)\n              v.elementAt(i)).termText()));\n\n        }\n        return q;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    Vector v = new Vector();\n    org.apache.lucene.analysis.Token t;\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    while (true) {\n      try {\n        t = source.next();\n      }\n      catch (IOException e) {\n        t = null;\n      }\n      if (t == null)\n        break;\n      v.addElement(t);\n      if (t.getPositionIncrement() == 1)\n        positionCount++;\n      else\n        severalTokensAtSamePosition = true;\n    }\n    try {\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (v.size() == 0)\n      return null;\n    else if (v.size() == 1) {\n      t = (org.apache.lucene.analysis.Token) v.elementAt(0);\n      return new TermQuery(new Term(field, t.termText()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < v.size(); i++) {\n            t = (org.apache.lucene.analysis.Token) v.elementAt(i);\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, t.termText()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List multiTerms = new ArrayList();\n          for (int i = 0; i < v.size(); i++) {\n            t = (org.apache.lucene.analysis.Token) v.elementAt(i);\n            if (t.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, t.termText()));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < v.size(); i++) {\n          q.add(new Term(field, ((org.apache.lucene.analysis.Token)\n              v.elementAt(i)).termText()));\n\n        }\n        return q;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    Vector v = new Vector();\n    final org.apache.lucene.analysis.Token reusableToken = new org.apache.lucene.analysis.Token();\n    org.apache.lucene.analysis.Token nextToken;\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    while (true) {\n      try {\n        nextToken = source.next(reusableToken);\n      }\n      catch (IOException e) {\n        nextToken = null;\n      }\n      if (nextToken == null)\n        break;\n      v.addElement(nextToken.clone());\n      if (nextToken.getPositionIncrement() == 1)\n        positionCount++;\n      else\n        severalTokensAtSamePosition = true;\n    }\n    try {\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (v.size() == 0)\n      return null;\n    else if (v.size() == 1) {\n      nextToken = (org.apache.lucene.analysis.Token) v.elementAt(0);\n      return new TermQuery(new Term(field, nextToken.term()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < v.size(); i++) {\n            nextToken = (org.apache.lucene.analysis.Token) v.elementAt(i);\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, nextToken.term()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List multiTerms = new ArrayList();\n          for (int i = 0; i < v.size(); i++) {\n            nextToken = (org.apache.lucene.analysis.Token) v.elementAt(i);\n            if (nextToken.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, nextToken.term()));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < v.size(); i++) {\n          q.add(new Term(field, ((org.apache.lucene.analysis.Token)\n              v.elementAt(i)).term()));\n\n        }\n        return q;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    Vector v = new Vector();\n    org.apache.lucene.analysis.Token t;\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    while (true) {\n      try {\n        t = source.next();\n      }\n      catch (IOException e) {\n        t = null;\n      }\n      if (t == null)\n        break;\n      v.addElement(t);\n      if (t.getPositionIncrement() == 1)\n        positionCount++;\n      else\n        severalTokensAtSamePosition = true;\n    }\n    try {\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (v.size() == 0)\n      return null;\n    else if (v.size() == 1) {\n      t = (org.apache.lucene.analysis.Token) v.elementAt(0);\n      return new TermQuery(new Term(field, t.termText()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < v.size(); i++) {\n            t = (org.apache.lucene.analysis.Token) v.elementAt(i);\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, t.termText()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List multiTerms = new ArrayList();\n          for (int i = 0; i < v.size(); i++) {\n            t = (org.apache.lucene.analysis.Token) v.elementAt(i);\n            if (t.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, t.termText()));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < v.size(); i++) {\n          q.add(new Term(field, ((org.apache.lucene.analysis.Token)\n              v.elementAt(i)).termText()));\n\n        }\n        return q;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7b6cdc70e097da94da79a655ed8f94477ff69f5","date":1220815360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List list = new ArrayList();\n    final org.apache.lucene.analysis.Token reusableToken = new org.apache.lucene.analysis.Token();\n    org.apache.lucene.analysis.Token nextToken;\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    while (true) {\n      try {\n        nextToken = source.next(reusableToken);\n      }\n      catch (IOException e) {\n        nextToken = null;\n      }\n      if (nextToken == null)\n        break;\n      list.add(nextToken.clone());\n      if (nextToken.getPositionIncrement() == 1)\n        positionCount++;\n      else\n        severalTokensAtSamePosition = true;\n    }\n    try {\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      nextToken = (org.apache.lucene.analysis.Token) list.get(0);\n      return new TermQuery(new Term(field, nextToken.term()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < list.size(); i++) {\n            nextToken = (org.apache.lucene.analysis.Token) list.get(i);\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, nextToken.term()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List multiTerms = new ArrayList();\n          for (int i = 0; i < list.size(); i++) {\n            nextToken = (org.apache.lucene.analysis.Token) list.get(i);\n            if (nextToken.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, nextToken.term()));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          q.add(new Term(field, ((org.apache.lucene.analysis.Token)\n              list.get(i)).term()));\n        }\n        return q;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    Vector v = new Vector();\n    final org.apache.lucene.analysis.Token reusableToken = new org.apache.lucene.analysis.Token();\n    org.apache.lucene.analysis.Token nextToken;\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    while (true) {\n      try {\n        nextToken = source.next(reusableToken);\n      }\n      catch (IOException e) {\n        nextToken = null;\n      }\n      if (nextToken == null)\n        break;\n      v.addElement(nextToken.clone());\n      if (nextToken.getPositionIncrement() == 1)\n        positionCount++;\n      else\n        severalTokensAtSamePosition = true;\n    }\n    try {\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (v.size() == 0)\n      return null;\n    else if (v.size() == 1) {\n      nextToken = (org.apache.lucene.analysis.Token) v.elementAt(0);\n      return new TermQuery(new Term(field, nextToken.term()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < v.size(); i++) {\n            nextToken = (org.apache.lucene.analysis.Token) v.elementAt(i);\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, nextToken.term()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List multiTerms = new ArrayList();\n          for (int i = 0; i < v.size(); i++) {\n            nextToken = (org.apache.lucene.analysis.Token) v.elementAt(i);\n            if (nextToken.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, nextToken.term()));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < v.size(); i++) {\n          q.add(new Term(field, ((org.apache.lucene.analysis.Token)\n              v.elementAt(i)).term()));\n\n        }\n        return q;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List list = new ArrayList();\n    final org.apache.lucene.analysis.Token reusableToken = new org.apache.lucene.analysis.Token();\n    org.apache.lucene.analysis.Token nextToken;\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    while (true) {\n      try {\n        nextToken = source.next(reusableToken);\n      }\n      catch (IOException e) {\n        nextToken = null;\n      }\n      if (nextToken == null)\n        break;\n      list.add(nextToken.clone());\n      if (nextToken.getPositionIncrement() == 1)\n        positionCount++;\n      else\n        severalTokensAtSamePosition = true;\n    }\n    try {\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      nextToken = (org.apache.lucene.analysis.Token) list.get(0);\n      return new TermQuery(new Term(field, nextToken.term()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < list.size(); i++) {\n            nextToken = (org.apache.lucene.analysis.Token) list.get(i);\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, nextToken.term()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List multiTerms = new ArrayList();\n          for (int i = 0; i < list.size(); i++) {\n            nextToken = (org.apache.lucene.analysis.Token) list.get(i);\n            if (nextToken.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, nextToken.term()));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          q.add(new Term(field, ((org.apache.lucene.analysis.Token)\n              list.get(i)).term()));\n        }\n        return q;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List list = new ArrayList();\n    final org.apache.lucene.analysis.Token reusableToken = new org.apache.lucene.analysis.Token();\n    org.apache.lucene.analysis.Token nextToken;\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    while (true) {\n      try {\n        nextToken = source.next(reusableToken);\n      }\n      catch (IOException e) {\n        nextToken = null;\n      }\n      if (nextToken == null)\n        break;\n      list.add(nextToken.clone());\n      if (nextToken.getPositionIncrement() == 1)\n        positionCount++;\n      else\n        severalTokensAtSamePosition = true;\n    }\n    try {\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      nextToken = (org.apache.lucene.analysis.Token) list.get(0);\n      return new TermQuery(new Term(field, nextToken.term()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < list.size(); i++) {\n            nextToken = (org.apache.lucene.analysis.Token) list.get(i);\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, nextToken.term()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List multiTerms = new ArrayList();\n          for (int i = 0; i < list.size(); i++) {\n            nextToken = (org.apache.lucene.analysis.Token) list.get(i);\n            if (nextToken.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, nextToken.term()));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          q.add(new Term(field, ((org.apache.lucene.analysis.Token)\n              list.get(i)).term()));\n        }\n        return q;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}