{"path":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#testSortedNumericNPE().mjava","commits":[{"id":"19f3a6662cfe349d2b0d5f96e310f593cd99a9f1","date":1484944029,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#testSortedNumericNPE().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortedNumericNPE() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    double[] nums = {-1.7147449030215377E-208, -1.6887024655302576E-11, 1.534911516604164E113, 0.0,\n        2.6947996404505155E-166, -2.649722021970773E306, 6.138239235731689E-198, 2.3967090122610808E111};\n    for (int i = 0; i < nums.length; ++i) {\n      Document doc = new Document();\n      doc.add(new SortedNumericDocValuesField(\"dv\", NumericUtils.doubleToSortableLong(nums[i])));\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    final long lo = NumericUtils.doubleToSortableLong(8.701032080293731E-226);\n    final long hi = NumericUtils.doubleToSortableLong(2.0801416404385346E-41);\n    \n    Query query = SortedNumericDocValuesField.newRangeQuery(\"dv\", lo, hi);\n    // TODO: assert expected matches\n    searcher.search(query, searcher.reader.maxDoc(), Sort.INDEXORDER);\n\n    // swap order, should still work\n    query = SortedNumericDocValuesField.newRangeQuery(\"dv\", hi, lo);\n    // TODO: assert expected matches\n    searcher.search(query, searcher.reader.maxDoc(), Sort.INDEXORDER);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#testSortedNumericNPE().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortedNumericNPE() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    double[] nums = {-1.7147449030215377E-208, -1.6887024655302576E-11, 1.534911516604164E113, 0.0,\n        2.6947996404505155E-166, -2.649722021970773E306, 6.138239235731689E-198, 2.3967090122610808E111};\n    for (int i = 0; i < nums.length; ++i) {\n      Document doc = new Document();\n      doc.add(new SortedNumericDocValuesField(\"dv\", NumericUtils.doubleToSortableLong(nums[i])));\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    final long lo = NumericUtils.doubleToSortableLong(8.701032080293731E-226);\n    final long hi = NumericUtils.doubleToSortableLong(2.0801416404385346E-41);\n    \n    Query query = SortedNumericDocValuesField.newRangeQuery(\"dv\", lo, hi);\n    // TODO: assert expected matches\n    searcher.search(query, searcher.reader.maxDoc(), Sort.INDEXORDER);\n\n    // swap order, should still work\n    query = SortedNumericDocValuesField.newRangeQuery(\"dv\", hi, lo);\n    // TODO: assert expected matches\n    searcher.search(query, searcher.reader.maxDoc(), Sort.INDEXORDER);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9970073fd3c04efd7374f975e45a61084b169ce9","date":1499179453,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#testSortedNumericNPE().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#testSortedNumericNPE().mjava","sourceNew":"  public void testSortedNumericNPE() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    double[] nums = {-1.7147449030215377E-208, -1.6887024655302576E-11, 1.534911516604164E113, 0.0,\n        2.6947996404505155E-166, -2.649722021970773E306, 6.138239235731689E-198, 2.3967090122610808E111};\n    for (int i = 0; i < nums.length; ++i) {\n      Document doc = new Document();\n      doc.add(new SortedNumericDocValuesField(\"dv\", NumericUtils.doubleToSortableLong(nums[i])));\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    final long lo = NumericUtils.doubleToSortableLong(8.701032080293731E-226);\n    final long hi = NumericUtils.doubleToSortableLong(2.0801416404385346E-41);\n    \n    Query query = SortedNumericDocValuesField.newSlowRangeQuery(\"dv\", lo, hi);\n    // TODO: assert expected matches\n    searcher.search(query, searcher.reader.maxDoc(), Sort.INDEXORDER);\n\n    // swap order, should still work\n    query = SortedNumericDocValuesField.newSlowRangeQuery(\"dv\", hi, lo);\n    // TODO: assert expected matches\n    searcher.search(query, searcher.reader.maxDoc(), Sort.INDEXORDER);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSortedNumericNPE() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    double[] nums = {-1.7147449030215377E-208, -1.6887024655302576E-11, 1.534911516604164E113, 0.0,\n        2.6947996404505155E-166, -2.649722021970773E306, 6.138239235731689E-198, 2.3967090122610808E111};\n    for (int i = 0; i < nums.length; ++i) {\n      Document doc = new Document();\n      doc.add(new SortedNumericDocValuesField(\"dv\", NumericUtils.doubleToSortableLong(nums[i])));\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    final long lo = NumericUtils.doubleToSortableLong(8.701032080293731E-226);\n    final long hi = NumericUtils.doubleToSortableLong(2.0801416404385346E-41);\n    \n    Query query = SortedNumericDocValuesField.newRangeQuery(\"dv\", lo, hi);\n    // TODO: assert expected matches\n    searcher.search(query, searcher.reader.maxDoc(), Sort.INDEXORDER);\n\n    // swap order, should still work\n    query = SortedNumericDocValuesField.newRangeQuery(\"dv\", hi, lo);\n    // TODO: assert expected matches\n    searcher.search(query, searcher.reader.maxDoc(), Sort.INDEXORDER);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#testSortedNumericNPE().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesQueries#testSortedNumericNPE().mjava","sourceNew":"  public void testSortedNumericNPE() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    double[] nums = {-1.7147449030215377E-208, -1.6887024655302576E-11, 1.534911516604164E113, 0.0,\n        2.6947996404505155E-166, -2.649722021970773E306, 6.138239235731689E-198, 2.3967090122610808E111};\n    for (int i = 0; i < nums.length; ++i) {\n      Document doc = new Document();\n      doc.add(new SortedNumericDocValuesField(\"dv\", NumericUtils.doubleToSortableLong(nums[i])));\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    final long lo = NumericUtils.doubleToSortableLong(8.701032080293731E-226);\n    final long hi = NumericUtils.doubleToSortableLong(2.0801416404385346E-41);\n    \n    Query query = SortedNumericDocValuesField.newSlowRangeQuery(\"dv\", lo, hi);\n    // TODO: assert expected matches\n    searcher.search(query, searcher.reader.maxDoc(), Sort.INDEXORDER);\n\n    // swap order, should still work\n    query = SortedNumericDocValuesField.newSlowRangeQuery(\"dv\", hi, lo);\n    // TODO: assert expected matches\n    searcher.search(query, searcher.reader.maxDoc(), Sort.INDEXORDER);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSortedNumericNPE() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    double[] nums = {-1.7147449030215377E-208, -1.6887024655302576E-11, 1.534911516604164E113, 0.0,\n        2.6947996404505155E-166, -2.649722021970773E306, 6.138239235731689E-198, 2.3967090122610808E111};\n    for (int i = 0; i < nums.length; ++i) {\n      Document doc = new Document();\n      doc.add(new SortedNumericDocValuesField(\"dv\", NumericUtils.doubleToSortableLong(nums[i])));\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    final long lo = NumericUtils.doubleToSortableLong(8.701032080293731E-226);\n    final long hi = NumericUtils.doubleToSortableLong(2.0801416404385346E-41);\n    \n    Query query = SortedNumericDocValuesField.newRangeQuery(\"dv\", lo, hi);\n    // TODO: assert expected matches\n    searcher.search(query, searcher.reader.maxDoc(), Sort.INDEXORDER);\n\n    // swap order, should still work\n    query = SortedNumericDocValuesField.newRangeQuery(\"dv\", hi, lo);\n    // TODO: assert expected matches\n    searcher.search(query, searcher.reader.maxDoc(), Sort.INDEXORDER);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["19f3a6662cfe349d2b0d5f96e310f593cd99a9f1","9970073fd3c04efd7374f975e45a61084b169ce9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9970073fd3c04efd7374f975e45a61084b169ce9":["19f3a6662cfe349d2b0d5f96e310f593cd99a9f1"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","19f3a6662cfe349d2b0d5f96e310f593cd99a9f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9970073fd3c04efd7374f975e45a61084b169ce9"],"19f3a6662cfe349d2b0d5f96e310f593cd99a9f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","19f3a6662cfe349d2b0d5f96e310f593cd99a9f1"],"9970073fd3c04efd7374f975e45a61084b169ce9":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"19f3a6662cfe349d2b0d5f96e310f593cd99a9f1":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","9970073fd3c04efd7374f975e45a61084b169ce9","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}