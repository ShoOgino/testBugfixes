{"path":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","commits":[{"id":"65a0cfedd6477720b24ec816e74d8383ca4fddb8","date":1097422436,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc4.add(new Field(\"body\", \"bluebird pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3);\n        assertEquals(2, result.length()); // blueberry pizza, blueberry chewing gum\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13bd446a4d23827fe298e40d3724feb201bc2bb1","date":1100086765,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc4.add(new Field(\"body\", \"bluebird pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3);\n        assertEquals(2, result.length()); // blueberry pizza, blueberry chewing gum\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc4.add(new Field(\"body\", \"bluebird pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3);\n        assertEquals(2, result.length()); // blueberry pizza, blueberry chewing gum\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73f76e461caa6ba6efb6c2de8fe4f76d042347aa","date":1100094923,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        Document doc6 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc5.add(new Field(\"body\", \"bluebird pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc6.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.addDocument(doc6);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3);\n        assertEquals(2, result.length()); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc4.add(new Field(\"body\", \"bluebird pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc5.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3);\n        assertEquals(2, result.length()); // blueberry pizza, blueberry chewing gum\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8045c3c4f9e1f3e5058a562f30523a79b095fdfb","date":1100095163,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"    public void testPhrasePrefix() throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3);\n        assertEquals(2, result.length()); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public void testPhrasePrefix()\n        throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        Document doc1 = new Document();\n        Document doc2 = new Document();\n        Document doc3 = new Document();\n        Document doc4 = new Document();\n        Document doc5 = new Document();\n        Document doc6 = new Document();\n        doc1.add(new Field(\"body\", \"blueberry pie\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc2.add(new Field(\"body\", \"blueberry strudel\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc3.add(new Field(\"body\", \"blueberry pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc4.add(new Field(\"body\", \"blueberry chewing gum\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc5.add(new Field(\"body\", \"bluebird pizza\", Field.Store.YES, Field.Index.TOKENIZED));\n        doc6.add(new Field(\"body\", \"piccadilly circus\", Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc1);\n        writer.addDocument(doc2);\n        writer.addDocument(doc3);\n        writer.addDocument(doc4);\n        writer.addDocument(doc5);\n        writer.addDocument(doc6);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3);\n        assertEquals(2, result.length()); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b11dfe4b1ae49820651ebe41e3df6697432964e","date":1100099907,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"    public void testPhrasePrefix() throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3);\n        assertEquals(2, result.length()); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3);\n        assertEquals(3, result.length()); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","sourceOld":"    public void testPhrasePrefix() throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3);\n        assertEquals(2, result.length()); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a4aa4ed6fdf015a4b562fdbcb28be7e0c060879","date":1101325276,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"    public void testPhrasePrefix() throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3);\n        assertEquals(2, result.length()); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3);\n        assertEquals(3, result.length()); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","sourceOld":"    public void testPhrasePrefix() throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix + \"*\"));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3);\n        assertEquals(2, result.length()); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3);\n        assertEquals(3, result.length()); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78186e8256d3f75ec4673d08ff89841f1b6ed13a","date":1106177572,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3);\n        assertEquals(2, result.length()); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3);\n        assertEquals(3, result.length()); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","sourceOld":"    public void testPhrasePrefix() throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3);\n        assertEquals(2, result.length()); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3);\n        assertEquals(3, result.length()); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3);\n        assertEquals(2, result.length()); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3);\n        assertEquals(3, result.length()); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","sourceOld":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3);\n        assertEquals(2, result.length()); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3);\n        assertEquals(3, result.length()); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","sourceOld":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        Hits result;\n        result = searcher.search(query1);\n        assertEquals(2, result.length());\n        result = searcher.search(query2);\n        assertEquals(0, result.length());\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3);\n        assertEquals(2, result.length()); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3);\n        assertEquals(3, result.length()); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","sourceOld":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","sourceOld":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add(termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","sourceOld":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add(termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","sourceOld":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add(termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add(termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","sourceOld":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add(termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add(termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","sourceOld":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add(termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add(termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","sourceOld":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add(termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add(termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","sourceOld":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add(termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add(termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","sourceOld":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList<Term> termsWithPrefix = new LinkedList<Term>();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add(termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add(termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"78186e8256d3f75ec4673d08ff89841f1b6ed13a":["1a4aa4ed6fdf015a4b562fdbcb28be7e0c060879"],"13bd446a4d23827fe298e40d3724feb201bc2bb1":["65a0cfedd6477720b24ec816e74d8383ca4fddb8"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["5af07783dbc171e26a694c4f7d735e30c2769faa","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"65a0cfedd6477720b24ec816e74d8383ca4fddb8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["78186e8256d3f75ec4673d08ff89841f1b6ed13a"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["0a046c0c310bc77931fc8441bd920053b607dd14"],"8b11dfe4b1ae49820651ebe41e3df6697432964e":["8045c3c4f9e1f3e5058a562f30523a79b095fdfb"],"8045c3c4f9e1f3e5058a562f30523a79b095fdfb":["73f76e461caa6ba6efb6c2de8fe4f76d042347aa"],"1a4aa4ed6fdf015a4b562fdbcb28be7e0c060879":["8b11dfe4b1ae49820651ebe41e3df6697432964e"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"73f76e461caa6ba6efb6c2de8fe4f76d042347aa":["13bd446a4d23827fe298e40d3724feb201bc2bb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"78186e8256d3f75ec4673d08ff89841f1b6ed13a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"13bd446a4d23827fe298e40d3724feb201bc2bb1":["73f76e461caa6ba6efb6c2de8fe4f76d042347aa"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"65a0cfedd6477720b24ec816e74d8383ca4fddb8":["13bd446a4d23827fe298e40d3724feb201bc2bb1"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"8b11dfe4b1ae49820651ebe41e3df6697432964e":["1a4aa4ed6fdf015a4b562fdbcb28be7e0c060879"],"8045c3c4f9e1f3e5058a562f30523a79b095fdfb":["8b11dfe4b1ae49820651ebe41e3df6697432964e"],"1a4aa4ed6fdf015a4b562fdbcb28be7e0c060879":["78186e8256d3f75ec4673d08ff89841f1b6ed13a"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["65a0cfedd6477720b24ec816e74d8383ca4fddb8"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"73f76e461caa6ba6efb6c2de8fe4f76d042347aa":["8045c3c4f9e1f3e5058a562f30523a79b095fdfb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}