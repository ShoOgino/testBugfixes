{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateString#replaceTokens(String,VariableResolver).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateString#replaceTokens(String,VariableResolver).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a string with all variables replaced by the known values. An\n   * unknown variable is replaced by an empty string.\n   *\n   * @param string\n   * @param resolver\n   * @return\n   */\n  public String replaceTokens(String string, VariableResolver resolver) {\n    TemplateString ts = cache.get(string);\n    if (ts == null) {\n      ts = new TemplateString(string);\n      cache.put(string, ts);\n    }\n    return ts.fillTokens(resolver);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1","date":1217855899,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateString#replaceTokens(String,VariableResolver).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateString#replaceTokens(String,VariableResolver).mjava","sourceNew":"  /**\n   * Returns a string with all variables replaced by the known values. An\n   * unknown variable is replaced by an empty string.\n   *\n   * @param string the String to be resolved\n   * @param resolver the VariableResolver instance to be used for evaluation\n   * @return the string with all variables replaced\n   */\n  public String replaceTokens(String string, VariableResolver resolver) {\n    TemplateString ts = cache.get(string);\n    if (ts == null) {\n      ts = new TemplateString(string);\n      cache.put(string, ts);\n    }\n    return ts.fillTokens(resolver);\n  }\n\n","sourceOld":"  /**\n   * Returns a string with all variables replaced by the known values. An\n   * unknown variable is replaced by an empty string.\n   *\n   * @param string\n   * @param resolver\n   * @return\n   */\n  public String replaceTokens(String string, VariableResolver resolver) {\n    TemplateString ts = cache.get(string);\n    if (ts == null) {\n      ts = new TemplateString(string);\n      cache.put(string, ts);\n    }\n    return ts.fillTokens(resolver);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e886fb6afe33a296f3d21a4c18694ecb64545fab","date":1226485789,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateString#replaceTokens(String,VariableResolver).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateString#replaceTokens(String,VariableResolver).mjava","sourceNew":"  /**\n   * Returns a string with all variables replaced by the known values. An\n   * unknown variable is replaced by an empty string.\n   *\n   * @param string the String to be resolved\n   * @param resolver the VariableResolver instance to be used for evaluation\n   * @return the string with all variables replaced\n   */\n  public String replaceTokens(String string, VariableResolver resolver) {\n    if (string == null)\n      return null;\n    TemplateString ts = cache.get(string);\n    if (ts == null) {\n      ts = new TemplateString(string);\n      cache.put(string, ts);\n    }\n    return ts.fillTokens(resolver);\n  }\n\n","sourceOld":"  /**\n   * Returns a string with all variables replaced by the known values. An\n   * unknown variable is replaced by an empty string.\n   *\n   * @param string the String to be resolved\n   * @param resolver the VariableResolver instance to be used for evaluation\n   * @return the string with all variables replaced\n   */\n  public String replaceTokens(String string, VariableResolver resolver) {\n    TemplateString ts = cache.get(string);\n    if (ts == null) {\n      ts = new TemplateString(string);\n      cache.put(string, ts);\n    }\n    return ts.fillTokens(resolver);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateString#replaceTokens(String,VariableResolver).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/TemplateString#replaceTokens(String,VariableResolver).mjava","sourceNew":"  /**\n   * Returns a string with all variables replaced by the known values. An\n   * unknown variable is replaced by an empty string.\n   *\n   * @param string the String to be resolved\n   * @param resolver the VariableResolver instance to be used for evaluation\n   * @return the string with all variables replaced\n   */\n  public String replaceTokens(String string, VariableResolver resolver) {\n    if (string == null)\n      return null;\n    TemplateString ts = cache.get(string);\n    if (ts == null) {\n      ts = new TemplateString(string);\n      cache.put(string, ts);\n    }\n    return ts.fillTokens(resolver);\n  }\n\n","sourceOld":"  /**\n   * Returns a string with all variables replaced by the known values. An\n   * unknown variable is replaced by an empty string.\n   *\n   * @param string the String to be resolved\n   * @param resolver the VariableResolver instance to be used for evaluation\n   * @return the string with all variables replaced\n   */\n  public String replaceTokens(String string, VariableResolver resolver) {\n    if (string == null)\n      return null;\n    TemplateString ts = cache.get(string);\n    if (ts == null) {\n      ts = new TemplateString(string);\n      cache.put(string, ts);\n    }\n    return ts.fillTokens(resolver);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e886fb6afe33a296f3d21a4c18694ecb64545fab"],"e886fb6afe33a296f3d21a4c18694ecb64545fab":["1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1"],"1f7c7a3f7be6c9070e6f91ee35b98945ffe417c1":["e886fb6afe33a296f3d21a4c18694ecb64545fab"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"e886fb6afe33a296f3d21a4c18694ecb64545fab":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}