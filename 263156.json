{"path":"lucene/core/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(int[],int[][],DocValues[],MergeContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(int[],int[][],DocValues[],MergeContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(int[],int[][],DocValues[],MergeContext).mjava","sourceNew":"  public static List<SortedSourceSlice> buildSlices(int[] docBases ,int[][] docMaps,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n      }\n      createOrdMapping(docBases, docMaps, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","sourceOld":"  public static List<SortedSourceSlice> buildSlices(int[] docBases ,int[][] docMaps,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n      }\n      createOrdMapping(docBases, docMaps, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7523dd562634d9145b67eb4c8b3b3db2340532b","date":1330467618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(int[],int[][],DocValues[],MergeContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(int[],int[][],DocValues[],MergeContext).mjava","sourceNew":"  public static List<SortedSourceSlice> buildSlices(int[] docBases, int[][] docMaps,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n      }\n      createOrdMapping(docBases, docMaps, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","sourceOld":"  public static List<SortedSourceSlice> buildSlices(int[] docBases ,int[][] docMaps,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n      }\n      createOrdMapping(docBases, docMaps, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(int[],int[][],DocValues[],MergeContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(int[],int[][],DocValues[],MergeContext).mjava","sourceNew":"  public static List<SortedSourceSlice> buildSlices(int[] docBases, int[][] docMaps,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n      }\n      createOrdMapping(docBases, docMaps, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","sourceOld":"  public static List<SortedSourceSlice> buildSlices(int[] docBases ,int[][] docMaps,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n      }\n      createOrdMapping(docBases, docMaps, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e25729298aefe258b77e1b2676ae1088c1a2c49d","date":1338320376,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(int[],MergeState.DocMap[],DocValues[],MergeContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(int[],int[][],DocValues[],MergeContext).mjava","sourceNew":"  public static List<SortedSourceSlice> buildSlices(\n      int[] docBases, MergeState.DocMap[] docMaps,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n      }\n      createOrdMapping(docBases, docMaps, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","sourceOld":"  public static List<SortedSourceSlice> buildSlices(int[] docBases, int[][] docMaps,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n      }\n      createOrdMapping(docBases, docMaps, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e25729298aefe258b77e1b2676ae1088c1a2c49d":["b7523dd562634d9145b67eb4c8b3b3db2340532b"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b7523dd562634d9145b67eb4c8b3b3db2340532b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7523dd562634d9145b67eb4c8b3b3db2340532b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e25729298aefe258b77e1b2676ae1088c1a2c49d"]},"commit2Childs":{"e25729298aefe258b77e1b2676ae1088c1a2c49d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7523dd562634d9145b67eb4c8b3b3db2340532b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7523dd562634d9145b67eb4c8b3b3db2340532b":["e25729298aefe258b77e1b2676ae1088c1a2c49d","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}