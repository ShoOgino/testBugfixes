{"path":"lucene/src/test/org/apache/lucene/index/TestThreadedForceMerge#runTest(Random,Directory).mjava","commits":[{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedForceMerge#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedOptimize#runTest(Random,Directory).mjava","sourceNew":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      final FieldType customType = new FieldType(StringField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      \n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), customType));\n        d.add(newField(\"contents\", English.intToEnglish(i), customType));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.forceMerge(1, false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, customType));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), customType));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.forceMerge(1);\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals(\"reader=\" + reader, 1, reader.getSequentialSubReaders().length);\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      final FieldType customType = new FieldType(StringField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      \n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), customType));\n        d.add(newField(\"contents\", English.intToEnglish(i), customType));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.optimize(false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, customType));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), customType));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.optimize();\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertTrue(\"reader=\" + reader, reader.isOptimized());\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedForceMerge#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedForceMerge#runTest(Random,Directory).mjava","sourceNew":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      final FieldType customType = new FieldType(StringField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      \n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), customType));\n        d.add(newField(\"contents\", English.intToEnglish(i), customType));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.forceMerge(1, false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, customType));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), customType));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.forceMerge(1);\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory);\n      assertEquals(\"reader=\" + reader, 1, reader.getSequentialSubReaders().length);\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      final FieldType customType = new FieldType(StringField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      \n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), customType));\n        d.add(newField(\"contents\", English.intToEnglish(i), customType));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.forceMerge(1, false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, customType));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), customType));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.forceMerge(1);\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals(\"reader=\" + reader, 1, reader.getSequentialSubReaders().length);\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedForceMerge#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedForceMerge#runTest(Random,Directory).mjava","sourceNew":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      final FieldType customType = new FieldType(StringField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      \n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), customType));\n        d.add(newField(\"contents\", English.intToEnglish(i), customType));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.forceMerge(1, false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, customType));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), customType));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.forceMerge(1);\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory);\n      assertEquals(\"reader=\" + reader, 1, reader.getSequentialSubReaders().length);\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      final FieldType customType = new FieldType(StringField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      \n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), customType));\n        d.add(newField(\"contents\", English.intToEnglish(i), customType));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.forceMerge(1, false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, customType));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), customType));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.forceMerge(1);\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals(\"reader=\" + reader, 1, reader.getSequentialSubReaders().length);\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedForceMerge#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedForceMerge#runTest(Random,Directory).mjava","sourceNew":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      final FieldType customType = new FieldType(StringField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      \n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), customType));\n        d.add(newField(\"contents\", English.intToEnglish(i), customType));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.forceMerge(1, false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, customType));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), customType));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.forceMerge(1);\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory);\n      assertEquals(\"reader=\" + reader, 1, reader.getSequentialSubReaders().length);\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      final FieldType customType = new FieldType(StringField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      \n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), customType));\n        d.add(newField(\"contents\", English.intToEnglish(i), customType));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.forceMerge(1, false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, customType));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), customType));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.forceMerge(1);\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory, true);\n      assertEquals(\"reader=\" + reader, 1, reader.getSequentialSubReaders().length);\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2a5711e161c6abfe89da0ca6f1f4fddad50c503","date":1327856885,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedForceMerge#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedForceMerge#runTest(Random,Directory).mjava","sourceNew":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      final FieldType customType = new FieldType(StringField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      \n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), customType));\n        d.add(newField(\"contents\", English.intToEnglish(i), customType));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.forceMerge(1, false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, customType));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), customType));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.forceMerge(1);\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      DirectoryReader reader = IndexReader.open(directory);\n      assertEquals(\"reader=\" + reader, 1, reader.getSequentialSubReaders().length);\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      final FieldType customType = new FieldType(StringField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      \n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), customType));\n        d.add(newField(\"contents\", English.intToEnglish(i), customType));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.forceMerge(1, false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, customType));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), customType));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.forceMerge(1);\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory);\n      assertEquals(\"reader=\" + reader, 1, reader.getSequentialSubReaders().length);\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestThreadedForceMerge#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedForceMerge#runTest(Random,Directory).mjava","sourceNew":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      final FieldType customType = new FieldType(StringField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      \n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), customType));\n        d.add(newField(\"contents\", English.intToEnglish(i), customType));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.forceMerge(1, false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, customType));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), customType));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.forceMerge(1);\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      DirectoryReader reader = IndexReader.open(directory);\n      assertEquals(\"reader=\" + reader, 1, reader.getSequentialSubReaders().length);\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      final FieldType customType = new FieldType(StringField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      \n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), customType));\n        d.add(newField(\"contents\", English.intToEnglish(i), customType));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.forceMerge(1, false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, customType));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), customType));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.forceMerge(1);\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      IndexReader reader = IndexReader.open(directory);\n      assertEquals(\"reader=\" + reader, 1, reader.getSequentialSubReaders().length);\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestThreadedForceMerge#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestThreadedForceMerge#runTest(Random,Directory).mjava","sourceNew":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      final FieldType customType = new FieldType(StringField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      \n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), customType));\n        d.add(newField(\"contents\", English.intToEnglish(i), customType));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.forceMerge(1, false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, customType));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), customType));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.forceMerge(1);\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      DirectoryReader reader = IndexReader.open(directory);\n      assertEquals(\"reader=\" + reader, 1, reader.getSequentialSubReaders().length);\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","sourceOld":"  public void runTest(Random random, Directory directory) throws Exception {\n\n    IndexWriter writer = new IndexWriter(\n        directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, ANALYZER).\n            setOpenMode(OpenMode.CREATE).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy())\n    );\n\n    for(int iter=0;iter<NUM_ITER;iter++) {\n      final int iterFinal = iter;\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(1000);\n\n      final FieldType customType = new FieldType(StringField.TYPE_STORED);\n      customType.setOmitNorms(true);\n      \n      for(int i=0;i<200;i++) {\n        Document d = new Document();\n        d.add(newField(\"id\", Integer.toString(i), customType));\n        d.add(newField(\"contents\", English.intToEnglish(i), customType));\n        writer.addDocument(d);\n      }\n\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      Thread[] threads = new Thread[NUM_THREADS];\n      \n      for(int i=0;i<NUM_THREADS;i++) {\n        final int iFinal = i;\n        final IndexWriter writerFinal = writer;\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              for(int j=0;j<NUM_ITER2;j++) {\n                writerFinal.forceMerge(1, false);\n                for(int k=0;k<17*(1+iFinal);k++) {\n                  Document d = new Document();\n                  d.add(newField(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k, customType));\n                  d.add(newField(\"contents\", English.intToEnglish(iFinal+k), customType));\n                  writerFinal.addDocument(d);\n                }\n                for(int k=0;k<9*(1+iFinal);k++)\n                  writerFinal.deleteDocuments(new Term(\"id\", iterFinal + \"_\" + iFinal + \"_\" + j + \"_\" + k));\n                writerFinal.forceMerge(1);\n              }\n            } catch (Throwable t) {\n              setFailed();\n              System.out.println(Thread.currentThread().getName() + \": hit exception\");\n              t.printStackTrace(System.out);\n            }\n          }\n        };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].join();\n\n      assertTrue(!failed);\n\n      final int expectedDocCount = (int) ((1+iter)*(200+8*NUM_ITER2*(NUM_THREADS/2.0)*(1+NUM_THREADS)));\n\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.numDocs());\n      assertEquals(\"index=\" + writer.segString() + \" numDocs=\" + writer.numDocs() + \" maxDoc=\" + writer.maxDoc() + \" config=\" + writer.getConfig(), expectedDocCount, writer.maxDoc());\n\n      writer.close();\n      writer = new IndexWriter(directory, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, ANALYZER).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(2));\n      \n      DirectoryReader reader = IndexReader.open(directory);\n      assertEquals(\"reader=\" + reader, 1, reader.getSequentialSubReaders().length);\n      assertEquals(expectedDocCount, reader.numDocs());\n      reader.close();\n    }\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","c2a5711e161c6abfe89da0ca6f1f4fddad50c503"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c2a5711e161c6abfe89da0ca6f1f4fddad50c503":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5cab9a86bd67202d20b6adc463008c8e982b070a","c2a5711e161c6abfe89da0ca6f1f4fddad50c503"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c2a5711e161c6abfe89da0ca6f1f4fddad50c503":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}