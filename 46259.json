{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller.LocalFsFileFetcher#fetchFile().mjava","commits":[{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.LocalFsFileFetcher#fetchFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists() && lastmodified > 0)\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.LocalFsFileFetcher#fetchFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists() && lastmodified > 0)\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.LocalFsFileFetcher#fetchFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.LocalFsFileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          @Override\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.LocalFsFileFetcher#fetchFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.LocalFsFileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          @Override\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dea8e36e8c36d610840396c282a5affe3f722f4e","date":1422297045,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.LocalFsFileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    public void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup succeeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          @Override\n          public void run() {\n            try {\n              file.sync();\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          @Override\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d9405f486872f1e416304dfe389741f4ee2f8a4d","7530de27b87b961b51f01bd1299b7004d46e8823"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2126b84bd093fa3d921582a109a0ee578c28126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dea8e36e8c36d610840396c282a5affe3f722f4e"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"dea8e36e8c36d610840396c282a5affe3f722f4e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f2126b84bd093fa3d921582a109a0ee578c28126","7530de27b87b961b51f01bd1299b7004d46e8823"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","dea8e36e8c36d610840396c282a5affe3f722f4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}