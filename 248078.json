{"path":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storeTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETVPOS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storePositionWithTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, STORETVOFF);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storeOffsetWithTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storePayloads), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitNorms), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        if (!fi.hasDocValues()) {\n          SimpleTextUtil.write(out, \"false\", scratch);\n        } else {\n          SimpleTextUtil.write(out, fi.getDocValuesType().toString(), scratch);\n        }\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        SimpleTextUtil.write(out, fi.indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storeTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETVPOS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storePositionWithTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, STORETVOFF);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storeOffsetWithTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storePayloads), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitNorms), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        if (!fi.hasDocValues()) {\n          SimpleTextUtil.write(out, \"false\", scratch);\n        } else {\n          SimpleTextUtil.write(out, fi.getDocValuesType().toString(), scratch);\n        }\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        SimpleTextUtil.write(out, fi.indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storeTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storePayloads), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitNorms), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        if (!fi.hasDocValues()) {\n          SimpleTextUtil.write(out, \"false\", scratch);\n        } else {\n          SimpleTextUtil.write(out, fi.getDocValuesType().toString(), scratch);\n        }\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        SimpleTextUtil.write(out, fi.indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storeTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETVPOS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storePositionWithTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, STORETVOFF);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storeOffsetWithTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storePayloads), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitNorms), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        if (!fi.hasDocValues()) {\n          SimpleTextUtil.write(out, \"false\", scratch);\n        } else {\n          SimpleTextUtil.write(out, fi.getDocValuesType().toString(), scratch);\n        }\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        SimpleTextUtil.write(out, fi.indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.storePayloads;\n\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storeTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storePayloads), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitNorms), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        if (!fi.hasDocValues()) {\n          SimpleTextUtil.write(out, \"false\", scratch);\n        } else {\n          SimpleTextUtil.write(out, fi.getDocValuesType().toString(), scratch);\n        }\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        SimpleTextUtil.write(out, fi.indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storeTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storePayloads), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitNorms), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        if (!fi.hasDocValues()) {\n          SimpleTextUtil.write(out, \"false\", scratch);\n        } else {\n          SimpleTextUtil.write(out, fi.getDocValuesType().toString(), scratch);\n        }\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        SimpleTextUtil.write(out, fi.indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.storePayloads;\n\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storeTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storePayloads), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitNorms), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        SimpleTextUtil.write(out, fi.indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.storePayloads;\n\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storeTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storePayloads), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitNorms), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        if (!fi.hasDocValues()) {\n          SimpleTextUtil.write(out, \"false\", scratch);\n        } else {\n          SimpleTextUtil.write(out, fi.getDocValuesType().toString(), scratch);\n        }\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        SimpleTextUtil.write(out, fi.indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.storePayloads;\n\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storeTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storePayloads), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitNorms), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        SimpleTextUtil.write(out, fi.indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.storePayloads;\n\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storeTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storePayloads), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitNorms), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        SimpleTextUtil.write(out, fi.indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"]},"commit2Childs":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}