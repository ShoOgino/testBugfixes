{"path":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase.SlowWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","commits":[{"id":"35425d74dd6cebe2e074b05228429765e67d1b35","date":1425216299,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase.SlowWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      // get a private context that is used to rewrite, createWeight and score eventually\n      final LeafReaderContext privateContext = context.reader().getContext();\n      final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query, false);\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return weight.scorer(privateContext, acceptDocs);\n        }\n\n        @Override\n        public long ramBytesUsed() {\n          return 0L;\n        }\n\n        @Override\n        public Bits bits() throws IOException {\n          if (useBits) {\n            BitDocIdSet.Builder builder = new BitDocIdSet.Builder(context.reader().maxDoc());\n            DocIdSetIterator disi = iterator();\n            if (disi != null) {\n              builder.or(disi);\n            }\n            BitDocIdSet bitset = builder.build();\n            if (bitset == null) {\n              return new Bits.MatchNoBits(context.reader().maxDoc());\n            } else {\n              return bitset.bits();\n            }\n          } else {\n            return null;\n          }\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase.SlowWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      // get a private context that is used to rewrite, createWeight and score eventually\n      final LeafReaderContext privateContext = context.reader().getContext();\n      final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query, false);\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return weight.scorer(privateContext, acceptDocs);\n        }\n\n        @Override\n        public long ramBytesUsed() {\n          return 0L;\n        }\n\n        @Override\n        public Bits bits() throws IOException {\n          if (useBits) {\n            BitDocIdSet.Builder builder = new BitDocIdSet.Builder(context.reader().maxDoc());\n            DocIdSetIterator disi = iterator();\n            if (disi != null) {\n              builder.or(disi);\n            }\n            BitDocIdSet bitset = builder.build();\n            if (bitset == null) {\n              return new Bits.MatchNoBits(context.reader().maxDoc());\n            } else {\n              return bitset.bits();\n            }\n          } else {\n            return null;\n          }\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase.SlowWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase.SlowWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      // get a private context that is used to rewrite, createWeight and score eventually\n      final LeafReaderContext privateContext = context.reader().getContext();\n      final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query, false);\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return weight.scorer(privateContext);\n        }\n\n        @Override\n        public long ramBytesUsed() {\n          return 0L;\n        }\n\n        @Override\n        public Bits bits() throws IOException {\n          if (useBits) {\n            BitDocIdSet.Builder builder = new BitDocIdSet.Builder(context.reader().maxDoc());\n            DocIdSetIterator disi = iterator();\n            if (disi != null) {\n              builder.or(disi);\n            }\n            BitDocIdSet bitset = builder.build();\n            if (bitset == null) {\n              return new Bits.MatchNoBits(context.reader().maxDoc());\n            } else {\n              return bitset.bits();\n            }\n          } else {\n            return null;\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      // get a private context that is used to rewrite, createWeight and score eventually\n      final LeafReaderContext privateContext = context.reader().getContext();\n      final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query, false);\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return weight.scorer(privateContext, acceptDocs);\n        }\n\n        @Override\n        public long ramBytesUsed() {\n          return 0L;\n        }\n\n        @Override\n        public Bits bits() throws IOException {\n          if (useBits) {\n            BitDocIdSet.Builder builder = new BitDocIdSet.Builder(context.reader().maxDoc());\n            DocIdSetIterator disi = iterator();\n            if (disi != null) {\n              builder.or(disi);\n            }\n            BitDocIdSet bitset = builder.build();\n            if (bitset == null) {\n              return new Bits.MatchNoBits(context.reader().maxDoc());\n            } else {\n              return bitset.bits();\n            }\n          } else {\n            return null;\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e91a2d9ed80172872da0f517870da6756289554","date":1436431140,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase.SlowWrapperFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      // get a private context that is used to rewrite, createWeight and score eventually\n      final LeafReaderContext privateContext = context.reader().getContext();\n      final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query, false);\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return weight.scorer(privateContext);\n        }\n\n        @Override\n        public long ramBytesUsed() {\n          return 0L;\n        }\n\n        @Override\n        public Bits bits() throws IOException {\n          if (useBits) {\n            BitDocIdSet.Builder builder = new BitDocIdSet.Builder(context.reader().maxDoc());\n            DocIdSetIterator disi = iterator();\n            if (disi != null) {\n              builder.or(disi);\n            }\n            BitDocIdSet bitset = builder.build();\n            if (bitset == null) {\n              return new Bits.MatchNoBits(context.reader().maxDoc());\n            } else {\n              return bitset.bits();\n            }\n          } else {\n            return null;\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35425d74dd6cebe2e074b05228429765e67d1b35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","35425d74dd6cebe2e074b05228429765e67d1b35"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["35425d74dd6cebe2e074b05228429765e67d1b35"],"0e91a2d9ed80172872da0f517870da6756289554":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e91a2d9ed80172872da0f517870da6756289554"]},"commit2Childs":{"35425d74dd6cebe2e074b05228429765e67d1b35":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0e91a2d9ed80172872da0f517870da6756289554"],"0e91a2d9ed80172872da0f517870da6756289554":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["35425d74dd6cebe2e074b05228429765e67d1b35","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}