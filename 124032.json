{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","commits":[{"id":"fd4c0978a282e44867032b4d99f280a07fa16321","date":1360738062,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    // nocommit\n    iwc.setCodec(_TestUtil.alwaysDocValuesFormat(DocValuesFormat.forName(\"Asserting\"))); \n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    // nocommit: not right\n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["87d6f9603307ae2ad642fb01deedf031320fd0c3","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08df901046e2bf7914ed4e142aa64ca7b2f40114","date":1360778343,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Sorted type: can be retrieved via getTerms() or getTermsIndex()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f9453e226f2896430e77ec8e7837c1441a9aeb0","date":1360788152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    // nocommit\n    iwc.setCodec(_TestUtil.alwaysDocValuesFormat(DocValuesFormat.forName(\"Asserting\"))); \n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    // nocommit: not right\n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    // nocommit\n    iwc.setCodec(_TestUtil.alwaysDocValuesFormat(DocValuesFormat.forName(\"Asserting\"))); \n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    // nocommit: not right\n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb11e4a63ba3891117b5988c50a7a927c27b3656","date":1360788410,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    // nocommit\n    iwc.setCodec(_TestUtil.alwaysDocValuesFormat(DocValuesFormat.forName(\"Asserting\"))); \n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    // nocommit\n    iwc.setCodec(_TestUtil.alwaysDocValuesFormat(DocValuesFormat.forName(\"Asserting\"))); \n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    // nocommit: not right\n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3","date":1361060670,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits instanceof Bits.MatchAllBits);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    // nocommit\n    iwc.setCodec(_TestUtil.alwaysDocValuesFormat(DocValuesFormat.forName(\"Asserting\"))); \n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["87d6f9603307ae2ad642fb01deedf031320fd0c3","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","402ad3ddc9da7b70da1b167667a60ece6a1381fb","402ad3ddc9da7b70da1b167667a60ece6a1381fb","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits instanceof Bits.MatchAllBits);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Sorted type: can be retrieved via getTerms() or getTermsIndex()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60daad1187870cb8dea2344dcd50c29136546f18","date":1361389468,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits instanceof Bits.MatchAllBits);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits instanceof Bits.MatchAllBits);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","402ad3ddc9da7b70da1b167667a60ece6a1381fb","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits instanceof Bits.MatchAllBits);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","402ad3ddc9da7b70da1b167667a60ece6a1381fb","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a7bf5332d569e3d07c4b248462f5d212e26e9af","date":1376929683,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits instanceof Bits.MatchAllBits);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits instanceof Bits.MatchAllBits);\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits instanceof Bits.MatchAllBits);\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87d6f9603307ae2ad642fb01deedf031320fd0c3","date":1377877563,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3","fd4c0978a282e44867032b4d99f280a07fa16321"],"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","402ad3ddc9da7b70da1b167667a60ece6a1381fb","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","402ad3ddc9da7b70da1b167667a60ece6a1381fb","402ad3ddc9da7b70da1b167667a60ece6a1381fb","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    if (defaultCodecSupportsSortedSet()) {\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n      doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    }\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    BytesRef scratch = new BytesRef();\n    \n    // Binary type: can be retrieved via getTerms()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"binary\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    binary.get(0, scratch);\n    assertEquals(\"binary value\", scratch.utf8ToString());\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"binary\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\");\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    try {\n      FieldCache.DEFAULT.getInts(ar, \"sorted\", false);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"sorted\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    binary.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    sorted.get(0, scratch);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\");\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\");\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    Ints numeric = FieldCache.DEFAULT.getInts(ar, \"numeric\", false);\n    assertEquals(42, numeric.get(0));\n    \n    try {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    try {\n      new DocTermOrds(ar, null, \"numeric\");\n      fail();\n    } catch (IllegalStateException expected) {}\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\");\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    if (defaultCodecSupportsSortedSet()) {\n      try {\n        FieldCache.DEFAULT.getInts(ar, \"sortedset\", false);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      try {\n        FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n      \n      try {\n        new DocTermOrds(ar, null, \"sortedset\");\n        fail();\n      } catch (IllegalStateException expected) {}\n    \n      sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\");\n      sortedSet.setDocument(0);\n      assertEquals(0, sortedSet.nextOrd());\n      assertEquals(1, sortedSet.nextOrd());\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n      assertEquals(2, sortedSet.getValueCount());\n    \n      bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\");\n      assertTrue(bits.get(0));\n    }\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["60daad1187870cb8dea2344dcd50c29136546f18"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["60daad1187870cb8dea2344dcd50c29136546f18","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["60daad1187870cb8dea2344dcd50c29136546f18","1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["08df901046e2bf7914ed4e142aa64ca7b2f40114","eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"bb11e4a63ba3891117b5988c50a7a927c27b3656":["0f9453e226f2896430e77ec8e7837c1441a9aeb0"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"60daad1187870cb8dea2344dcd50c29136546f18":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f9453e226f2896430e77ec8e7837c1441a9aeb0":["fd4c0978a282e44867032b4d99f280a07fa16321","08df901046e2bf7914ed4e142aa64ca7b2f40114"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["9faa42f41b6adb98daf009cf99a4ee239189e469"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"fd4c0978a282e44867032b4d99f280a07fa16321":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"08df901046e2bf7914ed4e142aa64ca7b2f40114":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3":["bb11e4a63ba3891117b5988c50a7a927c27b3656"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","87d6f9603307ae2ad642fb01deedf031320fd0c3"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["60daad1187870cb8dea2344dcd50c29136546f18"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb11e4a63ba3891117b5988c50a7a927c27b3656":["eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3"],"60daad1187870cb8dea2344dcd50c29136546f18":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"0f9453e226f2896430e77ec8e7837c1441a9aeb0":["bb11e4a63ba3891117b5988c50a7a927c27b3656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd4c0978a282e44867032b4d99f280a07fa16321","08df901046e2bf7914ed4e142aa64ca7b2f40114"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"fd4c0978a282e44867032b4d99f280a07fa16321":["0f9453e226f2896430e77ec8e7837c1441a9aeb0"],"08df901046e2bf7914ed4e142aa64ca7b2f40114":["ddbb72a33557d2b5bc22ee95daf3281c43560502","0f9453e226f2896430e77ec8e7837c1441a9aeb0"],"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}