{"path":"src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","sourceNew":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    FileReader in = new FileReader(\"sampleDateFacetResponse.xml\");\n    assertTrue(\"in is null and it shouldn't be\", in != null);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n      System.out.println(f.toString());\n      System.out.println(\"GAP: \" + f.getGap());\n      System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    FileReader in = new FileReader(\"sampleDateFacetResponse.xml\");\n    assertTrue(\"in is null and it shouldn't be\", in != null);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n      System.out.println(f.toString());\n      System.out.println(\"GAP: \" + f.getGap());\n      System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","pathOld":"src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testDateFacets().mjava","sourceNew":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    FileReader in = new FileReader(\"sampleDateFacetResponse.xml\");\n    assertTrue(\"in is null and it shouldn't be\", in != null);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n      System.out.println(f.toString());\n      System.out.println(\"GAP: \" + f.getGap());\n      System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDateFacets() throws Exception   {\n    XMLResponseParser parser = new XMLResponseParser();\n    FileReader in = new FileReader(\"sampleDateFacetResponse.xml\");\n    assertTrue(\"in is null and it shouldn't be\", in != null);\n    NamedList<Object> response = parser.processResponse(in);\n    in.close();\n    \n    QueryResponse qr = new QueryResponse(response, null);\n    Assert.assertNotNull(qr);\n    \n    Assert.assertNotNull(qr.getFacetDates());\n    \n    for (FacetField f : qr.getFacetDates()) {\n      Assert.assertNotNull(f);\n      System.out.println(f.toString());\n      System.out.println(\"GAP: \" + f.getGap());\n      System.out.println(\"END: \" + f.getEnd());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}