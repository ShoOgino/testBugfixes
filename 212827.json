{"path":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object).mjava","commits":[{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object value) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    LegacyFieldType ft = new LegacyFieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(field.indexOptions());\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    LegacyFieldType ft = new LegacyFieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(field.indexOptions());\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object value) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: {}\", field);\n      return null;\n    }\n    \n    LegacyFieldType ft = new LegacyFieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(field.indexOptions());\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object value) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    LegacyFieldType ft = new LegacyFieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(field.indexOptions());\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cf6abff5d811b2f5ea26f87655e34b50079e343","date":1601387613,"type":3,"author":"Apoorv Bhawsar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object value) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: {}\", field);\n      return null;\n    }\n    \n    LegacyFieldType ft = new LegacyFieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(field.indexOptions());\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i;\n        if (value instanceof Number) {\n          i = ((Number) value).intValue();\n        } else {\n          try {\n            i = Integer.parseInt(value.toString());\n          } catch (NumberFormatException e) {\n            i = (int) Float.parseFloat(value.toString());\n          }\n        }\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l;\n        if (value instanceof Number) {\n          l = ((Number) value).longValue();\n        } else {\n          try {\n            l = Long.parseLong(value.toString());\n          } catch (NumberFormatException e) {\n            l = (long) Double.parseDouble(value.toString());\n          }\n        }\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object value) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: {}\", field);\n      return null;\n    }\n    \n    LegacyFieldType ft = new LegacyFieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(field.indexOptions());\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de8628eedfca9435e030bf25164f6284189c215e","date":1601403793,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,Object).mjava","sourceNew":"  @Override\n  public IndexableField createField(SchemaField field, Object value) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: {}\", field);\n      return null;\n    }\n    \n    LegacyFieldType ft = new LegacyFieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(field.indexOptions());\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i = (value instanceof Number)\n          ? ((Number)value).intValue()\n          : Integer.parseInt(value.toString());\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l = (value instanceof Number)\n          ? ((Number)value).longValue()\n          : Long.parseLong(value.toString());\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public IndexableField createField(SchemaField field, Object value) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: {}\", field);\n      return null;\n    }\n    \n    LegacyFieldType ft = new LegacyFieldType();\n    ft.setStored(stored);\n    ft.setTokenized(true);\n    ft.setOmitNorms(field.omitNorms());\n    ft.setIndexOptions(field.indexOptions());\n\n    switch (type) {\n      case INTEGER:\n        ft.setNumericType(LegacyNumericType.INT);\n        break;\n      case FLOAT:\n        ft.setNumericType(LegacyNumericType.FLOAT);\n        break;\n      case LONG:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      case DOUBLE:\n        ft.setNumericType(LegacyNumericType.DOUBLE);\n        break;\n      case DATE:\n        ft.setNumericType(LegacyNumericType.LONG);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    ft.setNumericPrecisionStep(precisionStep);\n\n    final org.apache.lucene.document.Field f;\n\n    switch (type) {\n      case INTEGER:\n        int i;\n        if (value instanceof Number) {\n          i = ((Number) value).intValue();\n        } else {\n          try {\n            i = Integer.parseInt(value.toString());\n          } catch (NumberFormatException e) {\n            i = (int) Float.parseFloat(value.toString());\n          }\n        }\n        f = new LegacyIntField(field.getName(), i, ft);\n        break;\n      case FLOAT:\n        float fl = (value instanceof Number)\n          ? ((Number)value).floatValue()\n          : Float.parseFloat(value.toString());\n        f = new LegacyFloatField(field.getName(), fl, ft);\n        break;\n      case LONG:\n        long l;\n        if (value instanceof Number) {\n          l = ((Number) value).longValue();\n        } else {\n          try {\n            l = Long.parseLong(value.toString());\n          } catch (NumberFormatException e) {\n            l = (long) Double.parseDouble(value.toString());\n          }\n        }\n        f = new LegacyLongField(field.getName(), l, ft);\n        break;\n      case DOUBLE:\n        double d = (value instanceof Number)\n          ? ((Number)value).doubleValue()\n          : Double.parseDouble(value.toString());\n        f = new LegacyDoubleField(field.getName(), d, ft);\n        break;\n      case DATE:\n        Date date = (value instanceof Date)\n          ? ((Date)value)\n          : DateMathParser.parseMath(null, value.toString());\n        f = new LegacyLongField(field.getName(), date.getTime(), ft);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9cf6abff5d811b2f5ea26f87655e34b50079e343":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de8628eedfca9435e030bf25164f6284189c215e":["9cf6abff5d811b2f5ea26f87655e34b50079e343"],"575e66bd4b2349209027f6801184da7fc3cba13f":["acd9883560fd89e6448b2b447302fe543040cd4f"],"acd9883560fd89e6448b2b447302fe543040cd4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["de8628eedfca9435e030bf25164f6284189c215e"]},"commit2Childs":{"9cf6abff5d811b2f5ea26f87655e34b50079e343":["de8628eedfca9435e030bf25164f6284189c215e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["acd9883560fd89e6448b2b447302fe543040cd4f"],"de8628eedfca9435e030bf25164f6284189c215e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"575e66bd4b2349209027f6801184da7fc3cba13f":["9cf6abff5d811b2f5ea26f87655e34b50079e343"],"acd9883560fd89e6448b2b447302fe543040cd4f":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}