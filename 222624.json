{"path":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","commits":[{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CoreContainerCoreInitFailuresTest#testFlowBadFromStart().mjava","sourceNew":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir().toString());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(ConfigSolr.fromString(resourceLoader, CONFIGSETS_SOLR_XML), cl);\n    cl.add(new CoreDescriptor(cc, \"col_ok\", \"col_ok\", \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(cc, \"col_bad\", \"col_bad\", \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.create(fixed);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n        0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","sourceOld":"  public void testFlowBadFromStart() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    init(\"bad_flow\");\n\n    // start with two collections: one valid, and one broken\n    File solrXml = new File(solrHome, \"solr.xml\");\n    FileUtils.write(solrXml, BAD_SOLR_XML, IOUtils.UTF_8);\n\n    // our \"ok\" collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_ok\", \"conf\", \"schema.xml\"));\n\n    // our \"bad\" collection\n    ignoreException(Pattern.quote(\"DummyMergePolicy\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/bad-mp-solrconfig.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"schema.xml\"));\n\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    cc = new CoreContainer(solrHome.getAbsolutePath());\n    cc.load();\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n               0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.create(fixed);\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n                 0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n      \n    }\n    \n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n    \n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n               0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n                 0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n      (FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"),\n       \"This is giberish, not valid XML <\", \n       IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n                 col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n               ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n                       FileUtils.getFile(solrHome, \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n    \n    assertTrue(\"Core reload should have changed start time\",\n               col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n    \n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","sourceNew":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir().toString());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(SolrXmlConfig.fromString(resourceLoader, CONFIGSETS_SOLR_XML), cl);\n    cl.add(new CoreDescriptor(cc, \"col_ok\", \"col_ok\", \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(cc, \"col_bad\", \"col_bad\", \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.create(fixed);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n        0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir().toString());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(ConfigSolr.fromString(resourceLoader, CONFIGSETS_SOLR_XML), cl);\n    cl.add(new CoreDescriptor(cc, \"col_ok\", \"col_ok\", \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(cc, \"col_bad\", \"col_bad\", \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.create(fixed);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n        0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bc766d645fa848f86c381c7f6acf2c881c99399","date":1425549246,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","sourceNew":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir().toString());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(SolrXmlConfig.fromString(resourceLoader, CONFIGSETS_SOLR_XML), new Properties(), cl);\n    cl.add(new CoreDescriptor(cc, \"col_ok\", \"col_ok\", \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(cc, \"col_bad\", \"col_bad\", \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.create(fixed);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n        0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir().toString());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(SolrXmlConfig.fromString(resourceLoader, CONFIGSETS_SOLR_XML), cl);\n    cl.add(new CoreDescriptor(cc, \"col_ok\", \"col_ok\", \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(cc, \"col_bad\", \"col_bad\", \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.create(fixed);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n        0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","sourceNew":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir().toString());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(SolrXmlConfig.fromString(resourceLoader, CONFIGSETS_SOLR_XML), new Properties(), cl);\n    cl.add(new CoreDescriptor(cc, \"col_ok\", \"col_ok\", \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(cc, \"col_bad\", \"col_bad\", \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.create(fixed);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n        0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir().toString());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(ConfigSolr.fromString(resourceLoader, CONFIGSETS_SOLR_XML), cl);\n    cl.add(new CoreDescriptor(cc, \"col_ok\", \"col_ok\", \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(cc, \"col_bad\", \"col_bad\", \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.create(fixed);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n        0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","sourceNew":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(SolrXmlConfig.fromString(resourceLoader, CONFIGSETS_SOLR_XML), new Properties(), cl);\n    cl.add(new CoreDescriptor(cc, \"col_ok\", \"col_ok\", \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(cc, \"col_bad\", \"col_bad\", \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.create(fixed);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n        0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir().toString());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(SolrXmlConfig.fromString(resourceLoader, CONFIGSETS_SOLR_XML), new Properties(), cl);\n    cl.add(new CoreDescriptor(cc, \"col_ok\", \"col_ok\", \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(cc, \"col_bad\", \"col_bad\", \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.create(fixed);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n        0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","sourceNew":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(SolrXmlConfig.fromString(resourceLoader, CONFIGSETS_SOLR_XML), new Properties(), cl);\n    cl.add(new CoreDescriptor(cc, \"col_ok\", resourceLoader.getInstancePath().resolve(\"col_ok\"), \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(cc, \"col_bad\", resourceLoader.getInstancePath().resolve(\"col_bad\"), \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    cc.create(\"col_bad\", ImmutableMap.of());\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(\"bogus\", ImmutableMap.of(\"configSet\", \"bogus_path\"));\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(SolrXmlConfig.fromString(resourceLoader, CONFIGSETS_SOLR_XML), new Properties(), cl);\n    cl.add(new CoreDescriptor(cc, \"col_ok\", \"col_ok\", \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(cc, \"col_bad\", \"col_bad\", \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    final CoreDescriptor fixed = new CoreDescriptor(cc, \"col_bad\", \"col_bad\");\n    cc.create(fixed);\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    final CoreDescriptor bogus = new CoreDescriptor(cc, \"bogus\", \"bogus_path\");\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(bogus);\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getCause().getMessage(),\n        0 < fail.getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","sourceNew":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(SolrXmlConfig.fromString(resourceLoader, CONFIGSETS_SOLR_XML), new Properties(), cl);\n    cl.add(new CoreDescriptor(\"col_ok\", resourceLoader.getInstancePath().resolve(\"col_ok\"),\n        cc.getContainerProperties(), cc.isZooKeeperAware(), \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(\"col_bad\", resourceLoader.getInstancePath().resolve(\"col_bad\"),\n        cc.getContainerProperties(), cc.isZooKeeperAware(), \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    cc.create(\"col_bad\", ImmutableMap.of());\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(\"bogus\", ImmutableMap.of(\"configSet\", \"bogus_path\"));\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(SolrXmlConfig.fromString(resourceLoader, CONFIGSETS_SOLR_XML), new Properties(), cl);\n    cl.add(new CoreDescriptor(cc, \"col_ok\", resourceLoader.getInstancePath().resolve(\"col_ok\"), \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(cc, \"col_bad\", resourceLoader.getInstancePath().resolve(\"col_bad\"), \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    cc.create(\"col_bad\", ImmutableMap.of());\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(\"bogus\", ImmutableMap.of(\"configSet\", \"bogus_path\"));\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","sourceNew":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(SolrXmlConfig.fromString(resourceLoader, CONFIGSETS_SOLR_XML), new Properties(), cl);\n    cl.add(new CoreDescriptor(\"col_ok\", resourceLoader.getInstancePath().resolve(\"col_ok\"),\n        cc.getContainerProperties(), cc.isZooKeeperAware(), \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(\"col_bad\", resourceLoader.getInstancePath().resolve(\"col_bad\"),\n        cc.getContainerProperties(), cc.isZooKeeperAware(), \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    cc.create(\"col_bad\", ImmutableMap.of());\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(\"bogus\", ImmutableMap.of(\"configSet\", \"bogus_path\"));\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(SolrXmlConfig.fromString(resourceLoader, CONFIGSETS_SOLR_XML), new Properties(), cl);\n    cl.add(new CoreDescriptor(cc, \"col_ok\", resourceLoader.getInstancePath().resolve(\"col_ok\"), \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(cc, \"col_bad\", resourceLoader.getInstancePath().resolve(\"col_bad\"), \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    cc.create(\"col_bad\", ImmutableMap.of());\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(\"bogus\", ImmutableMap.of(\"configSet\", \"bogus_path\"));\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68cb00b5f16300efa7bd172de723d9ac91d38cc2","date":1543702774,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","sourceNew":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(SolrXmlConfig.fromString(resourceLoader, CONFIGSETS_SOLR_XML), new Properties(), cl);\n    cl.add(new CoreDescriptor(\"col_ok\", resourceLoader.getInstancePath().resolve(\"col_ok\"),\n        cc.getContainerProperties(), cc.isZooKeeperAware(), \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(\"col_bad\", resourceLoader.getInstancePath().resolve(\"col_bad\"),\n        cc.getContainerProperties(), cc.isZooKeeperAware(), \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    SolrException thrown = expectThrows(SolrException.class, () -> {\n      SolrCore c = cc.getCore(\"col_bad\");\n    });\n    assertEquals(500, thrown.code());\n    String cause = thrown.getCause().getCause().getMessage();\n    assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause, 0 < cause.indexOf(\"DummyMergePolicy\"));\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    cc.create(\"col_bad\", ImmutableMap.of());\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    ignoreException(Pattern.quote(\"bogus_path\"));\n    thrown = expectThrows(SolrException.class, () -> {\n      cc.create(\"bogus\", ImmutableMap.of(\"configSet\", \"bogus_path\"));\n    });\n    assertTrue(\"init exception doesn't mention bogus dir: \" + thrown.getCause().getCause().getMessage(),\n        0 < thrown.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    thrown = expectThrows(SolrException.class, () -> {\n      SolrCore c = cc.getCore(\"bogus\");\n    });\n    assertEquals(500, thrown.code());\n    cause = thrown.getCause().getMessage();\n    assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n        0 < cause.indexOf(\"bogus_path\"));\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    ignoreException(Pattern.quote(\"SAX\"));\n    thrown = expectThrows(SolrException.class,\n        \"corrupt solrconfig.xml failed to trigger exception from reload\",\n        () -> { cc.reload(\"col_bad\"); });\n    Throwable rootException = getWrappedException(thrown);\n    assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n        rootException instanceof SAXParseException);\n    SAXParseException se = (SAXParseException) rootException;\n    assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n        0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(SolrXmlConfig.fromString(resourceLoader, CONFIGSETS_SOLR_XML), new Properties(), cl);\n    cl.add(new CoreDescriptor(\"col_ok\", resourceLoader.getInstancePath().resolve(\"col_ok\"),\n        cc.getContainerProperties(), cc.isZooKeeperAware(), \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(\"col_bad\", resourceLoader.getInstancePath().resolve(\"col_bad\"),\n        cc.getContainerProperties(), cc.isZooKeeperAware(), \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"col_bad\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"DummyMergePolicy\"));\n    }\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    cc.create(\"col_bad\", ImmutableMap.of());\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    try {\n      ignoreException(Pattern.quote(\"bogus_path\"));\n      cc.create(\"bogus\", ImmutableMap.of(\"configSet\", \"bogus_path\"));\n      fail(\"bogus inst dir failed to trigger exception from create\");\n    } catch (SolrException e) {\n      assertTrue(\"init exception doesn't mention bogus dir: \" + e.getCause().getCause().getMessage(),\n          0 < e.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    }\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    try {\n      SolrCore c = cc.getCore(\"bogus\");\n      fail(\"Failed to get Exception on accessing core with init failure\");\n    } catch (SolrException ex) {\n      assertEquals(500, ex.code());\n      // double wrapped\n      String cause = ex.getCause().getMessage();\n      assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n          0 < cause.indexOf(\"bogus_path\"));\n    }\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    try {\n      ignoreException(Pattern.quote(\"SAX\"));\n      cc.reload(\"col_bad\");\n      fail(\"corrupt solrconfig.xml failed to trigger exception from reload\");\n    } catch (SolrException e) {\n      Throwable rootException = getWrappedException(e);\n      assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n          rootException instanceof SAXParseException);\n      SAXParseException se = (SAXParseException) rootException;\n      assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n          0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    }\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4fb176991e13ab85dfe62dceeb287dde115745","date":1579630717,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","sourceNew":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(SolrXmlConfig.fromString(resourceLoader, CONFIGSETS_SOLR_XML), new Properties(), cl);\n    cl.add(new CoreDescriptor(\"col_ok\", resourceLoader.getInstancePath().resolve(\"col_ok\"), cc,\n        \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(\"col_bad\", resourceLoader.getInstancePath().resolve(\"col_bad\"), cc,\n        \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    SolrException thrown = expectThrows(SolrException.class, () -> {\n      SolrCore c = cc.getCore(\"col_bad\");\n    });\n    assertEquals(500, thrown.code());\n    String cause = thrown.getCause().getCause().getMessage();\n    assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause, 0 < cause.indexOf(\"DummyMergePolicy\"));\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    cc.create(\"col_bad\", ImmutableMap.of());\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    ignoreException(Pattern.quote(\"bogus_path\"));\n    thrown = expectThrows(SolrException.class, () -> {\n      cc.create(\"bogus\", ImmutableMap.of(\"configSet\", \"bogus_path\"));\n    });\n    assertTrue(\"init exception doesn't mention bogus dir: \" + thrown.getCause().getCause().getMessage(),\n        0 < thrown.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    thrown = expectThrows(SolrException.class, () -> {\n      SolrCore c = cc.getCore(\"bogus\");\n    });\n    assertEquals(500, thrown.code());\n    cause = thrown.getCause().getMessage();\n    assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n        0 < cause.indexOf(\"bogus_path\"));\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    ignoreException(Pattern.quote(\"SAX\"));\n    thrown = expectThrows(SolrException.class,\n        \"corrupt solrconfig.xml failed to trigger exception from reload\",\n        () -> { cc.reload(\"col_bad\"); });\n    Throwable rootException = getWrappedException(thrown);\n    assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n        rootException instanceof SAXParseException);\n    SAXParseException se = (SAXParseException) rootException;\n    assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n        0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(SolrXmlConfig.fromString(resourceLoader, CONFIGSETS_SOLR_XML), new Properties(), cl);\n    cl.add(new CoreDescriptor(\"col_ok\", resourceLoader.getInstancePath().resolve(\"col_ok\"),\n        cc.getContainerProperties(), cc.isZooKeeperAware(), \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(\"col_bad\", resourceLoader.getInstancePath().resolve(\"col_bad\"),\n        cc.getContainerProperties(), cc.isZooKeeperAware(), \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    SolrException thrown = expectThrows(SolrException.class, () -> {\n      SolrCore c = cc.getCore(\"col_bad\");\n    });\n    assertEquals(500, thrown.code());\n    String cause = thrown.getCause().getCause().getMessage();\n    assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause, 0 < cause.indexOf(\"DummyMergePolicy\"));\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    cc.create(\"col_bad\", ImmutableMap.of());\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    ignoreException(Pattern.quote(\"bogus_path\"));\n    thrown = expectThrows(SolrException.class, () -> {\n      cc.create(\"bogus\", ImmutableMap.of(\"configSet\", \"bogus_path\"));\n    });\n    assertTrue(\"init exception doesn't mention bogus dir: \" + thrown.getCause().getCause().getMessage(),\n        0 < thrown.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    thrown = expectThrows(SolrException.class, () -> {\n      SolrCore c = cc.getCore(\"bogus\");\n    });\n    assertEquals(500, thrown.code());\n    cause = thrown.getCause().getMessage();\n    assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n        0 < cause.indexOf(\"bogus_path\"));\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    ignoreException(Pattern.quote(\"SAX\"));\n    thrown = expectThrows(SolrException.class,\n        \"corrupt solrconfig.xml failed to trigger exception from reload\",\n        () -> { cc.reload(\"col_bad\"); });\n    Throwable rootException = getWrappedException(thrown);\n    assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n        rootException instanceof SAXParseException);\n    SAXParseException se = (SAXParseException) rootException;\n    assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n        0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#testCoreInitFailuresOnReload().mjava","sourceNew":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    Path solrHome = createTempDir();\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(SolrXmlConfig.fromString(solrHome, CONFIGSETS_SOLR_XML), cl);\n    cl.add(new CoreDescriptor(\"col_ok\", solrHome.resolve(\"col_ok\"), cc,\n        \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(\"col_bad\", solrHome.resolve(\"col_bad\"), cc,\n        \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    SolrException thrown = expectThrows(SolrException.class, () -> {\n      SolrCore c = cc.getCore(\"col_bad\");\n    });\n    assertEquals(500, thrown.code());\n    String cause = thrown.getCause().getCause().getMessage();\n    assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause, 0 < cause.indexOf(\"DummyMergePolicy\"));\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    cc.create(\"col_bad\", ImmutableMap.of());\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    ignoreException(Pattern.quote(\"bogus_path\"));\n    thrown = expectThrows(SolrException.class, () -> {\n      cc.create(\"bogus\", ImmutableMap.of(\"configSet\", \"bogus_path\"));\n    });\n    assertTrue(\"init exception doesn't mention bogus dir: \" + thrown.getCause().getCause().getMessage(),\n        0 < thrown.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    thrown = expectThrows(SolrException.class, () -> {\n      SolrCore c = cc.getCore(\"bogus\");\n    });\n    assertEquals(500, thrown.code());\n    cause = thrown.getCause().getMessage();\n    assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n        0 < cause.indexOf(\"bogus_path\"));\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    ignoreException(Pattern.quote(\"SAX\"));\n    thrown = expectThrows(SolrException.class,\n        \"corrupt solrconfig.xml failed to trigger exception from reload\",\n        () -> { cc.reload(\"col_bad\"); });\n    Throwable rootException = getWrappedException(thrown);\n    assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n        rootException instanceof SAXParseException);\n    SAXParseException se = (SAXParseException) rootException;\n    assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n        0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","sourceOld":"  @Test\n  public void testCoreInitFailuresOnReload() throws Exception {\n\n    // reused state\n    Map<String,CoreContainer.CoreLoadFailure> failures = null;\n    Collection<String> cores = null;\n    Exception fail = null;\n\n    // -----\n    // init the  CoreContainer with the mix of ok/bad cores\n    MockCoresLocator cl = new MockCoresLocator();\n\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(createTempDir());\n\n    System.setProperty(\"configsets\", getFile(\"solr/configsets\").getAbsolutePath());\n\n    final CoreContainer cc = new CoreContainer(SolrXmlConfig.fromString(resourceLoader, CONFIGSETS_SOLR_XML), new Properties(), cl);\n    cl.add(new CoreDescriptor(\"col_ok\", resourceLoader.getInstancePath().resolve(\"col_ok\"), cc,\n        \"configSet\", \"minimal\"));\n    cl.add(new CoreDescriptor(\"col_bad\", resourceLoader.getInstancePath().resolve(\"col_bad\"), cc,\n        \"configSet\", \"bad-mergepolicy\"));\n    cc.load();\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 1, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"col_bad\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"DummyMergePolicy\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    SolrException thrown = expectThrows(SolrException.class, () -> {\n      SolrCore c = cc.getCore(\"col_bad\");\n    });\n    assertEquals(500, thrown.code());\n    String cause = thrown.getCause().getCause().getMessage();\n    assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause, 0 < cause.indexOf(\"DummyMergePolicy\"));\n\n    // -----\n    // \"fix\" the bad collection\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/schema-minimal.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"schema.xml\"));\n    cc.create(\"col_bad\", ImmutableMap.of());\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 0, failures.size());\n\n\n    // -----\n    // try to add a collection with a path that doesn't exist\n    ignoreException(Pattern.quote(\"bogus_path\"));\n    thrown = expectThrows(SolrException.class, () -> {\n      cc.create(\"bogus\", ImmutableMap.of(\"configSet\", \"bogus_path\"));\n    });\n    assertTrue(\"init exception doesn't mention bogus dir: \" + thrown.getCause().getCause().getMessage(),\n        0 < thrown.getCause().getCause().getMessage().indexOf(\"bogus_path\"));\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n    fail = failures.get(\"bogus\").exception;\n    assertNotNull(\"null failure for test core\", fail);\n    assertTrue(\"init failure doesn't mention problem: \" + fail.getMessage(),\n        0 < fail.getMessage().indexOf(\"bogus_path\"));\n\n    // check that we get null accessing a non-existent core\n    assertNull(cc.getCore(\"does_not_exist\"));\n    // check that we get a 500 accessing the core with an init failure\n    thrown = expectThrows(SolrException.class, () -> {\n      SolrCore c = cc.getCore(\"bogus\");\n    });\n    assertEquals(500, thrown.code());\n    cause = thrown.getCause().getMessage();\n    assertTrue(\"getCore() ex cause doesn't mention init fail: \" + cause,\n        0 < cause.indexOf(\"bogus_path\"));\n\n    // -----\n    // break col_bad's config and try to RELOAD to add failure\n\n    final long col_bad_old_start = getCoreStartTime(cc, \"col_bad\");\n\n    FileUtils.write\n        (FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"),\n            \"This is giberish, not valid XML <\",\n            IOUtils.UTF_8);\n\n    ignoreException(Pattern.quote(\"SAX\"));\n    thrown = expectThrows(SolrException.class,\n        \"corrupt solrconfig.xml failed to trigger exception from reload\",\n        () -> { cc.reload(\"col_bad\"); });\n    Throwable rootException = getWrappedException(thrown);\n    assertTrue(\"We're supposed to have a wrapped SAXParserException here, but we don't\",\n        rootException instanceof SAXParseException);\n    SAXParseException se = (SAXParseException) rootException;\n    assertTrue(\"reload exception doesn't refer to slrconfig.xml \" + se.getSystemId(),\n        0 < se.getSystemId().indexOf(\"solrconfig.xml\"));\n\n    assertEquals(\"Failed core reload should not have changed start time\",\n        col_bad_old_start, getCoreStartTime(cc, \"col_bad\"));\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 2, failures.size());\n    Throwable ex = getWrappedException(failures.get(\"col_bad\").exception);\n    assertNotNull(\"null failure for test core\", ex);\n    assertTrue(\"init failure isn't SAXParseException\",\n        ex instanceof SAXParseException);\n    SAXParseException saxEx = (SAXParseException) ex;\n    assertTrue(\"init failure doesn't mention problem: \" + saxEx.toString(), saxEx.getSystemId().contains(\"solrconfig.xml\"));\n\n    // ----\n    // fix col_bad's config (again) and RELOAD to fix failure\n    FileUtils.copyFile(getFile(\"solr/collection1/conf/solrconfig-defaults.xml\"),\n        FileUtils.getFile(cc.getSolrHome(), \"col_bad\", \"conf\", \"solrconfig.xml\"));\n    cc.reload(\"col_bad\");\n\n    assertTrue(\"Core reload should have changed start time\",\n        col_bad_old_start < getCoreStartTime(cc, \"col_bad\"));\n\n\n    // check that we have the cores we expect\n    cores = cc.getLoadedCoreNames();\n    assertNotNull(\"core names is null\", cores);\n    assertEquals(\"wrong number of cores\", 2, cores.size());\n    assertTrue(\"col_ok not found\", cores.contains(\"col_ok\"));\n    assertTrue(\"col_bad not found\", cores.contains(\"col_bad\"));\n\n    // check that we have the failures we expect\n    failures = cc.getCoreInitFailures();\n    assertNotNull(\"core failures is a null map\", failures);\n    assertEquals(\"wrong number of core failures\", 1, failures.size());\n\n    cc.shutdown();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["68cb00b5f16300efa7bd172de723d9ac91d38cc2"],"9bc766d645fa848f86c381c7f6acf2c881c99399":["e15199583d3635cb940942caed05132dd6c4c7c6"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"e15199583d3635cb940942caed05132dd6c4c7c6":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39","9bc766d645fa848f86c381c7f6acf2c881c99399"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["9bc766d645fa848f86c381c7f6acf2c881c99399"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68cb00b5f16300efa7bd172de723d9ac91d38cc2":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"3e4fb176991e13ab85dfe62dceeb287dde115745":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"9bc766d645fa848f86c381c7f6acf2c881c99399":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a626ec4d1c92e59fe390724d6220081047b03ce7"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["e15199583d3635cb940942caed05132dd6c4c7c6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["68cb00b5f16300efa7bd172de723d9ac91d38cc2"],"e15199583d3635cb940942caed05132dd6c4c7c6":["9bc766d645fa848f86c381c7f6acf2c881c99399"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"68cb00b5f16300efa7bd172de723d9ac91d38cc2":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}