{"path":"solr/core/src/test/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactoryTest#testIgnoreCommit().mjava","commits":[{"id":"7cfaf45130a8adae39641bbe1d3e609ec30f9e2e","date":1420057962,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactoryTest#testIgnoreCommit().mjava","pathOld":"/dev/null","sourceNew":"  public void testIgnoreCommit() throws Exception {\n    // verify that the processor returns an error if it receives a commit\n    SolrQueryResponse rsp = processCommit(\"ignore-commit-from-client-403\", false);\n    assertNotNull(\"Sending a commit should have resulted in an exception in the response\", rsp.getException());\n\n    rsp = processCommit(\"ignore-commit-from-client-200\", false);\n    Exception shouldBeNull = rsp.getException();\n    assertNull(\"Sending a commit should NOT have resulted in an exception in the response: \"+shouldBeNull, shouldBeNull);\n\n    rsp = processCommit(\"ignore-optimize-only-from-client-403\", true);\n    assertNotNull(\"Sending an optimize should have resulted in an exception in the response\", rsp.getException());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197ef3757cbbe5b443d8db292634534498adf4c6","date":1427902182,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactoryTest#testIgnoreCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactoryTest#testIgnoreCommit().mjava","sourceNew":"  public void testIgnoreCommit() throws Exception {\n    // verify that the processor returns an error if it receives a commit\n    SolrQueryResponse rsp = processCommit(\"ignore-commit-from-client-403\", false);\n    assertNotNull(\"Sending a commit should have resulted in an exception in the response\", rsp.getException());\n\n    rsp = processCommit(\"ignore-commit-from-client-200\", false);\n    Exception shouldBeNull = rsp.getException();\n    assertNull(\"Sending a commit should NOT have resulted in an exception in the response: \"+shouldBeNull, shouldBeNull);\n\n    rsp = processCommit(\"ignore-optimize-only-from-client-403\", true);\n    assertNotNull(\"Sending an optimize should have resulted in an exception in the response\", rsp.getException());\n    // commit should happen if DistributedUpdateProcessor.COMMIT_END_POINT == true\n    rsp = processCommit(\"ignore-commit-from-client-403\", false, new Boolean(true));\n    shouldBeNull = rsp.getException();\n    assertNull(\"Sending a commit should NOT have resulted in an exception in the response: \"+shouldBeNull, shouldBeNull);\n  }\n\n","sourceOld":"  public void testIgnoreCommit() throws Exception {\n    // verify that the processor returns an error if it receives a commit\n    SolrQueryResponse rsp = processCommit(\"ignore-commit-from-client-403\", false);\n    assertNotNull(\"Sending a commit should have resulted in an exception in the response\", rsp.getException());\n\n    rsp = processCommit(\"ignore-commit-from-client-200\", false);\n    Exception shouldBeNull = rsp.getException();\n    assertNull(\"Sending a commit should NOT have resulted in an exception in the response: \"+shouldBeNull, shouldBeNull);\n\n    rsp = processCommit(\"ignore-optimize-only-from-client-403\", true);\n    assertNotNull(\"Sending an optimize should have resulted in an exception in the response\", rsp.getException());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"743e614fc76baead7dbf380c3b9530cd9ba72334","date":1427902234,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactoryTest#testIgnoreCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactoryTest#testIgnoreCommit().mjava","sourceNew":"  public void testIgnoreCommit() throws Exception {\n    // verify that the processor returns an error if it receives a commit\n    SolrQueryResponse rsp = processCommit(\"ignore-commit-from-client-403\", false);\n    assertNotNull(\"Sending a commit should have resulted in an exception in the response\", rsp.getException());\n\n    rsp = processCommit(\"ignore-commit-from-client-200\", false);\n    Exception shouldBeNull = rsp.getException();\n    assertNull(\"Sending a commit should NOT have resulted in an exception in the response: \"+shouldBeNull, shouldBeNull);\n\n    rsp = processCommit(\"ignore-optimize-only-from-client-403\", true);\n    assertNotNull(\"Sending an optimize should have resulted in an exception in the response\", rsp.getException());\n    // commit should happen if DistributedUpdateProcessor.COMMIT_END_POINT == true\n    rsp = processCommit(\"ignore-commit-from-client-403\", false, new Boolean(true));\n    shouldBeNull = rsp.getException();\n    assertNull(\"Sending a commit should NOT have resulted in an exception in the response: \"+shouldBeNull, shouldBeNull);\n  }\n\n","sourceOld":"  public void testIgnoreCommit() throws Exception {\n    // verify that the processor returns an error if it receives a commit\n    SolrQueryResponse rsp = processCommit(\"ignore-commit-from-client-403\", false);\n    assertNotNull(\"Sending a commit should have resulted in an exception in the response\", rsp.getException());\n\n    rsp = processCommit(\"ignore-commit-from-client-200\", false);\n    Exception shouldBeNull = rsp.getException();\n    assertNull(\"Sending a commit should NOT have resulted in an exception in the response: \"+shouldBeNull, shouldBeNull);\n\n    rsp = processCommit(\"ignore-optimize-only-from-client-403\", true);\n    assertNotNull(\"Sending an optimize should have resulted in an exception in the response\", rsp.getException());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactoryTest#testIgnoreCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactoryTest#testIgnoreCommit().mjava","sourceNew":"  public void testIgnoreCommit() throws Exception {\n    // verify that the processor returns an error if it receives a commit\n    SolrQueryResponse rsp = processCommit(\"ignore-commit-from-client-403\", false);\n    assertNotNull(\"Sending a commit should have resulted in an exception in the response\", rsp.getException());\n\n    rsp = processCommit(\"ignore-commit-from-client-200\", false);\n    Exception shouldBeNull = rsp.getException();\n    assertNull(\"Sending a commit should NOT have resulted in an exception in the response: \"+shouldBeNull, shouldBeNull);\n\n    rsp = processCommit(\"ignore-optimize-only-from-client-403\", true);\n    assertNotNull(\"Sending an optimize should have resulted in an exception in the response\", rsp.getException());\n    // commit should happen if DistributedUpdateProcessor.COMMIT_END_POINT == true\n    rsp = processCommit(\"ignore-commit-from-client-403\", false, Boolean.TRUE);\n    shouldBeNull = rsp.getException();\n    assertNull(\"Sending a commit should NOT have resulted in an exception in the response: \"+shouldBeNull, shouldBeNull);\n  }\n\n","sourceOld":"  public void testIgnoreCommit() throws Exception {\n    // verify that the processor returns an error if it receives a commit\n    SolrQueryResponse rsp = processCommit(\"ignore-commit-from-client-403\", false);\n    assertNotNull(\"Sending a commit should have resulted in an exception in the response\", rsp.getException());\n\n    rsp = processCommit(\"ignore-commit-from-client-200\", false);\n    Exception shouldBeNull = rsp.getException();\n    assertNull(\"Sending a commit should NOT have resulted in an exception in the response: \"+shouldBeNull, shouldBeNull);\n\n    rsp = processCommit(\"ignore-optimize-only-from-client-403\", true);\n    assertNotNull(\"Sending an optimize should have resulted in an exception in the response\", rsp.getException());\n    // commit should happen if DistributedUpdateProcessor.COMMIT_END_POINT == true\n    rsp = processCommit(\"ignore-commit-from-client-403\", false, new Boolean(true));\n    shouldBeNull = rsp.getException();\n    assertNull(\"Sending a commit should NOT have resulted in an exception in the response: \"+shouldBeNull, shouldBeNull);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactoryTest#testIgnoreCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactoryTest#testIgnoreCommit().mjava","sourceNew":"  public void testIgnoreCommit() throws Exception {\n    // verify that the processor returns an error if it receives a commit\n    SolrQueryResponse rsp = processCommit(\"ignore-commit-from-client-403\", false);\n    assertNotNull(\"Sending a commit should have resulted in an exception in the response\", rsp.getException());\n\n    rsp = processCommit(\"ignore-commit-from-client-200\", false);\n    Exception shouldBeNull = rsp.getException();\n    assertNull(\"Sending a commit should NOT have resulted in an exception in the response: \"+shouldBeNull, shouldBeNull);\n\n    rsp = processCommit(\"ignore-optimize-only-from-client-403\", true);\n    assertNotNull(\"Sending an optimize should have resulted in an exception in the response\", rsp.getException());\n    // commit should happen if DistributedUpdateProcessor.COMMIT_END_POINT == true\n    rsp = processCommit(\"ignore-commit-from-client-403\", false, Boolean.TRUE);\n    shouldBeNull = rsp.getException();\n    assertNull(\"Sending a commit should NOT have resulted in an exception in the response: \"+shouldBeNull, shouldBeNull);\n  }\n\n","sourceOld":"  public void testIgnoreCommit() throws Exception {\n    // verify that the processor returns an error if it receives a commit\n    SolrQueryResponse rsp = processCommit(\"ignore-commit-from-client-403\", false);\n    assertNotNull(\"Sending a commit should have resulted in an exception in the response\", rsp.getException());\n\n    rsp = processCommit(\"ignore-commit-from-client-200\", false);\n    Exception shouldBeNull = rsp.getException();\n    assertNull(\"Sending a commit should NOT have resulted in an exception in the response: \"+shouldBeNull, shouldBeNull);\n\n    rsp = processCommit(\"ignore-optimize-only-from-client-403\", true);\n    assertNotNull(\"Sending an optimize should have resulted in an exception in the response\", rsp.getException());\n    // commit should happen if DistributedUpdateProcessor.COMMIT_END_POINT == true\n    rsp = processCommit(\"ignore-commit-from-client-403\", false, new Boolean(true));\n    shouldBeNull = rsp.getException();\n    assertNull(\"Sending a commit should NOT have resulted in an exception in the response: \"+shouldBeNull, shouldBeNull);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactoryTest#testIgnoreCommit().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactoryTest#testIgnoreCommit().mjava","sourceNew":"  public void testIgnoreCommit() throws Exception {\n    // verify that the processor returns an error if it receives a commit\n    SolrQueryResponse rsp = processCommit(\"ignore-commit-from-client-403\", false);\n    assertNotNull(\"Sending a commit should have resulted in an exception in the response\", rsp.getException());\n\n    rsp = processCommit(\"ignore-commit-from-client-200\", false);\n    Exception shouldBeNull = rsp.getException();\n    assertNull(\"Sending a commit should NOT have resulted in an exception in the response: \"+shouldBeNull, shouldBeNull);\n\n    rsp = processCommit(\"ignore-optimize-only-from-client-403\", true);\n    assertNotNull(\"Sending an optimize should have resulted in an exception in the response\", rsp.getException());\n    // commit should happen if DistributedUpdateProcessor.COMMIT_END_POINT == true\n    rsp = processCommit(\"ignore-commit-from-client-403\", false, Boolean.TRUE);\n    shouldBeNull = rsp.getException();\n    assertNull(\"Sending a commit should NOT have resulted in an exception in the response: \"+shouldBeNull, shouldBeNull);\n  }\n\n","sourceOld":"  public void testIgnoreCommit() throws Exception {\n    // verify that the processor returns an error if it receives a commit\n    SolrQueryResponse rsp = processCommit(\"ignore-commit-from-client-403\", false);\n    assertNotNull(\"Sending a commit should have resulted in an exception in the response\", rsp.getException());\n\n    rsp = processCommit(\"ignore-commit-from-client-200\", false);\n    Exception shouldBeNull = rsp.getException();\n    assertNull(\"Sending a commit should NOT have resulted in an exception in the response: \"+shouldBeNull, shouldBeNull);\n\n    rsp = processCommit(\"ignore-optimize-only-from-client-403\", true);\n    assertNotNull(\"Sending an optimize should have resulted in an exception in the response\", rsp.getException());\n    // commit should happen if DistributedUpdateProcessor.COMMIT_END_POINT == true\n    rsp = processCommit(\"ignore-commit-from-client-403\", false, new Boolean(true));\n    shouldBeNull = rsp.getException();\n    assertNull(\"Sending a commit should NOT have resulted in an exception in the response: \"+shouldBeNull, shouldBeNull);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["197ef3757cbbe5b443d8db292634534498adf4c6"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["197ef3757cbbe5b443d8db292634534498adf4c6","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"743e614fc76baead7dbf380c3b9530cd9ba72334":["7cfaf45130a8adae39641bbe1d3e609ec30f9e2e","197ef3757cbbe5b443d8db292634534498adf4c6"],"7cfaf45130a8adae39641bbe1d3e609ec30f9e2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"197ef3757cbbe5b443d8db292634534498adf4c6":["7cfaf45130a8adae39641bbe1d3e609ec30f9e2e"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["197ef3757cbbe5b443d8db292634534498adf4c6","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"743e614fc76baead7dbf380c3b9530cd9ba72334":[],"7cfaf45130a8adae39641bbe1d3e609ec30f9e2e":["743e614fc76baead7dbf380c3b9530cd9ba72334","197ef3757cbbe5b443d8db292634534498adf4c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7cfaf45130a8adae39641bbe1d3e609ec30f9e2e"],"197ef3757cbbe5b443d8db292634534498adf4c6":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","743e614fc76baead7dbf380c3b9530cd9ba72334","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","743e614fc76baead7dbf380c3b9530cd9ba72334","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}