{"path":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","commits":[{"id":"dd81b1d062b9688a18721a1adfc489577479856a","date":1390711758,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      BooleanClause clauses[] = ((BooleanQuery) query).getClauses();\n      for (BooleanClause clause : clauses) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(BasicOperations.concatenate(BasicAutomata.makeString(prefix.text()), \n                                                                       BasicAutomata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits());\n        if (prefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(UnicodeUtil.newString(termText, 0, prefixLength));\n          automaton = BasicOperations.concatenate(prefix, automaton);\n        }\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(BasicAutomata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["46e1d94eff339f485fea1578f61a41eb374073ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d006609449650b29e5a49306cc5ff07c317c308a","date":1401487161,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","sourceNew":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      BooleanClause clauses[] = ((BooleanQuery) query).getClauses();\n      for (BooleanClause clause : clauses) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof FilteredQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FilteredQuery) query).getQuery(), field)));\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(BasicOperations.concatenate(BasicAutomata.makeString(prefix.text()), \n                                                                       BasicAutomata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits());\n        if (prefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(UnicodeUtil.newString(termText, 0, prefixLength));\n          automaton = BasicOperations.concatenate(prefix, automaton);\n        }\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(BasicAutomata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      BooleanClause clauses[] = ((BooleanQuery) query).getClauses();\n      for (BooleanClause clause : clauses) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(BasicOperations.concatenate(BasicAutomata.makeString(prefix.text()), \n                                                                       BasicAutomata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits());\n        if (prefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(UnicodeUtil.newString(termText, 0, prefixLength));\n          automaton = BasicOperations.concatenate(prefix, automaton);\n        }\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(BasicAutomata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","sourceNew":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      BooleanClause clauses[] = ((BooleanQuery) query).getClauses();\n      for (BooleanClause clause : clauses) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof FilteredQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FilteredQuery) query).getQuery(), field)));\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getLightAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(BasicOperations.concatenate(BasicAutomata.makeString(prefix.text()), \n                                                                       BasicAutomata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits());\n        if (prefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(UnicodeUtil.newString(termText, 0, prefixLength));\n          automaton = BasicOperations.concatenate(prefix, automaton);\n        }\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(BasicAutomata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      BooleanClause clauses[] = ((BooleanQuery) query).getClauses();\n      for (BooleanClause clause : clauses) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof FilteredQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FilteredQuery) query).getQuery(), field)));\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(BasicOperations.concatenate(BasicAutomata.makeString(prefix.text()), \n                                                                       BasicAutomata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits());\n        if (prefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(UnicodeUtil.newString(termText, 0, prefixLength));\n          automaton = BasicOperations.concatenate(prefix, automaton);\n        }\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(BasicAutomata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a2de8b489026711e8edde133418a7cacfd2ce4d3","date":1402528930,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","sourceNew":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      BooleanClause clauses[] = ((BooleanQuery) query).getClauses();\n      for (BooleanClause clause : clauses) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof FilteredQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FilteredQuery) query).getQuery(), field)));\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getLightAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(BasicOperations.concatenate(BasicAutomata.makeString(prefix.text()), \n                                                                       BasicAutomata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        LightAutomaton automaton = builder.toLightAutomaton(fq.getMaxEdits());\n        if (prefixLength > 0) {\n          LightAutomaton prefix = BasicAutomata.makeStringLight(UnicodeUtil.newString(termText, 0, prefixLength));\n          automaton = BasicOperations.concatenateLight(prefix, automaton);\n        }\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(BasicAutomata.makeEmptyLight()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      BooleanClause clauses[] = ((BooleanQuery) query).getClauses();\n      for (BooleanClause clause : clauses) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof FilteredQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FilteredQuery) query).getQuery(), field)));\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getLightAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(BasicOperations.concatenate(BasicAutomata.makeString(prefix.text()), \n                                                                       BasicAutomata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits());\n        if (prefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(UnicodeUtil.newString(termText, 0, prefixLength));\n          automaton = BasicOperations.concatenate(prefix, automaton);\n        }\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(BasicAutomata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","sourceNew":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      BooleanClause clauses[] = ((BooleanQuery) query).getClauses();\n      for (BooleanClause clause : clauses) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof FilteredQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FilteredQuery) query).getQuery(), field)));\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getLightAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(BasicOperations.concatenateLight(BasicAutomata.makeStringLight(prefix.text()), \n                                                                            BasicAutomata.makeAnyStringLight())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        LightAutomaton automaton = builder.toLightAutomaton(fq.getMaxEdits());\n        if (prefixLength > 0) {\n          LightAutomaton prefix = BasicAutomata.makeStringLight(UnicodeUtil.newString(termText, 0, prefixLength));\n          automaton = BasicOperations.concatenateLight(prefix, automaton);\n        }\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(BasicAutomata.makeEmptyLight()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      BooleanClause clauses[] = ((BooleanQuery) query).getClauses();\n      for (BooleanClause clause : clauses) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof FilteredQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FilteredQuery) query).getQuery(), field)));\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getLightAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(BasicOperations.concatenate(BasicAutomata.makeString(prefix.text()), \n                                                                       BasicAutomata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        LightAutomaton automaton = builder.toLightAutomaton(fq.getMaxEdits());\n        if (prefixLength > 0) {\n          LightAutomaton prefix = BasicAutomata.makeStringLight(UnicodeUtil.newString(termText, 0, prefixLength));\n          automaton = BasicOperations.concatenateLight(prefix, automaton);\n        }\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(BasicAutomata.makeEmptyLight()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a67285d1a68175d877eb9fd1624fccad3db028ff","date":1402779028,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","sourceNew":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      BooleanClause clauses[] = ((BooleanQuery) query).getClauses();\n      for (BooleanClause clause : clauses) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof FilteredQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FilteredQuery) query).getQuery(), field)));\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getLightAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(BasicOperations.concatenateLight(BasicAutomata.makeStringLight(prefix.text()), \n                                                                            BasicAutomata.makeAnyStringLight())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        LightAutomaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(BasicAutomata.makeEmptyLight()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      BooleanClause clauses[] = ((BooleanQuery) query).getClauses();\n      for (BooleanClause clause : clauses) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof FilteredQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FilteredQuery) query).getQuery(), field)));\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getLightAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(BasicOperations.concatenateLight(BasicAutomata.makeStringLight(prefix.text()), \n                                                                            BasicAutomata.makeAnyStringLight())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        LightAutomaton automaton = builder.toLightAutomaton(fq.getMaxEdits());\n        if (prefixLength > 0) {\n          LightAutomaton prefix = BasicAutomata.makeStringLight(UnicodeUtil.newString(termText, 0, prefixLength));\n          automaton = BasicOperations.concatenateLight(prefix, automaton);\n        }\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(BasicAutomata.makeEmptyLight()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","sourceNew":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      BooleanClause clauses[] = ((BooleanQuery) query).getClauses();\n      for (BooleanClause clause : clauses) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof FilteredQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FilteredQuery) query).getQuery(), field)));\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()), \n                                                                       Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      BooleanClause clauses[] = ((BooleanQuery) query).getClauses();\n      for (BooleanClause clause : clauses) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof FilteredQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FilteredQuery) query).getQuery(), field)));\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getLightAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(BasicOperations.concatenateLight(BasicAutomata.makeStringLight(prefix.text()), \n                                                                            BasicAutomata.makeAnyStringLight())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        LightAutomaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(BasicAutomata.makeEmptyLight()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":["46e1d94eff339f485fea1578f61a41eb374073ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","sourceNew":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      BooleanClause clauses[] = ((BooleanQuery) query).getClauses();\n      for (BooleanClause clause : clauses) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof FilteredQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FilteredQuery) query).getQuery(), field)));\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()), \n                                                                       Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      BooleanClause clauses[] = ((BooleanQuery) query).getClauses();\n      for (BooleanClause clause : clauses) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof FilteredQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FilteredQuery) query).getQuery(), field)));\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(BasicOperations.concatenate(BasicAutomata.makeString(prefix.text()), \n                                                                       BasicAutomata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits());\n        if (prefixLength > 0) {\n          Automaton prefix = BasicAutomata.makeString(UnicodeUtil.newString(termText, 0, prefixLength));\n          automaton = BasicOperations.concatenate(prefix, automaton);\n        }\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(BasicAutomata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","sourceNew":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      BooleanClause clauses[] = ((BooleanQuery) query).getClauses();\n      for (BooleanClause clause : clauses) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof FilteredQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FilteredQuery) query).getQuery(), field)));\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()), \n                                                                       Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but it's very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      BooleanClause clauses[] = ((BooleanQuery) query).getClauses();\n      for (BooleanClause clause : clauses) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof FilteredQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FilteredQuery) query).getQuery(), field)));\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()), \n                                                                       Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but its very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","sourceNew":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof FilteredQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FilteredQuery) query).getQuery(), field)));\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()), \n                                                                       Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but it's very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      BooleanClause clauses[] = ((BooleanQuery) query).getClauses();\n      for (BooleanClause clause : clauses) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof FilteredQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FilteredQuery) query).getQuery(), field)));\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()), \n                                                                       Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but it's very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","sourceNew":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()), \n                                                                       Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but it's very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof FilteredQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((FilteredQuery) query).getQuery(), field)));\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()), \n                                                                       Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but it's very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46e1d94eff339f485fea1578f61a41eb374073ab","date":1488350334,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","sourceNew":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()), \n                                                                       Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but it's very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","sourceOld":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()), \n                                                                       Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but it's very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":["dd81b1d062b9688a18721a1adfc489577479856a","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"381618eac2691bb34ab9a3fca76ad55c6274517e","date":1495564791,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","sourceNew":null,"sourceOld":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()), \n                                                                       Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but it's very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/MultiTermHighlighting#extractAutomata(Query,String).mjava","sourceNew":null,"sourceOld":"  /** \n   * Extracts all MultiTermQueries for {@code field}, and returns equivalent \n   * automata that will match terms.\n   */\n  static CharacterRunAutomaton[] extractAutomata(Query query, String field) {\n    List<CharacterRunAutomaton> list = new ArrayList<>();\n    if (query instanceof BooleanQuery) {\n      for (BooleanClause clause : (BooleanQuery) query) {\n        if (!clause.isProhibited()) {\n          list.addAll(Arrays.asList(extractAutomata(clause.getQuery(), field)));\n        }\n      }\n    } else if (query instanceof ConstantScoreQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((ConstantScoreQuery) query).getQuery(), field)));\n    } else if (query instanceof DisjunctionMaxQuery) {\n      for (Query sub : ((DisjunctionMaxQuery) query).getDisjuncts()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanOrQuery) {\n      for (Query sub : ((SpanOrQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNearQuery) {\n      for (Query sub : ((SpanNearQuery) query).getClauses()) {\n        list.addAll(Arrays.asList(extractAutomata(sub, field)));\n      }\n    } else if (query instanceof SpanNotQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanNotQuery) query).getInclude(), field)));\n    } else if (query instanceof SpanPositionCheckQuery) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanPositionCheckQuery) query).getMatch(), field)));\n    } else if (query instanceof SpanMultiTermQueryWrapper) {\n      list.addAll(Arrays.asList(extractAutomata(((SpanMultiTermQueryWrapper<?>) query).getWrappedQuery(), field)));\n    } else if (query instanceof PrefixQuery) {\n      final PrefixQuery pq = (PrefixQuery) query;\n      Term prefix = pq.getPrefix();\n      if (prefix.field().equals(field)) {\n        list.add(new CharacterRunAutomaton(Operations.concatenate(Automata.makeString(prefix.text()), \n                                                                       Automata.makeAnyString())) {\n          @Override\n          public String toString() {\n            return pq.toString();\n          }\n        });\n      }\n    } else if (query instanceof FuzzyQuery) {\n      final FuzzyQuery fq = (FuzzyQuery) query;\n      if (fq.getField().equals(field)) {\n        String utf16 = fq.getTerm().text();\n        int termText[] = new int[utf16.codePointCount(0, utf16.length())];\n        for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp)) {\n          termText[j++] = cp = utf16.codePointAt(i);\n        }\n        int termLength = termText.length;\n        int prefixLength = Math.min(fq.getPrefixLength(), termLength);\n        String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n        LevenshteinAutomata builder = new LevenshteinAutomata(suffix, fq.getTranspositions());\n        String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n        Automaton automaton = builder.toAutomaton(fq.getMaxEdits(), prefix);\n        list.add(new CharacterRunAutomaton(automaton) {\n          @Override\n          public String toString() {\n            return fq.toString();\n          }\n        });\n      }\n    } else if (query instanceof TermRangeQuery) {\n      final TermRangeQuery tq = (TermRangeQuery) query;\n      if (tq.getField().equals(field)) {\n        final CharsRef lowerBound;\n        if (tq.getLowerTerm() == null) {\n          lowerBound = null;\n        } else {\n          lowerBound = new CharsRef(tq.getLowerTerm().utf8ToString());\n        }\n        \n        final CharsRef upperBound;\n        if (tq.getUpperTerm() == null) {\n          upperBound = null;\n        } else {\n          upperBound = new CharsRef(tq.getUpperTerm().utf8ToString());\n        }\n        \n        final boolean includeLower = tq.includesLower();\n        final boolean includeUpper = tq.includesUpper();\n        final CharsRef scratch = new CharsRef();\n        final Comparator<CharsRef> comparator = CharsRef.getUTF16SortedAsUTF8Comparator();\n        \n        // this is *not* an automaton, but it's very simple\n        list.add(new CharacterRunAutomaton(Automata.makeEmpty()) {\n          @Override\n          public boolean run(char[] s, int offset, int length) {\n            scratch.chars = s;\n            scratch.offset = offset;\n            scratch.length = length;\n            \n            if (lowerBound != null) {\n              int cmp = comparator.compare(scratch, lowerBound);\n              if (cmp < 0 || (!includeLower && cmp == 0)) {\n                return false;\n              }\n            }\n            \n            if (upperBound != null) {\n              int cmp = comparator.compare(scratch, upperBound);\n              if (cmp > 0 || (!includeUpper && cmp == 0)) {\n                return false;\n              }\n            }\n            return true;\n          }\n\n          @Override\n          public String toString() {\n            return tq.toString();\n          }\n        });\n      }\n    } else if (query instanceof AutomatonQuery) {\n      final AutomatonQuery aq = (AutomatonQuery) query;\n      if (aq.getField().equals(field)) {\n        list.add(new CharacterRunAutomaton(aq.getAutomaton()) {\n          @Override\n          public String toString() {\n            return aq.toString();\n          }\n        });\n      }\n    }\n    return list.toArray(new CharacterRunAutomaton[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["46e1d94eff339f485fea1578f61a41eb374073ab"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["a2de8b489026711e8edde133418a7cacfd2ce4d3"],"d006609449650b29e5a49306cc5ff07c317c308a":["dd81b1d062b9688a18721a1adfc489577479856a"],"46e1d94eff339f485fea1578f61a41eb374073ab":["1db68e96dd908fcd79ef809095822736aa601d08"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["46e1d94eff339f485fea1578f61a41eb374073ab","381618eac2691bb34ab9a3fca76ad55c6274517e"],"1db68e96dd908fcd79ef809095822736aa601d08":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["5c84485629d80d203608e8975a1139de9933cc38"],"a2de8b489026711e8edde133418a7cacfd2ce4d3":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"5c84485629d80d203608e8975a1139de9933cc38":["d006609449650b29e5a49306cc5ff07c317c308a","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"dd81b1d062b9688a18721a1adfc489577479856a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["d006609449650b29e5a49306cc5ff07c317c308a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["381618eac2691bb34ab9a3fca76ad55c6274517e"]},"commit2Childs":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"d006609449650b29e5a49306cc5ff07c317c308a":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"46e1d94eff339f485fea1578f61a41eb374073ab":["381618eac2691bb34ab9a3fca76ad55c6274517e","e9017cf144952056066919f1ebc7897ff9bd71b1"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["1db68e96dd908fcd79ef809095822736aa601d08"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a2de8b489026711e8edde133418a7cacfd2ce4d3":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"1db68e96dd908fcd79ef809095822736aa601d08":["46e1d94eff339f485fea1578f61a41eb374073ab"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd81b1d062b9688a18721a1adfc489577479856a"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"dd81b1d062b9688a18721a1adfc489577479856a":["d006609449650b29e5a49306cc5ff07c317c308a"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a2de8b489026711e8edde133418a7cacfd2ce4d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}