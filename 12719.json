{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#checkAndCompleteShardSplit(ClusterState,DocCollection,String,String,Map[String,Object]).mjava","commits":[{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#checkAndCompleteShardSplit(ClusterState,DocCollection,String,String,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private DocCollection checkAndCompleteShardSplit(ClusterState prevState, DocCollection collection, String coreNodeName, String sliceName, Map<String, Object> replicaProps) {\n    Slice slice = collection.getSlice(sliceName);\n    Map<String, Object> sliceProps = slice.getProperties();\n    String sliceState = slice.getState();\n    if (Slice.RECOVERY.equals(sliceState)) {\n      log.info(\"Shard: {} is in recovery state\", sliceName);\n      // is this replica active?\n      if (ZkStateReader.ACTIVE.equals(replicaProps.get(ZkStateReader.STATE_PROP))) {\n        log.info(\"Shard: {} is in recovery state and coreNodeName: {} is active\", sliceName, coreNodeName);\n        // are all other replicas also active?\n        boolean allActive = true;\n        for (Map.Entry<String, Replica> entry : slice.getReplicasMap().entrySet()) {\n          if (coreNodeName.equals(entry.getKey())) continue;\n          if (!Slice.ACTIVE.equals(entry.getValue().getStr(Slice.STATE))) {\n            allActive = false;\n            break;\n          }\n        }\n        if (allActive) {\n          log.info(\"Shard: {} - all replicas are active. Finding status of fellow sub-shards\", sliceName);\n          // find out about other sub shards\n          Map<String, Slice> allSlicesCopy = new HashMap<>(collection.getSlicesMap());\n          List<Slice> subShardSlices = new ArrayList<>();\n          outer:\n          for (Map.Entry<String, Slice> entry : allSlicesCopy.entrySet()) {\n            if (sliceName.equals(entry.getKey()))\n              continue;\n            Slice otherSlice = entry.getValue();\n            if (Slice.RECOVERY.equals(otherSlice.getState())) {\n              if (slice.getParent() != null && slice.getParent().equals(otherSlice.getParent())) {\n                log.info(\"Shard: {} - Fellow sub-shard: {} found\", sliceName, otherSlice.getName());\n                // this is a fellow sub shard so check if all replicas are active\n                for (Map.Entry<String, Replica> sliceEntry : otherSlice.getReplicasMap().entrySet()) {\n                  if (!ZkStateReader.ACTIVE.equals(sliceEntry.getValue().getStr(ZkStateReader.STATE_PROP))) {\n                    allActive = false;\n                    break outer;\n                  }\n                }\n                log.info(\"Shard: {} - Fellow sub-shard: {} has all replicas active\", sliceName, otherSlice.getName());\n                subShardSlices.add(otherSlice);\n              }\n            }\n          }\n          if (allActive) {\n            // hurray, all sub shard replicas are active\n            log.info(\"Shard: {} - All replicas across all fellow sub-shards are now ACTIVE. Preparing to switch shard states.\", sliceName);\n            String parentSliceName = (String) sliceProps.remove(Slice.PARENT);\n\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n            propMap.put(parentSliceName, Slice.INACTIVE);\n            propMap.put(sliceName, Slice.ACTIVE);\n            for (Slice subShardSlice : subShardSlices) {\n              propMap.put(subShardSlice.getName(), Slice.ACTIVE);\n            }\n            propMap.put(ZkStateReader.COLLECTION_PROP, collection.getName());\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            return new SliceMutator(zkStateReader).updateShardState(prevState, m).collection;\n          }\n        }\n      }\n    }\n    return collection;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["383671a9fe2f5147abf22eb1ce56e3ca3d6eb133","6a23ab64d81a448ad6ec571cbfc9599cc09b4e4b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","date":1427866967,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#checkAndCompleteShardSplit(ClusterState,DocCollection,String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#checkAndCompleteShardSplit(ClusterState,DocCollection,String,String,Map[String,Object]).mjava","sourceNew":"  private DocCollection checkAndCompleteShardSplit(ClusterState prevState, DocCollection collection, String coreNodeName, String sliceName, Map<String, Object> replicaProps) {\n    Slice slice = collection.getSlice(sliceName);\n    Map<String, Object> sliceProps = slice.getProperties();\n    if (slice.getState() == Slice.State.RECOVERY) {\n      log.info(\"Shard: {} is in recovery state\", sliceName);\n      // is this replica active?\n      if (ZkStateReader.ACTIVE.equals(replicaProps.get(ZkStateReader.STATE_PROP))) {\n        log.info(\"Shard: {} is in recovery state and coreNodeName: {} is active\", sliceName, coreNodeName);\n        // are all other replicas also active?\n        boolean allActive = true;\n        for (Map.Entry<String, Replica> entry : slice.getReplicasMap().entrySet()) {\n          if (coreNodeName.equals(entry.getKey())) continue;\n          if (!ZkStateReader.ACTIVE.equals(entry.getValue().getStr(ZkStateReader.STATE_PROP))) {\n            allActive = false;\n            break;\n          }\n        }\n        if (allActive) {\n          log.info(\"Shard: {} - all replicas are active. Finding status of fellow sub-shards\", sliceName);\n          // find out about other sub shards\n          Map<String, Slice> allSlicesCopy = new HashMap<>(collection.getSlicesMap());\n          List<Slice> subShardSlices = new ArrayList<>();\n          outer:\n          for (Map.Entry<String, Slice> entry : allSlicesCopy.entrySet()) {\n            if (sliceName.equals(entry.getKey()))\n              continue;\n            Slice otherSlice = entry.getValue();\n            if (otherSlice.getState() == Slice.State.RECOVERY) {\n              if (slice.getParent() != null && slice.getParent().equals(otherSlice.getParent())) {\n                log.info(\"Shard: {} - Fellow sub-shard: {} found\", sliceName, otherSlice.getName());\n                // this is a fellow sub shard so check if all replicas are active\n                for (Map.Entry<String, Replica> sliceEntry : otherSlice.getReplicasMap().entrySet()) {\n                  if (!ZkStateReader.ACTIVE.equals(sliceEntry.getValue().getStr(ZkStateReader.STATE_PROP))) {\n                    allActive = false;\n                    break outer;\n                  }\n                }\n                log.info(\"Shard: {} - Fellow sub-shard: {} has all replicas active\", sliceName, otherSlice.getName());\n                subShardSlices.add(otherSlice);\n              }\n            }\n          }\n          if (allActive) {\n            // hurray, all sub shard replicas are active\n            log.info(\"Shard: {} - All replicas across all fellow sub-shards are now ACTIVE. Preparing to switch shard states.\", sliceName);\n            String parentSliceName = (String) sliceProps.remove(Slice.PARENT);\n\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n            propMap.put(parentSliceName, Slice.State.INACTIVE.toString());\n            propMap.put(sliceName, Slice.State.ACTIVE.toString());\n            for (Slice subShardSlice : subShardSlices) {\n              propMap.put(subShardSlice.getName(), Slice.State.ACTIVE.toString());\n            }\n            propMap.put(ZkStateReader.COLLECTION_PROP, collection.getName());\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            return new SliceMutator(zkStateReader).updateShardState(prevState, m).collection;\n          }\n        }\n      }\n    }\n    return collection;\n  }\n\n","sourceOld":"  private DocCollection checkAndCompleteShardSplit(ClusterState prevState, DocCollection collection, String coreNodeName, String sliceName, Map<String, Object> replicaProps) {\n    Slice slice = collection.getSlice(sliceName);\n    Map<String, Object> sliceProps = slice.getProperties();\n    String sliceState = slice.getState();\n    if (Slice.RECOVERY.equals(sliceState)) {\n      log.info(\"Shard: {} is in recovery state\", sliceName);\n      // is this replica active?\n      if (ZkStateReader.ACTIVE.equals(replicaProps.get(ZkStateReader.STATE_PROP))) {\n        log.info(\"Shard: {} is in recovery state and coreNodeName: {} is active\", sliceName, coreNodeName);\n        // are all other replicas also active?\n        boolean allActive = true;\n        for (Map.Entry<String, Replica> entry : slice.getReplicasMap().entrySet()) {\n          if (coreNodeName.equals(entry.getKey())) continue;\n          if (!Slice.ACTIVE.equals(entry.getValue().getStr(Slice.STATE))) {\n            allActive = false;\n            break;\n          }\n        }\n        if (allActive) {\n          log.info(\"Shard: {} - all replicas are active. Finding status of fellow sub-shards\", sliceName);\n          // find out about other sub shards\n          Map<String, Slice> allSlicesCopy = new HashMap<>(collection.getSlicesMap());\n          List<Slice> subShardSlices = new ArrayList<>();\n          outer:\n          for (Map.Entry<String, Slice> entry : allSlicesCopy.entrySet()) {\n            if (sliceName.equals(entry.getKey()))\n              continue;\n            Slice otherSlice = entry.getValue();\n            if (Slice.RECOVERY.equals(otherSlice.getState())) {\n              if (slice.getParent() != null && slice.getParent().equals(otherSlice.getParent())) {\n                log.info(\"Shard: {} - Fellow sub-shard: {} found\", sliceName, otherSlice.getName());\n                // this is a fellow sub shard so check if all replicas are active\n                for (Map.Entry<String, Replica> sliceEntry : otherSlice.getReplicasMap().entrySet()) {\n                  if (!ZkStateReader.ACTIVE.equals(sliceEntry.getValue().getStr(ZkStateReader.STATE_PROP))) {\n                    allActive = false;\n                    break outer;\n                  }\n                }\n                log.info(\"Shard: {} - Fellow sub-shard: {} has all replicas active\", sliceName, otherSlice.getName());\n                subShardSlices.add(otherSlice);\n              }\n            }\n          }\n          if (allActive) {\n            // hurray, all sub shard replicas are active\n            log.info(\"Shard: {} - All replicas across all fellow sub-shards are now ACTIVE. Preparing to switch shard states.\", sliceName);\n            String parentSliceName = (String) sliceProps.remove(Slice.PARENT);\n\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n            propMap.put(parentSliceName, Slice.INACTIVE);\n            propMap.put(sliceName, Slice.ACTIVE);\n            for (Slice subShardSlice : subShardSlices) {\n              propMap.put(subShardSlice.getName(), Slice.ACTIVE);\n            }\n            propMap.put(ZkStateReader.COLLECTION_PROP, collection.getName());\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            return new SliceMutator(zkStateReader).updateShardState(prevState, m).collection;\n          }\n        }\n      }\n    }\n    return collection;\n  }\n\n","bugFix":null,"bugIntro":["6a23ab64d81a448ad6ec571cbfc9599cc09b4e4b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#checkAndCompleteShardSplit(ClusterState,DocCollection,String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#checkAndCompleteShardSplit(ClusterState,DocCollection,String,String,Map[String,Object]).mjava","sourceNew":"  private DocCollection checkAndCompleteShardSplit(ClusterState prevState, DocCollection collection, String coreNodeName, String sliceName, Map<String, Object> replicaProps) {\n    Slice slice = collection.getSlice(sliceName);\n    Map<String, Object> sliceProps = slice.getProperties();\n    if (slice.getState() == Slice.State.RECOVERY) {\n      log.info(\"Shard: {} is in recovery state\", sliceName);\n      // is this replica active?\n      if (ZkStateReader.ACTIVE.equals(replicaProps.get(ZkStateReader.STATE_PROP))) {\n        log.info(\"Shard: {} is in recovery state and coreNodeName: {} is active\", sliceName, coreNodeName);\n        // are all other replicas also active?\n        boolean allActive = true;\n        for (Map.Entry<String, Replica> entry : slice.getReplicasMap().entrySet()) {\n          if (coreNodeName.equals(entry.getKey())) continue;\n          if (!ZkStateReader.ACTIVE.equals(entry.getValue().getStr(ZkStateReader.STATE_PROP))) {\n            allActive = false;\n            break;\n          }\n        }\n        if (allActive) {\n          log.info(\"Shard: {} - all replicas are active. Finding status of fellow sub-shards\", sliceName);\n          // find out about other sub shards\n          Map<String, Slice> allSlicesCopy = new HashMap<>(collection.getSlicesMap());\n          List<Slice> subShardSlices = new ArrayList<>();\n          outer:\n          for (Map.Entry<String, Slice> entry : allSlicesCopy.entrySet()) {\n            if (sliceName.equals(entry.getKey()))\n              continue;\n            Slice otherSlice = entry.getValue();\n            if (otherSlice.getState() == Slice.State.RECOVERY) {\n              if (slice.getParent() != null && slice.getParent().equals(otherSlice.getParent())) {\n                log.info(\"Shard: {} - Fellow sub-shard: {} found\", sliceName, otherSlice.getName());\n                // this is a fellow sub shard so check if all replicas are active\n                for (Map.Entry<String, Replica> sliceEntry : otherSlice.getReplicasMap().entrySet()) {\n                  if (!ZkStateReader.ACTIVE.equals(sliceEntry.getValue().getStr(ZkStateReader.STATE_PROP))) {\n                    allActive = false;\n                    break outer;\n                  }\n                }\n                log.info(\"Shard: {} - Fellow sub-shard: {} has all replicas active\", sliceName, otherSlice.getName());\n                subShardSlices.add(otherSlice);\n              }\n            }\n          }\n          if (allActive) {\n            // hurray, all sub shard replicas are active\n            log.info(\"Shard: {} - All replicas across all fellow sub-shards are now ACTIVE. Preparing to switch shard states.\", sliceName);\n            String parentSliceName = (String) sliceProps.remove(Slice.PARENT);\n\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n            propMap.put(parentSliceName, Slice.State.INACTIVE.toString());\n            propMap.put(sliceName, Slice.State.ACTIVE.toString());\n            for (Slice subShardSlice : subShardSlices) {\n              propMap.put(subShardSlice.getName(), Slice.State.ACTIVE.toString());\n            }\n            propMap.put(ZkStateReader.COLLECTION_PROP, collection.getName());\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            return new SliceMutator(zkStateReader).updateShardState(prevState, m).collection;\n          }\n        }\n      }\n    }\n    return collection;\n  }\n\n","sourceOld":"  private DocCollection checkAndCompleteShardSplit(ClusterState prevState, DocCollection collection, String coreNodeName, String sliceName, Map<String, Object> replicaProps) {\n    Slice slice = collection.getSlice(sliceName);\n    Map<String, Object> sliceProps = slice.getProperties();\n    String sliceState = slice.getState();\n    if (Slice.RECOVERY.equals(sliceState)) {\n      log.info(\"Shard: {} is in recovery state\", sliceName);\n      // is this replica active?\n      if (ZkStateReader.ACTIVE.equals(replicaProps.get(ZkStateReader.STATE_PROP))) {\n        log.info(\"Shard: {} is in recovery state and coreNodeName: {} is active\", sliceName, coreNodeName);\n        // are all other replicas also active?\n        boolean allActive = true;\n        for (Map.Entry<String, Replica> entry : slice.getReplicasMap().entrySet()) {\n          if (coreNodeName.equals(entry.getKey())) continue;\n          if (!Slice.ACTIVE.equals(entry.getValue().getStr(Slice.STATE))) {\n            allActive = false;\n            break;\n          }\n        }\n        if (allActive) {\n          log.info(\"Shard: {} - all replicas are active. Finding status of fellow sub-shards\", sliceName);\n          // find out about other sub shards\n          Map<String, Slice> allSlicesCopy = new HashMap<>(collection.getSlicesMap());\n          List<Slice> subShardSlices = new ArrayList<>();\n          outer:\n          for (Map.Entry<String, Slice> entry : allSlicesCopy.entrySet()) {\n            if (sliceName.equals(entry.getKey()))\n              continue;\n            Slice otherSlice = entry.getValue();\n            if (Slice.RECOVERY.equals(otherSlice.getState())) {\n              if (slice.getParent() != null && slice.getParent().equals(otherSlice.getParent())) {\n                log.info(\"Shard: {} - Fellow sub-shard: {} found\", sliceName, otherSlice.getName());\n                // this is a fellow sub shard so check if all replicas are active\n                for (Map.Entry<String, Replica> sliceEntry : otherSlice.getReplicasMap().entrySet()) {\n                  if (!ZkStateReader.ACTIVE.equals(sliceEntry.getValue().getStr(ZkStateReader.STATE_PROP))) {\n                    allActive = false;\n                    break outer;\n                  }\n                }\n                log.info(\"Shard: {} - Fellow sub-shard: {} has all replicas active\", sliceName, otherSlice.getName());\n                subShardSlices.add(otherSlice);\n              }\n            }\n          }\n          if (allActive) {\n            // hurray, all sub shard replicas are active\n            log.info(\"Shard: {} - All replicas across all fellow sub-shards are now ACTIVE. Preparing to switch shard states.\", sliceName);\n            String parentSliceName = (String) sliceProps.remove(Slice.PARENT);\n\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n            propMap.put(parentSliceName, Slice.INACTIVE);\n            propMap.put(sliceName, Slice.ACTIVE);\n            for (Slice subShardSlice : subShardSlices) {\n              propMap.put(subShardSlice.getName(), Slice.ACTIVE);\n            }\n            propMap.put(ZkStateReader.COLLECTION_PROP, collection.getName());\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            return new SliceMutator(zkStateReader).updateShardState(prevState, m).collection;\n          }\n        }\n      }\n    }\n    return collection;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#checkAndCompleteShardSplit(ClusterState,DocCollection,String,String,Replica).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/ReplicaMutator#checkAndCompleteShardSplit(ClusterState,DocCollection,String,String,Map[String,Object]).mjava","sourceNew":"  private DocCollection checkAndCompleteShardSplit(ClusterState prevState, DocCollection collection, String coreNodeName, String sliceName, Replica replica) {\n    Slice slice = collection.getSlice(sliceName);\n    Map<String, Object> sliceProps = slice.getProperties();\n    if (slice.getState() == Slice.State.RECOVERY) {\n      log.info(\"Shard: {} is in recovery state\", sliceName);\n      // is this replica active?\n      if (replica.getState() == Replica.State.ACTIVE) {\n        log.info(\"Shard: {} is in recovery state and coreNodeName: {} is active\", sliceName, coreNodeName);\n        // are all other replicas also active?\n        boolean allActive = true;\n        for (Map.Entry<String, Replica> entry : slice.getReplicasMap().entrySet()) {\n          if (coreNodeName.equals(entry.getKey())) continue;\n          if (entry.getValue().getState() != Replica.State.ACTIVE) {\n            allActive = false;\n            break;\n          }\n        }\n        if (allActive) {\n          log.info(\"Shard: {} - all replicas are active. Finding status of fellow sub-shards\", sliceName);\n          // find out about other sub shards\n          Map<String, Slice> allSlicesCopy = new HashMap<>(collection.getSlicesMap());\n          List<Slice> subShardSlices = new ArrayList<>();\n          outer:\n          for (Map.Entry<String, Slice> entry : allSlicesCopy.entrySet()) {\n            if (sliceName.equals(entry.getKey()))\n              continue;\n            Slice otherSlice = entry.getValue();\n            if (otherSlice.getState() == Slice.State.RECOVERY) {\n              if (slice.getParent() != null && slice.getParent().equals(otherSlice.getParent())) {\n                log.info(\"Shard: {} - Fellow sub-shard: {} found\", sliceName, otherSlice.getName());\n                // this is a fellow sub shard so check if all replicas are active\n                for (Map.Entry<String, Replica> sliceEntry : otherSlice.getReplicasMap().entrySet()) {\n                  if (sliceEntry.getValue().getState() != Replica.State.ACTIVE) {\n                    allActive = false;\n                    break outer;\n                  }\n                }\n                log.info(\"Shard: {} - Fellow sub-shard: {} has all replicas active\", sliceName, otherSlice.getName());\n                subShardSlices.add(otherSlice);\n              }\n            }\n          }\n          if (allActive) {\n            // hurray, all sub shard replicas are active\n            log.info(\"Shard: {} - All replicas across all fellow sub-shards are now ACTIVE. Preparing to switch shard states.\", sliceName);\n            String parentSliceName = (String) sliceProps.remove(Slice.PARENT);\n\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n            propMap.put(parentSliceName, Slice.State.INACTIVE.toString());\n            propMap.put(sliceName, Slice.State.ACTIVE.toString());\n            for (Slice subShardSlice : subShardSlices) {\n              propMap.put(subShardSlice.getName(), Slice.State.ACTIVE.toString());\n            }\n            propMap.put(ZkStateReader.COLLECTION_PROP, collection.getName());\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            return new SliceMutator(zkStateReader).updateShardState(prevState, m).collection;\n          }\n        }\n      }\n    }\n    return collection;\n  }\n\n","sourceOld":"  private DocCollection checkAndCompleteShardSplit(ClusterState prevState, DocCollection collection, String coreNodeName, String sliceName, Map<String, Object> replicaProps) {\n    Slice slice = collection.getSlice(sliceName);\n    Map<String, Object> sliceProps = slice.getProperties();\n    if (slice.getState() == Slice.State.RECOVERY) {\n      log.info(\"Shard: {} is in recovery state\", sliceName);\n      // is this replica active?\n      if (ZkStateReader.ACTIVE.equals(replicaProps.get(ZkStateReader.STATE_PROP))) {\n        log.info(\"Shard: {} is in recovery state and coreNodeName: {} is active\", sliceName, coreNodeName);\n        // are all other replicas also active?\n        boolean allActive = true;\n        for (Map.Entry<String, Replica> entry : slice.getReplicasMap().entrySet()) {\n          if (coreNodeName.equals(entry.getKey())) continue;\n          if (!ZkStateReader.ACTIVE.equals(entry.getValue().getStr(ZkStateReader.STATE_PROP))) {\n            allActive = false;\n            break;\n          }\n        }\n        if (allActive) {\n          log.info(\"Shard: {} - all replicas are active. Finding status of fellow sub-shards\", sliceName);\n          // find out about other sub shards\n          Map<String, Slice> allSlicesCopy = new HashMap<>(collection.getSlicesMap());\n          List<Slice> subShardSlices = new ArrayList<>();\n          outer:\n          for (Map.Entry<String, Slice> entry : allSlicesCopy.entrySet()) {\n            if (sliceName.equals(entry.getKey()))\n              continue;\n            Slice otherSlice = entry.getValue();\n            if (otherSlice.getState() == Slice.State.RECOVERY) {\n              if (slice.getParent() != null && slice.getParent().equals(otherSlice.getParent())) {\n                log.info(\"Shard: {} - Fellow sub-shard: {} found\", sliceName, otherSlice.getName());\n                // this is a fellow sub shard so check if all replicas are active\n                for (Map.Entry<String, Replica> sliceEntry : otherSlice.getReplicasMap().entrySet()) {\n                  if (!ZkStateReader.ACTIVE.equals(sliceEntry.getValue().getStr(ZkStateReader.STATE_PROP))) {\n                    allActive = false;\n                    break outer;\n                  }\n                }\n                log.info(\"Shard: {} - Fellow sub-shard: {} has all replicas active\", sliceName, otherSlice.getName());\n                subShardSlices.add(otherSlice);\n              }\n            }\n          }\n          if (allActive) {\n            // hurray, all sub shard replicas are active\n            log.info(\"Shard: {} - All replicas across all fellow sub-shards are now ACTIVE. Preparing to switch shard states.\", sliceName);\n            String parentSliceName = (String) sliceProps.remove(Slice.PARENT);\n\n            Map<String, Object> propMap = new HashMap<>();\n            propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n            propMap.put(parentSliceName, Slice.State.INACTIVE.toString());\n            propMap.put(sliceName, Slice.State.ACTIVE.toString());\n            for (Slice subShardSlice : subShardSlices) {\n              propMap.put(subShardSlice.getName(), Slice.State.ACTIVE.toString());\n            }\n            propMap.put(ZkStateReader.COLLECTION_PROP, collection.getName());\n            ZkNodeProps m = new ZkNodeProps(propMap);\n            return new SliceMutator(zkStateReader).updateShardState(prevState, m).collection;\n          }\n        }\n      }\n    }\n    return collection;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"0c924d4069ef5a5bc479a493befe0121aada6896":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a","d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","0c924d4069ef5a5bc479a493befe0121aada6896"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["a219f1dcad1700e84807666bdbd2b573e8de7021","0c924d4069ef5a5bc479a493befe0121aada6896"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0c924d4069ef5a5bc479a493befe0121aada6896":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}