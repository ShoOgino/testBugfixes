{"path":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","sourceNew":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null));\n    assertNull(mp.findForcedMerges(null, 0, null));\n    assertNull(mp.findForcedDeletesMerges(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null));\n    assertNull(mp.findForcedMerges(null, 0, null));\n    assertNull(mp.findForcedDeletesMerges(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"181b1aa5a99534972fbfd5595cdbb38bba5f39ee","date":1350576187,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","sourceNew":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null, (SegmentInfos)null));\n    assertNull(mp.findForcedMerges(null, 0, null));\n    assertNull(mp.findForcedDeletesMerges(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null));\n    assertNull(mp.findForcedMerges(null, 0, null));\n    assertNull(mp.findForcedDeletesMerges(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","sourceNew":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null, (SegmentInfos)null));\n    assertNull(mp.findForcedMerges(null, 0, null));\n    assertNull(mp.findForcedDeletesMerges(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null));\n    assertNull(mp.findForcedMerges(null, 0, null));\n    assertNull(mp.findForcedDeletesMerges(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2fb55c0777755badd3b46d8140f3d4301febed","date":1398881584,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","sourceNew":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.INSTANCE;\n    assertNull(mp.findMerges(null, (SegmentInfos)null));\n    assertNull(mp.findForcedMerges(null, 0, null));\n    assertNull(mp.findForcedDeletesMerges(null));\n    mp.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.NO_COMPOUND_FILES;\n    assertNull(mp.findMerges(null, (SegmentInfos)null));\n    assertNull(mp.findForcedMerges(null, 0, null));\n    assertNull(mp.findForcedDeletesMerges(null));\n    assertFalse(mp.useCompoundFile(null, null));\n    mp.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"027bee21e09164c9ee230395405076d1e0034b30","date":1401521821,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","sourceNew":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.INSTANCE;\n    assertNull(mp.findMerges(null, (SegmentInfos)null, null));\n    assertNull(mp.findForcedMerges(null, 0, null, null));\n    assertNull(mp.findForcedDeletesMerges(null, null));\n    mp.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.INSTANCE;\n    assertNull(mp.findMerges(null, (SegmentInfos)null));\n    assertNull(mp.findForcedMerges(null, 0, null));\n    assertNull(mp.findForcedDeletesMerges(null));\n    mp.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee59f646cf24586a449cad77391a60a3ac8d8959","date":1408015131,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","sourceNew":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.INSTANCE;\n    assertNull(mp.findMerges(null, (SegmentInfos)null, null));\n    assertNull(mp.findForcedMerges(null, 0, null, null));\n    assertNull(mp.findForcedDeletesMerges(null, null));\n  }\n\n","sourceOld":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.INSTANCE;\n    assertNull(mp.findMerges(null, (SegmentInfos)null, null));\n    assertNull(mp.findForcedMerges(null, 0, null, null));\n    assertNull(mp.findForcedDeletesMerges(null, null));\n    mp.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a8461944a2fa90888fc4e598e5c02ac5338d03f","date":1454349069,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","sourceNew":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = mergePolicy();\n    assertNull(mp.findMerges(null, (SegmentInfos)null, null));\n    assertNull(mp.findForcedMerges(null, 0, null, null));\n    assertNull(mp.findForcedDeletesMerges(null, null));\n  }\n\n","sourceOld":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.INSTANCE;\n    assertNull(mp.findMerges(null, (SegmentInfos)null, null));\n    assertNull(mp.findForcedMerges(null, 0, null, null));\n    assertNull(mp.findForcedDeletesMerges(null, null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNoMergePolicy#testNoMergePolicy().mjava","sourceNew":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = mergePolicy();\n    assertNull(mp.findMerges(null, (SegmentInfos)null, null));\n    assertNull(mp.findForcedMerges(null, 0, null, null));\n    assertNull(mp.findForcedDeletesMerges(null, null));\n  }\n\n","sourceOld":"  @Test\n  public void testNoMergePolicy() throws Exception {\n    MergePolicy mp = NoMergePolicy.INSTANCE;\n    assertNull(mp.findMerges(null, (SegmentInfos)null, null));\n    assertNull(mp.findForcedMerges(null, 0, null, null));\n    assertNull(mp.findForcedDeletesMerges(null, null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"62e52115b56781006682fd92c6938efaf174304d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"ee59f646cf24586a449cad77391a60a3ac8d8959":["027bee21e09164c9ee230395405076d1e0034b30"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["ee59f646cf24586a449cad77391a60a3ac8d8959","9a8461944a2fa90888fc4e598e5c02ac5338d03f"],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9a8461944a2fa90888fc4e598e5c02ac5338d03f":["ee59f646cf24586a449cad77391a60a3ac8d8959"],"027bee21e09164c9ee230395405076d1e0034b30":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a8461944a2fa90888fc4e598e5c02ac5338d03f"]},"commit2Childs":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["027bee21e09164c9ee230395405076d1e0034b30"],"62e52115b56781006682fd92c6938efaf174304d":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["62e52115b56781006682fd92c6938efaf174304d","181b1aa5a99534972fbfd5595cdbb38bba5f39ee"],"ee59f646cf24586a449cad77391a60a3ac8d8959":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","9a8461944a2fa90888fc4e598e5c02ac5338d03f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"181b1aa5a99534972fbfd5595cdbb38bba5f39ee":["7e2fb55c0777755badd3b46d8140f3d4301febed","62e52115b56781006682fd92c6938efaf174304d"],"9a8461944a2fa90888fc4e598e5c02ac5338d03f":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"027bee21e09164c9ee230395405076d1e0034b30":["ee59f646cf24586a449cad77391a60a3ac8d8959"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}