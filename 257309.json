{"path":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random, new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cc32d96f128d1904bfd6876bf8b7e4620ed8da0","date":1345003667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n        dir.setWrapLockFactory(false); // we are gonna explicitly test we get this back\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n        dir.setWrapLockFactory(false); // we are gonna explicitly test we get this back\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n        dir.setWrapLockFactory(false); // we are gonna explicitly test we get this back\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n        dir.setWrapLockFactory(false); // we are gonna explicitly test we get this back\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n        dir.setWrapLockFactory(false); // we are gonna explicitly test we get this back\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        Directory dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n        dir.setWrapLockFactory(false); // we are gonna explicitly test we get this back\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n        dir.setWrapLockFactory(false); // we are gonna explicitly test we get this back\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n        dir.setWrapLockFactory(false); // we are gonna explicitly test we get this back\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n        dir.setWrapLockFactory(false); // we are gonna explicitly test we get this back\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n        dir.setWrapLockFactory(false); // we are gonna explicitly test we get this back\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.shutdown();\n        if (writer2 != null) {\n            writer2.shutdown();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n        dir.setWrapLockFactory(false); // we are gonna explicitly test we get this back\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n        dir.setWrapLockFactory(false); // we are gonna explicitly test we get this back\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n        dir.setWrapLockFactory(false); // we are gonna explicitly test we get this back\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.shutdown();\n        if (writer2 != null) {\n            writer2.shutdown();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory(NoLockFactory.INSTANCE));\n        dir.setAssertLocks(false); // we are gonna explicitly test we get this back\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory());\n        dir.setLockFactory(NoLockFactory.getNoLockFactory());\n        dir.setWrapLockFactory(false); // we are gonna explicitly test we get this back\n        assertTrue(\"RAMDirectory.setLockFactory did not take\",\n                   NoLockFactory.class.isInstance(dir.getLockFactory()));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory(NoLockFactory.INSTANCE));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory(NoLockFactory.INSTANCE));\n        dir.setAssertLocks(false); // we are gonna explicitly test we get this back\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testDirectoryNoLocking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestLockFactory#testRAMDirectoryNoLocking().mjava","sourceNew":"    // Verify: we can use the NoLockFactory w/ no exceptions raised.\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testDirectoryNoLocking() throws IOException {\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new ByteBuffersDirectory(NoLockFactory.INSTANCE));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed\n\n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","sourceOld":"    // Verify: we can use the NoLockFactory with RAMDirectory w/ no\n    // exceptions raised:\n    // Verify: NoLockFactory allows two IndexWriters\n    public void testRAMDirectoryNoLocking() throws IOException {\n        MockDirectoryWrapper dir = new MockDirectoryWrapper(random(), new RAMDirectory(NoLockFactory.INSTANCE));\n\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n        writer.commit(); // required so the second open succeed \n        // Create a 2nd IndexWriter.  This is normally not allowed but it should run through since we're not\n        // using any locks:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.APPEND));\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with no locking\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","0cc32d96f128d1904bfd6876bf8b7e4620ed8da0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"285cdc737de75b7cc7c284a156b20214deb67bca":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"d77dafd89756a5161d244985903e3487ca109182":["618635065f043788c9e034f96ca5cd5cea1b4592"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["0cc32d96f128d1904bfd6876bf8b7e4620ed8da0"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","0cc32d96f128d1904bfd6876bf8b7e4620ed8da0"],"0cc32d96f128d1904bfd6876bf8b7e4620ed8da0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"618635065f043788c9e034f96ca5cd5cea1b4592":["285cdc737de75b7cc7c284a156b20214deb67bca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["0cc32d96f128d1904bfd6876bf8b7e4620ed8da0"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"285cdc737de75b7cc7c284a156b20214deb67bca":["618635065f043788c9e034f96ca5cd5cea1b4592"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"0cc32d96f128d1904bfd6876bf8b7e4620ed8da0":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","19275ba31e621f6da1b83bf13af75233876fd3d4","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"618635065f043788c9e034f96ca5cd5cea1b4592":["d77dafd89756a5161d244985903e3487ca109182"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["285cdc737de75b7cc7c284a156b20214deb67bca"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3c188105a9aae04f56c24996f98f8333fc825d2e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","0cc32d96f128d1904bfd6876bf8b7e4620ed8da0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}