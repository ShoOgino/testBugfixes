{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testDiskSpaceReqd().mjava","commits":[{"id":"c14cf5d507f6a96d702a87ac21694d5efa725d56","date":1516118674,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testDiskSpaceReqd().mjava","pathOld":"/dev/null","sourceNew":"  public void testDiskSpaceReqd() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer}\" +\n\n        \"  ]\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 262, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 749, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            if (node.equals(\"node1\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard1\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard1\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\")),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            } else if (node.equals(\"node2\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard2\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard2\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\")),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            }\n            return Collections.emptyMap();\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n\n          @Override\n          public DocCollection getCollection(String name) throws IOException {\n            return new DocCollection(name, Collections.emptyMap(), Collections.emptyMap(), DocRouter.DEFAULT) {\n              @Override\n              public Replica getLeader(String sliceName) {\n                if (sliceName.equals(\"shard1\"))\n                  return new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\"));\n                if (sliceName.equals(\"shard2\"))\n                  return new Replica(\"r2\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\"));\n                return null;\n              }\n            };\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, null, Arrays.asList(\"shard1\", \"shard2\"), 1, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> \"node3\".equals(it.node)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testDiskSpaceReqd().mjava","pathOld":"/dev/null","sourceNew":"  public void testDiskSpaceReqd() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer}\" +\n\n        \"  ]\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 262, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 749, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            if (node.equals(\"node1\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard1\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard1\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\")),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            } else if (node.equals(\"node2\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard2\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard2\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\")),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            }\n            return Collections.emptyMap();\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n\n          @Override\n          public DocCollection getCollection(String name) throws IOException {\n            return new DocCollection(name, Collections.emptyMap(), Collections.emptyMap(), DocRouter.DEFAULT) {\n              @Override\n              public Replica getLeader(String sliceName) {\n                if (sliceName.equals(\"shard1\"))\n                  return new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\"));\n                if (sliceName.equals(\"shard2\"))\n                  return new Replica(\"r2\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\"));\n                return null;\n              }\n            };\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, null, Arrays.asList(\"shard1\", \"shard2\"), 1, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> \"node3\".equals(it.node)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33ae23947c41339ea2b352422bb762dfb4a17077","date":1524235117,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testDiskSpaceReqd().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testDiskSpaceReqd().mjava","sourceNew":"  public void testDiskSpaceReqd() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer}\" +\n\n        \"  ]\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 262, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 749, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            if (node.equals(\"node1\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard1\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard1\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\")),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            } else if (node.equals(\"node2\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard2\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard2\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\")),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            }\n            return Collections.emptyMap();\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n\n          @Override\n          public DocCollection getCollection(String name) {\n            return new DocCollection(name, Collections.emptyMap(), Collections.emptyMap(), DocRouter.DEFAULT) {\n              @Override\n              public Replica getLeader(String sliceName) {\n                if (sliceName.equals(\"shard1\"))\n                  return new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\"));\n                if (sliceName.equals(\"shard2\"))\n                  return new Replica(\"r2\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\"));\n                return null;\n              }\n            };\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, null, Arrays.asList(\"shard1\", \"shard2\"), 1, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> \"node3\".equals(it.node)));\n  }\n\n","sourceOld":"  public void testDiskSpaceReqd() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer}\" +\n\n        \"  ]\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 262, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 749, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            if (node.equals(\"node1\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard1\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard1\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\")),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            } else if (node.equals(\"node2\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard2\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard2\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\")),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            }\n            return Collections.emptyMap();\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n\n          @Override\n          public DocCollection getCollection(String name) throws IOException {\n            return new DocCollection(name, Collections.emptyMap(), Collections.emptyMap(), DocRouter.DEFAULT) {\n              @Override\n              public Replica getLeader(String sliceName) {\n                if (sliceName.equals(\"shard1\"))\n                  return new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\"));\n                if (sliceName.equals(\"shard2\"))\n                  return new Replica(\"r2\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\"));\n                return null;\n              }\n            };\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, null, Arrays.asList(\"shard1\", \"shard2\"), 1, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> \"node3\".equals(it.node)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testDiskSpaceReqd().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testDiskSpaceReqd().mjava","sourceNew":"  public void testDiskSpaceReqd() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer}\" +\n\n        \"  ]\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 262, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 749, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            if (node.equals(\"node1\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard1\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard1\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\")),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            } else if (node.equals(\"node2\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard2\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard2\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\")),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            }\n            return new HashMap<>();\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n\n          @Override\n          public DocCollection getCollection(String name) {\n            return new DocCollection(name, Collections.emptyMap(), Collections.emptyMap(), DocRouter.DEFAULT) {\n              @Override\n              public Replica getLeader(String sliceName) {\n                if (sliceName.equals(\"shard1\"))\n                  return new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\"));\n                if (sliceName.equals(\"shard2\"))\n                  return new Replica(\"r2\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\"));\n                return null;\n              }\n            };\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, null, Arrays.asList(\"shard1\", \"shard2\"), 1, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> \"node3\".equals(it.node)));\n  }\n\n","sourceOld":"  public void testDiskSpaceReqd() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer}\" +\n\n        \"  ]\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 262, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 749, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            if (node.equals(\"node1\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard1\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard1\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\")),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            } else if (node.equals(\"node2\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard2\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard2\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\")),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            }\n            return Collections.emptyMap();\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n\n          @Override\n          public DocCollection getCollection(String name) {\n            return new DocCollection(name, Collections.emptyMap(), Collections.emptyMap(), DocRouter.DEFAULT) {\n              @Override\n              public Replica getLeader(String sliceName) {\n                if (sliceName.equals(\"shard1\"))\n                  return new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\"));\n                if (sliceName.equals(\"shard2\"))\n                  return new Replica(\"r2\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\"));\n                return null;\n              }\n            };\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, null, Arrays.asList(\"shard1\", \"shard2\"), 1, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> \"node3\".equals(it.node)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testDiskSpaceReqd().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testDiskSpaceReqd().mjava","sourceNew":"  public void testDiskSpaceReqd() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer}\" +\n\n        \"  ]\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 262, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 749, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            if (node.equals(\"node1\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard1\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard1\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\"), \"newColl\", \"shard1\"),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            } else if (node.equals(\"node2\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard2\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard2\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\"),\"newColl\", \"shard2\"),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            }\n            return new HashMap<>();\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n\n          @Override\n          public DocCollection getCollection(String name) {\n            return new DocCollection(name, Collections.emptyMap(), Collections.emptyMap(), DocRouter.DEFAULT) {\n              @Override\n              public Replica getLeader(String sliceName) {\n                if (sliceName.equals(\"shard1\"))\n                  return new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\"), name, \"shard1\");\n                if (sliceName.equals(\"shard2\"))\n                  return new Replica(\"r2\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\"),name, \"shard2\");\n                return null;\n              }\n            };\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, null, Arrays.asList(\"shard1\", \"shard2\"), 1, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> \"node3\".equals(it.node)));\n  }\n\n","sourceOld":"  public void testDiskSpaceReqd() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer}\" +\n\n        \"  ]\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 262, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 749, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            if (node.equals(\"node1\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard1\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard1\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\")),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            } else if (node.equals(\"node2\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard2\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard2\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\")),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            }\n            return new HashMap<>();\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n\n          @Override\n          public DocCollection getCollection(String name) {\n            return new DocCollection(name, Collections.emptyMap(), Collections.emptyMap(), DocRouter.DEFAULT) {\n              @Override\n              public Replica getLeader(String sliceName) {\n                if (sliceName.equals(\"shard1\"))\n                  return new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\"));\n                if (sliceName.equals(\"shard2\"))\n                  return new Replica(\"r2\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\"));\n                return null;\n              }\n            };\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, null, Arrays.asList(\"shard1\", \"shard2\"), 1, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> \"node3\".equals(it.node)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testDiskSpaceReqd().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testDiskSpaceReqd().mjava","sourceNew":"  public void testDiskSpaceReqd() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer}\" +\n\n        \"  ]\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 262, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 749, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            if (node.equals(\"node1\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard1\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard1\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\"), \"newColl\", \"shard1\"),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            } else if (node.equals(\"node2\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard2\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard2\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\"),\"newColl\", \"shard2\"),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            }\n            return new HashMap<>();\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n\n          @Override\n          public DocCollection getCollection(String name) {\n            return new DocCollection(name, Collections.emptyMap(), Collections.emptyMap(), DocRouter.DEFAULT) {\n              @Override\n              public Replica getLeader(String sliceName) {\n                if (sliceName.equals(\"shard1\"))\n                  return new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\"), name, \"shard1\");\n                if (sliceName.equals(\"shard2\"))\n                  return new Replica(\"r2\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\"),name, \"shard2\");\n                return null;\n              }\n            };\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, null, Arrays.asList(\"shard1\", \"shard2\"), 1, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> \"node3\".equals(it.node)));\n  }\n\n","sourceOld":"  public void testDiskSpaceReqd() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer}\" +\n\n        \"  ]\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 262, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 749, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            if (node.equals(\"node1\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard1\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard1\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\")),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            } else if (node.equals(\"node2\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard2\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard2\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\")),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            }\n            return new HashMap<>();\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n\n          @Override\n          public DocCollection getCollection(String name) {\n            return new DocCollection(name, Collections.emptyMap(), Collections.emptyMap(), DocRouter.DEFAULT) {\n              @Override\n              public Replica getLeader(String sliceName) {\n                if (sliceName.equals(\"shard1\"))\n                  return new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\"));\n                if (sliceName.equals(\"shard2\"))\n                  return new Replica(\"r2\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\"));\n                return null;\n              }\n            };\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, null, Arrays.asList(\"shard1\", \"shard2\"), 1, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> \"node3\".equals(it.node)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ea07d22cef2406e950de111f8aa7bc2edb91d56","date":1581094599,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testDiskSpaceReqd().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testDiskSpaceReqd().mjava","sourceNew":"  public void testDiskSpaceReqd() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer}\" +\n\n        \"  ]\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 262, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 749, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            if (node.equals(\"node1\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard1\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard1\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\", ZkStateReader.CORE_NAME_PROP, \"core1\"), \"newColl\", \"shard1\"),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            } else if (node.equals(\"node2\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard2\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard2\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\", ZkStateReader.CORE_NAME_PROP, \"core2\"),\"newColl\", \"shard2\"),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            }\n            return new HashMap<>();\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n\n          @Override\n          public DocCollection getCollection(String name) {\n            return new DocCollection(name, Collections.emptyMap(), Collections.emptyMap(), DocRouter.DEFAULT) {\n              @Override\n              public Replica getLeader(String sliceName) {\n                if (sliceName.equals(\"shard1\"))\n                  return new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\", ZkStateReader.CORE_NAME_PROP, \"core1\"), name, \"shard1\");\n                if (sliceName.equals(\"shard2\"))\n                  return new Replica(\"r2\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\", ZkStateReader.CORE_NAME_PROP, \"core2\"),name, \"shard2\");\n                return null;\n              }\n            };\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, null, Arrays.asList(\"shard1\", \"shard2\"), 1, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> \"node3\".equals(it.node)));\n  }\n\n","sourceOld":"  public void testDiskSpaceReqd() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer}\" +\n\n        \"  ]\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 262, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 749, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            if (node.equals(\"node1\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard1\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard1\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\"), \"newColl\", \"shard1\"),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            } else if (node.equals(\"node2\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard2\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard2\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\"),\"newColl\", \"shard2\"),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            }\n            return new HashMap<>();\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n\n          @Override\n          public DocCollection getCollection(String name) {\n            return new DocCollection(name, Collections.emptyMap(), Collections.emptyMap(), DocRouter.DEFAULT) {\n              @Override\n              public Replica getLeader(String sliceName) {\n                if (sliceName.equals(\"shard1\"))\n                  return new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\"), name, \"shard1\");\n                if (sliceName.equals(\"shard2\"))\n                  return new Replica(\"r2\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\"),name, \"shard2\");\n                return null;\n              }\n            };\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, null, Arrays.asList(\"shard1\", \"shard2\"), 1, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> \"node3\".equals(it.node)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testDiskSpaceReqd().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testDiskSpaceReqd().mjava","sourceNew":"  public void testDiskSpaceReqd() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer}\" +\n\n        \"  ]\" +\n        \"}\";\n\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 262, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 749, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            if (node.equals(\"node1\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard1\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard1\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\", ZkStateReader.CORE_NAME_PROP, \"core1\"), \"newColl\", \"shard1\"),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            } else if (node.equals(\"node2\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard2\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard2\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\", ZkStateReader.CORE_NAME_PROP, \"core2\"),\"newColl\", \"shard2\"),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            }\n            return new HashMap<>();\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n\n          @Override\n          public DocCollection getCollection(String name) {\n            return new DocCollection(name, Collections.emptyMap(), Collections.emptyMap(), DocRouter.DEFAULT) {\n              @Override\n              public Replica getLeader(String sliceName) {\n                if (sliceName.equals(\"shard1\"))\n                  return new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\", ZkStateReader.CORE_NAME_PROP, \"core1\"), name, \"shard1\");\n                if (sliceName.equals(\"shard2\"))\n                  return new Replica(\"r2\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\", ZkStateReader.CORE_NAME_PROP, \"core2\"),name, \"shard2\");\n                return null;\n              }\n            };\n          }\n        };\n      }\n    };\n    @SuppressWarnings({\"unchecked\"})\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, null, Arrays.asList(\"shard1\", \"shard2\"), 1, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> \"node3\".equals(it.node)));\n  }\n\n","sourceOld":"  public void testDiskSpaceReqd() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer}\" +\n\n        \"  ]\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 262, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 749, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            if (node.equals(\"node1\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard1\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard1\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\", ZkStateReader.CORE_NAME_PROP, \"core1\"), \"newColl\", \"shard1\"),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            } else if (node.equals(\"node2\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard2\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard2\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\", ZkStateReader.CORE_NAME_PROP, \"core2\"),\"newColl\", \"shard2\"),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            }\n            return new HashMap<>();\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n\n          @Override\n          public DocCollection getCollection(String name) {\n            return new DocCollection(name, Collections.emptyMap(), Collections.emptyMap(), DocRouter.DEFAULT) {\n              @Override\n              public Replica getLeader(String sliceName) {\n                if (sliceName.equals(\"shard1\"))\n                  return new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\", ZkStateReader.CORE_NAME_PROP, \"core1\"), name, \"shard1\");\n                if (sliceName.equals(\"shard2\"))\n                  return new Replica(\"r2\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\", ZkStateReader.CORE_NAME_PROP, \"core2\"),name, \"shard2\");\n                return null;\n              }\n            };\n          }\n        };\n      }\n    };\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, null, Arrays.asList(\"shard1\", \"shard2\"), 1, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> \"node3\".equals(it.node)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testDiskSpaceReqd().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testDiskSpaceReqd().mjava","sourceNew":"  public void testDiskSpaceReqd() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer}\" +\n\n        \"  ]\" +\n        \"}\";\n\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 262, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 749, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n            if (node.equals(\"node1\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard1\", Collections.singletonList(new Replica(\"r1\", \"node1\", \"newColl\", \"shard1\", \"core1\",\n                      Replica.State.ACTIVE, Replica.Type.NRT, Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            } else if (node.equals(\"node2\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard2\", Collections.singletonList(new Replica(\"r1\", \"node2\", \"newColl\", \"shard2\", \"core2\",\n                      Replica.State.ACTIVE, Replica.Type.NRT, Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            }\n            return new HashMap<>();\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n\n          @Override\n          public DocCollection getCollection(String name) {\n            return new DocCollection(name, Collections.emptyMap(), Collections.emptyMap(), DocRouter.DEFAULT) {\n              @Override\n              public Replica getLeader(String sliceName) {\n                if (sliceName.equals(\"shard1\"))\n                  return new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\", ZkStateReader.CORE_NAME_PROP, \"core1\"), name, \"shard1\");\n                if (sliceName.equals(\"shard2\"))\n                  return new Replica(\"r2\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\", ZkStateReader.CORE_NAME_PROP, \"core2\"),name, \"shard2\");\n                return null;\n              }\n            };\n          }\n        };\n      }\n    };\n    @SuppressWarnings({\"unchecked\"})\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, null, Arrays.asList(\"shard1\", \"shard2\"), 1, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> \"node3\".equals(it.node)));\n  }\n\n","sourceOld":"  public void testDiskSpaceReqd() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer}\" +\n\n        \"  ]\" +\n        \"}\";\n\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 262, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 749, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            if (node.equals(\"node1\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard1\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard1\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\", ZkStateReader.CORE_NAME_PROP, \"core1\"), \"newColl\", \"shard1\"),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            } else if (node.equals(\"node2\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard2\", Collections.singletonList(new ReplicaInfo(\"r1\", \"shard2\",\n                      new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\", ZkStateReader.CORE_NAME_PROP, \"core2\"),\"newColl\", \"shard2\"),\n                      Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            }\n            return new HashMap<>();\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n\n          @Override\n          public DocCollection getCollection(String name) {\n            return new DocCollection(name, Collections.emptyMap(), Collections.emptyMap(), DocRouter.DEFAULT) {\n              @Override\n              public Replica getLeader(String sliceName) {\n                if (sliceName.equals(\"shard1\"))\n                  return new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\", ZkStateReader.CORE_NAME_PROP, \"core1\"), name, \"shard1\");\n                if (sliceName.equals(\"shard2\"))\n                  return new Replica(\"r2\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\", ZkStateReader.CORE_NAME_PROP, \"core2\"),name, \"shard2\");\n                return null;\n              }\n            };\n          }\n        };\n      }\n    };\n    @SuppressWarnings({\"unchecked\"})\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, null, Arrays.asList(\"shard1\", \"shard2\"), 1, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> \"node3\".equals(it.node)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testDiskSpaceReqd().mjava","sourceNew":null,"sourceOld":"  public void testDiskSpaceReqd() {\n    String autoScaleJson = \"{\" +\n        \"  cluster-preferences: [\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  cluster-policy: [\" +\n        \"    { replica : '0' , nodeRole: overseer}\" +\n\n        \"  ]\" +\n        \"}\";\n\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 262, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 749, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    SolrCloudManager cloudManager = new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n            if (node.equals(\"node1\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard1\", Collections.singletonList(new Replica(\"r1\", \"node1\", \"newColl\", \"shard1\", \"core1\",\n                      Replica.State.ACTIVE, Replica.Type.NRT, Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            } else if (node.equals(\"node2\")) {\n              Map m = Utils.makeMap(\"newColl\",\n                  Utils.makeMap(\"shard2\", Collections.singletonList(new Replica(\"r1\", \"node2\", \"newColl\", \"shard2\", \"core2\",\n                      Replica.State.ACTIVE, Replica.Type.NRT, Utils.makeMap(FREEDISK.perReplicaValue, 200)))));\n              return m;\n            }\n            return new HashMap<>();\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return new HashSet<>(Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\"));\n          }\n\n          @Override\n          public DocCollection getCollection(String name) {\n            return new DocCollection(name, Collections.emptyMap(), Collections.emptyMap(), DocRouter.DEFAULT) {\n              @Override\n              public Replica getLeader(String sliceName) {\n                if (sliceName.equals(\"shard1\"))\n                  return new Replica(\"r1\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node1\", ZkStateReader.CORE_NAME_PROP, \"core1\"), name, \"shard1\");\n                if (sliceName.equals(\"shard2\"))\n                  return new Replica(\"r2\", Utils.makeMap(ZkStateReader.NODE_NAME_PROP, \"node2\", ZkStateReader.CORE_NAME_PROP, \"core2\"),name, \"shard2\");\n                return null;\n              }\n            };\n          }\n        };\n      }\n    };\n    @SuppressWarnings({\"unchecked\"})\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScaleJson)),\n        cloudManager, null, Arrays.asList(\"shard1\", \"shard2\"), 1, 0, 0, null);\n    assertTrue(locations.stream().allMatch(it -> \"node3\".equals(it.node)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["3ea07d22cef2406e950de111f8aa7bc2edb91d56"],"58e890cd5653ae8550bc6088d739f4eaaf950aff":["33ae23947c41339ea2b352422bb762dfb4a17077"],"d3aa683bba99315838c968fefedf3d74f44aa993":["58e890cd5653ae8550bc6088d739f4eaaf950aff","6681d02f2302c363be938426e68f8dfd090cc1bf"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c14cf5d507f6a96d702a87ac21694d5efa725d56"],"c14cf5d507f6a96d702a87ac21694d5efa725d56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["9ba1b632c041956c93c41aa1143d16a567014891"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33ae23947c41339ea2b352422bb762dfb4a17077":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3ea07d22cef2406e950de111f8aa7bc2edb91d56":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["58e890cd5653ae8550bc6088d739f4eaaf950aff"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"58e890cd5653ae8550bc6088d739f4eaaf950aff":["d3aa683bba99315838c968fefedf3d74f44aa993","6681d02f2302c363be938426e68f8dfd090cc1bf"],"d3aa683bba99315838c968fefedf3d74f44aa993":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["33ae23947c41339ea2b352422bb762dfb4a17077"],"c14cf5d507f6a96d702a87ac21694d5efa725d56":["b94236357aaa22b76c10629851fe4e376e0cea82"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","c14cf5d507f6a96d702a87ac21694d5efa725d56"],"33ae23947c41339ea2b352422bb762dfb4a17077":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"3ea07d22cef2406e950de111f8aa7bc2edb91d56":["9ba1b632c041956c93c41aa1143d16a567014891"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","3ea07d22cef2406e950de111f8aa7bc2edb91d56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}