{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeIsStable().mjava","commits":[{"id":"94ee361295fb38310ac4d53cb4773d1622423d68","date":1456833885,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeIsStable().mjava","pathOld":"/dev/null","sourceNew":"  public void testEncodeDecodeIsStable() throws Exception {\n    int iters = atLeast(1000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n\n      double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(lat));\n      double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lon));\n\n      double latEnc2 = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latEnc));\n      double lonEnc2 = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonEnc));\n      assertEquals(latEnc, latEnc2, 0.0);\n      assertEquals(lonEnc, lonEnc2, 0.0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeIsStable().mjava","pathOld":"/dev/null","sourceNew":"  public void testEncodeDecodeIsStable() throws Exception {\n    int iters = atLeast(1000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n\n      double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(lat));\n      double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lon));\n\n      double latEnc2 = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latEnc));\n      double lonEnc2 = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonEnc));\n      assertEquals(latEnc, latEnc2, 0.0);\n      assertEquals(lonEnc, lonEnc2, 0.0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6c59bc551f4e523ce6a321280cc6733424fb824","date":1458837690,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeIsStable().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeIsStable().mjava","sourceNew":"  public void testEncodeDecodeIsStable() throws Exception {\n    int iters = atLeast(1000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n\n      double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(lat));\n      double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lon));\n\n      double latEnc2 = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latEnc));\n      double lonEnc2 = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonEnc));\n      assertEquals(latEnc, latEnc2, 0.0);\n      assertEquals(lonEnc, lonEnc2, 0.0);\n    }\n  }   \n\n","sourceOld":"  public void testEncodeDecodeIsStable() throws Exception {\n    int iters = atLeast(1000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n\n      double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(lat));\n      double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lon));\n\n      double latEnc2 = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latEnc));\n      double lonEnc2 = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonEnc));\n      assertEquals(latEnc, latEnc2, 0.0);\n      assertEquals(lonEnc, lonEnc2, 0.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8da4c29a4aed72a95d20b328cb2140a85621cdd","date":1459513936,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeIsStable().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeIsStable().mjava","sourceNew":"  public void testEncodeDecodeIsStable() throws Exception {\n    int iters = atLeast(1000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n\n      double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(lat));\n      double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lon));\n\n      double latEnc2 = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latEnc));\n      double lonEnc2 = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonEnc));\n      assertEquals(latEnc, latEnc2, 0.0);\n      assertEquals(lonEnc, lonEnc2, 0.0);\n    }\n  }\n\n","sourceOld":"  public void testEncodeDecodeIsStable() throws Exception {\n    int iters = atLeast(1000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n\n      double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(lat));\n      double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lon));\n\n      double latEnc2 = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latEnc));\n      double lonEnc2 = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonEnc));\n      assertEquals(latEnc, latEnc2, 0.0);\n      assertEquals(lonEnc, lonEnc2, 0.0);\n    }\n  }   \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03bffb520caf6e9833c4b9a82ac67d19a1f3fc97","date":1459595815,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeIsStable().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeIsStable().mjava","sourceNew":"  public void testEncodeDecodeIsStable() throws Exception {\n    int iters = atLeast(1000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n\n      double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(lat));\n      double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lon));\n\n      double latEnc2 = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latEnc));\n      double lonEnc2 = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonEnc));\n      assertEquals(latEnc, latEnc2, 0.0);\n      assertEquals(lonEnc, lonEnc2, 0.0);\n    }\n  }\n\n","sourceOld":"  public void testEncodeDecodeIsStable() throws Exception {\n    int iters = atLeast(1000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n\n      double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(lat));\n      double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lon));\n\n      double latEnc2 = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latEnc));\n      double lonEnc2 = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonEnc));\n      assertEquals(latEnc, latEnc2, 0.0);\n      assertEquals(lonEnc, lonEnc2, 0.0);\n    }\n  }\n\n","bugFix":["94ee361295fb38310ac4d53cb4773d1622423d68"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd6e28813bd3665a7c29cc07d0f32db701300168","date":1459966694,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeIsStable().mjava","sourceNew":null,"sourceOld":"  public void testEncodeDecodeIsStable() throws Exception {\n    int iters = atLeast(1000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n\n      double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(lat));\n      double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lon));\n\n      double latEnc2 = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latEnc));\n      double lonEnc2 = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonEnc));\n      assertEquals(latEnc, latEnc2, 0.0);\n      assertEquals(lonEnc, lonEnc2, 0.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeIsStable().mjava","sourceNew":null,"sourceOld":"  public void testEncodeDecodeIsStable() throws Exception {\n    int iters = atLeast(1000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n\n      double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(lat));\n      double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lon));\n\n      double latEnc2 = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latEnc));\n      double lonEnc2 = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonEnc));\n      assertEquals(latEnc, latEnc2, 0.0);\n      assertEquals(lonEnc, lonEnc2, 0.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6284684320a9808c41a5e43de958b2da22f89bd":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97","bd6e28813bd3665a7c29cc07d0f32db701300168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"94ee361295fb38310ac4d53cb4773d1622423d68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8da4c29a4aed72a95d20b328cb2140a85621cdd":["d6c59bc551f4e523ce6a321280cc6733424fb824"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","94ee361295fb38310ac4d53cb4773d1622423d68"],"bd6e28813bd3665a7c29cc07d0f32db701300168":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97"],"03bffb520caf6e9833c4b9a82ac67d19a1f3fc97":["d8da4c29a4aed72a95d20b328cb2140a85621cdd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6284684320a9808c41a5e43de958b2da22f89bd"],"d6c59bc551f4e523ce6a321280cc6733424fb824":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"b6284684320a9808c41a5e43de958b2da22f89bd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["94ee361295fb38310ac4d53cb4773d1622423d68","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"94ee361295fb38310ac4d53cb4773d1622423d68":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"d8da4c29a4aed72a95d20b328cb2140a85621cdd":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97"],"bd6e28813bd3665a7c29cc07d0f32db701300168":["b6284684320a9808c41a5e43de958b2da22f89bd"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["d6c59bc551f4e523ce6a321280cc6733424fb824"],"03bffb520caf6e9833c4b9a82ac67d19a1f3fc97":["b6284684320a9808c41a5e43de958b2da22f89bd","bd6e28813bd3665a7c29cc07d0f32db701300168"],"d6c59bc551f4e523ce6a321280cc6733424fb824":["d8da4c29a4aed72a95d20b328cb2140a85621cdd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}