{"path":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#checkRogueThreadsAfter().mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#checkRogueThreadsAfter().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#checkRogueThreadsAfter().mjava","sourceNew":"  /** check if the test still has threads running, we don't want them to \n   *  fail in a subsequent test and pass the blame to the wrong test */\n  private void checkRogueThreadsAfter() {\n    if (\"perMethod\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (!testsFailed && rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName()\n            + \"' left \" + rogueThreads + \" thread(s) running\");\n        // TODO: fail, but print seed for now\n        if (uncaughtExceptions.isEmpty()) {\n          reportAdditionalFailureInfo();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** check if the test still has threads running, we don't want them to \n   *  fail in a subsequent test and pass the blame to the wrong test */\n  private void checkRogueThreadsAfter() {\n    if (\"perMethod\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (!testsFailed && rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName()\n            + \"' left \" + rogueThreads + \" thread(s) running\");\n        // TODO: fail, but print seed for now\n        if (uncaughtExceptions.isEmpty()) {\n          reportAdditionalFailureInfo();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#checkRogueThreadsAfter().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#checkRogueThreadsAfter().mjava","sourceNew":"  /** check if the test still has threads running, we don't want them to \n   *  fail in a subsequent test and pass the blame to the wrong test */\n  private void checkRogueThreadsAfter() {\n    if (\"perMethod\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (!testsFailed && rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName()\n            + \"' left \" + rogueThreads + \" thread(s) running\");\n        // TODO: fail, but print seed for now\n        if (uncaughtExceptions.isEmpty()) {\n          reportAdditionalFailureInfo();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** check if the test still has threads running, we don't want them to \n   *  fail in a subsequent test and pass the blame to the wrong test */\n  private void checkRogueThreadsAfter() {\n    if (\"perMethod\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test method: '\" + getName() + \"'\");\n      if (!testsFailed && rogueThreads > 0) {\n        System.err.println(\"RESOURCE LEAK: test method: '\" + getName()\n            + \"' left \" + rogueThreads + \" thread(s) running\");\n        // TODO: fail, but print seed for now\n        if (uncaughtExceptions.isEmpty()) {\n          reportAdditionalFailureInfo();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}