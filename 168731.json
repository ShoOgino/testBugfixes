{"path":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","sourceNew":"    public <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = sdoc.getFieldValue(name);\n      if(val == null) return;\n      if (isArray) {\n        if (val instanceof List) {\n          List collection = (List) val;\n          set(obj, collection.toArray((Object[]) Array.newInstance(type,collection.size())));\n        } else {\n          Object[] arr = (Object[]) Array.newInstance(type, 1);\n          arr[0] = val;\n          set(obj, arr);\n        }\n      } else if (isList) {\n        if (val instanceof List) {\n          set(obj, val);\n        } else {\n          ArrayList l = new ArrayList();\n          l.add(val);\n          set(obj, l);\n        }\n      } else {\n        if (val instanceof List) {\n          List l = (List) val;\n          if(l.size()>0) \n            set(obj, l.get(0));\n        } \n        else {\n          set(obj,val) ;\n        }\n      }\n    }\n\n","sourceOld":"    public <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = sdoc.getFieldValue(name);\n      if(val == null) return;\n      if (isArray) {\n        if (val instanceof List) {\n          List collection = (List) val;\n          set(obj, collection.toArray((Object[]) Array.newInstance(type,collection.size())));\n        } else {\n          Object[] arr = (Object[]) Array.newInstance(type, 1);\n          arr[0] = val;\n          set(obj, arr);\n        }\n      } else if (isList) {\n        if (val instanceof List) {\n          set(obj, val);\n        } else {\n          ArrayList l = new ArrayList();\n          l.add(val);\n          set(obj, l);\n        }\n      } else {\n        if (val instanceof List) {\n          List l = (List) val;\n          if(l.size()>0) \n            set(obj, l.get(0));\n        } \n        else {\n          set(obj,val) ;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc29674855884c7ea8ac29eeb09a0276a16f334f","date":1247637346,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","sourceNew":"    <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = getFieldValue(sdoc);\n      if(val == null) {\n        System.out.println(\"val null for \"+ name);\n        return;\n      }\n      if(isArray && !isContainedInMap){\n        List list = null;\n        if(val.getClass().isArray()){\n          set(obj,val);\n          return;\n        } else if (val instanceof List) {\n          list = (List) val;\n        } else{\n          list = new ArrayList();\n          list.add(val);\n        }\n        set(obj, list.toArray((Object[]) Array.newInstance(type,list.size())));        \n      } else if(isList && !isContainedInMap){\n        if (!(val instanceof List)) {\n          ArrayList list = new ArrayList();\n          list.add(val);\n          val =  list;\n        }\n        set(obj, val);\n      } else if(isContainedInMap){\n        if (val instanceof Map) {\n          set(obj,  val);\n        }\n      } else {\n        set(obj, val);\n      }\n\n    }\n\n","sourceOld":"    public <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = sdoc.getFieldValue(name);\n      if(val == null) return;\n      if (isArray) {\n        if (val instanceof List) {\n          List collection = (List) val;\n          set(obj, collection.toArray((Object[]) Array.newInstance(type,collection.size())));\n        } else {\n          Object[] arr = (Object[]) Array.newInstance(type, 1);\n          arr[0] = val;\n          set(obj, arr);\n        }\n      } else if (isList) {\n        if (val instanceof List) {\n          set(obj, val);\n        } else {\n          ArrayList l = new ArrayList();\n          l.add(val);\n          set(obj, l);\n        }\n      } else {\n        if (val instanceof List) {\n          List l = (List) val;\n          if(l.size()>0) \n            set(obj, l.get(0));\n        } \n        else {\n          set(obj,val) ;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7476c3ea5634da0754220d2a07c361c07e4b6302","date":1252468158,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","sourceNew":"    <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = getFieldValue(sdoc);\n      if(val == null) {\n        return;\n      }\n      if(isArray && !isContainedInMap){\n        List list = null;\n        if(val.getClass().isArray()){\n          set(obj,val);\n          return;\n        } else if (val instanceof List) {\n          list = (List) val;\n        } else{\n          list = new ArrayList();\n          list.add(val);\n        }\n        set(obj, list.toArray((Object[]) Array.newInstance(type,list.size())));        \n      } else if(isList && !isContainedInMap){\n        if (!(val instanceof List)) {\n          ArrayList list = new ArrayList();\n          list.add(val);\n          val =  list;\n        }\n        set(obj, val);\n      } else if(isContainedInMap){\n        if (val instanceof Map) {\n          set(obj,  val);\n        }\n      } else {\n        set(obj, val);\n      }\n\n    }\n\n","sourceOld":"    <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = getFieldValue(sdoc);\n      if(val == null) {\n        System.out.println(\"val null for \"+ name);\n        return;\n      }\n      if(isArray && !isContainedInMap){\n        List list = null;\n        if(val.getClass().isArray()){\n          set(obj,val);\n          return;\n        } else if (val instanceof List) {\n          list = (List) val;\n        } else{\n          list = new ArrayList();\n          list.add(val);\n        }\n        set(obj, list.toArray((Object[]) Array.newInstance(type,list.size())));        \n      } else if(isList && !isContainedInMap){\n        if (!(val instanceof List)) {\n          ArrayList list = new ArrayList();\n          list.add(val);\n          val =  list;\n        }\n        set(obj, val);\n      } else if(isContainedInMap){\n        if (val instanceof Map) {\n          set(obj,  val);\n        }\n      } else {\n        set(obj, val);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#[T]_inject(T,SolrDocument).mjava","sourceNew":"    <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = getFieldValue(sdoc);\n      if(val == null) {\n        return;\n      }\n      if(isArray && !isContainedInMap){\n        List list = null;\n        if(val.getClass().isArray()){\n          set(obj,val);\n          return;\n        } else if (val instanceof List) {\n          list = (List) val;\n        } else{\n          list = new ArrayList();\n          list.add(val);\n        }\n        set(obj, list.toArray((Object[]) Array.newInstance(type,list.size())));        \n      } else if(isList && !isContainedInMap){\n        if (!(val instanceof List)) {\n          ArrayList list = new ArrayList();\n          list.add(val);\n          val =  list;\n        }\n        set(obj, val);\n      } else if(isContainedInMap){\n        if (val instanceof Map) {\n          set(obj,  val);\n        }\n      } else {\n        set(obj, val);\n      }\n\n    }\n\n","sourceOld":"    <T> void inject(T obj, SolrDocument sdoc) {\n      Object val = getFieldValue(sdoc);\n      if(val == null) {\n        return;\n      }\n      if(isArray && !isContainedInMap){\n        List list = null;\n        if(val.getClass().isArray()){\n          set(obj,val);\n          return;\n        } else if (val instanceof List) {\n          list = (List) val;\n        } else{\n          list = new ArrayList();\n          list.add(val);\n        }\n        set(obj, list.toArray((Object[]) Array.newInstance(type,list.size())));        \n      } else if(isList && !isContainedInMap){\n        if (!(val instanceof List)) {\n          ArrayList list = new ArrayList();\n          list.add(val);\n          val =  list;\n        }\n        set(obj, val);\n      } else if(isContainedInMap){\n        if (val instanceof Map) {\n          set(obj,  val);\n        }\n      } else {\n        set(obj, val);\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7476c3ea5634da0754220d2a07c361c07e4b6302":["cc29674855884c7ea8ac29eeb09a0276a16f334f"],"ad94625fb8d088209f46650c8097196fec67f00c":["7476c3ea5634da0754220d2a07c361c07e4b6302"],"cc29674855884c7ea8ac29eeb09a0276a16f334f":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["cc29674855884c7ea8ac29eeb09a0276a16f334f"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7476c3ea5634da0754220d2a07c361c07e4b6302":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cc29674855884c7ea8ac29eeb09a0276a16f334f":["7476c3ea5634da0754220d2a07c361c07e4b6302"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}