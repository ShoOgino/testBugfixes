{"path":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","commits":[{"id":"3f2cc4cc34bb16ef750f9e4be14637706977993e","date":1455320490,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSegmentTerminateEarlyState#addDocuments(CloudSolrClient,int,int,boolean).mjava","sourceNew":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(keyField, \"\"+docKey);\n        final int MM = TestMiniSolrCloudCluster.random().nextInt(60);\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(timestampField, \"2016-01-01T00:\"+MM+\":00Z\");\n        doc.setField(oddField, \"\"+(numDocs % 2));\n        doc.setField(quadField, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","sourceOld":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(keyField, \"\"+docKey);\n        final int MM = TestMiniSolrCloudCluster.random().nextInt(60);\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(timestampField, \"2016-01-01T00:\"+MM+\":00Z\");\n        doc.setField(oddField, \"\"+(numDocs % 2));\n        doc.setField(quadField, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","sourceNew":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(keyField, \"\"+docKey);\n        final int MM = TestMiniSolrCloudCluster.random().nextInt(60); // minutes\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(timestampField, ZonedDateTime.of(2016, 1, 1, 0, MM, 0, 0, ZoneOffset.UTC).toInstant().toString());\n        doc.setField(oddField, \"\"+(numDocs % 2));\n        doc.setField(quadField, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","sourceOld":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(keyField, \"\"+docKey);\n        final int MM = TestMiniSolrCloudCluster.random().nextInt(60);\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(timestampField, \"2016-01-01T00:\"+MM+\":00Z\");\n        doc.setField(oddField, \"\"+(numDocs % 2));\n        doc.setField(quadField, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2","date":1481746736,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","sourceNew":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(keyField, \"\"+docKey);\n        final int MM = rand.nextInt(60); // minutes\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(timestampField, ZonedDateTime.of(2016, 1, 1, 0, MM, 0, 0, ZoneOffset.UTC).toInstant().toString());\n        doc.setField(oddField, \"\"+(numDocs % 2));\n        doc.setField(quadField, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","sourceOld":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(keyField, \"\"+docKey);\n        final int MM = TestMiniSolrCloudCluster.random().nextInt(60); // minutes\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(timestampField, ZonedDateTime.of(2016, 1, 1, 0, MM, 0, 0, ZoneOffset.UTC).toInstant().toString());\n        doc.setField(oddField, \"\"+(numDocs % 2));\n        doc.setField(quadField, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","sourceNew":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(keyField, \"\"+docKey);\n        final int MM = rand.nextInt(60); // minutes\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(timestampField, ZonedDateTime.of(2016, 1, 1, 0, MM, 0, 0, ZoneOffset.UTC).toInstant().toString());\n        doc.setField(oddField, \"\"+(numDocs % 2));\n        doc.setField(quadField, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","sourceOld":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(keyField, \"\"+docKey);\n        final int MM = TestMiniSolrCloudCluster.random().nextInt(60); // minutes\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(timestampField, ZonedDateTime.of(2016, 1, 1, 0, MM, 0, 0, ZoneOffset.UTC).toInstant().toString());\n        doc.setField(oddField, \"\"+(numDocs % 2));\n        doc.setField(quadField, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","sourceNew":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(keyField, \"\"+docKey);\n        final int MM = rand.nextInt(60); // minutes\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(timestampField, (Integer)MM);\n        doc.setField(oddField, \"\"+(numDocs % 2));\n        doc.setField(quadField, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","sourceOld":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(keyField, \"\"+docKey);\n        final int MM = rand.nextInt(60); // minutes\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(timestampField, ZonedDateTime.of(2016, 1, 1, 0, MM, 0, 0, ZoneOffset.UTC).toInstant().toString());\n        doc.setField(oddField, \"\"+(numDocs % 2));\n        doc.setField(quadField, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","sourceNew":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(keyField, \"\"+docKey);\n        final int MM = rand.nextInt(60); // minutes\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(timestampField, (Integer)MM);\n        doc.setField(oddField, \"\"+(numDocs % 2));\n        doc.setField(quadField, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","sourceOld":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(keyField, \"\"+docKey);\n        final int MM = rand.nextInt(60); // minutes\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(timestampField, ZonedDateTime.of(2016, 1, 1, 0, MM, 0, 0, ZoneOffset.UTC).toInstant().toString());\n        doc.setField(oddField, \"\"+(numDocs % 2));\n        doc.setField(quadField, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","sourceNew":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(KEY_FIELD, \"\"+docKey);\n        final int MM = rand.nextInt(60); // minutes\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(TIMESTAMP_FIELD, (Integer)MM);\n        doc.setField(ODD_FIELD, \"\"+(numDocs % 2));\n        doc.setField(QUAD_FIELD, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","sourceOld":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(keyField, \"\"+docKey);\n        final int MM = rand.nextInt(60); // minutes\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(timestampField, (Integer)MM);\n        doc.setField(oddField, \"\"+(numDocs % 2));\n        doc.setField(quadField, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","sourceNew":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(KEY_FIELD, \"\"+docKey);\n        final int MM = rand.nextInt(60); // minutes\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(TIMESTAMP_FIELD, (Integer)MM);\n        doc.setField(ODD_FIELD, \"\"+(numDocs % 2));\n        doc.setField(QUAD_FIELD, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","sourceOld":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(keyField, \"\"+docKey);\n        final int MM = rand.nextInt(60); // minutes\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(timestampField, (Integer)MM);\n        doc.setField(oddField, \"\"+(numDocs % 2));\n        doc.setField(quadField, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","sourceNew":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = numDocs;\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(KEY_FIELD, \"\"+docKey);\n        final int MM = rand.nextInt(60); // minutes\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = MM;\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = MM;\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(TIMESTAMP_FIELD, MM);\n        doc.setField(ODD_FIELD, \"\"+(numDocs % 2));\n        doc.setField(QUAD_FIELD, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","sourceOld":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(KEY_FIELD, \"\"+docKey);\n        final int MM = rand.nextInt(60); // minutes\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(TIMESTAMP_FIELD, (Integer)MM);\n        doc.setField(ODD_FIELD, \"\"+(numDocs % 2));\n        doc.setField(QUAD_FIELD, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","sourceNew":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = numDocs;\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(KEY_FIELD, \"\"+docKey);\n        final int MM = rand.nextInt(60); // minutes\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = MM;\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = MM;\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(TIMESTAMP_FIELD, MM);\n        doc.setField(ODD_FIELD, \"\"+(numDocs % 2));\n        doc.setField(QUAD_FIELD, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","sourceOld":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(KEY_FIELD, \"\"+docKey);\n        final int MM = rand.nextInt(60); // minutes\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(TIMESTAMP_FIELD, (Integer)MM);\n        doc.setField(ODD_FIELD, \"\"+(numDocs % 2));\n        doc.setField(QUAD_FIELD, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SegmentTerminateEarlyTestState#addDocuments(CloudSolrClient,int,int,boolean).mjava","sourceNew":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = numDocs;\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(KEY_FIELD, \"\"+docKey);\n        final int MM = rand.nextInt(60); // minutes\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = MM;\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = MM;\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(TIMESTAMP_FIELD, MM);\n        doc.setField(ODD_FIELD, \"\"+(numDocs % 2));\n        doc.setField(QUAD_FIELD, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","sourceOld":"  void addDocuments(CloudSolrClient cloudSolrClient,\n      int numCommits, int numDocsPerCommit, boolean optimize) throws Exception {\n    for (int cc = 1; cc <= numCommits; ++cc) {\n      for (int nn = 1; nn <= numDocsPerCommit; ++nn) {\n        ++numDocs;\n        final Integer docKey = new Integer(numDocs);\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(KEY_FIELD, \"\"+docKey);\n        final int MM = rand.nextInt(60); // minutes\n        if (minTimestampMM == null || MM <= minTimestampMM.intValue()) {\n          if (minTimestampMM != null && MM < minTimestampMM.intValue()) {\n            minTimestampDocKeys.clear();\n          }\n          minTimestampMM = new Integer(MM);\n          minTimestampDocKeys.add(docKey);\n        }\n        if (maxTimestampMM == null || maxTimestampMM.intValue() <= MM) {\n          if (maxTimestampMM != null && maxTimestampMM.intValue() < MM) {\n            maxTimestampDocKeys.clear();\n          }\n          maxTimestampMM = new Integer(MM);\n          maxTimestampDocKeys.add(docKey);\n        }\n        doc.setField(TIMESTAMP_FIELD, (Integer)MM);\n        doc.setField(ODD_FIELD, \"\"+(numDocs % 2));\n        doc.setField(QUAD_FIELD, \"\"+(numDocs % 4)+1);\n        cloudSolrClient.add(doc);\n      }\n      cloudSolrClient.commit();\n    }\n    if (optimize) {\n      cloudSolrClient.optimize();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["5de502b5478255493125e7e801411ba17a6682ec"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["9856095f7afb5a607bf5e65077615ed91273508c","415bbbe7da8065dd3c477bdc3c703c6425622998"],"5de502b5478255493125e7e801411ba17a6682ec":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["3f2cc4cc34bb16ef750f9e4be14637706977993e"],"a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"3f2cc4cc34bb16ef750f9e4be14637706977993e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["5de502b5478255493125e7e801411ba17a6682ec","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["5de502b5478255493125e7e801411ba17a6682ec","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["d3f6c7717a0f1decd1668144537943efcc70cd95","a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"5de502b5478255493125e7e801411ba17a6682ec":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","628903f37b6c442da0d390db1c6af9a0e74d41a7","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2","9856095f7afb5a607bf5e65077615ed91273508c"],"a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2":["415bbbe7da8065dd3c477bdc3c703c6425622998","9856095f7afb5a607bf5e65077615ed91273508c"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"3f2cc4cc34bb16ef750f9e4be14637706977993e":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f2cc4cc34bb16ef750f9e4be14637706977993e"],"9856095f7afb5a607bf5e65077615ed91273508c":["598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","6f20fd35e3055a0c5b387df0b986a68d65d86441","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}