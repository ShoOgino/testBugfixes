{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#relateApprox(Shape).mjava","commits":[{"id":"50b84d7eef0fc32233dd6251567fdbdb10c4cda7","date":1365707213,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#relateApprox(Shape).mjava","pathOld":"/dev/null","sourceNew":"    private SpatialRelation relateApprox(Shape other) {\n      if (biasContainsThenWithin) {\n        if (shape1.relate(other) == CONTAINS || shape1.equals(other)\n            || shape2.relate(other) == CONTAINS || shape2.equals(other)) return CONTAINS;\n\n        if (shape1.relate(other) == WITHIN && shape2.relate(other) == WITHIN) return WITHIN;\n\n      } else {\n        if ((shape1.relate(other) == WITHIN || shape1.equals(other))\n            && (shape2.relate(other) == WITHIN || shape2.equals(other))) return WITHIN;\n\n        if (shape1.relate(other) == CONTAINS || shape2.relate(other) == CONTAINS) return CONTAINS;\n      }\n\n      if (shape1.relate(other).intersects() || shape2.relate(other).intersects())\n        return INTERSECTS;//might actually be 'CONTAINS' if these 2 are adjacent\n      return DISJOINT;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c812573c5617c5a3eff581b09251df3030455fbb","date":1392316648,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#relateApprox(Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#relateApprox(Shape).mjava","sourceNew":"    private SpatialRelation relateApprox(Shape other) {\n      if (biasContainsThenWithin) {\n        if (shape1.relate(other) == CONTAINS || shape1.equals(other)\n            || shape2.relate(other) == CONTAINS || shape2.equals(other)) return CONTAINS;\n\n        if (shape1.relate(other) == WITHIN && shape2.relate(other) == WITHIN) return WITHIN;\n\n      } else {\n        if ((shape1.relate(other) == WITHIN || shape1.equals(other))\n            && (shape2.relate(other) == WITHIN || shape2.equals(other))) return WITHIN;\n\n        if (shape1.relate(other) == CONTAINS || shape2.relate(other) == CONTAINS) return CONTAINS;\n      }\n\n      if (shape1.relate(other).intersects() || shape2.relate(other).intersects())\n        return INTERSECTS;//might actually be 'CONTAINS' if the pair are adjacent but we handle that later\n      return DISJOINT;\n    }\n\n","sourceOld":"    private SpatialRelation relateApprox(Shape other) {\n      if (biasContainsThenWithin) {\n        if (shape1.relate(other) == CONTAINS || shape1.equals(other)\n            || shape2.relate(other) == CONTAINS || shape2.equals(other)) return CONTAINS;\n\n        if (shape1.relate(other) == WITHIN && shape2.relate(other) == WITHIN) return WITHIN;\n\n      } else {\n        if ((shape1.relate(other) == WITHIN || shape1.equals(other))\n            && (shape2.relate(other) == WITHIN || shape2.equals(other))) return WITHIN;\n\n        if (shape1.relate(other) == CONTAINS || shape2.relate(other) == CONTAINS) return CONTAINS;\n      }\n\n      if (shape1.relate(other).intersects() || shape2.relate(other).intersects())\n        return INTERSECTS;//might actually be 'CONTAINS' if these 2 are adjacent\n      return DISJOINT;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0521546db127e358ced1772a9d696dbdd255b203","date":1403202289,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest.ShapePair#relateApprox(Shape).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest.ShapePair#relateApprox(Shape).mjava","sourceNew":"    private SpatialRelation relateApprox(Shape other) {\n      if (biasContainsThenWithin) {\n        if (shape1.relate(other) == CONTAINS || shape1.equals(other)\n            || shape2.relate(other) == CONTAINS || shape2.equals(other)) return CONTAINS;\n\n        if (shape1.relate(other) == WITHIN && shape2.relate(other) == WITHIN) return WITHIN;\n\n      } else {\n        if ((shape1.relate(other) == WITHIN || shape1.equals(other))\n            && (shape2.relate(other) == WITHIN || shape2.equals(other))) return WITHIN;\n\n        if (shape1.relate(other) == CONTAINS || shape2.relate(other) == CONTAINS) return CONTAINS;\n      }\n\n      if (shape1.relate(other).intersects() || shape2.relate(other).intersects())\n        return INTERSECTS;//might actually be 'CONTAINS' if the pair are adjacent but we handle that later\n      return DISJOINT;\n    }\n\n","sourceOld":"    private SpatialRelation relateApprox(Shape other) {\n      if (biasContainsThenWithin) {\n        if (shape1.relate(other) == CONTAINS || shape1.equals(other)\n            || shape2.relate(other) == CONTAINS || shape2.equals(other)) return CONTAINS;\n\n        if (shape1.relate(other) == WITHIN && shape2.relate(other) == WITHIN) return WITHIN;\n\n      } else {\n        if ((shape1.relate(other) == WITHIN || shape1.equals(other))\n            && (shape2.relate(other) == WITHIN || shape2.equals(other))) return WITHIN;\n\n        if (shape1.relate(other) == CONTAINS || shape2.relate(other) == CONTAINS) return CONTAINS;\n      }\n\n      if (shape1.relate(other).intersects() || shape2.relate(other).intersects())\n        return INTERSECTS;//might actually be 'CONTAINS' if the pair are adjacent but we handle that later\n      return DISJOINT;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c812573c5617c5a3eff581b09251df3030455fbb":["50b84d7eef0fc32233dd6251567fdbdb10c4cda7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0521546db127e358ced1772a9d696dbdd255b203":["c812573c5617c5a3eff581b09251df3030455fbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0521546db127e358ced1772a9d696dbdd255b203"],"50b84d7eef0fc32233dd6251567fdbdb10c4cda7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c812573c5617c5a3eff581b09251df3030455fbb":["0521546db127e358ced1772a9d696dbdd255b203"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50b84d7eef0fc32233dd6251567fdbdb10c4cda7"],"0521546db127e358ced1772a9d696dbdd255b203":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"50b84d7eef0fc32233dd6251567fdbdb10c4cda7":["c812573c5617c5a3eff581b09251df3030455fbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}