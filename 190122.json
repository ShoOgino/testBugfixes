{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/processors/GroupQueryNodeProcessor#process(QueryNode).mjava","commits":[{"id":"b955a87bc7c5daeda1ed56821ec0bec2e8789e44","date":1249270724,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/processors/GroupQueryNodeProcessor#process(QueryNode).mjava","pathOld":"/dev/null","sourceNew":"  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n\n    if (!getQueryConfigHandler().hasAttribute(DefaultOperatorAttribute.class)) {\n      throw new IllegalArgumentException(\n          \"DefaultOperatorAttribute should be set on the QueryConfigHandler\");\n    }\n\n    usingAnd = Operator.AND == ((DefaultOperatorAttribute) getQueryConfigHandler()\n        .getAttribute(DefaultOperatorAttribute.class)).getOperator();\n\n    if (queryTree instanceof GroupQueryNode) {\n      queryTree = ((GroupQueryNode) queryTree).getChild();\n    }\n\n    this.queryNodeList = new ArrayList<QueryNode>();\n    this.latestNodeVerified = false;\n    readTree(queryTree);\n\n    List<QueryNode> actualQueryNodeList = this.queryNodeList;\n\n    for (int i = 0; i < actualQueryNodeList.size(); i++) {\n      QueryNode node = actualQueryNodeList.get(i);\n\n      if (node instanceof GroupQueryNode) {\n        actualQueryNodeList.set(i, process(node));\n      }\n\n    }\n\n    this.usingAnd = false;\n\n    if (queryTree instanceof BooleanQueryNode) {\n      queryTree.set(actualQueryNodeList);\n\n      return queryTree;\n\n    } else {\n      return new BooleanQueryNode(actualQueryNodeList);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/GroupQueryNodeProcessor#process(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/processors/GroupQueryNodeProcessor#process(QueryNode).mjava","sourceNew":"  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n\n    if (!getQueryConfigHandler().hasAttribute(DefaultOperatorAttribute.class)) {\n      throw new IllegalArgumentException(\n          \"DefaultOperatorAttribute should be set on the QueryConfigHandler\");\n    }\n\n    usingAnd = Operator.AND == ((DefaultOperatorAttribute) getQueryConfigHandler()\n        .getAttribute(DefaultOperatorAttribute.class)).getOperator();\n\n    if (queryTree instanceof GroupQueryNode) {\n      queryTree = ((GroupQueryNode) queryTree).getChild();\n    }\n\n    this.queryNodeList = new ArrayList<QueryNode>();\n    this.latestNodeVerified = false;\n    readTree(queryTree);\n\n    List<QueryNode> actualQueryNodeList = this.queryNodeList;\n\n    for (int i = 0; i < actualQueryNodeList.size(); i++) {\n      QueryNode node = actualQueryNodeList.get(i);\n\n      if (node instanceof GroupQueryNode) {\n        actualQueryNodeList.set(i, process(node));\n      }\n\n    }\n\n    this.usingAnd = false;\n\n    if (queryTree instanceof BooleanQueryNode) {\n      queryTree.set(actualQueryNodeList);\n\n      return queryTree;\n\n    } else {\n      return new BooleanQueryNode(actualQueryNodeList);\n    }\n\n  }\n\n","sourceOld":"  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n\n    if (!getQueryConfigHandler().hasAttribute(DefaultOperatorAttribute.class)) {\n      throw new IllegalArgumentException(\n          \"DefaultOperatorAttribute should be set on the QueryConfigHandler\");\n    }\n\n    usingAnd = Operator.AND == ((DefaultOperatorAttribute) getQueryConfigHandler()\n        .getAttribute(DefaultOperatorAttribute.class)).getOperator();\n\n    if (queryTree instanceof GroupQueryNode) {\n      queryTree = ((GroupQueryNode) queryTree).getChild();\n    }\n\n    this.queryNodeList = new ArrayList<QueryNode>();\n    this.latestNodeVerified = false;\n    readTree(queryTree);\n\n    List<QueryNode> actualQueryNodeList = this.queryNodeList;\n\n    for (int i = 0; i < actualQueryNodeList.size(); i++) {\n      QueryNode node = actualQueryNodeList.get(i);\n\n      if (node instanceof GroupQueryNode) {\n        actualQueryNodeList.set(i, process(node));\n      }\n\n    }\n\n    this.usingAnd = false;\n\n    if (queryTree instanceof BooleanQueryNode) {\n      queryTree.set(actualQueryNodeList);\n\n      return queryTree;\n\n    } else {\n      return new BooleanQueryNode(actualQueryNodeList);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}