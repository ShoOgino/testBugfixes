{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#sendToOCPQueue(ZkNodeProps,long).mjava","commits":[{"id":"3cbd743a4843f513f793670e3ab0e272bf824faf","date":1518149529,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#sendToOCPQueue(ZkNodeProps,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  public SolrResponse sendToOCPQueue(ZkNodeProps m, long timeout) throws KeeperException, InterruptedException {\n    String operation = m.getStr(QUEUE_OPERATION);\n    if (operation == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n\n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(Utils.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n\n      return new OverseerSolrResponse(r);\n    }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      return SolrResponse.deserialize(event.getBytes());\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","sourceOld":"  //TODO rename to submitToOverseerRPC\n  public SolrResponse handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    if (!m.containsKey(QUEUE_OPERATION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n\n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(Utils.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n\n       rsp.getValues().addAll(response.getResponse());\n\n       return response;\n     }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n      return response;\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd8a9ad1acc754f713e220250044c2bf06a22a0b","date":1518740056,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#sendToOCPQueue(ZkNodeProps,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#sendToOCPQueue(ZkNodeProps,long).mjava","sourceNew":"  public SolrResponse sendToOCPQueue(ZkNodeProps m, long timeout) throws KeeperException, InterruptedException {\n    String operation = m.getStr(QUEUE_OPERATION);\n    if (operation == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if (asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n       \n       if (CHECK_ASYNC_ID_BACK_COMPAT_LOCATIONS && (\n           coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId))) {\n         // for back compatibility, check in the old places. This can be removed in Solr 9\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n       } else {\n         if (coreContainer.getZkController().claimAsyncId(asyncId)) {\n           boolean success = false;\n           try {\n             coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(Utils.toJSON(m));\n             success = true;\n           } finally {\n             if (!success) {\n               try {\n                 coreContainer.getZkController().clearAsyncId(asyncId);\n               } catch (Exception e) {\n                 // let the original exception bubble up\n                 log.error(\"Unable to release async ID={}\", asyncId, e);\n                 SolrZkClient.checkInterrupted(e);\n               }\n             }\n           }\n         } else {\n           r.add(\"error\", \"Task with the same requestid already exists.\");\n         }\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n\n      return new OverseerSolrResponse(r);\n    }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      return SolrResponse.deserialize(event.getBytes());\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","sourceOld":"  public SolrResponse sendToOCPQueue(ZkNodeProps m, long timeout) throws KeeperException, InterruptedException {\n    String operation = m.getStr(QUEUE_OPERATION);\n    if (operation == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n\n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(Utils.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n\n      return new OverseerSolrResponse(r);\n    }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      return SolrResponse.deserialize(event.getBytes());\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28ba172425e443e0f08a49de6d73586c418d7251","date":1523970991,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#sendToOCPQueue(ZkNodeProps,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#sendToOCPQueue(ZkNodeProps,long).mjava","sourceNew":"  public SolrResponse sendToOCPQueue(ZkNodeProps m, long timeout) throws KeeperException, InterruptedException {\n    String operation = m.getStr(QUEUE_OPERATION);\n    if (operation == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if (asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (CHECK_ASYNC_ID_BACK_COMPAT_LOCATIONS && (\n           coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId))) {\n         // for back compatibility, check in the old places. This can be removed in Solr 9\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n       } else {\n         if (coreContainer.getZkController().claimAsyncId(asyncId)) {\n           boolean success = false;\n           try {\n             coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(Utils.toJSON(m));\n             success = true;\n           } finally {\n             if (!success) {\n               try {\n                 coreContainer.getZkController().clearAsyncId(asyncId);\n               } catch (Exception e) {\n                 // let the original exception bubble up\n                 log.error(\"Unable to release async ID={}\", asyncId, e);\n                 SolrZkClient.checkInterrupted(e);\n               }\n             }\n           }\n         } else {\n           r.add(\"error\", \"Task with the same requestid already exists.\");\n         }\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n\n      return new OverseerSolrResponse(r);\n    }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      return SolrResponse.deserialize(event.getBytes());\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","sourceOld":"  public SolrResponse sendToOCPQueue(ZkNodeProps m, long timeout) throws KeeperException, InterruptedException {\n    String operation = m.getStr(QUEUE_OPERATION);\n    if (operation == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if (asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n       \n       if (CHECK_ASYNC_ID_BACK_COMPAT_LOCATIONS && (\n           coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId))) {\n         // for back compatibility, check in the old places. This can be removed in Solr 9\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n       } else {\n         if (coreContainer.getZkController().claimAsyncId(asyncId)) {\n           boolean success = false;\n           try {\n             coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(Utils.toJSON(m));\n             success = true;\n           } finally {\n             if (!success) {\n               try {\n                 coreContainer.getZkController().clearAsyncId(asyncId);\n               } catch (Exception e) {\n                 // let the original exception bubble up\n                 log.error(\"Unable to release async ID={}\", asyncId, e);\n                 SolrZkClient.checkInterrupted(e);\n               }\n             }\n           }\n         } else {\n           r.add(\"error\", \"Task with the same requestid already exists.\");\n         }\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n\n      return new OverseerSolrResponse(r);\n    }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      return SolrResponse.deserialize(event.getBytes());\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#sendToOCPQueue(ZkNodeProps,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#sendToOCPQueue(ZkNodeProps,long).mjava","sourceNew":"  public SolrResponse sendToOCPQueue(ZkNodeProps m, long timeout) throws KeeperException, InterruptedException {\n    String operation = m.getStr(QUEUE_OPERATION);\n    if (operation == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n      String asyncId = m.getStr(ASYNC);\n\n      if (asyncId.equals(\"-1\")) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n      }\n\n      NamedList<String> r = new NamedList<>();\n\n      if (CHECK_ASYNC_ID_BACK_COMPAT_LOCATIONS && (\n          coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n              coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n              coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n              overseerCollectionQueueContains(asyncId))) {\n        // for back compatibility, check in the old places. This can be removed in Solr 9\n        r.add(\"error\", \"Task with the same requestid already exists.\");\n      } else {\n        if (coreContainer.getZkController().claimAsyncId(asyncId)) {\n          boolean success = false;\n          try {\n            coreContainer.getZkController().getOverseerCollectionQueue()\n                .offer(Utils.toJSON(m));\n            success = true;\n          } finally {\n            if (!success) {\n              try {\n                coreContainer.getZkController().clearAsyncId(asyncId);\n              } catch (Exception e) {\n                // let the original exception bubble up\n                log.error(\"Unable to release async ID={}\", asyncId, e);\n                SolrZkClient.checkInterrupted(e);\n              }\n            }\n          }\n        } else {\n          r.add(\"error\", \"Task with the same requestid already exists.\");\n        }\n      }\n      r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n\n      return new OverseerSolrResponse(r);\n    }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      return SolrResponse.deserialize(event.getBytes());\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","sourceOld":"  public SolrResponse sendToOCPQueue(ZkNodeProps m, long timeout) throws KeeperException, InterruptedException {\n    String operation = m.getStr(QUEUE_OPERATION);\n    if (operation == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if (asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (CHECK_ASYNC_ID_BACK_COMPAT_LOCATIONS && (\n           coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId))) {\n         // for back compatibility, check in the old places. This can be removed in Solr 9\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n       } else {\n         if (coreContainer.getZkController().claimAsyncId(asyncId)) {\n           boolean success = false;\n           try {\n             coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(Utils.toJSON(m));\n             success = true;\n           } finally {\n             if (!success) {\n               try {\n                 coreContainer.getZkController().clearAsyncId(asyncId);\n               } catch (Exception e) {\n                 // let the original exception bubble up\n                 log.error(\"Unable to release async ID={}\", asyncId, e);\n                 SolrZkClient.checkInterrupted(e);\n               }\n             }\n           }\n         } else {\n           r.add(\"error\", \"Task with the same requestid already exists.\");\n         }\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n\n      return new OverseerSolrResponse(r);\n    }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      return SolrResponse.deserialize(event.getBytes());\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfb8001b6712216ccbf7ccc85f830f08ce3b544","date":1576882501,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#sendToOCPQueue(ZkNodeProps,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#sendToOCPQueue(ZkNodeProps,long).mjava","sourceNew":"  public SolrResponse sendToOCPQueue(ZkNodeProps m, long timeout) throws KeeperException, InterruptedException {\n    String operation = m.getStr(QUEUE_OPERATION);\n    if (operation == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n      String asyncId = m.getStr(ASYNC);\n\n      if (asyncId.equals(\"-1\")) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n      }\n\n      NamedList<String> r = new NamedList<>();\n\n      if (CHECK_ASYNC_ID_BACK_COMPAT_LOCATIONS && (\n          coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n              coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n              coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n              overseerCollectionQueueContains(asyncId))) {\n        // for back compatibility, check in the old places. This can be removed in Solr 9\n        r.add(\"error\", \"Task with the same requestid already exists.\");\n      } else {\n        if (coreContainer.getZkController().claimAsyncId(asyncId)) {\n          boolean success = false;\n          try {\n            coreContainer.getZkController().getOverseerCollectionQueue()\n                .offer(Utils.toJSON(m));\n            success = true;\n          } finally {\n            if (!success) {\n              try {\n                coreContainer.getZkController().clearAsyncId(asyncId);\n              } catch (Exception e) {\n                // let the original exception bubble up\n                log.error(\"Unable to release async ID={}\", asyncId, e);\n                SolrZkClient.checkInterrupted(e);\n              }\n            }\n          }\n        } else {\n          r.add(\"error\", \"Task with the same requestid already exists.\");\n        }\n      }\n      r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n\n      return new OverseerSolrResponse(r);\n    }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      return OverseerSolrResponse.deserialize(event.getBytes());\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","sourceOld":"  public SolrResponse sendToOCPQueue(ZkNodeProps m, long timeout) throws KeeperException, InterruptedException {\n    String operation = m.getStr(QUEUE_OPERATION);\n    if (operation == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n      String asyncId = m.getStr(ASYNC);\n\n      if (asyncId.equals(\"-1\")) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n      }\n\n      NamedList<String> r = new NamedList<>();\n\n      if (CHECK_ASYNC_ID_BACK_COMPAT_LOCATIONS && (\n          coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n              coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n              coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n              overseerCollectionQueueContains(asyncId))) {\n        // for back compatibility, check in the old places. This can be removed in Solr 9\n        r.add(\"error\", \"Task with the same requestid already exists.\");\n      } else {\n        if (coreContainer.getZkController().claimAsyncId(asyncId)) {\n          boolean success = false;\n          try {\n            coreContainer.getZkController().getOverseerCollectionQueue()\n                .offer(Utils.toJSON(m));\n            success = true;\n          } finally {\n            if (!success) {\n              try {\n                coreContainer.getZkController().clearAsyncId(asyncId);\n              } catch (Exception e) {\n                // let the original exception bubble up\n                log.error(\"Unable to release async ID={}\", asyncId, e);\n                SolrZkClient.checkInterrupted(e);\n              }\n            }\n          }\n        } else {\n          r.add(\"error\", \"Task with the same requestid already exists.\");\n        }\n      }\n      r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n\n      return new OverseerSolrResponse(r);\n    }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      return SolrResponse.deserialize(event.getBytes());\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["b6a4045268caa5f6094d5a8d80519a1c152295f3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","date":1577276097,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#sendToOCPQueue(ZkNodeProps,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#sendToOCPQueue(ZkNodeProps,long).mjava","sourceNew":"  public SolrResponse sendToOCPQueue(ZkNodeProps m, long timeout) throws KeeperException, InterruptedException {\n    String operation = m.getStr(QUEUE_OPERATION);\n    if (operation == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n      String asyncId = m.getStr(ASYNC);\n\n      if (asyncId.equals(\"-1\")) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n      }\n\n      NamedList<String> r = new NamedList<>();\n\n      if (CHECK_ASYNC_ID_BACK_COMPAT_LOCATIONS && (\n          coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n              coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n              coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n              overseerCollectionQueueContains(asyncId))) {\n        // for back compatibility, check in the old places. This can be removed in Solr 9\n        r.add(\"error\", \"Task with the same requestid already exists.\");\n      } else {\n        if (coreContainer.getZkController().claimAsyncId(asyncId)) {\n          boolean success = false;\n          try {\n            coreContainer.getZkController().getOverseerCollectionQueue()\n                .offer(Utils.toJSON(m));\n            success = true;\n          } finally {\n            if (!success) {\n              try {\n                coreContainer.getZkController().clearAsyncId(asyncId);\n              } catch (Exception e) {\n                // let the original exception bubble up\n                log.error(\"Unable to release async ID={}\", asyncId, e);\n                SolrZkClient.checkInterrupted(e);\n              }\n            }\n          }\n        } else {\n          r.add(\"error\", \"Task with the same requestid already exists.\");\n        }\n      }\n      r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n\n      return new OverseerSolrResponse(r);\n    }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      return OverseerSolrResponse.deserialize(event.getBytes());\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","sourceOld":"  public SolrResponse sendToOCPQueue(ZkNodeProps m, long timeout) throws KeeperException, InterruptedException {\n    String operation = m.getStr(QUEUE_OPERATION);\n    if (operation == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n      String asyncId = m.getStr(ASYNC);\n\n      if (asyncId.equals(\"-1\")) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n      }\n\n      NamedList<String> r = new NamedList<>();\n\n      if (CHECK_ASYNC_ID_BACK_COMPAT_LOCATIONS && (\n          coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n              coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n              coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n              overseerCollectionQueueContains(asyncId))) {\n        // for back compatibility, check in the old places. This can be removed in Solr 9\n        r.add(\"error\", \"Task with the same requestid already exists.\");\n      } else {\n        if (coreContainer.getZkController().claimAsyncId(asyncId)) {\n          boolean success = false;\n          try {\n            coreContainer.getZkController().getOverseerCollectionQueue()\n                .offer(Utils.toJSON(m));\n            success = true;\n          } finally {\n            if (!success) {\n              try {\n                coreContainer.getZkController().clearAsyncId(asyncId);\n              } catch (Exception e) {\n                // let the original exception bubble up\n                log.error(\"Unable to release async ID={}\", asyncId, e);\n                SolrZkClient.checkInterrupted(e);\n              }\n            }\n          }\n        } else {\n          r.add(\"error\", \"Task with the same requestid already exists.\");\n        }\n      }\n      r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n\n      return new OverseerSolrResponse(r);\n    }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      return SolrResponse.deserialize(event.getBytes());\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a4045268caa5f6094d5a8d80519a1c152295f3","date":1580840817,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#sendToOCPQueue(ZkNodeProps,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#sendToOCPQueue(ZkNodeProps,long).mjava","sourceNew":"  public SolrResponse sendToOCPQueue(ZkNodeProps m, long timeout) throws KeeperException, InterruptedException {\n    String operation = m.getStr(QUEUE_OPERATION);\n    if (operation == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n      String asyncId = m.getStr(ASYNC);\n\n      if (asyncId.equals(\"-1\")) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n      }\n\n      NamedList<String> r = new NamedList<>();\n\n      if (CHECK_ASYNC_ID_BACK_COMPAT_LOCATIONS && (\n          coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n              coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n              coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n              overseerCollectionQueueContains(asyncId))) {\n        // for back compatibility, check in the old places. This can be removed in Solr 9\n        r.add(\"error\", \"Task with the same requestid already exists.\");\n      } else {\n        if (coreContainer.getZkController().claimAsyncId(asyncId)) {\n          boolean success = false;\n          try {\n            coreContainer.getZkController().getOverseerCollectionQueue()\n                .offer(Utils.toJSON(m));\n            success = true;\n          } finally {\n            if (!success) {\n              try {\n                coreContainer.getZkController().clearAsyncId(asyncId);\n              } catch (Exception e) {\n                // let the original exception bubble up\n                log.error(\"Unable to release async ID={}\", asyncId, e);\n                SolrZkClient.checkInterrupted(e);\n              }\n            }\n          }\n        } else {\n          r.add(\"error\", \"Task with the same requestid already exists.\");\n        }\n      }\n      r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n\n      return new OverseerSolrResponse(r);\n    }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      return OverseerSolrResponseSerializer.deserialize(event.getBytes());\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","sourceOld":"  public SolrResponse sendToOCPQueue(ZkNodeProps m, long timeout) throws KeeperException, InterruptedException {\n    String operation = m.getStr(QUEUE_OPERATION);\n    if (operation == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n      String asyncId = m.getStr(ASYNC);\n\n      if (asyncId.equals(\"-1\")) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n      }\n\n      NamedList<String> r = new NamedList<>();\n\n      if (CHECK_ASYNC_ID_BACK_COMPAT_LOCATIONS && (\n          coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n              coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n              coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n              overseerCollectionQueueContains(asyncId))) {\n        // for back compatibility, check in the old places. This can be removed in Solr 9\n        r.add(\"error\", \"Task with the same requestid already exists.\");\n      } else {\n        if (coreContainer.getZkController().claimAsyncId(asyncId)) {\n          boolean success = false;\n          try {\n            coreContainer.getZkController().getOverseerCollectionQueue()\n                .offer(Utils.toJSON(m));\n            success = true;\n          } finally {\n            if (!success) {\n              try {\n                coreContainer.getZkController().clearAsyncId(asyncId);\n              } catch (Exception e) {\n                // let the original exception bubble up\n                log.error(\"Unable to release async ID={}\", asyncId, e);\n                SolrZkClient.checkInterrupted(e);\n              }\n            }\n          }\n        } else {\n          r.add(\"error\", \"Task with the same requestid already exists.\");\n        }\n      }\n      r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n\n      return new OverseerSolrResponse(r);\n    }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      return OverseerSolrResponse.deserialize(event.getBytes());\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","bugFix":["2dfb8001b6712216ccbf7ccc85f830f08ce3b544"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad50218572a7f0b10419586719d6f119f92f17c9","date":1582240385,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#sendToOCPQueue(ZkNodeProps,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#sendToOCPQueue(ZkNodeProps,long).mjava","sourceNew":"  public SolrResponse sendToOCPQueue(ZkNodeProps m, long timeout) throws KeeperException, InterruptedException {\n    String operation = m.getStr(QUEUE_OPERATION);\n    if (operation == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n      String asyncId = m.getStr(ASYNC);\n\n      if (asyncId.equals(\"-1\")) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n      }\n\n      NamedList<String> r = new NamedList<>();\n\n\n      if (coreContainer.getZkController().claimAsyncId(asyncId)) {\n        boolean success = false;\n        try {\n          coreContainer.getZkController().getOverseerCollectionQueue()\n              .offer(Utils.toJSON(m));\n          success = true;\n        } finally {\n          if (!success) {\n            try {\n              coreContainer.getZkController().clearAsyncId(asyncId);\n            } catch (Exception e) {\n              // let the original exception bubble up\n              log.error(\"Unable to release async ID={}\", asyncId, e);\n              SolrZkClient.checkInterrupted(e);\n            }\n          }\n        }\n      } else {\n        r.add(\"error\", \"Task with the same requestid already exists.\");\n      }\n      r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n\n      return new OverseerSolrResponse(r);\n    }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      return OverseerSolrResponseSerializer.deserialize(event.getBytes());\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","sourceOld":"  public SolrResponse sendToOCPQueue(ZkNodeProps m, long timeout) throws KeeperException, InterruptedException {\n    String operation = m.getStr(QUEUE_OPERATION);\n    if (operation == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n      String asyncId = m.getStr(ASYNC);\n\n      if (asyncId.equals(\"-1\")) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n      }\n\n      NamedList<String> r = new NamedList<>();\n\n      if (CHECK_ASYNC_ID_BACK_COMPAT_LOCATIONS && (\n          coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n              coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n              coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n              overseerCollectionQueueContains(asyncId))) {\n        // for back compatibility, check in the old places. This can be removed in Solr 9\n        r.add(\"error\", \"Task with the same requestid already exists.\");\n      } else {\n        if (coreContainer.getZkController().claimAsyncId(asyncId)) {\n          boolean success = false;\n          try {\n            coreContainer.getZkController().getOverseerCollectionQueue()\n                .offer(Utils.toJSON(m));\n            success = true;\n          } finally {\n            if (!success) {\n              try {\n                coreContainer.getZkController().clearAsyncId(asyncId);\n              } catch (Exception e) {\n                // let the original exception bubble up\n                log.error(\"Unable to release async ID={}\", asyncId, e);\n                SolrZkClient.checkInterrupted(e);\n              }\n            }\n          }\n        } else {\n          r.add(\"error\", \"Task with the same requestid already exists.\");\n        }\n      }\n      r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n\n      return new OverseerSolrResponse(r);\n    }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      return OverseerSolrResponseSerializer.deserialize(event.getBytes());\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd8a9ad1acc754f713e220250044c2bf06a22a0b":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":["2668c99990e4c94a78bac005aa682b7c5986d23a","2dfb8001b6712216ccbf7ccc85f830f08ce3b544"],"2dfb8001b6712216ccbf7ccc85f830f08ce3b544":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"b6a4045268caa5f6094d5a8d80519a1c152295f3":["2dfb8001b6712216ccbf7ccc85f830f08ce3b544"],"3cbd743a4843f513f793670e3ab0e272bf824faf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["28ba172425e443e0f08a49de6d73586c418d7251"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad50218572a7f0b10419586719d6f119f92f17c9":["b6a4045268caa5f6094d5a8d80519a1c152295f3"],"28ba172425e443e0f08a49de6d73586c418d7251":["dd8a9ad1acc754f713e220250044c2bf06a22a0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad50218572a7f0b10419586719d6f119f92f17c9"]},"commit2Childs":{"dd8a9ad1acc754f713e220250044c2bf06a22a0b":["28ba172425e443e0f08a49de6d73586c418d7251"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":[],"2dfb8001b6712216ccbf7ccc85f830f08ce3b544":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","b6a4045268caa5f6094d5a8d80519a1c152295f3"],"b6a4045268caa5f6094d5a8d80519a1c152295f3":["ad50218572a7f0b10419586719d6f119f92f17c9"],"3cbd743a4843f513f793670e3ab0e272bf824faf":["dd8a9ad1acc754f713e220250044c2bf06a22a0b"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","2dfb8001b6712216ccbf7ccc85f830f08ce3b544"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"ad50218572a7f0b10419586719d6f119f92f17c9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28ba172425e443e0f08a49de6d73586c418d7251":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}