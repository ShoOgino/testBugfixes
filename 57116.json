{"path":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7","date":1366210710,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery q2CustomNeutral = new BooleanQuery(true);\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutral.add(q2CustomNeutralInner, BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    q2CustomNeutral.setBoost((float)Math.sqrt(dboost));\n    q2CustomNeutralInner.setBoost((float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","bugFix":["777b7ef341decfee8757f492d8a154637cd7a384","3f74570911bfdb9f7b01948745dcd67c69676c0e","a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery q2CustomNeutral = new BooleanQuery(true);\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutral.add(q2CustomNeutralInner, BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    q2CustomNeutral.setBoost((float)Math.sqrt(dboost));\n    q2CustomNeutralInner.setBoost((float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery q2CustomNeutral = new BooleanQuery(true);\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutral.add(q2CustomNeutralInner, BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    q2CustomNeutral.setBoost((float)Math.sqrt(dboost));\n    q2CustomNeutralInner.setBoost((float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery q2CustomNeutral = new BooleanQuery(true);\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutral.add(q2CustomNeutralInner, BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    q2CustomNeutral.setBoost((float)Math.sqrt(dboost));\n    q2CustomNeutralInner.setBoost((float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery q2CustomNeutral = new BooleanQuery(true);\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutral.add(q2CustomNeutralInner, BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    q2CustomNeutral.setBoost((float)Math.sqrt(dboost));\n    q2CustomNeutralInner.setBoost((float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery q2CustomNeutral = new BooleanQuery(true);\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutral.add(q2CustomNeutralInner, BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    q2CustomNeutral.setBoost((float)Math.sqrt(dboost));\n    q2CustomNeutralInner.setBoost((float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery q2CustomNeutral = new BooleanQuery(true);\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutral.add(q2CustomNeutralInner, BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    q2CustomNeutral.setBoost((float)Math.sqrt(dboost));\n    q2CustomNeutralInner.setBoost((float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery.Builder q1b = new BooleanQuery.Builder();\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    Query q1 = q1b.build();\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery.Builder q2CustomNeutralB = new BooleanQuery.Builder();\n    q2CustomNeutralB.setDisableCoord(true);\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutralInner.setBoost((float)Math.sqrt(dboost));\n    q2CustomNeutralB.add(q2CustomNeutralInner, BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    Query q2CustomNeutral = q2CustomNeutralB.build();\n    q2CustomNeutral.setBoost((float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery q2CustomNeutral = new BooleanQuery(true);\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutral.add(q2CustomNeutralInner, BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    q2CustomNeutral.setBoost((float)Math.sqrt(dboost));\n    q2CustomNeutralInner.setBoost((float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery.Builder q1b = new BooleanQuery.Builder();\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    Query q1 = q1b.build();\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery.Builder q2CustomNeutralB = new BooleanQuery.Builder();\n    q2CustomNeutralB.setDisableCoord(true);\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutralB.add(new BoostQuery(q2CustomNeutralInner, (float)Math.sqrt(dboost)), BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    Query q2CustomNeutral = q2CustomNeutralB.build();\n    q2CustomNeutral = new BoostQuery(q2CustomNeutral, (float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    Query q3CustomMul;\n    {\n      CustomScoreQuery csq = new CustomScoreQuery(q1, functionQuery);\n      csq.setStrict(true);\n      q3CustomMul = csq;\n    }\n    q3CustomMul = new BoostQuery(q3CustomMul, boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    Query q4CustomAdd;\n    {\n      CustomScoreQuery csq = new CustomAddQuery(q1, functionQuery);\n      csq.setStrict(true);\n      q4CustomAdd = csq;\n    }\n    q4CustomAdd = new BoostQuery(q4CustomAdd, boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    Query q5CustomMulAdd;\n    {\n      CustomScoreQuery csq = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n      csq.setStrict(true);\n      q5CustomMulAdd = csq;\n    }\n    q5CustomMulAdd = new BoostQuery(q5CustomMulAdd, boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery.Builder q1b = new BooleanQuery.Builder();\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    Query q1 = q1b.build();\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery.Builder q2CustomNeutralB = new BooleanQuery.Builder();\n    q2CustomNeutralB.setDisableCoord(true);\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutralInner.setBoost((float)Math.sqrt(dboost));\n    q2CustomNeutralB.add(q2CustomNeutralInner, BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    Query q2CustomNeutral = q2CustomNeutralB.build();\n    q2CustomNeutral.setBoost((float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery.Builder q1b = new BooleanQuery.Builder();\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    Query q1 = q1b.build();\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery.Builder q2CustomNeutralB = new BooleanQuery.Builder();\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutralB.add(new BoostQuery(q2CustomNeutralInner, (float)Math.sqrt(dboost)), BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    Query q2CustomNeutral = q2CustomNeutralB.build();\n    q2CustomNeutral = new BoostQuery(q2CustomNeutral, (float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    Query q3CustomMul;\n    {\n      CustomScoreQuery csq = new CustomScoreQuery(q1, functionQuery);\n      csq.setStrict(true);\n      q3CustomMul = csq;\n    }\n    q3CustomMul = new BoostQuery(q3CustomMul, boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    Query q4CustomAdd;\n    {\n      CustomScoreQuery csq = new CustomAddQuery(q1, functionQuery);\n      csq.setStrict(true);\n      q4CustomAdd = csq;\n    }\n    q4CustomAdd = new BoostQuery(q4CustomAdd, boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    Query q5CustomMulAdd;\n    {\n      CustomScoreQuery csq = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n      csq.setStrict(true);\n      q5CustomMulAdd = csq;\n    }\n    q5CustomMulAdd = new BoostQuery(q5CustomMulAdd, boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery.Builder q1b = new BooleanQuery.Builder();\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    Query q1 = q1b.build();\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery.Builder q2CustomNeutralB = new BooleanQuery.Builder();\n    q2CustomNeutralB.setDisableCoord(true);\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutralB.add(new BoostQuery(q2CustomNeutralInner, (float)Math.sqrt(dboost)), BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    Query q2CustomNeutral = q2CustomNeutralB.build();\n    q2CustomNeutral = new BoostQuery(q2CustomNeutral, (float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    Query q3CustomMul;\n    {\n      CustomScoreQuery csq = new CustomScoreQuery(q1, functionQuery);\n      csq.setStrict(true);\n      q3CustomMul = csq;\n    }\n    q3CustomMul = new BoostQuery(q3CustomMul, boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    Query q4CustomAdd;\n    {\n      CustomScoreQuery csq = new CustomAddQuery(q1, functionQuery);\n      csq.setStrict(true);\n      q4CustomAdd = csq;\n    }\n    q4CustomAdd = new BoostQuery(q4CustomAdd, boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    Query q5CustomMulAdd;\n    {\n      CustomScoreQuery csq = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n      csq.setStrict(true);\n      q5CustomMulAdd = csq;\n    }\n    q5CustomMulAdd = new BoostQuery(q5CustomMulAdd, boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery.Builder q1b = new BooleanQuery.Builder();\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    Query q1 = q1b.build();\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery.Builder q2CustomNeutralB = new BooleanQuery.Builder();\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutralB.add(new BoostQuery(q2CustomNeutralInner, (float)Math.sqrt(dboost)), BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    Query q2CustomNeutral = q2CustomNeutralB.build();\n    q2CustomNeutral = new BoostQuery(q2CustomNeutral, (float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    Query q3CustomMul;\n    {\n      CustomScoreQuery csq = new CustomScoreQuery(q1, functionQuery);\n      q3CustomMul = csq;\n    }\n    q3CustomMul = new BoostQuery(q3CustomMul, boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    Query q4CustomAdd;\n    {\n      CustomScoreQuery csq = new CustomAddQuery(q1, functionQuery);\n      q4CustomAdd = csq;\n    }\n    q4CustomAdd = new BoostQuery(q4CustomAdd, boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    Query q5CustomMulAdd;\n    {\n      CustomScoreQuery csq = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n      q5CustomMulAdd = csq;\n    }\n    q5CustomMulAdd = new BoostQuery(q5CustomMulAdd, boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery.Builder q1b = new BooleanQuery.Builder();\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    Query q1 = q1b.build();\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery.Builder q2CustomNeutralB = new BooleanQuery.Builder();\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutralB.add(new BoostQuery(q2CustomNeutralInner, (float)Math.sqrt(dboost)), BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    Query q2CustomNeutral = q2CustomNeutralB.build();\n    q2CustomNeutral = new BoostQuery(q2CustomNeutral, (float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    Query q3CustomMul;\n    {\n      CustomScoreQuery csq = new CustomScoreQuery(q1, functionQuery);\n      csq.setStrict(true);\n      q3CustomMul = csq;\n    }\n    q3CustomMul = new BoostQuery(q3CustomMul, boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    Query q4CustomAdd;\n    {\n      CustomScoreQuery csq = new CustomAddQuery(q1, functionQuery);\n      csq.setStrict(true);\n      q4CustomAdd = csq;\n    }\n    q4CustomAdd = new BoostQuery(q4CustomAdd, boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    Query q5CustomMulAdd;\n    {\n      CustomScoreQuery csq = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n      csq.setStrict(true);\n      q5CustomMulAdd = csq;\n    }\n    q5CustomMulAdd = new BoostQuery(q5CustomMulAdd, boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery.Builder q1b = new BooleanQuery.Builder();\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    Query q1 = q1b.build();\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery.Builder q2CustomNeutralB = new BooleanQuery.Builder();\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutralB.add(new BoostQuery(q2CustomNeutralInner, (float)Math.sqrt(dboost)), BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    Query q2CustomNeutral = q2CustomNeutralB.build();\n    q2CustomNeutral = new BoostQuery(q2CustomNeutral, (float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    Query q3CustomMul;\n    {\n      CustomScoreQuery csq = new CustomScoreQuery(q1, functionQuery);\n      q3CustomMul = csq;\n    }\n    q3CustomMul = new BoostQuery(q3CustomMul, boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    Query q4CustomAdd;\n    {\n      CustomScoreQuery csq = new CustomAddQuery(q1, functionQuery);\n      q4CustomAdd = csq;\n    }\n    q4CustomAdd = new BoostQuery(q4CustomAdd, boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    Query q5CustomMulAdd;\n    {\n      CustomScoreQuery csq = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n      q5CustomMulAdd = csq;\n    }\n    q5CustomMulAdd = new BoostQuery(q5CustomMulAdd, boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery.Builder q1b = new BooleanQuery.Builder();\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    Query q1 = q1b.build();\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery.Builder q2CustomNeutralB = new BooleanQuery.Builder();\n    q2CustomNeutralB.setDisableCoord(true);\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutralB.add(new BoostQuery(q2CustomNeutralInner, (float)Math.sqrt(dboost)), BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    Query q2CustomNeutral = q2CustomNeutralB.build();\n    q2CustomNeutral = new BoostQuery(q2CustomNeutral, (float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    Query q3CustomMul;\n    {\n      CustomScoreQuery csq = new CustomScoreQuery(q1, functionQuery);\n      csq.setStrict(true);\n      q3CustomMul = csq;\n    }\n    q3CustomMul = new BoostQuery(q3CustomMul, boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    Query q4CustomAdd;\n    {\n      CustomScoreQuery csq = new CustomAddQuery(q1, functionQuery);\n      csq.setStrict(true);\n      q4CustomAdd = csq;\n    }\n    q4CustomAdd = new BoostQuery(q4CustomAdd, boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    Query q5CustomMulAdd;\n    {\n      CustomScoreQuery csq = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n      csq.setStrict(true);\n      q5CustomMulAdd = csq;\n    }\n    q5CustomMulAdd = new BoostQuery(q5CustomMulAdd, boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,float).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, float boost) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery.Builder q1b = new BooleanQuery.Builder();\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    Query q1 = q1b.build();\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery.Builder q2CustomNeutralB = new BooleanQuery.Builder();\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutralB.add(new BoostQuery(q2CustomNeutralInner, (float)Math.sqrt(boost)), BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    Query q2CustomNeutral = q2CustomNeutralB.build();\n    q2CustomNeutral = new BoostQuery(q2CustomNeutral, (float)Math.sqrt(boost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    Query q3CustomMul;\n    {\n      CustomScoreQuery csq = new CustomScoreQuery(q1, functionQuery);\n      q3CustomMul = csq;\n    }\n    q3CustomMul = new BoostQuery(q3CustomMul, boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    Query q4CustomAdd;\n    {\n      CustomScoreQuery csq = new CustomAddQuery(q1, functionQuery);\n      q4CustomAdd = csq;\n    }\n    q4CustomAdd = new BoostQuery(q4CustomAdd, boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    Query q5CustomMulAdd;\n    {\n      CustomScoreQuery csq = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n      q5CustomMulAdd = csq;\n    }\n    q5CustomMulAdd = new BoostQuery(q5CustomMulAdd, boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery.Builder q1b = new BooleanQuery.Builder();\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    Query q1 = q1b.build();\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery.Builder q2CustomNeutralB = new BooleanQuery.Builder();\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutralB.add(new BoostQuery(q2CustomNeutralInner, (float)Math.sqrt(dboost)), BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    Query q2CustomNeutral = q2CustomNeutralB.build();\n    q2CustomNeutral = new BoostQuery(q2CustomNeutral, (float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    Query q3CustomMul;\n    {\n      CustomScoreQuery csq = new CustomScoreQuery(q1, functionQuery);\n      q3CustomMul = csq;\n    }\n    q3CustomMul = new BoostQuery(q3CustomMul, boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    Query q4CustomAdd;\n    {\n      CustomScoreQuery csq = new CustomAddQuery(q1, functionQuery);\n      q4CustomAdd = csq;\n    }\n    q4CustomAdd = new BoostQuery(q4CustomAdd, boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    Query q5CustomMulAdd;\n    {\n      CustomScoreQuery csq = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n      q5CustomMulAdd = csq;\n    }\n    q5CustomMulAdd = new BoostQuery(q5CustomMulAdd, boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,float).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(ValueSource,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, float boost) throws Exception {\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery.Builder q1b = new BooleanQuery.Builder();\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    Query q1 = q1b.build();\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery.Builder q2CustomNeutralB = new BooleanQuery.Builder();\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutralB.add(new BoostQuery(q2CustomNeutralInner, (float)Math.sqrt(boost)), BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    Query q2CustomNeutral = q2CustomNeutralB.build();\n    q2CustomNeutral = new BoostQuery(q2CustomNeutral, (float)Math.sqrt(boost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    Query q3CustomMul;\n    {\n      CustomScoreQuery csq = new CustomScoreQuery(q1, functionQuery);\n      q3CustomMul = csq;\n    }\n    q3CustomMul = new BoostQuery(q3CustomMul, boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    Query q4CustomAdd;\n    {\n      CustomScoreQuery csq = new CustomAddQuery(q1, functionQuery);\n      q4CustomAdd = csq;\n    }\n    q4CustomAdd = new BoostQuery(q4CustomAdd, boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    Query q5CustomMulAdd;\n    {\n      CustomScoreQuery csq = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n      q5CustomMulAdd = csq;\n    }\n    q5CustomMulAdd = new BoostQuery(q5CustomMulAdd, boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(ValueSource valueSource, double dboost) throws Exception {\n    float boost = (float) dboost;\n    FunctionQuery functionQuery = new FunctionQuery(valueSource);\n    IndexReader r = DirectoryReader.open(dir);\n    IndexSearcher s = newSearcher(r);\n\n    // regular (boolean) query.\n    BooleanQuery.Builder q1b = new BooleanQuery.Builder();\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"first\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"aid\")), BooleanClause.Occur.SHOULD);\n    q1b.add(new TermQuery(new Term(TEXT_FIELD, \"text\")), BooleanClause.Occur.SHOULD);\n    Query q1 = q1b.build();\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    BooleanQuery.Builder q2CustomNeutralB = new BooleanQuery.Builder();\n    Query q2CustomNeutralInner = new CustomScoreQuery(q1);\n    q2CustomNeutralB.add(new BoostQuery(q2CustomNeutralInner, (float)Math.sqrt(dboost)), BooleanClause.Occur.SHOULD);\n    // a little tricky: we split the boost across an outer BQ and CustomScoreQuery\n    // this ensures boosting is correct across all these functions (see LUCENE-4935)\n    Query q2CustomNeutral = q2CustomNeutralB.build();\n    q2CustomNeutral = new BoostQuery(q2CustomNeutral, (float)Math.sqrt(dboost));\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    Query q3CustomMul;\n    {\n      CustomScoreQuery csq = new CustomScoreQuery(q1, functionQuery);\n      q3CustomMul = csq;\n    }\n    q3CustomMul = new BoostQuery(q3CustomMul, boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    Query q4CustomAdd;\n    {\n      CustomScoreQuery csq = new CustomAddQuery(q1, functionQuery);\n      q4CustomAdd = csq;\n    }\n    q4CustomAdd = new BoostQuery(q4CustomAdd, boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    Query q5CustomMulAdd;\n    {\n      CustomScoreQuery csq = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n      q5CustomMulAdd = csq;\n    }\n    q5CustomMulAdd = new BoostQuery(q5CustomMulAdd, boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7"],"2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"c7732a106554be0db3e03ac5211e46f6e0c285b8":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["c8a0e442f7b61f811680273b25da95994a724466"],"c8a0e442f7b61f811680273b25da95994a724466":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1aad05eeff7818b0833c02ac6b743aa72054963b"]},"commit2Childs":{"2dfdf766e55e943d942055d7de53c7ad6bc45283":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c8a0e442f7b61f811680273b25da95994a724466"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7":["19275ba31e621f6da1b83bf13af75233876fd3d4","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c7732a106554be0db3e03ac5211e46f6e0c285b8","1aad05eeff7818b0833c02ac6b743aa72054963b"],"c8a0e442f7b61f811680273b25da95994a724466":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}