{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","pathOld":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","sourceNew":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg chaning intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","sourceOld":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg chaning intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68fa956cfdb1b0e625046dcfa99f545fc8f04997","date":1133475513,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","sourceNew":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg chaning intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","sourceOld":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg chaning intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9bc1fe868bb126a5b8517d9d2abcf329f56d283","date":1219151801,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","sourceNew":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg chaning intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                // docFreq counts deletes\n                if(totalNumDocs < docFreq) {\n                  docFreq = totalNumDocs;\n                }\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","sourceOld":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg chaning intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","bugFix":null,"bugIntro":["fb821cbfa5ecf725348dd3bc3878a9fadd24f725"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","sourceNew":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg changing intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                // docFreq counts deletes\n                if(totalNumDocs < docFreq) {\n                  docFreq = totalNumDocs;\n                }\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","sourceOld":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg chaning intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                // docFreq counts deletes\n                if(totalNumDocs < docFreq) {\n                  docFreq = totalNumDocs;\n                }\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getIdfWeightedTerms(Query,IndexReader,String).mjava","sourceNew":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg changing intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                // docFreq counts deletes\n                if(totalNumDocs < docFreq) {\n                  docFreq = totalNumDocs;\n                }\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","sourceOld":"\t/**\n\t * Extracts all terms texts of a given Query into an array of WeightedTerms\n\t *\n\t * @param query      Query to extract term texts from\n\t * @param reader used to compute IDF which can be used to a) score selected fragments better \n\t * b) use graded highlights eg changing intensity of font color\n\t * @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based\n\t * @return an array of the terms used in a query, plus their weights.\n\t */\n\tpublic static final WeightedTerm[] getIdfWeightedTerms(Query query, IndexReader reader, String fieldName) \n\t{\n\t    WeightedTerm[] terms=getTerms(query,false, fieldName);\n\t    int totalNumDocs=reader.numDocs();\n\t    for (int i = 0; i < terms.length; i++)\n        {\n\t        try\n            {\n                int docFreq=reader.docFreq(new Term(fieldName,terms[i].term));\n                // docFreq counts deletes\n                if(totalNumDocs < docFreq) {\n                  docFreq = totalNumDocs;\n                }\n                //IDF algorithm taken from DefaultSimilarity class\n                float idf=(float)(Math.log((float)totalNumDocs/(double)(docFreq+1)) + 1.0);\n                terms[i].weight*=idf;\n            } \n\t        catch (IOException e)\n            {\n\t            //ignore \n            }\n        }\n\t\treturn terms;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68fa956cfdb1b0e625046dcfa99f545fc8f04997":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["c9bc1fe868bb126a5b8517d9d2abcf329f56d283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9bc1fe868bb126a5b8517d9d2abcf329f56d283":["68fa956cfdb1b0e625046dcfa99f545fc8f04997"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["add7d922e63099fbce8f0a1b31216df7ef5067f1"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["68fa956cfdb1b0e625046dcfa99f545fc8f04997"],"68fa956cfdb1b0e625046dcfa99f545fc8f04997":["c9bc1fe868bb126a5b8517d9d2abcf329f56d283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c9bc1fe868bb126a5b8517d9d2abcf329f56d283":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}