{"path":"lucene/core/src/java/org/apache/lucene/util/IntBlockPool#reset(boolean,boolean).mjava","commits":[{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IntBlockPool#reset(boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Resets the pool to its initial state reusing the first buffer. \n   * @param zeroFillBuffers if <code>true</code> the buffers are filled with <tt>0</tt>. \n   *        This should be set to <code>true</code> if this pool is used with \n   *        {@link SliceWriter}.\n   * @param reuseFirst if <code>true</code> the first buffer will be reused and calling\n   *        {@link IntBlockPool#nextBuffer()} is not needed after reset iff the \n   *        block pool was used before ie. {@link IntBlockPool#nextBuffer()} was called before.\n   */\n  public void reset(boolean zeroFillBuffers, boolean reuseFirst) {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      if (zeroFillBuffers) {\n        for(int i=0;i<bufferUpto;i++) {\n          // Fully zero fill buffers that we fully used\n          Arrays.fill(buffers[i], 0);\n        }\n        // Partial zero fill the final buffer\n        Arrays.fill(buffers[bufferUpto], 0, intUpto, 0);\n      }\n     \n      if (bufferUpto > 0 || !reuseFirst) {\n        final int offset = reuseFirst ? 1 : 0;  \n       // Recycle all but the first buffer\n       allocator.recycleIntBlocks(buffers, offset, 1+bufferUpto);\n       Arrays.fill(buffers, offset, bufferUpto+1, null);\n     }\n     if (reuseFirst) {\n       // Re-use the first buffer\n       bufferUpto = 0;\n       intUpto = 0;\n       intOffset = 0;\n       buffer = buffers[0];\n     } else {\n       bufferUpto = -1;\n       intUpto = INT_BLOCK_SIZE;\n       intOffset = -INT_BLOCK_SIZE;\n       buffer = null;\n     }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"641a23a95cee1e280f172cdfe6289ea3d010ebf1","date":1351978859,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IntBlockPool#reset(boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IntBlockPool#reset(boolean,boolean).mjava","sourceNew":"  /**\n   * Expert: Resets the pool to its initial state reusing the first buffer. \n   * @param zeroFillBuffers if <code>true</code> the buffers are filled with <tt>0</tt>. \n   *        This should be set to <code>true</code> if this pool is used with \n   *        {@link SliceWriter}.\n   * @param reuseFirst if <code>true</code> the first buffer will be reused and calling\n   *        {@link IntBlockPool#nextBuffer()} is not needed after reset iff the \n   *        block pool was used before ie. {@link IntBlockPool#nextBuffer()} was called before.\n   */\n  public void reset(boolean zeroFillBuffers, boolean reuseFirst) {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      if (zeroFillBuffers) {\n        for(int i=0;i<bufferUpto;i++) {\n          // Fully zero fill buffers that we fully used\n          Arrays.fill(buffers[i], 0);\n        }\n        // Partial zero fill the final buffer\n        Arrays.fill(buffers[bufferUpto], 0, intUpto, 0);\n      }\n     \n      if (bufferUpto > 0 || !reuseFirst) {\n        final int offset = reuseFirst ? 1 : 0;  \n        // Recycle all but the first buffer\n        allocator.recycleIntBlocks(buffers, offset, 1+bufferUpto);\n        Arrays.fill(buffers, offset, bufferUpto+1, null);\n      }\n      if (reuseFirst) {\n        // Re-use the first buffer\n        bufferUpto = 0;\n        intUpto = 0;\n        intOffset = 0;\n        buffer = buffers[0];\n      } else {\n        bufferUpto = -1;\n        buffers[0] = null;\n        intUpto = INT_BLOCK_SIZE;\n        intOffset = -INT_BLOCK_SIZE;\n        buffer = null;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Resets the pool to its initial state reusing the first buffer. \n   * @param zeroFillBuffers if <code>true</code> the buffers are filled with <tt>0</tt>. \n   *        This should be set to <code>true</code> if this pool is used with \n   *        {@link SliceWriter}.\n   * @param reuseFirst if <code>true</code> the first buffer will be reused and calling\n   *        {@link IntBlockPool#nextBuffer()} is not needed after reset iff the \n   *        block pool was used before ie. {@link IntBlockPool#nextBuffer()} was called before.\n   */\n  public void reset(boolean zeroFillBuffers, boolean reuseFirst) {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      if (zeroFillBuffers) {\n        for(int i=0;i<bufferUpto;i++) {\n          // Fully zero fill buffers that we fully used\n          Arrays.fill(buffers[i], 0);\n        }\n        // Partial zero fill the final buffer\n        Arrays.fill(buffers[bufferUpto], 0, intUpto, 0);\n      }\n     \n      if (bufferUpto > 0 || !reuseFirst) {\n        final int offset = reuseFirst ? 1 : 0;  \n       // Recycle all but the first buffer\n       allocator.recycleIntBlocks(buffers, offset, 1+bufferUpto);\n       Arrays.fill(buffers, offset, bufferUpto+1, null);\n     }\n     if (reuseFirst) {\n       // Re-use the first buffer\n       bufferUpto = 0;\n       intUpto = 0;\n       intOffset = 0;\n       buffer = buffers[0];\n     } else {\n       bufferUpto = -1;\n       intUpto = INT_BLOCK_SIZE;\n       intOffset = -INT_BLOCK_SIZE;\n       buffer = null;\n     }\n    }\n  }\n\n","bugFix":null,"bugIntro":["1657d74dced4f2c88017170070379fe9bfaf2108"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1657d74dced4f2c88017170070379fe9bfaf2108","date":1351981282,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IntBlockPool#reset(boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IntBlockPool#reset(boolean,boolean).mjava","sourceNew":"  /**\n   * Expert: Resets the pool to its initial state reusing the first buffer. \n   * @param zeroFillBuffers if <code>true</code> the buffers are filled with <tt>0</tt>. \n   *        This should be set to <code>true</code> if this pool is used with \n   *        {@link SliceWriter}.\n   * @param reuseFirst if <code>true</code> the first buffer will be reused and calling\n   *        {@link IntBlockPool#nextBuffer()} is not needed after reset iff the \n   *        block pool was used before ie. {@link IntBlockPool#nextBuffer()} was called before.\n   */\n  public void reset(boolean zeroFillBuffers, boolean reuseFirst) {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      if (zeroFillBuffers) {\n        for(int i=0;i<bufferUpto;i++) {\n          // Fully zero fill buffers that we fully used\n          Arrays.fill(buffers[i], 0);\n        }\n        // Partial zero fill the final buffer\n        Arrays.fill(buffers[bufferUpto], 0, intUpto, 0);\n      }\n     \n      if (bufferUpto > 0 || !reuseFirst) {\n        final int offset = reuseFirst ? 1 : 0;  \n        // Recycle all but the first buffer\n        allocator.recycleIntBlocks(buffers, offset, 1+bufferUpto);\n        Arrays.fill(buffers, offset, bufferUpto+1, null);\n      }\n      if (reuseFirst) {\n        // Re-use the first buffer\n        bufferUpto = 0;\n        intUpto = 0;\n        intOffset = 0;\n        buffer = buffers[0];\n      } else {\n        bufferUpto = -1;\n        intUpto = INT_BLOCK_SIZE;\n        intOffset = -INT_BLOCK_SIZE;\n        buffer = null;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Resets the pool to its initial state reusing the first buffer. \n   * @param zeroFillBuffers if <code>true</code> the buffers are filled with <tt>0</tt>. \n   *        This should be set to <code>true</code> if this pool is used with \n   *        {@link SliceWriter}.\n   * @param reuseFirst if <code>true</code> the first buffer will be reused and calling\n   *        {@link IntBlockPool#nextBuffer()} is not needed after reset iff the \n   *        block pool was used before ie. {@link IntBlockPool#nextBuffer()} was called before.\n   */\n  public void reset(boolean zeroFillBuffers, boolean reuseFirst) {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      if (zeroFillBuffers) {\n        for(int i=0;i<bufferUpto;i++) {\n          // Fully zero fill buffers that we fully used\n          Arrays.fill(buffers[i], 0);\n        }\n        // Partial zero fill the final buffer\n        Arrays.fill(buffers[bufferUpto], 0, intUpto, 0);\n      }\n     \n      if (bufferUpto > 0 || !reuseFirst) {\n        final int offset = reuseFirst ? 1 : 0;  \n        // Recycle all but the first buffer\n        allocator.recycleIntBlocks(buffers, offset, 1+bufferUpto);\n        Arrays.fill(buffers, offset, bufferUpto+1, null);\n      }\n      if (reuseFirst) {\n        // Re-use the first buffer\n        bufferUpto = 0;\n        intUpto = 0;\n        intOffset = 0;\n        buffer = buffers[0];\n      } else {\n        bufferUpto = -1;\n        buffers[0] = null;\n        intUpto = INT_BLOCK_SIZE;\n        intOffset = -INT_BLOCK_SIZE;\n        buffer = null;\n      }\n    }\n  }\n\n","bugFix":["641a23a95cee1e280f172cdfe6289ea3d010ebf1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e3751ad4cc85eb979419cf5469dfba266eae56a","date":1581046252,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IntBlockPool#reset(boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IntBlockPool#reset(boolean,boolean).mjava","sourceNew":"  /**\n   * Expert: Resets the pool to its initial state reusing the first buffer. \n   * @param zeroFillBuffers if <code>true</code> the buffers are filled with <code>0</code>. \n   *        This should be set to <code>true</code> if this pool is used with \n   *        {@link SliceWriter}.\n   * @param reuseFirst if <code>true</code> the first buffer will be reused and calling\n   *        {@link IntBlockPool#nextBuffer()} is not needed after reset iff the \n   *        block pool was used before ie. {@link IntBlockPool#nextBuffer()} was called before.\n   */\n  public void reset(boolean zeroFillBuffers, boolean reuseFirst) {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      if (zeroFillBuffers) {\n        for(int i=0;i<bufferUpto;i++) {\n          // Fully zero fill buffers that we fully used\n          Arrays.fill(buffers[i], 0);\n        }\n        // Partial zero fill the final buffer\n        Arrays.fill(buffers[bufferUpto], 0, intUpto, 0);\n      }\n     \n      if (bufferUpto > 0 || !reuseFirst) {\n        final int offset = reuseFirst ? 1 : 0;  \n        // Recycle all but the first buffer\n        allocator.recycleIntBlocks(buffers, offset, 1+bufferUpto);\n        Arrays.fill(buffers, offset, bufferUpto+1, null);\n      }\n      if (reuseFirst) {\n        // Re-use the first buffer\n        bufferUpto = 0;\n        intUpto = 0;\n        intOffset = 0;\n        buffer = buffers[0];\n      } else {\n        bufferUpto = -1;\n        intUpto = INT_BLOCK_SIZE;\n        intOffset = -INT_BLOCK_SIZE;\n        buffer = null;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Resets the pool to its initial state reusing the first buffer. \n   * @param zeroFillBuffers if <code>true</code> the buffers are filled with <tt>0</tt>. \n   *        This should be set to <code>true</code> if this pool is used with \n   *        {@link SliceWriter}.\n   * @param reuseFirst if <code>true</code> the first buffer will be reused and calling\n   *        {@link IntBlockPool#nextBuffer()} is not needed after reset iff the \n   *        block pool was used before ie. {@link IntBlockPool#nextBuffer()} was called before.\n   */\n  public void reset(boolean zeroFillBuffers, boolean reuseFirst) {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      if (zeroFillBuffers) {\n        for(int i=0;i<bufferUpto;i++) {\n          // Fully zero fill buffers that we fully used\n          Arrays.fill(buffers[i], 0);\n        }\n        // Partial zero fill the final buffer\n        Arrays.fill(buffers[bufferUpto], 0, intUpto, 0);\n      }\n     \n      if (bufferUpto > 0 || !reuseFirst) {\n        final int offset = reuseFirst ? 1 : 0;  \n        // Recycle all but the first buffer\n        allocator.recycleIntBlocks(buffers, offset, 1+bufferUpto);\n        Arrays.fill(buffers, offset, bufferUpto+1, null);\n      }\n      if (reuseFirst) {\n        // Re-use the first buffer\n        bufferUpto = 0;\n        intUpto = 0;\n        intOffset = 0;\n        buffer = buffers[0];\n      } else {\n        bufferUpto = -1;\n        intUpto = INT_BLOCK_SIZE;\n        intOffset = -INT_BLOCK_SIZE;\n        buffer = null;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9e3751ad4cc85eb979419cf5469dfba266eae56a":["1657d74dced4f2c88017170070379fe9bfaf2108"],"1657d74dced4f2c88017170070379fe9bfaf2108":["641a23a95cee1e280f172cdfe6289ea3d010ebf1"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e3751ad4cc85eb979419cf5469dfba266eae56a"],"641a23a95cee1e280f172cdfe6289ea3d010ebf1":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"]},"commit2Childs":{"9e3751ad4cc85eb979419cf5469dfba266eae56a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1657d74dced4f2c88017170070379fe9bfaf2108":["9e3751ad4cc85eb979419cf5469dfba266eae56a"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["641a23a95cee1e280f172cdfe6289ea3d010ebf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"641a23a95cee1e280f172cdfe6289ea3d010ebf1":["1657d74dced4f2c88017170070379fe9bfaf2108"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}