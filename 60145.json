{"path":"src/test/org/apache/lucene/analysis/TestAnalyzers#verifyPayload(TokenStream).mjava","commits":[{"id":"66ba51c00e882f0132a67162dc4fd8e4340f8618","date":1195505109,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestAnalyzers#verifyPayload(TokenStream).mjava","pathOld":"/dev/null","sourceNew":"  void verifyPayload(TokenStream ts) throws IOException {\n    Token t = new Token();\n    for(byte b=1;;b++) {\n      t.clear();\n      t = ts.next(t);\n      if (t==null) break;\n      // System.out.println(\"id=\"+System.identityHashCode(t) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)t.getPayload().toByteArray()[0]);\n      assertEquals(b, t.getPayload().toByteArray()[0]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestAnalyzers#verifyPayload(TokenStream).mjava","pathOld":"src/test/org/apache/lucene/analysis/TestAnalyzers#verifyPayload(TokenStream).mjava","sourceNew":"  void verifyPayload(TokenStream ts) throws IOException {\n    final Token reusableToken = new Token();\n    for(byte b=1;;b++) {\n      reusableToken.clear();\n      Token nextToken = ts.next(reusableToken);\n      if (nextToken==null) break;\n      // System.out.println(\"id=\"+System.identityHashCode(nextToken) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)nextToken.getPayload().toByteArray()[0]);\n      assertEquals(b, nextToken.getPayload().toByteArray()[0]);\n    }\n  }\n\n","sourceOld":"  void verifyPayload(TokenStream ts) throws IOException {\n    Token t = new Token();\n    for(byte b=1;;b++) {\n      t.clear();\n      t = ts.next(t);\n      if (t==null) break;\n      // System.out.println(\"id=\"+System.identityHashCode(t) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)t.getPayload().toByteArray()[0]);\n      assertEquals(b, t.getPayload().toByteArray()[0]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestAnalyzers#verifyPayload(TokenStream).mjava","pathOld":"src/test/org/apache/lucene/analysis/TestAnalyzers#verifyPayload(TokenStream).mjava","sourceNew":"  void verifyPayload(TokenStream ts) throws IOException {\n    PayloadAttribute payloadAtt = (PayloadAttribute) ts.getAttribute(PayloadAttribute.class);\n    for(byte b=1;;b++) {\n      boolean hasNext = ts.incrementToken();\n      if (!hasNext) break;\n      // System.out.println(\"id=\"+System.identityHashCode(nextToken) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)nextToken.getPayload().toByteArray()[0]);\n      assertEquals(b, payloadAtt.getPayload().toByteArray()[0]);\n    }\n  }\n\n","sourceOld":"  void verifyPayload(TokenStream ts) throws IOException {\n    final Token reusableToken = new Token();\n    for(byte b=1;;b++) {\n      reusableToken.clear();\n      Token nextToken = ts.next(reusableToken);\n      if (nextToken==null) break;\n      // System.out.println(\"id=\"+System.identityHashCode(nextToken) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)nextToken.getPayload().toByteArray()[0]);\n      assertEquals(b, nextToken.getPayload().toByteArray()[0]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestAnalyzers#verifyPayload(TokenStream).mjava","pathOld":"src/test/org/apache/lucene/analysis/TestAnalyzers#verifyPayload(TokenStream).mjava","sourceNew":"  void verifyPayload(TokenStream ts) throws IOException {\n    PayloadAttribute payloadAtt = ts.getAttribute(PayloadAttribute.class);\n    for(byte b=1;;b++) {\n      boolean hasNext = ts.incrementToken();\n      if (!hasNext) break;\n      // System.out.println(\"id=\"+System.identityHashCode(nextToken) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)nextToken.getPayload().toByteArray()[0]);\n      assertEquals(b, payloadAtt.getPayload().toByteArray()[0]);\n    }\n  }\n\n","sourceOld":"  void verifyPayload(TokenStream ts) throws IOException {\n    PayloadAttribute payloadAtt = (PayloadAttribute) ts.getAttribute(PayloadAttribute.class);\n    for(byte b=1;;b++) {\n      boolean hasNext = ts.incrementToken();\n      if (!hasNext) break;\n      // System.out.println(\"id=\"+System.identityHashCode(nextToken) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)nextToken.getPayload().toByteArray()[0]);\n      assertEquals(b, payloadAtt.getPayload().toByteArray()[0]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/TestAnalyzers#verifyPayload(TokenStream).mjava","sourceNew":null,"sourceOld":"  void verifyPayload(TokenStream ts) throws IOException {\n    PayloadAttribute payloadAtt = ts.getAttribute(PayloadAttribute.class);\n    for(byte b=1;;b++) {\n      boolean hasNext = ts.incrementToken();\n      if (!hasNext) break;\n      // System.out.println(\"id=\"+System.identityHashCode(nextToken) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)nextToken.getPayload().toByteArray()[0]);\n      assertEquals(b, payloadAtt.getPayload().toByteArray()[0]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["66ba51c00e882f0132a67162dc4fd8e4340f8618"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d78f014fded44fbde905f4f84cdc21907b371e8":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"66ba51c00e882f0132a67162dc4fd8e4340f8618":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8d78f014fded44fbde905f4f84cdc21907b371e8"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66ba51c00e882f0132a67162dc4fd8e4340f8618"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"66ba51c00e882f0132a67162dc4fd8e4340f8618":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}