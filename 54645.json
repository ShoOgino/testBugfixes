{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#assertEquals(TopDocs,TopDocs).mjava","commits":[{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":1,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#assertEquals(TopDocs,TopDocs).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#assertEquals(TopDocs,TopDocs).mjava","sourceNew":"  public static void assertEquals(TopDocs expected, TopDocs actual) {\n    Assert.assertEquals(\"wrong total hits\", expected.totalHits, actual.totalHits);\n    Assert.assertEquals(\"wrong maxScore\", expected.getMaxScore(), actual.getMaxScore(), 0.0);\n    Assert.assertEquals(\"wrong hit count\", expected.scoreDocs.length, actual.scoreDocs.length);\n    for(int hitIDX=0;hitIDX<expected.scoreDocs.length;hitIDX++) {\n      final ScoreDoc expectedSD = expected.scoreDocs[hitIDX];\n      final ScoreDoc actualSD = actual.scoreDocs[hitIDX];\n      Assert.assertEquals(\"wrong hit docID\", expectedSD.doc, actualSD.doc);\n      Assert.assertEquals(\"wrong hit score\", expectedSD.score, actualSD.score, 0.0);\n      if (expectedSD instanceof FieldDoc) {\n        Assert.assertTrue(actualSD instanceof FieldDoc);\n        Assert.assertArrayEquals(\"wrong sort field values\",\n                            ((FieldDoc) expectedSD).fields,\n                            ((FieldDoc) actualSD).fields);\n      } else {\n        Assert.assertFalse(actualSD instanceof FieldDoc);\n      }\n    }\n  }\n\n","sourceOld":"  public static void assertEquals(TopDocs expected, TopDocs actual) {\n    Assert.assertEquals(\"wrong total hits\", expected.totalHits, actual.totalHits);\n    Assert.assertEquals(\"wrong maxScore\", expected.getMaxScore(), actual.getMaxScore(), 0.0);\n    Assert.assertEquals(\"wrong hit count\", expected.scoreDocs.length, actual.scoreDocs.length);\n    for(int hitIDX=0;hitIDX<expected.scoreDocs.length;hitIDX++) {\n      final ScoreDoc expectedSD = expected.scoreDocs[hitIDX];\n      final ScoreDoc actualSD = actual.scoreDocs[hitIDX];\n      Assert.assertEquals(\"wrong hit docID\", expectedSD.doc, actualSD.doc);\n      Assert.assertEquals(\"wrong hit score\", expectedSD.score, actualSD.score, 0.0);\n      if (expectedSD instanceof FieldDoc) {\n        Assert.assertTrue(actualSD instanceof FieldDoc);\n        Assert.assertArrayEquals(\"wrong sort field values\",\n                            ((FieldDoc) expectedSD).fields,\n                            ((FieldDoc) actualSD).fields);\n      } else {\n        Assert.assertFalse(actualSD instanceof FieldDoc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#assertEquals(TopDocs,TopDocs).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#assertEquals(TopDocs,TopDocs).mjava","sourceNew":"  public static void assertEquals(TopDocs expected, TopDocs actual) {\n    Assert.assertEquals(\"wrong total hits\", expected.totalHits, actual.totalHits);\n    Assert.assertEquals(\"wrong hit count\", expected.scoreDocs.length, actual.scoreDocs.length);\n    for(int hitIDX=0;hitIDX<expected.scoreDocs.length;hitIDX++) {\n      final ScoreDoc expectedSD = expected.scoreDocs[hitIDX];\n      final ScoreDoc actualSD = actual.scoreDocs[hitIDX];\n      Assert.assertEquals(\"wrong hit docID\", expectedSD.doc, actualSD.doc);\n      Assert.assertEquals(\"wrong hit score\", expectedSD.score, actualSD.score, 0.0);\n      if (expectedSD instanceof FieldDoc) {\n        Assert.assertTrue(actualSD instanceof FieldDoc);\n        Assert.assertArrayEquals(\"wrong sort field values\",\n                            ((FieldDoc) expectedSD).fields,\n                            ((FieldDoc) actualSD).fields);\n      } else {\n        Assert.assertFalse(actualSD instanceof FieldDoc);\n      }\n    }\n  }\n\n","sourceOld":"  public static void assertEquals(TopDocs expected, TopDocs actual) {\n    Assert.assertEquals(\"wrong total hits\", expected.totalHits, actual.totalHits);\n    Assert.assertEquals(\"wrong maxScore\", expected.getMaxScore(), actual.getMaxScore(), 0.0);\n    Assert.assertEquals(\"wrong hit count\", expected.scoreDocs.length, actual.scoreDocs.length);\n    for(int hitIDX=0;hitIDX<expected.scoreDocs.length;hitIDX++) {\n      final ScoreDoc expectedSD = expected.scoreDocs[hitIDX];\n      final ScoreDoc actualSD = actual.scoreDocs[hitIDX];\n      Assert.assertEquals(\"wrong hit docID\", expectedSD.doc, actualSD.doc);\n      Assert.assertEquals(\"wrong hit score\", expectedSD.score, actualSD.score, 0.0);\n      if (expectedSD instanceof FieldDoc) {\n        Assert.assertTrue(actualSD instanceof FieldDoc);\n        Assert.assertArrayEquals(\"wrong sort field values\",\n                            ((FieldDoc) expectedSD).fields,\n                            ((FieldDoc) actualSD).fields);\n      } else {\n        Assert.assertFalse(actualSD instanceof FieldDoc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#assertEquals(TopDocs,TopDocs).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#assertEquals(TopDocs,TopDocs).mjava","sourceNew":"  public static void assertEquals(TopDocs expected, TopDocs actual) {\n    Assert.assertEquals(\"wrong total hits\", expected.totalHits, actual.totalHits);\n    Assert.assertEquals(\"wrong hit count\", expected.scoreDocs.length, actual.scoreDocs.length);\n    for(int hitIDX=0;hitIDX<expected.scoreDocs.length;hitIDX++) {\n      final ScoreDoc expectedSD = expected.scoreDocs[hitIDX];\n      final ScoreDoc actualSD = actual.scoreDocs[hitIDX];\n      Assert.assertEquals(\"wrong hit docID\", expectedSD.doc, actualSD.doc);\n      Assert.assertEquals(\"wrong hit score\", expectedSD.score, actualSD.score, 0.0);\n      if (expectedSD instanceof FieldDoc) {\n        Assert.assertTrue(actualSD instanceof FieldDoc);\n        Assert.assertArrayEquals(\"wrong sort field values\",\n                            ((FieldDoc) expectedSD).fields,\n                            ((FieldDoc) actualSD).fields);\n      } else {\n        Assert.assertFalse(actualSD instanceof FieldDoc);\n      }\n    }\n  }\n\n","sourceOld":"  public static void assertEquals(TopDocs expected, TopDocs actual) {\n    Assert.assertEquals(\"wrong total hits\", expected.totalHits, actual.totalHits);\n    Assert.assertEquals(\"wrong maxScore\", expected.getMaxScore(), actual.getMaxScore(), 0.0);\n    Assert.assertEquals(\"wrong hit count\", expected.scoreDocs.length, actual.scoreDocs.length);\n    for(int hitIDX=0;hitIDX<expected.scoreDocs.length;hitIDX++) {\n      final ScoreDoc expectedSD = expected.scoreDocs[hitIDX];\n      final ScoreDoc actualSD = actual.scoreDocs[hitIDX];\n      Assert.assertEquals(\"wrong hit docID\", expectedSD.doc, actualSD.doc);\n      Assert.assertEquals(\"wrong hit score\", expectedSD.score, actualSD.score, 0.0);\n      if (expectedSD instanceof FieldDoc) {\n        Assert.assertTrue(actualSD instanceof FieldDoc);\n        Assert.assertArrayEquals(\"wrong sort field values\",\n                            ((FieldDoc) expectedSD).fields,\n                            ((FieldDoc) actualSD).fields);\n      } else {\n        Assert.assertFalse(actualSD instanceof FieldDoc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#assertEquals(TopDocs,TopDocs).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#assertEquals(TopDocs,TopDocs).mjava","sourceNew":"  public static void assertEquals(TopDocs expected, TopDocs actual) {\n    Assert.assertEquals(\"wrong total hits\", expected.totalHits.value, actual.totalHits.value);\n    Assert.assertEquals(\"wrong total hits\", expected.totalHits.relation, actual.totalHits.relation);\n    Assert.assertEquals(\"wrong hit count\", expected.scoreDocs.length, actual.scoreDocs.length);\n    for(int hitIDX=0;hitIDX<expected.scoreDocs.length;hitIDX++) {\n      final ScoreDoc expectedSD = expected.scoreDocs[hitIDX];\n      final ScoreDoc actualSD = actual.scoreDocs[hitIDX];\n      Assert.assertEquals(\"wrong hit docID\", expectedSD.doc, actualSD.doc);\n      Assert.assertEquals(\"wrong hit score\", expectedSD.score, actualSD.score, 0.0);\n      if (expectedSD instanceof FieldDoc) {\n        Assert.assertTrue(actualSD instanceof FieldDoc);\n        Assert.assertArrayEquals(\"wrong sort field values\",\n                            ((FieldDoc) expectedSD).fields,\n                            ((FieldDoc) actualSD).fields);\n      } else {\n        Assert.assertFalse(actualSD instanceof FieldDoc);\n      }\n    }\n  }\n\n","sourceOld":"  public static void assertEquals(TopDocs expected, TopDocs actual) {\n    Assert.assertEquals(\"wrong total hits\", expected.totalHits, actual.totalHits);\n    Assert.assertEquals(\"wrong hit count\", expected.scoreDocs.length, actual.scoreDocs.length);\n    for(int hitIDX=0;hitIDX<expected.scoreDocs.length;hitIDX++) {\n      final ScoreDoc expectedSD = expected.scoreDocs[hitIDX];\n      final ScoreDoc actualSD = actual.scoreDocs[hitIDX];\n      Assert.assertEquals(\"wrong hit docID\", expectedSD.doc, actualSD.doc);\n      Assert.assertEquals(\"wrong hit score\", expectedSD.score, actualSD.score, 0.0);\n      if (expectedSD instanceof FieldDoc) {\n        Assert.assertTrue(actualSD instanceof FieldDoc);\n        Assert.assertArrayEquals(\"wrong sort field values\",\n                            ((FieldDoc) expectedSD).fields,\n                            ((FieldDoc) actualSD).fields);\n      } else {\n        Assert.assertFalse(actualSD instanceof FieldDoc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e708f948b384f9aa85c665caee4486eb2d9e197d","date":1533106881,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#assertConsistent(TopDocs,TopDocs).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#assertEquals(TopDocs,TopDocs).mjava","sourceNew":"  /**\n   * Assert that the given {@link TopDocs} have the same top docs and consistent hit counts.\n   */\n  public static void assertConsistent(TopDocs expected, TopDocs actual) {\n    Assert.assertEquals(\"wrong total hits\", expected.totalHits.value == 0, actual.totalHits.value == 0);\n    if (expected.totalHits.relation == TotalHits.Relation.EQUAL_TO) {\n      if (actual.totalHits.relation == TotalHits.Relation.EQUAL_TO) {\n        Assert.assertEquals(\"wrong total hits\", expected.totalHits.value, actual.totalHits.value);\n      } else {\n        Assert.assertTrue(\"wrong total hits\", expected.totalHits.value >= actual.totalHits.value);\n      }\n    } else if (actual.totalHits.relation == TotalHits.Relation.EQUAL_TO) {\n      Assert.assertTrue(\"wrong total hits\", expected.totalHits.value <= actual.totalHits.value);\n    }\n    Assert.assertEquals(\"wrong hit count\", expected.scoreDocs.length, actual.scoreDocs.length);\n    for(int hitIDX=0;hitIDX<expected.scoreDocs.length;hitIDX++) {\n      final ScoreDoc expectedSD = expected.scoreDocs[hitIDX];\n      final ScoreDoc actualSD = actual.scoreDocs[hitIDX];\n      Assert.assertEquals(\"wrong hit docID\", expectedSD.doc, actualSD.doc);\n      Assert.assertEquals(\"wrong hit score\", expectedSD.score, actualSD.score, 0.0);\n      if (expectedSD instanceof FieldDoc) {\n        Assert.assertTrue(actualSD instanceof FieldDoc);\n        Assert.assertArrayEquals(\"wrong sort field values\",\n                            ((FieldDoc) expectedSD).fields,\n                            ((FieldDoc) actualSD).fields);\n      } else {\n        Assert.assertFalse(actualSD instanceof FieldDoc);\n      }\n    }\n  }\n\n","sourceOld":"  public static void assertEquals(TopDocs expected, TopDocs actual) {\n    Assert.assertEquals(\"wrong total hits\", expected.totalHits.value, actual.totalHits.value);\n    Assert.assertEquals(\"wrong total hits\", expected.totalHits.relation, actual.totalHits.relation);\n    Assert.assertEquals(\"wrong hit count\", expected.scoreDocs.length, actual.scoreDocs.length);\n    for(int hitIDX=0;hitIDX<expected.scoreDocs.length;hitIDX++) {\n      final ScoreDoc expectedSD = expected.scoreDocs[hitIDX];\n      final ScoreDoc actualSD = actual.scoreDocs[hitIDX];\n      Assert.assertEquals(\"wrong hit docID\", expectedSD.doc, actualSD.doc);\n      Assert.assertEquals(\"wrong hit score\", expectedSD.score, actualSD.score, 0.0);\n      if (expectedSD instanceof FieldDoc) {\n        Assert.assertTrue(actualSD instanceof FieldDoc);\n        Assert.assertArrayEquals(\"wrong sort field values\",\n                            ((FieldDoc) expectedSD).fields,\n                            ((FieldDoc) actualSD).fields);\n      } else {\n        Assert.assertFalse(actualSD instanceof FieldDoc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e708f948b384f9aa85c665caee4486eb2d9e197d":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["6613659748fe4411a7dcf85266e55db1f95f7315","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e708f948b384f9aa85c665caee4486eb2d9e197d"]},"commit2Childs":{"e708f948b384f9aa85c665caee4486eb2d9e197d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6613659748fe4411a7dcf85266e55db1f95f7315"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["e708f948b384f9aa85c665caee4486eb2d9e197d"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}