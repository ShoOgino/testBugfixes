{"path":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","commits":[{"id":"92a4da96826f502cf1a56a096929b37ce73e523a","date":1374584011,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      if (fname == null) {\n        if (slf4jImpl.indexOf(\"Log4j\") > 0) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  private static LogWatcher createWatcher(ConfigSolr config, SolrResourceLoader loader) {\n\n    String fname = config.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null);\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      if (fname == null) {\n        if (slf4jImpl.indexOf(\"Log4j\") > 0) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":1,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      if (fname == null) {\n        if (slf4jImpl.indexOf(\"Log4j\") > 0) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  private static LogWatcher createWatcher(ConfigSolr config, SolrResourceLoader loader) {\n\n    String fname = config.get(ConfigSolr.CfgProp.SOLR_LOGGING_CLASS, null);\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      if (fname == null) {\n        if (slf4jImpl.indexOf(\"Log4j\") > 0) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e732472e86aa53222c571de21dcb7d6a75c1c87","date":1377608255,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.info(\"SLF4J impl is \" + slf4jImpl);\n      if (fname == null) {\n        if (slf4jImpl.indexOf(\"Log4j\") > 0) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      if (fname == null) {\n        if (slf4jImpl.indexOf(\"Log4j\") > 0) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.info(\"SLF4J impl is \" + slf4jImpl);\n      if (fname == null) {\n        if (slf4jImpl.indexOf(\"Log4j\") > 0) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      if (fname == null) {\n        if (slf4jImpl.indexOf(\"Log4j\") > 0) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67a3984e96a6326891a938106ddac7df68770c28","date":1382543220,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.info(\"SLF4J impl is \" + slf4jImpl);\n      if (fname == null) {\n        if (\"org.slf4j.impl.Log4jLoggerFactory\".equals(slf4jImpl)) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.info(\"SLF4J impl is \" + slf4jImpl);\n      if (fname == null) {\n        if (slf4jImpl.indexOf(\"Log4j\") > 0) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n    }\n\n    return null;\n  }\n\n","bugFix":["85a757d77b8686d261b25acf542b0037bf65d8fa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.info(\"SLF4J impl is \" + slf4jImpl);\n      if (fname == null) {\n        if (\"org.slf4j.impl.Log4jLoggerFactory\".equals(slf4jImpl)) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.info(\"SLF4J impl is \" + slf4jImpl);\n      if (fname == null) {\n        if (\"org.slf4j.impl.Log4jLoggerFactory\".equals(slf4jImpl)) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.debug(\"SLF4J impl is \" + slf4jImpl);\n      if (fname == null) {\n        if (\"org.slf4j.impl.Log4jLoggerFactory\".equals(slf4jImpl)) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n      return null;\n    }\n\n    if (fname == null) {\n      log.debug(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.info(\"SLF4J impl is \" + slf4jImpl);\n      if (fname == null) {\n        if (\"org.slf4j.impl.Log4jLoggerFactory\".equals(slf4jImpl)) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.debug(\"SLF4J impl is \" + slf4jImpl);\n      if (fname == null) {\n        if (\"org.slf4j.impl.Log4jLoggerFactory\".equals(slf4jImpl)) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n      return null;\n    }\n\n    if (fname == null) {\n      log.debug(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.info(\"SLF4J impl is \" + slf4jImpl);\n      if (fname == null) {\n        if (\"org.slf4j.impl.Log4jLoggerFactory\".equals(slf4jImpl)) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.debug(\"SLF4J impl is \" + slf4jImpl);\n      if (fname == null) {\n        if (\"org.slf4j.impl.Log4jLoggerFactory\".equals(slf4jImpl)) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n      return null;\n    }\n\n    if (fname == null) {\n      log.debug(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.info(\"SLF4J impl is \" + slf4jImpl);\n      if (fname == null) {\n        if (\"org.slf4j.impl.Log4jLoggerFactory\".equals(slf4jImpl)) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.debug(\"SLF4J impl is \" + slf4jImpl);\n      if (fname == null) {\n        if (\"org.slf4j.impl.Log4jLoggerFactory\".equals(slf4jImpl)) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n      return null;\n    }\n\n    if (fname == null) {\n      log.debug(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.info(\"SLF4J impl is \" + slf4jImpl);\n      if (fname == null) {\n        if (\"org.slf4j.impl.Log4jLoggerFactory\".equals(slf4jImpl)) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n      return null;\n    }\n\n    if (fname == null) {\n      log.info(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93baf46bd12096e0de407258b3b32cfaaf58e448","date":1522030569,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.debug(\"SLF4J impl is \" + slf4jImpl);\n      if (fname == null) {\n        if (\"org.apache.logging.slf4j.Log4jLoggerFactory\".equals(slf4jImpl)) {\n          fname = \"Log4j2\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n      return null;\n    }\n\n    if (fname == null) {\n      log.debug(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname)) {\n      return new JulWatcher(slf4jImpl);\n    }\n    if (\"Log4j2\".equals(fname)) {\n      return new Log4j2Watcher();\n    }\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.debug(\"SLF4J impl is \" + slf4jImpl);\n      if (fname == null) {\n        if (\"org.slf4j.impl.Log4jLoggerFactory\".equals(slf4jImpl)) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n      return null;\n    }\n\n    if (fname == null) {\n      log.debug(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","date":1522059649,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.debug(\"SLF4J impl is \" + slf4jImpl);\n      if (fname == null) {\n        if (\"org.apache.logging.slf4j.Log4jLoggerFactory\".equals(slf4jImpl)) {\n          fname = \"Log4j2\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n      return null;\n    }\n\n    if (fname == null) {\n      log.debug(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname)) {\n      return new JulWatcher(slf4jImpl);\n    }\n    if (\"Log4j2\".equals(fname)) {\n      return new Log4j2Watcher();\n    }\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.debug(\"SLF4J impl is \" + slf4jImpl);\n      if (fname == null) {\n        if (\"org.slf4j.impl.Log4jLoggerFactory\".equals(slf4jImpl)) {\n          fname = \"Log4j\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n      return null;\n    }\n\n    if (fname == null) {\n      log.debug(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname))\n      return new JulWatcher(slf4jImpl);\n    if (\"Log4j\".equals(fname))\n      return new Log4jWatcher(slf4jImpl);\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.debug(\"SLF4J impl is {}\", slf4jImpl);\n      if (fname == null) {\n        if (\"org.apache.logging.slf4j.Log4jLoggerFactory\".equals(slf4jImpl)) {\n          fname = \"Log4j2\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \", e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n      return null;\n    }\n\n    if (fname == null) {\n      log.debug(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname)) {\n      return new JulWatcher(slf4jImpl);\n    }\n    if (\"Log4j2\".equals(fname)) {\n      return new Log4j2Watcher();\n    }\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.debug(\"SLF4J impl is \" + slf4jImpl);\n      if (fname == null) {\n        if (\"org.apache.logging.slf4j.Log4jLoggerFactory\".equals(slf4jImpl)) {\n          fname = \"Log4j2\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \" + e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n      return null;\n    }\n\n    if (fname == null) {\n      log.debug(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname)) {\n      return new JulWatcher(slf4jImpl);\n    }\n    if (\"Log4j2\".equals(fname)) {\n      return new Log4j2Watcher();\n    }\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/LogWatcher#createWatcher(LogWatcherConfig,SolrResourceLoader).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.debug(\"SLF4J impl is {}\", slf4jImpl);\n      if (fname == null) {\n        if (\"org.apache.logging.slf4j.Log4jLoggerFactory\".equals(slf4jImpl)) {\n          fname = \"Log4j2\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \", e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n      return null;\n    }\n\n    if (fname == null) {\n      log.debug(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname)) {\n      return new JulWatcher(slf4jImpl);\n    }\n    if (\"Log4j2\".equals(fname)) {\n      return new Log4j2Watcher();\n    }\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  private static LogWatcher createWatcher(LogWatcherConfig config, SolrResourceLoader loader) {\n\n    String fname = config.getLoggingClass();\n    String slf4jImpl;\n\n    try {\n      slf4jImpl = StaticLoggerBinder.getSingleton().getLoggerFactoryClassStr();\n      log.debug(\"SLF4J impl is {}\", slf4jImpl);\n      if (fname == null) {\n        if (\"org.apache.logging.slf4j.Log4jLoggerFactory\".equals(slf4jImpl)) {\n          fname = \"Log4j2\";\n        } else if (slf4jImpl.indexOf(\"JDK\") > 0) {\n          fname = \"JUL\";\n        }\n      }\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to read SLF4J version.  LogWatcher will be disabled: \", e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n      return null;\n    }\n\n    if (fname == null) {\n      log.debug(\"No LogWatcher configured\");\n      return null;\n    }\n\n    if (\"JUL\".equalsIgnoreCase(fname)) {\n      return new JulWatcher(slf4jImpl);\n    }\n    if (\"Log4j2\".equals(fname)) {\n      return new Log4j2Watcher();\n    }\n\n    try {\n      return loader != null ? loader.newInstance(fname, LogWatcher.class) : null;\n    }\n    catch (Throwable e) {\n      log.warn(\"Unable to load LogWatcher {}: {}\", fname, e);\n      if (e instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) e;\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92a4da96826f502cf1a56a096929b37ce73e523a"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","5e732472e86aa53222c571de21dcb7d6a75c1c87"],"92a4da96826f502cf1a56a096929b37ce73e523a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"67a3984e96a6326891a938106ddac7df68770c28":["5e732472e86aa53222c571de21dcb7d6a75c1c87"],"5e732472e86aa53222c571de21dcb7d6a75c1c87":["92a4da96826f502cf1a56a096929b37ce73e523a"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"126d6ad24eed13163ba0959435d5a80e5672837c":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","126d6ad24eed13163ba0959435d5a80e5672837c"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["67a3984e96a6326891a938106ddac7df68770c28"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","93baf46bd12096e0de407258b3b32cfaaf58e448"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"92a4da96826f502cf1a56a096929b37ce73e523a":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","5e732472e86aa53222c571de21dcb7d6a75c1c87"],"67a3984e96a6326891a938106ddac7df68770c28":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"5e732472e86aa53222c571de21dcb7d6a75c1c87":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","67a3984e96a6326891a938106ddac7df68770c28"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","92a4da96826f502cf1a56a096929b37ce73e523a"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","93baf46bd12096e0de407258b3b32cfaaf58e448","f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}