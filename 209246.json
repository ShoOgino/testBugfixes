{"path":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","sourceNew":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fieldsEnum.terms();\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms.iterator(null));\n      }\n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fieldsEnum.terms();\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms.iterator(null));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/InvertedFieldsConsumer#merge(MergeState,InvertedFields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","sourceNew":"  public void merge(MergeState mergeState, InvertedFields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fieldsEnum.terms();\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms.iterator(null));\n      }\n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fieldsEnum.terms();\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms.iterator(null));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/InvertedFieldsConsumer#merge(MergeState,InvertedFields).mjava","sourceNew":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fieldsEnum.terms();\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms.iterator(null));\n      }\n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState, InvertedFields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fieldsEnum.terms();\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms.iterator(null));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","sourceNew":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    for (String field : fields) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms.iterator(null));\n      }\n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fieldsEnum.terms();\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms.iterator(null));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","sourceNew":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    for (String field : fields) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms.iterator(null));\n      }\n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fieldsEnum.terms();\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms.iterator(null));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","sourceNew":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    for (String field : fields) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms.iterator(null));\n      }\n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fieldsEnum.terms();\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms.iterator(null));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519435fc0d6082a1b8081f9492b714f716877437","date":1348258553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","sourceNew":"  /** Called during merging to merge all {@link Fields} from\n   *  sub-readers.  This must recurse to merge all postings\n   *  (terms, docs, positions, etc.).  A {@link\n   *  PostingsFormat} can override this default\n   *  implementation to do its own merging. */\n  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    for (String field : fields) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms.iterator(null));\n      }\n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    for (String field : fields) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms.iterator(null));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6de04d4fe93277012dfab5984e08a38de091bcd1","date":1359464792,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","sourceNew":"  /** Called during merging to merge all {@link Fields} from\n   *  sub-readers.  This must recurse to merge all postings\n   *  (terms, docs, positions, etc.).  A {@link\n   *  PostingsFormat} can override this default\n   *  implementation to do its own merging. */\n  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    for (String field : fields) {\n      FieldInfo info = mergeState.fieldInfos.fieldInfo(field);\n      assert info != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(info);\n        termsConsumer.merge(mergeState, info.getIndexOptions(), terms.iterator(null));\n      }\n    }\n  }\n\n","sourceOld":"  /** Called during merging to merge all {@link Fields} from\n   *  sub-readers.  This must recurse to merge all postings\n   *  (terms, docs, positions, etc.).  A {@link\n   *  PostingsFormat} can override this default\n   *  implementation to do its own merging. */\n  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    for (String field : fields) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms.iterator(null));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","sourceNew":"  /** Called during merging to merge all {@link Fields} from\n   *  sub-readers.  This must recurse to merge all postings\n   *  (terms, docs, positions, etc.).  A {@link\n   *  PostingsFormat} can override this default\n   *  implementation to do its own merging. */\n  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    for (String field : fields) {\n      FieldInfo info = mergeState.fieldInfos.fieldInfo(field);\n      assert info != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(info);\n        termsConsumer.merge(mergeState, info.getIndexOptions(), terms.iterator(null));\n      }\n    }\n  }\n\n","sourceOld":"  /** Called during merging to merge all {@link Fields} from\n   *  sub-readers.  This must recurse to merge all postings\n   *  (terms, docs, positions, etc.).  A {@link\n   *  PostingsFormat} can override this default\n   *  implementation to do its own merging. */\n  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    for (String field : fields) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms.iterator(null));\n      }\n    }\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","3cc749c053615f5871f3b95715fe292f34e70a53","0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","sourceNew":null,"sourceOld":"  /** Called during merging to merge all {@link Fields} from\n   *  sub-readers.  This must recurse to merge all postings\n   *  (terms, docs, positions, etc.).  A {@link\n   *  PostingsFormat} can override this default\n   *  implementation to do its own merging. */\n  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    for (String field : fields) {\n      FieldInfo info = mergeState.fieldInfos.fieldInfo(field);\n      assert info != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(info);\n        termsConsumer.merge(mergeState, info.getIndexOptions(), terms.iterator(null));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"519435fc0d6082a1b8081f9492b714f716877437":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["519435fc0d6082a1b8081f9492b714f716877437","6de04d4fe93277012dfab5984e08a38de091bcd1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6de04d4fe93277012dfab5984e08a38de091bcd1":["519435fc0d6082a1b8081f9492b714f716877437"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"]},"commit2Childs":{"519435fc0d6082a1b8081f9492b714f716877437":["d4d69c535930b5cce125cff868d40f6373dc27d4","6de04d4fe93277012dfab5984e08a38de091bcd1"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["519435fc0d6082a1b8081f9492b714f716877437","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fb07ab105350b80ed9d63ca64b117084ed7391bc","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"6de04d4fe93277012dfab5984e08a38de091bcd1":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}