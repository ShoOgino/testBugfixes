{"path":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<String,Directory>();\n    for (String name : names) {\n      File dir = _TestUtil.getTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      _TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<String,Directory>();\n    for (String name : names) {\n      File dir = _TestUtil.getTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      _TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"624d2da1aed2d2415a83f3c573de0341c4001d90","date":1390407250,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    assertFalse(\"test infra is broken!\", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);\n    List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<String,Directory>();\n    for (String name : names) {\n      File dir = _TestUtil.getTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      _TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<String,Directory>();\n    for (String name : names) {\n      File dir = _TestUtil.getTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      _TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    assertFalse(\"test infra is broken!\", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);\n    List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<String,Directory>();\n    for (String name : names) {\n      File dir = TestUtil.getTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    assertFalse(\"test infra is broken!\", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);\n    List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<String,Directory>();\n    for (String name : names) {\n      File dir = _TestUtil.getTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      _TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    assertFalse(\"test infra is broken!\", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      File dir = TestUtil.getTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    assertFalse(\"test infra is broken!\", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);\n    List<String> names = new ArrayList<String>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<String,Directory>();\n    for (String name : names) {\n      File dir = TestUtil.getTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    assertFalse(\"test infra is broken!\", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      File dir = TestUtil.createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    assertFalse(\"test infra is broken!\", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      File dir = TestUtil.getTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    assertFalse(\"test infra is broken!\", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      File dir = createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    assertFalse(\"test infra is broken!\", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      File dir = TestUtil.createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    assertFalse(\"test infra is broken!\", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      File dir = createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    assertFalse(\"test infra is broken!\", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      File dir = TestUtil.getTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    assertFalse(\"test infra is broken!\", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      File dir = createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    assertFalse(\"test infra is broken!\", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      File dir = createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      File dir = createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    assertFalse(\"test infra is broken!\", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      File dir = createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["624d2da1aed2d2415a83f3c573de0341c4001d90"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"624d2da1aed2d2415a83f3c573de0341c4001d90":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["624d2da1aed2d2415a83f3c573de0341c4001d90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"624d2da1aed2d2415a83f3c573de0341c4001d90":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}