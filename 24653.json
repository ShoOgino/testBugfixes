{"path":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#binarySort(int,int).mjava","commits":[{"id":"d666f5b596b5ce43296739e9453ff761c7ddde3f","date":1363451610,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#binarySort(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Sorts via stable in-place BinarySort algorithm (O(n<sup>2</sup>))\n   * (ideal for small collections which are in random order). */\n  public final void binarySort(int lo, int hi) {\n    for (int i = lo + 1; i <= hi; ++i) {\n      int l = lo;\n      int h = i - 1;\n      setPivot(i);\n      while (l <= h) {\n        final int mid = (l + h) >>> 1;\n        final int cmp = comparePivot(mid);\n        if (cmp < 0) {\n          h = mid - 1;\n        } else {\n          l = mid + 1;\n        }\n      }\n      for (int j = i; j > l; --j) {\n        swap(j - 1, j);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Sorter#binarySort(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#binarySort(int,int).mjava","sourceNew":"  void binarySort(int from, int to, int i) {\n    for ( ; i < to; ++i) {\n      int l = from;\n      int h = i - 1;\n      while (l <= h) {\n        final int mid = (l + h) >>> 1;\n        final int cmp = compare(i, mid);\n        if (cmp < 0) {\n          h = mid - 1;\n        } else {\n          l = mid + 1;\n        }\n      }\n      switch (i - l) {\n      case 2:\n        swap(l + 1, l + 2);\n      case 1:\n        swap(l, l + 1);\n      case 0:\n        break;\n      default:\n        for (int j = i; j > l; --j) {\n          swap(j - 1, j);\n        }\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  /** Sorts via stable in-place BinarySort algorithm (O(n<sup>2</sup>))\n   * (ideal for small collections which are in random order). */\n  public final void binarySort(int lo, int hi) {\n    for (int i = lo + 1; i <= hi; ++i) {\n      int l = lo;\n      int h = i - 1;\n      setPivot(i);\n      while (l <= h) {\n        final int mid = (l + h) >>> 1;\n        final int cmp = comparePivot(mid);\n        if (cmp < 0) {\n          h = mid - 1;\n        } else {\n          l = mid + 1;\n        }\n      }\n      for (int j = i; j > l; --j) {\n        swap(j - 1, j);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d666f5b596b5ce43296739e9453ff761c7ddde3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["d666f5b596b5ce43296739e9453ff761c7ddde3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"]},"commit2Childs":{"d666f5b596b5ce43296739e9453ff761c7ddde3f":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d666f5b596b5ce43296739e9453ff761c7ddde3f"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}