{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testNextDocValidationForToChildBjq().mjava","commits":[{"id":"d0f8ba65dfb38d7382b9dce6751c3060db644202","date":1389780711,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testNextDocValidationForToChildBjq().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNextDocValidationForToChildBjq() throws Exception {\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(getRandomChildNumber(0));\n\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, false);\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE);\n    indexSearcher.search(blockJoinQuery, 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testNextDocValidationForToChildBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testNextDocValidationForToChildBjq().mjava","sourceNew":"  @Test\n  public void testNextDocValidationForToChildBjq() throws Exception {\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(getRandomChildNumber(0));\n\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter);\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE);\n    indexSearcher.search(blockJoinQuery, 1);\n  }\n\n","sourceOld":"  @Test\n  public void testNextDocValidationForToChildBjq() throws Exception {\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(getRandomChildNumber(0));\n\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter, false);\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE);\n    indexSearcher.search(blockJoinQuery, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b","date":1425145569,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testNextDocValidationForToChildBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testNextDocValidationForToChildBjq().mjava","sourceNew":"  public void testNextDocValidationForToChildBjq() throws Exception {\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(getRandomChildNumber(0));\n\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter);\n    \n    try {\n      indexSearcher.search(blockJoinQuery, 1);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNextDocValidationForToChildBjq() throws Exception {\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(getRandomChildNumber(0));\n\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter);\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE);\n    indexSearcher.search(blockJoinQuery, 1);\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testNextDocValidationForToChildBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testNextDocValidationForToChildBjq().mjava","sourceNew":"  public void testNextDocValidationForToChildBjq() throws Exception {\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(getRandomChildNumber(0));\n\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter);\n    \n    try {\n      indexSearcher.search(blockJoinQuery, 1);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testNextDocValidationForToChildBjq() throws Exception {\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(getRandomChildNumber(0));\n\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter);\n    thrown.expect(IllegalStateException.class);\n    thrown.expectMessage(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE);\n    indexSearcher.search(blockJoinQuery, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testNextDocValidationForToChildBjq().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinValidation#testNextDocValidationForToChildBjq().mjava","sourceNew":"  public void testNextDocValidationForToChildBjq() throws Exception {\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(getRandomChildNumber(0));\n\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter);\n    \n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      indexSearcher.search(blockJoinQuery, 1);\n    });\n    assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n  }\n\n","sourceOld":"  public void testNextDocValidationForToChildBjq() throws Exception {\n    Query parentQueryWithRandomChild = createParentsQueryWithOneChild(getRandomChildNumber(0));\n\n    ToChildBlockJoinQuery blockJoinQuery = new ToChildBlockJoinQuery(parentQueryWithRandomChild, parentsFilter);\n    \n    try {\n      indexSearcher.search(blockJoinQuery, 1);\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException expected) {\n      assertTrue(expected.getMessage() != null && expected.getMessage().contains(ToChildBlockJoinQuery.INVALID_QUERY_MESSAGE));\n    }\n  }\n\n","bugFix":["3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["d0f8ba65dfb38d7382b9dce6751c3060db644202"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fb17639909a369c1e64866842e5c213440acc17e","3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b"],"3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b":["fb17639909a369c1e64866842e5c213440acc17e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b"],"d0f8ba65dfb38d7382b9dce6751c3060db644202":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"3dbc407f6ba5fb9ec1f6a3126792363cedc0f51b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0f8ba65dfb38d7382b9dce6751c3060db644202"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0f8ba65dfb38d7382b9dce6751c3060db644202":["fb17639909a369c1e64866842e5c213440acc17e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}