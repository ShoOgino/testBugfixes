{"path":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(ReaderContext).mjava","commits":[{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(ReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(IndexReader).mjava","sourceNew":"  @Override\n  public synchronized DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n\n    final int saveMissCount = missCount;\n    DocIdSet docIdSet = super.getDocIdSet(context);\n\n    if (shouldHaveCache) {\n      Assert.assertEquals(\"Cache should have data \", saveMissCount, missCount);\n    } else {\n      Assert.assertTrue(\"Cache should be null \" + docIdSet, missCount > saveMissCount);\n    }\n\n    return docIdSet;\n  }\n\n","sourceOld":"  @Override\n  public synchronized DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n\n    final int saveMissCount = missCount;\n    DocIdSet docIdSet = super.getDocIdSet(reader);\n\n    if (shouldHaveCache) {\n      Assert.assertEquals(\"Cache should have data \", saveMissCount, missCount);\n    } else {\n      Assert.assertTrue(\"Cache should be null \" + docIdSet, missCount > saveMissCount);\n    }\n\n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CachingWrapperFilterHelper#getDocIdSet(ReaderContext).mjava","sourceNew":"  @Override\n  public synchronized DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n\n    final int saveMissCount = missCount;\n    DocIdSet docIdSet = super.getDocIdSet(context);\n\n    if (shouldHaveCache) {\n      Assert.assertEquals(\"Cache should have data \", saveMissCount, missCount);\n    } else {\n      Assert.assertTrue(\"Cache should be null \" + docIdSet, missCount > saveMissCount);\n    }\n\n    return docIdSet;\n  }\n\n","sourceOld":"  @Override\n  public synchronized DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n\n    final int saveMissCount = missCount;\n    DocIdSet docIdSet = super.getDocIdSet(context);\n\n    if (shouldHaveCache) {\n      Assert.assertEquals(\"Cache should have data \", saveMissCount, missCount);\n    } else {\n      Assert.assertTrue(\"Cache should be null \" + docIdSet, missCount > saveMissCount);\n    }\n\n    return docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"]},"commit2Childs":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}