{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#readNodeData(boolean).mjava","commits":[{"id":"c0e7448656541edc407546460641f47950451b16","date":1519150500,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#readNodeData(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.PackedIndexTree#readNodeData(boolean).mjava","sourceNew":"    private void readNodeData(boolean isLeft) {\n\n      leafBlockFPStack[level] = leafBlockFPStack[level-1];\n\n      // read leaf block FP delta\n      if (isLeft == false) {\n        leafBlockFPStack[level] += in.readVLong();\n      }\n\n      if (isLeafNode()) {\n        splitDim = -1;\n      } else {\n\n        // read split dim, prefix, firstDiffByteDelta encoded as int:\n        int code = in.readVInt();\n        splitDim = code % numDims;\n        splitDims[level] = splitDim;\n        code /= numDims;\n        int prefix = code % (1+bytesPerDim);\n        int suffix = bytesPerDim - prefix;\n\n        if (splitValuesStack[level] == null) {\n          splitValuesStack[level] = new byte[packedBytesLength];\n        }\n        System.arraycopy(splitValuesStack[level-1], 0, splitValuesStack[level], 0, packedBytesLength);\n        if (suffix > 0) {\n          int firstDiffByteDelta = code / (1+bytesPerDim);\n          if (negativeDeltas[level*numDims + splitDim]) {\n            firstDiffByteDelta = -firstDiffByteDelta;\n          }\n          int oldByte = splitValuesStack[level][splitDim*bytesPerDim+prefix] & 0xFF;\n          splitValuesStack[level][splitDim*bytesPerDim+prefix] = (byte) (oldByte + firstDiffByteDelta);\n          in.readBytes(splitValuesStack[level], splitDim*bytesPerDim+prefix+1, suffix-1);\n        } else {\n          // our split value is == last split value in this dim, which can happen when there are many duplicate values\n        }\n\n        int leftNumBytes;\n        if (nodeID * 2 < leafNodeOffset) {\n          leftNumBytes = in.readVInt();\n        } else {\n          leftNumBytes = 0;\n        }\n\n        leftNodePositions[level] = in.getPosition();\n        rightNodePositions[level] = leftNodePositions[level] + leftNumBytes;\n      }\n    }\n\n","sourceOld":"    private void readNodeData(boolean isLeft) {\n\n      leafBlockFPStack[level] = leafBlockFPStack[level-1];\n\n      // read leaf block FP delta\n      if (isLeft == false) {\n        leafBlockFPStack[level] += in.readVLong();\n      }\n\n      if (isLeafNode()) {\n        splitDim = -1;\n      } else {\n\n        // read split dim, prefix, firstDiffByteDelta encoded as int:\n        int code = in.readVInt();\n        splitDim = code % numDims;\n        splitDims[level] = splitDim;\n        code /= numDims;\n        int prefix = code % (1+bytesPerDim);\n        int suffix = bytesPerDim - prefix;\n\n        if (splitValuesStack[level] == null) {\n          splitValuesStack[level] = new byte[packedBytesLength];\n        }\n        System.arraycopy(splitValuesStack[level-1], 0, splitValuesStack[level], 0, packedBytesLength);\n        if (suffix > 0) {\n          int firstDiffByteDelta = code / (1+bytesPerDim);\n          if (negativeDeltas[level*numDims + splitDim]) {\n            firstDiffByteDelta = -firstDiffByteDelta;\n          }\n          int oldByte = splitValuesStack[level][splitDim*bytesPerDim+prefix] & 0xFF;\n          splitValuesStack[level][splitDim*bytesPerDim+prefix] = (byte) (oldByte + firstDiffByteDelta);\n          in.readBytes(splitValuesStack[level], splitDim*bytesPerDim+prefix+1, suffix-1);\n        } else {\n          // our split value is == last split value in this dim, which can happen when there are many duplicate values\n        }\n\n        int leftNumBytes;\n        if (nodeID * 2 < leafNodeOffset) {\n          leftNumBytes = in.readVInt();\n        } else {\n          leftNumBytes = 0;\n        }\n\n        leftNodePositions[level] = in.getPosition();\n        rightNodePositions[level] = leftNodePositions[level] + leftNumBytes;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#readNodeData(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#readNodeData(boolean).mjava","sourceNew":"    private void readNodeData(boolean isLeft) {\n\n      leafBlockFPStack[level] = leafBlockFPStack[level-1];\n\n      // read leaf block FP delta\n      if (isLeft == false) {\n        leafBlockFPStack[level] += in.readVLong();\n      }\n\n      if (isLeafNode()) {\n        splitDim = -1;\n      } else {\n\n        // read split dim, prefix, firstDiffByteDelta encoded as int:\n        int code = in.readVInt();\n        splitDim = code % numIndexDims;\n        splitDims[level] = splitDim;\n        code /= numIndexDims;\n        int prefix = code % (1+bytesPerDim);\n        int suffix = bytesPerDim - prefix;\n\n        if (splitValuesStack[level] == null) {\n          splitValuesStack[level] = new byte[packedIndexBytesLength];\n        }\n        System.arraycopy(splitValuesStack[level-1], 0, splitValuesStack[level], 0, packedIndexBytesLength);\n        if (suffix > 0) {\n          int firstDiffByteDelta = code / (1+bytesPerDim);\n          if (negativeDeltas[level*numIndexDims + splitDim]) {\n            firstDiffByteDelta = -firstDiffByteDelta;\n          }\n          int oldByte = splitValuesStack[level][splitDim*bytesPerDim+prefix] & 0xFF;\n          splitValuesStack[level][splitDim*bytesPerDim+prefix] = (byte) (oldByte + firstDiffByteDelta);\n          in.readBytes(splitValuesStack[level], splitDim*bytesPerDim+prefix+1, suffix-1);\n        } else {\n          // our split value is == last split value in this dim, which can happen when there are many duplicate values\n        }\n\n        int leftNumBytes;\n        if (nodeID * 2 < leafNodeOffset) {\n          leftNumBytes = in.readVInt();\n        } else {\n          leftNumBytes = 0;\n        }\n\n        leftNodePositions[level] = in.getPosition();\n        rightNodePositions[level] = leftNodePositions[level] + leftNumBytes;\n      }\n    }\n\n","sourceOld":"    private void readNodeData(boolean isLeft) {\n\n      leafBlockFPStack[level] = leafBlockFPStack[level-1];\n\n      // read leaf block FP delta\n      if (isLeft == false) {\n        leafBlockFPStack[level] += in.readVLong();\n      }\n\n      if (isLeafNode()) {\n        splitDim = -1;\n      } else {\n\n        // read split dim, prefix, firstDiffByteDelta encoded as int:\n        int code = in.readVInt();\n        splitDim = code % numDims;\n        splitDims[level] = splitDim;\n        code /= numDims;\n        int prefix = code % (1+bytesPerDim);\n        int suffix = bytesPerDim - prefix;\n\n        if (splitValuesStack[level] == null) {\n          splitValuesStack[level] = new byte[packedBytesLength];\n        }\n        System.arraycopy(splitValuesStack[level-1], 0, splitValuesStack[level], 0, packedBytesLength);\n        if (suffix > 0) {\n          int firstDiffByteDelta = code / (1+bytesPerDim);\n          if (negativeDeltas[level*numDims + splitDim]) {\n            firstDiffByteDelta = -firstDiffByteDelta;\n          }\n          int oldByte = splitValuesStack[level][splitDim*bytesPerDim+prefix] & 0xFF;\n          splitValuesStack[level][splitDim*bytesPerDim+prefix] = (byte) (oldByte + firstDiffByteDelta);\n          in.readBytes(splitValuesStack[level], splitDim*bytesPerDim+prefix+1, suffix-1);\n        } else {\n          // our split value is == last split value in this dim, which can happen when there are many duplicate values\n        }\n\n        int leftNumBytes;\n        if (nodeID * 2 < leafNodeOffset) {\n          leftNumBytes = in.readVInt();\n        } else {\n          leftNumBytes = 0;\n        }\n\n        leftNodePositions[level] = in.getPosition();\n        rightNodePositions[level] = leftNodePositions[level] + leftNumBytes;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbc55bb1f9b4422860b0f903e6af8082280e7b72","date":1571986943,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#readNodeData(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#readNodeData(boolean).mjava","sourceNew":"    private void readNodeData(boolean isLeft) {\n      try {\n        leafBlockFPStack[level] = leafBlockFPStack[level - 1];\n\n        // read leaf block FP delta\n        if (isLeft == false) {\n          leafBlockFPStack[level] += in.readVLong();\n        }\n\n        if (isLeafNode()) {\n          splitDim = -1;\n        } else {\n\n          // read split dim, prefix, firstDiffByteDelta encoded as int:\n          int code = in.readVInt();\n          splitDim = code % numIndexDims;\n          splitDims[level] = splitDim;\n          code /= numIndexDims;\n          int prefix = code % (1 + bytesPerDim);\n          int suffix = bytesPerDim - prefix;\n\n          if (splitValuesStack[level] == null) {\n            splitValuesStack[level] = new byte[packedIndexBytesLength];\n          }\n          System.arraycopy(splitValuesStack[level - 1], 0, splitValuesStack[level], 0, packedIndexBytesLength);\n          if (suffix > 0) {\n            int firstDiffByteDelta = code / (1 + bytesPerDim);\n            if (negativeDeltas[level * numIndexDims + splitDim]) {\n              firstDiffByteDelta = -firstDiffByteDelta;\n            }\n            int oldByte = splitValuesStack[level][splitDim * bytesPerDim + prefix] & 0xFF;\n            splitValuesStack[level][splitDim * bytesPerDim + prefix] = (byte) (oldByte + firstDiffByteDelta);\n            in.readBytes(splitValuesStack[level], splitDim * bytesPerDim + prefix + 1, suffix - 1);\n          } else {\n            // our split value is == last split value in this dim, which can happen when there are many duplicate values\n          }\n\n          int leftNumBytes;\n          if (nodeID * 2 < leafNodeOffset) {\n            leftNumBytes = in.readVInt();\n          } else {\n            leftNumBytes = 0;\n          }\n\n          leftNodePositions[level] = in.getPosition();\n          rightNodePositions[level] = leftNodePositions[level] + leftNumBytes;\n        }\n      } catch (IOException e) {\n        throw new UncheckedIOException(e);\n      }\n    }\n\n","sourceOld":"    private void readNodeData(boolean isLeft) {\n\n      leafBlockFPStack[level] = leafBlockFPStack[level-1];\n\n      // read leaf block FP delta\n      if (isLeft == false) {\n        leafBlockFPStack[level] += in.readVLong();\n      }\n\n      if (isLeafNode()) {\n        splitDim = -1;\n      } else {\n\n        // read split dim, prefix, firstDiffByteDelta encoded as int:\n        int code = in.readVInt();\n        splitDim = code % numIndexDims;\n        splitDims[level] = splitDim;\n        code /= numIndexDims;\n        int prefix = code % (1+bytesPerDim);\n        int suffix = bytesPerDim - prefix;\n\n        if (splitValuesStack[level] == null) {\n          splitValuesStack[level] = new byte[packedIndexBytesLength];\n        }\n        System.arraycopy(splitValuesStack[level-1], 0, splitValuesStack[level], 0, packedIndexBytesLength);\n        if (suffix > 0) {\n          int firstDiffByteDelta = code / (1+bytesPerDim);\n          if (negativeDeltas[level*numIndexDims + splitDim]) {\n            firstDiffByteDelta = -firstDiffByteDelta;\n          }\n          int oldByte = splitValuesStack[level][splitDim*bytesPerDim+prefix] & 0xFF;\n          splitValuesStack[level][splitDim*bytesPerDim+prefix] = (byte) (oldByte + firstDiffByteDelta);\n          in.readBytes(splitValuesStack[level], splitDim*bytesPerDim+prefix+1, suffix-1);\n        } else {\n          // our split value is == last split value in this dim, which can happen when there are many duplicate values\n        }\n\n        int leftNumBytes;\n        if (nodeID * 2 < leafNodeOffset) {\n          leftNumBytes = in.readVInt();\n        } else {\n          leftNumBytes = 0;\n        }\n\n        leftNodePositions[level] = in.getPosition();\n        rightNodePositions[level] = leftNodePositions[level] + leftNumBytes;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6b1fd50f847900ca47783ea832846d60e81f990","date":1591769592,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#readNodeData(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#readNodeData(boolean).mjava","sourceNew":"    private void readNodeData(boolean isLeft) {\n      if (splitPackedValueStack[level] == null) {\n        splitPackedValueStack[level] = new byte[packedIndexBytesLength];\n      }\n      System.arraycopy(negativeDeltas, (level-1)*numIndexDims, negativeDeltas, level*numIndexDims, numIndexDims);\n      assert splitDim != -1;\n      negativeDeltas[level*numIndexDims+splitDim] = isLeft;\n\n      try {\n        leafBlockFPStack[level] = leafBlockFPStack[level - 1];\n\n        // read leaf block FP delta\n        if (isLeft == false) {\n          leafBlockFPStack[level] += in.readVLong();\n        }\n\n        if (isLeafNode()) {\n          splitDim = -1;\n        } else {\n\n          // read split dim, prefix, firstDiffByteDelta encoded as int:\n          int code = in.readVInt();\n          splitDim = code % numIndexDims;\n          splitDims[level] = splitDim;\n          code /= numIndexDims;\n          int prefix = code % (1 + bytesPerDim);\n          int suffix = bytesPerDim - prefix;\n\n          if (splitValuesStack[level] == null) {\n            splitValuesStack[level] = new byte[packedIndexBytesLength];\n          }\n          System.arraycopy(splitValuesStack[level - 1], 0, splitValuesStack[level], 0, packedIndexBytesLength);\n          if (suffix > 0) {\n            int firstDiffByteDelta = code / (1 + bytesPerDim);\n            if (negativeDeltas[level * numIndexDims + splitDim]) {\n              firstDiffByteDelta = -firstDiffByteDelta;\n            }\n            int oldByte = splitValuesStack[level][splitDim * bytesPerDim + prefix] & 0xFF;\n            splitValuesStack[level][splitDim * bytesPerDim + prefix] = (byte) (oldByte + firstDiffByteDelta);\n            in.readBytes(splitValuesStack[level], splitDim * bytesPerDim + prefix + 1, suffix - 1);\n          } else {\n            // our split value is == last split value in this dim, which can happen when there are many duplicate values\n          }\n\n          int leftNumBytes;\n          if (nodeID * 2 < leafNodeOffset) {\n            leftNumBytes = in.readVInt();\n          } else {\n            leftNumBytes = 0;\n          }\n          rightNodePositions[level] = Math.toIntExact(in.getFilePointer()) + leftNumBytes;\n        }\n      } catch (IOException e) {\n        throw new UncheckedIOException(e);\n      }\n    }\n\n","sourceOld":"    private void readNodeData(boolean isLeft) {\n      try {\n        leafBlockFPStack[level] = leafBlockFPStack[level - 1];\n\n        // read leaf block FP delta\n        if (isLeft == false) {\n          leafBlockFPStack[level] += in.readVLong();\n        }\n\n        if (isLeafNode()) {\n          splitDim = -1;\n        } else {\n\n          // read split dim, prefix, firstDiffByteDelta encoded as int:\n          int code = in.readVInt();\n          splitDim = code % numIndexDims;\n          splitDims[level] = splitDim;\n          code /= numIndexDims;\n          int prefix = code % (1 + bytesPerDim);\n          int suffix = bytesPerDim - prefix;\n\n          if (splitValuesStack[level] == null) {\n            splitValuesStack[level] = new byte[packedIndexBytesLength];\n          }\n          System.arraycopy(splitValuesStack[level - 1], 0, splitValuesStack[level], 0, packedIndexBytesLength);\n          if (suffix > 0) {\n            int firstDiffByteDelta = code / (1 + bytesPerDim);\n            if (negativeDeltas[level * numIndexDims + splitDim]) {\n              firstDiffByteDelta = -firstDiffByteDelta;\n            }\n            int oldByte = splitValuesStack[level][splitDim * bytesPerDim + prefix] & 0xFF;\n            splitValuesStack[level][splitDim * bytesPerDim + prefix] = (byte) (oldByte + firstDiffByteDelta);\n            in.readBytes(splitValuesStack[level], splitDim * bytesPerDim + prefix + 1, suffix - 1);\n          } else {\n            // our split value is == last split value in this dim, which can happen when there are many duplicate values\n          }\n\n          int leftNumBytes;\n          if (nodeID * 2 < leafNodeOffset) {\n            leftNumBytes = in.readVInt();\n          } else {\n            leftNumBytes = 0;\n          }\n\n          leftNodePositions[level] = in.getPosition();\n          rightNodePositions[level] = leftNodePositions[level] + leftNumBytes;\n        }\n      } catch (IOException e) {\n        throw new UncheckedIOException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#readNodeData(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.IndexTree#readNodeData(boolean).mjava","sourceNew":"    private void readNodeData(boolean isLeft) {\n      if (splitPackedValueStack[level] == null) {\n        splitPackedValueStack[level] = new byte[config.packedIndexBytesLength];\n      }\n      System.arraycopy(negativeDeltas, (level-1)*config.numIndexDims, negativeDeltas, level*config.numIndexDims, config.numIndexDims);\n      assert splitDim != -1;\n      negativeDeltas[level*config.numIndexDims+splitDim] = isLeft;\n\n      try {\n        leafBlockFPStack[level] = leafBlockFPStack[level - 1];\n\n        // read leaf block FP delta\n        if (isLeft == false) {\n          leafBlockFPStack[level] += in.readVLong();\n        }\n\n        if (isLeafNode()) {\n          splitDim = -1;\n        } else {\n\n          // read split dim, prefix, firstDiffByteDelta encoded as int:\n          int code = in.readVInt();\n          splitDim = code % config.numIndexDims;\n          splitDims[level] = splitDim;\n          code /= config.numIndexDims;\n          int prefix = code % (1 + config.bytesPerDim);\n          int suffix = config.bytesPerDim - prefix;\n\n          if (splitValuesStack[level] == null) {\n            splitValuesStack[level] = new byte[config.packedIndexBytesLength];\n          }\n          System.arraycopy(splitValuesStack[level - 1], 0, splitValuesStack[level], 0, config.packedIndexBytesLength);\n          if (suffix > 0) {\n            int firstDiffByteDelta = code / (1 + config.bytesPerDim);\n            if (negativeDeltas[level * config.numIndexDims + splitDim]) {\n              firstDiffByteDelta = -firstDiffByteDelta;\n            }\n            int oldByte = splitValuesStack[level][splitDim * config.bytesPerDim + prefix] & 0xFF;\n            splitValuesStack[level][splitDim * config.bytesPerDim + prefix] = (byte) (oldByte + firstDiffByteDelta);\n            in.readBytes(splitValuesStack[level], splitDim * config.bytesPerDim + prefix + 1, suffix - 1);\n          } else {\n            // our split value is == last split value in this dim, which can happen when there are many duplicate values\n          }\n\n          int leftNumBytes;\n          if (nodeID * 2 < leafNodeOffset) {\n            leftNumBytes = in.readVInt();\n          } else {\n            leftNumBytes = 0;\n          }\n          rightNodePositions[level] = Math.toIntExact(in.getFilePointer()) + leftNumBytes;\n        }\n      } catch (IOException e) {\n        throw new UncheckedIOException(e);\n      }\n    }\n\n","sourceOld":"    private void readNodeData(boolean isLeft) {\n      if (splitPackedValueStack[level] == null) {\n        splitPackedValueStack[level] = new byte[packedIndexBytesLength];\n      }\n      System.arraycopy(negativeDeltas, (level-1)*numIndexDims, negativeDeltas, level*numIndexDims, numIndexDims);\n      assert splitDim != -1;\n      negativeDeltas[level*numIndexDims+splitDim] = isLeft;\n\n      try {\n        leafBlockFPStack[level] = leafBlockFPStack[level - 1];\n\n        // read leaf block FP delta\n        if (isLeft == false) {\n          leafBlockFPStack[level] += in.readVLong();\n        }\n\n        if (isLeafNode()) {\n          splitDim = -1;\n        } else {\n\n          // read split dim, prefix, firstDiffByteDelta encoded as int:\n          int code = in.readVInt();\n          splitDim = code % numIndexDims;\n          splitDims[level] = splitDim;\n          code /= numIndexDims;\n          int prefix = code % (1 + bytesPerDim);\n          int suffix = bytesPerDim - prefix;\n\n          if (splitValuesStack[level] == null) {\n            splitValuesStack[level] = new byte[packedIndexBytesLength];\n          }\n          System.arraycopy(splitValuesStack[level - 1], 0, splitValuesStack[level], 0, packedIndexBytesLength);\n          if (suffix > 0) {\n            int firstDiffByteDelta = code / (1 + bytesPerDim);\n            if (negativeDeltas[level * numIndexDims + splitDim]) {\n              firstDiffByteDelta = -firstDiffByteDelta;\n            }\n            int oldByte = splitValuesStack[level][splitDim * bytesPerDim + prefix] & 0xFF;\n            splitValuesStack[level][splitDim * bytesPerDim + prefix] = (byte) (oldByte + firstDiffByteDelta);\n            in.readBytes(splitValuesStack[level], splitDim * bytesPerDim + prefix + 1, suffix - 1);\n          } else {\n            // our split value is == last split value in this dim, which can happen when there are many duplicate values\n          }\n\n          int leftNumBytes;\n          if (nodeID * 2 < leafNodeOffset) {\n            leftNumBytes = in.readVInt();\n          } else {\n            leftNumBytes = 0;\n          }\n          rightNodePositions[level] = Math.toIntExact(in.getFilePointer()) + leftNumBytes;\n        }\n      } catch (IOException e) {\n        throw new UncheckedIOException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0e7448656541edc407546460641f47950451b16":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cbc55bb1f9b4422860b0f903e6af8082280e7b72":["f6652c943595e92c187ee904c382863013eae28f"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["d6b1fd50f847900ca47783ea832846d60e81f990"],"f6652c943595e92c187ee904c382863013eae28f":["c0e7448656541edc407546460641f47950451b16"],"d6b1fd50f847900ca47783ea832846d60e81f990":["cbc55bb1f9b4422860b0f903e6af8082280e7b72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"c0e7448656541edc407546460641f47950451b16":["f6652c943595e92c187ee904c382863013eae28f"],"cbc55bb1f9b4422860b0f903e6af8082280e7b72":["d6b1fd50f847900ca47783ea832846d60e81f990"],"f6652c943595e92c187ee904c382863013eae28f":["cbc55bb1f9b4422860b0f903e6af8082280e7b72"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6b1fd50f847900ca47783ea832846d60e81f990":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0e7448656541edc407546460641f47950451b16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}