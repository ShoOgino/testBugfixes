{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricManager,String,String,String).mjava","commits":[{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.registryName = registry;\n    this.metricManager = manager;\n    manager.registerGauge(this, registry, () -> name, tag, true, \"searcherName\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> cachingEnabled, tag, true, \"caching\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> openTime, tag, true, \"openedAt\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> warmupTime, tag, true, \"warmupTime\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> registerTime, tag, true, \"registeredAt\", Category.SEARCHER.toString(), scope);\n    // reader stats\n    manager.registerGauge(this, registry, () -> reader.numDocs(), tag, true, \"numDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc(), tag, true, \"maxDoc\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc() - reader.numDocs(), tag, true, \"deletedDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.toString(), tag, true, \"reader\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.directory().toString(), tag, true, \"readerDir\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.getVersion(), tag, true, \"indexVersion\", Category.SEARCHER.toString(), scope);\n\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n\n    manager.registerGauge(this, registry, () -> name, true, \"searcherName\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> cachingEnabled, true, \"caching\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> openTime, true, \"openedAt\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> warmupTime, true, \"warmupTime\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> registerTime, true, \"registeredAt\", Category.SEARCHER.toString(), scope);\n    // reader stats\n    manager.registerGauge(this, registry, () -> reader.numDocs(), true, \"numDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc(), true, \"maxDoc\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc() - reader.numDocs(), true, \"deletedDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.toString(), true, \"reader\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.directory().toString(), true, \"readerDir\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.getVersion(), true, \"indexVersion\", Category.SEARCHER.toString(), scope);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.registryName = registry;\n    this.metricManager = manager;\n    manager.registerGauge(this, registry, () -> name, tag, true, \"searcherName\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> cachingEnabled, tag, true, \"caching\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> openTime, tag, true, \"openedAt\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> warmupTime, tag, true, \"warmupTime\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> registerTime, tag, true, \"registeredAt\", Category.SEARCHER.toString(), scope);\n    // reader stats\n    manager.registerGauge(this, registry, () -> reader.numDocs(), tag, true, \"numDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc(), tag, true, \"maxDoc\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc() - reader.numDocs(), tag, true, \"deletedDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.toString(), tag, true, \"reader\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.directory().toString(), tag, true, \"readerDir\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.getVersion(), tag, true, \"indexVersion\", Category.SEARCHER.toString(), scope);\n\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n\n    manager.registerGauge(this, registry, () -> name, true, \"searcherName\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> cachingEnabled, true, \"caching\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> openTime, true, \"openedAt\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> warmupTime, true, \"warmupTime\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> registerTime, true, \"registeredAt\", Category.SEARCHER.toString(), scope);\n    // reader stats\n    manager.registerGauge(this, registry, () -> reader.numDocs(), true, \"numDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc(), true, \"maxDoc\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc() - reader.numDocs(), true, \"deletedDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.toString(), true, \"reader\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.directory().toString(), true, \"readerDir\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.getVersion(), true, \"indexVersion\", Category.SEARCHER.toString(), scope);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d80c1ad9241ae005a167d7ee8ac473601b0e57c","date":1559036097,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.registryName = registry;\n    this.metricManager = manager;\n    manager.registerGauge(this, registry, () -> name, tag, true, \"searcherName\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> cachingEnabled, tag, true, \"caching\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> openTime, tag, true, \"openedAt\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> warmupTime, tag, true, \"warmupTime\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> registerTime, tag, true, \"registeredAt\", Category.SEARCHER.toString(), scope);\n    // reader stats\n    manager.registerGauge(this, registry, () -> reader.numDocs(), tag, true, \"numDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc(), tag, true, \"maxDoc\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc() - reader.numDocs(), tag, true, \"deletedDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.toString(), tag, true, \"reader\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.directory().toString(), tag, true, \"readerDir\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.getVersion(), tag, true, \"indexVersion\", Category.SEARCHER.toString(), scope);\n    // size of the currently opened commit\n    manager.registerGauge(this, registry, () -> {\n      try {\n        Collection<String> files = reader.getIndexCommit().getFileNames();\n        long total = 0;\n        for (String file : files) {\n          total += DirectoryFactory.sizeOf(reader.directory(), file);\n        }\n        return total;\n      } catch (Exception e) {\n        return -1;\n      }\n    }, tag, true, \"indexCommitSize\", Category.SEARCHER.toString(), scope);\n\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.registryName = registry;\n    this.metricManager = manager;\n    manager.registerGauge(this, registry, () -> name, tag, true, \"searcherName\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> cachingEnabled, tag, true, \"caching\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> openTime, tag, true, \"openedAt\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> warmupTime, tag, true, \"warmupTime\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> registerTime, tag, true, \"registeredAt\", Category.SEARCHER.toString(), scope);\n    // reader stats\n    manager.registerGauge(this, registry, () -> reader.numDocs(), tag, true, \"numDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc(), tag, true, \"maxDoc\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc() - reader.numDocs(), tag, true, \"deletedDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.toString(), tag, true, \"reader\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.directory().toString(), tag, true, \"readerDir\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.getVersion(), tag, true, \"indexVersion\", Category.SEARCHER.toString(), scope);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df72a23fb74bebe914e3f3972063a884327c0436","date":1570470832,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.registryName = registry;\n    this.metricManager = manager;\n    manager.registerGauge(this, registry, () -> name, tag, true, \"searcherName\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> cachingEnabled, tag, true, \"caching\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> openTime, tag, true, \"openedAt\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> warmupTime, tag, true, \"warmupTime\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> registerTime, tag, true, \"registeredAt\", Category.SEARCHER.toString(), scope);\n    // reader stats\n    manager.registerGauge(this, registry, () -> reader.numDocs(), tag, true, \"numDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc(), tag, true, \"maxDoc\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc() - reader.numDocs(), tag, true, \"deletedDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.toString(), tag, true, \"reader\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.directory().toString(), tag, true, \"readerDir\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.getVersion(), tag, true, \"indexVersion\", Category.SEARCHER.toString(), scope);\n    // size of the currently opened commit\n    manager.registerGauge(this, registry, () -> {\n      try {\n        Collection<String> files = reader.getIndexCommit().getFileNames();\n        long total = 0;\n        for (String file : files) {\n          total += DirectoryFactory.sizeOf(reader.directory(), file);\n        }\n        return total;\n      } catch (Exception e) {\n        return -1;\n      }\n    }, tag, true, \"indexCommitSize\", Category.SEARCHER.toString(), scope);\n    // statsCache metrics\n    manager.registerGauge(this, registry,\n        new MetricsMap((detailed, map) -> {\n          statsCache.getCacheMetrics().getSnapshot(map::put);\n          map.put(\"statsCacheImpl\", statsCache.getClass().getSimpleName());\n        }),\n        tag, true, \"statsCache\", Category.CACHE.toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.registryName = registry;\n    this.metricManager = manager;\n    manager.registerGauge(this, registry, () -> name, tag, true, \"searcherName\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> cachingEnabled, tag, true, \"caching\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> openTime, tag, true, \"openedAt\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> warmupTime, tag, true, \"warmupTime\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> registerTime, tag, true, \"registeredAt\", Category.SEARCHER.toString(), scope);\n    // reader stats\n    manager.registerGauge(this, registry, () -> reader.numDocs(), tag, true, \"numDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc(), tag, true, \"maxDoc\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc() - reader.numDocs(), tag, true, \"deletedDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.toString(), tag, true, \"reader\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.directory().toString(), tag, true, \"readerDir\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.getVersion(), tag, true, \"indexVersion\", Category.SEARCHER.toString(), scope);\n    // size of the currently opened commit\n    manager.registerGauge(this, registry, () -> {\n      try {\n        Collection<String> files = reader.getIndexCommit().getFileNames();\n        long total = 0;\n        for (String file : files) {\n          total += DirectoryFactory.sizeOf(reader.directory(), file);\n        }\n        return total;\n      } catch (Exception e) {\n        return -1;\n      }\n    }, tag, true, \"indexCommitSize\", Category.SEARCHER.toString(), scope);\n\n  }\n\n","bugFix":["bfc52860e6d13d034226a760813c59d984c6817a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.registryName = registry;\n    this.metricManager = manager;\n    manager.registerGauge(this, registry, () -> name, tag, true, \"searcherName\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> cachingEnabled, tag, true, \"caching\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> openTime, tag, true, \"openedAt\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> warmupTime, tag, true, \"warmupTime\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> registerTime, tag, true, \"registeredAt\", Category.SEARCHER.toString(), scope);\n    // reader stats\n    manager.registerGauge(this, registry, () -> reader.numDocs(), tag, true, \"numDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc(), tag, true, \"maxDoc\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc() - reader.numDocs(), tag, true, \"deletedDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.toString(), tag, true, \"reader\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.directory().toString(), tag, true, \"readerDir\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.getVersion(), tag, true, \"indexVersion\", Category.SEARCHER.toString(), scope);\n    // size of the currently opened commit\n    manager.registerGauge(this, registry, () -> {\n      try {\n        Collection<String> files = reader.getIndexCommit().getFileNames();\n        long total = 0;\n        for (String file : files) {\n          total += DirectoryFactory.sizeOf(reader.directory(), file);\n        }\n        return total;\n      } catch (Exception e) {\n        return -1;\n      }\n    }, tag, true, \"indexCommitSize\", Category.SEARCHER.toString(), scope);\n    // statsCache metrics\n    manager.registerGauge(this, registry,\n        new MetricsMap((detailed, map) -> {\n          statsCache.getCacheMetrics().getSnapshot(map::put);\n          map.put(\"statsCacheImpl\", statsCache.getClass().getSimpleName());\n        }),\n        tag, true, \"statsCache\", Category.CACHE.toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.registryName = registry;\n    this.metricManager = manager;\n    manager.registerGauge(this, registry, () -> name, tag, true, \"searcherName\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> cachingEnabled, tag, true, \"caching\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> openTime, tag, true, \"openedAt\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> warmupTime, tag, true, \"warmupTime\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> registerTime, tag, true, \"registeredAt\", Category.SEARCHER.toString(), scope);\n    // reader stats\n    manager.registerGauge(this, registry, () -> reader.numDocs(), tag, true, \"numDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc(), tag, true, \"maxDoc\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc() - reader.numDocs(), tag, true, \"deletedDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.toString(), tag, true, \"reader\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.directory().toString(), tag, true, \"readerDir\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.getVersion(), tag, true, \"indexVersion\", Category.SEARCHER.toString(), scope);\n    // size of the currently opened commit\n    manager.registerGauge(this, registry, () -> {\n      try {\n        Collection<String> files = reader.getIndexCommit().getFileNames();\n        long total = 0;\n        for (String file : files) {\n          total += DirectoryFactory.sizeOf(reader.directory(), file);\n        }\n        return total;\n      } catch (Exception e) {\n        return -1;\n      }\n    }, tag, true, \"indexCommitSize\", Category.SEARCHER.toString(), scope);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.registryName = registry;\n    this.metricManager = manager;\n    manager.registerGauge(this, registry, () -> name, tag, true, \"searcherName\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> cachingEnabled, tag, true, \"caching\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> openTime, tag, true, \"openedAt\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> warmupTime, tag, true, \"warmupTime\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> registerTime, tag, true, \"registeredAt\", Category.SEARCHER.toString(), scope);\n    // reader stats\n    manager.registerGauge(this, registry, () -> reader.numDocs(), tag, true, \"numDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc(), tag, true, \"maxDoc\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.maxDoc() - reader.numDocs(), tag, true, \"deletedDocs\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.toString(), tag, true, \"reader\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.directory().toString(), tag, true, \"readerDir\", Category.SEARCHER.toString(), scope);\n    manager.registerGauge(this, registry, () -> reader.getVersion(), tag, true, \"indexVersion\", Category.SEARCHER.toString(), scope);\n    // size of the currently opened commit\n    manager.registerGauge(this, registry, () -> {\n      try {\n        Collection<String> files = reader.getIndexCommit().getFileNames();\n        long total = 0;\n        for (String file : files) {\n          total += DirectoryFactory.sizeOf(reader.directory(), file);\n        }\n        return total;\n      } catch (Exception e) {\n        return -1;\n      }\n    }, tag, true, \"indexCommitSize\", Category.SEARCHER.toString(), scope);\n    // statsCache metrics\n    manager.registerGauge(this, registry,\n        new MetricsMap((detailed, map) -> {\n          statsCache.getCacheMetrics().getSnapshot(map::put);\n          map.put(\"statsCacheImpl\", statsCache.getClass().getSimpleName());\n        }),\n        tag, true, \"statsCache\", Category.CACHE.toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bfc52860e6d13d034226a760813c59d984c6817a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["df72a23fb74bebe914e3f3972063a884327c0436"],"43564cbb30b064675027cfb569564e8531096e97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bfc52860e6d13d034226a760813c59d984c6817a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d80c1ad9241ae005a167d7ee8ac473601b0e57c":["43564cbb30b064675027cfb569564e8531096e97"],"df72a23fb74bebe914e3f3972063a884327c0436":["2d80c1ad9241ae005a167d7ee8ac473601b0e57c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"b0b597c65628ca9e73913a07e81691f8229bae35":["2d80c1ad9241ae005a167d7ee8ac473601b0e57c","df72a23fb74bebe914e3f3972063a884327c0436"]},"commit2Childs":{"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43564cbb30b064675027cfb569564e8531096e97":["2d80c1ad9241ae005a167d7ee8ac473601b0e57c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"2d80c1ad9241ae005a167d7ee8ac473601b0e57c":["df72a23fb74bebe914e3f3972063a884327c0436","b0b597c65628ca9e73913a07e81691f8229bae35"],"df72a23fb74bebe914e3f3972063a884327c0436":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}