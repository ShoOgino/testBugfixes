{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#doSetNextReader(AtomicReaderContext).mjava","commits":[{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#doSetNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord;\n        if (collectedGroup.groupValue == null) {\n          ord = -1;\n        } else {\n          ord = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n            int sortOrd;\n            if (collectedGroup.sortValues[i] == null) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i]);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord;\n        if (collectedGroup.groupValue == null) {\n          ord = -1;\n        } else {\n          ord = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n            int sortOrd;\n            if (collectedGroup.sortValues[i] == null) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i]);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#doSetNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord;\n        if (collectedGroup.groupValue == null) {\n          ord = -1;\n        } else {\n          ord = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n            int sortOrd;\n            if (collectedGroup.sortValues[i] == null) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i]);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord;\n        if (collectedGroup.groupValue == null) {\n          ord = -1;\n        } else {\n          ord = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n            int sortOrd;\n            if (collectedGroup.sortValues[i] == null) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i]);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#doSetNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#doSetNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = DocValues.getSorted(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = DocValues.getSorted(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord;\n        if (collectedGroup.groupValue == null) {\n          ord = -1;\n        } else {\n          ord = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n            int sortOrd;\n            if (collectedGroup.sortValues[i] == null) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i]);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord;\n        if (collectedGroup.groupValue == null) {\n          ord = -1;\n        } else {\n          ord = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n            int sortOrd;\n            if (collectedGroup.sortValues[i] == null) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i]);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#doSetNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#doSetNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = DocValues.getSorted(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = DocValues.getSorted(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord;\n        if (collectedGroup.groupValue == null) {\n          ord = -1;\n        } else {\n          ord = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n            int sortOrd;\n            if (collectedGroup.sortValues[i] == null) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i]);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord;\n        if (collectedGroup.groupValue == null) {\n          ord = -1;\n        } else {\n          ord = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n            int sortOrd;\n            if (collectedGroup.sortValues[i] == null) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i]);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#doSetNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#doSetNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = DocValues.getSorted(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = DocValues.getSorted(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord;\n        if (collectedGroup.groupValue == null) {\n          ord = -1;\n        } else {\n          ord = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n            int sortOrd;\n            if (collectedGroup.sortValues[i] == null) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i]);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = FieldCache.DEFAULT.getTermsIndex(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = FieldCache.DEFAULT.getTermsIndex(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord;\n        if (collectedGroup.groupValue == null) {\n          ord = -1;\n        } else {\n          ord = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n            int sortOrd;\n            if (collectedGroup.sortValues[i] == null) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i]);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#doSetNextReader(AtomicReaderContext).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#doSetNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = DocValues.getSorted(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = DocValues.getSorted(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord;\n        if (collectedGroup.groupValue == null) {\n          ord = -1;\n        } else {\n          ord = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n            int sortOrd;\n            if (collectedGroup.sortValues[i] == null) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i].get());\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = DocValues.getSorted(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = DocValues.getSorted(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord;\n        if (collectedGroup.groupValue == null) {\n          ord = -1;\n        } else {\n          ord = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n            int sortOrd;\n            if (collectedGroup.sortValues[i] == null) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i]);\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":["3d5a5a419065ad4cdc70485f83fa9fe9373aaa8b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector#doSetNextReader(AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n      this.readerContext = context;\n      groupIndex = DocValues.getSorted(context.reader(), groupField);\n      for (int i = 0; i < fields.length; i++) {\n        if (fields[i].getType() == SortField.Type.SCORE) {\n          continue;\n        }\n\n        sortsIndex[i] = DocValues.getSorted(context.reader(), fields[i].getField());\n      }\n\n      // Clear ordSet and fill it with previous encountered groups that can occur in the current segment.\n      ordSet.clear();\n      segmentGroupHeads = new GroupHead[groupIndex.getValueCount()+1];\n      for (GroupHead collectedGroup : collectedGroups) {\n        int ord;\n        if (collectedGroup.groupValue == null) {\n          ord = -1;\n        } else {\n          ord = groupIndex.lookupTerm(collectedGroup.groupValue);\n        }\n        if (collectedGroup.groupValue == null || ord >= 0) {\n          ordSet.put(ord);\n          segmentGroupHeads[ord+1] = collectedGroup;\n\n          for (int i = 0; i < sortsIndex.length; i++) {\n            if (fields[i].getType() == SortField.Type.SCORE) {\n              continue;\n            }\n            int sortOrd;\n            if (collectedGroup.sortValues[i] == null) {\n              sortOrd = -1;\n            } else {\n              sortOrd = sortsIndex[i].lookupTerm(collectedGroup.sortValues[i].get());\n            }\n            collectedGroup.sortOrds[i] = sortOrd;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae73da626f97850c922c42736f808d0378e165f0","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae73da626f97850c922c42736f808d0378e165f0"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae73da626f97850c922c42736f808d0378e165f0","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","56572ec06f1407c066d6b7399413178b33176cd8"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"ae73da626f97850c922c42736f808d0378e165f0":["93dd449115a9247533e44bab47e8429e5dccbc6d","15e323346eac5e4685c0a9f2df85eb96b4239bbb","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}