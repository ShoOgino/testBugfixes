{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter#decomposeInternal(Token).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter#decomposeInternal(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter#decomposeInternal(Token).mjava","sourceNew":"  protected void decomposeInternal(final Token token) {\n    // Only words longer than minWordSize get processed\n    if (token.termLength() < this.minWordSize) {\n      return;\n    }\n    \n    char[] lowerCaseTermBuffer=makeLowerCaseCopy(token.termBuffer());\n    \n    for (int i=0;i<token.termLength()-this.minSubwordSize;++i) {\n        Token longestMatchToken=null;\n        for (int j=this.minSubwordSize-1;j<this.maxSubwordSize;++j) {\n            if(i+j>token.termLength()) {\n                break;\n            }\n            if(dictionary.contains(lowerCaseTermBuffer, i, j)) {\n                if (this.onlyLongestMatch) {\n                   if (longestMatchToken!=null) {\n                     if (longestMatchToken.termLength()<j) {\n                       longestMatchToken=createToken(i,j,token);\n                     }\n                   } else {\n                     longestMatchToken=createToken(i,j,token);\n                   }\n                } else {\n                   tokens.add(createToken(i,j,token));\n                }\n            } \n        }\n        if (this.onlyLongestMatch && longestMatchToken!=null) {\n          tokens.add(longestMatchToken);\n        }\n    }\n  }\n\n","sourceOld":"  protected void decomposeInternal(final Token token) {\n    // Only words longer than minWordSize get processed\n    if (token.termLength() < this.minWordSize) {\n      return;\n    }\n    \n    char[] lowerCaseTermBuffer=makeLowerCaseCopy(token.termBuffer());\n    \n    for (int i=0;i<token.termLength()-this.minSubwordSize;++i) {\n        Token longestMatchToken=null;\n        for (int j=this.minSubwordSize-1;j<this.maxSubwordSize;++j) {\n            if(i+j>token.termLength()) {\n                break;\n            }\n            if(dictionary.contains(lowerCaseTermBuffer, i, j)) {\n                if (this.onlyLongestMatch) {\n                   if (longestMatchToken!=null) {\n                     if (longestMatchToken.termLength()<j) {\n                       longestMatchToken=createToken(i,j,token);\n                     }\n                   } else {\n                     longestMatchToken=createToken(i,j,token);\n                   }\n                } else {\n                   tokens.add(createToken(i,j,token));\n                }\n            } \n        }\n        if (this.onlyLongestMatch && longestMatchToken!=null) {\n          tokens.add(longestMatchToken);\n        }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter#decomposeInternal(Token).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter#decomposeInternal(Token).mjava","sourceNew":"  @Override\n  protected void decomposeInternal(final Token token) {\n    // Only words longer than minWordSize get processed\n    if (token.termLength() < this.minWordSize) {\n      return;\n    }\n    \n    char[] lowerCaseTermBuffer=makeLowerCaseCopy(token.termBuffer());\n    \n    for (int i=0;i<token.termLength()-this.minSubwordSize;++i) {\n        Token longestMatchToken=null;\n        for (int j=this.minSubwordSize-1;j<this.maxSubwordSize;++j) {\n            if(i+j>token.termLength()) {\n                break;\n            }\n            if(dictionary.contains(lowerCaseTermBuffer, i, j)) {\n                if (this.onlyLongestMatch) {\n                   if (longestMatchToken!=null) {\n                     if (longestMatchToken.termLength()<j) {\n                       longestMatchToken=createToken(i,j,token);\n                     }\n                   } else {\n                     longestMatchToken=createToken(i,j,token);\n                   }\n                } else {\n                   tokens.add(createToken(i,j,token));\n                }\n            } \n        }\n        if (this.onlyLongestMatch && longestMatchToken!=null) {\n          tokens.add(longestMatchToken);\n        }\n    }\n  }\n\n","sourceOld":"  protected void decomposeInternal(final Token token) {\n    // Only words longer than minWordSize get processed\n    if (token.termLength() < this.minWordSize) {\n      return;\n    }\n    \n    char[] lowerCaseTermBuffer=makeLowerCaseCopy(token.termBuffer());\n    \n    for (int i=0;i<token.termLength()-this.minSubwordSize;++i) {\n        Token longestMatchToken=null;\n        for (int j=this.minSubwordSize-1;j<this.maxSubwordSize;++j) {\n            if(i+j>token.termLength()) {\n                break;\n            }\n            if(dictionary.contains(lowerCaseTermBuffer, i, j)) {\n                if (this.onlyLongestMatch) {\n                   if (longestMatchToken!=null) {\n                     if (longestMatchToken.termLength()<j) {\n                       longestMatchToken=createToken(i,j,token);\n                     }\n                   } else {\n                     longestMatchToken=createToken(i,j,token);\n                   }\n                } else {\n                   tokens.add(createToken(i,j,token));\n                }\n            } \n        }\n        if (this.onlyLongestMatch && longestMatchToken!=null) {\n          tokens.add(longestMatchToken);\n        }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter#decomposeInternal(Token).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilter#decomposeInternal(Token).mjava","sourceNew":"  @Override\n  protected void decomposeInternal(final Token token) {\n    // Only words longer than minWordSize get processed\n    if (token.termLength() < this.minWordSize) {\n      return;\n    }\n    \n    char[] lowerCaseTermBuffer=makeLowerCaseCopy(token.termBuffer());\n    \n    for (int i=0;i<token.termLength()-this.minSubwordSize;++i) {\n        Token longestMatchToken=null;\n        for (int j=this.minSubwordSize-1;j<this.maxSubwordSize;++j) {\n            if(i+j>token.termLength()) {\n                break;\n            }\n            if(dictionary.contains(lowerCaseTermBuffer, i, j)) {\n                if (this.onlyLongestMatch) {\n                   if (longestMatchToken!=null) {\n                     if (longestMatchToken.termLength()<j) {\n                       longestMatchToken=createToken(i,j,token);\n                     }\n                   } else {\n                     longestMatchToken=createToken(i,j,token);\n                   }\n                } else {\n                   tokens.add(createToken(i,j,token));\n                }\n            } \n        }\n        if (this.onlyLongestMatch && longestMatchToken!=null) {\n          tokens.add(longestMatchToken);\n        }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void decomposeInternal(final Token token) {\n    // Only words longer than minWordSize get processed\n    if (token.termLength() < this.minWordSize) {\n      return;\n    }\n    \n    char[] lowerCaseTermBuffer=makeLowerCaseCopy(token.termBuffer());\n    \n    for (int i=0;i<token.termLength()-this.minSubwordSize;++i) {\n        Token longestMatchToken=null;\n        for (int j=this.minSubwordSize-1;j<this.maxSubwordSize;++j) {\n            if(i+j>token.termLength()) {\n                break;\n            }\n            if(dictionary.contains(lowerCaseTermBuffer, i, j)) {\n                if (this.onlyLongestMatch) {\n                   if (longestMatchToken!=null) {\n                     if (longestMatchToken.termLength()<j) {\n                       longestMatchToken=createToken(i,j,token);\n                     }\n                   } else {\n                     longestMatchToken=createToken(i,j,token);\n                   }\n                } else {\n                   tokens.add(createToken(i,j,token));\n                }\n            } \n        }\n        if (this.onlyLongestMatch && longestMatchToken!=null) {\n          tokens.add(longestMatchToken);\n        }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}