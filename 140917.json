{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseAreaShape#isGeoAreaShapeInsideShape(GeoShape).mjava","commits":[{"id":"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705","date":1501767131,"type":2,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseAreaShape#isGeoAreaShapeInsideShape(GeoShape).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseBBox#isShapeInsideBBox(GeoShape).mjava","sourceNew":"  /** Determine the relationship between the GeoAreaShape's edgepoints and the\n   * provided shape.\n   *@param geoshape is the shape.\n   *@return the relationship.\n   */\n  protected int isGeoAreaShapeInsideShape(final GeoShape geoshape)  {\n    boolean foundOutside = false;\n    boolean foundInside = false;\n    for (GeoPoint p : getEdgePoints()) {\n      if (geoshape.isWithin(p)) {\n        foundInside = true;\n      } else {\n        foundOutside = true;\n      }\n      if (foundInside && foundOutside) {\n        return SOME_INSIDE;\n      }\n    }\n    if (!foundInside && !foundOutside)\n      return NONE_INSIDE;\n    if (foundInside && !foundOutside)\n      return ALL_INSIDE;\n    if (foundOutside && !foundInside)\n      return NONE_INSIDE;\n    return SOME_INSIDE;\n  }\n\n","sourceOld":"  /** Determine the relationship between this BBox and the provided\n   * shape's edgepoints.\n   *@param path is the shape.\n   *@return the relationship.\n   */\n  protected int isShapeInsideBBox(final GeoShape path) {\n    final GeoPoint[] pathPoints = path.getEdgePoints();\n    boolean foundOutside = false;\n    boolean foundInside = false;\n    for (GeoPoint p : pathPoints) {\n      if (isWithin(p)) {\n        foundInside = true;\n      } else {\n        foundOutside = true;\n      }\n      if (foundInside && foundOutside) {\n        return SOME_INSIDE;\n      }\n    }\n    if (!foundInside && !foundOutside)\n      return NONE_INSIDE;\n    if (foundInside && !foundOutside)\n      return ALL_INSIDE;\n    if (foundOutside && !foundInside)\n      return NONE_INSIDE;\n    return SOME_INSIDE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":2,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseAreaShape#isGeoAreaShapeInsideShape(GeoShape).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseBBox#isShapeInsideBBox(GeoShape).mjava","sourceNew":"  /** Determine the relationship between the GeoAreaShape's edgepoints and the\n   * provided shape.\n   *@param geoshape is the shape.\n   *@return the relationship.\n   */\n  protected int isGeoAreaShapeInsideShape(final GeoShape geoshape)  {\n    boolean foundOutside = false;\n    boolean foundInside = false;\n    for (GeoPoint p : getEdgePoints()) {\n      if (geoshape.isWithin(p)) {\n        foundInside = true;\n      } else {\n        foundOutside = true;\n      }\n      if (foundInside && foundOutside) {\n        return SOME_INSIDE;\n      }\n    }\n    if (!foundInside && !foundOutside)\n      return NONE_INSIDE;\n    if (foundInside && !foundOutside)\n      return ALL_INSIDE;\n    if (foundOutside && !foundInside)\n      return NONE_INSIDE;\n    return SOME_INSIDE;\n  }\n\n","sourceOld":"  /** Determine the relationship between this BBox and the provided\n   * shape's edgepoints.\n   *@param path is the shape.\n   *@return the relationship.\n   */\n  protected int isShapeInsideBBox(final GeoShape path) {\n    final GeoPoint[] pathPoints = path.getEdgePoints();\n    boolean foundOutside = false;\n    boolean foundInside = false;\n    for (GeoPoint p : pathPoints) {\n      if (isWithin(p)) {\n        foundInside = true;\n      } else {\n        foundOutside = true;\n      }\n      if (foundInside && foundOutside) {\n        return SOME_INSIDE;\n      }\n    }\n    if (!foundInside && !foundOutside)\n      return NONE_INSIDE;\n    if (foundInside && !foundOutside)\n      return ALL_INSIDE;\n    if (foundOutside && !foundInside)\n      return NONE_INSIDE;\n    return SOME_INSIDE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}