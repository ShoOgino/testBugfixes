{"path":"src/java/org/apache/solr/analysis/CollationKeyFilterFactory#inform(ResourceLoader).mjava","commits":[{"id":"6fd0331972ce2197b3ea098c12464f6034c60b30","date":1259561332,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/CollationKeyFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(ResourceLoader loader) {\n    String custom = args.get(\"custom\");\n    String language = args.get(\"language\");\n    String country = args.get(\"country\");\n    String variant = args.get(\"variant\");\n    String strength = args.get(\"strength\");\n    String decomposition = args.get(\"decomposition\");\n    \n    if (custom == null && language == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or language is required.\");\n    \n    if (custom != null && \n        (language != null || country != null || variant != null))\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both language and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (language != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(language, country, variant);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"full\"))\n        collator.setDecomposition(Collator.FULL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/CollationKeyFilterFactory#inform(ResourceLoader).mjava","pathOld":"src/java/org/apache/solr/analysis/CollationKeyFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String custom = args.get(\"custom\");\n    String language = args.get(\"language\");\n    String country = args.get(\"country\");\n    String variant = args.get(\"variant\");\n    String strength = args.get(\"strength\");\n    String decomposition = args.get(\"decomposition\");\n    \n    if (custom == null && language == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or language is required.\");\n    \n    if (custom != null && \n        (language != null || country != null || variant != null))\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both language and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (language != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(language, country, variant);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"full\"))\n        collator.setDecomposition(Collator.FULL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String custom = args.get(\"custom\");\n    String language = args.get(\"language\");\n    String country = args.get(\"country\");\n    String variant = args.get(\"variant\");\n    String strength = args.get(\"strength\");\n    String decomposition = args.get(\"decomposition\");\n    \n    if (custom == null && language == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or language is required.\");\n    \n    if (custom != null && \n        (language != null || country != null || variant != null))\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both language and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    if (language != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(language, country, variant);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"full\"))\n        collator.setDecomposition(Collator.FULL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6fd0331972ce2197b3ea098c12464f6034c60b30":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["6fd0331972ce2197b3ea098c12464f6034c60b30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6fd0331972ce2197b3ea098c12464f6034c60b30":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6fd0331972ce2197b3ea098c12464f6034c60b30"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}