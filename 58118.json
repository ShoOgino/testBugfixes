{"path":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","pathOld":"solr/src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","sourceNew":"  @Test\n  public void testNaNInf() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNaNInf() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","pathOld":"solr/src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","sourceNew":"  @Test\n  public void testNaNInf() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNaNInf() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","pathOld":"solr/src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","sourceNew":"  @Test\n  public void testNaNInf() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNaNInf() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5892bdf887aeb6dcc06096dd9b4a7363513eff7","date":1327699677,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","sourceNew":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNaNInf() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","date":1327763052,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","sourceNew":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNaNInf() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","sourceNew":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNaNInf() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5892bdf887aeb6dcc06096dd9b4a7363513eff7":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["c26f00b574427b55127e869b935845554afde1fa","c5892bdf887aeb6dcc06096dd9b4a7363513eff7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5892bdf887aeb6dcc06096dd9b4a7363513eff7"],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":["c26f00b574427b55127e869b935845554afde1fa","c5892bdf887aeb6dcc06096dd9b4a7363513eff7"]},"commit2Childs":{"c5892bdf887aeb6dcc06096dd9b4a7363513eff7":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["c5892bdf887aeb6dcc06096dd9b4a7363513eff7","fd92b8bcc88e969302510acf77bd6970da3994c4","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}