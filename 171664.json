{"path":"solr/core/src/java/org/apache/solr/search/PointSetQuery[GraphTermsQParserPlugin]#getDocSet(IndexSearcher).mjava","commits":[{"id":"e05158fccbb5082f97e4ae2566c5ecfb9df35b7a","date":1501604915,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/PointSetQuery[GraphTermsQParserPlugin]#getDocSet(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  public DocSet getDocSet(IndexSearcher searcher) throws IOException {\n    IndexReaderContext top = ReaderUtil.getTopLevelContext(searcher.getTopReaderContext());\n    List<LeafReaderContext> segs = top.leaves();\n    DocSetBuilder builder = new DocSetBuilder(top.reader().maxDoc(), Math.min(64,(top.reader().maxDoc()>>>10)+4));\n    PointValues[] segPoints = new PointValues[segs.size()];\n    for (int i=0; i<segPoints.length; i++) {\n      segPoints[i] = segs.get(i).reader().getPointValues(field);\n    }\n\n    int maxCollect = Math.min(maxDocFreq, top.reader().maxDoc());\n\n    PointSetQuery.CutoffPointVisitor visitor = new PointSetQuery.CutoffPointVisitor(maxCollect);\n    PrefixCodedTerms.TermIterator iterator = sortedPackedPoints.iterator();\n    outer: for (BytesRef point = iterator.next(); point != null; point = iterator.next()) {\n      visitor.setPoint(point);\n      for (int i=0; i<segs.size(); i++) {\n        if (segPoints[i] == null) continue;\n        visitor.setBase(segs.get(i).docBase);\n        segPoints[i].intersect(visitor);\n        if (visitor.getCount() > maxDocFreq) {\n          continue outer;\n        }\n      }\n      int collected = visitor.getCount();\n      int[] ids = visitor.getGlobalIds();\n      for (int i=0; i<collected; i++) {\n        builder.add( ids[i] );\n      }\n    }\n\n    FixedBitSet liveDocs = getLiveDocs(searcher);\n    DocSet set = builder.build(liveDocs);\n    return set;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/PointSetQuery[GraphTermsQParserPlugin]#getDocSet(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  public DocSet getDocSet(IndexSearcher searcher) throws IOException {\n    IndexReaderContext top = ReaderUtil.getTopLevelContext(searcher.getTopReaderContext());\n    List<LeafReaderContext> segs = top.leaves();\n    DocSetBuilder builder = new DocSetBuilder(top.reader().maxDoc(), Math.min(64,(top.reader().maxDoc()>>>10)+4));\n    PointValues[] segPoints = new PointValues[segs.size()];\n    for (int i=0; i<segPoints.length; i++) {\n      segPoints[i] = segs.get(i).reader().getPointValues(field);\n    }\n\n    int maxCollect = Math.min(maxDocFreq, top.reader().maxDoc());\n\n    PointSetQuery.CutoffPointVisitor visitor = new PointSetQuery.CutoffPointVisitor(maxCollect);\n    PrefixCodedTerms.TermIterator iterator = sortedPackedPoints.iterator();\n    outer: for (BytesRef point = iterator.next(); point != null; point = iterator.next()) {\n      visitor.setPoint(point);\n      for (int i=0; i<segs.size(); i++) {\n        if (segPoints[i] == null) continue;\n        visitor.setBase(segs.get(i).docBase);\n        segPoints[i].intersect(visitor);\n        if (visitor.getCount() > maxDocFreq) {\n          continue outer;\n        }\n      }\n      int collected = visitor.getCount();\n      int[] ids = visitor.getGlobalIds();\n      for (int i=0; i<collected; i++) {\n        builder.add( ids[i] );\n      }\n    }\n\n    FixedBitSet liveDocs = getLiveDocs(searcher);\n    DocSet set = builder.build(liveDocs);\n    return set;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e05158fccbb5082f97e4ae2566c5ecfb9df35b7a"],"e05158fccbb5082f97e4ae2566c5ecfb9df35b7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e05158fccbb5082f97e4ae2566c5ecfb9df35b7a"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"e05158fccbb5082f97e4ae2566c5ecfb9df35b7a":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","e05158fccbb5082f97e4ae2566c5ecfb9df35b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}