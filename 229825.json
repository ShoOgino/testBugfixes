{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testAccountable().mjava","commits":[{"id":"502e9b7abb02586bb5aaa7df20504b67c2be51d7","date":1507128773,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testAccountable().mjava","pathOld":"/dev/null","sourceNew":"  public void testAccountable() throws Exception {\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int numCategories = atLeast(10);\n    int numA = 0, numB = 0;\n    Random random = random();\n    // add the two categories for which we'll also add children (so asserts are simpler)\n    taxoWriter.addCategory(new FacetLabel(\"a\"));\n    taxoWriter.addCategory(new FacetLabel(\"b\"));\n    for (int i = 0; i < numCategories; i++) {\n      if (random.nextBoolean()) {\n        taxoWriter.addCategory(new FacetLabel(\"a\", Integer.toString(i)));\n        ++numA;\n      } else {\n        taxoWriter.addCategory(new FacetLabel(\"b\", Integer.toString(i)));\n        ++numB;\n      }\n    }\n    // add category with no children\n    taxoWriter.addCategory(new FacetLabel(\"c\"));\n    taxoWriter.close();\n    \n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(dir);\n    assertTrue(taxoReader.ramBytesUsed() > 0);\n    assertTrue(taxoReader.getChildResources().size() > 0);\n    taxoReader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7859b8e6a469429413db808a609e8468be14c03","date":1507222263,"type":0,"author":"tballison","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testAccountable().mjava","pathOld":"/dev/null","sourceNew":"  public void testAccountable() throws Exception {\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(dir);\n    int numCategories = atLeast(10);\n    int numA = 0, numB = 0;\n    Random random = random();\n    // add the two categories for which we'll also add children (so asserts are simpler)\n    taxoWriter.addCategory(new FacetLabel(\"a\"));\n    taxoWriter.addCategory(new FacetLabel(\"b\"));\n    for (int i = 0; i < numCategories; i++) {\n      if (random.nextBoolean()) {\n        taxoWriter.addCategory(new FacetLabel(\"a\", Integer.toString(i)));\n        ++numA;\n      } else {\n        taxoWriter.addCategory(new FacetLabel(\"b\", Integer.toString(i)));\n        ++numB;\n      }\n    }\n    // add category with no children\n    taxoWriter.addCategory(new FacetLabel(\"c\"));\n    taxoWriter.close();\n    \n    DirectoryTaxonomyReader taxoReader = new DirectoryTaxonomyReader(dir);\n    assertTrue(taxoReader.ramBytesUsed() > 0);\n    assertTrue(taxoReader.getChildResources().size() > 0);\n    taxoReader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"502e9b7abb02586bb5aaa7df20504b67c2be51d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d7859b8e6a469429413db808a609e8468be14c03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","502e9b7abb02586bb5aaa7df20504b67c2be51d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["502e9b7abb02586bb5aaa7df20504b67c2be51d7"]},"commit2Childs":{"502e9b7abb02586bb5aaa7df20504b67c2be51d7":["d7859b8e6a469429413db808a609e8468be14c03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d7859b8e6a469429413db808a609e8468be14c03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["502e9b7abb02586bb5aaa7df20504b67c2be51d7","d7859b8e6a469429413db808a609e8468be14c03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d7859b8e6a469429413db808a609e8468be14c03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}