{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","commits":[{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","sourceNew":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n\n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof RouteResponse) {\n      NamedList routes = ((RouteResponse)resp).getRouteResponses();\n      DocCollection coll = getDocCollection(collection, null);\n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : coll.getActiveSlicesArr()) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n\n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n    \n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof CloudSolrClient.RouteResponse) {\n      NamedList routes = ((CloudSolrClient.RouteResponse)resp).getRouteResponses();\n      DocCollection coll = getDocCollection(collection, null);\n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : coll.getActiveSlicesArr()) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n      \n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","sourceNew":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value.\n   */\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n\n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof RouteResponse) {\n      NamedList routes = ((RouteResponse)resp).getRouteResponses();\n      DocCollection coll = getDocCollection(collection, null);\n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : coll.getActiveSlicesArr()) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n\n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n\n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof RouteResponse) {\n      NamedList routes = ((RouteResponse)resp).getRouteResponses();\n      DocCollection coll = getDocCollection(collection, null);\n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : coll.getActiveSlicesArr()) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n\n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","sourceNew":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n\n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof RouteResponse) {\n      NamedList routes = ((RouteResponse)resp).getRouteResponses();\n      DocCollection coll = getDocCollection(collection, null);\n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : coll.getActiveSlicesArr()) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n\n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value.\n   */\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n\n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof RouteResponse) {\n      NamedList routes = ((RouteResponse)resp).getRouteResponses();\n      DocCollection coll = getDocCollection(collection, null);\n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : coll.getActiveSlicesArr()) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n\n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","sourceNew":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n\n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof RouteResponse) {\n      NamedList routes = ((RouteResponse)resp).getRouteResponses();\n      DocCollection coll = getDocCollection(collection, null);\n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : coll.getActiveSlicesArr()) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n\n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n\n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof RouteResponse) {\n      NamedList routes = ((RouteResponse)resp).getRouteResponses();\n      DocCollection coll = getDocCollection(collection, null);\n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : coll.getActiveSlicesArr()) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n\n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","sourceNew":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n\n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof RouteResponse) {\n      NamedList routes = ((RouteResponse)resp).getRouteResponses();\n      DocCollection coll = getDocCollection(collection, null);\n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : coll.getActiveSlicesArr()) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n\n      @SuppressWarnings({\"unchecked\"})\n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n\n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof RouteResponse) {\n      NamedList routes = ((RouteResponse)resp).getRouteResponses();\n      DocCollection coll = getDocCollection(collection, null);\n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : coll.getActiveSlicesArr()) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n\n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"]},"commit2Childs":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}