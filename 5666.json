{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#randomAccumulator(FacetSearchParams,IndexReader,TaxonomyReader).mjava","commits":[{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#randomAccumulator(FacetSearchParams,IndexReader,TaxonomyReader).mjava","pathOld":"/dev/null","sourceNew":"  private FacetsAccumulator randomAccumulator(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader) {\n    final FacetsAggregator aggregator = random().nextBoolean() ? new CountingFacetsAggregator() : new FastCountingFacetsAggregator();\n    return new FacetsAccumulator(fsp, indexReader, taxoReader) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return aggregator;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"136bf9d69957766255ca222d35e715158cd0aa9c","date":1360686043,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#randomAccumulator(FacetSearchParams,IndexReader,TaxonomyReader).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#randomAccumulator(FacetSearchParams,IndexReader,TaxonomyReader).mjava","sourceNew":"  private FacetsAccumulator randomAccumulator(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader) {\n    final FacetsAggregator aggregator;\n    double val = random().nextDouble();\n    if (val < 0.6) {\n      aggregator = new FastCountingFacetsAggregator(); // it's the default, so give it the highest chance\n    } else if (val < 0.8) {\n      aggregator = new CountingFacetsAggregator();\n    } else {\n      aggregator = new CachedOrdsCountingFacetsAggregator();\n    }\n    return new FacetsAccumulator(fsp, indexReader, taxoReader) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return aggregator;\n      }\n    };\n  }\n\n","sourceOld":"  private FacetsAccumulator randomAccumulator(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader) {\n    final FacetsAggregator aggregator = random().nextBoolean() ? new CountingFacetsAggregator() : new FastCountingFacetsAggregator();\n    return new FacetsAccumulator(fsp, indexReader, taxoReader) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return aggregator;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","date":1360780178,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#randomAccumulator(FacetSearchParams,IndexReader,TaxonomyReader).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#randomAccumulator(FacetSearchParams,IndexReader,TaxonomyReader).mjava","sourceNew":"  private FacetsAccumulator randomAccumulator(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader) {\n    final FacetsAggregator aggregator;\n    double val = random().nextDouble();\n    if (val < 0.6) {\n      aggregator = new FastCountingFacetsAggregator(); // it's the default, so give it the highest chance\n    } else if (val < 0.8) {\n      aggregator = new CountingFacetsAggregator();\n    } else {\n      aggregator = new CachedOrdsCountingFacetsAggregator();\n    }\n    return new FacetsAccumulator(fsp, indexReader, taxoReader) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return aggregator;\n      }\n    };\n  }\n\n","sourceOld":"  private FacetsAccumulator randomAccumulator(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader) {\n    final FacetsAggregator aggregator = random().nextBoolean() ? new CountingFacetsAggregator() : new FastCountingFacetsAggregator();\n    return new FacetsAccumulator(fsp, indexReader, taxoReader) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return aggregator;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#randomAccumulator(FacetSearchParams,IndexReader,TaxonomyReader).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#randomAccumulator(FacetSearchParams,IndexReader,TaxonomyReader).mjava","sourceNew":"  private TaxonomyFacetsAccumulator randomAccumulator(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader) {\n    final FacetsAggregator aggregator;\n    double val = random().nextDouble();\n    if (val < 0.6) {\n      aggregator = new FastCountingFacetsAggregator(); // it's the default, so give it the highest chance\n    } else if (val < 0.8) {\n      aggregator = new CountingFacetsAggregator();\n    } else {\n      aggregator = new CachedOrdsCountingFacetsAggregator();\n    }\n    return new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return aggregator;\n      }\n    };\n  }\n\n","sourceOld":"  private FacetsAccumulator randomAccumulator(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader) {\n    final FacetsAggregator aggregator;\n    double val = random().nextDouble();\n    if (val < 0.6) {\n      aggregator = new FastCountingFacetsAggregator(); // it's the default, so give it the highest chance\n    } else if (val < 0.8) {\n      aggregator = new CountingFacetsAggregator();\n    } else {\n      aggregator = new CachedOrdsCountingFacetsAggregator();\n    }\n    return new FacetsAccumulator(fsp, indexReader, taxoReader) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return aggregator;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#randomAccumulator(FacetSearchParams,IndexReader,TaxonomyReader).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#randomAccumulator(FacetSearchParams,IndexReader,TaxonomyReader).mjava","sourceNew":"  private TaxonomyFacetsAccumulator randomAccumulator(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader) {\n    final FacetsAggregator aggregator;\n    double val = random().nextDouble();\n    if (val < 0.6) {\n      aggregator = new FastCountingFacetsAggregator(); // it's the default, so give it the highest chance\n    } else if (val < 0.8) {\n      aggregator = new CountingFacetsAggregator();\n    } else {\n      aggregator = new CachedOrdsCountingFacetsAggregator();\n    }\n    return new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return aggregator;\n      }\n    };\n  }\n\n","sourceOld":"  private FacetsAccumulator randomAccumulator(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader) {\n    final FacetsAggregator aggregator;\n    double val = random().nextDouble();\n    if (val < 0.6) {\n      aggregator = new FastCountingFacetsAggregator(); // it's the default, so give it the highest chance\n    } else if (val < 0.8) {\n      aggregator = new CountingFacetsAggregator();\n    } else {\n      aggregator = new CachedOrdsCountingFacetsAggregator();\n    }\n    return new FacetsAccumulator(fsp, indexReader, taxoReader) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return aggregator;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca39562b2d7687143fdb601d5de1b8f7b778f1db","date":1385299806,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#randomAccumulator(FacetSearchParams,IndexReader,TaxonomyReader).mjava","sourceNew":null,"sourceOld":"  private TaxonomyFacetsAccumulator randomAccumulator(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader) {\n    final FacetsAggregator aggregator;\n    double val = random().nextDouble();\n    if (val < 0.6) {\n      aggregator = new FastCountingFacetsAggregator(); // it's the default, so give it the highest chance\n    } else if (val < 0.8) {\n      aggregator = new CountingFacetsAggregator();\n    } else {\n      aggregator = new CachedOrdsCountingFacetsAggregator();\n    }\n    return new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return aggregator;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#randomAccumulator(FacetSearchParams,IndexReader,TaxonomyReader).mjava","sourceNew":null,"sourceOld":"  private TaxonomyFacetsAccumulator randomAccumulator(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader) {\n    final FacetsAggregator aggregator;\n    double val = random().nextDouble();\n    if (val < 0.6) {\n      aggregator = new FastCountingFacetsAggregator(); // it's the default, so give it the highest chance\n    } else if (val < 0.8) {\n      aggregator = new CountingFacetsAggregator();\n    } else {\n      aggregator = new CachedOrdsCountingFacetsAggregator();\n    }\n    return new TaxonomyFacetsAccumulator(fsp, indexReader, taxoReader) {\n      @Override\n      public FacetsAggregator getAggregator() {\n        return aggregator;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":["571abba77e55fea386a38c0024f72ffa5b37a9ad","136bf9d69957766255ca222d35e715158cd0aa9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["136bf9d69957766255ca222d35e715158cd0aa9c"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"136bf9d69957766255ca222d35e715158cd0aa9c":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["136bf9d69957766255ca222d35e715158cd0aa9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"]},"commit2Childs":{"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"136bf9d69957766255ca222d35e715158cd0aa9c":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","136bf9d69957766255ca222d35e715158cd0aa9c"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["3cc728b07df73b197e6d940d27f9b08b63918f13","ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}