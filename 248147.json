{"path":"lucene/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,int).mjava","commits":[{"id":"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3","date":1328092914,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  private static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new DirectoryReader(readers, directory, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}