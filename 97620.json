{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(TokenStream,Set,int,int,int,boolean).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(TokenStream,Set,int,int,int,boolean).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(TokenStream,Set,int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(TokenStream,Set,int,int,int,boolean).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(TokenStream,Set,int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n    \n    termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n    offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n    flagsAtt = (FlagsAttribute) addAttribute(FlagsAttribute.class);\n    posIncAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n    typeAtt = (TypeAttribute) addAttribute(TypeAttribute.class);\n    payloadAtt = (PayloadAttribute) addAttribute(PayloadAttribute.class);\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(TokenStream,Set,int,int,int,boolean).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(TokenStream,Set,int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n    \n    termAtt = addAttribute(TermAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n    posIncAtt = addAttribute(PositionIncrementAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n    \n    termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n    offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n    flagsAtt = (FlagsAttribute) addAttribute(FlagsAttribute.class);\n    posIncAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n    typeAtt = (TypeAttribute) addAttribute(TypeAttribute.class);\n    payloadAtt = (PayloadAttribute) addAttribute(PayloadAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set,int,int,int,boolean).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(TokenStream,Set,int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<Token>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n    \n    termAtt = addAttribute(TermAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n    posIncAtt = addAttribute(PositionIncrementAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n    \n    termAtt = addAttribute(TermAttribute.class);\n    offsetAtt = addAttribute(OffsetAttribute.class);\n    flagsAtt = addAttribute(FlagsAttribute.class);\n    posIncAtt = addAttribute(PositionIncrementAttribute.class);\n    typeAtt = addAttribute(TypeAttribute.class);\n    payloadAtt = addAttribute(PayloadAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":["1e15bea9339982eec538668b67ae252b28e0003e"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["8d78f014fded44fbde905f4f84cdc21907b371e8"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}