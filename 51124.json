{"path":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testPercentageAutowarm().mjava","commits":[{"id":"b870d11eae2250e41b4ed48d248bc043cbbd7711","date":1272408055,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testPercentageAutowarm().mjava","pathOld":"/dev/null","sourceNew":"  public void testPercentageAutowarm() throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", \"100\");\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", \"100%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      fastCache.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", fastCache.get(25));\n    assertEquals(null, fastCache.get(110));\n    NamedList<Serializable> nl = fastCache.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n    assertEquals(null, fastCache.get(1));  // first item put in should be the first out\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n    fastCacheNew.put(103, \"103\");\n    assertEquals(\"90\", fastCacheNew.get(90));\n    assertEquals(\"50\", fastCacheNew.get(50));\n    nl = fastCacheNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(2L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(3L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["df72a23fb74bebe914e3f3972063a884327c0436","df72a23fb74bebe914e3f3972063a884327c0436","df72a23fb74bebe914e3f3972063a884327c0436"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testPercentageAutowarm().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testPercentageAutowarm().mjava","sourceNew":"  public void testPercentageAutowarm() throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", \"100\");\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", \"100%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      fastCache.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", fastCache.get(25));\n    assertEquals(null, fastCache.get(110));\n    NamedList<Serializable> nl = fastCache.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n    assertEquals(null, fastCache.get(1));  // first item put in should be the first out\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n    fastCacheNew.put(103, \"103\");\n    assertEquals(\"90\", fastCacheNew.get(90));\n    assertEquals(\"50\", fastCacheNew.get(50));\n    nl = fastCacheNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(2L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(3L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  public void testPercentageAutowarm() throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", \"100\");\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", \"100%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      fastCache.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", fastCache.get(25));\n    assertEquals(null, fastCache.get(110));\n    NamedList<Serializable> nl = fastCache.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n    assertEquals(null, fastCache.get(1));  // first item put in should be the first out\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n    fastCacheNew.put(103, \"103\");\n    assertEquals(\"90\", fastCacheNew.get(90));\n    assertEquals(\"50\", fastCacheNew.get(50));\n    nl = fastCacheNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(2L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(3L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testPercentageAutowarm().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testPercentageAutowarm().mjava","sourceNew":"  public void testPercentageAutowarm() throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", \"100\");\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", \"100%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      fastCache.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", fastCache.get(25));\n    assertEquals(null, fastCache.get(110));\n    NamedList<Serializable> nl = fastCache.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n    assertEquals(null, fastCache.get(1));  // first item put in should be the first out\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n    fastCacheNew.put(103, \"103\");\n    assertEquals(\"90\", fastCacheNew.get(90));\n    assertEquals(\"50\", fastCacheNew.get(50));\n    nl = fastCacheNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(2L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(3L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  public void testPercentageAutowarm() throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", \"100\");\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", \"100%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      fastCache.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", fastCache.get(25));\n    assertEquals(null, fastCache.get(110));\n    NamedList<Serializable> nl = fastCache.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n    assertEquals(null, fastCache.get(1));  // first item put in should be the first out\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n    fastCacheNew.put(103, \"103\");\n    assertEquals(\"90\", fastCacheNew.get(90));\n    assertEquals(\"50\", fastCacheNew.get(50));\n    nl = fastCacheNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(2L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(3L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testPercentageAutowarm().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testPercentageAutowarm().mjava","sourceNew":"  public void testPercentageAutowarm() throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", \"100\");\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", \"100%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      fastCache.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", fastCache.get(25));\n    assertEquals(null, fastCache.get(110));\n    NamedList<Serializable> nl = fastCache.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n    assertEquals(null, fastCache.get(1));  // first item put in should be the first out\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n    fastCacheNew.put(103, \"103\");\n    assertEquals(\"90\", fastCacheNew.get(90));\n    assertEquals(\"50\", fastCacheNew.get(50));\n    nl = fastCacheNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(2L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(3L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    fastCacheNew.close();\n  }\n\n","sourceOld":"  public void testPercentageAutowarm() throws IOException {\n    FastLRUCache<Object, Object> fastCache = new FastLRUCache<Object, Object>();\n    Map<String, String> params = new HashMap<String, String>();\n    params.put(\"size\", \"100\");\n    params.put(\"initialSize\", \"10\");\n    params.put(\"autowarmCount\", \"100%\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = fastCache.init(params, null, cr);\n    fastCache.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      fastCache.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", fastCache.get(25));\n    assertEquals(null, fastCache.get(110));\n    NamedList<Serializable> nl = fastCache.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n    assertEquals(null, fastCache.get(1));  // first item put in should be the first out\n    FastLRUCache<Object, Object> fastCacheNew = new FastLRUCache<Object, Object>();\n    fastCacheNew.init(params, o, cr);\n    fastCacheNew.warm(null, fastCache);\n    fastCacheNew.setState(SolrCache.State.LIVE);\n    fastCache.close();\n    fastCacheNew.put(103, \"103\");\n    assertEquals(\"90\", fastCacheNew.get(90));\n    assertEquals(\"50\", fastCacheNew.get(50));\n    nl = fastCacheNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(2L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(3L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    fastCacheNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["b870d11eae2250e41b4ed48d248bc043cbbd7711"],"c26f00b574427b55127e869b935845554afde1fa":["b870d11eae2250e41b4ed48d248bc043cbbd7711","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b870d11eae2250e41b4ed48d248bc043cbbd7711":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b870d11eae2250e41b4ed48d248bc043cbbd7711"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b870d11eae2250e41b4ed48d248bc043cbbd7711"],"b870d11eae2250e41b4ed48d248bc043cbbd7711":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}