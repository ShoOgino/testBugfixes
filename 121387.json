{"path":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query,DocSet).mjava","commits":[{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query,ParsedParams).mjava","sourceNew":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery, DocSet docSet) throws IOException {\n    // It is okay to retrieve group.field from global because it is never a local param\n    String groupField = global.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = docSet.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    Query filteredFacetQuery = new BooleanQuery.Builder()\n        .add(facetQuery, Occur.MUST)\n        .add(mainQueryFilter, Occur.FILTER)\n        .build();\n    searcher.search(filteredFacetQuery, collector);\n    return collector.getGroupCount();\n  }\n\n","sourceOld":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery, ParsedParams parsed) throws IOException {\n    String groupField = parsed.params.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n    \n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = parsed.docs.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    Query filteredFacetQuery = new BooleanQuery.Builder()\n        .add(facetQuery, Occur.MUST)\n        .add(mainQueryFilter, Occur.FILTER)\n        .build();\n    searcher.search(filteredFacetQuery, collector);\n    return collector.getGroupCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery, DocSet docSet) throws IOException {\n    // It is okay to retrieve group.field from global because it is never a local param\n    String groupField = global.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    AllGroupsCollector collector = new AllGroupsCollector<>(new TermGroupSelector(groupField));\n    Filter mainQueryFilter = docSet.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    Query filteredFacetQuery = new BooleanQuery.Builder()\n        .add(facetQuery, Occur.MUST)\n        .add(mainQueryFilter, Occur.FILTER)\n        .build();\n    searcher.search(filteredFacetQuery, collector);\n    return collector.getGroupCount();\n  }\n\n","sourceOld":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery, DocSet docSet) throws IOException {\n    // It is okay to retrieve group.field from global because it is never a local param\n    String groupField = global.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = docSet.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    Query filteredFacetQuery = new BooleanQuery.Builder()\n        .add(facetQuery, Occur.MUST)\n        .add(mainQueryFilter, Occur.FILTER)\n        .build();\n    searcher.search(filteredFacetQuery, collector);\n    return collector.getGroupCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery, DocSet docSet) throws IOException {\n    // It is okay to retrieve group.field from global because it is never a local param\n    String groupField = global.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    AllGroupsCollector collector = new AllGroupsCollector<>(new TermGroupSelector(groupField));\n    Filter mainQueryFilter = docSet.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    Query filteredFacetQuery = new BooleanQuery.Builder()\n        .add(facetQuery, Occur.MUST)\n        .add(mainQueryFilter, Occur.FILTER)\n        .build();\n    searcher.search(filteredFacetQuery, collector);\n    return collector.getGroupCount();\n  }\n\n","sourceOld":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery, DocSet docSet) throws IOException {\n    // It is okay to retrieve group.field from global because it is never a local param\n    String groupField = global.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    TermAllGroupsCollector collector = new TermAllGroupsCollector(groupField);\n    Filter mainQueryFilter = docSet.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    Query filteredFacetQuery = new BooleanQuery.Builder()\n        .add(facetQuery, Occur.MUST)\n        .add(mainQueryFilter, Occur.FILTER)\n        .build();\n    searcher.search(filteredFacetQuery, collector);\n    return collector.getGroupCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec","date":1586897159,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery, DocSet docSet) throws IOException {\n    // It is okay to retrieve group.field from global because it is never a local param\n    String groupField = global.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    AllGroupsCollector collector = new AllGroupsCollector<>(new TermGroupSelector(groupField));\n    searcher.search(QueryUtils.combineQueryAndFilter(facetQuery, docSet.getTopFilter()), collector);\n    return collector.getGroupCount();\n  }\n\n","sourceOld":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery, DocSet docSet) throws IOException {\n    // It is okay to retrieve group.field from global because it is never a local param\n    String groupField = global.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    AllGroupsCollector collector = new AllGroupsCollector<>(new TermGroupSelector(groupField));\n    Filter mainQueryFilter = docSet.getTopFilter(); // This returns a filter that only matches documents matching with q param and fq params\n    Query filteredFacetQuery = new BooleanQuery.Builder()\n        .add(facetQuery, Occur.MUST)\n        .add(mainQueryFilter, Occur.FILTER)\n        .build();\n    searcher.search(filteredFacetQuery, collector);\n    return collector.getGroupCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getGroupedFacetQueryCount(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery, DocSet docSet) throws IOException {\n    // It is okay to retrieve group.field from global because it is never a local param\n    String groupField = global.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    @SuppressWarnings({\"rawtypes\"})\n    AllGroupsCollector collector = new AllGroupsCollector<>(new TermGroupSelector(groupField));\n    searcher.search(QueryUtils.combineQueryAndFilter(facetQuery, docSet.getTopFilter()), collector);\n    return collector.getGroupCount();\n  }\n\n","sourceOld":"  /**\n   * Returns a grouped facet count for the facet query\n   *\n   * @see FacetParams#FACET_QUERY\n   */\n  public int getGroupedFacetQueryCount(Query facetQuery, DocSet docSet) throws IOException {\n    // It is okay to retrieve group.field from global because it is never a local param\n    String groupField = global.get(GroupParams.GROUP_FIELD);\n    if (groupField == null) {\n      throw new SolrException (\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"Specify the group.field as parameter or local parameter\"\n      );\n    }\n\n    AllGroupsCollector collector = new AllGroupsCollector<>(new TermGroupSelector(groupField));\n    searcher.search(QueryUtils.combineQueryAndFilter(facetQuery, docSet.getTopFilter()), collector);\n    return collector.getGroupCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec":["7ae958a739da1866696f442384393ba2f13e33e5"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["d4d8a0350513120be3cf48c0eafd6b8787fcd3ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"7ae958a739da1866696f442384393ba2f13e33e5":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7ae958a739da1866696f442384393ba2f13e33e5"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7ae958a739da1866696f442384393ba2f13e33e5":["d4d8a0350513120be3cf48c0eafd6b8787fcd3ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}