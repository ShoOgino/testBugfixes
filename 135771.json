{"path":"src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/request/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/response/BinaryResponseWriter#getParsedResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * TODO -- there may be a way to do this without marshal at all...\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return a response object equivalent to what you get from the XML/JSON/javabin parser. Documents become\n   *         SolrDocuments, DocList becomes SolrDocumentList etc.\n   *\n   * @since solr 1.4\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static NamedList<Object> getParsedResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      Resolver resolver = new Resolver(req, rsp.getReturnFields());\n\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      new JavaBinCodec(resolver).marshal(rsp.getValues(), out);\n\n      InputStream in = new ByteArrayInputStream(out.toByteArray());\n      return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n    }\n    catch (Exception ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}