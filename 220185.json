{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testClearPreviousRecordFields().mjava","commits":[{"id":"986e12881edf3577b0b211320599354a4771de0c","date":1425932508,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testClearPreviousRecordFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testClearPreviousRecordFields() throws Exception{\n    String json= \"{\\n\" +\n        \"'first': 'John',\\n\" +\n        \"'exams': [\\n\" +\n        \"{'subject': 'Maths', 'test'   : 'term1', 'marks':90},\\n\" +\n        \"{'subject': 'Biology', 'test'   : 'term1', 'marks':86}\\n\" +\n        \"]\\n\" +\n        \"}\\n\" +\n        \"{\\n\" +\n        \"'first': 'Bob',\\n\" +\n        \"'exams': [\\n\" +\n        \"{'subject': 'Maths', 'test': 'term1', 'marks': 95\\n\" +\n        \"}\\n\" +\n        \",\\n\" +\n        \"{\\n\" +\n        \"'subject': 'Biology', 'test'   : 'term1', 'marks': 92}\\n\" +\n        \"]\\n\" +\n        \"}\";\n\n\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    streamer = JsonRecordReader.getInst(\"/exams\", Collections.singletonList(\"/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(4, records.size());\n\n    for (Map<String, Object> record : records) {\n      for (Map.Entry<String, Object> e : record.entrySet()) {\n        assertFalse(e.getValue() instanceof  List);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e0b642a3812459b02e629bc9b078a521513741b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0b642a3812459b02e629bc9b078a521513741b9","date":1425932588,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testClearPreviousRecordFields().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testClearPreviousRecordFields().mjava","sourceNew":"  public void testClearPreviousRecordFields() throws Exception {\n    String json = \"{\\n\" +\n        \"'first': 'John',\\n\" +\n        \"'exams': [\\n\" +\n        \"{'subject': 'Maths', 'test'   : 'term1', 'marks':90},\\n\" +\n        \"{'subject': 'Biology', 'test'   : 'term1', 'marks':86}\\n\" +\n        \"]\\n\" +\n        \"}\\n\" +\n        \"{\\n\" +\n        \"'first': 'Bob',\\n\" +\n        \"'exams': [\\n\" +\n        \"{'subject': 'Maths', 'test': 'term1', 'marks': 95\\n\" +\n        \"}\\n\" +\n        \",\\n\" +\n        \"{\\n\" +\n        \"'subject': 'Biology', 'test'   : 'term1', 'marks': 92}\\n\" +\n        \"]\\n\" +\n        \"}\";\n\n\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    streamer = JsonRecordReader.getInst(\"/exams\", Collections.singletonList(\"/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(4, records.size());\n\n    for (Map<String, Object> record : records) {\n      for (Map.Entry<String, Object> e : record.entrySet()) {\n        assertFalse(e.getValue() instanceof List);\n      }\n    }\n  }\n\n","sourceOld":"  public void testClearPreviousRecordFields() throws Exception{\n    String json= \"{\\n\" +\n        \"'first': 'John',\\n\" +\n        \"'exams': [\\n\" +\n        \"{'subject': 'Maths', 'test'   : 'term1', 'marks':90},\\n\" +\n        \"{'subject': 'Biology', 'test'   : 'term1', 'marks':86}\\n\" +\n        \"]\\n\" +\n        \"}\\n\" +\n        \"{\\n\" +\n        \"'first': 'Bob',\\n\" +\n        \"'exams': [\\n\" +\n        \"{'subject': 'Maths', 'test': 'term1', 'marks': 95\\n\" +\n        \"}\\n\" +\n        \",\\n\" +\n        \"{\\n\" +\n        \"'subject': 'Biology', 'test'   : 'term1', 'marks': 92}\\n\" +\n        \"]\\n\" +\n        \"}\";\n\n\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    streamer = JsonRecordReader.getInst(\"/exams\", Collections.singletonList(\"/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(4, records.size());\n\n    for (Map<String, Object> record : records) {\n      for (Map.Entry<String, Object> e : record.entrySet()) {\n        assertFalse(e.getValue() instanceof  List);\n      }\n    }\n  }\n\n","bugFix":["986e12881edf3577b0b211320599354a4771de0c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestJsonRecordReader#testClearPreviousRecordFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testClearPreviousRecordFields() throws Exception {\n    String json = \"{\\n\" +\n        \"'first': 'John',\\n\" +\n        \"'exams': [\\n\" +\n        \"{'subject': 'Maths', 'test'   : 'term1', 'marks':90},\\n\" +\n        \"{'subject': 'Biology', 'test'   : 'term1', 'marks':86}\\n\" +\n        \"]\\n\" +\n        \"}\\n\" +\n        \"{\\n\" +\n        \"'first': 'Bob',\\n\" +\n        \"'exams': [\\n\" +\n        \"{'subject': 'Maths', 'test': 'term1', 'marks': 95\\n\" +\n        \"}\\n\" +\n        \",\\n\" +\n        \"{\\n\" +\n        \"'subject': 'Biology', 'test'   : 'term1', 'marks': 92}\\n\" +\n        \"]\\n\" +\n        \"}\";\n\n\n    JsonRecordReader streamer;\n    List<Map<String, Object>> records;\n\n    streamer = JsonRecordReader.getInst(\"/exams\", Collections.singletonList(\"/**\"));\n    records = streamer.getAllRecords(new StringReader(json));\n    assertEquals(4, records.size());\n\n    for (Map<String, Object> record : records) {\n      for (Map.Entry<String, Object> e : record.entrySet()) {\n        assertFalse(e.getValue() instanceof List);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e0b642a3812459b02e629bc9b078a521513741b9"],"e0b642a3812459b02e629bc9b078a521513741b9":["986e12881edf3577b0b211320599354a4771de0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e0b642a3812459b02e629bc9b078a521513741b9"],"986e12881edf3577b0b211320599354a4771de0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","986e12881edf3577b0b211320599354a4771de0c"],"e0b642a3812459b02e629bc9b078a521513741b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"986e12881edf3577b0b211320599354a4771de0c":["e0b642a3812459b02e629bc9b078a521513741b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}