{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","commits":[{"id":"833eaf39eb6113cb67002b52c1416331abbc1570","date":1368205176,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","pathOld":"/dev/null","sourceNew":"  /** simple CJK synonym test */\n  public void testCJKSynonym() throws Exception {\n    BooleanQuery expected = new BooleanQuery(true);\n    expected.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    expected.add(new TermQuery(new Term(\"field\", \"國\")), BooleanClause.Occur.SHOULD);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockCJKSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"国\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"国\"));\n    expected.setBoost(2.0f);\n    assertEquals(expected, qp.parse(\"国^2\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","sourceNew":"  /** simple CJK synonym test */\n  public void testCJKSynonym() throws Exception {\n    BooleanQuery expected = new BooleanQuery(true);\n    expected.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    expected.add(new TermQuery(new Term(\"field\", \"國\")), BooleanClause.Occur.SHOULD);\n    QueryParser qp = new QueryParser(\"field\", new MockCJKSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"国\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"国\"));\n    expected.setBoost(2.0f);\n    assertEquals(expected, qp.parse(\"国^2\"));\n  }\n\n","sourceOld":"  /** simple CJK synonym test */\n  public void testCJKSynonym() throws Exception {\n    BooleanQuery expected = new BooleanQuery(true);\n    expected.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    expected.add(new TermQuery(new Term(\"field\", \"國\")), BooleanClause.Occur.SHOULD);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockCJKSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"国\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"国\"));\n    expected.setBoost(2.0f);\n    assertEquals(expected, qp.parse(\"国^2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","sourceNew":"  /** simple CJK synonym test */\n  public void testCJKSynonym() throws Exception {\n    BooleanQuery expected = new BooleanQuery(true);\n    expected.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    expected.add(new TermQuery(new Term(\"field\", \"國\")), BooleanClause.Occur.SHOULD);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockCJKSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"国\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"国\"));\n    expected.setBoost(2.0f);\n    assertEquals(expected, qp.parse(\"国^2\"));\n  }\n\n","sourceOld":"  /** simple CJK synonym test */\n  public void testCJKSynonym() throws Exception {\n    BooleanQuery expected = new BooleanQuery(true);\n    expected.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    expected.add(new TermQuery(new Term(\"field\", \"國\")), BooleanClause.Occur.SHOULD);\n    QueryParser qp = new QueryParser(\"field\", new MockCJKSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"国\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"国\"));\n    expected.setBoost(2.0f);\n    assertEquals(expected, qp.parse(\"国^2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","sourceNew":"  /** simple CJK synonym test */\n  public void testCJKSynonym() throws Exception {\n    BooleanQuery expected = new BooleanQuery(true);\n    expected.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    expected.add(new TermQuery(new Term(\"field\", \"國\")), BooleanClause.Occur.SHOULD);\n    QueryParser qp = new QueryParser(\"field\", new MockCJKSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"国\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"国\"));\n    expected.setBoost(2.0f);\n    assertEquals(expected, qp.parse(\"国^2\"));\n  }\n\n","sourceOld":"  /** simple CJK synonym test */\n  public void testCJKSynonym() throws Exception {\n    BooleanQuery expected = new BooleanQuery(true);\n    expected.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    expected.add(new TermQuery(new Term(\"field\", \"國\")), BooleanClause.Occur.SHOULD);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockCJKSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"国\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"国\"));\n    expected.setBoost(2.0f);\n    assertEquals(expected, qp.parse(\"国^2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","sourceNew":"  /** simple CJK synonym test */\n  public void testCJKSynonym() throws Exception {\n    BooleanQuery.Builder expectedB = new BooleanQuery.Builder();\n    expectedB.setDisableCoord(true);\n    expectedB.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    expectedB.add(new TermQuery(new Term(\"field\", \"國\")), BooleanClause.Occur.SHOULD);\n    Query expected = expectedB.build();\n    QueryParser qp = new QueryParser(\"field\", new MockCJKSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"国\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"国\"));\n    expected.setBoost(2.0f);\n    assertEquals(expected, qp.parse(\"国^2\"));\n  }\n\n","sourceOld":"  /** simple CJK synonym test */\n  public void testCJKSynonym() throws Exception {\n    BooleanQuery expected = new BooleanQuery(true);\n    expected.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    expected.add(new TermQuery(new Term(\"field\", \"國\")), BooleanClause.Occur.SHOULD);\n    QueryParser qp = new QueryParser(\"field\", new MockCJKSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"国\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"国\"));\n    expected.setBoost(2.0f);\n    assertEquals(expected, qp.parse(\"国^2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","sourceNew":"  /** simple CJK synonym test */\n  public void testCJKSynonym() throws Exception {\n    BooleanQuery.Builder expectedB = new BooleanQuery.Builder();\n    expectedB.setDisableCoord(true);\n    expectedB.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    expectedB.add(new TermQuery(new Term(\"field\", \"國\")), BooleanClause.Occur.SHOULD);\n    Query expected = expectedB.build();\n    QueryParser qp = new QueryParser(\"field\", new MockCJKSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"国\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"国\"));\n    expected = new BoostQuery(expected, 2f);\n    assertEquals(expected, qp.parse(\"国^2\"));\n  }\n\n","sourceOld":"  /** simple CJK synonym test */\n  public void testCJKSynonym() throws Exception {\n    BooleanQuery.Builder expectedB = new BooleanQuery.Builder();\n    expectedB.setDisableCoord(true);\n    expectedB.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    expectedB.add(new TermQuery(new Term(\"field\", \"國\")), BooleanClause.Occur.SHOULD);\n    Query expected = expectedB.build();\n    QueryParser qp = new QueryParser(\"field\", new MockCJKSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"国\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"国\"));\n    expected.setBoost(2.0f);\n    assertEquals(expected, qp.parse(\"国^2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","sourceNew":"  /** simple CJK synonym test */\n  public void testCJKSynonym() throws Exception {\n    Query expected = new SynonymQuery(new Term(\"field\", \"国\"), new Term(\"field\", \"國\"));\n    QueryParser qp = new QueryParser(\"field\", new MockCJKSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"国\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"国\"));\n    expected = new BoostQuery(expected, 2f);\n    assertEquals(expected, qp.parse(\"国^2\"));\n  }\n\n","sourceOld":"  /** simple CJK synonym test */\n  public void testCJKSynonym() throws Exception {\n    BooleanQuery.Builder expectedB = new BooleanQuery.Builder();\n    expectedB.setDisableCoord(true);\n    expectedB.add(new TermQuery(new Term(\"field\", \"国\")), BooleanClause.Occur.SHOULD);\n    expectedB.add(new TermQuery(new Term(\"field\", \"國\")), BooleanClause.Occur.SHOULD);\n    Query expected = expectedB.build();\n    QueryParser qp = new QueryParser(\"field\", new MockCJKSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"国\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"国\"));\n    expected = new BoostQuery(expected, 2f);\n    assertEquals(expected, qp.parse(\"国^2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","sourceNew":"  /** simple CJK synonym test */\n  public void testCJKSynonym() throws Exception {\n    Query expected = new SynonymQuery(new Term(FIELD, \"国\"), new Term(FIELD, \"國\"));\n    QueryParser qp = new QueryParser(FIELD, new MockCJKSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"国\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"国\"));\n    expected = new BoostQuery(expected, 2f);\n    assertEquals(expected, qp.parse(\"国^2\"));\n  }\n\n","sourceOld":"  /** simple CJK synonym test */\n  public void testCJKSynonym() throws Exception {\n    Query expected = new SynonymQuery(new Term(\"field\", \"国\"), new Term(\"field\", \"國\"));\n    QueryParser qp = new QueryParser(\"field\", new MockCJKSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"国\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"国\"));\n    expected = new BoostQuery(expected, 2f);\n    assertEquals(expected, qp.parse(\"国^2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","sourceNew":"  /** simple CJK synonym test */\n  public void testCJKSynonym() throws Exception {\n    Query expected = new SynonymQuery(new Term(FIELD, \"国\"), new Term(FIELD, \"國\"));\n    QueryParser qp = new QueryParser(FIELD, new MockCJKSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"国\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"国\"));\n    expected = new BoostQuery(expected, 2f);\n    assertEquals(expected, qp.parse(\"国^2\"));\n  }\n\n","sourceOld":"  /** simple CJK synonym test */\n  public void testCJKSynonym() throws Exception {\n    Query expected = new SynonymQuery(new Term(\"field\", \"国\"), new Term(\"field\", \"國\"));\n    QueryParser qp = new QueryParser(\"field\", new MockCJKSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"国\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"国\"));\n    expected = new BoostQuery(expected, 2f);\n    assertEquals(expected, qp.parse(\"国^2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df25592b82060bc1c800e87bf019444bf0ddf9d4","date":1552296011,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testCJKSynonym().mjava","sourceNew":"  /** simple CJK synonym test */\n  public void testCJKSynonym() throws Exception {\n    Query expected = new SynonymQuery.Builder(FIELD)\n        .addTerm(new Term(FIELD, \"国\"))\n        .addTerm(new Term(FIELD, \"國\"))\n        .build();\n    QueryParser qp = new QueryParser(FIELD, new MockCJKSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"国\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"国\"));\n    expected = new BoostQuery(expected, 2f);\n    assertEquals(expected, qp.parse(\"国^2\"));\n  }\n\n","sourceOld":"  /** simple CJK synonym test */\n  public void testCJKSynonym() throws Exception {\n    Query expected = new SynonymQuery(new Term(FIELD, \"国\"), new Term(FIELD, \"國\"));\n    QueryParser qp = new QueryParser(FIELD, new MockCJKSynonymAnalyzer());\n    assertEquals(expected, qp.parse(\"国\"));\n    qp.setDefaultOperator(Operator.AND);\n    assertEquals(expected, qp.parse(\"国\"));\n    expected = new BoostQuery(expected, 2f);\n    assertEquals(expected, qp.parse(\"国^2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["833eaf39eb6113cb67002b52c1416331abbc1570"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["ea4107f60b9f95623c16025c9c247412ff809092"],"833eaf39eb6113cb67002b52c1416331abbc1570":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ea4107f60b9f95623c16025c9c247412ff809092":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["81d0720146de53dd3a4a023d2a3d1089d86d748d","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df25592b82060bc1c800e87bf019444bf0ddf9d4"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["833eaf39eb6113cb67002b52c1416331abbc1570"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"833eaf39eb6113cb67002b52c1416331abbc1570":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ea4107f60b9f95623c16025c9c247412ff809092":["df25592b82060bc1c800e87bf019444bf0ddf9d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}