{"path":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#beforeTests().mjava","commits":[{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#beforeTests().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema-docValues.xml\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#beforeTests().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema-docValues.xml\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5cc22ce99f9ec86f1d1e55d36aaefac498ada97","date":1458507332,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#beforeTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#beforeTests().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema-docValues.xml\");\n\n    // sanity check our schema meets our expectations\n    final IndexSchema schema = h.getCore().getLatestSchema();\n    for (String f : new String[] {\"floatdv\", \"intdv\", \"doubledv\", \"longdv\", \"datedv\", \"stringdv\"}) {\n      final SchemaField sf = schema.getField(f);\n      assertFalse(f + \" is multiValued, test is useless, who changed the schema?\",\n                  sf.multiValued());\n      assertFalse(f + \" is indexed, test is useless, who changed the schema?\",\n                  sf.indexed());\n      assertTrue(f + \" has no docValues, test is useless, who changed the schema?\",\n                 sf.hasDocValues());\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema-docValues.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","date":1465691899,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#beforeTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#beforeTests().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema-docValues.xml\");\n\n    // sanity check our schema meets our expectations\n    final IndexSchema schema = h.getCore().getLatestSchema();\n    for (String f : new String[] {\"floatdv\", \"intdv\", \"doubledv\", \"longdv\", \"datedv\", \"stringdv\", \"booldv\"}) {\n      final SchemaField sf = schema.getField(f);\n      assertFalse(f + \" is multiValued, test is useless, who changed the schema?\",\n                  sf.multiValued());\n      assertFalse(f + \" is indexed, test is useless, who changed the schema?\",\n                  sf.indexed());\n      assertTrue(f + \" has no docValues, test is useless, who changed the schema?\",\n                 sf.hasDocValues());\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema-docValues.xml\");\n\n    // sanity check our schema meets our expectations\n    final IndexSchema schema = h.getCore().getLatestSchema();\n    for (String f : new String[] {\"floatdv\", \"intdv\", \"doubledv\", \"longdv\", \"datedv\", \"stringdv\"}) {\n      final SchemaField sf = schema.getField(f);\n      assertFalse(f + \" is multiValued, test is useless, who changed the schema?\",\n                  sf.multiValued());\n      assertFalse(f + \" is indexed, test is useless, who changed the schema?\",\n                  sf.indexed());\n      assertTrue(f + \" has no docValues, test is useless, who changed the schema?\",\n                 sf.hasDocValues());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#beforeTests().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#beforeTests().mjava","sourceNew":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema-docValues.xml\");\n\n    // sanity check our schema meets our expectations\n    final IndexSchema schema = h.getCore().getLatestSchema();\n    for (String f : new String[] {\"floatdv\", \"intdv\", \"doubledv\", \"longdv\", \"datedv\", \"stringdv\", \"booldv\"}) {\n      final SchemaField sf = schema.getField(f);\n      assertFalse(f + \" is multiValued, test is useless, who changed the schema?\",\n                  sf.multiValued());\n      assertFalse(f + \" is indexed, test is useless, who changed the schema?\",\n                  sf.indexed());\n      assertTrue(f + \" has no docValues, test is useless, who changed the schema?\",\n                 sf.hasDocValues());\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeTests() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema-docValues.xml\");\n\n    // sanity check our schema meets our expectations\n    final IndexSchema schema = h.getCore().getLatestSchema();\n    for (String f : new String[] {\"floatdv\", \"intdv\", \"doubledv\", \"longdv\", \"datedv\", \"stringdv\"}) {\n      final SchemaField sf = schema.getField(f);\n      assertFalse(f + \" is multiValued, test is useless, who changed the schema?\",\n                  sf.multiValued());\n      assertFalse(f + \" is indexed, test is useless, who changed the schema?\",\n                  sf.indexed());\n      assertTrue(f + \" has no docValues, test is useless, who changed the schema?\",\n                 sf.hasDocValues());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95303ff3749680c743b9425f9cf99e6e4065e8a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73bb5a57dc75b54a39494f99986599cae7dff417"],"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["c5cc22ce99f9ec86f1d1e55d36aaefac498ada97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5cc22ce99f9ec86f1d1e55d36aaefac498ada97":["73bb5a57dc75b54a39494f99986599cae7dff417"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c5cc22ce99f9ec86f1d1e55d36aaefac498ada97","7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"73bb5a57dc75b54a39494f99986599cae7dff417":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c5cc22ce99f9ec86f1d1e55d36aaefac498ada97":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"73bb5a57dc75b54a39494f99986599cae7dff417":["95303ff3749680c743b9425f9cf99e6e4065e8a8","c5cc22ce99f9ec86f1d1e55d36aaefac498ada97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}