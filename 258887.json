{"path":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testSameTargetReindexing().mjava","commits":[{"id":"dad6a48950aafc9c2f5dc54740f8c6ab81304203","date":1552999379,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testSameTargetReindexing().mjava","pathOld":"/dev/null","sourceNew":"  public void testSameTargetReindexing() throws Exception {\n    final String sourceCollection = \"sameTargetReindexing\";\n    final String targetCollection = sourceCollection;\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    req.process(solrClient);\n\n    String realTargetCollection = null;\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    String prefix = ReindexCollectionCmd.TARGET_COL_PREFIX + targetCollection;\n    while (!timeOut.hasTimedOut()) {\n      timeOut.sleep(500);\n      for (String name : cloudManager.getClusterStateProvider().getClusterState().getCollectionsMap().keySet()) {\n        if (name.startsWith(prefix)) {\n          realTargetCollection = name;\n          break;\n        }\n      }\n      if (realTargetCollection != null) {\n        break;\n      }\n    }\n    assertNotNull(\"target collection not present after 30s\", realTargetCollection);\n\n    CloudTestUtils.waitForState(cloudManager, \"did not finish copying in time\", realTargetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testSameTargetReindexing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testSameTargetReindexing().mjava","sourceNew":"  public void testSameTargetReindexing() throws Exception {\n    final String sourceCollection = \"sameTargetReindexing\";\n    final String targetCollection = sourceCollection;\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    req.process(solrClient);\n\n    String realTargetCollection = null;\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    String prefix = ReindexCollectionCmd.TARGET_COL_PREFIX + targetCollection;\n    while (!timeOut.hasTimedOut()) {\n      timeOut.sleep(500);\n      for (String name : cloudManager.getClusterStateProvider().getClusterState().getCollectionsMap().keySet()) {\n        if (name.startsWith(prefix)) {\n          realTargetCollection = name;\n          break;\n        }\n      }\n      if (realTargetCollection != null) {\n        break;\n      }\n    }\n    assertNotNull(\"target collection not present after 30s\", realTargetCollection);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", realTargetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n  }\n\n","sourceOld":"  public void testSameTargetReindexing() throws Exception {\n    final String sourceCollection = \"sameTargetReindexing\";\n    final String targetCollection = sourceCollection;\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    req.process(solrClient);\n\n    String realTargetCollection = null;\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    String prefix = ReindexCollectionCmd.TARGET_COL_PREFIX + targetCollection;\n    while (!timeOut.hasTimedOut()) {\n      timeOut.sleep(500);\n      for (String name : cloudManager.getClusterStateProvider().getClusterState().getCollectionsMap().keySet()) {\n        if (name.startsWith(prefix)) {\n          realTargetCollection = name;\n          break;\n        }\n      }\n      if (realTargetCollection != null) {\n        break;\n      }\n    }\n    assertNotNull(\"target collection not present after 30s\", realTargetCollection);\n\n    CloudTestUtils.waitForState(cloudManager, \"did not finish copying in time\", realTargetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c","date":1557431147,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testSameTargetReindexing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testSameTargetReindexing().mjava","sourceNew":"  public void testSameTargetReindexing() throws Exception {\n    final String sourceCollection = \"sameTargetReindexing\";\n    final String targetCollection = sourceCollection;\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    req.process(solrClient);\n\n    String realTargetCollection = null;\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    String prefix = ReindexCollectionCmd.TARGET_COL_PREFIX + targetCollection;\n    while (!timeOut.hasTimedOut()) {\n      timeOut.sleep(500);\n      for (String name : cloudManager.getClusterStateProvider().getClusterState().getCollectionsMap().keySet()) {\n        if (name.startsWith(prefix)) {\n          realTargetCollection = name;\n          break;\n        }\n      }\n      if (realTargetCollection != null) {\n        break;\n      }\n    }\n    assertNotNull(\"target collection not present after 30s\", realTargetCollection);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", realTargetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.testSameTargetReindex\", true);\n    assertEquals(\"copied num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n  }\n\n","sourceOld":"  public void testSameTargetReindexing() throws Exception {\n    final String sourceCollection = \"sameTargetReindexing\";\n    final String targetCollection = sourceCollection;\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    req.process(solrClient);\n\n    String realTargetCollection = null;\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    String prefix = ReindexCollectionCmd.TARGET_COL_PREFIX + targetCollection;\n    while (!timeOut.hasTimedOut()) {\n      timeOut.sleep(500);\n      for (String name : cloudManager.getClusterStateProvider().getClusterState().getCollectionsMap().keySet()) {\n        if (name.startsWith(prefix)) {\n          realTargetCollection = name;\n          break;\n        }\n      }\n      if (realTargetCollection != null) {\n        break;\n      }\n    }\n    assertNotNull(\"target collection not present after 30s\", realTargetCollection);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", realTargetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62facbbf49f5753b766d5d66140d1881c73e352f","date":1557682606,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testSameTargetReindexing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testSameTargetReindexing().mjava","sourceNew":"  public void testSameTargetReindexing() throws Exception {\n    final String sourceCollection = \"sameTargetReindexing\";\n    final String targetCollection = sourceCollection;\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    req.process(solrClient);\n\n    String realTargetCollection = null;\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    String prefix = ReindexCollectionCmd.TARGET_COL_PREFIX + targetCollection;\n    while (!timeOut.hasTimedOut()) {\n      timeOut.sleep(500);\n      for (String name : cloudManager.getClusterStateProvider().getClusterState().getCollectionsMap().keySet()) {\n        if (name.startsWith(prefix)) {\n          realTargetCollection = name;\n          break;\n        }\n      }\n      if (realTargetCollection != null) {\n        break;\n      }\n    }\n    assertNotNull(\"target collection not present after 30s\", realTargetCollection);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", realTargetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.testSameTargetReindex\", true);\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n  }\n\n","sourceOld":"  public void testSameTargetReindexing() throws Exception {\n    final String sourceCollection = \"sameTargetReindexing\";\n    final String targetCollection = sourceCollection;\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    req.process(solrClient);\n\n    String realTargetCollection = null;\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    String prefix = ReindexCollectionCmd.TARGET_COL_PREFIX + targetCollection;\n    while (!timeOut.hasTimedOut()) {\n      timeOut.sleep(500);\n      for (String name : cloudManager.getClusterStateProvider().getClusterState().getCollectionsMap().keySet()) {\n        if (name.startsWith(prefix)) {\n          realTargetCollection = name;\n          break;\n        }\n      }\n      if (realTargetCollection != null) {\n        break;\n      }\n    }\n    assertNotNull(\"target collection not present after 30s\", realTargetCollection);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", realTargetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.testSameTargetReindex\", true);\n    assertEquals(\"copied num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b137ac261d96fa4d6176349645cfc0f68b9ba1e1","date":1558626214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testSameTargetReindexing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testSameTargetReindexing().mjava","sourceNew":"  public void testSameTargetReindexing() throws Exception {\n    final String sourceCollection = \"sameTargetReindexing\";\n    final String targetCollection = sourceCollection;\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    req.process(solrClient);\n\n    String realTargetCollection = null;\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    String prefix = ReindexCollectionCmd.TARGET_COL_PREFIX + targetCollection;\n    while (!timeOut.hasTimedOut()) {\n      timeOut.sleep(500);\n      for (String name : cloudManager.getClusterStateProvider().getClusterState().getCollectionsMap().keySet()) {\n        if (name.startsWith(prefix)) {\n          realTargetCollection = name;\n          break;\n        }\n      }\n      if (realTargetCollection != null) {\n        break;\n      }\n    }\n    assertNotNull(\"target collection not present after 30s\", realTargetCollection);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", realTargetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.testSameTargetReindex\", false);\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n  }\n\n","sourceOld":"  public void testSameTargetReindexing() throws Exception {\n    final String sourceCollection = \"sameTargetReindexing\";\n    final String targetCollection = sourceCollection;\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    req.process(solrClient);\n\n    String realTargetCollection = null;\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    String prefix = ReindexCollectionCmd.TARGET_COL_PREFIX + targetCollection;\n    while (!timeOut.hasTimedOut()) {\n      timeOut.sleep(500);\n      for (String name : cloudManager.getClusterStateProvider().getClusterState().getCollectionsMap().keySet()) {\n        if (name.startsWith(prefix)) {\n          realTargetCollection = name;\n          break;\n        }\n      }\n      if (realTargetCollection != null) {\n        break;\n      }\n    }\n    assertNotNull(\"target collection not present after 30s\", realTargetCollection);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", realTargetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.testSameTargetReindex\", true);\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c","date":1562161956,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testSameTargetReindexing().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ReindexCollectionTest#testSameTargetReindexing().mjava","sourceNew":"  @Test\n  public void testSameTargetReindexing() throws Exception {\n    doTestSameTargetReindexing(false, false);\n    doTestSameTargetReindexing(false, true);\n    doTestSameTargetReindexing(true, false);\n    doTestSameTargetReindexing(true, true);\n  }\n\n","sourceOld":"  public void testSameTargetReindexing() throws Exception {\n    final String sourceCollection = \"sameTargetReindexing\";\n    final String targetCollection = sourceCollection;\n\n    createCollection(sourceCollection, \"conf1\", 2, 2);\n    indexDocs(sourceCollection, NUM_DOCS,\n        i -> new SolrInputDocument(\"id\", String.valueOf(i), \"string_s\", String.valueOf(i)));\n\n    CollectionAdminRequest.ReindexCollection req = CollectionAdminRequest.reindexCollection(sourceCollection)\n        .setTarget(targetCollection);\n    req.process(solrClient);\n\n    String realTargetCollection = null;\n    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    String prefix = ReindexCollectionCmd.TARGET_COL_PREFIX + targetCollection;\n    while (!timeOut.hasTimedOut()) {\n      timeOut.sleep(500);\n      for (String name : cloudManager.getClusterStateProvider().getClusterState().getCollectionsMap().keySet()) {\n        if (name.startsWith(prefix)) {\n          realTargetCollection = name;\n          break;\n        }\n      }\n      if (realTargetCollection != null) {\n        break;\n      }\n    }\n    assertNotNull(\"target collection not present after 30s\", realTargetCollection);\n\n    CloudUtil.waitForState(cloudManager, \"did not finish copying in time\", realTargetCollection, (liveNodes, coll) -> {\n      ReindexCollectionCmd.State state = ReindexCollectionCmd.State.get(coll.getStr(ReindexCollectionCmd.REINDEXING_STATE));\n      return ReindexCollectionCmd.State.FINISHED == state;\n    });\n    SolrTestCaseJ4.Solr11035BandAid(solrClient, targetCollection, \"id\", NUM_DOCS, \"*:*\",\n        \"ReindexCollectionTest.testSameTargetReindex\", false);\n    // verify the target docs exist\n    QueryResponse rsp = solrClient.query(targetCollection, params(CommonParams.Q, \"*:*\"));\n    assertEquals(\"copied num docs\", NUM_DOCS, rsp.getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b137ac261d96fa4d6176349645cfc0f68b9ba1e1":["62facbbf49f5753b766d5d66140d1881c73e352f"],"9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"62facbbf49f5753b766d5d66140d1881c73e352f":["9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["b137ac261d96fa4d6176349645cfc0f68b9ba1e1"]},"commit2Childs":{"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"b137ac261d96fa4d6176349645cfc0f68b9ba1e1":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c":["62facbbf49f5753b766d5d66140d1881c73e352f"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["9d1b2d0c6ded13ab96ad6447c1a48eb58f8a377c"],"62facbbf49f5753b766d5d66140d1881c73e352f":["b137ac261d96fa4d6176349645cfc0f68b9ba1e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}