{"path":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#mergeBinaryField(FieldInfo,MergeState,List[BinaryDocValues]).mjava","commits":[{"id":"4b53a9a930ee01857178a1b512fbab24642f3fa8","date":1354471097,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#mergeBinaryField(FieldInfo,MergeState,List[BinaryDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#mergeBinaryField(MergeState).mjava","sourceNew":"  // dead simple impl: codec can optimize\n  public void mergeBinaryField(FieldInfo fieldInfo, MergeState mergeState, List<BinaryDocValues> toMerge) throws IOException {\n    // first compute fixedLength and maxLength of live ones to be merged.\n    // nocommit: messy, and can be simplified by using docValues.maxLength/fixedLength in many cases.\n    boolean fixedLength = true;\n    int maxLength = -1;\n    BytesRef bytes = new BytesRef();\n    for (int readerIDX=0;readerIDX<toMerge.size();readerIDX++) {\n      AtomicReader reader = mergeState.readers.get(readerIDX);      \n      int maxDoc = reader.maxDoc();\n      Bits liveDocs = reader.getLiveDocs();\n      BinaryDocValues values = toMerge.get(readerIDX);\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          values.get(i, bytes);\n          if (maxLength == -1) {\n            maxLength = bytes.length;\n          } else {\n            fixedLength &= bytes.length == maxLength;\n            maxLength = Math.max(bytes.length, maxLength);\n          }\n        }\n        mergeState.checkAbort.work(300);\n      }\n    }\n    // now we can merge\n    assert maxLength >= 0; // could this happen (nothing to do?)\n    BinaryDocValuesConsumer field = addBinaryField(fieldInfo, fixedLength, maxLength);\n    field.merge(mergeState, toMerge);\n  }\n\n","sourceOld":"  // dead simple impl: codec can optimize\n  protected void mergeBinaryField(MergeState mergeState) throws IOException {\n    // first compute fixedLength and maxLength of live ones to be merged.\n    // nocommit: messy, and can be simplified by using docValues.maxLength/fixedLength in many cases.\n    boolean fixedLength = true;\n    int maxLength = -1;\n    BytesRef bytes = new BytesRef();\n    for (AtomicReader reader : mergeState.readers) {\n      final int maxDoc = reader.maxDoc();\n      final Bits liveDocs = reader.getLiveDocs();\n      BinaryDocValues docValues = reader.getBinaryDocValues(mergeState.fieldInfo.name);\n      if (docValues == null) {\n        docValues = new BinaryDocValues.EMPTY(maxDoc);\n      }\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          docValues.get(i, bytes);\n          if (maxLength == -1) {\n            maxLength = bytes.length;\n          } else {\n            fixedLength &= bytes.length == maxLength;\n            maxLength = Math.max(bytes.length, maxLength);\n          }\n        }\n        mergeState.checkAbort.work(300);\n      }\n    }\n    // now we can merge\n    assert maxLength >= 0; // could this happen (nothing to do?)\n    BinaryDocValuesConsumer field = addBinaryField(mergeState.fieldInfo, fixedLength, maxLength);\n    field.merge(mergeState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"746e3645169db50c8f53252b30d6bc9ac21dea7c","date":1357597773,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#mergeBinaryField(FieldInfo,MergeState,List[BinaryDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#mergeBinaryField(FieldInfo,MergeState,List[BinaryDocValues]).mjava","sourceNew":"  // dead simple impl: codec can optimize\n  public void mergeBinaryField(FieldInfo fieldInfo, final MergeState mergeState, final List<BinaryDocValues> toMerge) throws IOException {\n\n    addBinaryField(fieldInfo,\n                   new Iterable<BytesRef>() {\n                     @Override\n                     public Iterator<BytesRef> iterator() {\n                       return new Iterator<BytesRef>() {\n                         int readerUpto = -1;\n                         int docIDUpto;\n                         BytesRef nextValue = new BytesRef();\n                         AtomicReader currentReader;\n                         BinaryDocValues currentValues;\n                         Bits currentLiveDocs;\n                         boolean nextIsSet;\n\n                         @Override\n                         public boolean hasNext() {\n                           return nextIsSet || setNext();\n                         }\n\n                         @Override\n                         public void remove() {\n                           throw new UnsupportedOperationException();\n                         }\n\n                         @Override\n                         public BytesRef next() {\n                           if (!hasNext()) {\n                             throw new NoSuchElementException();\n                           }\n                           assert nextIsSet;\n                           nextIsSet = false;\n                           // nocommit make a mutable number\n                           return nextValue;\n                         }\n\n                         private boolean setNext() {\n                           while (true) {\n                             if (readerUpto == toMerge.size()) {\n                               return false;\n                             }\n\n                             if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                               readerUpto++;\n                               if (readerUpto < toMerge.size()) {\n                                 currentReader = mergeState.readers.get(readerUpto);\n                                 currentValues = toMerge.get(readerUpto);\n                                 currentLiveDocs = currentReader.getLiveDocs();\n                               }\n                               docIDUpto = 0;\n                               continue;\n                             }\n\n                             if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                               nextIsSet = true;\n                               currentValues.get(docIDUpto, nextValue);\n                               docIDUpto++;\n                               return true;\n                             }\n\n                             docIDUpto++;\n                           }\n                         }\n                       };\n                     }\n                   });\n  }\n\n","sourceOld":"  // dead simple impl: codec can optimize\n  public void mergeBinaryField(FieldInfo fieldInfo, MergeState mergeState, List<BinaryDocValues> toMerge) throws IOException {\n    // first compute fixedLength and maxLength of live ones to be merged.\n    // nocommit: messy, and can be simplified by using docValues.maxLength/fixedLength in many cases.\n    boolean fixedLength = true;\n    int maxLength = -1;\n    BytesRef bytes = new BytesRef();\n    for (int readerIDX=0;readerIDX<toMerge.size();readerIDX++) {\n      AtomicReader reader = mergeState.readers.get(readerIDX);      \n      int maxDoc = reader.maxDoc();\n      Bits liveDocs = reader.getLiveDocs();\n      BinaryDocValues values = toMerge.get(readerIDX);\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          values.get(i, bytes);\n          if (maxLength == -1) {\n            maxLength = bytes.length;\n          } else {\n            fixedLength &= bytes.length == maxLength;\n            maxLength = Math.max(bytes.length, maxLength);\n          }\n        }\n        mergeState.checkAbort.work(300);\n      }\n    }\n    // now we can merge\n    assert maxLength >= 0; // could this happen (nothing to do?)\n    BinaryDocValuesConsumer field = addBinaryField(fieldInfo, fixedLength, maxLength);\n    field.merge(mergeState, toMerge);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeBinaryField(FieldInfo,MergeState,List[BinaryDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#mergeBinaryField(FieldInfo,MergeState,List[BinaryDocValues]).mjava","sourceNew":"  // dead simple impl: codec can optimize\n  public void mergeBinaryField(FieldInfo fieldInfo, final MergeState mergeState, final List<BinaryDocValues> toMerge) throws IOException {\n\n    addBinaryField(fieldInfo,\n                   new Iterable<BytesRef>() {\n                     @Override\n                     public Iterator<BytesRef> iterator() {\n                       return new Iterator<BytesRef>() {\n                         int readerUpto = -1;\n                         int docIDUpto;\n                         BytesRef nextValue = new BytesRef();\n                         AtomicReader currentReader;\n                         BinaryDocValues currentValues;\n                         Bits currentLiveDocs;\n                         boolean nextIsSet;\n\n                         @Override\n                         public boolean hasNext() {\n                           return nextIsSet || setNext();\n                         }\n\n                         @Override\n                         public void remove() {\n                           throw new UnsupportedOperationException();\n                         }\n\n                         @Override\n                         public BytesRef next() {\n                           if (!hasNext()) {\n                             throw new NoSuchElementException();\n                           }\n                           assert nextIsSet;\n                           nextIsSet = false;\n                           // nocommit make a mutable number\n                           return nextValue;\n                         }\n\n                         private boolean setNext() {\n                           while (true) {\n                             if (readerUpto == toMerge.size()) {\n                               return false;\n                             }\n\n                             if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                               readerUpto++;\n                               if (readerUpto < toMerge.size()) {\n                                 currentReader = mergeState.readers.get(readerUpto);\n                                 currentValues = toMerge.get(readerUpto);\n                                 currentLiveDocs = currentReader.getLiveDocs();\n                               }\n                               docIDUpto = 0;\n                               continue;\n                             }\n\n                             if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                               nextIsSet = true;\n                               currentValues.get(docIDUpto, nextValue);\n                               docIDUpto++;\n                               return true;\n                             }\n\n                             docIDUpto++;\n                           }\n                         }\n                       };\n                     }\n                   });\n  }\n\n","sourceOld":"  // dead simple impl: codec can optimize\n  public void mergeBinaryField(FieldInfo fieldInfo, final MergeState mergeState, final List<BinaryDocValues> toMerge) throws IOException {\n\n    addBinaryField(fieldInfo,\n                   new Iterable<BytesRef>() {\n                     @Override\n                     public Iterator<BytesRef> iterator() {\n                       return new Iterator<BytesRef>() {\n                         int readerUpto = -1;\n                         int docIDUpto;\n                         BytesRef nextValue = new BytesRef();\n                         AtomicReader currentReader;\n                         BinaryDocValues currentValues;\n                         Bits currentLiveDocs;\n                         boolean nextIsSet;\n\n                         @Override\n                         public boolean hasNext() {\n                           return nextIsSet || setNext();\n                         }\n\n                         @Override\n                         public void remove() {\n                           throw new UnsupportedOperationException();\n                         }\n\n                         @Override\n                         public BytesRef next() {\n                           if (!hasNext()) {\n                             throw new NoSuchElementException();\n                           }\n                           assert nextIsSet;\n                           nextIsSet = false;\n                           // nocommit make a mutable number\n                           return nextValue;\n                         }\n\n                         private boolean setNext() {\n                           while (true) {\n                             if (readerUpto == toMerge.size()) {\n                               return false;\n                             }\n\n                             if (currentReader == null || docIDUpto == currentReader.maxDoc()) {\n                               readerUpto++;\n                               if (readerUpto < toMerge.size()) {\n                                 currentReader = mergeState.readers.get(readerUpto);\n                                 currentValues = toMerge.get(readerUpto);\n                                 currentLiveDocs = currentReader.getLiveDocs();\n                               }\n                               docIDUpto = 0;\n                               continue;\n                             }\n\n                             if (currentLiveDocs == null || currentLiveDocs.get(docIDUpto)) {\n                               nextIsSet = true;\n                               currentValues.get(docIDUpto, nextValue);\n                               docIDUpto++;\n                               return true;\n                             }\n\n                             docIDUpto++;\n                           }\n                         }\n                       };\n                     }\n                   });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["4b53a9a930ee01857178a1b512fbab24642f3fa8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b53a9a930ee01857178a1b512fbab24642f3fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":[],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4b53a9a930ee01857178a1b512fbab24642f3fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b53a9a930ee01857178a1b512fbab24642f3fa8":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}