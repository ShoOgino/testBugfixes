{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      solrCore.getSearcher(true, false, null);\n      \n      replicationHandler.refreshCommitpoint();\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      solrCore.getSearcher(true, false, null);\n      \n      replicationHandler.refreshCommitpoint();\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      solrCore.getSearcher(true, false, null);\n      \n      replicationHandler.refreshCommitpoint();\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      solrCore.getSearcher(true, false, null);\n      \n      replicationHandler.refreshCommitpoint();\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      solrCore.getSearcher(true, false, null);\n      \n      replicationHandler.refreshCommitpoint();\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      solrCore.getSearcher(true, false, null);\n      \n      replicationHandler.refreshCommitpoint();\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      solrCore.getSearcher(true, false, null);\n      \n      replicationHandler.refreshCommitpoint();\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["0a9750a6c46ff39b790de4d219e59b8647310d00","0a9750a6c46ff39b790de4d219e59b8647310d00","0a9750a6c46ff39b790de4d219e59b8647310d00","43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      solrCore.getSearcher(true, false, null);\n      \n      replicationHandler.refreshCommitpoint();\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      solrCore.getSearcher(true, false, null);\n      \n      replicationHandler.refreshCommitpoint();\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a3d37067b41c348decf3e202f352c90ef307686","date":1330107565,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter();\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter();\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    try {\n      \n      // reboot the writer on the new index and get a new searcher\n      solrCore.getUpdateHandler().newIndexWriter();\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1381b91b03f7409d8d548c7070dbc615931a0f50","date":1343667369,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(true);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter();\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(true);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter();\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(true);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter();\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469","date":1345037674,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(true);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(true);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit().mjava","sourceNew":"  private void doCommit(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  private void doCommit() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(true);\n    \n    try {\n      // first try to open an NRT searcher so that the new \n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n         waitSearcher[0].get();\n       } catch (InterruptedException e) {\n         SolrException.log(LOG,e);\n       } catch (ExecutionException e) {\n         SolrException.log(LOG,e);\n       }\n     }\n\n      // update our commit point to the right dir\n      solrCore.getUpdateHandler().commit(new CommitUpdateCommand(req, false));\n\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"616c1830142ff5c1ddedec1ed898733b73c8e23b":["d6f074e73200c07d54f242d3880a8da5a35ff97b","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","3a3d37067b41c348decf3e202f352c90ef307686"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"1381b91b03f7409d8d548c7070dbc615931a0f50":["3a3d37067b41c348decf3e202f352c90ef307686"],"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469":["1381b91b03f7409d8d548c7070dbc615931a0f50"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["3a3d37067b41c348decf3e202f352c90ef307686","1381b91b03f7409d8d548c7070dbc615931a0f50"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["3a3d37067b41c348decf3e202f352c90ef307686","1381b91b03f7409d8d548c7070dbc615931a0f50"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a3d37067b41c348decf3e202f352c90ef307686":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"]},"commit2Childs":{"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"1381b91b03f7409d8d548c7070dbc615931a0f50":["b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["616c1830142ff5c1ddedec1ed898733b73c8e23b"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","3a3d37067b41c348decf3e202f352c90ef307686"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"3a3d37067b41c348decf3e202f352c90ef307686":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","1381b91b03f7409d8d548c7070dbc615931a0f50","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}