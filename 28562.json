{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testOpenIfChangedManySegments().mjava","commits":[{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testOpenIfChangedManySegments().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOpenIfChangedManySegments() throws Exception {\n    // test openIfChanged() when the taxonomy contains many segments\n    Directory dir = newDirectory();\n    \n    DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir) {\n      @Override\n      protected IndexWriterConfig createIndexWriterConfig(OpenMode openMode) {\n        IndexWriterConfig conf = super.createIndexWriterConfig(openMode);\n        LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setMergeFactor(2);\n        return conf;\n      }\n    };\n    TaxonomyReader reader = new DirectoryTaxonomyReader(writer);\n    \n    int numRounds = random().nextInt(10) + 10;\n    int numCategories = 1; // one for root\n    for (int i = 0; i < numRounds; i++) {\n      int numCats = random().nextInt(4) + 1;\n      for (int j = 0; j < numCats; j++) {\n        writer.addCategory(new CategoryPath(Integer.toString(i), Integer.toString(j)));\n      }\n      numCategories += numCats + 1 /* one for round-parent */;\n      TaxonomyReader newtr = TaxonomyReader.openIfChanged(reader);\n      assertNotNull(newtr);\n      reader.close();\n      reader = newtr;\n      \n      // assert categories\n      assertEquals(numCategories, reader.getSize());\n      int roundOrdinal = reader.getOrdinal(new CategoryPath(Integer.toString(i)));\n      int[] parents = reader.getParentArray();\n      assertEquals(0, parents[roundOrdinal]); // round's parent is root\n      for (int j = 0; j < numCats; j++) {\n        int ord = reader.getOrdinal(new CategoryPath(Integer.toString(i), Integer.toString(j)));\n        assertEquals(roundOrdinal, parents[ord]); // round's parent is root\n      }\n    }\n    \n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d58d08788c3fd51172ba34474cca42499d6391b","date":1354802133,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testOpenIfChangedManySegments().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testOpenIfChangedManySegments().mjava","sourceNew":"  @Test\n  public void testOpenIfChangedManySegments() throws Exception {\n    // test openIfChanged() when the taxonomy contains many segments\n    Directory dir = newDirectory();\n    \n    DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir) {\n      @Override\n      protected IndexWriterConfig createIndexWriterConfig(OpenMode openMode) {\n        IndexWriterConfig conf = super.createIndexWriterConfig(openMode);\n        LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setMergeFactor(2);\n        return conf;\n      }\n    };\n    TaxonomyReader reader = new DirectoryTaxonomyReader(writer);\n    \n    int numRounds = random().nextInt(10) + 10;\n    int numCategories = 1; // one for root\n    for (int i = 0; i < numRounds; i++) {\n      int numCats = random().nextInt(4) + 1;\n      for (int j = 0; j < numCats; j++) {\n        writer.addCategory(new CategoryPath(Integer.toString(i), Integer.toString(j)));\n      }\n      numCategories += numCats + 1 /* one for round-parent */;\n      TaxonomyReader newtr = TaxonomyReader.openIfChanged(reader);\n      assertNotNull(newtr);\n      reader.close();\n      reader = newtr;\n      \n      // assert categories\n      assertEquals(numCategories, reader.getSize());\n      int roundOrdinal = reader.getOrdinal(new CategoryPath(Integer.toString(i)));\n      int[] parents = reader.getParallelTaxonomyArrays().parents();\n      assertEquals(0, parents[roundOrdinal]); // round's parent is root\n      for (int j = 0; j < numCats; j++) {\n        int ord = reader.getOrdinal(new CategoryPath(Integer.toString(i), Integer.toString(j)));\n        assertEquals(roundOrdinal, parents[ord]); // round's parent is root\n      }\n    }\n    \n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testOpenIfChangedManySegments() throws Exception {\n    // test openIfChanged() when the taxonomy contains many segments\n    Directory dir = newDirectory();\n    \n    DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir) {\n      @Override\n      protected IndexWriterConfig createIndexWriterConfig(OpenMode openMode) {\n        IndexWriterConfig conf = super.createIndexWriterConfig(openMode);\n        LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setMergeFactor(2);\n        return conf;\n      }\n    };\n    TaxonomyReader reader = new DirectoryTaxonomyReader(writer);\n    \n    int numRounds = random().nextInt(10) + 10;\n    int numCategories = 1; // one for root\n    for (int i = 0; i < numRounds; i++) {\n      int numCats = random().nextInt(4) + 1;\n      for (int j = 0; j < numCats; j++) {\n        writer.addCategory(new CategoryPath(Integer.toString(i), Integer.toString(j)));\n      }\n      numCategories += numCats + 1 /* one for round-parent */;\n      TaxonomyReader newtr = TaxonomyReader.openIfChanged(reader);\n      assertNotNull(newtr);\n      reader.close();\n      reader = newtr;\n      \n      // assert categories\n      assertEquals(numCategories, reader.getSize());\n      int roundOrdinal = reader.getOrdinal(new CategoryPath(Integer.toString(i)));\n      int[] parents = reader.getParentArray();\n      assertEquals(0, parents[roundOrdinal]); // round's parent is root\n      for (int j = 0; j < numCats; j++) {\n        int ord = reader.getOrdinal(new CategoryPath(Integer.toString(i), Integer.toString(j)));\n        assertEquals(roundOrdinal, parents[ord]); // round's parent is root\n      }\n    }\n    \n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testOpenIfChangedManySegments().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOpenIfChangedManySegments() throws Exception {\n    // test openIfChanged() when the taxonomy contains many segments\n    Directory dir = newDirectory();\n    \n    DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir) {\n      @Override\n      protected IndexWriterConfig createIndexWriterConfig(OpenMode openMode) {\n        IndexWriterConfig conf = super.createIndexWriterConfig(openMode);\n        LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setMergeFactor(2);\n        return conf;\n      }\n    };\n    TaxonomyReader reader = new DirectoryTaxonomyReader(writer);\n    \n    int numRounds = random().nextInt(10) + 10;\n    int numCategories = 1; // one for root\n    for (int i = 0; i < numRounds; i++) {\n      int numCats = random().nextInt(4) + 1;\n      for (int j = 0; j < numCats; j++) {\n        writer.addCategory(new CategoryPath(Integer.toString(i), Integer.toString(j)));\n      }\n      numCategories += numCats + 1 /* one for round-parent */;\n      TaxonomyReader newtr = TaxonomyReader.openIfChanged(reader);\n      assertNotNull(newtr);\n      reader.close();\n      reader = newtr;\n      \n      // assert categories\n      assertEquals(numCategories, reader.getSize());\n      int roundOrdinal = reader.getOrdinal(new CategoryPath(Integer.toString(i)));\n      int[] parents = reader.getParallelTaxonomyArrays().parents();\n      assertEquals(0, parents[roundOrdinal]); // round's parent is root\n      for (int j = 0; j < numCats; j++) {\n        int ord = reader.getOrdinal(new CategoryPath(Integer.toString(i), Integer.toString(j)));\n        assertEquals(roundOrdinal, parents[ord]); // round's parent is root\n      }\n    }\n    \n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testOpenIfChangedManySegments().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testOpenIfChangedManySegments().mjava","sourceNew":"  @Test\n  public void testOpenIfChangedManySegments() throws Exception {\n    // test openIfChanged() when the taxonomy contains many segments\n    Directory dir = newDirectory();\n    \n    DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir) {\n      @Override\n      protected IndexWriterConfig createIndexWriterConfig(OpenMode openMode) {\n        IndexWriterConfig conf = super.createIndexWriterConfig(openMode);\n        LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setMergeFactor(2);\n        return conf;\n      }\n    };\n    TaxonomyReader reader = new DirectoryTaxonomyReader(writer);\n    \n    int numRounds = random().nextInt(10) + 10;\n    int numCategories = 1; // one for root\n    for (int i = 0; i < numRounds; i++) {\n      int numCats = random().nextInt(4) + 1;\n      for (int j = 0; j < numCats; j++) {\n        writer.addCategory(new FacetLabel(Integer.toString(i), Integer.toString(j)));\n      }\n      numCategories += numCats + 1 /* one for round-parent */;\n      TaxonomyReader newtr = TaxonomyReader.openIfChanged(reader);\n      assertNotNull(newtr);\n      reader.close();\n      reader = newtr;\n      \n      // assert categories\n      assertEquals(numCategories, reader.getSize());\n      int roundOrdinal = reader.getOrdinal(new FacetLabel(Integer.toString(i)));\n      int[] parents = reader.getParallelTaxonomyArrays().parents();\n      assertEquals(0, parents[roundOrdinal]); // round's parent is root\n      for (int j = 0; j < numCats; j++) {\n        int ord = reader.getOrdinal(new FacetLabel(Integer.toString(i), Integer.toString(j)));\n        assertEquals(roundOrdinal, parents[ord]); // round's parent is root\n      }\n    }\n    \n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testOpenIfChangedManySegments() throws Exception {\n    // test openIfChanged() when the taxonomy contains many segments\n    Directory dir = newDirectory();\n    \n    DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir) {\n      @Override\n      protected IndexWriterConfig createIndexWriterConfig(OpenMode openMode) {\n        IndexWriterConfig conf = super.createIndexWriterConfig(openMode);\n        LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setMergeFactor(2);\n        return conf;\n      }\n    };\n    TaxonomyReader reader = new DirectoryTaxonomyReader(writer);\n    \n    int numRounds = random().nextInt(10) + 10;\n    int numCategories = 1; // one for root\n    for (int i = 0; i < numRounds; i++) {\n      int numCats = random().nextInt(4) + 1;\n      for (int j = 0; j < numCats; j++) {\n        writer.addCategory(new CategoryPath(Integer.toString(i), Integer.toString(j)));\n      }\n      numCategories += numCats + 1 /* one for round-parent */;\n      TaxonomyReader newtr = TaxonomyReader.openIfChanged(reader);\n      assertNotNull(newtr);\n      reader.close();\n      reader = newtr;\n      \n      // assert categories\n      assertEquals(numCategories, reader.getSize());\n      int roundOrdinal = reader.getOrdinal(new CategoryPath(Integer.toString(i)));\n      int[] parents = reader.getParallelTaxonomyArrays().parents();\n      assertEquals(0, parents[roundOrdinal]); // round's parent is root\n      for (int j = 0; j < numCats; j++) {\n        int ord = reader.getOrdinal(new CategoryPath(Integer.toString(i), Integer.toString(j)));\n        assertEquals(roundOrdinal, parents[ord]); // round's parent is root\n      }\n    }\n    \n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testOpenIfChangedManySegments().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#testOpenIfChangedManySegments().mjava","sourceNew":"  @Test\n  public void testOpenIfChangedManySegments() throws Exception {\n    // test openIfChanged() when the taxonomy contains many segments\n    Directory dir = newDirectory();\n    \n    DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir) {\n      @Override\n      protected IndexWriterConfig createIndexWriterConfig(OpenMode openMode) {\n        IndexWriterConfig conf = super.createIndexWriterConfig(openMode);\n        LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setMergeFactor(2);\n        return conf;\n      }\n    };\n    TaxonomyReader reader = new DirectoryTaxonomyReader(writer);\n    \n    int numRounds = random().nextInt(10) + 10;\n    int numCategories = 1; // one for root\n    for (int i = 0; i < numRounds; i++) {\n      int numCats = random().nextInt(4) + 1;\n      for (int j = 0; j < numCats; j++) {\n        writer.addCategory(new FacetLabel(Integer.toString(i), Integer.toString(j)));\n      }\n      numCategories += numCats + 1 /* one for round-parent */;\n      TaxonomyReader newtr = TaxonomyReader.openIfChanged(reader);\n      assertNotNull(newtr);\n      reader.close();\n      reader = newtr;\n      \n      // assert categories\n      assertEquals(numCategories, reader.getSize());\n      int roundOrdinal = reader.getOrdinal(new FacetLabel(Integer.toString(i)));\n      int[] parents = reader.getParallelTaxonomyArrays().parents();\n      assertEquals(0, parents[roundOrdinal]); // round's parent is root\n      for (int j = 0; j < numCats; j++) {\n        int ord = reader.getOrdinal(new FacetLabel(Integer.toString(i), Integer.toString(j)));\n        assertEquals(roundOrdinal, parents[ord]); // round's parent is root\n      }\n    }\n    \n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testOpenIfChangedManySegments() throws Exception {\n    // test openIfChanged() when the taxonomy contains many segments\n    Directory dir = newDirectory();\n    \n    DirectoryTaxonomyWriter writer = new DirectoryTaxonomyWriter(dir) {\n      @Override\n      protected IndexWriterConfig createIndexWriterConfig(OpenMode openMode) {\n        IndexWriterConfig conf = super.createIndexWriterConfig(openMode);\n        LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setMergeFactor(2);\n        return conf;\n      }\n    };\n    TaxonomyReader reader = new DirectoryTaxonomyReader(writer);\n    \n    int numRounds = random().nextInt(10) + 10;\n    int numCategories = 1; // one for root\n    for (int i = 0; i < numRounds; i++) {\n      int numCats = random().nextInt(4) + 1;\n      for (int j = 0; j < numCats; j++) {\n        writer.addCategory(new CategoryPath(Integer.toString(i), Integer.toString(j)));\n      }\n      numCategories += numCats + 1 /* one for round-parent */;\n      TaxonomyReader newtr = TaxonomyReader.openIfChanged(reader);\n      assertNotNull(newtr);\n      reader.close();\n      reader = newtr;\n      \n      // assert categories\n      assertEquals(numCategories, reader.getSize());\n      int roundOrdinal = reader.getOrdinal(new CategoryPath(Integer.toString(i)));\n      int[] parents = reader.getParallelTaxonomyArrays().parents();\n      assertEquals(0, parents[roundOrdinal]); // round's parent is root\n      for (int j = 0; j < numCats; j++) {\n        int ord = reader.getOrdinal(new CategoryPath(Integer.toString(i), Integer.toString(j)));\n        assertEquals(roundOrdinal, parents[ord]); // round's parent is root\n      }\n    }\n    \n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d58d08788c3fd51172ba34474cca42499d6391b"],"3d58d08788c3fd51172ba34474cca42499d6391b":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["3d58d08788c3fd51172ba34474cca42499d6391b","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3d58d08788c3fd51172ba34474cca42499d6391b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3d58d08788c3fd51172ba34474cca42499d6391b":["407687e67faf6e1f02a211ca078d8e3eed631027","3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["3d58d08788c3fd51172ba34474cca42499d6391b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}