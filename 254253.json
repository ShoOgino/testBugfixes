{"path":"src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocument() {\n    try {\n      assertTrue(reader.numDocs() == 1);\n      assertTrue(reader.maxDoc() >= 1);\n      Document result = reader.document(0);\n      assertTrue(result != null);\n      //There are 2 unstored fields on the document that are not preserved across writing\n      assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - 2);\n      \n      Enumeration fields = result.fields();\n      while (fields.hasMoreElements()) {\n        Field field = (Field) fields.nextElement();\n        assertTrue(field != null);\n        assertTrue(DocHelper.nameValues.containsKey(field.name()));\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1229e4509cad6bf268c0fe18199b63a72216c66b","date":1120256033,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    assertTrue(reader.numDocs() == 1);\n    assertTrue(reader.maxDoc() >= 1);\n    Document result = reader.document(0);\n    assertTrue(result != null);\n    //There are 2 unstored fields on the document that are not preserved across writing\n    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - 2);\n    \n    Enumeration fields = result.fields();\n    while (fields.hasMoreElements()) {\n      Field field = (Field) fields.nextElement();\n      assertTrue(field != null);\n      assertTrue(DocHelper.nameValues.containsKey(field.name()));\n    }\n  }\n\n","sourceOld":"  public void testDocument() {\n    try {\n      assertTrue(reader.numDocs() == 1);\n      assertTrue(reader.maxDoc() >= 1);\n      Document result = reader.document(0);\n      assertTrue(result != null);\n      //There are 2 unstored fields on the document that are not preserved across writing\n      assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - 2);\n      \n      Enumeration fields = result.fields();\n      while (fields.hasMoreElements()) {\n        Field field = (Field) fields.nextElement();\n        assertTrue(field != null);\n        assertTrue(DocHelper.nameValues.containsKey(field.name()));\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d189bc0061161fcd0242e1056416ace0bd3a4da7","date":1130650929,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    assertTrue(reader.numDocs() == 1);\n    assertTrue(reader.maxDoc() >= 1);\n    Document result = reader.document(0);\n    assertTrue(result != null);\n    //There are 2 unstored fields on the document that are not preserved across writing\n    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - DocHelper.unstored.size());\n    \n    Enumeration fields = result.fields();\n    while (fields.hasMoreElements()) {\n      Field field = (Field) fields.nextElement();\n      assertTrue(field != null);\n      assertTrue(DocHelper.nameValues.containsKey(field.name()));\n    }\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    assertTrue(reader.numDocs() == 1);\n    assertTrue(reader.maxDoc() >= 1);\n    Document result = reader.document(0);\n    assertTrue(result != null);\n    //There are 2 unstored fields on the document that are not preserved across writing\n    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - 2);\n    \n    Enumeration fields = result.fields();\n    while (fields.hasMoreElements()) {\n      Field field = (Field) fields.nextElement();\n      assertTrue(field != null);\n      assertTrue(DocHelper.nameValues.containsKey(field.name()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    assertTrue(reader.numDocs() == 1);\n    assertTrue(reader.maxDoc() >= 1);\n    Document result = reader.document(0);\n    assertTrue(result != null);\n    //There are 2 unstored fields on the document that are not preserved across writing\n    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - DocHelper.unstored.size());\n    \n    Enumeration fields = result.fields();\n    while (fields.hasMoreElements()) {\n      Fieldable field = (Fieldable) fields.nextElement();\n      assertTrue(field != null);\n      assertTrue(DocHelper.nameValues.containsKey(field.name()));\n    }\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    assertTrue(reader.numDocs() == 1);\n    assertTrue(reader.maxDoc() >= 1);\n    Document result = reader.document(0);\n    assertTrue(result != null);\n    //There are 2 unstored fields on the document that are not preserved across writing\n    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - DocHelper.unstored.size());\n    \n    Enumeration fields = result.fields();\n    while (fields.hasMoreElements()) {\n      Field field = (Field) fields.nextElement();\n      assertTrue(field != null);\n      assertTrue(DocHelper.nameValues.containsKey(field.name()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb4c50eaa8173000ec556e906872ea29c26312e2","date":1151010727,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    assertTrue(reader.numDocs() == 1);\n    assertTrue(reader.maxDoc() >= 1);\n    Document result = reader.document(0);\n    assertTrue(result != null);\n    //There are 2 unstored fields on the document that are not preserved across writing\n    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - DocHelper.unstored.size());\n    \n    List fields = result.getFields();\n    for (Iterator iter = fields.iterator(); iter.hasNext();) {\n      Fieldable field = (Fieldable) iter.next();\n      assertTrue(field != null);\n      assertTrue(DocHelper.nameValues.containsKey(field.name()));\n    }\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    assertTrue(reader.numDocs() == 1);\n    assertTrue(reader.maxDoc() >= 1);\n    Document result = reader.document(0);\n    assertTrue(result != null);\n    //There are 2 unstored fields on the document that are not preserved across writing\n    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - DocHelper.unstored.size());\n    \n    Enumeration fields = result.fields();\n    while (fields.hasMoreElements()) {\n      Fieldable field = (Fieldable) fields.nextElement();\n      assertTrue(field != null);\n      assertTrue(DocHelper.nameValues.containsKey(field.name()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    assertTrue(reader.numDocs() == 1);\n    assertTrue(reader.maxDoc() >= 1);\n    Document result = reader.document(0);\n    assertTrue(result != null);\n    //There are 2 unstored fields on the document that are not preserved across writing\n    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - DocHelper.unstored.size());\n    \n    List<Fieldable> fields = result.getFields();\n    for (final Fieldable field : fields ) { \n      assertTrue(field != null);\n      assertTrue(DocHelper.nameValues.containsKey(field.name()));\n    }\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    assertTrue(reader.numDocs() == 1);\n    assertTrue(reader.maxDoc() >= 1);\n    Document result = reader.document(0);\n    assertTrue(result != null);\n    //There are 2 unstored fields on the document that are not preserved across writing\n    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - DocHelper.unstored.size());\n    \n    List fields = result.getFields();\n    for (Iterator iter = fields.iterator(); iter.hasNext();) {\n      Fieldable field = (Fieldable) iter.next();\n      assertTrue(field != null);\n      assertTrue(DocHelper.nameValues.containsKey(field.name()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#testDocument().mjava","sourceNew":"  public void testDocument() throws IOException {\n    assertTrue(reader.numDocs() == 1);\n    assertTrue(reader.maxDoc() >= 1);\n    Document result = reader.document(0);\n    assertTrue(result != null);\n    //There are 2 unstored fields on the document that are not preserved across writing\n    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - DocHelper.unstored.size());\n    \n    List<Fieldable> fields = result.getFields();\n    for (final Fieldable field : fields ) { \n      assertTrue(field != null);\n      assertTrue(DocHelper.nameValues.containsKey(field.name()));\n    }\n  }\n\n","sourceOld":"  public void testDocument() throws IOException {\n    assertTrue(reader.numDocs() == 1);\n    assertTrue(reader.maxDoc() >= 1);\n    Document result = reader.document(0);\n    assertTrue(result != null);\n    //There are 2 unstored fields on the document that are not preserved across writing\n    assertTrue(DocHelper.numFields(result) == DocHelper.numFields(testDoc) - DocHelper.unstored.size());\n    \n    List<Fieldable> fields = result.getFields();\n    for (final Fieldable field : fields ) { \n      assertTrue(field != null);\n      assertTrue(DocHelper.nameValues.containsKey(field.name()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb4c50eaa8173000ec556e906872ea29c26312e2":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["bb4c50eaa8173000ec556e906872ea29c26312e2"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["d189bc0061161fcd0242e1056416ace0bd3a4da7"],"d189bc0061161fcd0242e1056416ace0bd3a4da7":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"770281b8a8459cafcdd2354b6a06078fea2d83c9":["1229e4509cad6bf268c0fe18199b63a72216c66b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"bb4c50eaa8173000ec556e906872ea29c26312e2":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["bb4c50eaa8173000ec556e906872ea29c26312e2"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d189bc0061161fcd0242e1056416ace0bd3a4da7":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"1229e4509cad6bf268c0fe18199b63a72216c66b":["d189bc0061161fcd0242e1056416ace0bd3a4da7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}