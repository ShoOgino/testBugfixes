{"path":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#mergePartitions(Directory,List[PartitionAndCount]).mjava","commits":[{"id":"62e7e8f89cb6b0283f3f5d6c0945453b73f09d45","date":1492172132,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#mergePartitions(Directory,List[PartitionAndCount]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#mergePartitions(Directory,List[String]).mjava","sourceNew":"  /** Merge the most recent {@code maxTempFile} partitions into a new partition. */\n  void mergePartitions(Directory trackingDir, List<PartitionAndCount> segments) throws IOException {\n    long start = System.currentTimeMillis();\n\n    List<PartitionAndCount> segmentsToMerge;\n    if (segments.size() > maxTempFiles) {\n      segmentsToMerge = segments.subList(segments.size() - maxTempFiles, segments.size());\n    } else {\n      segmentsToMerge = segments;\n    }\n\n    long totalCount = 0;\n    for (PartitionAndCount segment : segmentsToMerge) {\n      totalCount += segment.count;\n    }\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(segmentsToMerge.size()) {\n      @Override\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current, b.current) < 0;\n      }\n    };\n\n    ByteSequencesReader[] streams = new ByteSequencesReader[segmentsToMerge.size()];\n\n    String newSegmentName = null;\n\n    try (ByteSequencesWriter writer = getWriter(trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT), totalCount)) {\n\n      newSegmentName = writer.out.getName();\n      \n      // Open streams and read the top for each file\n      for (int i = 0; i < segmentsToMerge.size(); i++) {\n        streams[i] = getReader(dir.openChecksumInput(segmentsToMerge.get(i).fileName, IOContext.READONCE), segmentsToMerge.get(i).fileName);\n        BytesRef item = null;\n        try {\n          item = streams[i].next();\n        } catch (Throwable t) {\n          verifyChecksum(t, streams[i]);\n        }\n        assert item != null;\n        queue.insertWithOverflow(new FileAndTop(i, item));\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        writer.write(top.current);\n        try {\n          top.current = streams[top.fd].next();\n        } catch (Throwable t) {\n          verifyChecksum(t, streams[top.fd]);\n        }\n\n        if (top.current != null) {\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n\n      CodecUtil.writeFooter(writer.out);\n\n      for(ByteSequencesReader reader : streams) {\n        CodecUtil.checkFooter(reader.in);\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      IOUtils.close(streams);\n    }\n\n    IOUtils.deleteFiles(trackingDir, segmentsToMerge.stream().map(segment -> segment.fileName).collect(Collectors.toList()));\n\n    segmentsToMerge.clear();\n    segments.add(new PartitionAndCount(totalCount, newSegmentName));\n\n    sortInfo.tempMergeFiles++;\n  }\n\n","sourceOld":"  /** Merge the most recent {@code maxTempFile} partitions into a new partition. */\n  void mergePartitions(Directory trackingDir, List<String> segments) throws IOException {\n    long start = System.currentTimeMillis();\n\n    List<String> segmentsToMerge;\n    if (segments.size() > maxTempFiles) {\n      segmentsToMerge = segments.subList(segments.size() - maxTempFiles, segments.size());\n    } else {\n      segmentsToMerge = segments;\n    }\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(segmentsToMerge.size()) {\n      @Override\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current, b.current) < 0;\n      }\n    };\n\n    ByteSequencesReader[] streams = new ByteSequencesReader[segmentsToMerge.size()];\n\n    String newSegmentName = null;\n\n    try (ByteSequencesWriter writer = getWriter(trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT))) {\n\n      newSegmentName = writer.out.getName();\n      \n      // Open streams and read the top for each file\n      for (int i = 0; i < segmentsToMerge.size(); i++) {\n        streams[i] = getReader(dir.openChecksumInput(segmentsToMerge.get(i), IOContext.READONCE), segmentsToMerge.get(i));\n        BytesRef item = null;\n        try {\n          item = streams[i].next();\n        } catch (Throwable t) {\n          verifyChecksum(t, streams[i]);\n        }\n        assert item != null;\n        queue.insertWithOverflow(new FileAndTop(i, item));\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        writer.write(top.current);\n        try {\n          top.current = streams[top.fd].next();\n        } catch (Throwable t) {\n          verifyChecksum(t, streams[top.fd]);\n        }\n\n        if (top.current != null) {\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n\n      CodecUtil.writeFooter(writer.out);\n\n      for(ByteSequencesReader reader : streams) {\n        CodecUtil.checkFooter(reader.in);\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      IOUtils.close(streams);\n    }\n\n    IOUtils.deleteFiles(trackingDir, segmentsToMerge);\n\n    segmentsToMerge.clear();\n    segments.add(newSegmentName);\n\n    sortInfo.tempMergeFiles++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#mergePartitions(Directory,List[PartitionAndCount]).mjava","pathOld":"/dev/null","sourceNew":"  /** Merge the most recent {@code maxTempFile} partitions into a new partition. */\n  void mergePartitions(Directory trackingDir, List<PartitionAndCount> segments) throws IOException {\n    long start = System.currentTimeMillis();\n\n    List<PartitionAndCount> segmentsToMerge;\n    if (segments.size() > maxTempFiles) {\n      segmentsToMerge = segments.subList(segments.size() - maxTempFiles, segments.size());\n    } else {\n      segmentsToMerge = segments;\n    }\n\n    long totalCount = 0;\n    for (PartitionAndCount segment : segmentsToMerge) {\n      totalCount += segment.count;\n    }\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(segmentsToMerge.size()) {\n      @Override\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current, b.current) < 0;\n      }\n    };\n\n    ByteSequencesReader[] streams = new ByteSequencesReader[segmentsToMerge.size()];\n\n    String newSegmentName = null;\n\n    try (ByteSequencesWriter writer = getWriter(trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT), totalCount)) {\n\n      newSegmentName = writer.out.getName();\n      \n      // Open streams and read the top for each file\n      for (int i = 0; i < segmentsToMerge.size(); i++) {\n        streams[i] = getReader(dir.openChecksumInput(segmentsToMerge.get(i).fileName, IOContext.READONCE), segmentsToMerge.get(i).fileName);\n        BytesRef item = null;\n        try {\n          item = streams[i].next();\n        } catch (Throwable t) {\n          verifyChecksum(t, streams[i]);\n        }\n        assert item != null;\n        queue.insertWithOverflow(new FileAndTop(i, item));\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        writer.write(top.current);\n        try {\n          top.current = streams[top.fd].next();\n        } catch (Throwable t) {\n          verifyChecksum(t, streams[top.fd]);\n        }\n\n        if (top.current != null) {\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n\n      CodecUtil.writeFooter(writer.out);\n\n      for(ByteSequencesReader reader : streams) {\n        CodecUtil.checkFooter(reader.in);\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      IOUtils.close(streams);\n    }\n\n    IOUtils.deleteFiles(trackingDir, segmentsToMerge.stream().map(segment -> segment.fileName).collect(Collectors.toList()));\n\n    segmentsToMerge.clear();\n    segments.add(new PartitionAndCount(totalCount, newSegmentName));\n\n    sortInfo.tempMergeFiles++;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dcb0432bcb41451b41e9aaaabe99f5d208258fe","date":1493203108,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#mergePartitions(Directory,List[PartitionAndCount]).mjava","sourceNew":null,"sourceOld":"  /** Merge the most recent {@code maxTempFile} partitions into a new partition. */\n  void mergePartitions(Directory trackingDir, List<PartitionAndCount> segments) throws IOException {\n    long start = System.currentTimeMillis();\n\n    List<PartitionAndCount> segmentsToMerge;\n    if (segments.size() > maxTempFiles) {\n      segmentsToMerge = segments.subList(segments.size() - maxTempFiles, segments.size());\n    } else {\n      segmentsToMerge = segments;\n    }\n\n    long totalCount = 0;\n    for (PartitionAndCount segment : segmentsToMerge) {\n      totalCount += segment.count;\n    }\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(segmentsToMerge.size()) {\n      @Override\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current, b.current) < 0;\n      }\n    };\n\n    ByteSequencesReader[] streams = new ByteSequencesReader[segmentsToMerge.size()];\n\n    String newSegmentName = null;\n\n    try (ByteSequencesWriter writer = getWriter(trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT), totalCount)) {\n\n      newSegmentName = writer.out.getName();\n      \n      // Open streams and read the top for each file\n      for (int i = 0; i < segmentsToMerge.size(); i++) {\n        streams[i] = getReader(dir.openChecksumInput(segmentsToMerge.get(i).fileName, IOContext.READONCE), segmentsToMerge.get(i).fileName);\n        BytesRef item = null;\n        try {\n          item = streams[i].next();\n        } catch (Throwable t) {\n          verifyChecksum(t, streams[i]);\n        }\n        assert item != null;\n        queue.insertWithOverflow(new FileAndTop(i, item));\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        writer.write(top.current);\n        try {\n          top.current = streams[top.fd].next();\n        } catch (Throwable t) {\n          verifyChecksum(t, streams[top.fd]);\n        }\n\n        if (top.current != null) {\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n\n      CodecUtil.writeFooter(writer.out);\n\n      for(ByteSequencesReader reader : streams) {\n        CodecUtil.checkFooter(reader.in);\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      IOUtils.close(streams);\n    }\n\n    IOUtils.deleteFiles(trackingDir, segmentsToMerge.stream().map(segment -> segment.fileName).collect(Collectors.toList()));\n\n    segmentsToMerge.clear();\n    segments.add(new PartitionAndCount(totalCount, newSegmentName));\n\n    sortInfo.tempMergeFiles++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#mergePartitions(Directory,List[PartitionAndCount]).mjava","sourceNew":null,"sourceOld":"  /** Merge the most recent {@code maxTempFile} partitions into a new partition. */\n  void mergePartitions(Directory trackingDir, List<PartitionAndCount> segments) throws IOException {\n    long start = System.currentTimeMillis();\n\n    List<PartitionAndCount> segmentsToMerge;\n    if (segments.size() > maxTempFiles) {\n      segmentsToMerge = segments.subList(segments.size() - maxTempFiles, segments.size());\n    } else {\n      segmentsToMerge = segments;\n    }\n\n    long totalCount = 0;\n    for (PartitionAndCount segment : segmentsToMerge) {\n      totalCount += segment.count;\n    }\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(segmentsToMerge.size()) {\n      @Override\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current, b.current) < 0;\n      }\n    };\n\n    ByteSequencesReader[] streams = new ByteSequencesReader[segmentsToMerge.size()];\n\n    String newSegmentName = null;\n\n    try (ByteSequencesWriter writer = getWriter(trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT), totalCount)) {\n\n      newSegmentName = writer.out.getName();\n      \n      // Open streams and read the top for each file\n      for (int i = 0; i < segmentsToMerge.size(); i++) {\n        streams[i] = getReader(dir.openChecksumInput(segmentsToMerge.get(i).fileName, IOContext.READONCE), segmentsToMerge.get(i).fileName);\n        BytesRef item = null;\n        try {\n          item = streams[i].next();\n        } catch (Throwable t) {\n          verifyChecksum(t, streams[i]);\n        }\n        assert item != null;\n        queue.insertWithOverflow(new FileAndTop(i, item));\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        writer.write(top.current);\n        try {\n          top.current = streams[top.fd].next();\n        } catch (Throwable t) {\n          verifyChecksum(t, streams[top.fd]);\n        }\n\n        if (top.current != null) {\n          queue.updateTop();\n        } else {\n          queue.pop();\n        }\n      }\n\n      CodecUtil.writeFooter(writer.out);\n\n      for(ByteSequencesReader reader : streams) {\n        CodecUtil.checkFooter(reader.in);\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      IOUtils.close(streams);\n    }\n\n    IOUtils.deleteFiles(trackingDir, segmentsToMerge.stream().map(segment -> segment.fileName).collect(Collectors.toList()));\n\n    segmentsToMerge.clear();\n    segments.add(new PartitionAndCount(totalCount, newSegmentName));\n\n    sortInfo.tempMergeFiles++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7dcb0432bcb41451b41e9aaaabe99f5d208258fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dcb0432bcb41451b41e9aaaabe99f5d208258fe":["62e7e8f89cb6b0283f3f5d6c0945453b73f09d45"],"62e7e8f89cb6b0283f3f5d6c0945453b73f09d45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dcb0432bcb41451b41e9aaaabe99f5d208258fe"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","62e7e8f89cb6b0283f3f5d6c0945453b73f09d45"],"7dcb0432bcb41451b41e9aaaabe99f5d208258fe":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"62e7e8f89cb6b0283f3f5d6c0945453b73f09d45":["7dcb0432bcb41451b41e9aaaabe99f5d208258fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}