{"path":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,IndexReader).mjava","commits":[{"id":"98bc22650ab0fe51f9c00513397bfa42a64fc663","date":1161986633,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, IndexReader reader)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new Spans[clauses.length];\n    subSpansByDoc = new Spans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getSpans(reader);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b00d44ccb616bf40482a9ba5302cb256c26c6e4c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd5947db4de866f035b932f219674c03562d904e","date":1219248396,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,IndexReader).mjava","sourceNew":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, IndexReader reader)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new PayloadSpans[clauses.length];\n    matchPayload = new LinkedList();\n    subSpansByDoc = new PayloadSpans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getPayloadSpans(reader);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","sourceOld":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, IndexReader reader)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new Spans[clauses.length];\n    subSpansByDoc = new Spans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getSpans(reader);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","bugFix":null,"bugIntro":["b00d44ccb616bf40482a9ba5302cb256c26c6e4c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b00d44ccb616bf40482a9ba5302cb256c26c6e4c","date":1249308735,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,IndexReader).mjava","sourceNew":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, IndexReader reader) throws IOException {\n    this(spanNearQuery, reader, true);\n  }\n\n","sourceOld":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, IndexReader reader)\n  throws IOException {\n    if (spanNearQuery.getClauses().length < 2) {\n      throw new IllegalArgumentException(\"Less than 2 clauses: \"\n                                         + spanNearQuery);\n    }\n    allowedSlop = spanNearQuery.getSlop();\n    SpanQuery[] clauses = spanNearQuery.getClauses();\n    subSpans = new PayloadSpans[clauses.length];\n    matchPayload = new LinkedList();\n    subSpansByDoc = new PayloadSpans[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      subSpans[i] = clauses[i].getPayloadSpans(reader);\n      subSpansByDoc[i] = subSpans[i]; // used in toSameDoc()\n    }\n    query = spanNearQuery; // kept for toString() only.\n  }\n\n","bugFix":["98bc22650ab0fe51f9c00513397bfa42a64fc663","fd5947db4de866f035b932f219674c03562d904e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansOrdered#NearSpansOrdered(SpanNearQuery,IndexReader).mjava","sourceNew":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, IndexReader reader) throws IOException {\n    this(spanNearQuery, reader, true);\n  }\n\n","sourceOld":"  public NearSpansOrdered(SpanNearQuery spanNearQuery, IndexReader reader) throws IOException {\n    this(spanNearQuery, reader, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b00d44ccb616bf40482a9ba5302cb256c26c6e4c":["fd5947db4de866f035b932f219674c03562d904e"],"98bc22650ab0fe51f9c00513397bfa42a64fc663":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd5947db4de866f035b932f219674c03562d904e":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b00d44ccb616bf40482a9ba5302cb256c26c6e4c"]},"commit2Childs":{"b00d44ccb616bf40482a9ba5302cb256c26c6e4c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"98bc22650ab0fe51f9c00513397bfa42a64fc663":["fd5947db4de866f035b932f219674c03562d904e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"fd5947db4de866f035b932f219674c03562d904e":["b00d44ccb616bf40482a9ba5302cb256c26c6e4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}