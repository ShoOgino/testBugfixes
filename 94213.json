{"path":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testJustJohnJavabin().mjava","commits":[{"id":"561c2351baf6dd64061addef891359954c1a7faa","date":1462788487,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testJustJohnJavabin().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testJustJohnJavabin() throws Exception {\n    final SolrQueryRequest johnTwoFL = req(johnAndNancyParams);\n    ModifiableSolrParams params = new ModifiableSolrParams(johnTwoFL.getParams());\n    params.set(\"q\",\"name_s:john\");\n    params.set(\"wt\",\"javabin\");\n    \n    johnTwoFL.setParams(params);\n    \n    final NamedList<Object> unmarshalled;\n    {\n      SolrCore core = johnTwoFL.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(johnTwoFL, rsp));\n    \n    SolrQueryResponse response = h.queryAndResponse(\n        johnTwoFL.getParams().get(CommonParams.QT), johnTwoFL);\n    \n    BinaryQueryResponseWriter responseWriter = (BinaryQueryResponseWriter) core.getQueryResponseWriter(johnTwoFL);\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    responseWriter.write(bytes,johnTwoFL,response);\n    \n    unmarshalled = (NamedList<Object>) new JavaBinCodec().unmarshal(\n        new ByteArrayInputStream(bytes.toByteArray()));\n    \n      johnTwoFL.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n    \n    SolrDocumentList resultDocs = (SolrDocumentList)(unmarshalled.get(\"response\"));\n    \n    {\n      Map<String,String> engText = new HashMap<>();\n      engText.put(\"text_t\", \"These guys develop stuff\");\n      \n      Map<String,String> engId = new HashMap<>();\n      engId.put(\"text_t\", \"These guys develop stuff\");\n      engId.put(\"dept_id_s_dv\", \"Engineering\");\n      \n      for (int docNum : new int []{0, peopleMultiplier-1}) {\n        SolrDocument employeeDoc = resultDocs.get(docNum);\n        assertEquals(\"john\", employeeDoc.getFieldValue(\"name_s_dv\"));\n        for (String subResult : new String []{\"depts\", \"depts_i\"}) {\n\n          SolrDocumentList subDoc = (SolrDocumentList)employeeDoc.getFieldValue(subResult);\n          for (int deptNum : new int []{0, deptMultiplier-1}) {\n            SolrDocument deptDoc = subDoc.get(deptNum);\n            Object expectedDept = (subResult.equals(\"depts\") ? engText : engId);\n            assertTrue( \"\" + expectedDept + \" equals to \" + deptDoc,\n                expectedDept.equals(deptDoc));\n          }\n      }\n    }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testJustJohnJavabin().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testJustJohnJavabin() throws Exception {\n    final SolrQueryRequest johnTwoFL = req(johnAndNancyParams);\n    ModifiableSolrParams params = new ModifiableSolrParams(johnTwoFL.getParams());\n    params.set(\"q\",\"name_s:john\");\n    params.set(\"wt\",\"javabin\");\n    \n    johnTwoFL.setParams(params);\n    \n    final NamedList<Object> unmarshalled;\n    {\n      SolrCore core = johnTwoFL.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(johnTwoFL, rsp));\n    \n    SolrQueryResponse response = h.queryAndResponse(\n        johnTwoFL.getParams().get(CommonParams.QT), johnTwoFL);\n    \n    BinaryQueryResponseWriter responseWriter = (BinaryQueryResponseWriter) core.getQueryResponseWriter(johnTwoFL);\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    responseWriter.write(bytes,johnTwoFL,response);\n    \n    unmarshalled = (NamedList<Object>) new JavaBinCodec().unmarshal(\n        new ByteArrayInputStream(bytes.toByteArray()));\n    \n      johnTwoFL.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n    \n    SolrDocumentList resultDocs = (SolrDocumentList)(unmarshalled.get(\"response\"));\n    \n    {\n      Map<String,String> engText = new HashMap<>();\n      engText.put(\"text_t\", \"These guys develop stuff\");\n      \n      Map<String,String> engId = new HashMap<>();\n      engId.put(\"text_t\", \"These guys develop stuff\");\n      engId.put(\"dept_id_s_dv\", \"Engineering\");\n      \n      for (int docNum : new int []{0, peopleMultiplier-1}) {\n        SolrDocument employeeDoc = resultDocs.get(docNum);\n        assertEquals(\"john\", employeeDoc.getFieldValue(\"name_s_dv\"));\n        for (String subResult : new String []{\"depts\", \"depts_i\"}) {\n\n          SolrDocumentList subDoc = (SolrDocumentList)employeeDoc.getFieldValue(subResult);\n          for (int deptNum : new int []{0, deptMultiplier-1}) {\n            SolrDocument deptDoc = subDoc.get(deptNum);\n            Object expectedDept = (subResult.equals(\"depts\") ? engText : engId);\n            assertTrue( \"\" + expectedDept + \" equals to \" + deptDoc,\n                expectedDept.equals(deptDoc));\n          }\n      }\n    }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testJustJohnJavabin().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testJustJohnJavabin() throws Exception {\n    final SolrQueryRequest johnTwoFL = req(johnAndNancyParams);\n    ModifiableSolrParams params = new ModifiableSolrParams(johnTwoFL.getParams());\n    params.set(\"q\",\"name_s:john\");\n    params.set(\"wt\",\"javabin\");\n    \n    johnTwoFL.setParams(params);\n    \n    final NamedList<Object> unmarshalled;\n    {\n      SolrCore core = johnTwoFL.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(johnTwoFL, rsp));\n    \n    SolrQueryResponse response = h.queryAndResponse(\n        johnTwoFL.getParams().get(CommonParams.QT), johnTwoFL);\n    \n    BinaryQueryResponseWriter responseWriter = (BinaryQueryResponseWriter) core.getQueryResponseWriter(johnTwoFL);\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    responseWriter.write(bytes,johnTwoFL,response);\n    \n    unmarshalled = (NamedList<Object>) new JavaBinCodec().unmarshal(\n        new ByteArrayInputStream(bytes.toByteArray()));\n    \n      johnTwoFL.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n    \n    SolrDocumentList resultDocs = (SolrDocumentList)(unmarshalled.get(\"response\"));\n    \n    {\n      Map<String,String> engText = new HashMap<>();\n      engText.put(\"text_t\", \"These guys develop stuff\");\n      \n      Map<String,String> engId = new HashMap<>();\n      engId.put(\"text_t\", \"These guys develop stuff\");\n      engId.put(\"dept_id_s_dv\", \"Engineering\");\n      \n      for (int docNum : new int []{0, peopleMultiplier-1}) {\n        SolrDocument employeeDoc = resultDocs.get(docNum);\n        assertEquals(\"john\", employeeDoc.getFieldValue(\"name_s_dv\"));\n        for (String subResult : new String []{\"depts\", \"depts_i\"}) {\n\n          SolrDocumentList subDoc = (SolrDocumentList)employeeDoc.getFieldValue(subResult);\n          for (int deptNum : new int []{0, deptMultiplier-1}) {\n            SolrDocument deptDoc = subDoc.get(deptNum);\n            Object expectedDept = (subResult.equals(\"depts\") ? engText : engId);\n            assertTrue( \"\" + expectedDept + \" equals to \" + deptDoc,\n                expectedDept.equals(deptDoc));\n          }\n      }\n    }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testJustJohnJavabin().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testJustJohnJavabin() throws Exception {\n    final SolrQueryRequest johnTwoFL = req(johnAndNancyParams);\n    ModifiableSolrParams params = new ModifiableSolrParams(johnTwoFL.getParams());\n    params.set(\"q\",\"name_s:john\");\n    params.set(\"wt\",\"javabin\");\n    \n    johnTwoFL.setParams(params);\n    \n    final NamedList<Object> unmarshalled;\n    {\n      SolrCore core = johnTwoFL.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(johnTwoFL, rsp));\n    \n    SolrQueryResponse response = h.queryAndResponse(\n        johnTwoFL.getParams().get(CommonParams.QT), johnTwoFL);\n    \n    BinaryQueryResponseWriter responseWriter = (BinaryQueryResponseWriter) core.getQueryResponseWriter(johnTwoFL);\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    responseWriter.write(bytes,johnTwoFL,response);\n    \n    unmarshalled = (NamedList<Object>) new JavaBinCodec().unmarshal(\n        new ByteArrayInputStream(bytes.toByteArray()));\n    \n      johnTwoFL.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n    \n    SolrDocumentList resultDocs = (SolrDocumentList)(unmarshalled.get(\"response\"));\n    \n    {\n      Map<String,String> engText = new HashMap<>();\n      engText.put(\"text_t\", \"These guys develop stuff\");\n      \n      Map<String,String> engId = new HashMap<>();\n      engId.put(\"text_t\", \"These guys develop stuff\");\n      engId.put(\"dept_id_s_dv\", \"Engineering\");\n      \n      for (int docNum : new int []{0, peopleMultiplier-1}) {\n        SolrDocument employeeDoc = resultDocs.get(docNum);\n        assertEquals(\"john\", employeeDoc.getFieldValue(\"name_s_dv\"));\n        for (String subResult : new String []{\"depts\", \"depts_i\"}) {\n\n          SolrDocumentList subDoc = (SolrDocumentList)employeeDoc.getFieldValue(subResult);\n          for (int deptNum : new int []{0, deptMultiplier-1}) {\n            SolrDocument deptDoc = subDoc.get(deptNum);\n            Object expectedDept = (subResult.equals(\"depts\") ? engText : engId);\n            assertTrue( \"\" + expectedDept + \" equals to \" + deptDoc,\n                expectedDept.equals(deptDoc));\n          }\n      }\n    }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","date":1497850557,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testJustJohnJavabin().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testJustJohnJavabin().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testJustJohnJavabin() throws Exception {\n    final SolrQueryRequest johnTwoFL = req(johnAndNancyParams);\n    ModifiableSolrParams params = new ModifiableSolrParams(johnTwoFL.getParams());\n    params.set(\"q\",\"name_s:john\");\n    params.set(\"wt\",\"javabin\");\n    \n    johnTwoFL.setParams(params);\n    \n    final NamedList<Object> unmarshalled;\n    SolrCore core = johnTwoFL.getCore();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(johnTwoFL, rsp));\n\n    SolrQueryResponse response = h.queryAndResponse(\n        johnTwoFL.getParams().get(CommonParams.QT), johnTwoFL);\n\n    BinaryQueryResponseWriter responseWriter = (BinaryQueryResponseWriter) core.getQueryResponseWriter(johnTwoFL);\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    responseWriter.write(bytes, johnTwoFL, response);\n\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      unmarshalled = (NamedList<Object>) jbc.unmarshal(\n          new ByteArrayInputStream(bytes.toByteArray()));\n    }\n\n    johnTwoFL.close();\n    SolrRequestInfo.clearRequestInfo();\n    \n    SolrDocumentList resultDocs = (SolrDocumentList)(unmarshalled.get(\"response\"));\n    \n      Map<String,String> engText = new HashMap<>();\n      engText.put(\"text_t\", \"These guys develop stuff\");\n      \n      Map<String,String> engId = new HashMap<>();\n      engId.put(\"text_t\", \"These guys develop stuff\");\n      engId.put(\"dept_id_s_dv\", \"Engineering\");\n      \n      for (int docNum : new int []{0, peopleMultiplier-1}) {\n        SolrDocument employeeDoc = resultDocs.get(docNum);\n        assertEquals(\"john\", employeeDoc.getFieldValue(\"name_s_dv\"));\n        for (String subResult : new String []{\"depts\", \"depts_i\"}) {\n\n          SolrDocumentList subDoc = (SolrDocumentList)employeeDoc.getFieldValue(subResult);\n          for (int deptNum : new int []{0, deptMultiplier-1}) {\n            SolrDocument deptDoc = subDoc.get(deptNum);\n            Object expectedDept = (subResult.equals(\"depts\") ? engText : engId);\n            assertTrue( \"\" + expectedDept + \" equals to \" + deptDoc,\n                expectedDept.equals(deptDoc));\n          }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testJustJohnJavabin() throws Exception {\n    final SolrQueryRequest johnTwoFL = req(johnAndNancyParams);\n    ModifiableSolrParams params = new ModifiableSolrParams(johnTwoFL.getParams());\n    params.set(\"q\",\"name_s:john\");\n    params.set(\"wt\",\"javabin\");\n    \n    johnTwoFL.setParams(params);\n    \n    final NamedList<Object> unmarshalled;\n    {\n      SolrCore core = johnTwoFL.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(johnTwoFL, rsp));\n    \n    SolrQueryResponse response = h.queryAndResponse(\n        johnTwoFL.getParams().get(CommonParams.QT), johnTwoFL);\n    \n    BinaryQueryResponseWriter responseWriter = (BinaryQueryResponseWriter) core.getQueryResponseWriter(johnTwoFL);\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    responseWriter.write(bytes,johnTwoFL,response);\n    \n    unmarshalled = (NamedList<Object>) new JavaBinCodec().unmarshal(\n        new ByteArrayInputStream(bytes.toByteArray()));\n    \n      johnTwoFL.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n    \n    SolrDocumentList resultDocs = (SolrDocumentList)(unmarshalled.get(\"response\"));\n    \n    {\n      Map<String,String> engText = new HashMap<>();\n      engText.put(\"text_t\", \"These guys develop stuff\");\n      \n      Map<String,String> engId = new HashMap<>();\n      engId.put(\"text_t\", \"These guys develop stuff\");\n      engId.put(\"dept_id_s_dv\", \"Engineering\");\n      \n      for (int docNum : new int []{0, peopleMultiplier-1}) {\n        SolrDocument employeeDoc = resultDocs.get(docNum);\n        assertEquals(\"john\", employeeDoc.getFieldValue(\"name_s_dv\"));\n        for (String subResult : new String []{\"depts\", \"depts_i\"}) {\n\n          SolrDocumentList subDoc = (SolrDocumentList)employeeDoc.getFieldValue(subResult);\n          for (int deptNum : new int []{0, deptMultiplier-1}) {\n            SolrDocument deptDoc = subDoc.get(deptNum);\n            Object expectedDept = (subResult.equals(\"depts\") ? engText : engId);\n            assertTrue( \"\" + expectedDept + \" equals to \" + deptDoc,\n                expectedDept.equals(deptDoc));\n          }\n      }\n    }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testJustJohnJavabin().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testJustJohnJavabin().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testJustJohnJavabin() throws Exception {\n    final SolrQueryRequest johnTwoFL = req(johnAndNancyParams);\n    ModifiableSolrParams params = new ModifiableSolrParams(johnTwoFL.getParams());\n    params.set(\"q\",\"name_s:john\");\n    params.set(\"wt\",\"javabin\");\n    \n    johnTwoFL.setParams(params);\n    \n    final NamedList<Object> unmarshalled;\n    SolrCore core = johnTwoFL.getCore();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(johnTwoFL, rsp));\n\n    SolrQueryResponse response = h.queryAndResponse(\n        johnTwoFL.getParams().get(CommonParams.QT), johnTwoFL);\n\n    BinaryQueryResponseWriter responseWriter = (BinaryQueryResponseWriter) core.getQueryResponseWriter(johnTwoFL);\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    responseWriter.write(bytes, johnTwoFL, response);\n\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      unmarshalled = (NamedList<Object>) jbc.unmarshal(\n          new ByteArrayInputStream(bytes.toByteArray()));\n    }\n\n    johnTwoFL.close();\n    SolrRequestInfo.clearRequestInfo();\n    \n    SolrDocumentList resultDocs = (SolrDocumentList)(unmarshalled.get(\"response\"));\n    \n      Map<String,String> engText = new HashMap<>();\n      engText.put(\"text_t\", \"These guys develop stuff\");\n      \n      Map<String,String> engId = new HashMap<>();\n      engId.put(\"text_t\", \"These guys develop stuff\");\n      engId.put(\"dept_id_s_dv\", \"Engineering\");\n      \n      for (int docNum : new int []{0, peopleMultiplier-1}) {\n        SolrDocument employeeDoc = resultDocs.get(docNum);\n        assertEquals(\"john\", employeeDoc.getFieldValue(\"name_s_dv\"));\n        for (String subResult : new String []{\"depts\", \"depts_i\"}) {\n\n          SolrDocumentList subDoc = (SolrDocumentList)employeeDoc.getFieldValue(subResult);\n          for (int deptNum : new int []{0, deptMultiplier-1}) {\n            SolrDocument deptDoc = subDoc.get(deptNum);\n            Object expectedDept = (subResult.equals(\"depts\") ? engText : engId);\n            assertTrue( \"\" + expectedDept + \" equals to \" + deptDoc,\n                expectedDept.equals(deptDoc));\n          }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testJustJohnJavabin() throws Exception {\n    final SolrQueryRequest johnTwoFL = req(johnAndNancyParams);\n    ModifiableSolrParams params = new ModifiableSolrParams(johnTwoFL.getParams());\n    params.set(\"q\",\"name_s:john\");\n    params.set(\"wt\",\"javabin\");\n    \n    johnTwoFL.setParams(params);\n    \n    final NamedList<Object> unmarshalled;\n    {\n      SolrCore core = johnTwoFL.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(johnTwoFL, rsp));\n    \n    SolrQueryResponse response = h.queryAndResponse(\n        johnTwoFL.getParams().get(CommonParams.QT), johnTwoFL);\n    \n    BinaryQueryResponseWriter responseWriter = (BinaryQueryResponseWriter) core.getQueryResponseWriter(johnTwoFL);\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    responseWriter.write(bytes,johnTwoFL,response);\n    \n    unmarshalled = (NamedList<Object>) new JavaBinCodec().unmarshal(\n        new ByteArrayInputStream(bytes.toByteArray()));\n    \n      johnTwoFL.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n    \n    SolrDocumentList resultDocs = (SolrDocumentList)(unmarshalled.get(\"response\"));\n    \n    {\n      Map<String,String> engText = new HashMap<>();\n      engText.put(\"text_t\", \"These guys develop stuff\");\n      \n      Map<String,String> engId = new HashMap<>();\n      engId.put(\"text_t\", \"These guys develop stuff\");\n      engId.put(\"dept_id_s_dv\", \"Engineering\");\n      \n      for (int docNum : new int []{0, peopleMultiplier-1}) {\n        SolrDocument employeeDoc = resultDocs.get(docNum);\n        assertEquals(\"john\", employeeDoc.getFieldValue(\"name_s_dv\"));\n        for (String subResult : new String []{\"depts\", \"depts_i\"}) {\n\n          SolrDocumentList subDoc = (SolrDocumentList)employeeDoc.getFieldValue(subResult);\n          for (int deptNum : new int []{0, deptMultiplier-1}) {\n            SolrDocument deptDoc = subDoc.get(deptNum);\n            Object expectedDept = (subResult.equals(\"depts\") ? engText : engId);\n            assertTrue( \"\" + expectedDept + \" equals to \" + deptDoc,\n                expectedDept.equals(deptDoc));\n          }\n      }\n    }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testJustJohnJavabin().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer#testJustJohnJavabin().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testJustJohnJavabin() throws Exception {\n    final SolrQueryRequest johnTwoFL = req(johnAndNancyParams);\n    ModifiableSolrParams params = new ModifiableSolrParams(johnTwoFL.getParams());\n    params.set(\"q\",\"name_s:john\");\n    params.set(\"wt\",\"javabin\");\n    \n    johnTwoFL.setParams(params);\n    \n    final NamedList<Object> unmarshalled;\n    SolrCore core = johnTwoFL.getCore();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(johnTwoFL, rsp));\n\n    SolrQueryResponse response = h.queryAndResponse(\n        johnTwoFL.getParams().get(CommonParams.QT), johnTwoFL);\n\n    BinaryQueryResponseWriter responseWriter = (BinaryQueryResponseWriter) core.getQueryResponseWriter(johnTwoFL);\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    responseWriter.write(bytes, johnTwoFL, response);\n\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      unmarshalled = (NamedList<Object>) jbc.unmarshal(\n          new ByteArrayInputStream(bytes.toByteArray()));\n    }\n\n    johnTwoFL.close();\n    SolrRequestInfo.clearRequestInfo();\n    \n    SolrDocumentList resultDocs = (SolrDocumentList)(unmarshalled.get(\"response\"));\n    \n      Map<String,String> engText = new HashMap<>();\n      engText.put(\"text_t\", \"These guys develop stuff\");\n      \n      Map<String,String> engId = new HashMap<>();\n      engId.put(\"text_t\", \"These guys develop stuff\");\n      engId.put(\"dept_id_s_dv\", \"Engineering\");\n      \n      for (int docNum : new int []{0, peopleMultiplier-1}) {\n        SolrDocument employeeDoc = resultDocs.get(docNum);\n        assertEquals(\"john\", employeeDoc.getFieldValue(\"name_s_dv\"));\n        for (String subResult : new String []{\"depts\", \"depts_i\"}) {\n\n          SolrDocumentList subDoc = (SolrDocumentList)employeeDoc.getFieldValue(subResult);\n          for (int deptNum : new int []{0, deptMultiplier-1}) {\n            SolrDocument deptDoc = subDoc.get(deptNum);\n            Object expectedDept = (subResult.equals(\"depts\") ? engText : engId);\n            assertTrue( \"\" + expectedDept + \" equals to \" + deptDoc,\n                expectedDept.equals(deptDoc));\n          }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testJustJohnJavabin() throws Exception {\n    final SolrQueryRequest johnTwoFL = req(johnAndNancyParams);\n    ModifiableSolrParams params = new ModifiableSolrParams(johnTwoFL.getParams());\n    params.set(\"q\",\"name_s:john\");\n    params.set(\"wt\",\"javabin\");\n    \n    johnTwoFL.setParams(params);\n    \n    final NamedList<Object> unmarshalled;\n    {\n      SolrCore core = johnTwoFL.getCore();\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(johnTwoFL, rsp));\n    \n    SolrQueryResponse response = h.queryAndResponse(\n        johnTwoFL.getParams().get(CommonParams.QT), johnTwoFL);\n    \n    BinaryQueryResponseWriter responseWriter = (BinaryQueryResponseWriter) core.getQueryResponseWriter(johnTwoFL);\n    ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n    responseWriter.write(bytes,johnTwoFL,response);\n    \n    unmarshalled = (NamedList<Object>) new JavaBinCodec().unmarshal(\n        new ByteArrayInputStream(bytes.toByteArray()));\n    \n      johnTwoFL.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n    \n    SolrDocumentList resultDocs = (SolrDocumentList)(unmarshalled.get(\"response\"));\n    \n    {\n      Map<String,String> engText = new HashMap<>();\n      engText.put(\"text_t\", \"These guys develop stuff\");\n      \n      Map<String,String> engId = new HashMap<>();\n      engId.put(\"text_t\", \"These guys develop stuff\");\n      engId.put(\"dept_id_s_dv\", \"Engineering\");\n      \n      for (int docNum : new int []{0, peopleMultiplier-1}) {\n        SolrDocument employeeDoc = resultDocs.get(docNum);\n        assertEquals(\"john\", employeeDoc.getFieldValue(\"name_s_dv\"));\n        for (String subResult : new String []{\"depts\", \"depts_i\"}) {\n\n          SolrDocumentList subDoc = (SolrDocumentList)employeeDoc.getFieldValue(subResult);\n          for (int deptNum : new int []{0, deptMultiplier-1}) {\n            SolrDocument deptDoc = subDoc.get(deptNum);\n            Object expectedDept = (subResult.equals(\"depts\") ? engText : engId);\n            assertTrue( \"\" + expectedDept + \" equals to \" + deptDoc,\n                expectedDept.equals(deptDoc));\n          }\n      }\n    }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","561c2351baf6dd64061addef891359954c1a7faa"],"561c2351baf6dd64061addef891359954c1a7faa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["d470c8182e92b264680e34081b75e70a9f2b3c89","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["d470c8182e92b264680e34081b75e70a9f2b3c89","97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","561c2351baf6dd64061addef891359954c1a7faa"]},"commit2Childs":{"97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e66a459d38c1c4a2f97128433dab546f683a9fed","561c2351baf6dd64061addef891359954c1a7faa","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"561c2351baf6dd64061addef891359954c1a7faa":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["97dc2f8d4b90795c74a2f9a9b02bfc9aeffca6c2","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}