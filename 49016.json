{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#internalAddCategory(CategoryPath,int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#internalAddCategory(CategoryPath,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a new category into the index (and the cache), and return its new\n   * ordinal.\n   * <P>\n   * Actually, we might also need to add some of the category's ancestors\n   * before we can add the category itself (while keeping the invariant that a\n   * parent is always added to the taxonomy before its child). We do this by\n   * recursion.\n   */\n  private int internalAddCategory(CategoryPath categoryPath, int length)\n  throws CorruptIndexException, IOException {\n\n    // Find our parent's ordinal (recursively adding the parent category\n    // to the taxonomy if it's not already there). Then add the parent\n    // ordinal as payloads (rather than a stored field; payloads can be\n    // more efficiently read into memory in bulk by LuceneTaxonomyReader)\n    int parent;\n    if (length > 1) {\n      parent = findCategory(categoryPath, length - 1);\n      if (parent < 0) {\n        parent = internalAddCategory(categoryPath, length - 1);\n      }\n    } else if (length == 1) {\n      parent = TaxonomyReader.ROOT_ORDINAL;\n    } else {\n      parent = TaxonomyReader.INVALID_ORDINAL;\n    }\n    int id = addCategoryDocument(categoryPath, length, parent);\n\n    return id;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#internalAddCategory(CategoryPath,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a new category into the index (and the cache), and return its new\n   * ordinal.\n   * <P>\n   * Actually, we might also need to add some of the category's ancestors\n   * before we can add the category itself (while keeping the invariant that a\n   * parent is always added to the taxonomy before its child). We do this by\n   * recursion.\n   */\n  private int internalAddCategory(CategoryPath categoryPath, int length)\n  throws CorruptIndexException, IOException {\n\n    // Find our parent's ordinal (recursively adding the parent category\n    // to the taxonomy if it's not already there). Then add the parent\n    // ordinal as payloads (rather than a stored field; payloads can be\n    // more efficiently read into memory in bulk by LuceneTaxonomyReader)\n    int parent;\n    if (length > 1) {\n      parent = findCategory(categoryPath, length - 1);\n      if (parent < 0) {\n        parent = internalAddCategory(categoryPath, length - 1);\n      }\n    } else if (length == 1) {\n      parent = TaxonomyReader.ROOT_ORDINAL;\n    } else {\n      parent = TaxonomyReader.INVALID_ORDINAL;\n    }\n    int id = addCategoryDocument(categoryPath, length, parent);\n\n    return id;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#internalAddCategory(CategoryPath,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a new category into the index (and the cache), and return its new\n   * ordinal.\n   * <P>\n   * Actually, we might also need to add some of the category's ancestors\n   * before we can add the category itself (while keeping the invariant that a\n   * parent is always added to the taxonomy before its child). We do this by\n   * recursion.\n   */\n  private int internalAddCategory(CategoryPath categoryPath, int length)\n  throws CorruptIndexException, IOException {\n\n    // Find our parent's ordinal (recursively adding the parent category\n    // to the taxonomy if it's not already there). Then add the parent\n    // ordinal as payloads (rather than a stored field; payloads can be\n    // more efficiently read into memory in bulk by LuceneTaxonomyReader)\n    int parent;\n    if (length > 1) {\n      parent = findCategory(categoryPath, length - 1);\n      if (parent < 0) {\n        parent = internalAddCategory(categoryPath, length - 1);\n      }\n    } else if (length == 1) {\n      parent = TaxonomyReader.ROOT_ORDINAL;\n    } else {\n      parent = TaxonomyReader.INVALID_ORDINAL;\n    }\n    int id = addCategoryDocument(categoryPath, length, parent);\n\n    return id;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#internalAddCategory(CategoryPath,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#internalAddCategory(CategoryPath,int).mjava","sourceNew":"  /**\n   * Add a new category into the index (and the cache), and return its new\n   * ordinal.\n   * <P>\n   * Actually, we might also need to add some of the category's ancestors\n   * before we can add the category itself (while keeping the invariant that a\n   * parent is always added to the taxonomy before its child). We do this by\n   * recursion.\n   */\n  private int internalAddCategory(CategoryPath categoryPath, int length)\n  throws CorruptIndexException, IOException {\n\n    // Find our parent's ordinal (recursively adding the parent category\n    // to the taxonomy if it's not already there). Then add the parent\n    // ordinal as payloads (rather than a stored field; payloads can be\n    // more efficiently read into memory in bulk by LuceneTaxonomyReader)\n    int parent;\n    if (length > 1) {\n      parent = findCategory(categoryPath, length - 1);\n      if (parent < 0) {\n        parent = internalAddCategory(categoryPath, length - 1);\n      }\n    } else if (length == 1) {\n      parent = TaxonomyReader.ROOT_ORDINAL;\n    } else {\n      parent = TaxonomyReader.INVALID_ORDINAL;\n    }\n    int id = addCategoryDocument(categoryPath, length, parent);\n\n    return id;\n  }\n\n","sourceOld":"  /**\n   * Add a new category into the index (and the cache), and return its new\n   * ordinal.\n   * <P>\n   * Actually, we might also need to add some of the category's ancestors\n   * before we can add the category itself (while keeping the invariant that a\n   * parent is always added to the taxonomy before its child). We do this by\n   * recursion.\n   */\n  private int internalAddCategory(CategoryPath categoryPath, int length)\n  throws CorruptIndexException, IOException {\n\n    // Find our parent's ordinal (recursively adding the parent category\n    // to the taxonomy if it's not already there). Then add the parent\n    // ordinal as payloads (rather than a stored field; payloads can be\n    // more efficiently read into memory in bulk by LuceneTaxonomyReader)\n    int parent;\n    if (length > 1) {\n      parent = findCategory(categoryPath, length - 1);\n      if (parent < 0) {\n        parent = internalAddCategory(categoryPath, length - 1);\n      }\n    } else if (length == 1) {\n      parent = TaxonomyReader.ROOT_ORDINAL;\n    } else {\n      parent = TaxonomyReader.INVALID_ORDINAL;\n    }\n    int id = addCategoryDocument(categoryPath, length, parent);\n\n    return id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"]},"commit2Childs":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}