{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#getFacetResults().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#getFacetResults().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#getFacetResults().mjava","sourceNew":"  /**\n   * Return accumulated facets results (according to faceted search parameters) \n   * for collected documents.\n   * @throws IOException on error\n   */\n  public List<FacetResult> getFacetResults() throws IOException {\n    synchronized (resultsGuard) { // over protection \n      if (results == null) {\n        // lazy creation but just once\n        results = facetsAccumulator.accumulate(scoreDocIdCollector.getScoredDocIDs());\n        scoreDocIdCollector = null;\n      }\n      return results;\n    }\n  }\n\n","sourceOld":"  /**\n   * Return accumulated facets results (according to faceted search parameters) \n   * for collected documents.\n   * @throws IOException on error\n   */\n  public List<FacetResult> getFacetResults() throws IOException {\n    synchronized (resultsGuard) { // over protection \n      if (results == null) {\n        // lazy creation but just once\n        results = facetsAccumulator.accumulate(scoreDocIdCollector.getScoredDocIDs());\n        scoreDocIdCollector = null;\n      }\n      return results;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#getFacetResults().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#getFacetResults().mjava","sourceNew":"  /**\n   * Returns a {@link FacetResult} per {@link FacetRequest} set in\n   * {@link FacetSearchParams}. Note that if one of the {@link FacetRequest\n   * requests} is for a {@link CategoryPath} that does not exist in the taxonomy,\n   * no matching {@link FacetResult} will be returned.\n   */\n  public abstract List<FacetResult> getFacetResults() throws IOException;\n\n","sourceOld":"  /**\n   * Return accumulated facets results (according to faceted search parameters) \n   * for collected documents.\n   * @throws IOException on error\n   */\n  public List<FacetResult> getFacetResults() throws IOException {\n    synchronized (resultsGuard) { // over protection \n      if (results == null) {\n        // lazy creation but just once\n        results = facetsAccumulator.accumulate(scoreDocIdCollector.getScoredDocIDs());\n        scoreDocIdCollector = null;\n      }\n      return results;\n    }\n  }\n\n","bugFix":null,"bugIntro":["004aa3627d484d9bc0a4281c12c40240ceeaf75a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#getFacetResults().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#getFacetResults().mjava","sourceNew":"  /**\n   * Returns a {@link FacetResult} per {@link FacetRequest} set in\n   * {@link FacetSearchParams}. Note that if one of the {@link FacetRequest\n   * requests} is for a {@link CategoryPath} that does not exist in the taxonomy,\n   * no matching {@link FacetResult} will be returned.\n   */\n  public abstract List<FacetResult> getFacetResults() throws IOException;\n\n","sourceOld":"  /**\n   * Return accumulated facets results (according to faceted search parameters) \n   * for collected documents.\n   * @throws IOException on error\n   */\n  public List<FacetResult> getFacetResults() throws IOException {\n    synchronized (resultsGuard) { // over protection \n      if (results == null) {\n        // lazy creation but just once\n        results = facetsAccumulator.accumulate(scoreDocIdCollector.getScoredDocIDs());\n        scoreDocIdCollector = null;\n      }\n      return results;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#getFacetResults().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#getFacetResults().mjava","sourceNew":"  /**\n   * Returns a {@link FacetResult} per {@link FacetRequest} set in\n   * {@link FacetSearchParams}. Note that if one of the {@link FacetRequest\n   * requests} is for a {@link CategoryPath} that does not exist in the taxonomy,\n   * no matching {@link FacetResult} will be returned.\n   */\n  public final List<FacetResult> getFacetResults() throws IOException {\n    finish();\n    return accumulator.accumulate(matchingDocs);\n  }\n\n","sourceOld":"  /**\n   * Returns a {@link FacetResult} per {@link FacetRequest} set in\n   * {@link FacetSearchParams}. Note that if one of the {@link FacetRequest\n   * requests} is for a {@link CategoryPath} that does not exist in the taxonomy,\n   * no matching {@link FacetResult} will be returned.\n   */\n  public abstract List<FacetResult> getFacetResults() throws IOException;\n\n","bugFix":null,"bugIntro":["004aa3627d484d9bc0a4281c12c40240ceeaf75a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"004aa3627d484d9bc0a4281c12c40240ceeaf75a","date":1364791776,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#getFacetResults().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#getFacetResults().mjava","sourceNew":"  /**\n   * Returns a {@link FacetResult} per {@link FacetRequest} set in\n   * {@link FacetSearchParams}. Note that if a {@link FacetRequest} defines a\n   * {@link CategoryPath} which does not exist in the taxonomy, an empty\n   * {@link FacetResult} will be returned for it.\n   */\n  public final List<FacetResult> getFacetResults() throws IOException {\n    // LUCENE-4893: if results are not cached, counts are multiplied as many\n    // times as this method is called. \n    if (cachedResults == null) {\n      finish();\n      cachedResults = accumulator.accumulate(matchingDocs);\n    }\n    \n    return cachedResults;\n  }\n\n","sourceOld":"  /**\n   * Returns a {@link FacetResult} per {@link FacetRequest} set in\n   * {@link FacetSearchParams}. Note that if one of the {@link FacetRequest\n   * requests} is for a {@link CategoryPath} that does not exist in the taxonomy,\n   * no matching {@link FacetResult} will be returned.\n   */\n  public final List<FacetResult> getFacetResults() throws IOException {\n    finish();\n    return accumulator.accumulate(matchingDocs);\n  }\n\n","bugFix":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#getFacetResults().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#getFacetResults().mjava","sourceNew":"  /**\n   * Returns a {@link FacetResult} per {@link FacetRequest} set in\n   * {@link FacetSearchParams}. Note that if a {@link FacetRequest} defines a\n   * {@link FacetLabel} which does not exist in the taxonomy, an empty\n   * {@link FacetResult} will be returned for it.\n   */\n  public final List<FacetResult> getFacetResults() throws IOException {\n    // LUCENE-4893: if results are not cached, counts are multiplied as many\n    // times as this method is called. \n    if (cachedResults == null) {\n      finish();\n      cachedResults = accumulator.accumulate(matchingDocs);\n    }\n    \n    return cachedResults;\n  }\n\n","sourceOld":"  /**\n   * Returns a {@link FacetResult} per {@link FacetRequest} set in\n   * {@link FacetSearchParams}. Note that if a {@link FacetRequest} defines a\n   * {@link CategoryPath} which does not exist in the taxonomy, an empty\n   * {@link FacetResult} will be returned for it.\n   */\n  public final List<FacetResult> getFacetResults() throws IOException {\n    // LUCENE-4893: if results are not cached, counts are multiplied as many\n    // times as this method is called. \n    if (cachedResults == null) {\n      finish();\n      cachedResults = accumulator.accumulate(matchingDocs);\n    }\n    \n    return cachedResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#getFacetResults().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a {@link FacetResult} per {@link FacetRequest} set in\n   * {@link FacetSearchParams}. Note that if a {@link FacetRequest} defines a\n   * {@link FacetLabel} which does not exist in the taxonomy, an empty\n   * {@link FacetResult} will be returned for it.\n   */\n  public final List<FacetResult> getFacetResults() throws IOException {\n    // LUCENE-4893: if results are not cached, counts are multiplied as many\n    // times as this method is called. \n    if (cachedResults == null) {\n      finish();\n      cachedResults = accumulator.accumulate(matchingDocs);\n    }\n    \n    return cachedResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsCollector#getFacetResults().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a {@link FacetResult} per {@link FacetRequest} set in\n   * {@link FacetSearchParams}. Note that if a {@link FacetRequest} defines a\n   * {@link CategoryPath} which does not exist in the taxonomy, an empty\n   * {@link FacetResult} will be returned for it.\n   */\n  public final List<FacetResult> getFacetResults() throws IOException {\n    // LUCENE-4893: if results are not cached, counts are multiplied as many\n    // times as this method is called. \n    if (cachedResults == null) {\n      finish();\n      cachedResults = accumulator.accumulate(matchingDocs);\n    }\n    \n    return cachedResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"004aa3627d484d9bc0a4281c12c40240ceeaf75a":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["004aa3627d484d9bc0a4281c12c40240ceeaf75a","d33e19a97046248623a7591aeaa6547233fd15e2"],"07155cdd910937cdf6877e48884d5782845c8b8b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["004aa3627d484d9bc0a4281c12c40240ceeaf75a"]},"commit2Childs":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["07155cdd910937cdf6877e48884d5782845c8b8b","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","07155cdd910937cdf6877e48884d5782845c8b8b"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"004aa3627d484d9bc0a4281c12c40240ceeaf75a":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["004aa3627d484d9bc0a4281c12c40240ceeaf75a"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}