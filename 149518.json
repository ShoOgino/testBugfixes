{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeCeil().mjava","commits":[{"id":"03bffb520caf6e9833c4b9a82ac67d19a1f3fc97","date":1459595815,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeCeil().mjava","pathOld":"/dev/null","sourceNew":"  public void testEncodeDecodeCeil() throws Exception {\n    // just for testing quantization error\n    final double ENCODING_TOLERANCE = 1e-7;\n\n    int iters = atLeast(10000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitudeCeil(lat));\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, ENCODING_TOLERANCE);\n\n      double lon = GeoTestUtil.nextLongitude();\n      double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitudeCeil(lon));\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, ENCODING_TOLERANCE);\n    }\n\n    // check edge/interesting cases explicitly\n    assertEquals(0.0, LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitudeCeil(0.0)), ENCODING_TOLERANCE);\n    assertEquals(90.0, LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitudeCeil(90.0)), ENCODING_TOLERANCE);\n    assertEquals(-90.0, LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitudeCeil(-90.0)), ENCODING_TOLERANCE);\n\n    assertEquals(0.0, LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitudeCeil(0.0)), ENCODING_TOLERANCE);\n    assertEquals(180.0, LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitudeCeil(180.0)), ENCODING_TOLERANCE);\n    assertEquals(-180.0, LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitudeCeil(-180.0)), ENCODING_TOLERANCE);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd6e28813bd3665a7c29cc07d0f32db701300168","date":1459966694,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeCeil().mjava","sourceNew":null,"sourceOld":"  public void testEncodeDecodeCeil() throws Exception {\n    // just for testing quantization error\n    final double ENCODING_TOLERANCE = 1e-7;\n\n    int iters = atLeast(10000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitudeCeil(lat));\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, ENCODING_TOLERANCE);\n\n      double lon = GeoTestUtil.nextLongitude();\n      double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitudeCeil(lon));\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, ENCODING_TOLERANCE);\n    }\n\n    // check edge/interesting cases explicitly\n    assertEquals(0.0, LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitudeCeil(0.0)), ENCODING_TOLERANCE);\n    assertEquals(90.0, LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitudeCeil(90.0)), ENCODING_TOLERANCE);\n    assertEquals(-90.0, LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitudeCeil(-90.0)), ENCODING_TOLERANCE);\n\n    assertEquals(0.0, LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitudeCeil(0.0)), ENCODING_TOLERANCE);\n    assertEquals(180.0, LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitudeCeil(180.0)), ENCODING_TOLERANCE);\n    assertEquals(-180.0, LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitudeCeil(-180.0)), ENCODING_TOLERANCE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testEncodeDecodeCeil().mjava","sourceNew":null,"sourceOld":"  public void testEncodeDecodeCeil() throws Exception {\n    // just for testing quantization error\n    final double ENCODING_TOLERANCE = 1e-7;\n\n    int iters = atLeast(10000);\n    for(int iter=0;iter<iters;iter++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double latEnc = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitudeCeil(lat));\n      assertEquals(\"lat=\" + lat + \" latEnc=\" + latEnc + \" diff=\" + (lat - latEnc), lat, latEnc, ENCODING_TOLERANCE);\n\n      double lon = GeoTestUtil.nextLongitude();\n      double lonEnc = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitudeCeil(lon));\n      assertEquals(\"lon=\" + lon + \" lonEnc=\" + lonEnc + \" diff=\" + (lon - lonEnc), lon, lonEnc, ENCODING_TOLERANCE);\n    }\n\n    // check edge/interesting cases explicitly\n    assertEquals(0.0, LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitudeCeil(0.0)), ENCODING_TOLERANCE);\n    assertEquals(90.0, LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitudeCeil(90.0)), ENCODING_TOLERANCE);\n    assertEquals(-90.0, LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitudeCeil(-90.0)), ENCODING_TOLERANCE);\n\n    assertEquals(0.0, LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitudeCeil(0.0)), ENCODING_TOLERANCE);\n    assertEquals(180.0, LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitudeCeil(180.0)), ENCODING_TOLERANCE);\n    assertEquals(-180.0, LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitudeCeil(-180.0)), ENCODING_TOLERANCE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6284684320a9808c41a5e43de958b2da22f89bd":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97","bd6e28813bd3665a7c29cc07d0f32db701300168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd6e28813bd3665a7c29cc07d0f32db701300168":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97"],"03bffb520caf6e9833c4b9a82ac67d19a1f3fc97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6284684320a9808c41a5e43de958b2da22f89bd"]},"commit2Childs":{"b6284684320a9808c41a5e43de958b2da22f89bd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97"],"bd6e28813bd3665a7c29cc07d0f32db701300168":["b6284684320a9808c41a5e43de958b2da22f89bd"],"03bffb520caf6e9833c4b9a82ac67d19a1f3fc97":["b6284684320a9808c41a5e43de958b2da22f89bd","bd6e28813bd3665a7c29cc07d0f32db701300168"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}