{"path":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#hasArray().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#hasArray().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#hasArray().mjava","sourceNew":"    public boolean hasArray() {\n      boolean oneRealSource = false;\n      for (DocValuesSlice slice : slices) {\n        try {\n          Source source = slice.docValues.getSource();\n          if (source instanceof EmptySource) {\n            /*\n             * empty source marks a gap in the array skip if we encounter one\n             */\n            continue;\n          }\n          oneRealSource = true;\n          if (!source.hasArray()) {\n            return false;\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e);\n        }\n      }\n      return oneRealSource;\n    }\n\n","sourceOld":"    public boolean hasArray() {\n      boolean oneRealSource = false;\n      for (DocValuesSlice slice : slices) {\n        try {\n          Source source = slice.docValues.getSource();\n          if (source instanceof EmptySource) {\n            /*\n             * empty source marks a gap in the array skip if we encounter one\n             */\n            continue;\n          }\n          oneRealSource = true;\n          if (!source.hasArray()) {\n            return false;\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e);\n        }\n      }\n      return oneRealSource;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#hasArray().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#hasArray().mjava","sourceNew":"    @Override\n    public boolean hasArray() {\n      boolean oneRealSource = false;\n      for (DocValuesSlice slice : slices) {\n        try {\n          Source source = slice.docValues.getSource();\n          if (source instanceof EmptySource) {\n            /*\n             * empty source marks a gap in the array skip if we encounter one\n             */\n            continue;\n          }\n          oneRealSource = true;\n          if (!source.hasArray()) {\n            return false;\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e);\n        }\n      }\n      return oneRealSource;\n    }\n\n","sourceOld":"    public boolean hasArray() {\n      boolean oneRealSource = false;\n      for (DocValuesSlice slice : slices) {\n        try {\n          Source source = slice.docValues.getSource();\n          if (source instanceof EmptySource) {\n            /*\n             * empty source marks a gap in the array skip if we encounter one\n             */\n            continue;\n          }\n          oneRealSource = true;\n          if (!source.hasArray()) {\n            return false;\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e);\n        }\n      }\n      return oneRealSource;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#hasArray().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#hasArray().mjava","sourceNew":"    @Override\n    public boolean hasArray() {\n      boolean oneRealSource = false;\n      for (DocValuesSlice slice : slices) {\n        try {\n          Source source = slice.docValues.getSource();\n          if (source instanceof EmptySource) {\n            /*\n             * empty source marks a gap in the array skip if we encounter one\n             */\n            continue;\n          }\n          oneRealSource = true;\n          if (!source.hasArray()) {\n            return false;\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e);\n        }\n      }\n      return oneRealSource;\n    }\n\n","sourceOld":"    public boolean hasArray() {\n      boolean oneRealSource = false;\n      for (DocValuesSlice slice : slices) {\n        try {\n          Source source = slice.docValues.getSource();\n          if (source instanceof EmptySource) {\n            /*\n             * empty source marks a gap in the array skip if we encounter one\n             */\n            continue;\n          }\n          oneRealSource = true;\n          if (!source.hasArray()) {\n            return false;\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e);\n        }\n      }\n      return oneRealSource;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#hasArray().mjava","sourceNew":null,"sourceOld":"    @Override\n    public boolean hasArray() {\n      boolean oneRealSource = false;\n      for (DocValuesSlice slice : slices) {\n        try {\n          Source source = slice.docValues.getSource();\n          if (source instanceof EmptySource) {\n            /*\n             * empty source marks a gap in the array skip if we encounter one\n             */\n            continue;\n          }\n          oneRealSource = true;\n          if (!source.hasArray()) {\n            return false;\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e);\n        }\n      }\n      return oneRealSource;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#hasArray().mjava","sourceNew":null,"sourceOld":"    @Override\n    public boolean hasArray() {\n      boolean oneRealSource = false;\n      for (DocValuesSlice slice : slices) {\n        try {\n          Source source = slice.docValues.getSource();\n          if (source instanceof EmptySource) {\n            /*\n             * empty source marks a gap in the array skip if we encounter one\n             */\n            continue;\n          }\n          oneRealSource = true;\n          if (!source.hasArray()) {\n            return false;\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e);\n        }\n      }\n      return oneRealSource;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7530de27b87b961b51f01bd1299b7004d46e8823"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["7530de27b87b961b51f01bd1299b7004d46e8823","0837ab0472feecb3a54260729d845f839e1cbd72"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["0837ab0472feecb3a54260729d845f839e1cbd72"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}