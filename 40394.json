{"path":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testTrimAll().mjava","commits":[{"id":"be9a5d1846ac0beb625ba68da060e16119d9f51e","date":1328820081,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testTrimAll().mjava","pathOld":"/dev/null","sourceNew":"  public void testTrimAll() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"trim-all\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"name\", \" Hoss \", new StringBuilder(\" Man\")),\n                       f(\"foo_t\", \" some text \", \"other Text\\t\"),\n                       f(\"foo_d\", new Integer(42)),\n                       field(\"foo_s\", 5.0F, \" string \")));\n\n    assertNotNull(d);\n\n    // simple stuff\n    assertEquals(\"string\", d.getFieldValue(\"foo_s\"));\n    assertEquals(Arrays.asList(\"some text\",\"other Text\"), \n                 d.getFieldValues(\"foo_t\"));\n    assertEquals(Arrays.asList(\"Hoss\",\"Man\"), \n                 d.getFieldValues(\"name\"));\n\n    // slightly more interesting\n    assertEquals(\"processor borked non string value\", \n                 new Integer(42), d.getFieldValue(\"foo_d\"));\n    assertEquals(\"wrong boost\", \n                 5.0F, d.getField(\"foo_s\").getBoost(), 0.0F);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testTrimAll().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testTrimAll().mjava","sourceNew":"  public void testTrimAll() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"trim-all\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"name\", \" Hoss \", new StringBuilder(\" Man\")),\n                       f(\"foo_t\", \" some text \", \"other Text\\t\"),\n                       f(\"foo_d\", new Integer(42)),\n                       field(\"foo_s\", \" string \")));\n\n    assertNotNull(d);\n\n    // simple stuff\n    assertEquals(\"string\", d.getFieldValue(\"foo_s\"));\n    assertEquals(Arrays.asList(\"some text\",\"other Text\"), \n                 d.getFieldValues(\"foo_t\"));\n    assertEquals(Arrays.asList(\"Hoss\",\"Man\"), \n                 d.getFieldValues(\"name\"));\n\n    // slightly more interesting\n    assertEquals(\"processor borked non string value\", \n                 new Integer(42), d.getFieldValue(\"foo_d\"));\n  }\n\n","sourceOld":"  public void testTrimAll() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"trim-all\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"name\", \" Hoss \", new StringBuilder(\" Man\")),\n                       f(\"foo_t\", \" some text \", \"other Text\\t\"),\n                       f(\"foo_d\", new Integer(42)),\n                       field(\"foo_s\", 5.0F, \" string \")));\n\n    assertNotNull(d);\n\n    // simple stuff\n    assertEquals(\"string\", d.getFieldValue(\"foo_s\"));\n    assertEquals(Arrays.asList(\"some text\",\"other Text\"), \n                 d.getFieldValues(\"foo_t\"));\n    assertEquals(Arrays.asList(\"Hoss\",\"Man\"), \n                 d.getFieldValues(\"name\"));\n\n    // slightly more interesting\n    assertEquals(\"processor borked non string value\", \n                 new Integer(42), d.getFieldValue(\"foo_d\"));\n    assertEquals(\"wrong boost\", \n                 5.0F, d.getField(\"foo_s\").getBoost(), 0.0F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testTrimAll().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testTrimAll().mjava","sourceNew":"  public void testTrimAll() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"trim-all\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"name\", \" Hoss \", new StringBuilder(\" Man\")),\n                       f(\"foo_t\", \" some text \", \"other Text\\t\"),\n                       f(\"foo_d\", 42),\n                       field(\"foo_s\", \" string \")));\n\n    assertNotNull(d);\n\n    // simple stuff\n    assertEquals(\"string\", d.getFieldValue(\"foo_s\"));\n    assertEquals(Arrays.asList(\"some text\",\"other Text\"), \n                 d.getFieldValues(\"foo_t\"));\n    assertEquals(Arrays.asList(\"Hoss\",\"Man\"), \n                 d.getFieldValues(\"name\"));\n\n    // slightly more interesting\n    assertEquals(\"processor borked non string value\", \n                 42, d.getFieldValue(\"foo_d\"));\n  }\n\n","sourceOld":"  public void testTrimAll() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"trim-all\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"name\", \" Hoss \", new StringBuilder(\" Man\")),\n                       f(\"foo_t\", \" some text \", \"other Text\\t\"),\n                       f(\"foo_d\", new Integer(42)),\n                       field(\"foo_s\", \" string \")));\n\n    assertNotNull(d);\n\n    // simple stuff\n    assertEquals(\"string\", d.getFieldValue(\"foo_s\"));\n    assertEquals(Arrays.asList(\"some text\",\"other Text\"), \n                 d.getFieldValues(\"foo_t\"));\n    assertEquals(Arrays.asList(\"Hoss\",\"Man\"), \n                 d.getFieldValues(\"name\"));\n\n    // slightly more interesting\n    assertEquals(\"processor borked non string value\", \n                 new Integer(42), d.getFieldValue(\"foo_d\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testTrimAll().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testTrimAll().mjava","sourceNew":"  public void testTrimAll() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"trim-all\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"name\", \" Hoss \", new StringBuilder(\" Man\")),\n                       f(\"foo_t\", \" some text \", \"other Text\\t\"),\n                       f(\"foo_d\", 42),\n                       field(\"foo_s\", \" string \")));\n\n    assertNotNull(d);\n\n    // simple stuff\n    assertEquals(\"string\", d.getFieldValue(\"foo_s\"));\n    assertEquals(Arrays.asList(\"some text\",\"other Text\"), \n                 d.getFieldValues(\"foo_t\"));\n    assertEquals(Arrays.asList(\"Hoss\",\"Man\"), \n                 d.getFieldValues(\"name\"));\n\n    // slightly more interesting\n    assertEquals(\"processor borked non string value\", \n                 42, d.getFieldValue(\"foo_d\"));\n  }\n\n","sourceOld":"  public void testTrimAll() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"trim-all\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"name\", \" Hoss \", new StringBuilder(\" Man\")),\n                       f(\"foo_t\", \" some text \", \"other Text\\t\"),\n                       f(\"foo_d\", new Integer(42)),\n                       field(\"foo_s\", \" string \")));\n\n    assertNotNull(d);\n\n    // simple stuff\n    assertEquals(\"string\", d.getFieldValue(\"foo_s\"));\n    assertEquals(Arrays.asList(\"some text\",\"other Text\"), \n                 d.getFieldValues(\"foo_t\"));\n    assertEquals(Arrays.asList(\"Hoss\",\"Man\"), \n                 d.getFieldValues(\"name\"));\n\n    // slightly more interesting\n    assertEquals(\"processor borked non string value\", \n                 new Integer(42), d.getFieldValue(\"foo_d\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testTrimAll().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testTrimAll().mjava","sourceNew":"  public void testTrimAll() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"trim-all\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"name\", \" Hoss \", new StringBuilder(\" Man\")),\n                       f(\"foo_t\", \" some text \", \"other Text\\t\"),\n                       f(\"foo_d\", 42),\n                       field(\"foo_s\", \" string \")));\n\n    assertNotNull(d);\n\n    // simple stuff\n    assertEquals(\"string\", d.getFieldValue(\"foo_s\"));\n    assertEquals(Arrays.asList(\"some text\",\"other Text\"), \n                 d.getFieldValues(\"foo_t\"));\n    assertEquals(Arrays.asList(\"Hoss\",\"Man\"), \n                 d.getFieldValues(\"name\"));\n\n    // slightly more interesting\n    assertEquals(\"processor borked non string value\", \n                 42, d.getFieldValue(\"foo_d\"));\n  }\n\n","sourceOld":"  public void testTrimAll() throws Exception {\n    SolrInputDocument d = null;\n\n    d = processAdd(\"trim-all\", \n                   doc(f(\"id\", \"1111\"),\n                       f(\"name\", \" Hoss \", new StringBuilder(\" Man\")),\n                       f(\"foo_t\", \" some text \", \"other Text\\t\"),\n                       f(\"foo_d\", new Integer(42)),\n                       field(\"foo_s\", \" string \")));\n\n    assertNotNull(d);\n\n    // simple stuff\n    assertEquals(\"string\", d.getFieldValue(\"foo_s\"));\n    assertEquals(Arrays.asList(\"some text\",\"other Text\"), \n                 d.getFieldValues(\"foo_t\"));\n    assertEquals(Arrays.asList(\"Hoss\",\"Man\"), \n                 d.getFieldValues(\"name\"));\n\n    // slightly more interesting\n    assertEquals(\"processor borked non string value\", \n                 new Integer(42), d.getFieldValue(\"foo_d\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be9a5d1846ac0beb625ba68da060e16119d9f51e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["acd9883560fd89e6448b2b447302fe543040cd4f"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["acd9883560fd89e6448b2b447302fe543040cd4f","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["acd9883560fd89e6448b2b447302fe543040cd4f","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"be9a5d1846ac0beb625ba68da060e16119d9f51e":["acd9883560fd89e6448b2b447302fe543040cd4f"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"acd9883560fd89e6448b2b447302fe543040cd4f":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}