{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/PrefixTreeFacetCounter#compute(PrefixTreeStrategy,IndexReaderContext,Filter,Shape,int,FacetVisitor).mjava","commits":[{"id":"478e85d406c2ea05f4e5028248b9a8e43f300885","date":1421346780,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/PrefixTreeFacetCounter#compute(PrefixTreeStrategy,IndexReaderContext,Filter,Shape,int,FacetVisitor).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes facets using a callback/visitor style design, allowing flexibility for the caller to determine what to do\n   * with each underlying count.\n   *\n   * @param strategy the prefix tree strategy (contains the field reference, grid, max levels)\n   * @param context the IndexReader's context\n   * @param filter a Filter to limit counted docs. For optimal performance, it's\n   *               {@link org.apache.lucene.search.DocIdSet#bits()} should be non-null. If no filter is provided, live\n   *               docs are counted.\n   * @param queryShape the shape to limit the range of facet counts to\n   * @param facetLevel the maximum depth (detail) of faceted cells\n   * @param facetVisitor the visitor/callback to receive the counts\n   */\n  public static void compute(PrefixTreeStrategy strategy, IndexReaderContext context, Filter filter,\n                             Shape queryShape, int facetLevel, FacetVisitor facetVisitor)\n      throws IOException {\n    //We collect per-leaf\n    for (final LeafReaderContext leafCtx : context.leaves()) {\n      //determine leaf acceptDocs Bits\n      Bits leafAcceptDocs;\n      if (filter == null) {\n        leafAcceptDocs = leafCtx.reader().getLiveDocs();//filter deleted\n      } else {\n        final DocIdSet docIdSet = filter.getDocIdSet(leafCtx, leafCtx.reader().getLiveDocs());\n        if (docIdSet == null) {\n          continue;//no docs in filter\n        }\n        leafAcceptDocs = docIdSet.bits();\n        if (leafAcceptDocs == null) {\n          final DocIdSetIterator iterator = docIdSet.iterator();\n          if (iterator == null) {\n            continue;//no docs in filter\n          }\n          //build bits from iterator (abnormal, hopefully, not expecting many docs)\n          SparseFixedBitSet bitSet = new SparseFixedBitSet(leafCtx.reader().maxDoc());\n          bitSet.or(iterator);\n          leafAcceptDocs = bitSet;\n        }\n      }\n\n      compute(strategy, leafCtx, leafAcceptDocs, queryShape, facetLevel, facetVisitor);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"294167f39e911e101e57b68cfeaf13cb05810e75","date":1421350806,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/PrefixTreeFacetCounter#compute(PrefixTreeStrategy,IndexReaderContext,Filter,Shape,int,FacetVisitor).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/PrefixTreeFacetCounter#compute(PrefixTreeStrategy,IndexReaderContext,Filter,Shape,int,FacetVisitor).mjava","sourceNew":"  /**\n   * Computes facets using a callback/visitor style design, allowing flexibility for the caller to determine what to do\n   * with each underlying count.\n   *\n   * @param strategy the prefix tree strategy (contains the field reference, grid, max levels)\n   * @param context the IndexReader's context\n   * @param filter a Filter to limit counted docs. For optimal performance, it's\n   *               {@link org.apache.lucene.search.DocIdSet#bits()} should be non-null. If no filter is provided, live\n   *               docs are counted.\n   * @param queryShape the shape to limit the range of facet counts to\n   * @param facetLevel the maximum depth (detail) of faceted cells\n   * @param facetVisitor the visitor/callback to receive the counts\n   */\n  public static void compute(PrefixTreeStrategy strategy, IndexReaderContext context, Filter filter,\n                             Shape queryShape, int facetLevel, FacetVisitor facetVisitor)\n      throws IOException {\n    //We collect per-leaf\n    for (final LeafReaderContext leafCtx : context.leaves()) {\n      //determine leaf acceptDocs Bits\n      Bits leafAcceptDocs;\n      if (filter == null) {\n        leafAcceptDocs = leafCtx.reader().getLiveDocs();//filter deleted\n      } else {\n        final DocIdSet docIdSet = filter.getDocIdSet(leafCtx, leafCtx.reader().getLiveDocs());\n        if (docIdSet == null) {\n          continue;//no docs in filter\n        }\n        leafAcceptDocs = docIdSet.bits();\n        if (leafAcceptDocs == null) {\n          final DocIdSetIterator iterator = docIdSet.iterator();\n          if (iterator == null) {\n            continue;//no docs in filter\n          }\n          //build bits from iterator (abnormal, hopefully, not expecting many docs)\n          SparseFixedBitSet bitSet = new SparseFixedBitSet(leafCtx.reader().maxDoc());\n          bitSet.or(iterator);\n          leafAcceptDocs = bitSet;\n        }\n      }\n\n      compute(strategy, leafCtx, leafAcceptDocs, queryShape, facetLevel, facetVisitor);\n    }\n  }\n\n","sourceOld":"  /**\n   * Computes facets using a callback/visitor style design, allowing flexibility for the caller to determine what to do\n   * with each underlying count.\n   *\n   * @param strategy the prefix tree strategy (contains the field reference, grid, max levels)\n   * @param context the IndexReader's context\n   * @param filter a Filter to limit counted docs. For optimal performance, it's\n   *               {@link org.apache.lucene.search.DocIdSet#bits()} should be non-null. If no filter is provided, live\n   *               docs are counted.\n   * @param queryShape the shape to limit the range of facet counts to\n   * @param facetLevel the maximum depth (detail) of faceted cells\n   * @param facetVisitor the visitor/callback to receive the counts\n   */\n  public static void compute(PrefixTreeStrategy strategy, IndexReaderContext context, Filter filter,\n                             Shape queryShape, int facetLevel, FacetVisitor facetVisitor)\n      throws IOException {\n    //We collect per-leaf\n    for (final LeafReaderContext leafCtx : context.leaves()) {\n      //determine leaf acceptDocs Bits\n      Bits leafAcceptDocs;\n      if (filter == null) {\n        leafAcceptDocs = leafCtx.reader().getLiveDocs();//filter deleted\n      } else {\n        final DocIdSet docIdSet = filter.getDocIdSet(leafCtx, leafCtx.reader().getLiveDocs());\n        if (docIdSet == null) {\n          continue;//no docs in filter\n        }\n        leafAcceptDocs = docIdSet.bits();\n        if (leafAcceptDocs == null) {\n          final DocIdSetIterator iterator = docIdSet.iterator();\n          if (iterator == null) {\n            continue;//no docs in filter\n          }\n          //build bits from iterator (abnormal, hopefully, not expecting many docs)\n          SparseFixedBitSet bitSet = new SparseFixedBitSet(leafCtx.reader().maxDoc());\n          bitSet.or(iterator);\n          leafAcceptDocs = bitSet;\n        }\n      }\n\n      compute(strategy, leafCtx, leafAcceptDocs, queryShape, facetLevel, facetVisitor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"294167f39e911e101e57b68cfeaf13cb05810e75":["478e85d406c2ea05f4e5028248b9a8e43f300885"],"478e85d406c2ea05f4e5028248b9a8e43f300885":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["294167f39e911e101e57b68cfeaf13cb05810e75"]},"commit2Childs":{"294167f39e911e101e57b68cfeaf13cb05810e75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"478e85d406c2ea05f4e5028248b9a8e43f300885":["294167f39e911e101e57b68cfeaf13cb05810e75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["478e85d406c2ea05f4e5028248b9a8e43f300885"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}