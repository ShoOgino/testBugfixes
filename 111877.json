{"path":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#testRandomIncreasingSloppiness().mjava","commits":[{"id":"ccf7fc9b3111449ddc1a53959fd3b922bafcd508","date":1330021629,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#testRandomIncreasingSloppiness().mjava","pathOld":"/dev/null","sourceNew":"  /** MultiPhraseQuery~N ⊆ MultiPhraseQuery~N+1 */\n  public void testRandomIncreasingSloppiness() throws Exception {\n    long seed = random.nextLong();\n    MultiPhraseQuery q1 = randomPhraseQuery(seed);\n    MultiPhraseQuery q2 = randomPhraseQuery(seed);\n    for (int i = 0; i < 10; i++) {\n      q1.setSlop(i);\n      q2.setSlop(i+1);\n      assertSubsetOf(q1, q2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#testRandomIncreasingSloppiness().mjava","pathOld":"/dev/null","sourceNew":"  /** MultiPhraseQuery~N ⊆ MultiPhraseQuery~N+1 */\n  public void testRandomIncreasingSloppiness() throws Exception {\n    long seed = random.nextLong();\n    MultiPhraseQuery q1 = randomPhraseQuery(seed);\n    MultiPhraseQuery q2 = randomPhraseQuery(seed);\n    for (int i = 0; i < 10; i++) {\n      q1.setSlop(i);\n      q2.setSlop(i+1);\n      assertSubsetOf(q1, q2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#testRandomIncreasingSloppiness().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#testRandomIncreasingSloppiness().mjava","sourceNew":"  /** MultiPhraseQuery~N ⊆ MultiPhraseQuery~N+1 */\n  public void testRandomIncreasingSloppiness() throws Exception {\n    long seed = random().nextLong();\n    MultiPhraseQuery q1 = randomPhraseQuery(seed);\n    MultiPhraseQuery q2 = randomPhraseQuery(seed);\n    for (int i = 0; i < 10; i++) {\n      q1.setSlop(i);\n      q2.setSlop(i+1);\n      assertSubsetOf(q1, q2);\n    }\n  }\n\n","sourceOld":"  /** MultiPhraseQuery~N ⊆ MultiPhraseQuery~N+1 */\n  public void testRandomIncreasingSloppiness() throws Exception {\n    long seed = random.nextLong();\n    MultiPhraseQuery q1 = randomPhraseQuery(seed);\n    MultiPhraseQuery q2 = randomPhraseQuery(seed);\n    for (int i = 0; i < 10; i++) {\n      q1.setSlop(i);\n      q2.setSlop(i+1);\n      assertSubsetOf(q1, q2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b97b669a6c8dac1437c3856f4133d83c986515ae","date":1427703853,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#testRandomIncreasingSloppiness().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#testRandomIncreasingSloppiness().mjava","sourceNew":"  /** MultiPhraseQuery~N ⊆ MultiPhraseQuery~N+1 */\n  public void testRandomIncreasingSloppiness() throws Exception {\n    long seed = random().nextLong();\n    for (int i = 0; i < 10; i++) {\n      MultiPhraseQuery q1 = randomPhraseQuery(seed);\n      MultiPhraseQuery q2 = randomPhraseQuery(seed);\n      q1.setSlop(i);\n      q2.setSlop(i+1);\n      assertSubsetOf(q1, q2);\n    }\n  }\n\n","sourceOld":"  /** MultiPhraseQuery~N ⊆ MultiPhraseQuery~N+1 */\n  public void testRandomIncreasingSloppiness() throws Exception {\n    long seed = random().nextLong();\n    MultiPhraseQuery q1 = randomPhraseQuery(seed);\n    MultiPhraseQuery q2 = randomPhraseQuery(seed);\n    for (int i = 0; i < 10; i++) {\n      q1.setSlop(i);\n      q2.setSlop(i+1);\n      assertSubsetOf(q1, q2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#testRandomIncreasingSloppiness().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#testRandomIncreasingSloppiness().mjava","sourceNew":"  /** MultiPhraseQuery~N ⊆ MultiPhraseQuery~N+1 */\n  public void testRandomIncreasingSloppiness() throws Exception {\n    long seed = random().nextLong();\n    for (int i = 0; i < 10; i++) {\n      MultiPhraseQuery q1 = randomPhraseQuery(seed);\n      MultiPhraseQuery q2 = randomPhraseQuery(seed);\n      q1.setSlop(i);\n      q2.setSlop(i+1);\n      assertSubsetOf(q1, q2);\n    }\n  }\n\n","sourceOld":"  /** MultiPhraseQuery~N ⊆ MultiPhraseQuery~N+1 */\n  public void testRandomIncreasingSloppiness() throws Exception {\n    long seed = random().nextLong();\n    MultiPhraseQuery q1 = randomPhraseQuery(seed);\n    MultiPhraseQuery q2 = randomPhraseQuery(seed);\n    for (int i = 0; i < 10; i++) {\n      q1.setSlop(i);\n      q2.setSlop(i+1);\n      assertSubsetOf(q1, q2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":3,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#testRandomIncreasingSloppiness().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#testRandomIncreasingSloppiness().mjava","sourceNew":"  /** MultiPhraseQuery~N ⊆ MultiPhraseQuery~N+1 */\n  public void testRandomIncreasingSloppiness() throws Exception {\n    long seed = random().nextLong();\n    for (int i = 0; i < 10; i++) {\n      MultiPhraseQuery q1 = randomPhraseQuery(seed);\n      MultiPhraseQuery q2 = randomPhraseQuery(seed);\n      q1 = new MultiPhraseQuery.Builder(q1).setSlop(i).build();\n      q2 = new MultiPhraseQuery.Builder(q2).setSlop(i+1).build();\n      assertSubsetOf(q1, q2);\n    }\n  }\n\n","sourceOld":"  /** MultiPhraseQuery~N ⊆ MultiPhraseQuery~N+1 */\n  public void testRandomIncreasingSloppiness() throws Exception {\n    long seed = random().nextLong();\n    for (int i = 0; i < 10; i++) {\n      MultiPhraseQuery q1 = randomPhraseQuery(seed);\n      MultiPhraseQuery q2 = randomPhraseQuery(seed);\n      q1.setSlop(i);\n      q2.setSlop(i+1);\n      assertSubsetOf(q1, q2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#testRandomIncreasingSloppiness().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSloppyPhraseQuery2#testRandomIncreasingSloppiness().mjava","sourceNew":"  /** MultiPhraseQuery~N ⊆ MultiPhraseQuery~N+1 */\n  public void testRandomIncreasingSloppiness() throws Exception {\n    long seed = random().nextLong();\n    for (int i = 0; i < 10; i++) {\n      MultiPhraseQuery q1 = randomPhraseQuery(seed);\n      MultiPhraseQuery q2 = randomPhraseQuery(seed);\n      q1 = new MultiPhraseQuery.Builder(q1).setSlop(i).build();\n      q2 = new MultiPhraseQuery.Builder(q2).setSlop(i+1).build();\n      assertSubsetOf(q1, q2);\n    }\n  }\n\n","sourceOld":"  /** MultiPhraseQuery~N ⊆ MultiPhraseQuery~N+1 */\n  public void testRandomIncreasingSloppiness() throws Exception {\n    long seed = random().nextLong();\n    for (int i = 0; i < 10; i++) {\n      MultiPhraseQuery q1 = randomPhraseQuery(seed);\n      MultiPhraseQuery q2 = randomPhraseQuery(seed);\n      q1.setSlop(i);\n      q2.setSlop(i+1);\n      assertSubsetOf(q1, q2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","b97b669a6c8dac1437c3856f4133d83c986515ae"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["b97b669a6c8dac1437c3856f4133d83c986515ae"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ccf7fc9b3111449ddc1a53959fd3b922bafcd508"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["ccf7fc9b3111449ddc1a53959fd3b922bafcd508"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["b97b669a6c8dac1437c3856f4133d83c986515ae","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"b97b669a6c8dac1437c3856f4133d83c986515ae":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ccf7fc9b3111449ddc1a53959fd3b922bafcd508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ccf7fc9b3111449ddc1a53959fd3b922bafcd508"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b97b669a6c8dac1437c3856f4133d83c986515ae"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b97b669a6c8dac1437c3856f4133d83c986515ae":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"ccf7fc9b3111449ddc1a53959fd3b922bafcd508":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}