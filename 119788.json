{"path":"solr/core/src/test/org/apache/solr/handler/RequestLoggingTest#testLogBeforeExecute(Logger).mjava","commits":[{"id":"b445f6deac6d72b114aa5c43c45ccf7e7f0785e8","date":1423087442,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/RequestLoggingTest#testLogBeforeExecute(Logger).mjava","pathOld":"/dev/null","sourceNew":"  public void testLogBeforeExecute(Logger logger) {\n    Level level = logger.getLevel();\n    logger.setLevel(Level.DEBUG);\n    logger.addAppender(appender);\n\n    try {\n      assertQ(req(\"q\", \"*:*\"));\n\n      String output = writer.toString();\n      Matcher matcher = Pattern.compile(\"DEBUG.*q=\\\\*:\\\\*.*\").matcher(output);\n      assertTrue(matcher.find());\n      final String group = matcher.group();\n      final String msg = \"Should not have post query information\";\n      assertFalse(msg, group.contains(\"hits\"));\n      assertFalse(msg, group.contains(\"status\"));\n      assertFalse(msg, group.contains(\"QTime\"));\n    } finally {\n      logger.setLevel(level);\n      logger.removeAppender(appender);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6e6487ac9e65315d4919099df92185cbcd3b2f84","5832050525b97d61021a45dac2330a707639600d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93baf46bd12096e0de407258b3b32cfaaf58e448","date":1522030569,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/RequestLoggingTest#testLogBeforeExecute(Logger).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/RequestLoggingTest#testLogBeforeExecute(Logger).mjava","sourceNew":"  public void testLogBeforeExecute(Logger logger) {\n    Level level = logger.getLevel();\n    \n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    LoggerConfig config = ctx.getConfiguration().getLoggerConfig(logger.getName());\n    config.setLevel(Level.DEBUG);\n    config.addAppender(appender, Level.DEBUG, null);\n    ctx.updateLoggers();\n\n    try {\n      assertQ(req(\"q\", \"*:*\"));\n\n      String output = writer.toString();\n      Matcher matcher = Pattern.compile(\"DEBUG.*q=\\\\*:\\\\*.*\").matcher(output);\n      assertTrue(matcher.find());\n      final String group = matcher.group();\n      final String msg = \"Should not have post query information\";\n      assertFalse(msg, group.contains(\"hits\"));\n      assertFalse(msg, group.contains(\"status\"));\n      assertFalse(msg, group.contains(\"QTime\"));\n    } finally {\n      config.setLevel(level);\n      config.removeAppender(appender.getName());\n      ctx.updateLoggers();\n    }\n  }\n\n","sourceOld":"  public void testLogBeforeExecute(Logger logger) {\n    Level level = logger.getLevel();\n    logger.setLevel(Level.DEBUG);\n    logger.addAppender(appender);\n\n    try {\n      assertQ(req(\"q\", \"*:*\"));\n\n      String output = writer.toString();\n      Matcher matcher = Pattern.compile(\"DEBUG.*q=\\\\*:\\\\*.*\").matcher(output);\n      assertTrue(matcher.find());\n      final String group = matcher.group();\n      final String msg = \"Should not have post query information\";\n      assertFalse(msg, group.contains(\"hits\"));\n      assertFalse(msg, group.contains(\"status\"));\n      assertFalse(msg, group.contains(\"QTime\"));\n    } finally {\n      logger.setLevel(level);\n      logger.removeAppender(appender);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","date":1522059649,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/RequestLoggingTest#testLogBeforeExecute(Logger).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/RequestLoggingTest#testLogBeforeExecute(Logger).mjava","sourceNew":"  public void testLogBeforeExecute(Logger logger) {\n    Level level = logger.getLevel();\n    \n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    LoggerConfig config = ctx.getConfiguration().getLoggerConfig(logger.getName());\n    config.setLevel(Level.DEBUG);\n    config.addAppender(appender, Level.DEBUG, null);\n    ctx.updateLoggers();\n\n    try {\n      assertQ(req(\"q\", \"*:*\"));\n\n      String output = writer.toString();\n      Matcher matcher = Pattern.compile(\"DEBUG.*q=\\\\*:\\\\*.*\").matcher(output);\n      assertTrue(matcher.find());\n      final String group = matcher.group();\n      final String msg = \"Should not have post query information\";\n      assertFalse(msg, group.contains(\"hits\"));\n      assertFalse(msg, group.contains(\"status\"));\n      assertFalse(msg, group.contains(\"QTime\"));\n    } finally {\n      config.setLevel(level);\n      config.removeAppender(appender.getName());\n      ctx.updateLoggers();\n    }\n  }\n\n","sourceOld":"  public void testLogBeforeExecute(Logger logger) {\n    Level level = logger.getLevel();\n    logger.setLevel(Level.DEBUG);\n    logger.addAppender(appender);\n\n    try {\n      assertQ(req(\"q\", \"*:*\"));\n\n      String output = writer.toString();\n      Matcher matcher = Pattern.compile(\"DEBUG.*q=\\\\*:\\\\*.*\").matcher(output);\n      assertTrue(matcher.find());\n      final String group = matcher.group();\n      final String msg = \"Should not have post query information\";\n      assertFalse(msg, group.contains(\"hits\"));\n      assertFalse(msg, group.contains(\"status\"));\n      assertFalse(msg, group.contains(\"QTime\"));\n    } finally {\n      logger.setLevel(level);\n      logger.removeAppender(appender);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e6487ac9e65315d4919099df92185cbcd3b2f84","date":1535995173,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/RequestLoggingTest#testLogBeforeExecute(Logger).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/RequestLoggingTest#testLogBeforeExecute(Logger).mjava","sourceNew":"  public void testLogBeforeExecute(Logger logger) {\n    Level level = logger.getLevel();\n    \n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    LoggerConfig config = ctx.getConfiguration().getLoggerConfig(logger.getName());\n    config.setLevel(Level.DEBUG);\n    config.addAppender(appender, Level.DEBUG, null);\n    ctx.updateLoggers();\n\n    try {\n      assertQ(req(\"q\", \"*:*\"));\n      Matcher matcher = null;\n      boolean foundDebugMsg = false;\n      String output = \"\";\n      for (int msgIdx = 0; msgIdx < 100; ++msgIdx) {\n        output = writer.toString();\n        matcher = Pattern.compile(\"DEBUG.*q=\\\\*:\\\\*.*\").matcher(output);\n        if (matcher.find()) {\n          foundDebugMsg = true;\n          break;\n        }\n        try {\n          Thread.sleep(10);\n        } catch (InterruptedException ie) {\n          ;\n        }\n      }\n      assertTrue(\"Should have found debug-level message. Found \" + output, foundDebugMsg);\n      final String group = matcher.group();\n      final String msg = \"Should not have post query information\";\n      assertFalse(msg, group.contains(\"hits\"));\n      assertFalse(msg, group.contains(\"status\"));\n      assertFalse(msg, group.contains(\"QTime\"));\n    } finally {\n      config.setLevel(level);\n      config.removeAppender(appender.getName());\n      ctx.updateLoggers();\n    }\n  }\n\n","sourceOld":"  public void testLogBeforeExecute(Logger logger) {\n    Level level = logger.getLevel();\n    \n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    LoggerConfig config = ctx.getConfiguration().getLoggerConfig(logger.getName());\n    config.setLevel(Level.DEBUG);\n    config.addAppender(appender, Level.DEBUG, null);\n    ctx.updateLoggers();\n\n    try {\n      assertQ(req(\"q\", \"*:*\"));\n\n      String output = writer.toString();\n      Matcher matcher = Pattern.compile(\"DEBUG.*q=\\\\*:\\\\*.*\").matcher(output);\n      assertTrue(matcher.find());\n      final String group = matcher.group();\n      final String msg = \"Should not have post query information\";\n      assertFalse(msg, group.contains(\"hits\"));\n      assertFalse(msg, group.contains(\"status\"));\n      assertFalse(msg, group.contains(\"QTime\"));\n    } finally {\n      config.setLevel(level);\n      config.removeAppender(appender.getName());\n      ctx.updateLoggers();\n    }\n  }\n\n","bugFix":["b445f6deac6d72b114aa5c43c45ccf7e7f0785e8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c692eaaa4ea31017e43d18209fdea78687586e","date":1536385910,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/RequestLoggingTest#testLogBeforeExecute(Logger).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/RequestLoggingTest#testLogBeforeExecute(Logger).mjava","sourceNew":"  public void testLogBeforeExecute(Logger logger) {\n    Level level = logger.getLevel();\n\n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    LoggerConfig config = ctx.getConfiguration().getLoggerConfig(logger.getName());\n    config.setLevel(Level.DEBUG);\n    config.addAppender(appender, Level.DEBUG, null);\n    ctx.updateLoggers();\n\n    try {\n      assertQ(req(\"q\", \"*:*\"));\n\n      String output = writer.toString();\n      Matcher matcher = Pattern.compile(\"DEBUG.*q=\\\\*:\\\\*.*\").matcher(output);\n      assertTrue(matcher.find());\n      final String group = matcher.group();\n      final String msg = \"Should not have post query information\";\n      assertFalse(msg, group.contains(\"hits\"));\n      assertFalse(msg, group.contains(\"status\"));\n      assertFalse(msg, group.contains(\"QTime\"));\n    } finally {\n      config.setLevel(level);\n      config.removeAppender(appender.getName());\n      ctx.updateLoggers();\n    }\n  }\n\n","sourceOld":"  public void testLogBeforeExecute(Logger logger) {\n    Level level = logger.getLevel();\n    \n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    LoggerConfig config = ctx.getConfiguration().getLoggerConfig(logger.getName());\n    config.setLevel(Level.DEBUG);\n    config.addAppender(appender, Level.DEBUG, null);\n    ctx.updateLoggers();\n\n    try {\n      assertQ(req(\"q\", \"*:*\"));\n      Matcher matcher = null;\n      boolean foundDebugMsg = false;\n      String output = \"\";\n      for (int msgIdx = 0; msgIdx < 100; ++msgIdx) {\n        output = writer.toString();\n        matcher = Pattern.compile(\"DEBUG.*q=\\\\*:\\\\*.*\").matcher(output);\n        if (matcher.find()) {\n          foundDebugMsg = true;\n          break;\n        }\n        try {\n          Thread.sleep(10);\n        } catch (InterruptedException ie) {\n          ;\n        }\n      }\n      assertTrue(\"Should have found debug-level message. Found \" + output, foundDebugMsg);\n      final String group = matcher.group();\n      final String msg = \"Should not have post query information\";\n      assertFalse(msg, group.contains(\"hits\"));\n      assertFalse(msg, group.contains(\"status\"));\n      assertFalse(msg, group.contains(\"QTime\"));\n    } finally {\n      config.setLevel(level);\n      config.removeAppender(appender.getName());\n      ctx.updateLoggers();\n    }\n  }\n\n","bugFix":null,"bugIntro":["5832050525b97d61021a45dac2330a707639600d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5832050525b97d61021a45dac2330a707639600d","date":1550867222,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/RequestLoggingTest#testLogBeforeExecute(Logger).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/RequestLoggingTest#testLogBeforeExecute(Logger).mjava","sourceNew":"  public void testLogBeforeExecute(Logger logger) throws InterruptedException {\n    Level level = logger.getLevel();\n\n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    LoggerConfig config = ctx.getConfiguration().getLoggerConfig(logger.getName());\n    config.setLevel(Level.DEBUG);\n    config.addAppender(appender, Level.DEBUG, null);\n    ctx.updateLoggers();\n\n    try {\n      assertQ(req(\"q\", \"*:*\"));\n\n      TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      boolean found = false;\n      Matcher matcher;\n      String pat = \"DEBUG.*q=\\\\*:\\\\*.*\";\n      String output = \"\";\n      Pattern pattern = Pattern.compile(pat);\n      do {\n        output = writer.toString();\n        matcher = pattern.matcher(output);\n        found = matcher.find();\n        if (found) {\n          break;\n        }\n        timeOut.sleep(10);\n      } while (timeOut.hasTimedOut() == false);\n      assertTrue(\"Did not find expected pattern: '\" + pat + \"' in output: '\" + output + \"'\", found);\n      final String group = matcher.group();\n      final String msg = \"Should not have post query information\";\n      assertFalse(msg, group.contains(\"hits\"));\n      assertFalse(msg, group.contains(\"status\"));\n      assertFalse(msg, group.contains(\"QTime\"));\n    } finally {\n      config.setLevel(level);\n      config.removeAppender(appender.getName());\n      ctx.updateLoggers();\n    }\n  }\n\n","sourceOld":"  public void testLogBeforeExecute(Logger logger) {\n    Level level = logger.getLevel();\n\n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    LoggerConfig config = ctx.getConfiguration().getLoggerConfig(logger.getName());\n    config.setLevel(Level.DEBUG);\n    config.addAppender(appender, Level.DEBUG, null);\n    ctx.updateLoggers();\n\n    try {\n      assertQ(req(\"q\", \"*:*\"));\n\n      String output = writer.toString();\n      Matcher matcher = Pattern.compile(\"DEBUG.*q=\\\\*:\\\\*.*\").matcher(output);\n      assertTrue(matcher.find());\n      final String group = matcher.group();\n      final String msg = \"Should not have post query information\";\n      assertFalse(msg, group.contains(\"hits\"));\n      assertFalse(msg, group.contains(\"status\"));\n      assertFalse(msg, group.contains(\"QTime\"));\n    } finally {\n      config.setLevel(level);\n      config.removeAppender(appender.getName());\n      ctx.updateLoggers();\n    }\n  }\n\n","bugFix":["b445f6deac6d72b114aa5c43c45ccf7e7f0785e8","30c692eaaa4ea31017e43d18209fdea78687586e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","date":1551083645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/RequestLoggingTest#testLogBeforeExecute(Logger).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/RequestLoggingTest#testLogBeforeExecute(Logger).mjava","sourceNew":"  public void testLogBeforeExecute(Logger logger) throws InterruptedException {\n    Level level = logger.getLevel();\n\n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    LoggerConfig config = ctx.getConfiguration().getLoggerConfig(logger.getName());\n    config.setLevel(Level.DEBUG);\n    config.addAppender(appender, Level.DEBUG, null);\n    ctx.updateLoggers();\n\n    try {\n      assertQ(req(\"q\", \"*:*\"));\n\n      TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      boolean found = false;\n      Matcher matcher;\n      String pat = \"DEBUG.*q=\\\\*:\\\\*.*\";\n      String output = \"\";\n      Pattern pattern = Pattern.compile(pat);\n      do {\n        output = writer.toString();\n        matcher = pattern.matcher(output);\n        found = matcher.find();\n        if (found) {\n          break;\n        }\n        timeOut.sleep(10);\n      } while (timeOut.hasTimedOut() == false);\n      assertTrue(\"Did not find expected pattern: '\" + pat + \"' in output: '\" + output + \"'\", found);\n      final String group = matcher.group();\n      final String msg = \"Should not have post query information\";\n      assertFalse(msg, group.contains(\"hits\"));\n      assertFalse(msg, group.contains(\"status\"));\n      assertFalse(msg, group.contains(\"QTime\"));\n    } finally {\n      config.setLevel(level);\n      config.removeAppender(appender.getName());\n      ctx.updateLoggers();\n    }\n  }\n\n","sourceOld":"  public void testLogBeforeExecute(Logger logger) {\n    Level level = logger.getLevel();\n\n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    LoggerConfig config = ctx.getConfiguration().getLoggerConfig(logger.getName());\n    config.setLevel(Level.DEBUG);\n    config.addAppender(appender, Level.DEBUG, null);\n    ctx.updateLoggers();\n\n    try {\n      assertQ(req(\"q\", \"*:*\"));\n\n      String output = writer.toString();\n      Matcher matcher = Pattern.compile(\"DEBUG.*q=\\\\*:\\\\*.*\").matcher(output);\n      assertTrue(matcher.find());\n      final String group = matcher.group();\n      final String msg = \"Should not have post query information\";\n      assertFalse(msg, group.contains(\"hits\"));\n      assertFalse(msg, group.contains(\"status\"));\n      assertFalse(msg, group.contains(\"QTime\"));\n    } finally {\n      config.setLevel(level);\n      config.removeAppender(appender.getName());\n      ctx.updateLoggers();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c692eaaa4ea31017e43d18209fdea78687586e":["6e6487ac9e65315d4919099df92185cbcd3b2f84"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["b445f6deac6d72b114aa5c43c45ccf7e7f0785e8"],"b445f6deac6d72b114aa5c43c45ccf7e7f0785e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["30c692eaaa4ea31017e43d18209fdea78687586e","5832050525b97d61021a45dac2330a707639600d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"6e6487ac9e65315d4919099df92185cbcd3b2f84":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["b445f6deac6d72b114aa5c43c45ccf7e7f0785e8","93baf46bd12096e0de407258b3b32cfaaf58e448"],"5832050525b97d61021a45dac2330a707639600d":["30c692eaaa4ea31017e43d18209fdea78687586e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b445f6deac6d72b114aa5c43c45ccf7e7f0785e8"],"30c692eaaa4ea31017e43d18209fdea78687586e":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","5832050525b97d61021a45dac2330a707639600d"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"b445f6deac6d72b114aa5c43c45ccf7e7f0785e8":["93baf46bd12096e0de407258b3b32cfaaf58e448","f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e6487ac9e65315d4919099df92185cbcd3b2f84":["30c692eaaa4ea31017e43d18209fdea78687586e"],"5832050525b97d61021a45dac2330a707639600d":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["6e6487ac9e65315d4919099df92185cbcd3b2f84"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}