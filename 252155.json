{"path":"solr/core/src/java/org/apache/solr/handler/tagger/TermPrefixCursor#advance(BytesRef).mjava","commits":[{"id":"e091f281a6e026f8bb17aaf194efd0bbd3a7f549","date":1528221895,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/TermPrefixCursor#advance(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Appends the separator char (if not the first) plus the given word to the prefix buffer,\n   * then seeks to it. If the seek fails, false is returned and this cursor\n   * can be re-used as if in a new state.  The {@code word} BytesRef is considered temporary,\n   * and is not saved within this class. */\n  boolean advance(BytesRef word) throws IOException {\n    if (prefixBuf == null) { // first advance\n      //set prefixBuf to word temporary. When advance() completes, we either null out or copy.\n      prefixBuf = word;\n      prefixBufOnLoan = true;\n      if (seekPrefix()) {//... and we have to\n        ensureBufIsACopy();\n        return true;\n      } else {\n        prefixBuf = null;//just to be darned sure 'word' isn't referenced here\n        return false;\n      }\n\n    } else { // subsequent advance\n      //append to existing\n      assert !prefixBufOnLoan;\n\n      prefixBufBuilder.append(SEPARATOR_CHAR);\n      prefixBufBuilder.append(word);\n      prefixBuf = prefixBufBuilder.get();\n      if (seekPrefix()) {\n        return true;\n      } else {\n        prefixBuf = null;\n        return false;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/TermPrefixCursor#advance(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Appends the separator char (if not the first) plus the given word to the prefix buffer,\n   * then seeks to it. If the seek fails, false is returned and this cursor\n   * can be re-used as if in a new state.  The {@code word} BytesRef is considered temporary,\n   * and is not saved within this class. */\n  boolean advance(BytesRef word) throws IOException {\n    if (prefixBuf == null) { // first advance\n      //set prefixBuf to word temporary. When advance() completes, we either null out or copy.\n      prefixBuf = word;\n      prefixBufOnLoan = true;\n      if (seekPrefix()) {//... and we have to\n        ensureBufIsACopy();\n        return true;\n      } else {\n        prefixBuf = null;//just to be darned sure 'word' isn't referenced here\n        return false;\n      }\n\n    } else { // subsequent advance\n      //append to existing\n      assert !prefixBufOnLoan;\n\n      prefixBufBuilder.append(SEPARATOR_CHAR);\n      prefixBufBuilder.append(word);\n      prefixBuf = prefixBufBuilder.get();\n      if (seekPrefix()) {\n        return true;\n      } else {\n        prefixBuf = null;\n        return false;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/TermPrefixCursor#advance(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Appends the separator char (if not the first) plus the given word to the prefix buffer,\n   * then seeks to it. If the seek fails, false is returned and this cursor\n   * can be re-used as if in a new state.  The {@code word} BytesRef is considered temporary,\n   * and is not saved within this class. */\n  boolean advance(BytesRef word) throws IOException {\n    if (prefixBuf == null) { // first advance\n      //set prefixBuf to word temporary. When advance() completes, we either null out or copy.\n      prefixBuf = word;\n      prefixBufOnLoan = true;\n      if (seekPrefix()) {//... and we have to\n        ensureBufIsACopy();\n        return true;\n      } else {\n        prefixBuf = null;//just to be darned sure 'word' isn't referenced here\n        return false;\n      }\n\n    } else { // subsequent advance\n      //append to existing\n      assert !prefixBufOnLoan;\n\n      prefixBufBuilder.append(SEPARATOR_CHAR);\n      prefixBufBuilder.append(word);\n      prefixBuf = prefixBufBuilder.get();\n      if (seekPrefix()) {\n        return true;\n      } else {\n        prefixBuf = null;\n        return false;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e091f281a6e026f8bb17aaf194efd0bbd3a7f549"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f592209545c71895260367152601e9200399776d":[],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}