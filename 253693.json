{"path":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(text, noOutputs.getNoOutput());\n      pending.add(new PendingTerm(new BytesRef(text), stats));\n      postingsWriter.finishTerm(stats);\n      numTerms++;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(text, noOutputs.getNoOutput());\n      pending.add(new PendingTerm(BytesRef.deepCopyOf(text), stats));\n      postingsWriter.finishTerm(stats);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(text, noOutputs.getNoOutput());\n      pending.add(new PendingTerm(new BytesRef(text), stats));\n      postingsWriter.finishTerm(stats);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter.TermsWriter#finishTerm(BytesRef,TermStats).mjava","sourceNew":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(text, noOutputs.getNoOutput());\n      pending.add(new PendingTerm(BytesRef.deepCopyOf(text), stats));\n      postingsWriter.finishTerm(stats);\n      numTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void finishTerm(BytesRef text, TermStats stats) throws IOException {\n\n      assert stats.docFreq > 0;\n      //if (DEBUG) System.out.println(\"BTTW.finishTerm term=\" + fieldInfo.name + \":\" + toString(text) + \" seg=\" + segment + \" df=\" + stats.docFreq);\n\n      blockBuilder.add(text, noOutputs.getNoOutput());\n      pending.add(new PendingTerm(BytesRef.deepCopyOf(text), stats));\n      postingsWriter.finishTerm(stats);\n      numTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["e6e919043fa85ee891123768dd655a98edbbf63c"],"e6e919043fa85ee891123768dd655a98edbbf63c":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["e6e919043fa85ee891123768dd655a98edbbf63c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6e919043fa85ee891123768dd655a98edbbf63c":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}