{"path":"solr/core/src/java/org/apache/solr/store/blockcache/BlockLocks#nextClearBit(int).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockLocks#nextClearBit(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Find the next clear bit in the bit set.\n   * \n   * @param index\n   *          index\n   * @return next next bit\n   */\n  public int nextClearBit(int index) {\n    int i = index >> 6;\n    if (i >= wlen) return -1;\n    int subIndex = index & 0x3f; // index within the word\n    long word = ~bits.get(i) >> subIndex; // skip all the bits to the right of\n                                          // index\n    if (word != 0) {\n      return (i << 6) + subIndex + Long.numberOfTrailingZeros(word);\n    }\n    while (++i < wlen) {\n      word = ~bits.get(i);\n      if (word != 0) {\n        return (i << 6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n    return -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockLocks#nextClearBit(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Find the next clear bit in the bit set.\n   * \n   * @param index\n   *          index\n   * @return next next bit\n   */\n  public int nextClearBit(int index) {\n    int i = index >> 6;\n    if (i >= wlen) return -1;\n    int subIndex = index & 0x3f; // index within the word\n    long word = ~bits.get(i) >> subIndex; // skip all the bits to the right of\n                                          // index\n    if (word != 0) {\n      return (i << 6) + subIndex + Long.numberOfTrailingZeros(word);\n    }\n    while (++i < wlen) {\n      word = ~bits.get(i);\n      if (word != 0) {\n        return (i << 6) + Long.numberOfTrailingZeros(word);\n      }\n    }\n    return -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["849494cf2f3a96af5c8c84995108ddd8456fcd04"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}