{"path":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.ChangeIndices#run().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.ChangeIndices#run().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase.ChangeIndices#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        final LineFileDocs docs = new LineFileDocs(random);\n        int numDocs = 0;\n        while (System.nanoTime() < endTimeNanos) {\n          final int what = random.nextInt(3);\n          final NodeState node = nodes[random.nextInt(nodes.length)];\n          if (numDocs == 0 || what == 0) {\n            node.writer.addDocument(docs.nextDoc());\n            numDocs++;\n          } else if (what == 1) {\n            node.writer.updateDocument(new Term(\"docid\", \"\"+random.nextInt(numDocs)),\n                                        docs.nextDoc());\n            numDocs++;\n          } else {\n            node.writer.deleteDocuments(new Term(\"docid\", \"\"+random.nextInt(numDocs)));\n          }\n          // TODO: doc blocks too\n\n          if (random.nextInt(17) == 12) {\n            node.writer.commit();\n          }\n\n          if (random.nextInt(17) == 12) {\n            nodes[random.nextInt(nodes.length)].reopen();\n          }\n        }\n      } catch (Throwable t) {\n        System.out.println(\"FAILED:\");\n        t.printStackTrace(System.out);\n        throw new RuntimeException(t);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        final LineFileDocs docs = new LineFileDocs(random);\n        int numDocs = 0;\n        while (System.nanoTime() < endTimeNanos) {\n          final int what = random.nextInt(3);\n          final NodeState node = nodes[random.nextInt(nodes.length)];\n          if (numDocs == 0 || what == 0) {\n            node.writer.addDocument(docs.nextDoc());\n            numDocs++;\n          } else if (what == 1) {\n            node.writer.updateDocument(new Term(\"docid\", \"\"+random.nextInt(numDocs)),\n                                        docs.nextDoc());\n            numDocs++;\n          } else {\n            node.writer.deleteDocuments(new Term(\"docid\", \"\"+random.nextInt(numDocs)));\n          }\n          // TODO: doc blocks too\n\n          if (random.nextInt(17) == 12) {\n            node.writer.commit();\n          }\n\n          if (random.nextInt(17) == 12) {\n            nodes[random.nextInt(nodes.length)].reopen();\n          }\n        }\n      } catch (Throwable t) {\n        System.out.println(\"FAILED:\");\n        t.printStackTrace(System.out);\n        throw new RuntimeException(t);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86365ce8db75e42ebe10805e99e92c463fef63b6","date":1330370408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.ChangeIndices#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.ChangeIndices#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n        int numDocs = 0;\n        while (System.nanoTime() < endTimeNanos) {\n          final int what = random.nextInt(3);\n          final NodeState node = nodes[random.nextInt(nodes.length)];\n          if (numDocs == 0 || what == 0) {\n            node.writer.addDocument(docs.nextDoc());\n            numDocs++;\n          } else if (what == 1) {\n            node.writer.updateDocument(new Term(\"docid\", \"\"+random.nextInt(numDocs)),\n                                        docs.nextDoc());\n            numDocs++;\n          } else {\n            node.writer.deleteDocuments(new Term(\"docid\", \"\"+random.nextInt(numDocs)));\n          }\n          // TODO: doc blocks too\n\n          if (random.nextInt(17) == 12) {\n            node.writer.commit();\n          }\n\n          if (random.nextInt(17) == 12) {\n            nodes[random.nextInt(nodes.length)].reopen();\n          }\n        }\n      } catch (Throwable t) {\n        System.out.println(\"FAILED:\");\n        t.printStackTrace(System.out);\n        throw new RuntimeException(t);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        final LineFileDocs docs = new LineFileDocs(random);\n        int numDocs = 0;\n        while (System.nanoTime() < endTimeNanos) {\n          final int what = random.nextInt(3);\n          final NodeState node = nodes[random.nextInt(nodes.length)];\n          if (numDocs == 0 || what == 0) {\n            node.writer.addDocument(docs.nextDoc());\n            numDocs++;\n          } else if (what == 1) {\n            node.writer.updateDocument(new Term(\"docid\", \"\"+random.nextInt(numDocs)),\n                                        docs.nextDoc());\n            numDocs++;\n          } else {\n            node.writer.deleteDocuments(new Term(\"docid\", \"\"+random.nextInt(numDocs)));\n          }\n          // TODO: doc blocks too\n\n          if (random.nextInt(17) == 12) {\n            node.writer.commit();\n          }\n\n          if (random.nextInt(17) == 12) {\n            nodes[random.nextInt(nodes.length)].reopen();\n          }\n        }\n      } catch (Throwable t) {\n        System.out.println(\"FAILED:\");\n        t.printStackTrace(System.out);\n        throw new RuntimeException(t);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.ChangeIndices#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.ChangeIndices#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n        int numDocs = 0;\n        while (System.nanoTime() < endTimeNanos) {\n          final int what = random.nextInt(3);\n          final NodeState node = nodes[random.nextInt(nodes.length)];\n          if (numDocs == 0 || what == 0) {\n            node.writer.addDocument(docs.nextDoc());\n            numDocs++;\n          } else if (what == 1) {\n            node.writer.updateDocument(new Term(\"docid\", \"\"+random.nextInt(numDocs)),\n                                        docs.nextDoc());\n            numDocs++;\n          } else {\n            node.writer.deleteDocuments(new Term(\"docid\", \"\"+random.nextInt(numDocs)));\n          }\n          // TODO: doc blocks too\n\n          if (random.nextInt(17) == 12) {\n            node.writer.commit();\n          }\n\n          if (random.nextInt(17) == 12) {\n            nodes[random.nextInt(nodes.length)].reopen();\n          }\n        }\n      } catch (Throwable t) {\n        System.out.println(\"FAILED:\");\n        t.printStackTrace(System.out);\n        throw new RuntimeException(t);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        final LineFileDocs docs = new LineFileDocs(random);\n        int numDocs = 0;\n        while (System.nanoTime() < endTimeNanos) {\n          final int what = random.nextInt(3);\n          final NodeState node = nodes[random.nextInt(nodes.length)];\n          if (numDocs == 0 || what == 0) {\n            node.writer.addDocument(docs.nextDoc());\n            numDocs++;\n          } else if (what == 1) {\n            node.writer.updateDocument(new Term(\"docid\", \"\"+random.nextInt(numDocs)),\n                                        docs.nextDoc());\n            numDocs++;\n          } else {\n            node.writer.deleteDocuments(new Term(\"docid\", \"\"+random.nextInt(numDocs)));\n          }\n          // TODO: doc blocks too\n\n          if (random.nextInt(17) == 12) {\n            node.writer.commit();\n          }\n\n          if (random.nextInt(17) == 12) {\n            nodes[random.nextInt(nodes.length)].reopen();\n          }\n        }\n      } catch (Throwable t) {\n        System.out.println(\"FAILED:\");\n        t.printStackTrace(System.out);\n        throw new RuntimeException(t);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.ChangeIndices#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.ChangeIndices#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        final LineFileDocs docs = new LineFileDocs(random(), defaultCodecSupportsDocValues());\n        int numDocs = 0;\n        while (System.nanoTime() < endTimeNanos) {\n          final int what = random().nextInt(3);\n          final NodeState node = nodes[random().nextInt(nodes.length)];\n          if (numDocs == 0 || what == 0) {\n            node.writer.addDocument(docs.nextDoc());\n            numDocs++;\n          } else if (what == 1) {\n            node.writer.updateDocument(new Term(\"docid\", \"\"+random().nextInt(numDocs)),\n                                        docs.nextDoc());\n            numDocs++;\n          } else {\n            node.writer.deleteDocuments(new Term(\"docid\", \"\"+random().nextInt(numDocs)));\n          }\n          // TODO: doc blocks too\n\n          if (random().nextInt(17) == 12) {\n            node.writer.commit();\n          }\n\n          if (random().nextInt(17) == 12) {\n            nodes[random().nextInt(nodes.length)].reopen();\n          }\n        }\n      } catch (Throwable t) {\n        System.out.println(\"FAILED:\");\n        t.printStackTrace(System.out);\n        throw new RuntimeException(t);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        final LineFileDocs docs = new LineFileDocs(random, defaultCodecSupportsDocValues());\n        int numDocs = 0;\n        while (System.nanoTime() < endTimeNanos) {\n          final int what = random.nextInt(3);\n          final NodeState node = nodes[random.nextInt(nodes.length)];\n          if (numDocs == 0 || what == 0) {\n            node.writer.addDocument(docs.nextDoc());\n            numDocs++;\n          } else if (what == 1) {\n            node.writer.updateDocument(new Term(\"docid\", \"\"+random.nextInt(numDocs)),\n                                        docs.nextDoc());\n            numDocs++;\n          } else {\n            node.writer.deleteDocuments(new Term(\"docid\", \"\"+random.nextInt(numDocs)));\n          }\n          // TODO: doc blocks too\n\n          if (random.nextInt(17) == 12) {\n            node.writer.commit();\n          }\n\n          if (random.nextInt(17) == 12) {\n            nodes[random.nextInt(nodes.length)].reopen();\n          }\n        }\n      } catch (Throwable t) {\n        System.out.println(\"FAILED:\");\n        t.printStackTrace(System.out);\n        throw new RuntimeException(t);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.ChangeIndices#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.ChangeIndices#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        final LineFileDocs docs = new LineFileDocs(random(), true);\n        int numDocs = 0;\n        while (System.nanoTime() < endTimeNanos) {\n          final int what = random().nextInt(3);\n          final NodeState node = nodes[random().nextInt(nodes.length)];\n          if (numDocs == 0 || what == 0) {\n            node.writer.addDocument(docs.nextDoc());\n            numDocs++;\n          } else if (what == 1) {\n            node.writer.updateDocument(new Term(\"docid\", \"\"+random().nextInt(numDocs)),\n                                        docs.nextDoc());\n            numDocs++;\n          } else {\n            node.writer.deleteDocuments(new Term(\"docid\", \"\"+random().nextInt(numDocs)));\n          }\n          // TODO: doc blocks too\n\n          if (random().nextInt(17) == 12) {\n            node.writer.commit();\n          }\n\n          if (random().nextInt(17) == 12) {\n            nodes[random().nextInt(nodes.length)].reopen();\n          }\n        }\n      } catch (Throwable t) {\n        System.out.println(\"FAILED:\");\n        t.printStackTrace(System.out);\n        throw new RuntimeException(t);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        final LineFileDocs docs = new LineFileDocs(random(), defaultCodecSupportsDocValues());\n        int numDocs = 0;\n        while (System.nanoTime() < endTimeNanos) {\n          final int what = random().nextInt(3);\n          final NodeState node = nodes[random().nextInt(nodes.length)];\n          if (numDocs == 0 || what == 0) {\n            node.writer.addDocument(docs.nextDoc());\n            numDocs++;\n          } else if (what == 1) {\n            node.writer.updateDocument(new Term(\"docid\", \"\"+random().nextInt(numDocs)),\n                                        docs.nextDoc());\n            numDocs++;\n          } else {\n            node.writer.deleteDocuments(new Term(\"docid\", \"\"+random().nextInt(numDocs)));\n          }\n          // TODO: doc blocks too\n\n          if (random().nextInt(17) == 12) {\n            node.writer.commit();\n          }\n\n          if (random().nextInt(17) == 12) {\n            nodes[random().nextInt(nodes.length)].reopen();\n          }\n        }\n      } catch (Throwable t) {\n        System.out.println(\"FAILED:\");\n        t.printStackTrace(System.out);\n        throw new RuntimeException(t);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"221076a44effb5561a3b799974ba1a35119fbcc0","date":1457468497,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.ChangeIndices#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.ChangeIndices#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        final LineFileDocs docs = new LineFileDocs(random());\n        int numDocs = 0;\n        while (System.nanoTime() < endTimeNanos) {\n          final int what = random().nextInt(3);\n          final NodeState node = nodes[random().nextInt(nodes.length)];\n          if (numDocs == 0 || what == 0) {\n            node.writer.addDocument(docs.nextDoc());\n            numDocs++;\n          } else if (what == 1) {\n            node.writer.updateDocument(new Term(\"docid\", \"\"+random().nextInt(numDocs)),\n                                        docs.nextDoc());\n            numDocs++;\n          } else {\n            node.writer.deleteDocuments(new Term(\"docid\", \"\"+random().nextInt(numDocs)));\n          }\n          // TODO: doc blocks too\n\n          if (random().nextInt(17) == 12) {\n            node.writer.commit();\n          }\n\n          if (random().nextInt(17) == 12) {\n            nodes[random().nextInt(nodes.length)].reopen();\n          }\n        }\n      } catch (Throwable t) {\n        System.out.println(\"FAILED:\");\n        t.printStackTrace(System.out);\n        throw new RuntimeException(t);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        final LineFileDocs docs = new LineFileDocs(random(), true);\n        int numDocs = 0;\n        while (System.nanoTime() < endTimeNanos) {\n          final int what = random().nextInt(3);\n          final NodeState node = nodes[random().nextInt(nodes.length)];\n          if (numDocs == 0 || what == 0) {\n            node.writer.addDocument(docs.nextDoc());\n            numDocs++;\n          } else if (what == 1) {\n            node.writer.updateDocument(new Term(\"docid\", \"\"+random().nextInt(numDocs)),\n                                        docs.nextDoc());\n            numDocs++;\n          } else {\n            node.writer.deleteDocuments(new Term(\"docid\", \"\"+random().nextInt(numDocs)));\n          }\n          // TODO: doc blocks too\n\n          if (random().nextInt(17) == 12) {\n            node.writer.commit();\n          }\n\n          if (random().nextInt(17) == 12) {\n            nodes[random().nextInt(nodes.length)].reopen();\n          }\n        }\n      } catch (Throwable t) {\n        System.out.println(\"FAILED:\");\n        t.printStackTrace(System.out);\n        throw new RuntimeException(t);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c37ab80ad12b466f3dc92e4baa7b0cbf9aded429","date":1590107358,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.ChangeIndices#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.ChangeIndices#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try (final LineFileDocs docs = new LineFileDocs(random())) {\n        int numDocs = 0;\n        while (System.nanoTime() < endTimeNanos) {\n          final int what = random().nextInt(3);\n          final NodeState node = nodes[random().nextInt(nodes.length)];\n          if (numDocs == 0 || what == 0) {\n            node.writer.addDocument(docs.nextDoc());\n            numDocs++;\n          } else if (what == 1) {\n            node.writer.updateDocument(new Term(\"docid\", \"\"+random().nextInt(numDocs)),\n                                        docs.nextDoc());\n            numDocs++;\n          } else {\n            node.writer.deleteDocuments(new Term(\"docid\", \"\"+random().nextInt(numDocs)));\n          }\n          // TODO: doc blocks too\n\n          if (random().nextInt(17) == 12) {\n            node.writer.commit();\n          }\n\n          if (random().nextInt(17) == 12) {\n            nodes[random().nextInt(nodes.length)].reopen();\n          }\n        }\n      } catch (Throwable t) {\n        System.out.println(\"FAILED:\");\n        t.printStackTrace(System.out);\n        throw new RuntimeException(t);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        final LineFileDocs docs = new LineFileDocs(random());\n        int numDocs = 0;\n        while (System.nanoTime() < endTimeNanos) {\n          final int what = random().nextInt(3);\n          final NodeState node = nodes[random().nextInt(nodes.length)];\n          if (numDocs == 0 || what == 0) {\n            node.writer.addDocument(docs.nextDoc());\n            numDocs++;\n          } else if (what == 1) {\n            node.writer.updateDocument(new Term(\"docid\", \"\"+random().nextInt(numDocs)),\n                                        docs.nextDoc());\n            numDocs++;\n          } else {\n            node.writer.deleteDocuments(new Term(\"docid\", \"\"+random().nextInt(numDocs)));\n          }\n          // TODO: doc blocks too\n\n          if (random().nextInt(17) == 12) {\n            node.writer.commit();\n          }\n\n          if (random().nextInt(17) == 12) {\n            nodes[random().nextInt(nodes.length)].reopen();\n          }\n        }\n      } catch (Throwable t) {\n        System.out.println(\"FAILED:\");\n        t.printStackTrace(System.out);\n        throw new RuntimeException(t);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","86365ce8db75e42ebe10805e99e92c463fef63b6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"86365ce8db75e42ebe10805e99e92c463fef63b6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"221076a44effb5561a3b799974ba1a35119fbcc0":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["86365ce8db75e42ebe10805e99e92c463fef63b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c37ab80ad12b466f3dc92e4baa7b0cbf9aded429"],"c37ab80ad12b466f3dc92e4baa7b0cbf9aded429":["221076a44effb5561a3b799974ba1a35119fbcc0"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["221076a44effb5561a3b799974ba1a35119fbcc0"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","86365ce8db75e42ebe10805e99e92c463fef63b6"],"86365ce8db75e42ebe10805e99e92c463fef63b6":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"221076a44effb5561a3b799974ba1a35119fbcc0":["c37ab80ad12b466f3dc92e4baa7b0cbf9aded429"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c37ab80ad12b466f3dc92e4baa7b0cbf9aded429":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}