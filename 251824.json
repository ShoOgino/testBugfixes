{"path":"solr/core/src/java/org/apache/solr/handler/admin/IndexSizeEstimator#estimateSummary(Map[String,Object],Map[String,Object]).mjava","commits":[{"id":"e4583dbd381e291c87e23144564c59ba3391b188","date":1560187306,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/IndexSizeEstimator#estimateSummary(Map[String,Object],Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void estimateSummary(Map<String, Object> details, Map<String, Object> summary) {\n    log.info(\"- preparing summary...\");\n    details.forEach((type, perType) -> {\n      ((Map<String, Object>)perType).forEach((field, perField) -> {\n        Map<String, Object> perFieldSummary = (Map<String, Object>)summary.computeIfAbsent(field, f -> new HashMap<>());\n        ((Map<String, Object>)perField).forEach((k, val) -> {\n          if (val instanceof SummaryStatistics) {\n            SummaryStatistics stats = (SummaryStatistics)val;\n            if (k.startsWith(\"lengths\")) {\n              AtomicLong total = (AtomicLong)perFieldSummary.computeIfAbsent(\"totalSize\", kt -> new AtomicLong());\n              total.addAndGet((long)stats.getSum());\n            }\n            Map<String, Object> perTypeSummary = (Map<String, Object>)perFieldSummary.computeIfAbsent(\"perType\", pt -> new HashMap<>());\n            AtomicLong total = (AtomicLong)perTypeSummary.computeIfAbsent(type + \"_\" + k, t -> new AtomicLong());\n            total.addAndGet((long)stats.getSum());\n          }\n        });\n      });\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/IndexSizeEstimator#estimateSummary(Map[String,Object],Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/IndexSizeEstimator#estimateSummary(Map[String,Object],Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private void estimateSummary(Map<String, Object> details, Map<String, Object> summary) {\n    log.info(\"- preparing summary...\");\n    details.forEach((type, perType) -> {\n      ((Map<String, Object>)perType).forEach((field, perField) -> {\n        Map<String, Object> perFieldSummary = (Map<String, Object>)summary.computeIfAbsent(field, f -> new HashMap<>());\n        ((Map<String, Object>)perField).forEach((k, val) -> {\n          if (val instanceof SummaryStatistics) {\n            SummaryStatistics stats = (SummaryStatistics)val;\n            if (k.startsWith(\"lengths\")) {\n              AtomicLong total = (AtomicLong)perFieldSummary.computeIfAbsent(\"totalSize\", kt -> new AtomicLong());\n              total.addAndGet((long)stats.getSum());\n            }\n            Map<String, Object> perTypeSummary = (Map<String, Object>)perFieldSummary.computeIfAbsent(\"perType\", pt -> new HashMap<>());\n            AtomicLong total = (AtomicLong)perTypeSummary.computeIfAbsent(type + \"_\" + k, t -> new AtomicLong());\n            total.addAndGet((long)stats.getSum());\n          }\n        });\n      });\n    });\n  }\n\n","sourceOld":"  private void estimateSummary(Map<String, Object> details, Map<String, Object> summary) {\n    log.info(\"- preparing summary...\");\n    details.forEach((type, perType) -> {\n      ((Map<String, Object>)perType).forEach((field, perField) -> {\n        Map<String, Object> perFieldSummary = (Map<String, Object>)summary.computeIfAbsent(field, f -> new HashMap<>());\n        ((Map<String, Object>)perField).forEach((k, val) -> {\n          if (val instanceof SummaryStatistics) {\n            SummaryStatistics stats = (SummaryStatistics)val;\n            if (k.startsWith(\"lengths\")) {\n              AtomicLong total = (AtomicLong)perFieldSummary.computeIfAbsent(\"totalSize\", kt -> new AtomicLong());\n              total.addAndGet((long)stats.getSum());\n            }\n            Map<String, Object> perTypeSummary = (Map<String, Object>)perFieldSummary.computeIfAbsent(\"perType\", pt -> new HashMap<>());\n            AtomicLong total = (AtomicLong)perTypeSummary.computeIfAbsent(type + \"_\" + k, t -> new AtomicLong());\n            total.addAndGet((long)stats.getSum());\n          }\n        });\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba055e19afc289adcb5bedaf68513793a7254012":["e4583dbd381e291c87e23144564c59ba3391b188"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4583dbd381e291c87e23144564c59ba3391b188":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4583dbd381e291c87e23144564c59ba3391b188"],"e4583dbd381e291c87e23144564c59ba3391b188":["ba055e19afc289adcb5bedaf68513793a7254012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}