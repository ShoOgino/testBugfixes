{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingMultiValuedLongFirst().mjava","commits":[{"id":"e065cebbdee472a02bde38052717a8cd7ee8ab3b","date":1479244971,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingMultiValuedLongFirst().mjava","pathOld":"/dev/null","sourceNew":"  public void testMissingMultiValuedLongFirst() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortedNumericSortField(\"foo\", SortField.Type.LONG);\n    sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 3));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 18));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 27));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    // missing\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 1));\n    w.addDocument(doc);\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 2));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 7));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 24));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"id\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(1, values.longValue());\n    assertEquals(1, values.nextDoc());\n    assertEquals(2, values.longValue());\n    assertEquals(2, values.nextDoc());\n    assertEquals(3, values.longValue());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingMultiValuedLongFirst().mjava","pathOld":"/dev/null","sourceNew":"  public void testMissingMultiValuedLongFirst() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortedNumericSortField(\"foo\", SortField.Type.LONG);\n    sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 3));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 18));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 27));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    // missing\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 1));\n    w.addDocument(doc);\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 2));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 7));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 24));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"id\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(1, values.longValue());\n    assertEquals(1, values.nextDoc());\n    assertEquals(2, values.longValue());\n    assertEquals(2, values.nextDoc());\n    assertEquals(3, values.longValue());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67d866889b0c200f91ef946ae758a42d324216da","date":1544206319,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingMultiValuedLongFirst().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingMultiValuedLongFirst().mjava","sourceNew":"  public void testMissingMultiValuedLongFirst() throws Exception {\n    for (boolean reverse : new boolean[] {true, false}) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      SortField sortField = new SortedNumericSortField(\"foo\", SortField.Type.LONG, reverse);\n      sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n      Sort indexSort = new Sort(sortField);\n      iwc.setIndexSort(indexSort);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"id\", 3));\n      doc.add(new SortedNumericDocValuesField(\"foo\", 18));\n      doc.add(new SortedNumericDocValuesField(\"foo\", 27));\n      w.addDocument(doc);\n      // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n      w.commit();\n\n      // missing\n      doc = new Document();\n      doc.add(new NumericDocValuesField(\"id\", 1));\n      w.addDocument(doc);\n      w.commit();\n\n      doc = new Document();\n      doc.add(new NumericDocValuesField(\"id\", 2));\n      doc.add(new SortedNumericDocValuesField(\"foo\", 7));\n      doc.add(new SortedNumericDocValuesField(\"foo\", 24));\n      w.addDocument(doc);\n      w.forceMerge(1);\n\n      DirectoryReader r = DirectoryReader.open(w);\n      LeafReader leaf = getOnlyLeafReader(r);\n      assertEquals(3, leaf.maxDoc());\n      NumericDocValues values = leaf.getNumericDocValues(\"id\");\n      if (reverse) {\n        assertEquals(0, values.nextDoc());\n        assertEquals(3, values.longValue());\n        assertEquals(1, values.nextDoc());\n        assertEquals(2, values.longValue());\n        assertEquals(2, values.nextDoc());\n        assertEquals(1, values.longValue());\n      } else {\n        assertEquals(0, values.nextDoc());\n        assertEquals(1, values.longValue());\n        assertEquals(1, values.nextDoc());\n        assertEquals(2, values.longValue());\n        assertEquals(2, values.nextDoc());\n        assertEquals(3, values.longValue());\n      }\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testMissingMultiValuedLongFirst() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortedNumericSortField(\"foo\", SortField.Type.LONG);\n    sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 3));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 18));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 27));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    // missing\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 1));\n    w.addDocument(doc);\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 2));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 7));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 24));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"id\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(1, values.longValue());\n    assertEquals(1, values.nextDoc());\n    assertEquals(2, values.longValue());\n    assertEquals(2, values.nextDoc());\n    assertEquals(3, values.longValue());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66dc286cff642f0c485052d838cfba579b3f84d3","date":1544206544,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingMultiValuedLongFirst().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingMultiValuedLongFirst().mjava","sourceNew":"  public void testMissingMultiValuedLongFirst() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortedNumericSortField(\"foo\", SortField.Type.LONG);\n    sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 3));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 18));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 27));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    // missing\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 1));\n    w.addDocument(doc);\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 2));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 7));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 24));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"id\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(1, values.longValue());\n    assertEquals(1, values.nextDoc());\n    assertEquals(2, values.longValue());\n    assertEquals(2, values.nextDoc());\n    assertEquals(3, values.longValue());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMissingMultiValuedLongFirst() throws Exception {\n    for (boolean reverse : new boolean[] {true, false}) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      SortField sortField = new SortedNumericSortField(\"foo\", SortField.Type.LONG, reverse);\n      sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n      Sort indexSort = new Sort(sortField);\n      iwc.setIndexSort(indexSort);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"id\", 3));\n      doc.add(new SortedNumericDocValuesField(\"foo\", 18));\n      doc.add(new SortedNumericDocValuesField(\"foo\", 27));\n      w.addDocument(doc);\n      // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n      w.commit();\n\n      // missing\n      doc = new Document();\n      doc.add(new NumericDocValuesField(\"id\", 1));\n      w.addDocument(doc);\n      w.commit();\n\n      doc = new Document();\n      doc.add(new NumericDocValuesField(\"id\", 2));\n      doc.add(new SortedNumericDocValuesField(\"foo\", 7));\n      doc.add(new SortedNumericDocValuesField(\"foo\", 24));\n      w.addDocument(doc);\n      w.forceMerge(1);\n\n      DirectoryReader r = DirectoryReader.open(w);\n      LeafReader leaf = getOnlyLeafReader(r);\n      assertEquals(3, leaf.maxDoc());\n      NumericDocValues values = leaf.getNumericDocValues(\"id\");\n      if (reverse) {\n        assertEquals(0, values.nextDoc());\n        assertEquals(3, values.longValue());\n        assertEquals(1, values.nextDoc());\n        assertEquals(2, values.longValue());\n        assertEquals(2, values.nextDoc());\n        assertEquals(1, values.longValue());\n      } else {\n        assertEquals(0, values.nextDoc());\n        assertEquals(1, values.longValue());\n        assertEquals(1, values.nextDoc());\n        assertEquals(2, values.longValue());\n        assertEquals(2, values.nextDoc());\n        assertEquals(3, values.longValue());\n      }\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76b2395079a51ec9c99b4d38c3967f035ab47cdb","date":1544206602,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingMultiValuedLongFirst().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting#testMissingMultiValuedLongFirst().mjava","sourceNew":"  public void testMissingMultiValuedLongFirst() throws Exception {\n    for (boolean reverse : new boolean[] {true, false}) {\n      Directory dir = newDirectory();\n      IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n      SortField sortField = new SortedNumericSortField(\"foo\", SortField.Type.LONG, reverse);\n      sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n      Sort indexSort = new Sort(sortField);\n      iwc.setIndexSort(indexSort);\n      IndexWriter w = new IndexWriter(dir, iwc);\n      Document doc = new Document();\n      doc.add(new NumericDocValuesField(\"id\", 3));\n      doc.add(new SortedNumericDocValuesField(\"foo\", 18));\n      doc.add(new SortedNumericDocValuesField(\"foo\", 27));\n      w.addDocument(doc);\n      // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n      w.commit();\n\n      // missing\n      doc = new Document();\n      doc.add(new NumericDocValuesField(\"id\", 1));\n      w.addDocument(doc);\n      w.commit();\n\n      doc = new Document();\n      doc.add(new NumericDocValuesField(\"id\", 2));\n      doc.add(new SortedNumericDocValuesField(\"foo\", 7));\n      doc.add(new SortedNumericDocValuesField(\"foo\", 24));\n      w.addDocument(doc);\n      w.forceMerge(1);\n\n      DirectoryReader r = DirectoryReader.open(w);\n      LeafReader leaf = getOnlyLeafReader(r);\n      assertEquals(3, leaf.maxDoc());\n      NumericDocValues values = leaf.getNumericDocValues(\"id\");\n      if (reverse) {\n        assertEquals(0, values.nextDoc());\n        assertEquals(3, values.longValue());\n        assertEquals(1, values.nextDoc());\n        assertEquals(2, values.longValue());\n        assertEquals(2, values.nextDoc());\n        assertEquals(1, values.longValue());\n      } else {\n        assertEquals(0, values.nextDoc());\n        assertEquals(1, values.longValue());\n        assertEquals(1, values.nextDoc());\n        assertEquals(2, values.longValue());\n        assertEquals(2, values.nextDoc());\n        assertEquals(3, values.longValue());\n      }\n      r.close();\n      w.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testMissingMultiValuedLongFirst() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()));\n    SortField sortField = new SortedNumericSortField(\"foo\", SortField.Type.LONG);\n    sortField.setMissingValue(Long.valueOf(Long.MIN_VALUE));\n    Sort indexSort = new Sort(sortField);\n    iwc.setIndexSort(indexSort);\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 3));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 18));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 27));\n    w.addDocument(doc);\n    // so we get more than one segment, so that forceMerge actually does merge, since we only get a sorted segment by merging:\n    w.commit();\n\n    // missing\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 1));\n    w.addDocument(doc);\n    w.commit();\n\n    doc = new Document();\n    doc.add(new NumericDocValuesField(\"id\", 2));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 7));\n    doc.add(new SortedNumericDocValuesField(\"foo\", 24));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    LeafReader leaf = getOnlyLeafReader(r);\n    assertEquals(3, leaf.maxDoc());\n    NumericDocValues values = leaf.getNumericDocValues(\"id\");\n    assertEquals(0, values.nextDoc());\n    assertEquals(1, values.longValue());\n    assertEquals(1, values.nextDoc());\n    assertEquals(2, values.longValue());\n    assertEquals(2, values.nextDoc());\n    assertEquals(3, values.longValue());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66dc286cff642f0c485052d838cfba579b3f84d3":["67d866889b0c200f91ef946ae758a42d324216da"],"67d866889b0c200f91ef946ae758a42d324216da":["e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"76b2395079a51ec9c99b4d38c3967f035ab47cdb":["66dc286cff642f0c485052d838cfba579b3f84d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["76b2395079a51ec9c99b4d38c3967f035ab47cdb"]},"commit2Childs":{"66dc286cff642f0c485052d838cfba579b3f84d3":["76b2395079a51ec9c99b4d38c3967f035ab47cdb"],"67d866889b0c200f91ef946ae758a42d324216da":["66dc286cff642f0c485052d838cfba579b3f84d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["67d866889b0c200f91ef946ae758a42d324216da","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"76b2395079a51ec9c99b4d38c3967f035ab47cdb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}