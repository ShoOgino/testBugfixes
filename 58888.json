{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootCachedArc(int,Arc[T]).mjava","commits":[{"id":"7f32ed90e12610550e1363aea43afe3d6e292cf9","date":1418230105,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootCachedArc(int,Arc[T]).mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-5152: called only from asserts, to validate that the\n  // non-cached arc lookup would produce the same result, to\n  // catch callers that illegally modify shared structures with\n  // the result (we shallow-clone the Arc itself, but e.g. a BytesRef\n  // output is still shared):\n  private boolean assertRootCachedArc(int label, Arc<T> cachedArc) throws IOException {\n    Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    BytesReader in = getBytesReader();\n    Arc<T> result = findTargetArc(label, arc, arc, in, false);\n    if (result == null) {\n      assert cachedArc == null;\n    } else {\n      assert cachedArc != null;\n      assert cachedArc.arcIdx == result.arcIdx;\n      assert cachedArc.bytesPerArc == result.bytesPerArc;\n      assert cachedArc.flags == result.flags;\n      assert cachedArc.label == result.label;\n      assert cachedArc.nextArc == result.nextArc;\n      assert cachedArc.nextFinalOutput.equals(result.nextFinalOutput);\n      assert cachedArc.node == result.node;\n      assert cachedArc.numArcs == result.numArcs;\n      assert cachedArc.output.equals(result.output);\n      assert cachedArc.posArcsStart == result.posArcsStart;\n      assert cachedArc.target == result.target;\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cbc4730743fac2e69e7d622848778d3ad9f2151","date":1502282443,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootCachedArc(int,Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootCachedArc(int,Arc[T]).mjava","sourceNew":"  // LUCENE-5152: called only from asserts, to validate that the\n  // non-cached arc lookup would produce the same result, to\n  // catch callers that illegally modify shared structures with\n  // the result (we shallow-clone the Arc itself, but e.g. a BytesRef\n  // output is still shared):\n  private boolean assertRootCachedArc(int label, Arc<T> cachedArc) throws IOException {\n    Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    BytesReader in = getBytesReader();\n    Arc<T> result = findTargetArc(label, arc, arc, in, false);\n    if (result == null) {\n      assert cachedArc == null;\n    } else {\n      assert cachedArc != null;\n      assert cachedArc.arcIdx == result.arcIdx;\n      assert cachedArc.bytesPerArc == result.bytesPerArc;\n      assert cachedArc.flags == result.flags;\n      assert cachedArc.label == result.label;\n      assert cachedArc.nextArc == result.nextArc;\n      assert cachedArc.nextFinalOutput.equals(result.nextFinalOutput);\n      assert cachedArc.numArcs == result.numArcs;\n      assert cachedArc.output.equals(result.output);\n      assert cachedArc.posArcsStart == result.posArcsStart;\n      assert cachedArc.target == result.target;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  // LUCENE-5152: called only from asserts, to validate that the\n  // non-cached arc lookup would produce the same result, to\n  // catch callers that illegally modify shared structures with\n  // the result (we shallow-clone the Arc itself, but e.g. a BytesRef\n  // output is still shared):\n  private boolean assertRootCachedArc(int label, Arc<T> cachedArc) throws IOException {\n    Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    BytesReader in = getBytesReader();\n    Arc<T> result = findTargetArc(label, arc, arc, in, false);\n    if (result == null) {\n      assert cachedArc == null;\n    } else {\n      assert cachedArc != null;\n      assert cachedArc.arcIdx == result.arcIdx;\n      assert cachedArc.bytesPerArc == result.bytesPerArc;\n      assert cachedArc.flags == result.flags;\n      assert cachedArc.label == result.label;\n      assert cachedArc.nextArc == result.nextArc;\n      assert cachedArc.nextFinalOutput.equals(result.nextFinalOutput);\n      assert cachedArc.node == result.node;\n      assert cachedArc.numArcs == result.numArcs;\n      assert cachedArc.output.equals(result.output);\n      assert cachedArc.posArcsStart == result.posArcsStart;\n      assert cachedArc.target == result.target;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootCachedArc(int,Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootCachedArc(int,Arc[T]).mjava","sourceNew":"  // LUCENE-5152: called only from asserts, to validate that the\n  // non-cached arc lookup would produce the same result, to\n  // catch callers that illegally modify shared structures with\n  // the result (we shallow-clone the Arc itself, but e.g. a BytesRef\n  // output is still shared):\n  private boolean assertRootCachedArc(int label, Arc<T> cachedArc) throws IOException {\n    Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    BytesReader in = getBytesReader();\n    Arc<T> result = findTargetArc(label, arc, arc, in, false);\n    if (result == null) {\n      assert cachedArc == null;\n    } else {\n      assert cachedArc != null;\n      assert cachedArc.arcIdx == result.arcIdx;\n      assert cachedArc.bytesPerArc == result.bytesPerArc;\n      assert cachedArc.flags == result.flags;\n      assert cachedArc.label == result.label;\n      assert cachedArc.nextArc == result.nextArc;\n      assert cachedArc.nextFinalOutput.equals(result.nextFinalOutput);\n      assert cachedArc.numArcs == result.numArcs;\n      assert cachedArc.output.equals(result.output);\n      assert cachedArc.posArcsStart == result.posArcsStart;\n      assert cachedArc.target == result.target;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  // LUCENE-5152: called only from asserts, to validate that the\n  // non-cached arc lookup would produce the same result, to\n  // catch callers that illegally modify shared structures with\n  // the result (we shallow-clone the Arc itself, but e.g. a BytesRef\n  // output is still shared):\n  private boolean assertRootCachedArc(int label, Arc<T> cachedArc) throws IOException {\n    Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    BytesReader in = getBytesReader();\n    Arc<T> result = findTargetArc(label, arc, arc, in, false);\n    if (result == null) {\n      assert cachedArc == null;\n    } else {\n      assert cachedArc != null;\n      assert cachedArc.arcIdx == result.arcIdx;\n      assert cachedArc.bytesPerArc == result.bytesPerArc;\n      assert cachedArc.flags == result.flags;\n      assert cachedArc.label == result.label;\n      assert cachedArc.nextArc == result.nextArc;\n      assert cachedArc.nextFinalOutput.equals(result.nextFinalOutput);\n      assert cachedArc.node == result.node;\n      assert cachedArc.numArcs == result.numArcs;\n      assert cachedArc.output.equals(result.output);\n      assert cachedArc.posArcsStart == result.posArcsStart;\n      assert cachedArc.target == result.target;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootCachedArc(int,Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootCachedArc(int,Arc[T]).mjava","sourceNew":"  // LUCENE-5152: called only from asserts, to validate that the\n  // non-cached arc lookup would produce the same result, to\n  // catch callers that illegally modify shared structures with\n  // the result (we shallow-clone the Arc itself, but e.g. a BytesRef\n  // output is still shared):\n  private boolean assertRootCachedArc(int label, Arc<T> cachedArc) throws IOException {\n    Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    BytesReader in = getBytesReader();\n    Arc<T> result = findTargetArc(label, arc, arc, in, false);\n    if (result == null) {\n      assert cachedArc == null;\n    } else {\n      assert cachedArc != null;\n      assert cachedArc.arcIdx == result.arcIdx;\n      assert cachedArc.bytesPerArc == result.bytesPerArc;\n      assert cachedArc.flags == result.flags;\n      assert cachedArc.label == result.label;\n      assert cachedArc.nextArc == result.nextArc;\n      assert cachedArc.nextFinalOutput.equals(result.nextFinalOutput);\n      assert cachedArc.numArcs == result.numArcs;\n      assert cachedArc.output.equals(result.output);\n      assert cachedArc.posArcsStart == result.posArcsStart;\n      assert cachedArc.target == result.target;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  // LUCENE-5152: called only from asserts, to validate that the\n  // non-cached arc lookup would produce the same result, to\n  // catch callers that illegally modify shared structures with\n  // the result (we shallow-clone the Arc itself, but e.g. a BytesRef\n  // output is still shared):\n  private boolean assertRootCachedArc(int label, Arc<T> cachedArc) throws IOException {\n    Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    BytesReader in = getBytesReader();\n    Arc<T> result = findTargetArc(label, arc, arc, in, false);\n    if (result == null) {\n      assert cachedArc == null;\n    } else {\n      assert cachedArc != null;\n      assert cachedArc.arcIdx == result.arcIdx;\n      assert cachedArc.bytesPerArc == result.bytesPerArc;\n      assert cachedArc.flags == result.flags;\n      assert cachedArc.label == result.label;\n      assert cachedArc.nextArc == result.nextArc;\n      assert cachedArc.nextFinalOutput.equals(result.nextFinalOutput);\n      assert cachedArc.node == result.node;\n      assert cachedArc.numArcs == result.numArcs;\n      assert cachedArc.output.equals(result.output);\n      assert cachedArc.posArcsStart == result.posArcsStart;\n      assert cachedArc.target == result.target;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae67e1f82a53594208ca929f382ee861dad3d7a8","date":1557134375,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootCachedArc(int,Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootCachedArc(int,Arc[T]).mjava","sourceNew":"  // LUCENE-5152: called only from asserts, to validate that the\n  // non-cached arc lookup would produce the same result, to\n  // catch callers that illegally modify shared structures with\n  // the result (we shallow-clone the Arc itself, but e.g. a BytesRef\n  // output is still shared):\n  private boolean assertRootCachedArc(int label, Arc<T> cachedArc) throws IOException {\n    Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    BytesReader in = getBytesReader();\n    Arc<T> result = findTargetArc(label, arc, arc, in, false);\n    if (result == null) {\n      assert cachedArc == null;\n    } else {\n      assert cachedArc != null;\n      assert cachedArc.arcIdx == result.arcIdx;\n      assert cachedArc.bytesPerArc == result.bytesPerArc;\n      assert cachedArc.flags == result.flags;\n      assert cachedArc.label == result.label;\n      if (cachedArc.bytesPerArc == 0 || cachedArc.arcIdx == Integer.MIN_VALUE) {\n        // in the sparse array case, this value is not valid, so don't assert it\n        assert cachedArc.nextArc == result.nextArc;\n      }\n      assert cachedArc.nextFinalOutput.equals(result.nextFinalOutput);\n      assert cachedArc.numArcs == result.numArcs;\n      assert cachedArc.output.equals(result.output);\n      assert cachedArc.posArcsStart == result.posArcsStart;\n      assert cachedArc.target == result.target;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  // LUCENE-5152: called only from asserts, to validate that the\n  // non-cached arc lookup would produce the same result, to\n  // catch callers that illegally modify shared structures with\n  // the result (we shallow-clone the Arc itself, but e.g. a BytesRef\n  // output is still shared):\n  private boolean assertRootCachedArc(int label, Arc<T> cachedArc) throws IOException {\n    Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    BytesReader in = getBytesReader();\n    Arc<T> result = findTargetArc(label, arc, arc, in, false);\n    if (result == null) {\n      assert cachedArc == null;\n    } else {\n      assert cachedArc != null;\n      assert cachedArc.arcIdx == result.arcIdx;\n      assert cachedArc.bytesPerArc == result.bytesPerArc;\n      assert cachedArc.flags == result.flags;\n      assert cachedArc.label == result.label;\n      assert cachedArc.nextArc == result.nextArc;\n      assert cachedArc.nextFinalOutput.equals(result.nextFinalOutput);\n      assert cachedArc.numArcs == result.numArcs;\n      assert cachedArc.output.equals(result.output);\n      assert cachedArc.posArcsStart == result.posArcsStart;\n      assert cachedArc.target == result.target;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootCachedArc(int,Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootCachedArc(int,Arc[T]).mjava","sourceNew":"  // LUCENE-5152: called only from asserts, to validate that the\n  // non-cached arc lookup would produce the same result, to\n  // catch callers that illegally modify shared structures with\n  // the result (we shallow-clone the Arc itself, but e.g. a BytesRef\n  // output is still shared):\n  private boolean assertRootCachedArc(int label, Arc<T> cachedArc) throws IOException {\n    Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    BytesReader in = getBytesReader();\n    Arc<T> result = findTargetArc(label, arc, arc, in, false);\n    if (result == null) {\n      assert cachedArc == null;\n    } else {\n      assert cachedArc != null;\n      assert cachedArc.arcIdx() == result.arcIdx();\n      assert cachedArc.bytesPerArc() == result.bytesPerArc();\n      assert cachedArc.flags() == result.flags();\n      assert cachedArc.label() == result.label();\n      assert (cachedArc.bytesPerArc() != 0 && cachedArc.arcIdx() != Integer.MIN_VALUE) || cachedArc.nextArc() == result.nextArc();\n      assert cachedArc.nextFinalOutput().equals(result.nextFinalOutput());\n      assert cachedArc.numArcs() == result.numArcs();\n      assert cachedArc.output().equals(result.output());\n      assert cachedArc.posArcsStart() == result.posArcsStart();\n      assert cachedArc.target() == result.target();\n    }\n\n    return true;\n  }\n\n","sourceOld":"  // LUCENE-5152: called only from asserts, to validate that the\n  // non-cached arc lookup would produce the same result, to\n  // catch callers that illegally modify shared structures with\n  // the result (we shallow-clone the Arc itself, but e.g. a BytesRef\n  // output is still shared):\n  private boolean assertRootCachedArc(int label, Arc<T> cachedArc) throws IOException {\n    Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    BytesReader in = getBytesReader();\n    Arc<T> result = findTargetArc(label, arc, arc, in, false);\n    if (result == null) {\n      assert cachedArc == null;\n    } else {\n      assert cachedArc != null;\n      assert cachedArc.arcIdx == result.arcIdx;\n      assert cachedArc.bytesPerArc == result.bytesPerArc;\n      assert cachedArc.flags == result.flags;\n      assert cachedArc.label == result.label;\n      if (cachedArc.bytesPerArc == 0 || cachedArc.arcIdx == Integer.MIN_VALUE) {\n        // in the sparse array case, this value is not valid, so don't assert it\n        assert cachedArc.nextArc == result.nextArc;\n      }\n      assert cachedArc.nextFinalOutput.equals(result.nextFinalOutput);\n      assert cachedArc.numArcs == result.numArcs;\n      assert cachedArc.output.equals(result.output);\n      assert cachedArc.posArcsStart == result.posArcsStart;\n      assert cachedArc.target == result.target;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootCachedArc(int,Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootCachedArc(int,Arc[T]).mjava","sourceNew":"  // LUCENE-5152: called only from asserts, to validate that the\n  // non-cached arc lookup would produce the same result, to\n  // catch callers that illegally modify shared structures with\n  // the result (we shallow-clone the Arc itself, but e.g. a BytesRef\n  // output is still shared):\n  private boolean assertRootCachedArc(int label, Arc<T> cachedArc) throws IOException {\n    Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    BytesReader in = getBytesReader();\n    Arc<T> result = findTargetArc(label, arc, arc, in, false);\n    if (result == null) {\n      assert cachedArc == null;\n    } else {\n      assert cachedArc != null;\n      assert cachedArc.arcIdx() == result.arcIdx();\n      assert cachedArc.bytesPerArc() == result.bytesPerArc();\n      assert cachedArc.flags() == result.flags();\n      assert cachedArc.label() == result.label();\n      assert (cachedArc.bytesPerArc() != 0 && cachedArc.arcIdx() != Integer.MIN_VALUE) || cachedArc.nextArc() == result.nextArc();\n      assert cachedArc.nextFinalOutput().equals(result.nextFinalOutput());\n      assert cachedArc.numArcs() == result.numArcs();\n      assert cachedArc.output().equals(result.output());\n      assert cachedArc.posArcsStart() == result.posArcsStart();\n      assert cachedArc.target() == result.target();\n    }\n\n    return true;\n  }\n\n","sourceOld":"  // LUCENE-5152: called only from asserts, to validate that the\n  // non-cached arc lookup would produce the same result, to\n  // catch callers that illegally modify shared structures with\n  // the result (we shallow-clone the Arc itself, but e.g. a BytesRef\n  // output is still shared):\n  private boolean assertRootCachedArc(int label, Arc<T> cachedArc) throws IOException {\n    Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    BytesReader in = getBytesReader();\n    Arc<T> result = findTargetArc(label, arc, arc, in, false);\n    if (result == null) {\n      assert cachedArc == null;\n    } else {\n      assert cachedArc != null;\n      assert cachedArc.arcIdx == result.arcIdx;\n      assert cachedArc.bytesPerArc == result.bytesPerArc;\n      assert cachedArc.flags == result.flags;\n      assert cachedArc.label == result.label;\n      if (cachedArc.bytesPerArc == 0 || cachedArc.arcIdx == Integer.MIN_VALUE) {\n        // in the sparse array case, this value is not valid, so don't assert it\n        assert cachedArc.nextArc == result.nextArc;\n      }\n      assert cachedArc.nextFinalOutput.equals(result.nextFinalOutput);\n      assert cachedArc.numArcs == result.numArcs;\n      assert cachedArc.output.equals(result.output);\n      assert cachedArc.posArcsStart == result.posArcsStart;\n      assert cachedArc.target == result.target;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootCachedArc(int,Arc[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootCachedArc(int,Arc[T]).mjava","sourceNew":"  // LUCENE-5152: called only from asserts, to validate that the\n  // non-cached arc lookup would produce the same result, to\n  // catch callers that illegally modify shared structures with\n  // the result (we shallow-clone the Arc itself, but e.g. a BytesRef\n  // output is still shared):\n  private boolean assertRootCachedArc(int label, Arc<T> cachedArc) throws IOException {\n    Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    BytesReader in = getBytesReader();\n    Arc<T> result = findTargetArc(label, arc, arc, in, false);\n    if (result == null) {\n      assert cachedArc == null;\n    } else {\n      assert cachedArc != null;\n      assert cachedArc.arcIdx() == result.arcIdx();\n      assert cachedArc.bytesPerArc() == result.bytesPerArc();\n      assert cachedArc.flags() == result.flags();\n      assert cachedArc.label() == result.label();\n      assert cachedArc.bytesPerArc() != 0 || cachedArc.nextArc() == result.nextArc();\n      assert cachedArc.nextFinalOutput().equals(result.nextFinalOutput());\n      assert cachedArc.numArcs() == result.numArcs();\n      assert cachedArc.output().equals(result.output());\n      assert cachedArc.posArcsStart() == result.posArcsStart();\n      assert cachedArc.target() == result.target();\n      assert cachedArc.nodeFlags() == result.nodeFlags();\n      assert cachedArc.nodeFlags() != ARCS_FOR_DIRECT_ADDRESSING || cachedArc.firstLabel() == result.firstLabel();\n    }\n\n    return true;\n  }\n\n","sourceOld":"  // LUCENE-5152: called only from asserts, to validate that the\n  // non-cached arc lookup would produce the same result, to\n  // catch callers that illegally modify shared structures with\n  // the result (we shallow-clone the Arc itself, but e.g. a BytesRef\n  // output is still shared):\n  private boolean assertRootCachedArc(int label, Arc<T> cachedArc) throws IOException {\n    Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    BytesReader in = getBytesReader();\n    Arc<T> result = findTargetArc(label, arc, arc, in, false);\n    if (result == null) {\n      assert cachedArc == null;\n    } else {\n      assert cachedArc != null;\n      assert cachedArc.arcIdx() == result.arcIdx();\n      assert cachedArc.bytesPerArc() == result.bytesPerArc();\n      assert cachedArc.flags() == result.flags();\n      assert cachedArc.label() == result.label();\n      assert (cachedArc.bytesPerArc() != 0 && cachedArc.arcIdx() != Integer.MIN_VALUE) || cachedArc.nextArc() == result.nextArc();\n      assert cachedArc.nextFinalOutput().equals(result.nextFinalOutput());\n      assert cachedArc.numArcs() == result.numArcs();\n      assert cachedArc.output().equals(result.output());\n      assert cachedArc.posArcsStart() == result.posArcsStart();\n      assert cachedArc.target() == result.target();\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfe04a006c42318f41df58bdd061cc1065b5f688","date":1574780842,"type":4,"author":"Bruno Roustant","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#assertRootCachedArc(int,Arc[T]).mjava","sourceNew":null,"sourceOld":"  // LUCENE-5152: called only from asserts, to validate that the\n  // non-cached arc lookup would produce the same result, to\n  // catch callers that illegally modify shared structures with\n  // the result (we shallow-clone the Arc itself, but e.g. a BytesRef\n  // output is still shared):\n  private boolean assertRootCachedArc(int label, Arc<T> cachedArc) throws IOException {\n    Arc<T> arc = new Arc<>();\n    getFirstArc(arc);\n    BytesReader in = getBytesReader();\n    Arc<T> result = findTargetArc(label, arc, arc, in, false);\n    if (result == null) {\n      assert cachedArc == null;\n    } else {\n      assert cachedArc != null;\n      assert cachedArc.arcIdx() == result.arcIdx();\n      assert cachedArc.bytesPerArc() == result.bytesPerArc();\n      assert cachedArc.flags() == result.flags();\n      assert cachedArc.label() == result.label();\n      assert cachedArc.bytesPerArc() != 0 || cachedArc.nextArc() == result.nextArc();\n      assert cachedArc.nextFinalOutput().equals(result.nextFinalOutput());\n      assert cachedArc.numArcs() == result.numArcs();\n      assert cachedArc.output().equals(result.output());\n      assert cachedArc.posArcsStart() == result.posArcsStart();\n      assert cachedArc.target() == result.target();\n      assert cachedArc.nodeFlags() == result.nodeFlags();\n      assert cachedArc.nodeFlags() != ARCS_FOR_DIRECT_ADDRESSING || cachedArc.firstLabel() == result.firstLabel();\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["7f32ed90e12610550e1363aea43afe3d6e292cf9","9cbc4730743fac2e69e7d622848778d3ad9f2151"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9cbc4730743fac2e69e7d622848778d3ad9f2151":["7f32ed90e12610550e1363aea43afe3d6e292cf9"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["7f32ed90e12610550e1363aea43afe3d6e292cf9","9cbc4730743fac2e69e7d622848778d3ad9f2151"],"71d31a7d5773508492505519bb5230b87c8937ad":["54204c8a3ca26aeafd273139fc29baf70d0f6786"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["9cbc4730743fac2e69e7d622848778d3ad9f2151"],"f8061ddd97f3352007d927dae445884a6f3d857b":["ae67e1f82a53594208ca929f382ee861dad3d7a8","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfe04a006c42318f41df58bdd061cc1065b5f688"],"cfe04a006c42318f41df58bdd061cc1065b5f688":["71d31a7d5773508492505519bb5230b87c8937ad"],"7f32ed90e12610550e1363aea43afe3d6e292cf9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["71d31a7d5773508492505519bb5230b87c8937ad","f8061ddd97f3352007d927dae445884a6f3d857b"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f32ed90e12610550e1363aea43afe3d6e292cf9"],"9cbc4730743fac2e69e7d622848778d3ad9f2151":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","ae67e1f82a53594208ca929f382ee861dad3d7a8"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"71d31a7d5773508492505519bb5230b87c8937ad":["cfe04a006c42318f41df58bdd061cc1065b5f688"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"7f32ed90e12610550e1363aea43afe3d6e292cf9":["58884af1f68e9d61c217c753fbd6266d86a63b14","9cbc4730743fac2e69e7d622848778d3ad9f2151","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"cfe04a006c42318f41df58bdd061cc1065b5f688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}